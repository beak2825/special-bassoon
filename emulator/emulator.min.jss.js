data:application/octet-stream;base64,class EJS_STORAGE {
    constructor(t, e) {
        this.dbName = t,
        this.storeName = e
    }
    addFileToDB(t, e) {
        (async () => {
            if ("?EJS_KEYS!" === t)
                return;
            let i = await this.get("?EJS_KEYS!");
            if (i || (i = []),
            e)
                i.includes(t) || i.push(t);
            else {
                const e = i.indexOf(t);
                -1 !== e && i.splice(e, 1)
            }
            this.put("?EJS_KEYS!", i)
        }
        )()
    }
    get(t) {
        return new Promise(( (e, i) => {
            if (!window.indexedDB)
                return e();
            let n = indexedDB.open(this.dbName, 1);
            n.onerror = () => e(),
            n.onsuccess = () => {
                let i = n.result.transaction([this.storeName], "readwrite").objectStore(this.storeName).get(t);
                i.onsuccess = t => {
                    e(i.result)
                }
                ,
                i.onerror = () => e()
            }
            ,
            n.onupgradeneeded = () => {
                let t = n.result;
                t.objectStoreNames.contains(this.storeName) || t.createObjectStore(this.storeName)
            }
        }
        ))
    }
    put(t, e) {
        return new Promise(( (i, n) => {
            if (!window.indexedDB)
                return i();
            let s = indexedDB.open(this.dbName, 1);
            s.onerror = () => {}
            ,
            s.onsuccess = () => {
                let n = s.result.transaction([this.storeName], "readwrite").objectStore(this.storeName).put(e, t);
                n.onerror = () => i(),
                n.onsuccess = () => {
                    this.addFileToDB(t, !0),
                    i()
                }
            }
            ,
            s.onupgradeneeded = () => {
                let t = s.result;
                t.objectStoreNames.contains(this.storeName) || t.createObjectStore(this.storeName)
            }
        }
        ))
    }
    remove(t) {
        return new Promise(( (e, i) => {
            if (!window.indexedDB)
                return e();
            let n = indexedDB.open(this.dbName, 1);
            n.onerror = () => {}
            ,
            n.onsuccess = () => {
                let i = n.result.transaction([this.storeName], "readwrite").objectStore(this.storeName).delete(t);
                this.addFileToDB(t, !1),
                i.onsuccess = () => e(),
                i.onerror = () => {}
            }
            ,
            n.onupgradeneeded = () => {
                let t = n.result;
                t.objectStoreNames.contains(this.storeName) || t.createObjectStore(this.storeName)
            }
        }
        ))
    }
    getSizes() {
        return new Promise((async (t, e) => {
            window.indexedDB || t({});
            const i = await this.get("?EJS_KEYS!");
            if (!i)
                return t({});
            let n = {};
            for (let t = 0; t < i.length; t++) {
                const e = await this.get(i[t]);
                e && e.data && "number" == typeof e.data.byteLength && (n[i[t]] = e.data.byteLength)
            }
            t(n)
        }
        ))
    }
}
class EJS_DUMMYSTORAGE {
    constructor() {}
    addFileToDB() {
        return new Promise((t => t()))
    }
    get() {
        return new Promise((t => t()))
    }
    put() {
        return new Promise((t => t()))
    }
    remove() {
        return new Promise((t => t()))
    }
    getSizes() {
        return new Promise((t => t({})))
    }
}
window.EJS_STORAGE = EJS_STORAGE,
window.EJS_DUMMYSTORAGE = EJS_DUMMYSTORAGE,
function(t, e) {
    "object" == typeof exports && "undefined" != typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define(e) : (t = "undefined" != typeof globalThis ? globalThis : t || self).io = e()
}(this, (function() {
    "use strict";
    function t(t, e) {
        (null == e || e > t.length) && (e = t.length);
        for (var i = 0, n = Array(e); i < e; i++)
            n[i] = t[i];
        return n
    }
    function e(t, e) {
        for (var i = 0; i < e.length; i++) {
            var n = e[i];
            n.enumerable = n.enumerable || !1,
            n.configurable = !0,
            "value"in n && (n.writable = !0),
            Object.defineProperty(t, c(n.key), n)
        }
    }
    function i(t, i, n) {
        return i && e(t.prototype, i),
        n && e(t, n),
        Object.defineProperty(t, "prototype", {
            writable: !1
        }),
        t
    }
    function n(e, i) {
        var n = "undefined" != typeof Symbol && e[Symbol.iterator] || e["@@iterator"];
        if (!n) {
            if (Array.isArray(e) || (n = function(e, i) {
                if (e) {
                    if ("string" == typeof e)
                        return t(e, i);
                    var n = {}.toString.call(e).slice(8, -1);
                    return "Object" === n && e.constructor && (n = e.constructor.name),
                    "Map" === n || "Set" === n ? Array.from(e) : "Arguments" === n || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n) ? t(e, i) : void 0
                }
            }(e)) || i && e && "number" == typeof e.length) {
                n && (e = n);
                var s = 0
                  , o = function() {};
                return {
                    s: o,
                    n: function() {
                        return s >= e.length ? {
                            done: !0
                        } : {
                            done: !1,
                            value: e[s++]
                        }
                    },
                    e: function(t) {
                        throw t
                    },
                    f: o
                }
            }
            throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")
        }
        var a, l = !0, r = !1;
        return {
            s: function() {
                n = n.call(e)
            },
            n: function() {
                var t = n.next();
                return l = t.done,
                t
            },
            e: function(t) {
                r = !0,
                a = t
            },
            f: function() {
                try {
                    l || null == n.return || n.return()
                } finally {
                    if (r)
                        throw a
                }
            }
        }
    }
    function s() {
        return s = Object.assign ? Object.assign.bind() : function(t) {
            for (var e = 1; e < arguments.length; e++) {
                var i = arguments[e];
                for (var n in i)
                    ({}).hasOwnProperty.call(i, n) && (t[n] = i[n])
            }
            return t
        }
        ,
        s.apply(null, arguments)
    }
    function o(t) {
        return o = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
            return t.__proto__ || Object.getPrototypeOf(t)
        }
        ,
        o(t)
    }
    function a(t, e) {
        t.prototype = Object.create(e.prototype),
        t.prototype.constructor = t,
        r(t, e)
    }
    function l() {
        try {
            var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function() {}
            )))
        } catch (t) {}
        return (l = function() {
            return !!t
        }
        )()
    }
    function r(t, e) {
        return r = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {
            return t.__proto__ = e,
            t
        }
        ,
        r(t, e)
    }
    function c(t) {
        var e = function(t) {
            if ("object" != typeof t || !t)
                return t;
            var e = t[Symbol.toPrimitive];
            if (void 0 !== e) {
                var i = e.call(t, "string");
                if ("object" != typeof i)
                    return i;
                throw new TypeError("@@toPrimitive must return a primitive value.")
            }
            return String(t)
        }(t);
        return "symbol" == typeof e ? e : e + ""
    }
    function d(t) {
        return d = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(t) {
            return typeof t
        }
        : function(t) {
            return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t
        }
        ,
        d(t)
    }
    function g(t) {
        var e = "function" == typeof Map ? new Map : void 0;
        return g = function(t) {
            if (null === t || !function(t) {
                try {
                    return -1 !== Function.toString.call(t).indexOf("[native code]")
                } catch (e) {
                    return "function" == typeof t
                }
            }(t))
                return t;
            if ("function" != typeof t)
                throw new TypeError("Super expression must either be null or a function");
            if (void 0 !== e) {
                if (e.has(t))
                    return e.get(t);
                e.set(t, i)
            }
            function i() {
                return function(t, e, i) {
                    if (l())
                        return Reflect.construct.apply(null, arguments);
                    var n = [null];
                    n.push.apply(n, e);
                    var s = new (t.bind.apply(t, n));
                    return i && r(s, i.prototype),
                    s
                }(t, arguments, o(this).constructor)
            }
            return i.prototype = Object.create(t.prototype, {
                constructor: {
                    value: i,
                    enumerable: !1,
                    writable: !0,
                    configurable: !0
                }
            }),
            r(i, t)
        }
        ,
        g(t)
    }
    var h = Object.create(null);
    h.open = "0",
    h.close = "1",
    h.ping = "2",
    h.pong = "3",
    h.message = "4",
    h.upgrade = "5",
    h.noop = "6";
    var p = Object.create(null);
    Object.keys(h).forEach((function(t) {
        p[h[t]] = t
    }
    ));
    var u, m = {
        type: "error",
        data: "parser error"
    }, I = "function" == typeof Blob || "undefined" != typeof Blob && "[object BlobConstructor]" === Object.prototype.toString.call(Blob), C = "function" == typeof ArrayBuffer, b = function(t) {
        return "function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(t) : t && t.buffer instanceof ArrayBuffer
    }, y = function(t, e, i) {
        var n = t.type
          , s = t.data;
        return I && s instanceof Blob ? e ? i(s) : Z(s, i) : C && (s instanceof ArrayBuffer || b(s)) ? e ? i(s) : Z(new Blob([s]), i) : i(h[n] + (s || ""))
    }, Z = function(t, e) {
        var i = new FileReader;
        return i.onload = function() {
            var t = i.result.split(",")[1];
            e("b" + (t || ""))
        }
        ,
        i.readAsDataURL(t)
    };
    function V(t) {
        return t instanceof Uint8Array ? t : t instanceof ArrayBuffer ? new Uint8Array(t) : new Uint8Array(t.buffer,t.byteOffset,t.byteLength)
    }
    for (var f = "undefined" == typeof Uint8Array ? [] : new Uint8Array(256), B = 0; B < 64; B++)
        f["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charCodeAt(B)] = B;
    var S, A = "function" == typeof ArrayBuffer, v = function(t, e) {
        if ("string" != typeof t)
            return {
                type: "message",
                data: U(t, e)
            };
        var i = t.charAt(0);
        return "b" === i ? {
            type: "message",
            data: w(t.substring(1), e)
        } : p[i] ? t.length > 1 ? {
            type: p[i],
            data: t.substring(1)
        } : {
            type: p[i]
        } : m
    }, w = function(t, e) {
        if (A) {
            var i = function(t) {
                var e, i, n, s, o, a = .75 * t.length, l = t.length, r = 0;
                "=" === t[t.length - 1] && (a--,
                "=" === t[t.length - 2] && a--);
                var c = new ArrayBuffer(a)
                  , d = new Uint8Array(c);
                for (e = 0; e < l; e += 4)
                    i = f[t.charCodeAt(e)],
                    n = f[t.charCodeAt(e + 1)],
                    s = f[t.charCodeAt(e + 2)],
                    o = f[t.charCodeAt(e + 3)],
                    d[r++] = i << 2 | n >> 4,
                    d[r++] = (15 & n) << 4 | s >> 2,
                    d[r++] = (3 & s) << 6 | 63 & o;
                return c
            }(t);
            return U(i, e)
        }
        return {
            base64: !0,
            data: t
        }
    }, U = function(t, e) {
        return "blob" === e ? t instanceof Blob ? t : new Blob([t]) : t instanceof ArrayBuffer ? t : t.buffer
    }, N = String.fromCharCode(30);
    function M(t) {
        return t.reduce((function(t, e) {
            return t + e.length
        }
        ), 0)
    }
    function W(t, e) {
        if (t[0].length === e)
            return t.shift();
        for (var i = new Uint8Array(e), n = 0, s = 0; s < e; s++)
            i[s] = t[0][n++],
            n === t[0].length && (t.shift(),
            n = 0);
        return t.length && n < t[0].length && (t[0] = t[0].slice(n)),
        i
    }
    function F(t) {
        if (t)
            return function(t) {
                for (var e in F.prototype)
                    t[e] = F.prototype[e];
                return t
            }(t)
    }
    F.prototype.on = F.prototype.addEventListener = function(t, e) {
        return this.t = this.t || {},
        (this.t["$" + t] = this.t["$" + t] || []).push(e),
        this
    }
    ,
    F.prototype.once = function(t, e) {
        function i() {
            this.off(t, i),
            e.apply(this, arguments)
        }
        return i.fn = e,
        this.on(t, i),
        this
    }
    ,
    F.prototype.off = F.prototype.removeListener = F.prototype.removeAllListeners = F.prototype.removeEventListener = function(t, e) {
        if (this.t = this.t || {},
        0 == arguments.length)
            return this.t = {},
            this;
        var i, n = this.t["$" + t];
        if (!n)
            return this;
        if (1 == arguments.length)
            return delete this.t["$" + t],
            this;
        for (var s = 0; s < n.length; s++)
            if ((i = n[s]) === e || i.fn === e) {
                n.splice(s, 1);
                break
            }
        return 0 === n.length && delete this.t["$" + t],
        this
    }
    ,
    F.prototype.emit = function(t) {
        this.t = this.t || {};
        for (var e = new Array(arguments.length - 1), i = this.t["$" + t], n = 1; n < arguments.length; n++)
            e[n - 1] = arguments[n];
        if (i) {
            n = 0;
            for (var s = (i = i.slice(0)).length; n < s; ++n)
                i[n].apply(this, e)
        }
        return this
    }
    ,
    F.prototype.emitReserved = F.prototype.emit,
    F.prototype.listeners = function(t) {
        return this.t = this.t || {},
        this.t["$" + t] || []
    }
    ,
    F.prototype.hasListeners = function(t) {
        return !!this.listeners(t).length
    }
    ;
    var G = "function" == typeof Promise && "function" == typeof Promise.resolve ? function(t) {
        return Promise.resolve().then(t)
    }
    : function(t, e) {
        return e(t, 0)
    }
      , R = "undefined" != typeof self ? self : "undefined" != typeof window ? window : Function("return this")();
    function T(t) {
        for (var e = arguments.length, i = new Array(e > 1 ? e - 1 : 0), n = 1; n < e; n++)
            i[n - 1] = arguments[n];
        return i.reduce((function(e, i) {
            return t.hasOwnProperty(i) && (e[i] = t[i]),
            e
        }
        ), {})
    }
    var k = R.setTimeout
      , E = R.clearTimeout;
    function Q(t, e) {
        e.useNativeTimers ? (t.setTimeoutFn = k.bind(R),
        t.clearTimeoutFn = E.bind(R)) : (t.setTimeoutFn = R.setTimeout.bind(R),
        t.clearTimeoutFn = R.clearTimeout.bind(R))
    }
    function K() {
        return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5)
    }
    var X = function(t) {
        function e(e, i, n) {
            var s;
            return (s = t.call(this, e) || this).description = i,
            s.context = n,
            s.type = "TransportError",
            s
        }
        return a(e, t),
        e
    }(g(Error))
      , L = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).writable = !1,
            Q(i, e),
            i.opts = e,
            i.query = e.query,
            i.socket = e.socket,
            i.supportsBinary = !e.forceBase64,
            i
        }
        a(e, t);
        var i = e.prototype;
        return i.onError = function(e, i, n) {
            return t.prototype.emitReserved.call(this, "error", new X(e,i,n)),
            this
        }
        ,
        i.open = function() {
            return this.readyState = "opening",
            this.doOpen(),
            this
        }
        ,
        i.close = function() {
            return "opening" !== this.readyState && "open" !== this.readyState || (this.doClose(),
            this.onClose()),
            this
        }
        ,
        i.send = function(t) {
            "open" === this.readyState && this.write(t)
        }
        ,
        i.onOpen = function() {
            this.readyState = "open",
            this.writable = !0,
            t.prototype.emitReserved.call(this, "open")
        }
        ,
        i.onData = function(t) {
            var e = v(t, this.socket.binaryType);
            this.onPacket(e)
        }
        ,
        i.onPacket = function(e) {
            t.prototype.emitReserved.call(this, "packet", e)
        }
        ,
        i.onClose = function(e) {
            this.readyState = "closed",
            t.prototype.emitReserved.call(this, "close", e)
        }
        ,
        i.pause = function(t) {}
        ,
        i.createUri = function(t) {
            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
            return t + "://" + this.i() + this.o() + this.opts.path + this.u(e)
        }
        ,
        i.i = function() {
            var t = this.opts.hostname;
            return -1 === t.indexOf(":") ? t : "[" + t + "]"
        }
        ,
        i.o = function() {
            return this.opts.port && (this.opts.secure && Number(443 !== this.opts.port) || !this.opts.secure && 80 !== Number(this.opts.port)) ? ":" + this.opts.port : ""
        }
        ,
        i.u = function(t) {
            var e = function(t) {
                var e = "";
                for (var i in t)
                    t.hasOwnProperty(i) && (e.length && (e += "&"),
                    e += encodeURIComponent(i) + "=" + encodeURIComponent(t[i]));
                return e
            }(t);
            return e.length ? "?" + e : ""
        }
        ,
        e
    }(F)
      , Y = function(t) {
        function e() {
            var e;
            return (e = t.apply(this, arguments) || this).h = !1,
            e
        }
        a(e, t);
        var n = e.prototype;
        return n.doOpen = function() {
            this.v()
        }
        ,
        n.pause = function(t) {
            var e = this;
            this.readyState = "pausing";
            var i = function() {
                e.readyState = "paused",
                t()
            };
            if (this.h || !this.writable) {
                var n = 0;
                this.h && (n++,
                this.once("pollComplete", (function() {
                    --n || i()
                }
                ))),
                this.writable || (n++,
                this.once("drain", (function() {
                    --n || i()
                }
                )))
            } else
                i()
        }
        ,
        n.v = function() {
            this.h = !0,
            this.doPoll(),
            this.emitReserved("poll")
        }
        ,
        n.onData = function(t) {
            var e = this;
            (function(t, e) {
                for (var i = t.split(N), n = [], s = 0; s < i.length; s++) {
                    var o = v(i[s], e);
                    if (n.push(o),
                    "error" === o.type)
                        break
                }
                return n
            }
            )(t, this.socket.binaryType).forEach((function(t) {
                if ("opening" === e.readyState && "open" === t.type && e.onOpen(),
                "close" === t.type)
                    return e.onClose({
                        description: "transport closed by the server"
                    }),
                    !1;
                e.onPacket(t)
            }
            )),
            "closed" !== this.readyState && (this.h = !1,
            this.emitReserved("pollComplete"),
            "open" === this.readyState && this.v())
        }
        ,
        n.doClose = function() {
            var t = this
              , e = function() {
                t.write([{
                    type: "close"
                }])
            };
            "open" === this.readyState ? e() : this.once("open", e)
        }
        ,
        n.write = function(t) {
            var e = this;
            this.writable = !1,
            function(t, e) {
                var i = t.length
                  , n = new Array(i)
                  , s = 0;
                t.forEach((function(t, o) {
                    y(t, !1, (function(t) {
                        n[o] = t,
                        ++s === i && e(n.join(N))
                    }
                    ))
                }
                ))
            }(t, (function(t) {
                e.doWrite(t, (function() {
                    e.writable = !0,
                    e.emitReserved("drain")
                }
                ))
            }
            ))
        }
        ,
        n.uri = function() {
            var t = this.opts.secure ? "https" : "http"
              , e = this.query || {};
            return !1 !== this.opts.timestampRequests && (e[this.opts.timestampParam] = K()),
            this.supportsBinary || e.sid || (e.b64 = 1),
            this.createUri(t, e)
        }
        ,
        i(e, [{
            key: "name",
            get: function() {
                return "polling"
            }
        }])
    }(L)
      , j = !1;
    try {
        j = "undefined" != typeof XMLHttpRequest && "withCredentials"in new XMLHttpRequest
    } catch (t) {}
    var J = j;
    function z() {}
    var H = function(t) {
        function e(e) {
            var i;
            if (i = t.call(this, e) || this,
            "undefined" != typeof location) {
                var n = "https:" === location.protocol
                  , s = location.port;
                s || (s = n ? "443" : "80"),
                i.xd = "undefined" != typeof location && e.hostname !== location.hostname || s !== e.port
            }
            return i
        }
        a(e, t);
        var i = e.prototype;
        return i.doWrite = function(t, e) {
            var i = this
              , n = this.request({
                method: "POST",
                data: t
            });
            n.on("success", e),
            n.on("error", (function(t, e) {
                i.onError("xhr post error", t, e)
            }
            ))
        }
        ,
        i.doPoll = function() {
            var t = this
              , e = this.request();
            e.on("data", this.onData.bind(this)),
            e.on("error", (function(e, i) {
                t.onError("xhr poll error", e, i)
            }
            )),
            this.pollXhr = e
        }
        ,
        e
    }(Y)
      , D = function(t) {
        function e(e, i, n) {
            var s;
            return (s = t.call(this) || this).createRequest = e,
            Q(s, n),
            s.l = n,
            s.p = n.method || "GET",
            s.m = i,
            s.k = void 0 !== n.data ? n.data : null,
            s.A(),
            s
        }
        a(e, t);
        var i = e.prototype;
        return i.A = function() {
            var t, i = this, n = T(this.l, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
            n.xdomain = !!this.l.xd;
            var s = this.j = this.createRequest(n);
            try {
                s.open(this.p, this.m, !0);
                try {
                    if (this.l.extraHeaders)
                        for (var o in s.setDisableHeaderCheck && s.setDisableHeaderCheck(!0),
                        this.l.extraHeaders)
                            this.l.extraHeaders.hasOwnProperty(o) && s.setRequestHeader(o, this.l.extraHeaders[o])
                } catch (t) {}
                if ("POST" === this.p)
                    try {
                        s.setRequestHeader("Content-type", "text/plain;charset=UTF-8")
                    } catch (t) {}
                try {
                    s.setRequestHeader("Accept", "*/*")
                } catch (t) {}
                null === (t = this.l.cookieJar) || void 0 === t || t.addCookies(s),
                "withCredentials"in s && (s.withCredentials = this.l.withCredentials),
                this.l.requestTimeout && (s.timeout = this.l.requestTimeout),
                s.onreadystatechange = function() {
                    var t;
                    3 === s.readyState && (null === (t = i.l.cookieJar) || void 0 === t || t.parseCookies(s.getResponseHeader("set-cookie"))),
                    4 === s.readyState && (200 === s.status || 1223 === s.status ? i.O() : i.setTimeoutFn((function() {
                        i.B("number" == typeof s.status ? s.status : 0)
                    }
                    ), 0))
                }
                ,
                s.send(this.k)
            } catch (t) {
                return void this.setTimeoutFn((function() {
                    i.B(t)
                }
                ), 0)
            }
            "undefined" != typeof document && (this.S = e.requestsCount++,
            e.requests[this.S] = this)
        }
        ,
        i.B = function(t) {
            this.emitReserved("error", t, this.j),
            this.N(!0)
        }
        ,
        i.N = function(t) {
            if (void 0 !== this.j && null !== this.j) {
                if (this.j.onreadystatechange = z,
                t)
                    try {
                        this.j.abort()
                    } catch (t) {}
                "undefined" != typeof document && delete e.requests[this.S],
                this.j = null
            }
        }
        ,
        i.O = function() {
            var t = this.j.responseText;
            null !== t && (this.emitReserved("data", t),
            this.emitReserved("success"),
            this.N())
        }
        ,
        i.abort = function() {
            this.N()
        }
        ,
        e
    }(F);
    function x() {
        for (var t in D.requests)
            D.requests.hasOwnProperty(t) && D.requests[t].abort()
    }
    D.requestsCount = 0,
    D.requests = {},
    "undefined" != typeof document && ("function" == typeof attachEvent ? attachEvent("onunload", x) : "function" == typeof addEventListener && addEventListener("onpagehide"in R ? "pagehide" : "unload", x, !1));
    var O, P = (O = q({
        xdomain: !1
    })) && null !== O.responseType, _ = function(t) {
        function e(e) {
            var i;
            i = t.call(this, e) || this;
            var n = e && e.forceBase64;
            return i.supportsBinary = P && !n,
            i
        }
        return a(e, t),
        e.prototype.request = function() {
            var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {};
            return s(t, {
                xd: this.xd
            }, this.opts),
            new D(q,this.uri(),t)
        }
        ,
        e
    }(H);
    function q(t) {
        var e = t.xdomain;
        try {
            if ("undefined" != typeof XMLHttpRequest && (!e || J))
                return new XMLHttpRequest
        } catch (t) {}
        if (!e)
            try {
                return new (R[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")
            } catch (t) {}
    }
    var $ = "undefined" != typeof navigator && "string" == typeof navigator.product && "reactnative" === navigator.product.toLowerCase()
      , tt = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        a(e, t);
        var n = e.prototype;
        return n.doOpen = function() {
            var t = this.uri()
              , e = this.opts.protocols
              , i = $ ? {} : T(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
            this.opts.extraHeaders && (i.headers = this.opts.extraHeaders);
            try {
                this.ws = this.createSocket(t, e, i)
            } catch (t) {
                return this.emitReserved("error", t)
            }
            this.ws.binaryType = this.socket.binaryType,
            this.addEventListeners()
        }
        ,
        n.addEventListeners = function() {
            var t = this;
            this.ws.onopen = function() {
                t.opts.autoUnref && t.ws.C.unref(),
                t.onOpen()
            }
            ,
            this.ws.onclose = function(e) {
                return t.onClose({
                    description: "websocket connection closed",
                    context: e
                })
            }
            ,
            this.ws.onmessage = function(e) {
                return t.onData(e.data)
            }
            ,
            this.ws.onerror = function(e) {
                return t.onError("websocket error", e)
            }
        }
        ,
        n.write = function(t) {
            var e = this;
            this.writable = !1;
            for (var i = function() {
                var i = t[n]
                  , s = n === t.length - 1;
                y(i, e.supportsBinary, (function(t) {
                    try {
                        e.doWrite(i, t)
                    } catch (t) {}
                    s && G((function() {
                        e.writable = !0,
                        e.emitReserved("drain")
                    }
                    ), e.setTimeoutFn)
                }
                ))
            }, n = 0; n < t.length; n++)
                i()
        }
        ,
        n.doClose = function() {
            void 0 !== this.ws && (this.ws.onerror = function() {}
            ,
            this.ws.close(),
            this.ws = null)
        }
        ,
        n.uri = function() {
            var t = this.opts.secure ? "wss" : "ws"
              , e = this.query || {};
            return this.opts.timestampRequests && (e[this.opts.timestampParam] = K()),
            this.supportsBinary || (e.b64 = 1),
            this.createUri(t, e)
        }
        ,
        i(e, [{
            key: "name",
            get: function() {
                return "websocket"
            }
        }])
    }(L)
      , et = R.WebSocket || R.MozWebSocket
      , it = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        a(e, t);
        var i = e.prototype;
        return i.createSocket = function(t, e, i) {
            return $ ? new et(t,e,i) : e ? new et(t,e) : new et(t)
        }
        ,
        i.doWrite = function(t, e) {
            this.ws.send(e)
        }
        ,
        e
    }(tt)
      , nt = function(t) {
        function e() {
            return t.apply(this, arguments) || this
        }
        a(e, t);
        var n = e.prototype;
        return n.doOpen = function() {
            var t = this;
            try {
                this.T = new WebTransport(this.createUri("https"),this.opts.transportOptions[this.name])
            } catch (t) {
                return this.emitReserved("error", t)
            }
            this.T.closed.then((function() {
                t.onClose()
            }
            )).catch((function(e) {
                t.onError("webtransport error", e)
            }
            )),
            this.T.ready.then((function() {
                t.T.createBidirectionalStream().then((function(e) {
                    var i = function(t, e) {
                        S || (S = new TextDecoder);
                        var i = []
                          , n = 0
                          , s = -1
                          , o = !1;
                        return new TransformStream({
                            transform: function(a, l) {
                                for (i.push(a); ; ) {
                                    if (0 === n) {
                                        if (M(i) < 1)
                                            break;
                                        var r = W(i, 1);
                                        o = !(128 & ~r[0]),
                                        s = 127 & r[0],
                                        n = s < 126 ? 3 : 126 === s ? 1 : 2
                                    } else if (1 === n) {
                                        if (M(i) < 2)
                                            break;
                                        var c = W(i, 2);
                                        s = new DataView(c.buffer,c.byteOffset,c.length).getUint16(0),
                                        n = 3
                                    } else if (2 === n) {
                                        if (M(i) < 8)
                                            break;
                                        var d = W(i, 8)
                                          , g = new DataView(d.buffer,d.byteOffset,d.length)
                                          , h = g.getUint32(0);
                                        if (h > Math.pow(2, 21) - 1) {
                                            l.enqueue(m);
                                            break
                                        }
                                        s = h * Math.pow(2, 32) + g.getUint32(4),
                                        n = 3
                                    } else {
                                        if (M(i) < s)
                                            break;
                                        var p = W(i, s);
                                        l.enqueue(v(o ? p : S.decode(p), e)),
                                        n = 0
                                    }
                                    if (0 === s || s > t) {
                                        l.enqueue(m);
                                        break
                                    }
                                }
                            }
                        })
                    }(Number.MAX_SAFE_INTEGER, t.socket.binaryType)
                      , n = e.readable.pipeThrough(i).getReader()
                      , s = new TransformStream({
                        transform: function(t, e) {
                            !function(t, e) {
                                I && t.data instanceof Blob ? t.data.arrayBuffer().then(V).then(e) : C && (t.data instanceof ArrayBuffer || b(t.data)) ? e(V(t.data)) : y(t, !1, (function(t) {
                                    u || (u = new TextEncoder),
                                    e(u.encode(t))
                                }
                                ))
                            }(t, (function(i) {
                                var n, s = i.length;
                                if (s < 126)
                                    n = new Uint8Array(1),
                                    new DataView(n.buffer).setUint8(0, s);
                                else if (s < 65536) {
                                    n = new Uint8Array(3);
                                    var o = new DataView(n.buffer);
                                    o.setUint8(0, 126),
                                    o.setUint16(1, s)
                                } else {
                                    n = new Uint8Array(9);
                                    var a = new DataView(n.buffer);
                                    a.setUint8(0, 127),
                                    a.setBigUint64(1, BigInt(s))
                                }
                                t.data && "string" != typeof t.data && (n[0] |= 128),
                                e.enqueue(n),
                                e.enqueue(i)
                            }
                            ))
                        }
                    });
                    s.readable.pipeTo(e.writable),
                    t.U = s.writable.getWriter(),
                    function e() {
                        n.read().then((function(i) {
                            var n = i.done
                              , s = i.value;
                            n || (t.onPacket(s),
                            e())
                        }
                        )).catch((function(t) {}
                        ))
                    }();
                    var o = {
                        type: "open"
                    };
                    t.query.sid && (o.data = '{"sid":"'.concat(t.query.sid, '"}')),
                    t.U.write(o).then((function() {
                        return t.onOpen()
                    }
                    ))
                }
                ))
            }
            ))
        }
        ,
        n.write = function(t) {
            var e = this;
            this.writable = !1;
            for (var i = function() {
                var i = t[n]
                  , s = n === t.length - 1;
                e.U.write(i).then((function() {
                    s && G((function() {
                        e.writable = !0,
                        e.emitReserved("drain")
                    }
                    ), e.setTimeoutFn)
                }
                ))
            }, n = 0; n < t.length; n++)
                i()
        }
        ,
        n.doClose = function() {
            var t;
            null === (t = this.T) || void 0 === t || t.close()
        }
        ,
        i(e, [{
            key: "name",
            get: function() {
                return "webtransport"
            }
        }])
    }(L)
      , st = {
        websocket: it,
        webtransport: nt,
        polling: _
    }
      , ot = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/
      , at = ["source", "protocol", "authority", "userInfo", "user", "password", "host", "port", "relative", "path", "directory", "file", "query", "anchor"];
    function lt(t) {
        if (t.length > 8e3)
            throw "URI too long";
        var e = t
          , i = t.indexOf("[")
          , n = t.indexOf("]");
        -1 != i && -1 != n && (t = t.substring(0, i) + t.substring(i, n).replace(/:/g, ";") + t.substring(n, t.length));
        for (var s, o, a = ot.exec(t || ""), l = {}, r = 14; r--; )
            l[at[r]] = a[r] || "";
        return -1 != i && -1 != n && (l.source = e,
        l.host = l.host.substring(1, l.host.length - 1).replace(/;/g, ":"),
        l.authority = l.authority.replace("[", "").replace("]", "").replace(/;/g, ":"),
        l.ipv6uri = !0),
        l.pathNames = function(t, e) {
            var i = e.replace(/\/{2,9}/g, "/").split("/");
            return "/" != e.slice(0, 1) && 0 !== e.length || i.splice(0, 1),
            "/" == e.slice(-1) && i.splice(i.length - 1, 1),
            i
        }(0, l.path),
        l.queryKey = (s = l.query,
        o = {},
        s.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, (function(t, e, i) {
            e && (o[e] = i)
        }
        )),
        o),
        l
    }
    var rt = "function" == typeof addEventListener && "function" == typeof removeEventListener
      , ct = [];
    rt && addEventListener("offline", (function() {
        ct.forEach((function(t) {
            return t()
        }
        ))
    }
    ), !1);
    var dt = function(t) {
        function e(e, i) {
            var n;
            if ((n = t.call(this) || this).binaryType = "arraybuffer",
            n.writeBuffer = [],
            n.M = 0,
            n.I = -1,
            n.R = -1,
            n.L = -1,
            n._ = 1 / 0,
            e && "object" === d(e) && (i = e,
            e = null),
            e) {
                var o = lt(e);
                i.hostname = o.host,
                i.secure = "https" === o.protocol || "wss" === o.protocol,
                i.port = o.port,
                o.query && (i.query = o.query)
            } else
                i.host && (i.hostname = lt(i.host).host);
            return Q(n, i),
            n.secure = null != i.secure ? i.secure : "undefined" != typeof location && "https:" === location.protocol,
            i.hostname && !i.port && (i.port = n.secure ? "443" : "80"),
            n.hostname = i.hostname || ("undefined" != typeof location ? location.hostname : "localhost"),
            n.port = i.port || ("undefined" != typeof location && location.port ? location.port : n.secure ? "443" : "80"),
            n.transports = [],
            n.D = {},
            i.transports.forEach((function(t) {
                var e = t.prototype.name;
                n.transports.push(e),
                n.D[e] = t
            }
            )),
            n.opts = s({
                path: "/engine.io",
                agent: !1,
                withCredentials: !1,
                upgrade: !0,
                timestampParam: "t",
                rememberUpgrade: !1,
                addTrailingSlash: !0,
                rejectUnauthorized: !0,
                perMessageDeflate: {
                    threshold: 1024
                },
                transportOptions: {},
                closeOnBeforeunload: !1
            }, i),
            n.opts.path = n.opts.path.replace(/\/$/, "") + (n.opts.addTrailingSlash ? "/" : ""),
            "string" == typeof n.opts.query && (n.opts.query = function(t) {
                for (var e = {}, i = t.split("&"), n = 0, s = i.length; n < s; n++) {
                    var o = i[n].split("=");
                    e[decodeURIComponent(o[0])] = decodeURIComponent(o[1])
                }
                return e
            }(n.opts.query)),
            rt && (n.opts.closeOnBeforeunload && (n.P = function() {
                n.transport && (n.transport.removeAllListeners(),
                n.transport.close())
            }
            ,
            addEventListener("beforeunload", n.P, !1)),
            "localhost" !== n.hostname && (n.$ = function() {
                n.F("transport close", {
                    description: "network connection lost"
                })
            }
            ,
            ct.push(n.$))),
            n.opts.withCredentials && (n.V = void 0),
            n.q(),
            n
        }
        a(e, t);
        var i = e.prototype;
        return i.createTransport = function(t) {
            var e = s({}, this.opts.query);
            e.EIO = 4,
            e.transport = t,
            this.id && (e.sid = this.id);
            var i = s({}, this.opts, {
                query: e,
                socket: this,
                hostname: this.hostname,
                secure: this.secure,
                port: this.port
            }, this.opts.transportOptions[t]);
            return new this.D[t](i)
        }
        ,
        i.q = function() {
            var t = this;
            if (0 !== this.transports.length) {
                var i = this.opts.rememberUpgrade && e.priorWebsocketSuccess && -1 !== this.transports.indexOf("websocket") ? "websocket" : this.transports[0];
                this.readyState = "opening";
                var n = this.createTransport(i);
                n.open(),
                this.setTransport(n)
            } else
                this.setTimeoutFn((function() {
                    t.emitReserved("error", "No transports available")
                }
                ), 0)
        }
        ,
        i.setTransport = function(t) {
            var e = this;
            this.transport && this.transport.removeAllListeners(),
            this.transport = t,
            t.on("drain", this.X.bind(this)).on("packet", this.H.bind(this)).on("error", this.B.bind(this)).on("close", (function(t) {
                return e.F("transport close", t)
            }
            ))
        }
        ,
        i.onOpen = function() {
            this.readyState = "open",
            e.priorWebsocketSuccess = "websocket" === this.transport.name,
            this.emitReserved("open"),
            this.flush()
        }
        ,
        i.H = function(t) {
            if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState)
                switch (this.emitReserved("packet", t),
                this.emitReserved("heartbeat"),
                t.type) {
                case "open":
                    this.onHandshake(JSON.parse(t.data));
                    break;
                case "ping":
                    this.J("pong"),
                    this.emitReserved("ping"),
                    this.emitReserved("pong"),
                    this.K();
                    break;
                case "error":
                    var e = new Error("server error");
                    e.code = t.data,
                    this.B(e);
                    break;
                case "message":
                    this.emitReserved("data", t.data),
                    this.emitReserved("message", t.data)
                }
        }
        ,
        i.onHandshake = function(t) {
            this.emitReserved("handshake", t),
            this.id = t.sid,
            this.transport.query.sid = t.sid,
            this.I = t.pingInterval,
            this.R = t.pingTimeout,
            this.L = t.maxPayload,
            this.onOpen(),
            "closed" !== this.readyState && this.K()
        }
        ,
        i.K = function() {
            var t = this;
            this.clearTimeoutFn(this.Y);
            var e = this.I + this.R;
            this._ = Date.now() + e,
            this.Y = this.setTimeoutFn((function() {
                t.F("ping timeout")
            }
            ), e),
            this.opts.autoUnref && this.Y.unref()
        }
        ,
        i.X = function() {
            this.writeBuffer.splice(0, this.M),
            this.M = 0,
            0 === this.writeBuffer.length ? this.emitReserved("drain") : this.flush()
        }
        ,
        i.flush = function() {
            if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
                var t = this.G();
                this.transport.send(t),
                this.M = t.length,
                this.emitReserved("flush")
            }
        }
        ,
        i.G = function() {
            if (!(this.L && "polling" === this.transport.name && this.writeBuffer.length > 1))
                return this.writeBuffer;
            for (var t, e = 1, i = 0; i < this.writeBuffer.length; i++) {
                var n = this.writeBuffer[i].data;
                if (n && (e += "string" == typeof (t = n) ? function(t) {
                    for (var e = 0, i = 0, n = 0, s = t.length; n < s; n++)
                        (e = t.charCodeAt(n)) < 128 ? i += 1 : e < 2048 ? i += 2 : e < 55296 || e >= 57344 ? i += 3 : (n++,
                        i += 4);
                    return i
                }(t) : Math.ceil(1.33 * (t.byteLength || t.size))),
                i > 0 && e > this.L)
                    return this.writeBuffer.slice(0, i);
                e += 2
            }
            return this.writeBuffer
        }
        ,
        i.W = function() {
            var t = this;
            if (!this._)
                return !0;
            var e = Date.now() > this._;
            return e && (this._ = 0,
            G((function() {
                t.F("ping timeout")
            }
            ), this.setTimeoutFn)),
            e
        }
        ,
        i.write = function(t, e, i) {
            return this.J("message", t, e, i),
            this
        }
        ,
        i.send = function(t, e, i) {
            return this.J("message", t, e, i),
            this
        }
        ,
        i.J = function(t, e, i, n) {
            if ("function" == typeof e && (n = e,
            e = void 0),
            "function" == typeof i && (n = i,
            i = null),
            "closing" !== this.readyState && "closed" !== this.readyState) {
                (i = i || {}).compress = !1 !== i.compress;
                var s = {
                    type: t,
                    data: e,
                    options: i
                };
                this.emitReserved("packetCreate", s),
                this.writeBuffer.push(s),
                n && this.once("flush", n),
                this.flush()
            }
        }
        ,
        i.close = function() {
            var t = this
              , e = function() {
                t.F("forced close"),
                t.transport.close()
            }
              , i = function i() {
                t.off("upgrade", i),
                t.off("upgradeError", i),
                e()
            }
              , n = function() {
                t.once("upgrade", i),
                t.once("upgradeError", i)
            };
            return "opening" !== this.readyState && "open" !== this.readyState || (this.readyState = "closing",
            this.writeBuffer.length ? this.once("drain", (function() {
                t.upgrading ? n() : e()
            }
            )) : this.upgrading ? n() : e()),
            this
        }
        ,
        i.B = function(t) {
            if (e.priorWebsocketSuccess = !1,
            this.opts.tryAllTransports && this.transports.length > 1 && "opening" === this.readyState)
                return this.transports.shift(),
                this.q();
            this.emitReserved("error", t),
            this.F("transport error", t)
        }
        ,
        i.F = function(t, e) {
            if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
                if (this.clearTimeoutFn(this.Y),
                this.transport.removeAllListeners("close"),
                this.transport.close(),
                this.transport.removeAllListeners(),
                rt && (this.P && removeEventListener("beforeunload", this.P, !1),
                this.$)) {
                    var i = ct.indexOf(this.$);
                    -1 !== i && ct.splice(i, 1)
                }
                this.readyState = "closed",
                this.id = null,
                this.emitReserved("close", t, e),
                this.writeBuffer = [],
                this.M = 0
            }
        }
        ,
        e
    }(F);
    dt.protocol = 4;
    var gt = function(t) {
        function e() {
            var e;
            return (e = t.apply(this, arguments) || this).Z = [],
            e
        }
        a(e, t);
        var i = e.prototype;
        return i.onOpen = function() {
            if (t.prototype.onOpen.call(this),
            "open" === this.readyState && this.opts.upgrade)
                for (var e = 0; e < this.Z.length; e++)
                    this.tt(this.Z[e])
        }
        ,
        i.tt = function(t) {
            var e = this
              , i = this.createTransport(t)
              , n = !1;
            dt.priorWebsocketSuccess = !1;
            var s = function() {
                n || (i.send([{
                    type: "ping",
                    data: "probe"
                }]),
                i.once("packet", (function(t) {
                    if (!n)
                        if ("pong" === t.type && "probe" === t.data) {
                            if (e.upgrading = !0,
                            e.emitReserved("upgrading", i),
                            !i)
                                return;
                            dt.priorWebsocketSuccess = "websocket" === i.name,
                            e.transport.pause((function() {
                                n || "closed" !== e.readyState && (d(),
                                e.setTransport(i),
                                i.send([{
                                    type: "upgrade"
                                }]),
                                e.emitReserved("upgrade", i),
                                i = null,
                                e.upgrading = !1,
                                e.flush())
                            }
                            ))
                        } else {
                            var s = new Error("probe error");
                            s.transport = i.name,
                            e.emitReserved("upgradeError", s)
                        }
                }
                )))
            };
            function o() {
                n || (n = !0,
                d(),
                i.close(),
                i = null)
            }
            var a = function(t) {
                var n = new Error("probe error: " + t);
                n.transport = i.name,
                o(),
                e.emitReserved("upgradeError", n)
            };
            function l() {
                a("transport closed")
            }
            function r() {
                a("socket closed")
            }
            function c(t) {
                i && t.name !== i.name && o()
            }
            var d = function() {
                i.removeListener("open", s),
                i.removeListener("error", a),
                i.removeListener("close", l),
                e.off("close", r),
                e.off("upgrading", c)
            };
            i.once("open", s),
            i.once("error", a),
            i.once("close", l),
            this.once("close", r),
            this.once("upgrading", c),
            -1 !== this.Z.indexOf("webtransport") && "webtransport" !== t ? this.setTimeoutFn((function() {
                n || i.open()
            }
            ), 200) : i.open()
        }
        ,
        i.onHandshake = function(e) {
            this.Z = this.nt(e.upgrades),
            t.prototype.onHandshake.call(this, e)
        }
        ,
        i.nt = function(t) {
            for (var e = [], i = 0; i < t.length; i++)
                ~this.transports.indexOf(t[i]) && e.push(t[i]);
            return e
        }
        ,
        e
    }(dt)
      , ht = function(t) {
        function e(e) {
            var i = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}
              , n = "object" === d(e) ? e : i;
            return (!n.transports || n.transports && "string" == typeof n.transports[0]) && (n.transports = (n.transports || ["polling", "websocket", "webtransport"]).map((function(t) {
                return st[t]
            }
            )).filter((function(t) {
                return !!t
            }
            ))),
            t.call(this, e, n) || this
        }
        return a(e, t),
        e
    }(gt);
    ht.protocol;
    var pt = "function" == typeof ArrayBuffer
      , ut = Object.prototype.toString
      , mt = "function" == typeof Blob || "undefined" != typeof Blob && "[object BlobConstructor]" === ut.call(Blob)
      , It = "function" == typeof File || "undefined" != typeof File && "[object FileConstructor]" === ut.call(File);
    function Ct(t) {
        return pt && (t instanceof ArrayBuffer || function(t) {
            return "function" == typeof ArrayBuffer.isView ? ArrayBuffer.isView(t) : t.buffer instanceof ArrayBuffer
        }(t)) || mt && t instanceof Blob || It && t instanceof File
    }
    function bt(t, e) {
        if (!t || "object" !== d(t))
            return !1;
        if (Array.isArray(t)) {
            for (var i = 0, n = t.length; i < n; i++)
                if (bt(t[i]))
                    return !0;
            return !1
        }
        if (Ct(t))
            return !0;
        if (t.toJSON && "function" == typeof t.toJSON && 1 === arguments.length)
            return bt(t.toJSON(), !0);
        for (var s in t)
            if (Object.prototype.hasOwnProperty.call(t, s) && bt(t[s]))
                return !0;
        return !1
    }
    function yt(t) {
        var e = []
          , i = t.data
          , n = t;
        return n.data = Zt(i, e),
        n.attachments = e.length,
        {
            packet: n,
            buffers: e
        }
    }
    function Zt(t, e) {
        if (!t)
            return t;
        if (Ct(t)) {
            var i = {
                _placeholder: !0,
                num: e.length
            };
            return e.push(t),
            i
        }
        if (Array.isArray(t)) {
            for (var n = new Array(t.length), s = 0; s < t.length; s++)
                n[s] = Zt(t[s], e);
            return n
        }
        if ("object" === d(t) && !(t instanceof Date)) {
            var o = {};
            for (var a in t)
                Object.prototype.hasOwnProperty.call(t, a) && (o[a] = Zt(t[a], e));
            return o
        }
        return t
    }
    function Vt(t, e) {
        return t.data = ft(t.data, e),
        delete t.attachments,
        t
    }
    function ft(t, e) {
        if (!t)
            return t;
        if (t && !0 === t._placeholder) {
            if ("number" == typeof t.num && t.num >= 0 && t.num < e.length)
                return e[t.num];
            throw new Error("illegal attachments")
        }
        if (Array.isArray(t))
            for (var i = 0; i < t.length; i++)
                t[i] = ft(t[i], e);
        else if ("object" === d(t))
            for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (t[n] = ft(t[n], e));
        return t
    }
    var Bt, St = ["connect", "connect_error", "disconnect", "disconnecting", "newListener", "removeListener"];
    !function(t) {
        t[t.CONNECT = 0] = "CONNECT",
        t[t.DISCONNECT = 1] = "DISCONNECT",
        t[t.EVENT = 2] = "EVENT",
        t[t.ACK = 3] = "ACK",
        t[t.CONNECT_ERROR = 4] = "CONNECT_ERROR",
        t[t.BINARY_EVENT = 5] = "BINARY_EVENT",
        t[t.BINARY_ACK = 6] = "BINARY_ACK"
    }(Bt || (Bt = {}));
    var At = function() {
        function t(t) {
            this.replacer = t
        }
        var e = t.prototype;
        return e.encode = function(t) {
            return t.type !== Bt.EVENT && t.type !== Bt.ACK || !bt(t) ? [this.encodeAsString(t)] : this.encodeAsBinary({
                type: t.type === Bt.EVENT ? Bt.BINARY_EVENT : Bt.BINARY_ACK,
                nsp: t.nsp,
                data: t.data,
                id: t.id
            })
        }
        ,
        e.encodeAsString = function(t) {
            var e = "" + t.type;
            return t.type !== Bt.BINARY_EVENT && t.type !== Bt.BINARY_ACK || (e += t.attachments + "-"),
            t.nsp && "/" !== t.nsp && (e += t.nsp + ","),
            null != t.id && (e += t.id),
            null != t.data && (e += JSON.stringify(t.data, this.replacer)),
            e
        }
        ,
        e.encodeAsBinary = function(t) {
            var e = yt(t)
              , i = this.encodeAsString(e.packet)
              , n = e.buffers;
            return n.unshift(i),
            n
        }
        ,
        t
    }()
      , vt = function(t) {
        function e(e) {
            var i;
            return (i = t.call(this) || this).reviver = e,
            i
        }
        a(e, t);
        var i = e.prototype;
        return i.add = function(e) {
            var i;
            if ("string" == typeof e) {
                if (this.reconstructor)
                    throw new Error("got plaintext data when reconstructing a packet");
                var n = (i = this.decodeString(e)).type === Bt.BINARY_EVENT;
                n || i.type === Bt.BINARY_ACK ? (i.type = n ? Bt.EVENT : Bt.ACK,
                this.reconstructor = new wt(i),
                0 === i.attachments && t.prototype.emitReserved.call(this, "decoded", i)) : t.prototype.emitReserved.call(this, "decoded", i)
            } else {
                if (!Ct(e) && !e.base64)
                    throw new Error("Unknown type: " + e);
                if (!this.reconstructor)
                    throw new Error("got binary data when not reconstructing a packet");
                (i = this.reconstructor.takeBinaryData(e)) && (this.reconstructor = null,
                t.prototype.emitReserved.call(this, "decoded", i))
            }
        }
        ,
        i.decodeString = function(t) {
            var i = 0
              , n = {
                type: Number(t.charAt(0))
            };
            if (void 0 === Bt[n.type])
                throw new Error("unknown packet type " + n.type);
            if (n.type === Bt.BINARY_EVENT || n.type === Bt.BINARY_ACK) {
                for (var s = i + 1; "-" !== t.charAt(++i) && i != t.length; )
                    ;
                var o = t.substring(s, i);
                if (o != Number(o) || "-" !== t.charAt(i))
                    throw new Error("Illegal attachments");
                n.attachments = Number(o)
            }
            if ("/" === t.charAt(i + 1)) {
                for (var a = i + 1; ++i && "," !== t.charAt(i) && i !== t.length; )
                    ;
                n.nsp = t.substring(a, i)
            } else
                n.nsp = "/";
            var l = t.charAt(i + 1);
            if ("" !== l && Number(l) == l) {
                for (var r = i + 1; ++i; ) {
                    var c = t.charAt(i);
                    if (null == c || Number(c) != c) {
                        --i;
                        break
                    }
                    if (i === t.length)
                        break
                }
                n.id = Number(t.substring(r, i + 1))
            }
            if (t.charAt(++i)) {
                var d = this.tryParse(t.substr(i));
                if (!e.isPayloadValid(n.type, d))
                    throw new Error("invalid payload");
                n.data = d
            }
            return n
        }
        ,
        i.tryParse = function(t) {
            try {
                return JSON.parse(t, this.reviver)
            } catch (t) {
                return !1
            }
        }
        ,
        e.isPayloadValid = function(t, e) {
            switch (t) {
            case Bt.CONNECT:
                return Nt(e);
            case Bt.DISCONNECT:
                return void 0 === e;
            case Bt.CONNECT_ERROR:
                return "string" == typeof e || Nt(e);
            case Bt.EVENT:
            case Bt.BINARY_EVENT:
                return Array.isArray(e) && ("number" == typeof e[0] || "string" == typeof e[0] && -1 === St.indexOf(e[0]));
            case Bt.ACK:
            case Bt.BINARY_ACK:
                return Array.isArray(e)
            }
        }
        ,
        i.destroy = function() {
            this.reconstructor && (this.reconstructor.finishedReconstruction(),
            this.reconstructor = null)
        }
        ,
        e
    }(F)
      , wt = function() {
        function t(t) {
            this.packet = t,
            this.buffers = [],
            this.reconPack = t
        }
        var e = t.prototype;
        return e.takeBinaryData = function(t) {
            if (this.buffers.push(t),
            this.buffers.length === this.reconPack.attachments) {
                var e = Vt(this.reconPack, this.buffers);
                return this.finishedReconstruction(),
                e
            }
            return null
        }
        ,
        e.finishedReconstruction = function() {
            this.reconPack = null,
            this.buffers = []
        }
        ,
        t
    }()
      , Ut = Number.isInteger || function(t) {
        return "number" == typeof t && isFinite(t) && Math.floor(t) === t
    }
    ;
    function Nt(t) {
        return "[object Object]" === Object.prototype.toString.call(t)
    }
    var Mt = Object.freeze({
        __proto__: null,
        protocol: 5,
        get PacketType() {
            return Bt
        },
        Encoder: At,
        Decoder: vt,
        isPacketValid: function(t) {
            return "string" == typeof t.nsp && (void 0 === (e = t.id) || Ut(e)) && function(t, e) {
                switch (t) {
                case Bt.CONNECT:
                    return void 0 === e || Nt(e);
                case Bt.DISCONNECT:
                    return void 0 === e;
                case Bt.EVENT:
                    return Array.isArray(e) && ("number" == typeof e[0] || "string" == typeof e[0] && -1 === St.indexOf(e[0]));
                case Bt.ACK:
                    return Array.isArray(e);
                case Bt.CONNECT_ERROR:
                    return "string" == typeof e || Nt(e);
                default:
                    return !1
                }
            }(t.type, t.data);
            var e
        }
    });
    function Wt(t, e, i) {
        return t.on(e, i),
        function() {
            t.off(e, i)
        }
    }
    var Ft = Object.freeze({
        connect: 1,
        connect_error: 1,
        disconnect: 1,
        disconnecting: 1,
        newListener: 1,
        removeListener: 1
    })
      , Gt = function(t) {
        function e(e, i, n) {
            var o;
            return (o = t.call(this) || this).connected = !1,
            o.recovered = !1,
            o.receiveBuffer = [],
            o.sendBuffer = [],
            o.it = [],
            o.rt = 0,
            o.ids = 0,
            o.acks = {},
            o.flags = {},
            o.io = e,
            o.nsp = i,
            n && n.auth && (o.auth = n.auth),
            o.l = s({}, n),
            o.io.et && o.open(),
            o
        }
        a(e, t);
        var o = e.prototype;
        return o.subEvents = function() {
            if (!this.subs) {
                var t = this.io;
                this.subs = [Wt(t, "open", this.onopen.bind(this)), Wt(t, "packet", this.onpacket.bind(this)), Wt(t, "error", this.onerror.bind(this)), Wt(t, "close", this.onclose.bind(this))]
            }
        }
        ,
        o.connect = function() {
            return this.connected || (this.subEvents(),
            this.io.ot || this.io.open(),
            "open" === this.io.st && this.onopen()),
            this
        }
        ,
        o.open = function() {
            return this.connect()
        }
        ,
        o.send = function() {
            for (var t = arguments.length, e = new Array(t), i = 0; i < t; i++)
                e[i] = arguments[i];
            return e.unshift("message"),
            this.emit.apply(this, e),
            this
        }
        ,
        o.emit = function(t) {
            var e, i, n;
            if (Ft.hasOwnProperty(t))
                throw new Error('"' + t.toString() + '" is a reserved event name');
            for (var s = arguments.length, o = new Array(s > 1 ? s - 1 : 0), a = 1; a < s; a++)
                o[a - 1] = arguments[a];
            if (o.unshift(t),
            this.l.retries && !this.flags.fromQueue && !this.flags.volatile)
                return this.ut(o),
                this;
            var l = {
                type: Bt.EVENT,
                data: o,
                options: {}
            };
            if (l.options.compress = !1 !== this.flags.compress,
            "function" == typeof o[o.length - 1]) {
                var r = this.ids++
                  , c = o.pop();
                this.ht(r, c),
                l.id = r
            }
            var d = null === (i = null === (e = this.io.engine) || void 0 === e ? void 0 : e.transport) || void 0 === i ? void 0 : i.writable
              , g = this.connected && !(null === (n = this.io.engine) || void 0 === n ? void 0 : n.W());
            return this.flags.volatile && !d || (g ? (this.notifyOutgoingListeners(l),
            this.packet(l)) : this.sendBuffer.push(l)),
            this.flags = {},
            this
        }
        ,
        o.ht = function(t, e) {
            var i, n = this, s = null !== (i = this.flags.timeout) && void 0 !== i ? i : this.l.ackTimeout;
            if (void 0 !== s) {
                var o = this.io.setTimeoutFn((function() {
                    delete n.acks[t];
                    for (var i = 0; i < n.sendBuffer.length; i++)
                        n.sendBuffer[i].id === t && n.sendBuffer.splice(i, 1);
                    e.call(n, new Error("operation has timed out"))
                }
                ), s)
                  , a = function() {
                    n.io.clearTimeoutFn(o);
                    for (var t = arguments.length, i = new Array(t), s = 0; s < t; s++)
                        i[s] = arguments[s];
                    e.apply(n, i)
                };
                a.withError = !0,
                this.acks[t] = a
            } else
                this.acks[t] = e
        }
        ,
        o.emitWithAck = function(t) {
            for (var e = this, i = arguments.length, n = new Array(i > 1 ? i - 1 : 0), s = 1; s < i; s++)
                n[s - 1] = arguments[s];
            return new Promise((function(i, s) {
                var o = function(t, e) {
                    return t ? s(t) : i(e)
                };
                o.withError = !0,
                n.push(o),
                e.emit.apply(e, [t].concat(n))
            }
            ))
        }
        ,
        o.ut = function(t) {
            var e, i = this;
            "function" == typeof t[t.length - 1] && (e = t.pop());
            var n = {
                id: this.rt++,
                tryCount: 0,
                pending: !1,
                args: t,
                flags: s({
                    fromQueue: !0
                }, this.flags)
            };
            t.push((function(t) {
                if (n === i.it[0]) {
                    if (null !== t)
                        n.tryCount > i.l.retries && (i.it.shift(),
                        e && e(t));
                    else if (i.it.shift(),
                    e) {
                        for (var s = arguments.length, o = new Array(s > 1 ? s - 1 : 0), a = 1; a < s; a++)
                            o[a - 1] = arguments[a];
                        e.apply(void 0, [null].concat(o))
                    }
                    return n.pending = !1,
                    i.ft()
                }
            }
            )),
            this.it.push(n),
            this.ft()
        }
        ,
        o.ft = function() {
            var t = arguments.length > 0 && void 0 !== arguments[0] && arguments[0];
            if (this.connected && 0 !== this.it.length) {
                var e = this.it[0];
                e.pending && !t || (e.pending = !0,
                e.tryCount++,
                this.flags = e.flags,
                this.emit.apply(this, e.args))
            }
        }
        ,
        o.packet = function(t) {
            t.nsp = this.nsp,
            this.io.ct(t)
        }
        ,
        o.onopen = function() {
            var t = this;
            "function" == typeof this.auth ? this.auth((function(e) {
                t.vt(e)
            }
            )) : this.vt(this.auth)
        }
        ,
        o.vt = function(t) {
            this.packet({
                type: Bt.CONNECT,
                data: this.lt ? s({
                    pid: this.lt,
                    offset: this.dt
                }, t) : t
            })
        }
        ,
        o.onerror = function(t) {
            this.connected || this.emitReserved("connect_error", t)
        }
        ,
        o.onclose = function(t, e) {
            this.connected = !1,
            delete this.id,
            this.emitReserved("disconnect", t, e),
            this.yt()
        }
        ,
        o.yt = function() {
            var t = this;
            Object.keys(this.acks).forEach((function(e) {
                if (!t.sendBuffer.some((function(t) {
                    return String(t.id) === e
                }
                ))) {
                    var i = t.acks[e];
                    delete t.acks[e],
                    i.withError && i.call(t, new Error("socket has been disconnected"))
                }
            }
            ))
        }
        ,
        o.onpacket = function(t) {
            if (t.nsp === this.nsp)
                switch (t.type) {
                case Bt.CONNECT:
                    t.data && t.data.sid ? this.onconnect(t.data.sid, t.data.pid) : this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
                    break;
                case Bt.EVENT:
                case Bt.BINARY_EVENT:
                    this.onevent(t);
                    break;
                case Bt.ACK:
                case Bt.BINARY_ACK:
                    this.onack(t);
                    break;
                case Bt.DISCONNECT:
                    this.ondisconnect();
                    break;
                case Bt.CONNECT_ERROR:
                    this.destroy();
                    var e = new Error(t.data.message);
                    e.data = t.data.data,
                    this.emitReserved("connect_error", e)
                }
        }
        ,
        o.onevent = function(t) {
            var e = t.data || [];
            null != t.id && e.push(this.ack(t.id)),
            this.connected ? this.emitEvent(e) : this.receiveBuffer.push(Object.freeze(e))
        }
        ,
        o.emitEvent = function(e) {
            if (this.bt && this.bt.length) {
                var i, s = n(this.bt.slice());
                try {
                    for (s.s(); !(i = s.n()).done; )
                        i.value.apply(this, e)
                } catch (t) {
                    s.e(t)
                } finally {
                    s.f()
                }
            }
            t.prototype.emit.apply(this, e),
            this.lt && e.length && "string" == typeof e[e.length - 1] && (this.dt = e[e.length - 1])
        }
        ,
        o.ack = function(t) {
            var e = this
              , i = !1;
            return function() {
                if (!i) {
                    i = !0;
                    for (var n = arguments.length, s = new Array(n), o = 0; o < n; o++)
                        s[o] = arguments[o];
                    e.packet({
                        type: Bt.ACK,
                        id: t,
                        data: s
                    })
                }
            }
        }
        ,
        o.onack = function(t) {
            var e = this.acks[t.id];
            "function" == typeof e && (delete this.acks[t.id],
            e.withError && t.data.unshift(null),
            e.apply(this, t.data))
        }
        ,
        o.onconnect = function(t, e) {
            this.id = t,
            this.recovered = e && this.lt === e,
            this.lt = e,
            this.connected = !0,
            this.emitBuffered(),
            this.emitReserved("connect"),
            this.ft(!0)
        }
        ,
        o.emitBuffered = function() {
            var t = this;
            this.receiveBuffer.forEach((function(e) {
                return t.emitEvent(e)
            }
            )),
            this.receiveBuffer = [],
            this.sendBuffer.forEach((function(e) {
                t.notifyOutgoingListeners(e),
                t.packet(e)
            }
            )),
            this.sendBuffer = []
        }
        ,
        o.ondisconnect = function() {
            this.destroy(),
            this.onclose("io server disconnect")
        }
        ,
        o.destroy = function() {
            this.subs && (this.subs.forEach((function(t) {
                return t()
            }
            )),
            this.subs = void 0),
            this.io.wt(this)
        }
        ,
        o.disconnect = function() {
            return this.connected && this.packet({
                type: Bt.DISCONNECT
            }),
            this.destroy(),
            this.connected && this.onclose("io client disconnect"),
            this
        }
        ,
        o.close = function() {
            return this.disconnect()
        }
        ,
        o.compress = function(t) {
            return this.flags.compress = t,
            this
        }
        ,
        o.timeout = function(t) {
            return this.flags.timeout = t,
            this
        }
        ,
        o.onAny = function(t) {
            return this.bt = this.bt || [],
            this.bt.push(t),
            this
        }
        ,
        o.prependAny = function(t) {
            return this.bt = this.bt || [],
            this.bt.unshift(t),
            this
        }
        ,
        o.offAny = function(t) {
            if (!this.bt)
                return this;
            if (t) {
                for (var e = this.bt, i = 0; i < e.length; i++)
                    if (t === e[i])
                        return e.splice(i, 1),
                        this
            } else
                this.bt = [];
            return this
        }
        ,
        o.listenersAny = function() {
            return this.bt || []
        }
        ,
        o.onAnyOutgoing = function(t) {
            return this.gt = this.gt || [],
            this.gt.push(t),
            this
        }
        ,
        o.prependAnyOutgoing = function(t) {
            return this.gt = this.gt || [],
            this.gt.unshift(t),
            this
        }
        ,
        o.offAnyOutgoing = function(t) {
            if (!this.gt)
                return this;
            if (t) {
                for (var e = this.gt, i = 0; i < e.length; i++)
                    if (t === e[i])
                        return e.splice(i, 1),
                        this
            } else
                this.gt = [];
            return this
        }
        ,
        o.listenersAnyOutgoing = function() {
            return this.gt || []
        }
        ,
        o.notifyOutgoingListeners = function(t) {
            if (this.gt && this.gt.length) {
                var e, i = n(this.gt.slice());
                try {
                    for (i.s(); !(e = i.n()).done; )
                        e.value.apply(this, t.data)
                } catch (t) {
                    i.e(t)
                } finally {
                    i.f()
                }
            }
        }
        ,
        i(e, [{
            key: "disconnected",
            get: function() {
                return !this.connected
            }
        }, {
            key: "active",
            get: function() {
                return !!this.subs
            }
        }, {
            key: "volatile",
            get: function() {
                return this.flags.volatile = !0,
                this
            }
        }])
    }(F);
    function Rt(t) {
        t = t || {},
        this.ms = t.min || 100,
        this.max = t.max || 1e4,
        this.factor = t.factor || 2,
        this.jitter = t.jitter > 0 && t.jitter <= 1 ? t.jitter : 0,
        this.attempts = 0
    }
    Rt.prototype.duration = function() {
        var t = this.ms * Math.pow(this.factor, this.attempts++);
        if (this.jitter) {
            var e = Math.random()
              , i = Math.floor(e * this.jitter * t);
            t = 1 & Math.floor(10 * e) ? t + i : t - i
        }
        return 0 | Math.min(t, this.max)
    }
    ,
    Rt.prototype.reset = function() {
        this.attempts = 0
    }
    ,
    Rt.prototype.setMin = function(t) {
        this.ms = t
    }
    ,
    Rt.prototype.setMax = function(t) {
        this.max = t
    }
    ,
    Rt.prototype.setJitter = function(t) {
        this.jitter = t
    }
    ;
    var Tt = function(t) {
        function e(e, i) {
            var n, s;
            (n = t.call(this) || this).nsps = {},
            n.subs = [],
            e && "object" === d(e) && (i = e,
            e = void 0),
            (i = i || {}).path = i.path || "/socket.io",
            n.opts = i,
            Q(n, i),
            n.reconnection(!1 !== i.reconnection),
            n.reconnectionAttempts(i.reconnectionAttempts || 1 / 0),
            n.reconnectionDelay(i.reconnectionDelay || 1e3),
            n.reconnectionDelayMax(i.reconnectionDelayMax || 5e3),
            n.randomizationFactor(null !== (s = i.randomizationFactor) && void 0 !== s ? s : .5),
            n.backoff = new Rt({
                min: n.reconnectionDelay(),
                max: n.reconnectionDelayMax(),
                jitter: n.randomizationFactor()
            }),
            n.timeout(null == i.timeout ? 2e4 : i.timeout),
            n.st = "closed",
            n.uri = e;
            var o = i.parser || Mt;
            return n.encoder = new o.Encoder,
            n.decoder = new o.Decoder,
            n.et = !1 !== i.autoConnect,
            n.et && n.open(),
            n
        }
        a(e, t);
        var i = e.prototype;
        return i.reconnection = function(t) {
            return arguments.length ? (this.kt = !!t,
            t || (this.skipReconnect = !0),
            this) : this.kt
        }
        ,
        i.reconnectionAttempts = function(t) {
            return void 0 === t ? this.At : (this.At = t,
            this)
        }
        ,
        i.reconnectionDelay = function(t) {
            var e;
            return void 0 === t ? this.jt : (this.jt = t,
            null === (e = this.backoff) || void 0 === e || e.setMin(t),
            this)
        }
        ,
        i.randomizationFactor = function(t) {
            var e;
            return void 0 === t ? this.Et : (this.Et = t,
            null === (e = this.backoff) || void 0 === e || e.setJitter(t),
            this)
        }
        ,
        i.reconnectionDelayMax = function(t) {
            var e;
            return void 0 === t ? this.Ot : (this.Ot = t,
            null === (e = this.backoff) || void 0 === e || e.setMax(t),
            this)
        }
        ,
        i.timeout = function(t) {
            return arguments.length ? (this.Bt = t,
            this) : this.Bt
        }
        ,
        i.maybeReconnectOnOpen = function() {
            !this.ot && this.kt && 0 === this.backoff.attempts && this.reconnect()
        }
        ,
        i.open = function(t) {
            var e = this;
            if (~this.st.indexOf("open"))
                return this;
            this.engine = new ht(this.uri,this.opts);
            var i = this.engine
              , n = this;
            this.st = "opening",
            this.skipReconnect = !1;
            var s = Wt(i, "open", (function() {
                n.onopen(),
                t && t()
            }
            ))
              , o = function(i) {
                e.cleanup(),
                e.st = "closed",
                e.emitReserved("error", i),
                t ? t(i) : e.maybeReconnectOnOpen()
            }
              , a = Wt(i, "error", o);
            if (!1 !== this.Bt) {
                var l = this.Bt
                  , r = this.setTimeoutFn((function() {
                    s(),
                    o(new Error("timeout")),
                    i.close()
                }
                ), l);
                this.opts.autoUnref && r.unref(),
                this.subs.push((function() {
                    e.clearTimeoutFn(r)
                }
                ))
            }
            return this.subs.push(s),
            this.subs.push(a),
            this
        }
        ,
        i.connect = function(t) {
            return this.open(t)
        }
        ,
        i.onopen = function() {
            this.cleanup(),
            this.st = "open",
            this.emitReserved("open");
            var t = this.engine;
            this.subs.push(Wt(t, "ping", this.onping.bind(this)), Wt(t, "data", this.ondata.bind(this)), Wt(t, "error", this.onerror.bind(this)), Wt(t, "close", this.onclose.bind(this)), Wt(this.decoder, "decoded", this.ondecoded.bind(this)))
        }
        ,
        i.onping = function() {
            this.emitReserved("ping")
        }
        ,
        i.ondata = function(t) {
            try {
                this.decoder.add(t)
            } catch (t) {
                this.onclose("parse error", t)
            }
        }
        ,
        i.ondecoded = function(t) {
            var e = this;
            G((function() {
                e.emitReserved("packet", t)
            }
            ), this.setTimeoutFn)
        }
        ,
        i.onerror = function(t) {
            this.emitReserved("error", t)
        }
        ,
        i.socket = function(t, e) {
            var i = this.nsps[t];
            return i ? this.et && !i.active && i.connect() : (i = new Gt(this,t,e),
            this.nsps[t] = i),
            i
        }
        ,
        i.wt = function(t) {
            for (var e = 0, i = Object.keys(this.nsps); e < i.length; e++) {
                var n = i[e];
                if (this.nsps[n].active)
                    return
            }
            this.St()
        }
        ,
        i.ct = function(t) {
            for (var e = this.encoder.encode(t), i = 0; i < e.length; i++)
                this.engine.write(e[i], t.options)
        }
        ,
        i.cleanup = function() {
            this.subs.forEach((function(t) {
                return t()
            }
            )),
            this.subs.length = 0,
            this.decoder.destroy()
        }
        ,
        i.St = function() {
            this.skipReconnect = !0,
            this.ot = !1,
            this.onclose("forced close")
        }
        ,
        i.disconnect = function() {
            return this.St()
        }
        ,
        i.onclose = function(t, e) {
            var i;
            this.cleanup(),
            null === (i = this.engine) || void 0 === i || i.close(),
            this.backoff.reset(),
            this.st = "closed",
            this.emitReserved("close", t, e),
            this.kt && !this.skipReconnect && this.reconnect()
        }
        ,
        i.reconnect = function() {
            var t = this;
            if (this.ot || this.skipReconnect)
                return this;
            var e = this;
            if (this.backoff.attempts >= this.At)
                this.backoff.reset(),
                this.emitReserved("reconnect_failed"),
                this.ot = !1;
            else {
                var i = this.backoff.duration();
                this.ot = !0;
                var n = this.setTimeoutFn((function() {
                    e.skipReconnect || (t.emitReserved("reconnect_attempt", e.backoff.attempts),
                    e.skipReconnect || e.open((function(i) {
                        i ? (e.ot = !1,
                        e.reconnect(),
                        t.emitReserved("reconnect_error", i)) : e.onreconnect()
                    }
                    )))
                }
                ), i);
                this.opts.autoUnref && n.unref(),
                this.subs.push((function() {
                    t.clearTimeoutFn(n)
                }
                ))
            }
        }
        ,
        i.onreconnect = function() {
            var t = this.backoff.attempts;
            this.ot = !1,
            this.backoff.reset(),
            this.emitReserved("reconnect", t)
        }
        ,
        e
    }(F)
      , kt = {};
    function Et(t, e) {
        "object" === d(t) && (e = t,
        t = void 0);
        var i, n = function(t) {
            var e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : ""
              , i = arguments.length > 2 ? arguments[2] : void 0
              , n = t;
            i = i || "undefined" != typeof location && location,
            null == t && (t = i.protocol + "//" + i.host),
            "string" == typeof t && ("/" === t.charAt(0) && (t = "/" === t.charAt(1) ? i.protocol + t : i.host + t),
            /^(https?|wss?):\/\//.test(t) || (t = void 0 !== i ? i.protocol + "//" + t : "https://" + t),
            n = lt(t)),
            n.port || (/^(http|ws)$/.test(n.protocol) ? n.port = "80" : /^(http|ws)s$/.test(n.protocol) && (n.port = "443")),
            n.path = n.path || "/";
            var s = -1 !== n.host.indexOf(":") ? "[" + n.host + "]" : n.host;
            return n.id = n.protocol + "://" + s + ":" + n.port + e,
            n.href = n.protocol + "://" + s + (i && i.port === n.port ? "" : ":" + n.port),
            n
        }(t, (e = e || {}).path || "/socket.io"), s = n.source, o = n.id, a = n.path, l = kt[o] && a in kt[o].nsps;
        return e.forceNew || e["force new connection"] || !1 === e.multiplex || l ? i = new Tt(s,e) : (kt[o] || (kt[o] = new Tt(s,e)),
        i = kt[o]),
        n.query && !e.query && (e.query = n.queryKey),
        i.socket(n.path, e)
    }
    return s(Et, {
        Manager: Tt,
        Socket: Gt,
        io: Et,
        connect: Et
    }),
    Et
}
)),
window.EJS_SHADERS = {
    "2xScaleHQ.glslp": {
        shader: {
            type: "text",
            value: 'shaders = 1\n\nshader0 = "2xScaleHQ.glsl"\nfilter_linear0 = false\nscale_type_0 = source\n'
        },
        resources: [{
            name: "2xScaleHQ.glsl",
            type: "base64",
            value: "LyoKICAgMnhHTFNMSHFGaWx0ZXIgc2hhZGVyCiAgIAogICBDb3B5cmlnaHQgKEMpIDIwMDUgZ3Vlc3QocikgLSBndWVzdC5yQGdtYWlsLmNvbQoKICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcgogICBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMgogICBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KCiAgIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCgogICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZQogICBGb3VuZGF0aW9uLCBJbmMuLCA1OSBUZW1wbGUgUGxhY2UgLSBTdWl0ZSAzMzAsIEJvc3RvbiwgTUEgIDAyMTExLTEzMDcsIFVTQS4KKi8KCiNpZiBkZWZpbmVkKFZFUlRFWCkKCiNpZiBfX1ZFUlNJT05fXyA+PSAxMzAKI2RlZmluZSBDT01QQVRfVkFSWUlORyBvdXQKI2RlZmluZSBDT01QQVRfQVRUUklCVVRFIGluCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZQojZWxzZQojZGVmaW5lIENPTVBBVF9WQVJZSU5HIHZhcnlpbmcgCiNkZWZpbmUgQ09NUEFUX0FUVFJJQlVURSBhdHRyaWJ1dGUgCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZTJECiNlbmRpZgoKI2lmZGVmIEdMX0VTCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTgojZW5kaWYKCkNPTVBBVF9BVFRSSUJVVEUgdmVjNCBWZXJ0ZXhDb29yZDsKQ09NUEFUX0FUVFJJQlVURSB2ZWM0IENPTE9SOwpDT01QQVRfQVRUUklCVVRFIHZlYzQgVGV4Q29vcmQ7CkNPTVBBVF9WQVJZSU5HIHZlYzQgQ09MMDsKQ09NUEFUX1ZBUllJTkcgdmVjNCBURVgwOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQxOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQyOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQzOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQ0OwoKdmVjNCBfb1Bvc2l0aW9uMTsgCnVuaWZvcm0gbWF0NCBNVlBNYXRyaXg7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVEaXJlY3Rpb247CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVDb3VudDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgT3V0cHV0U2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgVGV4dHVyZVNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIElucHV0U2l6ZTsKCi8vIGNvbXBhdGliaWxpdHkgI2RlZmluZXMKI2RlZmluZSB2VGV4Q29vcmQgVEVYMC54eQojZGVmaW5lIFNvdXJjZVNpemUgdmVjNChUZXh0dXJlU2l6ZSwgMS4wIC8gVGV4dHVyZVNpemUpIC8vZWl0aGVyIFRleHR1cmVTaXplIG9yIElucHV0U2l6ZQojZGVmaW5lIE91dFNpemUgdmVjNChPdXRwdXRTaXplLCAxLjAgLyBPdXRwdXRTaXplKQoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBNVlBNYXRyaXggKiBWZXJ0ZXhDb29yZDsKICAgIFRFWDAueHkgPSBUZXhDb29yZC54eTsKICAgZmxvYXQgeCA9IDAuNSAqIFNvdXJjZVNpemUuejsKICAgZmxvYXQgeSA9IDAuNSAqIFNvdXJjZVNpemUudzsKICAgdmVjMiBkZzEgPSB2ZWMyKCB4LCB5KTsKICAgdmVjMiBkZzIgPSB2ZWMyKC14LCB5KTsKICAgdmVjMiBkeCA9IHZlYzIoeCwgMC4wKTsKICAgdmVjMiBkeSA9IHZlYzIoMC4wLCB5KTsKICAgdDEgPSB2ZWM0KHZUZXhDb29yZCAtIGRnMSwgdlRleENvb3JkIC0gZHkpOwogICB0MiA9IHZlYzQodlRleENvb3JkIC0gZGcyLCB2VGV4Q29vcmQgKyBkeCk7CiAgIHQzID0gdmVjNCh2VGV4Q29vcmQgKyBkZzEsIHZUZXhDb29yZCArIGR5KTsKICAgdDQgPSB2ZWM0KHZUZXhDb29yZCArIGRnMiwgdlRleENvb3JkIC0gZHgpOwp9CgojZWxpZiBkZWZpbmVkKEZSQUdNRU5UKQoKI2lmIF9fVkVSU0lPTl9fID49IDEzMAojZGVmaW5lIENPTVBBVF9WQVJZSU5HIGluCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZQpvdXQgdmVjNCBGcmFnQ29sb3I7CiNlbHNlCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgdmFyeWluZwojZGVmaW5lIEZyYWdDb2xvciBnbF9GcmFnQ29sb3IKI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlMkQKI2VuZGlmCgojaWZkZWYgR0xfRVMKI2lmZGVmIEdMX0ZSQUdNRU5UX1BSRUNJU0lPTl9ISUdICnByZWNpc2lvbiBoaWdocCBmbG9hdDsKI2Vsc2UKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CiNlbmRpZgojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04gbWVkaXVtcAojZWxzZQojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04KI2VuZGlmCgp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lRGlyZWN0aW9uOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lQ291bnQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIE91dHB1dFNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIFRleHR1cmVTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBJbnB1dFNpemU7CnVuaWZvcm0gc2FtcGxlcjJEIFRleHR1cmU7CkNPTVBBVF9WQVJZSU5HIHZlYzQgVEVYMDsKQ09NUEFUX1ZBUllJTkcgdmVjNCB0MTsKQ09NUEFUX1ZBUllJTkcgdmVjNCB0MjsKQ09NUEFUX1ZBUllJTkcgdmVjNCB0MzsKQ09NUEFUX1ZBUllJTkcgdmVjNCB0NDsKCi8vIGNvbXBhdGliaWxpdHkgI2RlZmluZXMKI2RlZmluZSBTb3VyY2UgVGV4dHVyZQojZGVmaW5lIHZUZXhDb29yZCBURVgwLnh5CgojZGVmaW5lIFNvdXJjZVNpemUgdmVjNChUZXh0dXJlU2l6ZSwgMS4wIC8gVGV4dHVyZVNpemUpIC8vZWl0aGVyIFRleHR1cmVTaXplIG9yIElucHV0U2l6ZQojZGVmaW5lIE91dFNpemUgdmVjNChPdXRwdXRTaXplLCAxLjAgLyBPdXRwdXRTaXplKQoKZmxvYXQgbXggPSAwLjMyNTsgICAgICAvLyBzdGFydCBzbW9vdGhpbmcgd3QuCmZsb2F0IGsgPSAtMC4yNTA7ICAgICAgLy8gd3QuIGRlY3JlYXNlIGZhY3RvcgpmbG9hdCBtYXhfdyA9IDAuMjU7ICAgIC8vIG1heCBmaWx0ZXIgd2VpZ2h0CmZsb2F0IG1pbl93ID0tMC4wNTsgICAgLy8gbWluIGZpbHRlciB3ZWlnaHQKZmxvYXQgbHVtX2FkZCA9IDAuMjU7ICAvLyBhZmZlY3RzIHNtb290aGluZwp2ZWMzIGR0ID0gdmVjMygxLjApOwoKdm9pZCBtYWluKCkKewogICB2ZWMzIGMwMCA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgdDEueHkpLnh5ejsgCiAgIHZlYzMgYzEwID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB0MS56dykueHl6OyAKICAgdmVjMyBjMjAgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHQyLnh5KS54eXo7IAogICB2ZWMzIGMwMSA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgdDQuencpLnh5ejsgCiAgIHZlYzMgYzExID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB2VGV4Q29vcmQpLnh5ejsgCiAgIHZlYzMgYzIxID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB0Mi56dykueHl6OyAKICAgdmVjMyBjMDIgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHQ0Lnh5KS54eXo7IAogICB2ZWMzIGMxMiA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgdDMuencpLnh5ejsgCiAgIHZlYzMgYzIyID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB0My54eSkueHl6OyAKCiAgIGZsb2F0IG1kMSA9IGRvdChhYnMoYzAwIC0gYzIyKSwgZHQpOwogICBmbG9hdCBtZDIgPSBkb3QoYWJzKGMwMiAtIGMyMCksIGR0KTsKCiAgIGZsb2F0IHcxID0gZG90KGFicyhjMjIgLSBjMTEpLCBkdCkgKiBtZDI7CiAgIGZsb2F0IHcyID0gZG90KGFicyhjMDIgLSBjMTEpLCBkdCkgKiBtZDE7CiAgIGZsb2F0IHczID0gZG90KGFicyhjMDAgLSBjMTEpLCBkdCkgKiBtZDI7CiAgIGZsb2F0IHc0ID0gZG90KGFicyhjMjAgLSBjMTEpLCBkdCkgKiBtZDE7CgogICBmbG9hdCB0MSA9IHcxICsgdzM7CiAgIGZsb2F0IHQyID0gdzIgKyB3NDsKICAgZmxvYXQgd3cgPSBtYXgodDEsIHQyKSArIDAuMDAwMTsKCiAgIGMxMSA9ICh3MSAqIGMwMCArIHcyICogYzIwICsgdzMgKiBjMjIgKyB3NCAqIGMwMiArIHd3ICogYzExKSAvICh0MSArIHQyICsgd3cpOwoKICAgZmxvYXQgbGMxID0gayAvICgwLjEyICogZG90KGMxMCArIGMxMiArIGMxMSwgZHQpICsgbHVtX2FkZCk7CiAgIGZsb2F0IGxjMiA9IGsgLyAoMC4xMiAqIGRvdChjMDEgKyBjMjEgKyBjMTEsIGR0KSArIGx1bV9hZGQpOwoKICAgdzEgPSBjbGFtcChsYzEgKiBkb3QoYWJzKGMxMSAtIGMxMCksIGR0KSArIG14LCBtaW5fdywgbWF4X3cpOwogICB3MiA9IGNsYW1wKGxjMiAqIGRvdChhYnMoYzExIC0gYzIxKSwgZHQpICsgbXgsIG1pbl93LCBtYXhfdyk7CiAgIHczID0gY2xhbXAobGMxICogZG90KGFicyhjMTEgLSBjMTIpLCBkdCkgKyBteCwgbWluX3csIG1heF93KTsKICAgdzQgPSBjbGFtcChsYzIgKiBkb3QoYWJzKGMxMSAtIGMwMSksIGR0KSArIG14LCBtaW5fdywgbWF4X3cpOwogICBGcmFnQ29sb3IgPSB2ZWM0KHcxICogYzEwICsgdzIgKiBjMjEgKyB3MyAqIGMxMiArIHc0ICogYzAxICsgKDEuMCAtIHcxIC0gdzIgLSB3MyAtIHc0KSAqIGMxMSwgMS4wKTsKfSAKI2VuZGlmCg=="
        }]
    },
    "4xScaleHQ.glslp": {
        shader: {
            type: "text",
            value: 'shaders = 1\n\nshader0 = "4xScaleHQ.glsl"\nfilter_linear0 = false\nscale_type_0 = source\n'
        },
        resources: [{
            name: "4xScaleHQ.glsl",
            type: "base64",
            value: "LyoKICAgNHhHTFNMSHFGaWx0ZXIgc2hhZGVyCiAgIAogICBDb3B5cmlnaHQgKEMpIDIwMDUgZ3Vlc3QocikgLSBndWVzdC5yQGdtYWlsLmNvbQoKICAgVGhpcyBwcm9ncmFtIGlzIGZyZWUgc29mdHdhcmU7IHlvdSBjYW4gcmVkaXN0cmlidXRlIGl0IGFuZC9vcgogICBtb2RpZnkgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMgogICBvZiB0aGUgTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KCiAgIFRoaXMgcHJvZ3JhbSBpcyBkaXN0cmlidXRlZCBpbiB0aGUgaG9wZSB0aGF0IGl0IHdpbGwgYmUgdXNlZnVsLAogICBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgogICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlCiAgIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuCgogICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogICBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbTsgaWYgbm90LCB3cml0ZSB0byB0aGUgRnJlZSBTb2Z0d2FyZQogICBGb3VuZGF0aW9uLCBJbmMuLCA1OSBUZW1wbGUgUGxhY2UgLSBTdWl0ZSAzMzAsIEJvc3RvbiwgTUEgIDAyMTExLTEzMDcsIFVTQS4KKi8KCiNpZiBkZWZpbmVkKFZFUlRFWCkKCiNpZiBfX1ZFUlNJT05fXyA+PSAxMzAKI2RlZmluZSBDT01QQVRfVkFSWUlORyBvdXQKI2RlZmluZSBDT01QQVRfQVRUUklCVVRFIGluCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZQojZWxzZQojZGVmaW5lIENPTVBBVF9WQVJZSU5HIHZhcnlpbmcgCiNkZWZpbmUgQ09NUEFUX0FUVFJJQlVURSBhdHRyaWJ1dGUgCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZTJECiNlbmRpZgoKI2lmZGVmIEdMX0VTCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTgojZW5kaWYKCkNPTVBBVF9BVFRSSUJVVEUgdmVjNCBWZXJ0ZXhDb29yZDsKQ09NUEFUX0FUVFJJQlVURSB2ZWM0IENPTE9SOwpDT01QQVRfQVRUUklCVVRFIHZlYzQgVGV4Q29vcmQ7CkNPTVBBVF9WQVJZSU5HIHZlYzQgQ09MMDsKQ09NUEFUX1ZBUllJTkcgdmVjNCBURVgwOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQxOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQyOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQzOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQ0OwpDT01QQVRfVkFSWUlORyB2ZWM0IHQ1OwpDT01QQVRfVkFSWUlORyB2ZWM0IHQ2OwoKdmVjNCBfb1Bvc2l0aW9uMTsgCnVuaWZvcm0gbWF0NCBNVlBNYXRyaXg7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVEaXJlY3Rpb247CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVDb3VudDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgT3V0cHV0U2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgVGV4dHVyZVNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIElucHV0U2l6ZTsKCi8vIGNvbXBhdGliaWxpdHkgI2RlZmluZXMKI2RlZmluZSB2VGV4Q29vcmQgVEVYMC54eQojZGVmaW5lIFNvdXJjZVNpemUgdmVjNChUZXh0dXJlU2l6ZSwgMS4wIC8gVGV4dHVyZVNpemUpIC8vZWl0aGVyIFRleHR1cmVTaXplIG9yIElucHV0U2l6ZQojZGVmaW5lIE91dFNpemUgdmVjNChPdXRwdXRTaXplLCAxLjAgLyBPdXRwdXRTaXplKQoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBNVlBNYXRyaXggKiBWZXJ0ZXhDb29yZDsKICAgIFRFWDAueHkgPSBUZXhDb29yZC54eTsKICAgZmxvYXQgeCA9IDAuNSAqIFNvdXJjZVNpemUuejsKICAgZmxvYXQgeSA9IDAuNSAqIFNvdXJjZVNpemUudzsKICAgdmVjMiBkZzEgPSB2ZWMyKCB4LCB5KTsKICAgdmVjMiBkZzIgPSB2ZWMyKC14LCB5KTsKICAgdmVjMiBzZDEgPSBkZzEgKiAwLjU7CiAgIHZlYzIgc2QyID0gZGcyICogMC41OwogICB2ZWMyIGRkeCA9IHZlYzIoeCwgMC4wKTsKICAgdmVjMiBkZHkgPSB2ZWMyKDAuMCwgeSk7CiAgIHQxID0gdmVjNCh2VGV4Q29vcmQgLSBzZDEsIHZUZXhDb29yZCAtIGRkeSk7CiAgIHQyID0gdmVjNCh2VGV4Q29vcmQgLSBzZDIsIHZUZXhDb29yZCArIGRkeCk7CiAgIHQzID0gdmVjNCh2VGV4Q29vcmQgKyBzZDEsIHZUZXhDb29yZCArIGRkeSk7CiAgIHQ0ID0gdmVjNCh2VGV4Q29vcmQgKyBzZDIsIHZUZXhDb29yZCAtIGRkeCk7CiAgIHQ1ID0gdmVjNCh2VGV4Q29vcmQgLSBkZzEsIHZUZXhDb29yZCAtIGRnMik7CiAgIHQ2ID0gdmVjNCh2VGV4Q29vcmQgKyBkZzEsIHZUZXhDb29yZCArIGRnMik7Cn0KCiNlbGlmIGRlZmluZWQoRlJBR01FTlQpCgojaWYgX19WRVJTSU9OX18gPj0gMTMwCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgaW4KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlCm91dCB2ZWM0IEZyYWdDb2xvcjsKI2Vsc2UKI2RlZmluZSBDT01QQVRfVkFSWUlORyB2YXJ5aW5nCiNkZWZpbmUgRnJhZ0NvbG9yIGdsX0ZyYWdDb2xvcgojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUyRAojZW5kaWYKCiNpZmRlZiBHTF9FUwojaWZkZWYgR0xfRlJBR01FTlRfUFJFQ0lTSU9OX0hJR0gKcHJlY2lzaW9uIGhpZ2hwIGZsb2F0OwojZWxzZQpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKI2VuZGlmCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTgojZW5kaWYKCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVEaXJlY3Rpb247CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVDb3VudDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgT3V0cHV0U2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgVGV4dHVyZVNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIElucHV0U2l6ZTsKdW5pZm9ybSBzYW1wbGVyMkQgVGV4dHVyZTsKQ09NUEFUX1ZBUllJTkcgdmVjNCBURVgwOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQxOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQyOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQzOwpDT01QQVRfVkFSWUlORyB2ZWM0IHQ0OwpDT01QQVRfVkFSWUlORyB2ZWM0IHQ1OwpDT01QQVRfVkFSWUlORyB2ZWM0IHQ2OwoKLy8gY29tcGF0aWJpbGl0eSAjZGVmaW5lcwojZGVmaW5lIFNvdXJjZSBUZXh0dXJlCiNkZWZpbmUgdlRleENvb3JkIFRFWDAueHkKCiNkZWZpbmUgU291cmNlU2l6ZSB2ZWM0KFRleHR1cmVTaXplLCAxLjAgLyBUZXh0dXJlU2l6ZSkgLy9laXRoZXIgVGV4dHVyZVNpemUgb3IgSW5wdXRTaXplCiNkZWZpbmUgT3V0U2l6ZSB2ZWM0KE91dHB1dFNpemUsIDEuMCAvIE91dHB1dFNpemUpCgpmbG9hdCBteCA9IDEuMDsgICAgICAvLyBzdGFydCBzbW9vdGhpbmcgd3QuCmZsb2F0IGsgPSAtMS4xMDsgICAgICAvLyB3dC4gZGVjcmVhc2UgZmFjdG9yCmZsb2F0IG1heF93ID0gMC43NTsgICAgLy8gbWF4IGZpbHRlciB3ZWlnaHQKZmxvYXQgbWluX3cgPSAwLjAzOyAgICAvLyBtaW4gZmlsdGVyIHdlaWdodApmbG9hdCBsdW1fYWRkID0gMC4zMzsgIC8vIGFmZmVjdHMgc21vb3RoaW5nCnZlYzMgZHQgPSB2ZWMzKDEuMCk7Cgp2b2lkIG1haW4oKQp7CiAgIHZlYzMgYyAgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHZUZXhDb29yZCkueHl6OwogICB2ZWMzIGkxID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB0MS54eSkueHl6OyAKICAgdmVjMyBpMiA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgdDIueHkpLnh5ejsgCiAgIHZlYzMgaTMgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHQzLnh5KS54eXo7IAogICB2ZWMzIGk0ID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB0NC54eSkueHl6OyAKICAgdmVjMyBvMSA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgdDUueHkpLnh5ejsgCiAgIHZlYzMgbzMgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHQ2Lnh5KS54eXo7IAogICB2ZWMzIG8yID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB0NS56dykueHl6OwogICB2ZWMzIG80ID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB0Ni56dykueHl6OwogICB2ZWMzIHMxID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB0MS56dykueHl6OyAKICAgdmVjMyBzMiA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgdDIuencpLnh5ejsgCiAgIHZlYzMgczMgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHQzLnp3KS54eXo7IAogICB2ZWMzIHM0ID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB0NC56dykueHl6OyAKCiAgIGZsb2F0IGtvMT1kb3QoYWJzKG8xLWMpLGR0KTsKICAgZmxvYXQga28yPWRvdChhYnMobzItYyksZHQpOwogICBmbG9hdCBrbzM9ZG90KGFicyhvMy1jKSxkdCk7CiAgIGZsb2F0IGtvND1kb3QoYWJzKG80LWMpLGR0KTsKCiAgIGZsb2F0IGsxPW1pbihkb3QoYWJzKGkxLWkzKSxkdCksbWF4KGtvMSxrbzMpKTsKICAgZmxvYXQgazI9bWluKGRvdChhYnMoaTItaTQpLGR0KSxtYXgoa28yLGtvNCkpOwoKICAgZmxvYXQgdzEgPSBrMjsgaWYoa28zPGtvMSkgdzEqPWtvMy9rbzE7CiAgIGZsb2F0IHcyID0gazE7IGlmKGtvNDxrbzIpIHcyKj1rbzQva28yOwogICBmbG9hdCB3MyA9IGsyOyBpZihrbzE8a28zKSB3Myo9a28xL2tvMzsKICAgZmxvYXQgdzQgPSBrMTsgaWYoa28yPGtvNCkgdzQqPWtvMi9rbzQ7CgogICBjPSh3MSpvMSt3MipvMit3MypvMyt3NCpvNCswLjAwMSpjKS8odzErdzIrdzMrdzQrMC4wMDEpOwogICB3MSA9IGsqZG90KGFicyhpMS1jKSthYnMoaTMtYyksZHQpLygwLjEyNSpkb3QoaTEraTMsZHQpK2x1bV9hZGQpOwogICB3MiA9IGsqZG90KGFicyhpMi1jKSthYnMoaTQtYyksZHQpLygwLjEyNSpkb3QoaTIraTQsZHQpK2x1bV9hZGQpOwogICB3MyA9IGsqZG90KGFicyhzMS1jKSthYnMoczMtYyksZHQpLygwLjEyNSpkb3QoczErczMsZHQpK2x1bV9hZGQpOwogICB3NCA9IGsqZG90KGFicyhzMi1jKSthYnMoczQtYyksZHQpLygwLjEyNSpkb3QoczIrczQsZHQpK2x1bV9hZGQpOwoKICAgdzEgPSBjbGFtcCh3MStteCxtaW5fdyxtYXhfdyk7IAogICB3MiA9IGNsYW1wKHcyK214LG1pbl93LG1heF93KTsKICAgdzMgPSBjbGFtcCh3MytteCxtaW5fdyxtYXhfdyk7IAogICB3NCA9IGNsYW1wKHc0K214LG1pbl93LG1heF93KTsKCiAgIEZyYWdDb2xvciA9IHZlYzQoKHcxKihpMStpMykrdzIqKGkyK2k0KSt3MyooczErczMpK3c0KihzMitzNCkrYykvKDIuMCoodzErdzIrdzMrdzQpKzEuMCksIDEuMCk7Cn0gCiNlbmRpZgo="
        }]
    },
    sabr: {
        shader: {
            type: "text",
            value: "shaders = 1\n\nshader0 = sabr-v3.0.glsl\nfilter_linear0 = false\n"
        },
        resources: [{
            name: "sabr-v3.0.glsl",
            type: "base64",
            value: "LyoKCVNBQlIgdjMuMCBTaGFkZXIKCUpvc2h1YSBTdHJlZXQKCQoJUG9ydGlvbnMgb2YgdGhpcyBhbGdvcml0aG0gd2VyZSB0YWtlbiBmcm9tIEh5bGxpYW4ncyA1eEJSIHYzLjdjCglzaGFkZXIuCgkKCVRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IKCW1vZGlmeSBpdCB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCglhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbjsgZWl0aGVyIHZlcnNpb24gMgoJb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikgYW55IGxhdGVyIHZlcnNpb24uCgoJVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsCglidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZgoJTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZQoJR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgZm9yIG1vcmUgZGV0YWlscy4KCglZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQoJYWxvbmcgd2l0aCB0aGlzIHByb2dyYW07IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUKCUZvdW5kYXRpb24sIEluYy4sIDU5IFRlbXBsZSBQbGFjZSAtIFN1aXRlIDMzMCwgQm9zdG9uLCBNQSAgMDIxMTEtMTMwNywgVVNBLgoKKi8KCiNpZiBkZWZpbmVkKFZFUlRFWCkKCiNpZiBfX1ZFUlNJT05fXyA+PSAxMzAKI2RlZmluZSBDT01QQVRfVkFSWUlORyBvdXQKI2RlZmluZSBDT01QQVRfQVRUUklCVVRFIGluCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZQojZWxzZQojZGVmaW5lIENPTVBBVF9WQVJZSU5HIHZhcnlpbmcgCiNkZWZpbmUgQ09NUEFUX0FUVFJJQlVURSBhdHRyaWJ1dGUgCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZTJECiNlbmRpZgoKI2lmZGVmIEdMX0VTCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTgojZW5kaWYKCkNPTVBBVF9BVFRSSUJVVEUgdmVjNCBWZXJ0ZXhDb29yZDsKQ09NUEFUX0FUVFJJQlVURSB2ZWM0IENPTE9SOwpDT01QQVRfQVRUUklCVVRFIHZlYzQgVGV4Q29vcmQ7CkNPTVBBVF9WQVJZSU5HIHZlYzQgQ09MMDsKQ09NUEFUX1ZBUllJTkcgdmVjNCBURVgwOwoKdW5pZm9ybSBtYXQ0IE1WUE1hdHJpeDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZURpcmVjdGlvbjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZUNvdW50Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBPdXRwdXRTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBUZXh0dXJlU2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgSW5wdXRTaXplOwpDT01QQVRfVkFSWUlORyB2ZWMyIHRjOwpDT01QQVRfVkFSWUlORyB2ZWM0IHh5cF8xXzJfMzsKQ09NUEFUX1ZBUllJTkcgdmVjNCB4eXBfNV8xMF8xNTsKQ09NUEFUX1ZBUllJTkcgdmVjNCB4eXBfNl83Xzg7CkNPTVBBVF9WQVJZSU5HIHZlYzQgeHlwXzlfMTRfOTsKQ09NUEFUX1ZBUllJTkcgdmVjNCB4eXBfMTFfMTJfMTM7CkNPTVBBVF9WQVJZSU5HIHZlYzQgeHlwXzE2XzE3XzE4OwpDT01QQVRfVkFSWUlORyB2ZWM0IHh5cF8yMV8yMl8yMzsKCi8vIHZlcnRleCBjb21wYXRpYmlsaXR5ICNkZWZpbmVzCiNkZWZpbmUgdlRleENvb3JkIFRFWDAueHkKI2RlZmluZSBTb3VyY2VTaXplIHZlYzQoVGV4dHVyZVNpemUsIDEuMCAvIFRleHR1cmVTaXplKSAvL2VpdGhlciBUZXh0dXJlU2l6ZSBvciBJbnB1dFNpemUKI2RlZmluZSBvdXRzaXplIHZlYzQoT3V0cHV0U2l6ZSwgMS4wIC8gT3V0cHV0U2l6ZSkKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gTVZQTWF0cml4ICogVmVydGV4Q29vcmQ7CiAgICBDT0wwID0gQ09MT1I7CiAgICBURVgwLnh5ID0gVGV4Q29vcmQueHk7CiAgIAlmbG9hdCB4ID0gU291cmNlU2l6ZS56Oy8vMS4wIC8gSU4udGV4dHVyZV9zaXplLng7CglmbG9hdCB5ID0gU291cmNlU2l6ZS53Oy8vMS4wIC8gSU4udGV4dHVyZV9zaXplLnk7CgkKCXRjID0gVEVYMC54eSAqIHZlYzIoMS4wMDA0LCAxLjApOwoJeHlwXzFfMl8zICAgID0gdGMueHh4eSArIHZlYzQoICAgICAgLXgsIDAuMCwgICB4LCAtMi4wICogeSk7Cgl4eXBfNl83XzggICAgPSB0Yy54eHh5ICsgdmVjNCggICAgICAteCwgMC4wLCAgIHgsICAgICAgIC15KTsKCXh5cF8xMV8xMl8xMyA9IHRjLnh4eHkgKyB2ZWM0KCAgICAgIC14LCAwLjAsICAgeCwgICAgICAwLjApOwoJeHlwXzE2XzE3XzE4ID0gdGMueHh4eSArIHZlYzQoICAgICAgLXgsIDAuMCwgICB4LCAgICAgICAgeSk7Cgl4eXBfMjFfMjJfMjMgPSB0Yy54eHh5ICsgdmVjNCggICAgICAteCwgMC4wLCAgIHgsICAyLjAgKiB5KTsKCXh5cF81XzEwXzE1ICA9IHRjLnh5eXkgKyB2ZWM0KC0yLjAgKiB4LCAgLXksIDAuMCwgICAgICAgIHkpOwoJeHlwXzlfMTRfOSAgID0gdGMueHl5eSArIHZlYzQoIDIuMCAqIHgsICAteSwgMC4wLCAgICAgICAgeSk7Cn0KCiNlbGlmIGRlZmluZWQoRlJBR01FTlQpCgojaWYgX19WRVJTSU9OX18gPj0gMTMwCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgaW4KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlCm91dCB2ZWM0IEZyYWdDb2xvcjsKI2Vsc2UKI2RlZmluZSBDT01QQVRfVkFSWUlORyB2YXJ5aW5nCiNkZWZpbmUgRnJhZ0NvbG9yIGdsX0ZyYWdDb2xvcgojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUyRAojZW5kaWYKCiNpZmRlZiBHTF9FUwojaWZkZWYgR0xfRlJBR01FTlRfUFJFQ0lTSU9OX0hJR0gKcHJlY2lzaW9uIGhpZ2hwIGZsb2F0OwojZWxzZQpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKI2VuZGlmCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTgojZW5kaWYKCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVEaXJlY3Rpb247CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVDb3VudDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgT3V0cHV0U2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgVGV4dHVyZVNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIElucHV0U2l6ZTsKdW5pZm9ybSBzYW1wbGVyMkQgVGV4dHVyZTsKQ09NUEFUX1ZBUllJTkcgdmVjNCBURVgwOwpDT01QQVRfVkFSWUlORyB2ZWMyIHRjOwpDT01QQVRfVkFSWUlORyB2ZWM0IHh5cF8xXzJfMzsKQ09NUEFUX1ZBUllJTkcgdmVjNCB4eXBfNV8xMF8xNTsKQ09NUEFUX1ZBUllJTkcgdmVjNCB4eXBfNl83Xzg7CkNPTVBBVF9WQVJZSU5HIHZlYzQgeHlwXzlfMTRfOTsKQ09NUEFUX1ZBUllJTkcgdmVjNCB4eXBfMTFfMTJfMTM7CkNPTVBBVF9WQVJZSU5HIHZlYzQgeHlwXzE2XzE3XzE4OwpDT01QQVRfVkFSWUlORyB2ZWM0IHh5cF8yMV8yMl8yMzsKCi8vIGZyYWdtZW50IGNvbXBhdGliaWxpdHkgI2RlZmluZXMKI2RlZmluZSBTb3VyY2UgVGV4dHVyZQojZGVmaW5lIHZUZXhDb29yZCBURVgwLnh5CgojZGVmaW5lIFNvdXJjZVNpemUgdmVjNChUZXh0dXJlU2l6ZSwgMS4wIC8gVGV4dHVyZVNpemUpIC8vZWl0aGVyIFRleHR1cmVTaXplIG9yIElucHV0U2l6ZQojZGVmaW5lIG91dHNpemUgdmVjNChPdXRwdXRTaXplLCAxLjAgLyBPdXRwdXRTaXplKQoKLyoKCUNvbnN0YW50cwoqLwovKgoJSW5lcXVhdGlvbiBjb2VmZmljaWVudHMgZm9yIGludGVycG9sYXRpb24KRXF1YXRpb25zIGFyZSBpbiB0aGUgZm9ybTogQXkgKyBCeCA9IEMKNDUsIDMwLCBhbmQgNjAgZGVub3RlIHRoZSBhbmdsZSBmcm9tIHggZWFjaCBsaW5lIHRoZSBjb29lZmljaWVudCB2YXJpYWJsZSBzZXQgYnVpbGRzCiovCmNvbnN0IHZlYzQgQWkgID0gdmVjNCggMS4wLCAtMS4wLCAtMS4wLCAgMS4wKTsKY29uc3QgdmVjNCBCNDUgPSB2ZWM0KCAxLjAsICAxLjAsIC0xLjAsIC0xLjApOwpjb25zdCB2ZWM0IEM0NSA9IHZlYzQoIDEuNSwgIDAuNSwgLTAuNSwgIDAuNSk7CmNvbnN0IHZlYzQgQjMwID0gdmVjNCggMC41LCAgMi4wLCAtMC41LCAtMi4wKTsKY29uc3QgdmVjNCBDMzAgPSB2ZWM0KCAxLjAsICAxLjAsIC0wLjUsICAwLjApOwpjb25zdCB2ZWM0IEI2MCA9IHZlYzQoIDIuMCwgIDAuNSwgLTIuMCwgLTAuNSk7CmNvbnN0IHZlYzQgQzYwID0gdmVjNCggMi4wLCAgMC4wLCAtMS4wLCAgMC41KTsKCmNvbnN0IHZlYzQgTTQ1ID0gdmVjNCgwLjQsIDAuNCwgMC40LCAwLjQpOwpjb25zdCB2ZWM0IE0zMCA9IHZlYzQoMC4yLCAwLjQsIDAuMiwgMC40KTsKY29uc3QgdmVjNCBNNjAgPSBNMzAueXh3ejsKY29uc3QgdmVjNCBNc2hpZnQgPSB2ZWM0KDAuMik7CgovLyBDb2VmZmljaWVudCBmb3Igd2VpZ2h0ZWQgZWRnZSBkZXRlY3Rpb24KY29uc3QgZmxvYXQgY29lZiA9IDIuMDsKLy8gVGhyZXNob2xkIGZvciBpZiBsdW1pbmFuY2UgdmFsdWVzIGFyZSAiZXF1YWwiCmNvbnN0IHZlYzQgdGhyZXNob2xkID0gdmVjNCgwLjMyKTsKCi8vIENvbnZlcnNpb24gZnJvbSBSR0IgdG8gTHVtaW5hbmNlIChmcm9tIEdJTVApCmNvbnN0IHZlYzMgbHVtID0gdmVjMygwLjIxLCAwLjcyLCAwLjA3KTsKCi8vIFBlcmZvcm1zIHNhbWUgbG9naWMgb3BlcmF0aW9uIGFzICYmIGZvciB2ZWN0b3JzCmJ2ZWM0IF9hbmRfKGJ2ZWM0IEEsIGJ2ZWM0IEIpIHsKCXJldHVybiBidmVjNChBLnggJiYgQi54LCBBLnkgJiYgQi55LCBBLnogJiYgQi56LCBBLncgJiYgQi53KTsKfQoKLy8gUGVyZm9ybXMgc2FtZSBsb2dpYyBvcGVyYXRpb24gYXMgfHwgZm9yIHZlY3RvcnMKYnZlYzQgX29yXyhidmVjNCBBLCBidmVjNCBCKSB7CglyZXR1cm4gYnZlYzQoQS54IHx8IEIueCwgQS55IHx8IEIueSwgQS56IHx8IEIueiwgQS53IHx8IEIudyk7Cn0KCi8vIENvbnZlcnRzIDQgMy1jb2xvciB2ZWN0b3JzIGludG8gMSA0LXZhbHVlIGx1bWluYW5jZSB2ZWN0b3IKdmVjNCBsdW1fdG8odmVjMyB2MCwgdmVjMyB2MSwgdmVjMyB2MiwgdmVjMyB2MykgewoJcmV0dXJuIHZlYzQoZG90KGx1bSwgdjApLCBkb3QobHVtLCB2MSksIGRvdChsdW0sIHYyKSwgZG90KGx1bSwgdjMpKTsKfQoKLy8gR2V0cyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIDIgNC12YWx1ZSBsdW1pbmFuY2UgdmVjdG9ycwp2ZWM0IGx1bV9kZih2ZWM0IEEsIHZlYzQgQikgewoJcmV0dXJuIGFicyhBIC0gQik7Cn0KCi8vIERldGVybWluZXMgaWYgMiA0LXZhbHVlIGx1bWluYW5jZSB2ZWN0b3JzIGFyZSAiZXF1YWwiIGJhc2VkIG9uIHRocmVzaG9sZApidmVjNCBsdW1fZXEodmVjNCBBLCB2ZWM0IEIpIHsKCXJldHVybiBsZXNzVGhhbihsdW1fZGYoQSwgQiksIHRocmVzaG9sZCk7Cn0KCnZlYzQgbHVtX3dkKHZlYzQgYSwgdmVjNCBiLCB2ZWM0IGMsIHZlYzQgZCwgdmVjNCBlLCB2ZWM0IGYsIHZlYzQgZywgdmVjNCBoKSB7CglyZXR1cm4gbHVtX2RmKGEsIGIpICsgbHVtX2RmKGEsIGMpICsgbHVtX2RmKGQsIGUpICsgbHVtX2RmKGQsIGYpICsgNC4wICogbHVtX2RmKGcsIGgpOwp9CgovLyBHZXRzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gMiAzLXZhbHVlIHJnYiBjb2xvcnMKZmxvYXQgY19kZih2ZWMzIGMxLCB2ZWMzIGMyKSB7Cgl2ZWMzIGRmID0gYWJzKGMxIC0gYzIpOwoJcmV0dXJuIGRmLnIgKyBkZi5nICsgZGYuYjsKfQoKdm9pZCBtYWluKCkKewovKgpNYXNrIGZvciBhbGdvcml0aG0KKy0tLS0tKy0tLS0tKy0tLS0tKy0tLS0tKy0tLS0tKwp8ICAgICB8ICAxICB8ICAyICB8ICAzICB8ICAgICB8CistLS0tLSstLS0tLSstLS0tLSstLS0tLSstLS0tLSsKfCAgNSAgfCAgNiAgfCAgNyAgfCAgOCAgfCAgOSAgfAorLS0tLS0rLS0tLS0rLS0tLS0rLS0tLS0rLS0tLS0rCnwgMTAgIHwgMTEgIHwgMTIgIHwgMTMgIHwgMTQgIHwKKy0tLS0tKy0tLS0tKy0tLS0tKy0tLS0tKy0tLS0tKwp8IDE1ICB8IDE2ICB8IDE3ICB8IDE4ICB8IDE5ICB8CistLS0tLSstLS0tLSstLS0tLSstLS0tLSstLS0tLSsKfCAgICAgfCAyMSAgfCAyMiAgfCAyMyAgfCAgICAgfAorLS0tLS0rLS0tLS0rLS0tLS0rLS0tLS0rLS0tLS0rCgkqLwoJLy8gR2V0IG1hc2sgdmFsdWVzIGJ5IHBlcmZvcm1pbmcgdGV4dHVyZSBsb29rdXAgd2l0aCB0aGUgdW5pZm9ybSBzYW1wbGVyCgl2ZWMzIFAxICA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgeHlwXzFfMl8zLnh3ICAgKS5yZ2I7Cgl2ZWMzIFAyICA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgeHlwXzFfMl8zLnl3ICAgKS5yZ2I7Cgl2ZWMzIFAzICA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgeHlwXzFfMl8zLnp3ICAgKS5yZ2I7CgkKCXZlYzMgUDYgID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB4eXBfNl83XzgueHcgICApLnJnYjsKCXZlYzMgUDcgID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB4eXBfNl83XzgueXcgICApLnJnYjsKCXZlYzMgUDggID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB4eXBfNl83XzguencgICApLnJnYjsKCQoJdmVjMyBQMTEgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHh5cF8xMV8xMl8xMy54dykucmdiOwoJdmVjMyBQMTIgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHh5cF8xMV8xMl8xMy55dykucmdiOwoJdmVjMyBQMTMgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHh5cF8xMV8xMl8xMy56dykucmdiOwoJCgl2ZWMzIFAxNiA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgeHlwXzE2XzE3XzE4Lnh3KS5yZ2I7Cgl2ZWMzIFAxNyA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgeHlwXzE2XzE3XzE4Lnl3KS5yZ2I7Cgl2ZWMzIFAxOCA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgeHlwXzE2XzE3XzE4Lnp3KS5yZ2I7CgkKCXZlYzMgUDIxID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB4eXBfMjFfMjJfMjMueHcpLnJnYjsKCXZlYzMgUDIyID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB4eXBfMjFfMjJfMjMueXcpLnJnYjsKCXZlYzMgUDIzID0gQ09NUEFUX1RFWFRVUkUoU291cmNlLCB4eXBfMjFfMjJfMjMuencpLnJnYjsKCQoJdmVjMyBQNSAgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHh5cF81XzEwXzE1Lnh5ICkucmdiOwoJdmVjMyBQMTAgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHh5cF81XzEwXzE1Lnh6ICkucmdiOwoJdmVjMyBQMTUgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHh5cF81XzEwXzE1Lnh3ICkucmdiOwoJCgl2ZWMzIFA5ICA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgeHlwXzlfMTRfOS54eSAgKS5yZ2I7Cgl2ZWMzIFAxNCA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgeHlwXzlfMTRfOS54eiAgKS5yZ2I7Cgl2ZWMzIFAxOSA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgeHlwXzlfMTRfOS54dyAgKS5yZ2I7CgkKCS8vIFN0b3JlIGx1bWluYW5jZSB2YWx1ZXMgb2YgZWFjaCBwb2ludCBpbiBncm91cHMgb2YgNAoJLy8gc28gdGhhdCB3ZSBtYXkgb3BlcmF0ZSBvbiBhbGwgZm91ciBjb3JuZXJzIGF0IG9uY2UKCXZlYzQgcDcgID0gbHVtX3RvKFA3LCAgUDExLCBQMTcsIFAxMyk7Cgl2ZWM0IHA4ICA9IGx1bV90byhQOCwgIFA2LCAgUDE2LCBQMTgpOwoJdmVjNCBwMTEgPSBwNy55end4OyAgICAgICAgICAgICAgICAgICAgICAvLyBQMTEsIFAxNywgUDEzLCBQNwoJdmVjNCBwMTIgPSBsdW1fdG8oUDEyLCBQMTIsIFAxMiwgUDEyKTsKCXZlYzQgcDEzID0gcDcud3h5ejsgICAgICAgICAgICAgICAgICAgICAgLy8gUDEzLCBQNywgIFAxMSwgUDE3Cgl2ZWM0IHAxNCA9IGx1bV90byhQMTQsIFAyLCAgUDEwLCBQMjIpOwoJdmVjNCBwMTYgPSBwOC56d3h5OyAgICAgICAgICAgICAgICAgICAgICAvLyBQMTYsIFAxOCwgUDgsICBQNgoJdmVjNCBwMTcgPSBwNy56d3h5OyAgICAgICAgICAgICAgICAgICAgICAvLyBQMTcsIFAxMywgUDcsICBQMTEKCXZlYzQgcDE4ID0gcDgud3h5ejsgICAgICAgICAgICAgICAgICAgICAgLy8gUDE4LCBQOCwgIFA2LCAgUDE2Cgl2ZWM0IHAxOSA9IGx1bV90byhQMTksIFAzLCAgUDUsICBQMjEpOwoJdmVjNCBwMjIgPSBwMTQud3h5ejsgICAgICAgICAgICAgICAgICAgICAvLyBQMjIsIFAxNCwgUDIsICBQMTAKCXZlYzQgcDIzID0gbHVtX3RvKFAyMywgUDksICBQMSwgIFAxNSk7CgkKCS8vIFNjYWxlIGN1cnJlbnQgdGV4ZWwgY29vcmRpbmF0ZSB0byBbMC4uMV0KCXZlYzIgZnAgPSBmcmFjdCh0YyAqIFNvdXJjZVNpemUueHkpOwoJCgkvLyBEZXRlcm1pbmUgYW1vdW50IG9mICJzbW9vdGhpbmciIG9yIG1peGluZyB0aGF0IGNvdWxkIGJlIGRvbmUgb24gdGV4ZWwgY29ybmVycwoJdmVjNCBtYTQ1ID0gc21vb3Roc3RlcChDNDUgLSBNNDUsIEM0NSArIE00NSwgQWkgKiBmcC55ICsgQjQ1ICogZnAueCk7Cgl2ZWM0IG1hMzAgPSBzbW9vdGhzdGVwKEMzMCAtIE0zMCwgQzMwICsgTTMwLCBBaSAqIGZwLnkgKyBCMzAgKiBmcC54KTsKCXZlYzQgbWE2MCA9IHNtb290aHN0ZXAoQzYwIC0gTTYwLCBDNjAgKyBNNjAsIEFpICogZnAueSArIEI2MCAqIGZwLngpOwoJdmVjNCBtYXJuID0gc21vb3Roc3RlcChDNDUgLSBNNDUgKyBNc2hpZnQsIEM0NSArIE00NSArIE1zaGlmdCwgQWkgKiBmcC55ICsgQjQ1ICogZnAueCk7CgkKCS8vIFBlcmZvcm0gZWRnZSB3ZWlnaHQgY2FsY3VsYXRpb25zCgl2ZWM0IGU0NSAgID0gbHVtX3dkKHAxMiwgcDgsIHAxNiwgcDE4LCBwMjIsIHAxNCwgcDE3LCBwMTMpOwoJdmVjNCBlY29udCA9IGx1bV93ZChwMTcsIHAxMSwgcDIzLCBwMTMsIHA3LCBwMTksIHAxMiwgcDE4KTsKCXZlYzQgZTMwICAgPSBsdW1fZGYocDEzLCBwMTYpOwoJdmVjNCBlNjAgICA9IGx1bV9kZihwOCwgcDE3KTsKCQoJLy8gQ2FsY3VsYXRlIHJ1bGUgcmVzdWx0cyBmb3IgaW50ZXJwb2xhdGlvbgoJYnZlYzQgcjQ1XzEgICA9IF9hbmRfKG5vdEVxdWFsKHAxMiwgcDEzKSwgbm90RXF1YWwocDEyLCBwMTcpKTsKCWJ2ZWM0IHI0NV8yICAgPSBfYW5kXyhub3QobHVtX2VxKHAxMywgcDcpKSwgbm90KGx1bV9lcShwMTMsIHA4KSkpOwoJYnZlYzQgcjQ1XzMgICA9IF9hbmRfKG5vdChsdW1fZXEocDE3LCBwMTEpKSwgbm90KGx1bV9lcShwMTcsIHAxNikpKTsKCWJ2ZWM0IHI0NV80XzEgPSBfYW5kXyhub3QobHVtX2VxKHAxMywgcDE0KSksIG5vdChsdW1fZXEocDEzLCBwMTkpKSk7CglidmVjNCByNDVfNF8yID0gX2FuZF8obm90KGx1bV9lcShwMTcsIHAyMikpLCBub3QobHVtX2VxKHAxNywgcDIzKSkpOwoJYnZlYzQgcjQ1XzQgICA9IF9hbmRfKGx1bV9lcShwMTIsIHAxOCksIF9vcl8ocjQ1XzRfMSwgcjQ1XzRfMikpOwoJYnZlYzQgcjQ1XzUgICA9IF9vcl8obHVtX2VxKHAxMiwgcDE2KSwgbHVtX2VxKHAxMiwgcDgpKTsKCWJ2ZWM0IHI0NSAgICAgPSBfYW5kXyhyNDVfMSwgX29yXyhfb3JfKF9vcl8ocjQ1XzIsIHI0NV8zKSwgcjQ1XzQpLCByNDVfNSkpOwoJYnZlYzQgcjMwID0gX2FuZF8obm90RXF1YWwocDEyLCBwMTYpLCBub3RFcXVhbChwMTEsIHAxNikpOwoJYnZlYzQgcjYwID0gX2FuZF8obm90RXF1YWwocDEyLCBwOCksIG5vdEVxdWFsKHA3LCBwOCkpOwoJCgkvLyBDb21iaW5lIHJ1bGVzIHdpdGggZWRnZSB3ZWlnaHRzCglidmVjNCBlZHI0NSA9IF9hbmRfKGxlc3NUaGFuKGU0NSwgZWNvbnQpLCByNDUpOwoJYnZlYzQgZWRycm4gPSBsZXNzVGhhbkVxdWFsKGU0NSwgZWNvbnQpOwoJYnZlYzQgZWRyMzAgPSBfYW5kXyhsZXNzVGhhbkVxdWFsKGNvZWYgKiBlMzAsIGU2MCksIHIzMCk7CglidmVjNCBlZHI2MCA9IF9hbmRfKGxlc3NUaGFuRXF1YWwoY29lZiAqIGU2MCwgZTMwKSwgcjYwKTsKCQoJLy8gRmluYWxpemUgaW50ZXJwb2xhdGlvbiBydWxlcyBhbmQgY2FzdCB0byBmbG9hdCAoMC4wIGZvciBmYWxzZSwgMS4wIGZvciB0cnVlKQoJdmVjNCBmaW5hbDQ1ID0gdmVjNChfYW5kXyhfYW5kXyhub3QoZWRyMzApLCBub3QoZWRyNjApKSwgZWRyNDUpKTsKCXZlYzQgZmluYWwzMCA9IHZlYzQoX2FuZF8oX2FuZF8oZWRyNDUsIG5vdChlZHI2MCkpLCBlZHIzMCkpOwoJdmVjNCBmaW5hbDYwID0gdmVjNChfYW5kXyhfYW5kXyhlZHI0NSwgbm90KGVkcjMwKSksIGVkcjYwKSk7Cgl2ZWM0IGZpbmFsMzYgPSB2ZWM0KF9hbmRfKF9hbmRfKGVkcjYwLCBlZHIzMCksIGVkcjQ1KSk7Cgl2ZWM0IGZpbmFscm4gPSB2ZWM0KF9hbmRfKG5vdChlZHI0NSksIGVkcnJuKSk7CgkKCS8vIERldGVybWluZSB0aGUgY29sb3IgdG8gbWl4IHdpdGggZm9yIGVhY2ggY29ybmVyCgl2ZWM0IHB4ID0gc3RlcChsdW1fZGYocDEyLCBwMTcpLCBsdW1fZGYocDEyLCBwMTMpKTsKCQoJLy8gRGV0ZXJtaW5lIHRoZSBtaXggYW1vdW50cyBieSBjb21iaW5pbmcgdGhlIGZpbmFsIHJ1bGUgcmVzdWx0IGFuZCBjb3JyZXNwb25kaW5nCgkvLyBtaXggYW1vdW50IGZvciB0aGUgcnVsZSBpbiBlYWNoIGNvcm5lcgoJdmVjNCBtYWMgPSBmaW5hbDM2ICogbWF4KG1hMzAsIG1hNjApICsgZmluYWwzMCAqIG1hMzAgKyBmaW5hbDYwICogbWE2MCArIGZpbmFsNDUgKiBtYTQ1ICsgZmluYWxybiAqIG1hcm47CgkKLyoKQ2FsY3VsYXRlIHRoZSByZXN1bHRpbmcgY29sb3IgYnkgdHJhdmVyc2luZyBjbG9ja3dpc2UgYW5kIGNvdW50ZXItY2xvY2t3aXNlIGFyb3VuZAp0aGUgY29ybmVycyBvZiB0aGUgdGV4ZWwKCkZpbmFsbHkgY2hvb3NlIHRoZSByZXN1bHQgdGhhdCBoYXMgdGhlIGxhcmdlc3QgZGlmZmVyZW5jZSBmcm9tIHRoZSB0ZXhlbCdzIG9yaWdpbmFsCmNvbG9yCiovCgl2ZWMzIHJlczEgPSBQMTI7CglyZXMxID0gbWl4KHJlczEsIG1peChQMTMsIFAxNywgcHgueCksIG1hYy54KTsKCXJlczEgPSBtaXgocmVzMSwgbWl4KFA3LCBQMTMsIHB4LnkpLCBtYWMueSk7CglyZXMxID0gbWl4KHJlczEsIG1peChQMTEsIFA3LCBweC56KSwgbWFjLnopOwoJcmVzMSA9IG1peChyZXMxLCBtaXgoUDE3LCBQMTEsIHB4LncpLCBtYWMudyk7CgkKCXZlYzMgcmVzMiA9IFAxMjsKCXJlczIgPSBtaXgocmVzMiwgbWl4KFAxNywgUDExLCBweC53KSwgbWFjLncpOwoJcmVzMiA9IG1peChyZXMyLCBtaXgoUDExLCBQNywgcHgueiksIG1hYy56KTsKCXJlczIgPSBtaXgocmVzMiwgbWl4KFA3LCBQMTMsIHB4LnkpLCBtYWMueSk7CglyZXMyID0gbWl4KHJlczIsIG1peChQMTMsIFAxNywgcHgueCksIG1hYy54KTsKCQoJRnJhZ0NvbG9yID0gdmVjNChtaXgocmVzMSwgcmVzMiwgc3RlcChjX2RmKFAxMiwgcmVzMSksIGNfZGYoUDEyLCByZXMyKSkpLCAxLjApOwp9IAojZW5kaWYK"
        }]
    },
    "crt-aperture.glslp": {
        shader: {
            type: "text",
            value: "shaders = 1\n\nshader0 = crt-aperture.glsl\nfilter_linear0 = false\n"
        },
        resources: [{
            name: "crt-aperture.glsl",
            type: "base64",
            value: "LyoKICAgIENSVCBTaGFkZXIgYnkgRWFzeU1vZGUKICAgIExpY2Vuc2U6IEdQTAoqLwoKI3ByYWdtYSBwYXJhbWV0ZXIgU0hBUlBORVNTX0lNQUdFICJTaGFycG5lc3MgSW1hZ2UiIDEuMCAxLjAgNS4wIDEuMAojcHJhZ21hIHBhcmFtZXRlciBTSEFSUE5FU1NfRURHRVMgIlNoYXJwbmVzcyBFZGdlcyIgMy4wIDEuMCA1LjAgMS4wCiNwcmFnbWEgcGFyYW1ldGVyIEdMT1dfV0lEVEggIkdsb3cgV2lkdGgiIDAuNSAwLjA1IDAuNjUgMC4wNQojcHJhZ21hIHBhcmFtZXRlciBHTE9XX0hFSUdIVCAiR2xvdyBIZWlnaHQiIDAuNSAwLjA1IDAuNjUgMC4wNQojcHJhZ21hIHBhcmFtZXRlciBHTE9XX0hBTEFUSU9OICJHbG93IEhhbGF0aW9uIiAwLjEgMC4wIDEuMCAwLjAxCiNwcmFnbWEgcGFyYW1ldGVyIEdMT1dfRElGRlVTSU9OICJHbG93IERpZmZ1c2lvbiIgMC4wNSAwLjAgMS4wIDAuMDEKI3ByYWdtYSBwYXJhbWV0ZXIgTUFTS19DT0xPUlMgIk1hc2sgQ29sb3JzIiAyLjAgMi4wIDMuMCAxLjAKI3ByYWdtYSBwYXJhbWV0ZXIgTUFTS19TVFJFTkdUSCAiTWFzayBTdHJlbmd0aCIgMC4zIDAuMCAxLjAgMC4wNQojcHJhZ21hIHBhcmFtZXRlciBNQVNLX1NJWkUgIk1hc2sgU2l6ZSIgMS4wIDEuMCA5LjAgMS4wCiNwcmFnbWEgcGFyYW1ldGVyIFNDQU5MSU5FX1NJWkVfTUlOICJTY2FubGluZSBTaXplIE1pbi4iIDAuNSAwLjUgMS41IDAuMDUKI3ByYWdtYSBwYXJhbWV0ZXIgU0NBTkxJTkVfU0laRV9NQVggIlNjYW5saW5lIFNpemUgTWF4LiIgMS41IDAuNSAxLjUgMC4wNQojcHJhZ21hIHBhcmFtZXRlciBTQ0FOTElORV9TSEFQRSAiU2NhbmxpbmUgU2hhcGUiIDIuNSAxLjAgMTAwLjAgMC4xCiNwcmFnbWEgcGFyYW1ldGVyIFNDQU5MSU5FX09GRlNFVCAiU2NhbmxpbmUgT2Zmc2V0IiAxLjAgMC4wIDEuMCAxLjAKI3ByYWdtYSBwYXJhbWV0ZXIgR0FNTUFfSU5QVVQgIkdhbW1hIElucHV0IiAyLjQgMS4wIDUuMCAwLjEKI3ByYWdtYSBwYXJhbWV0ZXIgR0FNTUFfT1VUUFVUICJHYW1tYSBPdXRwdXQiIDIuNCAxLjAgNS4wIDAuMQojcHJhZ21hIHBhcmFtZXRlciBCUklHSFRORVNTICJCcmlnaHRuZXNzIiAxLjUgMC4wIDIuMCAwLjA1CgojZGVmaW5lIENvb3JkIFRFWDAKCiNpZiBkZWZpbmVkKFZFUlRFWCkKCiNpZiBfX1ZFUlNJT05fXyA+PSAxMzAKI2RlZmluZSBPVVQgb3V0CiNkZWZpbmUgSU4gIGluCiNkZWZpbmUgdGV4MkQgdGV4dHVyZQojZWxzZQojZGVmaW5lIE9VVCB2YXJ5aW5nIAojZGVmaW5lIElOIGF0dHJpYnV0ZSAKI2RlZmluZSB0ZXgyRCB0ZXh0dXJlMkQKI2VuZGlmCgojaWZkZWYgR0xfRVMKI2RlZmluZSBQUkVDSVNJT04gbWVkaXVtcAojZWxzZQojZGVmaW5lIFBSRUNJU0lPTgojZW5kaWYKCklOICB2ZWM0IFZlcnRleENvb3JkOwpJTiAgdmVjNCBDb2xvcjsKSU4gIHZlYzIgVGV4Q29vcmQ7Ck9VVCB2ZWM0IGNvbG9yOwpPVVQgdmVjMiBDb29yZDsKCnVuaWZvcm0gbWF0NCBNVlBNYXRyaXg7CnVuaWZvcm0gUFJFQ0lTSU9OIGludCBGcmFtZURpcmVjdGlvbjsKdW5pZm9ybSBQUkVDSVNJT04gaW50IEZyYW1lQ291bnQ7CnVuaWZvcm0gUFJFQ0lTSU9OIHZlYzIgT3V0cHV0U2l6ZTsKdW5pZm9ybSBQUkVDSVNJT04gdmVjMiBUZXh0dXJlU2l6ZTsKdW5pZm9ybSBQUkVDSVNJT04gdmVjMiBJbnB1dFNpemU7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IE1WUE1hdHJpeCAqIFZlcnRleENvb3JkOwogICAgY29sb3IgPSBDb2xvcjsKICAgIENvb3JkID0gVGV4Q29vcmQgKiAxLjAwMDE7Cn0KCiNlbGlmIGRlZmluZWQoRlJBR01FTlQpCgojaWYgX19WRVJTSU9OX18gPj0gMTMwCiNkZWZpbmUgSU4gaW4KI2RlZmluZSB0ZXgyRCB0ZXh0dXJlCm91dCB2ZWM0IEZyYWdDb2xvcjsKI2Vsc2UKI2RlZmluZSBJTiB2YXJ5aW5nCiNkZWZpbmUgRnJhZ0NvbG9yIGdsX0ZyYWdDb2xvcgojZGVmaW5lIHRleDJEIHRleHR1cmUyRAojZW5kaWYKCiNpZmRlZiBHTF9FUwojaWZkZWYgR0xfRlJBR01FTlRfUFJFQ0lTSU9OX0hJR0gKcHJlY2lzaW9uIGhpZ2hwIGZsb2F0OwojZWxzZQpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKI2VuZGlmCiNkZWZpbmUgUFJFQ0lTSU9OIG1lZGl1bXAKI2Vsc2UKI2RlZmluZSBQUkVDSVNJT04KI2VuZGlmCgp1bmlmb3JtIFBSRUNJU0lPTiBpbnQgRnJhbWVEaXJlY3Rpb247CnVuaWZvcm0gUFJFQ0lTSU9OIGludCBGcmFtZUNvdW50Owp1bmlmb3JtIFBSRUNJU0lPTiB2ZWMyIE91dHB1dFNpemU7CnVuaWZvcm0gUFJFQ0lTSU9OIHZlYzIgVGV4dHVyZVNpemU7CnVuaWZvcm0gUFJFQ0lTSU9OIHZlYzIgSW5wdXRTaXplOwp1bmlmb3JtIHNhbXBsZXIyRCBUZXh0dXJlOwpJTiB2ZWMyIENvb3JkOwoKI2lmZGVmIFBBUkFNRVRFUl9VTklGT1JNCnVuaWZvcm0gUFJFQ0lTSU9OIGZsb2F0IFNIQVJQTkVTU19JTUFHRTsKdW5pZm9ybSBQUkVDSVNJT04gZmxvYXQgU0hBUlBORVNTX0VER0VTOwp1bmlmb3JtIFBSRUNJU0lPTiBmbG9hdCBHTE9XX1dJRFRIOwp1bmlmb3JtIFBSRUNJU0lPTiBmbG9hdCBHTE9XX0hFSUdIVDsKdW5pZm9ybSBQUkVDSVNJT04gZmxvYXQgR0xPV19IQUxBVElPTjsKdW5pZm9ybSBQUkVDSVNJT04gZmxvYXQgR0xPV19ESUZGVVNJT047CnVuaWZvcm0gUFJFQ0lTSU9OIGZsb2F0IE1BU0tfQ09MT1JTOwp1bmlmb3JtIFBSRUNJU0lPTiBmbG9hdCBNQVNLX1NUUkVOR1RIOwp1bmlmb3JtIFBSRUNJU0lPTiBmbG9hdCBNQVNLX1NJWkU7CnVuaWZvcm0gUFJFQ0lTSU9OIGZsb2F0IFNDQU5MSU5FX1NJWkVfTUlOOwp1bmlmb3JtIFBSRUNJU0lPTiBmbG9hdCBTQ0FOTElORV9TSVpFX01BWDsKdW5pZm9ybSBQUkVDSVNJT04gZmxvYXQgU0NBTkxJTkVfU0hBUEU7CnVuaWZvcm0gUFJFQ0lTSU9OIGZsb2F0IFNDQU5MSU5FX09GRlNFVDsKdW5pZm9ybSBQUkVDSVNJT04gZmxvYXQgR0FNTUFfSU5QVVQ7CnVuaWZvcm0gUFJFQ0lTSU9OIGZsb2F0IEdBTU1BX09VVFBVVDsKdW5pZm9ybSBQUkVDSVNJT04gZmxvYXQgQlJJR0hUTkVTUzsKI2Vsc2UKI2RlZmluZSBTSEFSUE5FU1NfSU1BR0UgMS4wCiNkZWZpbmUgU0hBUlBORVNTX0VER0VTIDMuMAojZGVmaW5lIEdMT1dfV0lEVEggMC41CiNkZWZpbmUgR0xPV19IRUlHSFQgMC41CiNkZWZpbmUgR0xPV19IQUxBVElPTiAwLjEKI2RlZmluZSBHTE9XX0RJRkZVU0lPTiAwLjA1CiNkZWZpbmUgTUFTS19DT0xPUlMgMi4wCiNkZWZpbmUgTUFTS19TVFJFTkdUSCAwLjMKI2RlZmluZSBNQVNLX1NJWkUgMS4wCiNkZWZpbmUgU0NBTkxJTkVfU0laRV9NSU4gMC41CiNkZWZpbmUgU0NBTkxJTkVfU0laRV9NQVggMS41CiNkZWZpbmUgU0NBTkxJTkVfU0hBUEUgMS41CiNkZWZpbmUgU0NBTkxJTkVfT0ZGU0VUIDEuMAojZGVmaW5lIEdBTU1BX0lOUFVUIDIuNAojZGVmaW5lIEdBTU1BX09VVFBVVCAyLjQKI2RlZmluZSBCUklHSFRORVNTIDEuNQojZW5kaWYKCiNkZWZpbmUgRklYKGMpIG1heChhYnMoYyksIDFlLTUpCiNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1ODkKI2RlZmluZSBzYXR1cmF0ZShjKSBjbGFtcChjLCAwLjAsIDEuMCkKI2RlZmluZSBURVgyRChjKSBwb3codGV4MkQodGV4LCBjKS5yZ2IsIHZlYzMoR0FNTUFfSU5QVVQpKQoKbWF0MyBnZXRfY29sb3JfbWF0cml4KHNhbXBsZXIyRCB0ZXgsIHZlYzIgY28sIHZlYzIgZHgpCnsKICAgIHJldHVybiBtYXQzKFRFWDJEKGNvIC0gZHgpLCBURVgyRChjbyksIFRFWDJEKGNvICsgZHgpKTsKfQoKdmVjMyBibHVyKG1hdDMgbSwgZmxvYXQgZGlzdCwgZmxvYXQgcmFkKQp7CiAgICB2ZWMzIHggPSB2ZWMzKGRpc3QgLSAxLjAsIGRpc3QsIGRpc3QgKyAxLjApIC8gcmFkOwogICAgdmVjMyB3ID0gZXhwMih4ICogeCAqIC0xLjApOwoKICAgIHJldHVybiAobVswXSAqIHcueCArIG1bMV0gKiB3LnkgKyBtWzJdICogdy56KSAvICh3LnggKyB3LnkgKyB3LnopOwp9Cgp2ZWMzIGZpbHRlcl9nYXVzc2lhbihzYW1wbGVyMkQgdGV4LCB2ZWMyIGNvLCB2ZWMyIHRleF9zaXplKQp7CiAgICB2ZWMyIGR4ID0gdmVjMigxLjAgLyB0ZXhfc2l6ZS54LCAwLjApOwogICAgdmVjMiBkeSA9IHZlYzIoMC4wLCAxLjAgLyB0ZXhfc2l6ZS55KTsKICAgIHZlYzIgcGl4X2NvID0gY28gKiB0ZXhfc2l6ZTsKICAgIHZlYzIgdGV4X2NvID0gKGZsb29yKHBpeF9jbykgKyAwLjUpIC8gdGV4X3NpemU7CiAgICB2ZWMyIGRpc3QgPSAoZnJhY3QocGl4X2NvKSAtIDAuNSkgKiAtMS4wOwoKICAgIG1hdDMgbGluZTAgPSBnZXRfY29sb3JfbWF0cml4KHRleCwgdGV4X2NvIC0gZHksIGR4KTsKICAgIG1hdDMgbGluZTEgPSBnZXRfY29sb3JfbWF0cml4KHRleCwgdGV4X2NvLCBkeCk7CiAgICBtYXQzIGxpbmUyID0gZ2V0X2NvbG9yX21hdHJpeCh0ZXgsIHRleF9jbyArIGR5LCBkeCk7CiAgICBtYXQzIGNvbHVtbiA9IG1hdDMoYmx1cihsaW5lMCwgZGlzdC54LCBHTE9XX1dJRFRIKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJsdXIobGluZTEsIGRpc3QueCwgR0xPV19XSURUSCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBibHVyKGxpbmUyLCBkaXN0LngsIEdMT1dfV0lEVEgpKTsKCiAgICByZXR1cm4gYmx1cihjb2x1bW4sIGRpc3QueSwgR0xPV19IRUlHSFQpOwp9Cgp2ZWMzIGZpbHRlcl9sYW5jem9zKHNhbXBsZXIyRCB0ZXgsIHZlYzIgY28sIHZlYzIgdGV4X3NpemUsIGZsb2F0IHNoYXJwKQp7CiAgICB0ZXhfc2l6ZS54ICo9IHNoYXJwOwoKICAgIHZlYzIgZHggPSB2ZWMyKDEuMCAvIHRleF9zaXplLngsIDAuMCk7CiAgICB2ZWMyIHBpeF9jbyA9IGNvICogdGV4X3NpemUgLSB2ZWMyKDAuNSwgMC4wKTsKICAgIHZlYzIgdGV4X2NvID0gKGZsb29yKHBpeF9jbykgKyB2ZWMyKDAuNSwgMC4wKSkgLyB0ZXhfc2l6ZTsKICAgIHZlYzIgZGlzdCA9IGZyYWN0KHBpeF9jbyk7CiAgICB2ZWM0IGNvZWYgPSBQSSAqIHZlYzQoZGlzdC54ICsgMS4wLCBkaXN0LngsIGRpc3QueCAtIDEuMCwgZGlzdC54IC0gMi4wKTsKCiAgICBjb2VmID0gRklYKGNvZWYpOwogICAgY29lZiA9IDIuMCAqIHNpbihjb2VmKSAqIHNpbihjb2VmIC8gMi4wKSAvIChjb2VmICogY29lZik7CiAgICBjb2VmIC89IGRvdChjb2VmLCB2ZWM0KDEuMCkpOwoKICAgIHZlYzQgY29sMSA9IHZlYzQoVEVYMkQodGV4X2NvKSwgMS4wKTsKICAgIHZlYzQgY29sMiA9IHZlYzQoVEVYMkQodGV4X2NvICsgZHgpLCAxLjApOwoKICAgIHJldHVybiAobWF0NChjb2wxLCBjb2wxLCBjb2wyLCBjb2wyKSAqIGNvZWYpLnJnYjsKfQoKdmVjMyBnZXRfc2NhbmxpbmVfd2VpZ2h0KGZsb2F0IHgsIHZlYzMgY29sKQp7CiAgICB2ZWMzIGJlYW0gPSBtaXgodmVjMyhTQ0FOTElORV9TSVpFX01JTiksIHZlYzMoU0NBTkxJTkVfU0laRV9NQVgpLCBwb3coY29sLCB2ZWMzKDEuMCAvIFNDQU5MSU5FX1NIQVBFKSkpOwogICAgdmVjMyB4X211bCA9IDIuMCAvIGJlYW07CiAgICB2ZWMzIHhfb2Zmc2V0ID0geF9tdWwgKiAwLjU7CgogICAgcmV0dXJuIHNtb290aHN0ZXAoMC4wLCAxLjAsIDEuMCAtIGFicyh4ICogeF9tdWwgLSB4X29mZnNldCkpICogeF9vZmZzZXQ7Cn0KCnZlYzMgZ2V0X21hc2tfd2VpZ2h0KGZsb2F0IHgpCnsKICAgIGZsb2F0IGkgPSBtb2QoZmxvb3IoeCAqIE91dHB1dFNpemUueCAqIFRleHR1cmVTaXplLnggLyAoSW5wdXRTaXplLnggKiBNQVNLX1NJWkUpKSwgTUFTS19DT0xPUlMpOwoKICAgIGlmIChpID09IDAuMCkgcmV0dXJuIG1peCh2ZWMzKDEuMCwgMC4wLCAxLjApLCB2ZWMzKDEuMCwgMC4wLCAwLjApLCBNQVNLX0NPTE9SUyAtIDIuMCk7CiAgICBlbHNlIGlmIChpID09IDEuMCkgcmV0dXJuIHZlYzMoMC4wLCAxLjAsIDAuMCk7CiAgICBlbHNlIHJldHVybiB2ZWMzKDAuMCwgMC4wLCAxLjApOwp9Cgp2b2lkIG1haW4oKQp7CiAgICBmbG9hdCBzY2FsZSA9IGZsb29yKChPdXRwdXRTaXplLnkgLyBJbnB1dFNpemUueSkgKyAwLjAwMSk7CiAgICBmbG9hdCBvZmZzZXQgPSAxLjAgLyBzY2FsZSAqIDAuNTsKICAgIAogICAgaWYgKGJvb2wobW9kKHNjYWxlLCAyLjApKSkgb2Zmc2V0ID0gMC4wOwogICAgCiAgICB2ZWMyIGNvID0gKENvb3JkICogVGV4dHVyZVNpemUgLSB2ZWMyKDAuMCwgb2Zmc2V0ICogU0NBTkxJTkVfT0ZGU0VUKSkgLyBUZXh0dXJlU2l6ZTsKCiAgICB2ZWMzIGNvbF9nbG93ID0gZmlsdGVyX2dhdXNzaWFuKFRleHR1cmUsIGNvLCBUZXh0dXJlU2l6ZSk7CiAgICB2ZWMzIGNvbF9zb2Z0ID0gZmlsdGVyX2xhbmN6b3MoVGV4dHVyZSwgY28sIFRleHR1cmVTaXplLCBTSEFSUE5FU1NfSU1BR0UpOwogICAgdmVjMyBjb2xfc2hhcnAgPSBmaWx0ZXJfbGFuY3pvcyhUZXh0dXJlLCBjbywgVGV4dHVyZVNpemUsIFNIQVJQTkVTU19FREdFUyk7CiAgICB2ZWMzIGNvbCA9IHNxcnQoY29sX3NoYXJwICogY29sX3NvZnQpOwoKICAgIGNvbCAqPSBnZXRfc2NhbmxpbmVfd2VpZ2h0KGZyYWN0KGNvLnkgKiBUZXh0dXJlU2l6ZS55KSwgY29sX3NvZnQpOwogICAgY29sX2dsb3cgPSBzYXR1cmF0ZShjb2xfZ2xvdyAtIGNvbCk7CiAgICBjb2wgKz0gY29sX2dsb3cgKiBjb2xfZ2xvdyAqIEdMT1dfSEFMQVRJT047CiAgICBjb2wgPSBtaXgoY29sLCBjb2wgKiBnZXRfbWFza193ZWlnaHQoY28ueCkgKiBNQVNLX0NPTE9SUywgTUFTS19TVFJFTkdUSCk7CiAgICBjb2wgKz0gY29sX2dsb3cgKiBHTE9XX0RJRkZVU0lPTjsKICAgIGNvbCA9IHBvdyhjb2wgKiBCUklHSFRORVNTLCB2ZWMzKDEuMCAvIEdBTU1BX09VVFBVVCkpOwoKICAgIEZyYWdDb2xvciA9IHZlYzQoY29sLCAxLjApOwp9CgojZW5kaWYK"
        }]
    },
    "crt-easymode.glslp": {
        shader: {
            type: "text",
            value: "shaders = 1\n\nshader0 = crt-easymode.glsl\nfilter_linear0 = false\n"
        },
        resources: [{
            name: "crt-easymode.glsl",
            type: "base64",
            value: "LyoKICAgIENSVCBTaGFkZXIgYnkgRWFzeU1vZGUKICAgIExpY2Vuc2U6IEdQTAoKICAgIEEgZmxhdCBDUlQgc2hhZGVyIGlkZWFsbHkgZm9yIDEwODBwIG9yIGhpZ2hlciBkaXNwbGF5cy4KCiAgICBSZWNvbW1lbmRlZCBTZXR0aW5nczoKCiAgICBWaWRlbwogICAgLSBBc3BlY3QgUmF0aW86ICA0OjMKICAgIC0gSW50ZWdlciBTY2FsZTogT2ZmCgogICAgU2hhZGVyCiAgICAtIEZpbHRlcjogTmVhcmVzdAogICAgLSBTY2FsZTogIERvbid0IENhcmUKCiAgICBFeGFtcGxlIFJHQiBNYXNrIFBhcmFtZXRlciBTZXR0aW5nczoKCiAgICBBcGVydHVyZSBHcmlsbGUgKERlZmF1bHQpCiAgICAtIERvdCBXaWR0aDogIDEKICAgIC0gRG90IEhlaWdodDogMQogICAgLSBTdGFnZ2VyOiAgICAwCgogICAgTG90dGVzJyBTaGFkb3cgTWFzawogICAgLSBEb3QgV2lkdGg6ICAyCiAgICAtIERvdCBIZWlnaHQ6IDEKICAgIC0gU3RhZ2dlcjogICAgMwoqLwoKLy8gUGFyYW1ldGVyIGxpbmVzIGdvIGhlcmU6CiNwcmFnbWEgcGFyYW1ldGVyIFNIQVJQTkVTU19IICJTaGFycG5lc3MgSG9yaXpvbnRhbCIgMC41IDAuMCAxLjAgMC4wNQojcHJhZ21hIHBhcmFtZXRlciBTSEFSUE5FU1NfViAiU2hhcnBuZXNzIFZlcnRpY2FsIiAxLjAgMC4wIDEuMCAwLjA1CiNwcmFnbWEgcGFyYW1ldGVyIE1BU0tfU1RSRU5HVEggIk1hc2sgU3RyZW5ndGgiIDAuMyAwLjAgMS4wIDAuMDEKI3ByYWdtYSBwYXJhbWV0ZXIgTUFTS19ET1RfV0lEVEggIk1hc2sgRG90IFdpZHRoIiAxLjAgMS4wIDEwMC4wIDEuMAojcHJhZ21hIHBhcmFtZXRlciBNQVNLX0RPVF9IRUlHSFQgIk1hc2sgRG90IEhlaWdodCIgMS4wIDEuMCAxMDAuMCAxLjAKI3ByYWdtYSBwYXJhbWV0ZXIgTUFTS19TVEFHR0VSICJNYXNrIFN0YWdnZXIiIDAuMCAwLjAgMTAwLjAgMS4wCiNwcmFnbWEgcGFyYW1ldGVyIE1BU0tfU0laRSAiTWFzayBTaXplIiAxLjAgMS4wIDEwMC4wIDEuMAojcHJhZ21hIHBhcmFtZXRlciBTQ0FOTElORV9TVFJFTkdUSCAiU2NhbmxpbmUgU3RyZW5ndGgiIDEuMCAwLjAgMS4wIDAuMDUKI3ByYWdtYSBwYXJhbWV0ZXIgU0NBTkxJTkVfQkVBTV9XSURUSF9NSU4gIlNjYW5saW5lIEJlYW0gV2lkdGggTWluLiIgMS41IDAuNSA1LjAgMC41CiNwcmFnbWEgcGFyYW1ldGVyIFNDQU5MSU5FX0JFQU1fV0lEVEhfTUFYICJTY2FubGluZSBCZWFtIFdpZHRoIE1heC4iIDEuNSAwLjUgNS4wIDAuNQojcHJhZ21hIHBhcmFtZXRlciBTQ0FOTElORV9CUklHSFRfTUlOICJTY2FubGluZSBCcmlnaHRuZXNzIE1pbi4iIDAuMzUgMC4wIDEuMCAwLjA1CiNwcmFnbWEgcGFyYW1ldGVyIFNDQU5MSU5FX0JSSUdIVF9NQVggIlNjYW5saW5lIEJyaWdodG5lc3MgTWF4LiIgMC42NSAwLjAgMS4wIDAuMDUKI3ByYWdtYSBwYXJhbWV0ZXIgU0NBTkxJTkVfQ1VUT0ZGICJTY2FubGluZSBDdXRvZmYiIDQwMC4wIDEuMCAxMDAwLjAgMS4wCiNwcmFnbWEgcGFyYW1ldGVyIEdBTU1BX0lOUFVUICJHYW1tYSBJbnB1dCIgMi4wIDAuMSA1LjAgMC4xCiNwcmFnbWEgcGFyYW1ldGVyIEdBTU1BX09VVFBVVCAiR2FtbWEgT3V0cHV0IiAxLjggMC4xIDUuMCAwLjEKI3ByYWdtYSBwYXJhbWV0ZXIgQlJJR0hUX0JPT1NUICJCcmlnaHRuZXNzIEJvb3N0IiAxLjIgMS4wIDIuMCAwLjAxCiNwcmFnbWEgcGFyYW1ldGVyIERJTEFUSU9OICJEaWxhdGlvbiIgMS4wIDAuMCAxLjAgMS4wCgojaWYgZGVmaW5lZChWRVJURVgpCgojaWYgX19WRVJTSU9OX18gPj0gMTMwCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgb3V0CiNkZWZpbmUgQ09NUEFUX0FUVFJJQlVURSBpbgojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUKI2Vsc2UKI2RlZmluZSBDT01QQVRfVkFSWUlORyB2YXJ5aW5nIAojZGVmaW5lIENPTVBBVF9BVFRSSUJVVEUgYXR0cmlidXRlIAojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUyRAojZW5kaWYKCiNpZmRlZiBHTF9FUwojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04gbWVkaXVtcAojZWxzZQojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04KI2VuZGlmCgpDT01QQVRfQVRUUklCVVRFIHZlYzQgVmVydGV4Q29vcmQ7CkNPTVBBVF9BVFRSSUJVVEUgdmVjNCBDT0xPUjsKQ09NUEFUX0FUVFJJQlVURSB2ZWM0IFRleENvb3JkOwpDT01QQVRfVkFSWUlORyB2ZWM0IENPTDA7CkNPTVBBVF9WQVJZSU5HIHZlYzQgVEVYMDsKCnZlYzQgX29Qb3NpdGlvbjE7IAp1bmlmb3JtIG1hdDQgTVZQTWF0cml4Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lRGlyZWN0aW9uOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lQ291bnQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIE91dHB1dFNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIFRleHR1cmVTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBJbnB1dFNpemU7Cgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IE1WUE1hdHJpeCAqIFZlcnRleENvb3JkOwogICAgQ09MMCA9IENPTE9SOwogICAgVEVYMC54eSA9IFRleENvb3JkLnh5Owp9CgojZWxpZiBkZWZpbmVkKEZSQUdNRU5UKQoKI2lmIF9fVkVSU0lPTl9fID49IDEzMAojZGVmaW5lIENPTVBBVF9WQVJZSU5HIGluCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZQpvdXQgdmVjNCBGcmFnQ29sb3I7CiNlbHNlCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgdmFyeWluZwojZGVmaW5lIEZyYWdDb2xvciBnbF9GcmFnQ29sb3IKI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlMkQKI2VuZGlmCgojaWZkZWYgR0xfRVMKI2lmZGVmIEdMX0ZSQUdNRU5UX1BSRUNJU0lPTl9ISUdICnByZWNpc2lvbiBoaWdocCBmbG9hdDsKI2Vsc2UKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CnByZWNpc2lvbiBtZWRpdW1wIGludDsKI2VuZGlmCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTgojZW5kaWYKCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVEaXJlY3Rpb247CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVDb3VudDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgT3V0cHV0U2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgVGV4dHVyZVNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIElucHV0U2l6ZTsKdW5pZm9ybSBzYW1wbGVyMkQgVGV4dHVyZTsKQ09NUEFUX1ZBUllJTkcgdmVjNCBURVgwOwoKI2RlZmluZSBGSVgoYykgbWF4KGFicyhjKSwgMWUtNSkKI2RlZmluZSBQSSAzLjE0MTU5MjY1MzU4OQoKI2RlZmluZSBURVgyRChjKSBkaWxhdGUoQ09NUEFUX1RFWFRVUkUoVGV4dHVyZSwgYykpCgovLyBjb21wYXRpYmlsaXR5ICNkZWZpbmVzCiNkZWZpbmUgU291cmNlIFRleHR1cmUKI2RlZmluZSB2VGV4Q29vcmQgVEVYMC54eQoKI2RlZmluZSBTb3VyY2VTaXplIHZlYzQoVGV4dHVyZVNpemUsIDEuMCAvIFRleHR1cmVTaXplKSAvL2VpdGhlciBUZXh0dXJlU2l6ZSBvciBJbnB1dFNpemUKI2RlZmluZSBvdXRzaXplIHZlYzQoT3V0cHV0U2l6ZSwgMS4wIC8gT3V0cHV0U2l6ZSkKCiNpZmRlZiBQQVJBTUVURVJfVU5JRk9STQovLyBBbGwgcGFyYW1ldGVyIGZsb2F0cyBuZWVkIHRvIGhhdmUgQ09NUEFUX1BSRUNJU0lPTiBpbiBmcm9udCBvZiB0aGVtCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBTSEFSUE5FU1NfSDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IFNIQVJQTkVTU19WOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgTUFTS19TVFJFTkdUSDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IE1BU0tfRE9UX1dJRFRIOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgTUFTS19ET1RfSEVJR0hUOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgTUFTS19TVEFHR0VSOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgTUFTS19TSVpFOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgU0NBTkxJTkVfU1RSRU5HVEg7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBTQ0FOTElORV9CRUFNX1dJRFRIX01JTjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IFNDQU5MSU5FX0JFQU1fV0lEVEhfTUFYOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgU0NBTkxJTkVfQlJJR0hUX01JTjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IFNDQU5MSU5FX0JSSUdIVF9NQVg7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBTQ0FOTElORV9DVVRPRkY7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBHQU1NQV9JTlBVVDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IEdBTU1BX09VVFBVVDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IEJSSUdIVF9CT09TVDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IERJTEFUSU9OOwojZWxzZQojZGVmaW5lIFNIQVJQTkVTU19IIDAuNQojZGVmaW5lIFNIQVJQTkVTU19WIDEuMAojZGVmaW5lIE1BU0tfU1RSRU5HVEggMC4zCiNkZWZpbmUgTUFTS19ET1RfV0lEVEggMS4wCiNkZWZpbmUgTUFTS19ET1RfSEVJR0hUIDEuMAojZGVmaW5lIE1BU0tfU1RBR0dFUiAwLjAKI2RlZmluZSBNQVNLX1NJWkUgMS4wCiNkZWZpbmUgU0NBTkxJTkVfU1RSRU5HVEggMS4wCiNkZWZpbmUgU0NBTkxJTkVfQkVBTV9XSURUSF9NSU4gMS41CiNkZWZpbmUgU0NBTkxJTkVfQkVBTV9XSURUSF9NQVggMS41CiNkZWZpbmUgU0NBTkxJTkVfQlJJR0hUX01JTiAwLjM1CiNkZWZpbmUgU0NBTkxJTkVfQlJJR0hUX01BWCAwLjY1CiNkZWZpbmUgU0NBTkxJTkVfQ1VUT0ZGIDQwMC4wCiNkZWZpbmUgR0FNTUFfSU5QVVQgMi4wCiNkZWZpbmUgR0FNTUFfT1VUUFVUIDEuOAojZGVmaW5lIEJSSUdIVF9CT09TVCAxLjIKI2RlZmluZSBESUxBVElPTiAxLjAKI2VuZGlmCgovLyBTZXQgdG8gMCB0byB1c2UgbGluZWFyIGZpbHRlciBhbmQgZ2FpbiBzcGVlZAojZGVmaW5lIEVOQUJMRV9MQU5DWk9TIDEKCnZlYzQgZGlsYXRlKHZlYzQgY29sKQp7CiAgICB2ZWM0IHggPSBtaXgodmVjNCgxLjApLCBjb2wsIERJTEFUSU9OKTsKCiAgICByZXR1cm4gY29sICogeDsKfQoKZmxvYXQgY3VydmVfZGlzdGFuY2UoZmxvYXQgeCwgZmxvYXQgc2hhcnApCnsKCi8qCiAgICBhcHBseSBoYWxmLWNpcmNsZSBzLWN1cnZlIHRvIGRpc3RhbmNlIGZvciBzaGFycGVyIChtb3JlIHBpeGVsYXRlZCkgaW50ZXJwb2xhdGlvbgogICAgc2luZ2xlIGxpbmUgZm9ybXVsYSBmb3IgR3JhcGggVG95OgogICAgMC41IC0gc3FydCgwLjI1IC0gKHggLSBzdGVwKDAuNSwgeCkpICogKHggLSBzdGVwKDAuNSwgeCkpKSAqIHNpZ24oMC41IC0geCkKKi8KCiAgICBmbG9hdCB4X3N0ZXAgPSBzdGVwKDAuNSwgeCk7CiAgICBmbG9hdCBjdXJ2ZSA9IDAuNSAtIHNxcnQoMC4yNSAtICh4IC0geF9zdGVwKSAqICh4IC0geF9zdGVwKSkgKiBzaWduKDAuNSAtIHgpOwoKICAgIHJldHVybiBtaXgoeCwgY3VydmUsIHNoYXJwKTsKfQoKbWF0NCBnZXRfY29sb3JfbWF0cml4KHZlYzIgY28sIHZlYzIgZHgpCnsKICAgIHJldHVybiBtYXQ0KFRFWDJEKGNvIC0gZHgpLCBURVgyRChjbyksIFRFWDJEKGNvICsgZHgpLCBURVgyRChjbyArIDIuMCAqIGR4KSk7Cn0KCnZlYzMgZmlsdGVyX2xhbmN6b3ModmVjNCBjb2VmZnMsIG1hdDQgY29sb3JfbWF0cml4KQp7CiAgICB2ZWM0IGNvbCAgICAgICAgPSBjb2xvcl9tYXRyaXggKiBjb2VmZnM7CiAgICB2ZWM0IHNhbXBsZV9taW4gPSBtaW4oY29sb3JfbWF0cml4WzFdLCBjb2xvcl9tYXRyaXhbMl0pOwogICAgdmVjNCBzYW1wbGVfbWF4ID0gbWF4KGNvbG9yX21hdHJpeFsxXSwgY29sb3JfbWF0cml4WzJdKTsKCiAgICBjb2wgPSBjbGFtcChjb2wsIHNhbXBsZV9taW4sIHNhbXBsZV9tYXgpOwoKICAgIHJldHVybiBjb2wucmdiOwp9Cgp2b2lkIG1haW4oKQp7CiAgICB2ZWMyIGR4ICAgICA9IHZlYzIoU291cmNlU2l6ZS56LCAwLjApOwogICAgdmVjMiBkeSAgICAgPSB2ZWMyKDAuMCwgU291cmNlU2l6ZS53KTsKICAgIHZlYzIgcGl4X2NvID0gdlRleENvb3JkICogU291cmNlU2l6ZS54eSAtIHZlYzIoMC41LCAwLjUpOwogICAgdmVjMiB0ZXhfY28gPSAoZmxvb3IocGl4X2NvKSArIHZlYzIoMC41LCAwLjUpKSAqIFNvdXJjZVNpemUuenc7CiAgICB2ZWMyIGRpc3QgICA9IGZyYWN0KHBpeF9jbyk7CiAgICBmbG9hdCBjdXJ2ZV94OwogICAgdmVjMyBjb2wsIGNvbDI7CgojaWYgRU5BQkxFX0xBTkNaT1MKICAgIGN1cnZlX3ggPSBjdXJ2ZV9kaXN0YW5jZShkaXN0LngsIFNIQVJQTkVTU19IICogU0hBUlBORVNTX0gpOwoKICAgIHZlYzQgY29lZmZzID0gUEkgKiB2ZWM0KDEuMCArIGN1cnZlX3gsIGN1cnZlX3gsIDEuMCAtIGN1cnZlX3gsIDIuMCAtIGN1cnZlX3gpOwoKICAgIGNvZWZmcyA9IEZJWChjb2VmZnMpOwogICAgY29lZmZzID0gMi4wICogc2luKGNvZWZmcykgKiBzaW4oY29lZmZzICogMC41KSAvIChjb2VmZnMgKiBjb2VmZnMpOwogICAgY29lZmZzIC89IGRvdChjb2VmZnMsIHZlYzQoMS4wKSk7CgogICAgY29sICA9IGZpbHRlcl9sYW5jem9zKGNvZWZmcywgZ2V0X2NvbG9yX21hdHJpeCh0ZXhfY28sIGR4KSk7CiAgICBjb2wyID0gZmlsdGVyX2xhbmN6b3MoY29lZmZzLCBnZXRfY29sb3JfbWF0cml4KHRleF9jbyArIGR5LCBkeCkpOwojZWxzZQogICAgY3VydmVfeCA9IGN1cnZlX2Rpc3RhbmNlKGRpc3QueCwgU0hBUlBORVNTX0gpOwoKICAgIGNvbCAgPSBtaXgoVEVYMkQodGV4X2NvKS5yZ2IsICAgICAgVEVYMkQodGV4X2NvICsgZHgpLnJnYiwgICAgICBjdXJ2ZV94KTsKICAgIGNvbDIgPSBtaXgoVEVYMkQodGV4X2NvICsgZHkpLnJnYiwgVEVYMkQodGV4X2NvICsgZHggKyBkeSkucmdiLCBjdXJ2ZV94KTsKI2VuZGlmCgogICAgY29sID0gbWl4KGNvbCwgY29sMiwgY3VydmVfZGlzdGFuY2UoZGlzdC55LCBTSEFSUE5FU1NfVikpOwogICAgY29sID0gcG93KGNvbCwgdmVjMyhHQU1NQV9JTlBVVCAvIChESUxBVElPTiArIDEuMCkpKTsKCiAgICBmbG9hdCBsdW1hICAgICAgICA9IGRvdCh2ZWMzKDAuMjEyNiwgMC43MTUyLCAwLjA3MjIpLCBjb2wpOwogICAgZmxvYXQgYnJpZ2h0ICAgICAgPSAobWF4KGNvbC5yLCBtYXgoY29sLmcsIGNvbC5iKSkgKyBsdW1hKSAqIDAuNTsKICAgIGZsb2F0IHNjYW5fYnJpZ2h0ID0gY2xhbXAoYnJpZ2h0LCBTQ0FOTElORV9CUklHSFRfTUlOLCBTQ0FOTElORV9CUklHSFRfTUFYKTsKICAgIGZsb2F0IHNjYW5fYmVhbSAgID0gY2xhbXAoYnJpZ2h0ICogU0NBTkxJTkVfQkVBTV9XSURUSF9NQVgsIFNDQU5MSU5FX0JFQU1fV0lEVEhfTUlOLCBTQ0FOTElORV9CRUFNX1dJRFRIX01BWCk7CiAgICBmbG9hdCBzY2FuX3dlaWdodCA9IDEuMCAtIHBvdyhjb3ModlRleENvb3JkLnkgKiAyLjAgKiBQSSAqIFNvdXJjZVNpemUueSkgKiAwLjUgKyAwLjUsIHNjYW5fYmVhbSkgKiBTQ0FOTElORV9TVFJFTkdUSDsKCiAgICBmbG9hdCBtYXNrICAgPSAxLjAgLSBNQVNLX1NUUkVOR1RIOyAgICAKICAgIHZlYzIgbW9kX2ZhYyA9IGZsb29yKHZUZXhDb29yZCAqIG91dHNpemUueHkgKiBTb3VyY2VTaXplLnh5IC8gKElucHV0U2l6ZS54eSAqIHZlYzIoTUFTS19TSVpFLCBNQVNLX0RPVF9IRUlHSFQgKiBNQVNLX1NJWkUpKSk7CiAgICBpbnQgZG90X25vICAgPSBpbnQobW9kKChtb2RfZmFjLnggKyBtb2QobW9kX2ZhYy55LCAyLjApICogTUFTS19TVEFHR0VSKSAvIE1BU0tfRE9UX1dJRFRILCAzLjApKTsKICAgIHZlYzMgbWFza193ZWlnaHQ7CgogICAgaWYgICAgICAoZG90X25vID09IDApIG1hc2tfd2VpZ2h0ID0gdmVjMygxLjAsICBtYXNrLCBtYXNrKTsKICAgIGVsc2UgaWYgKGRvdF9ubyA9PSAxKSBtYXNrX3dlaWdodCA9IHZlYzMobWFzaywgMS4wLCAgbWFzayk7CiAgICBlbHNlICAgICAgICAgICAgICAgICAgbWFza193ZWlnaHQgPSB2ZWMzKG1hc2ssIG1hc2ssIDEuMCk7CgogICAgaWYgKElucHV0U2l6ZS55ID49IFNDQU5MSU5FX0NVVE9GRikgCiAgICAgICAgc2Nhbl93ZWlnaHQgPSAxLjA7CgogICAgY29sMiA9IGNvbC5yZ2I7CiAgICBjb2wgKj0gdmVjMyhzY2FuX3dlaWdodCk7CiAgICBjb2wgID0gbWl4KGNvbCwgY29sMiwgc2Nhbl9icmlnaHQpOwogICAgY29sICo9IG1hc2tfd2VpZ2h0OwogICAgY29sICA9IHBvdyhjb2wsIHZlYzMoMS4wIC8gR0FNTUFfT1VUUFVUKSk7CgogICAgRnJhZ0NvbG9yID0gdmVjNChjb2wgKiBCUklHSFRfQk9PU1QsIDEuMCk7Cn0gCiNlbmRpZgo="
        }]
    },
    "crt-geom.glslp": {
        shader: {
            type: "text",
            value: "shaders = 1\n\nshader0 = crt-geom.glsl\nfilter_linear0 = false\n"
        },
        resources: [{
            name: "crt-geom.glsl",
            type: "base64",
            value: "LyoKICAgIENSVC1pbnRlcmxhY2VkCgogICAgQ29weXJpZ2h0IChDKSAyMDEwLTIwMTIgY2d3ZywgVGhlbWFpc3RlciBhbmQgRE9MTFMKCiAgICBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdAogICAgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUKICAgIFNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDIgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikKICAgIGFueSBsYXRlciB2ZXJzaW9uLgoKICAgIChjZ3dnIGdhdmUgdGhlaXIgY29uc2VudCB0byBoYXZlIHRoZSBvcmlnaW5hbCB2ZXJzaW9uIG9mIHRoaXMgc2hhZGVyCiAgICBkaXN0cmlidXRlZCB1bmRlciB0aGUgR1BMIGluIHRoaXMgbWVzc2FnZToKCiAgICAgICAgaHR0cDovL2JvYXJkLmJ5dXUub3JnL3ZpZXd0b3BpYy5waHA/cD0yNjA3NSNwMjYwNzUKCiAgICAgICAgIkZlZWwgZnJlZSB0byBkaXN0cmlidXRlIG15IHNoYWRlcnMgdW5kZXIgdGhlIEdQTC4gQWZ0ZXIgYWxsLCB0aGUKICAgICAgICBiYXJyZWwgZGlzdG9ydGlvbiBjb2RlIHdhcyB0YWtlbiBmcm9tIHRoZSBDdXJ2YXR1cmUgc2hhZGVyLCB3aGljaCBpcwogICAgICAgIHVuZGVyIHRoZSBHUEwuIgogICAgKQoJVGhpcyBzaGFkZXIgdmFyaWFudCBpcyBwcmUtY29uZmlndXJlZCB3aXRoIHNjcmVlbiBjdXJ2YXR1cmUKKi8KCiNwcmFnbWEgcGFyYW1ldGVyIENSVGdhbW1hICJDUlRHZW9tIFRhcmdldCBHYW1tYSIgMi40IDAuMSA1LjAgMC4xCiNwcmFnbWEgcGFyYW1ldGVyIElOViAiSW52ZXJzZSBHYW1tYS9DUlQtR2VvbSBHYW1tYSBvdXQiIDEuMCAwLjAgMS4wIDEuMAojcHJhZ21hIHBhcmFtZXRlciBtb25pdG9yZ2FtbWEgIkNSVEdlb20gTW9uaXRvciBHYW1tYSIgMi4yIDAuMSA1LjAgMC4xCiNwcmFnbWEgcGFyYW1ldGVyIGQgIkNSVEdlb20gRGlzdGFuY2UiIDEuNiAwLjEgMy4wIDAuMQojcHJhZ21hIHBhcmFtZXRlciBDVVJWQVRVUkUgIkNSVEdlb20gQ3VydmF0dXJlIFRvZ2dsZSIgMS4wIDAuMCAxLjAgMS4wCiNwcmFnbWEgcGFyYW1ldGVyIFIgIkNSVEdlb20gQ3VydmF0dXJlIFJhZGl1cyIgMi4wIDAuMSAxMC4wIDAuMQojcHJhZ21hIHBhcmFtZXRlciBjb3JuZXJzaXplICJDUlRHZW9tIENvcm5lciBTaXplIiAwLjAzIDAuMDAxIDEuMCAwLjAwNQojcHJhZ21hIHBhcmFtZXRlciBjb3JuZXJzbW9vdGggIkNSVEdlb20gQ29ybmVyIFNtb290aG5lc3MiIDEwMDAuMCA4MC4wIDIwMDAuMCAxMDAuMAojcHJhZ21hIHBhcmFtZXRlciB4X3RpbHQgIkNSVEdlb20gSG9yaXpvbnRhbCBUaWx0IiAwLjAgLTAuNSAwLjUgMC4wNQojcHJhZ21hIHBhcmFtZXRlciB5X3RpbHQgIkNSVEdlb20gVmVydGljYWwgVGlsdCIgMC4wIC0wLjUgMC41IDAuMDUKI3ByYWdtYSBwYXJhbWV0ZXIgb3ZlcnNjYW5feCAiQ1JUR2VvbSBIb3Jpei4gT3ZlcnNjYW4gJSIgMTAwLjAgLTEyNS4wIDEyNS4wIDEuMAojcHJhZ21hIHBhcmFtZXRlciBvdmVyc2Nhbl95ICJDUlRHZW9tIFZlcnQuIE92ZXJzY2FuICUiIDEwMC4wIC0xMjUuMCAxMjUuMCAxLjAKI3ByYWdtYSBwYXJhbWV0ZXIgRE9UTUFTSyAiQ1JUR2VvbSBEb3QgTWFzayBTdHJlbmd0aCIgMC4zIDAuMCAxLjAgMC4xCiNwcmFnbWEgcGFyYW1ldGVyIFNIQVJQRVIgIkNSVEdlb20gU2hhcnBuZXNzIiAxLjAgMS4wIDMuMCAxLjAKI3ByYWdtYSBwYXJhbWV0ZXIgc2NhbmxpbmVfd2VpZ2h0ICJDUlRHZW9tIFNjYW5saW5lIFdlaWdodCIgMC4zIDAuMSAwLjUgMC4wNQojcHJhZ21hIHBhcmFtZXRlciBsdW0gIkNSVEdlb20gTHVtaW5hbmNlIiAwLjAgMC4wIDEuMCAwLjAxCiNwcmFnbWEgcGFyYW1ldGVyIGludGVybGFjZV9kZXRlY3QgIkNSVEdlb20gSW50ZXJsYWNpbmcgU2ltdWxhdGlvbiIgMS4wIDAuMCAxLjAgMS4wCiNwcmFnbWEgcGFyYW1ldGVyIFNBVFVSQVRJT04gIkNSVEdlb20gU2F0dXJhdGlvbiIgMS4wIDAuMCAyLjAgMC4wNQoKI2lmbmRlZiBQQVJBTUVURVJfVU5JRk9STQojZGVmaW5lIENSVGdhbW1hIDIuNAojZGVmaW5lIG1vbml0b3JnYW1tYSAyLjIKI2RlZmluZSBkIDEuNgojZGVmaW5lIENVUlZBVFVSRSAxLjAKI2RlZmluZSBSIDIuMAojZGVmaW5lIGNvcm5lcnNpemUgMC4wMwojZGVmaW5lIGNvcm5lcnNtb290aCAxMDAwLjAKI2RlZmluZSB4X3RpbHQgMC4wCiNkZWZpbmUgeV90aWx0IDAuMAojZGVmaW5lIG92ZXJzY2FuX3ggMTAwLjAKI2RlZmluZSBvdmVyc2Nhbl95IDEwMC4wCiNkZWZpbmUgRE9UTUFTSyAwLjMKI2RlZmluZSBTSEFSUEVSIDEuMAojZGVmaW5lIHNjYW5saW5lX3dlaWdodCAwLjMKI2RlZmluZSBsdW0gMC4wCiNkZWZpbmUgaW50ZXJsYWNlX2RldGVjdCAxLjAKI2RlZmluZSBTQVRVUkFUSU9OIDEuMAojZGVmaW5lIElOViAxLjAKI2VuZGlmCgojaWYgZGVmaW5lZChWRVJURVgpCgojaWYgX19WRVJTSU9OX18gPj0gMTMwCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgb3V0CiNkZWZpbmUgQ09NUEFUX0FUVFJJQlVURSBpbgojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUKI2Vsc2UKI2RlZmluZSBDT01QQVRfVkFSWUlORyB2YXJ5aW5nIAojZGVmaW5lIENPTVBBVF9BVFRSSUJVVEUgYXR0cmlidXRlIAojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUyRAojZW5kaWYKCiNpZmRlZiBHTF9FUwojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04gbWVkaXVtcAojZWxzZQojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04KI2VuZGlmCgpDT01QQVRfQVRUUklCVVRFIHZlYzQgVmVydGV4Q29vcmQ7CkNPTVBBVF9BVFRSSUJVVEUgdmVjNCBDT0xPUjsKQ09NUEFUX0FUVFJJQlVURSB2ZWM0IFRleENvb3JkOwpDT01QQVRfVkFSWUlORyB2ZWM0IENPTDA7CkNPTVBBVF9WQVJZSU5HIHZlYzQgVEVYMDsKCnZlYzQgX29Qb3NpdGlvbjE7IAp1bmlmb3JtIG1hdDQgTVZQTWF0cml4Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lRGlyZWN0aW9uOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lQ291bnQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIE91dHB1dFNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIFRleHR1cmVTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBJbnB1dFNpemU7CgpDT01QQVRfVkFSWUlORyB2ZWMyIG92ZXJzY2FuOwpDT01QQVRfVkFSWUlORyB2ZWMyIGFzcGVjdDsKQ09NUEFUX1ZBUllJTkcgdmVjMyBzdHJldGNoOwpDT01QQVRfVkFSWUlORyB2ZWMyIHNpbmFuZ2xlOwpDT01QQVRfVkFSWUlORyB2ZWMyIGNvc2FuZ2xlOwpDT01QQVRfVkFSWUlORyB2ZWMyIG9uZTsKQ09NUEFUX1ZBUllJTkcgZmxvYXQgbW9kX2ZhY3RvcjsKQ09NUEFUX1ZBUllJTkcgdmVjMiBpbGZhYzsKCiNpZmRlZiBQQVJBTUVURVJfVU5JRk9STQp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgQ1JUZ2FtbWE7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBtb25pdG9yZ2FtbWE7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBkOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgQ1VSVkFUVVJFOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgUjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IGNvcm5lcnNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBjb3JuZXJzbW9vdGg7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCB4X3RpbHQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCB5X3RpbHQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBvdmVyc2Nhbl94Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgb3ZlcnNjYW5feTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IERPVE1BU0s7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBTSEFSUEVSOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgc2NhbmxpbmVfd2VpZ2h0Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgbHVtOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgaW50ZXJsYWNlX2RldGVjdDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IFNBVFVSQVRJT047CiNlbmRpZgoKI2RlZmluZSBGSVgoYykgbWF4KGFicyhjKSwgMWUtNSk7CgpmbG9hdCBpbnRlcnNlY3QodmVjMiB4eSkKICAgICAgICB7CglmbG9hdCBBID0gZG90KHh5LHh5KStkKmQ7CglmbG9hdCBCID0gMi4wKihSKihkb3QoeHksc2luYW5nbGUpLWQqY29zYW5nbGUueCpjb3NhbmdsZS55KS1kKmQpOwoJZmxvYXQgQyA9IGQqZCArIDIuMCpSKmQqY29zYW5nbGUueCpjb3NhbmdsZS55OwoJcmV0dXJuICgtQi1zcXJ0KEIqQi00LjAqQSpDKSkvKDIuMCpBKTsKICAgICAgICB9Cgp2ZWMyIGJrd3RyYW5zKHZlYzIgeHkpCiAgICAgICAgewoJZmxvYXQgYyA9IGludGVyc2VjdCh4eSk7Cgl2ZWMyIHBvaW50ID0gdmVjMihjKSp4eTsKCXBvaW50IC09IHZlYzIoLVIpKnNpbmFuZ2xlOwoJcG9pbnQgLz0gdmVjMihSKTsKCXZlYzIgdGFuZyA9IHNpbmFuZ2xlL2Nvc2FuZ2xlOwoJdmVjMiBwb2MgPSBwb2ludC9jb3NhbmdsZTsKCWZsb2F0IEEgPSBkb3QodGFuZyx0YW5nKSsxLjA7CglmbG9hdCBCID0gLTIuMCpkb3QocG9jLHRhbmcpOwoJZmxvYXQgQyA9IGRvdChwb2MscG9jKS0xLjA7CglmbG9hdCBhID0gKC1CK3NxcnQoQipCLTQuMCpBKkMpKS8oMi4wKkEpOwoJdmVjMiB1diA9IChwb2ludC1hKnNpbmFuZ2xlKS9jb3NhbmdsZTsKCWZsb2F0IHIgPSBSKmFjb3MoYSk7CglyZXR1cm4gdXYqci9zaW4oci9SKTsKICAgICAgICB9Cgp2ZWMyIGZ3dHJhbnModmVjMiB1dikKICAgICAgICB7CglmbG9hdCByID0gRklYKHNxcnQoZG90KHV2LHV2KSkpOwoJdXYgKj0gc2luKHIvUikvcjsKCWZsb2F0IHggPSAxLjAtY29zKHIvUik7CglmbG9hdCBEID0gZC9SICsgeCpjb3NhbmdsZS54KmNvc2FuZ2xlLnkrZG90KHV2LHNpbmFuZ2xlKTsKCXJldHVybiBkKih1dipjb3NhbmdsZS14KnNpbmFuZ2xlKS9EOwogICAgICAgIH0KCnZlYzMgbWF4c2NhbGUoKQogICAgICAgIHsKCXZlYzIgYyA9IGJrd3RyYW5zKC1SICogc2luYW5nbGUgLyAoMS4wICsgUi9kKmNvc2FuZ2xlLngqY29zYW5nbGUueSkpOwoJdmVjMiBhID0gdmVjMigwLjUsMC41KSphc3BlY3Q7Cgl2ZWMyIGxvID0gdmVjMihmd3RyYW5zKHZlYzIoLWEueCxjLnkpKS54LCBmd3RyYW5zKHZlYzIoYy54LC1hLnkpKS55KS9hc3BlY3Q7Cgl2ZWMyIGhpID0gdmVjMihmd3RyYW5zKHZlYzIoK2EueCxjLnkpKS54LCBmd3RyYW5zKHZlYzIoYy54LCthLnkpKS55KS9hc3BlY3Q7CglyZXR1cm4gdmVjMygoaGkrbG8pKmFzcGVjdCowLjUsbWF4KGhpLngtbG8ueCxoaS55LWxvLnkpKTsKICAgICAgICB9Cgp2b2lkIG1haW4oKQp7Ci8vIFNUQVJUIG9mIHBhcmFtZXRlcnMKCi8vIGdhbW1hIG9mIHNpbXVsYXRlZCBDUlQKLy8JQ1JUZ2FtbWEgPSAxLjg7Ci8vIGdhbW1hIG9mIGRpc3BsYXkgbW9uaXRvciAodHlwaWNhbGx5IDIuMiBpcyBjb3JyZWN0KQovLwltb25pdG9yZ2FtbWEgPSAyLjI7Ci8vIG92ZXJzY2FuIChlLmcuIDEuMDIgZm9yIDIlIG92ZXJzY2FuKQoJb3ZlcnNjYW4gPSB2ZWMyKDEuMDAsMS4wMCk7Ci8vIGFzcGVjdCByYXRpbwoJYXNwZWN0ID0gdmVjMigxLjAsIDAuNzUpOwovLyBsZW5ndGhzIGFyZSBtZWFzdXJlZCBpbiB1bml0cyBvZiAoYXBwcm94aW1hdGVseSkgdGhlIHdpZHRoCi8vIG9mIHRoZSBtb25pdG9yIHNpbXVsYXRlZCBkaXN0YW5jZSBmcm9tIHZpZXdlciB0byBtb25pdG9yCi8vCWQgPSAyLjA7Ci8vIHJhZGl1cyBvZiBjdXJ2YXR1cmUKLy8JUiA9IDEuNTsKLy8gdGlsdCBhbmdsZSBpbiByYWRpYW5zCi8vIChiZWhhdmlvciBtaWdodCBiZSBhIGJpdCB3cm9uZyBpZiBib3RoIGNvbXBvbmVudHMgYXJlCi8vIG5vbnplcm8pCgljb25zdCB2ZWMyIGFuZ2xlID0gdmVjMigwLjAsMC4wKTsKLy8gc2l6ZSBvZiBjdXJ2ZWQgY29ybmVycwovLwljb3JuZXJzaXplID0gMC4wMzsKLy8gYm9yZGVyIHNtb290aG5lc3MgcGFyYW1ldGVyCi8vIGRlY3JlYXNlIGlmIGJvcmRlcnMgYXJlIHRvbyBhbGlhc2VkCi8vCWNvcm5lcnNtb290aCA9IDEwMDAuMDsKCi8vIEVORCBvZiBwYXJhbWV0ZXJzCgogICAgdmVjNCBfb0NvbG9yOwogICAgdmVjMiBfb3RleENvb3JkOwogICAgZ2xfUG9zaXRpb24gPSBWZXJ0ZXhDb29yZC54ICogTVZQTWF0cml4WzBdICsgVmVydGV4Q29vcmQueSAqIE1WUE1hdHJpeFsxXSArIFZlcnRleENvb3JkLnogKiBNVlBNYXRyaXhbMl0gKyBWZXJ0ZXhDb29yZC53ICogTVZQTWF0cml4WzNdOwogICAgX29Qb3NpdGlvbjEgPSBnbF9Qb3NpdGlvbjsKICAgIF9vQ29sb3IgPSBDT0xPUjsKICAgIF9vdGV4Q29vcmQgPSBUZXhDb29yZC54eSoxLjAwMDE7CiAgICBDT0wwID0gQ09MT1I7CiAgICBURVgwLnh5ID0gVGV4Q29vcmQueHkqMS4wMDAxOwoKLy8gUHJlY2FsY3VsYXRlIGEgYnVuY2ggb2YgdXNlZnVsIHZhbHVlcyB3ZSdsbCBuZWVkIGluIHRoZSBmcmFnbWVudAovLyBzaGFkZXIuCglzaW5hbmdsZSA9IHNpbih2ZWMyKHhfdGlsdCwgeV90aWx0KSkgKyB2ZWMyKDAuMDAxKTsvL3Npbih2ZWMyKG1heChhYnMoeF90aWx0KSwgMWUtMyksIG1heChhYnMoeV90aWx0KSwgMWUtMykpKTsKCWNvc2FuZ2xlID0gY29zKHZlYzIoeF90aWx0LCB5X3RpbHQpKSArIHZlYzIoMC4wMDEpOy8vY29zKHZlYzIobWF4KGFicyh4X3RpbHQpLCAxZS0zKSwgbWF4KGFicyh5X3RpbHQpLCAxZS0zKSkpOwoJc3RyZXRjaCA9IG1heHNjYWxlKCk7CgoJaWxmYWMgPSB2ZWMyKDEuMCxjbGFtcChmbG9vcihJbnB1dFNpemUueS8yMDAuMCksIDEuMCwgMi4wKSk7CgovLyBUaGUgc2l6ZSBvZiBvbmUgdGV4ZWwsIGluIHRleHR1cmUtY29vcmRpbmF0ZXMuCgl2ZWMyIHNoYXJwVGV4dHVyZVNpemUgPSB2ZWMyKFNIQVJQRVIgKiBUZXh0dXJlU2l6ZS54LCBUZXh0dXJlU2l6ZS55KTsKCW9uZSA9IGlsZmFjIC8gc2hhcnBUZXh0dXJlU2l6ZTsKCi8vIFJlc3VsdGluZyBYIHBpeGVsLWNvb3JkaW5hdGUgb2YgdGhlIHBpeGVsIHdlJ3JlIGRyYXdpbmcuCgltb2RfZmFjdG9yID0gVGV4Q29vcmQueCAqIFRleHR1cmVTaXplLnggKiBPdXRwdXRTaXplLnggLyBJbnB1dFNpemUueDsKCn0KCiNlbGlmIGRlZmluZWQoRlJBR01FTlQpCgojaWYgX19WRVJTSU9OX18gPj0gMTMwCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgaW4KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlCm91dCB2ZWM0IEZyYWdDb2xvcjsKI2Vsc2UKI2RlZmluZSBDT01QQVRfVkFSWUlORyB2YXJ5aW5nCiNkZWZpbmUgRnJhZ0NvbG9yIGdsX0ZyYWdDb2xvcgojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUyRAojZW5kaWYKCiNpZmRlZiBHTF9FUwojaWZkZWYgR0xfRlJBR01FTlRfUFJFQ0lTSU9OX0hJR0gKcHJlY2lzaW9uIGhpZ2hwIGZsb2F0OwojZWxzZQpwcmVjaXNpb24gbWVkaXVtcCBmbG9hdDsKI2VuZGlmCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTgojZW5kaWYKCnN0cnVjdCBvdXRwdXRfZHVtbXkgewogICAgdmVjNCBfY29sb3I7Cn07Cgp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lRGlyZWN0aW9uOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lQ291bnQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIE91dHB1dFNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIFRleHR1cmVTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBJbnB1dFNpemU7CnVuaWZvcm0gc2FtcGxlcjJEIFRleHR1cmU7CkNPTVBBVF9WQVJZSU5HIHZlYzQgVEVYMDsKCi8vIENvbW1lbnQgdGhlIG5leHQgbGluZSB0byBkaXNhYmxlIGludGVycG9sYXRpb24gaW4gbGluZWFyIGdhbW1hIChhbmQKLy8gZ2FpbiBzcGVlZCkuCgkjZGVmaW5lIExJTkVBUl9QUk9DRVNTSU5HCgovLyBFbmFibGUgc2NyZWVuIGN1cnZhdHVyZS4KLy8gICAgICAgICNkZWZpbmUgQ1VSVkFUVVJFCgovLyBFbmFibGUgM3ggb3ZlcnNhbXBsaW5nIG9mIHRoZSBiZWFtIHByb2ZpbGUKICAgICAgICAjZGVmaW5lIE9WRVJTQU1QTEUKCi8vIFVzZSB0aGUgb2xkZXIsIHB1cmVseSBnYXVzc2lhbiBiZWFtIHByb2ZpbGUKICAgICAgICAvLyNkZWZpbmUgVVNFR0FVU1NJQU4KCi8vIE1hY3Jvcy4KI2RlZmluZSBGSVgoYykgbWF4KGFicyhjKSwgMWUtNSk7CiNkZWZpbmUgUEkgMy4xNDE1OTI2NTM1ODkKCiNpZmRlZiBMSU5FQVJfUFJPQ0VTU0lORwojICAgICAgIGRlZmluZSBURVgyRChjKSBwb3coQ09NUEFUX1RFWFRVUkUoVGV4dHVyZSwgKGMpKSwgdmVjNChDUlRnYW1tYSkpCiNlbHNlCiMgICAgICAgZGVmaW5lIFRFWDJEKGMpIENPTVBBVF9URVhUVVJFKFRleHR1cmUsIChjKSkKI2VuZGlmCgpDT01QQVRfVkFSWUlORyB2ZWMyIG9uZTsKQ09NUEFUX1ZBUllJTkcgZmxvYXQgbW9kX2ZhY3RvcjsKQ09NUEFUX1ZBUllJTkcgdmVjMiBpbGZhYzsKQ09NUEFUX1ZBUllJTkcgdmVjMiBvdmVyc2NhbjsKQ09NUEFUX1ZBUllJTkcgdmVjMiBhc3BlY3Q7CkNPTVBBVF9WQVJZSU5HIHZlYzMgc3RyZXRjaDsKQ09NUEFUX1ZBUllJTkcgdmVjMiBzaW5hbmdsZTsKQ09NUEFUX1ZBUllJTkcgdmVjMiBjb3NhbmdsZTsKCiNpZmRlZiBQQVJBTUVURVJfVU5JRk9STQp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgQ1JUZ2FtbWE7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBtb25pdG9yZ2FtbWE7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBkOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgQ1VSVkFUVVJFOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgUjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IGNvcm5lcnNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBjb3JuZXJzbW9vdGg7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCB4X3RpbHQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCB5X3RpbHQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBvdmVyc2Nhbl94Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgb3ZlcnNjYW5feTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IERPVE1BU0s7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBTSEFSUEVSOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgc2NhbmxpbmVfd2VpZ2h0Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgbHVtOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgaW50ZXJsYWNlX2RldGVjdDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IFNBVFVSQVRJT047CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBJTlY7CiNlbmRpZgoKZmxvYXQgaW50ZXJzZWN0KHZlYzIgeHkpCiAgICAgICAgewoJZmxvYXQgQSA9IGRvdCh4eSx4eSkrZCpkOwoJZmxvYXQgQiA9IDIuMCooUiooZG90KHh5LHNpbmFuZ2xlKS1kKmNvc2FuZ2xlLngqY29zYW5nbGUueSktZCpkKTsKCWZsb2F0IEMgPSBkKmQgKyAyLjAqUipkKmNvc2FuZ2xlLngqY29zYW5nbGUueTsKCXJldHVybiAoLUItc3FydChCKkItNC4wKkEqQykpLygyLjAqQSk7CiAgICAgICAgfQoKdmVjMiBia3d0cmFucyh2ZWMyIHh5KQogICAgICAgIHsKCWZsb2F0IGMgPSBpbnRlcnNlY3QoeHkpOwoJdmVjMiBwb2ludCA9IHZlYzIoYykqeHk7Cglwb2ludCAtPSB2ZWMyKC1SKSpzaW5hbmdsZTsKCXBvaW50IC89IHZlYzIoUik7Cgl2ZWMyIHRhbmcgPSBzaW5hbmdsZS9jb3NhbmdsZTsKCXZlYzIgcG9jID0gcG9pbnQvY29zYW5nbGU7CglmbG9hdCBBID0gZG90KHRhbmcsdGFuZykrMS4wOwoJZmxvYXQgQiA9IC0yLjAqZG90KHBvYyx0YW5nKTsKCWZsb2F0IEMgPSBkb3QocG9jLHBvYyktMS4wOwoJZmxvYXQgYSA9ICgtQitzcXJ0KEIqQi00LjAqQSpDKSkvKDIuMCpBKTsKCXZlYzIgdXYgPSAocG9pbnQtYSpzaW5hbmdsZSkvY29zYW5nbGU7CglmbG9hdCByID0gRklYKFIqYWNvcyhhKSk7CglyZXR1cm4gdXYqci9zaW4oci9SKTsKICAgICAgICB9Cgp2ZWMyIHRyYW5zZm9ybSh2ZWMyIGNvb3JkKQogICAgICAgIHsKCWNvb3JkICo9IFRleHR1cmVTaXplIC8gSW5wdXRTaXplOwoJY29vcmQgPSAoY29vcmQtdmVjMigwLjUpKSphc3BlY3Qqc3RyZXRjaC56K3N0cmV0Y2gueHk7CglyZXR1cm4gKGJrd3RyYW5zKGNvb3JkKS92ZWMyKG92ZXJzY2FuX3ggLyAxMDAuMCwgb3ZlcnNjYW5feSAvIDEwMC4wKS9hc3BlY3QrdmVjMigwLjUpKSAqIElucHV0U2l6ZSAvIFRleHR1cmVTaXplOwogICAgICAgIH0KCmZsb2F0IGNvcm5lcih2ZWMyIGNvb3JkKQogICAgICAgIHsKCWNvb3JkICo9IFRleHR1cmVTaXplIC8gSW5wdXRTaXplOwoJY29vcmQgPSAoY29vcmQgLSB2ZWMyKDAuNSkpICogdmVjMihvdmVyc2Nhbl94IC8gMTAwLjAsIG92ZXJzY2FuX3kgLyAxMDAuMCkgKyB2ZWMyKDAuNSk7Cgljb29yZCA9IG1pbihjb29yZCwgdmVjMigxLjApLWNvb3JkKSAqIGFzcGVjdDsKCXZlYzIgY2Rpc3QgPSB2ZWMyKGNvcm5lcnNpemUpOwoJY29vcmQgPSAoY2Rpc3QgLSBtaW4oY29vcmQsY2Rpc3QpKTsKCWZsb2F0IGRpc3QgPSBzcXJ0KGRvdChjb29yZCxjb29yZCkpOwoJcmV0dXJuIGNsYW1wKChjZGlzdC54LWRpc3QpKmNvcm5lcnNtb290aCwwLjAsIDEuMCkqMS4wMDAxOwogICAgICAgIH0KCi8vIENhbGN1bGF0ZSB0aGUgaW5mbHVlbmNlIG9mIGEgc2NhbmxpbmUgb24gdGhlIGN1cnJlbnQgcGl4ZWwuCi8vCi8vICdkaXN0YW5jZScgaXMgdGhlIGRpc3RhbmNlIGluIHRleHR1cmUgY29vcmRpbmF0ZXMgZnJvbSB0aGUgY3VycmVudAovLyBwaXhlbCB0byB0aGUgc2NhbmxpbmUgaW4gcXVlc3Rpb24uCi8vICdjb2xvcicgaXMgdGhlIGNvbG91ciBvZiB0aGUgc2NhbmxpbmUgYXQgdGhlIGhvcml6b250YWwgbG9jYXRpb24gb2YKLy8gdGhlIGN1cnJlbnQgcGl4ZWwuCnZlYzQgc2NhbmxpbmVXZWlnaHRzKGZsb2F0IGRpc3RhbmNlLCB2ZWM0IGNvbG9yKQogICAgICAgIHsKCS8vICJ3aWQiIGNvbnRyb2xzIHRoZSB3aWR0aCBvZiB0aGUgc2NhbmxpbmUgYmVhbSwgZm9yIGVhY2ggUkdCCgkvLyBjaGFubmVsIFRoZSAid2VpZ2h0cyIgbGluZXMgYmFzaWNhbGx5IHNwZWNpZnkgdGhlIGZvcm11bGEKCS8vIHRoYXQgZ2l2ZXMgeW91IHRoZSBwcm9maWxlIG9mIHRoZSBiZWFtLCBpLmUuIHRoZSBpbnRlbnNpdHkgYXMKCS8vIGEgZnVuY3Rpb24gb2YgZGlzdGFuY2UgZnJvbSB0aGUgdmVydGljYWwgY2VudGVyIG9mIHRoZQoJLy8gc2NhbmxpbmUuIEluIHRoaXMgY2FzZSwgaXQgaXMgZ2F1c3NpYW4gaWYgd2lkdGg9MiwgYW5kCgkvLyBiZWNvbWVzIG5vbmdhdXNzaWFuIGZvciBsYXJnZXIgd2lkdGhzLiBJZGVhbGx5IHRoaXMgc2hvdWxkCgkvLyBiZSBub3JtYWxpemVkIHNvIHRoYXQgdGhlIGludGVncmFsIGFjcm9zcyB0aGUgYmVhbSBpcwoJLy8gaW5kZXBlbmRlbnQgb2YgaXRzIHdpZHRoLiBUaGF0IGlzLCBmb3IgYSBuYXJyb3dlciBiZWFtCgkvLyAid2VpZ2h0cyIgc2hvdWxkIGhhdmUgYSBoaWdoZXIgcGVhayBhdCB0aGUgY2VudGVyIG9mIHRoZQoJLy8gc2NhbmxpbmUgdGhhbiBmb3IgYSB3aWRlciBiZWFtLgojaWZkZWYgVVNFR0FVU1NJQU4KCXZlYzQgd2lkID0gMC4zICsgMC4xICogcG93KGNvbG9yLCB2ZWM0KDMuMCkpOwoJdmVjNCB3ZWlnaHRzID0gdmVjNChkaXN0YW5jZSAvIHdpZCk7CglyZXR1cm4gKGx1bSArIDAuNCkgKiBleHAoLXdlaWdodHMgKiB3ZWlnaHRzKSAvIHdpZDsKI2Vsc2UKCXZlYzQgd2lkID0gMi4wICsgMi4wICogcG93KGNvbG9yLCB2ZWM0KDQuMCkpOwoJdmVjNCB3ZWlnaHRzID0gdmVjNChkaXN0YW5jZSAvIHNjYW5saW5lX3dlaWdodCk7CglyZXR1cm4gKGx1bSArIDEuNCkgKiBleHAoLXBvdyh3ZWlnaHRzICogaW52ZXJzZXNxcnQoMC41ICogd2lkKSwgd2lkKSkgLyAoMC42ICsgMC4yICogd2lkKTsKI2VuZGlmCiAgICAgICAgfQoKdmVjMyBzYXR1cmF0aW9uICh2ZWMzIHRleHR1cmVDb2xvcikKewogICAgZmxvYXQgbHVtPWxlbmd0aCh0ZXh0dXJlQ29sb3IpKjAuNTc3NTsKCiAgICB2ZWMzIGx1bWluYW5jZVdlaWdodGluZyA9IHZlYzMoMC4zLDAuNiwwLjEpOwogICAgaWYgKGx1bTwwLjUpIGx1bWluYW5jZVdlaWdodGluZy5yZ2I9KGx1bWluYW5jZVdlaWdodGluZy5yZ2IqbHVtaW5hbmNlV2VpZ2h0aW5nLnJnYikrKGx1bWluYW5jZVdlaWdodGluZy5yZ2IqbHVtaW5hbmNlV2VpZ2h0aW5nLnJnYik7CgogICAgZmxvYXQgbHVtaW5hbmNlID0gZG90KHRleHR1cmVDb2xvciwgbHVtaW5hbmNlV2VpZ2h0aW5nKTsKICAgIHZlYzMgZ3JleVNjYWxlQ29sb3IgPSB2ZWMzKGx1bWluYW5jZSk7CgogICAgdmVjMyByZXMgPSB2ZWMzKG1peChncmV5U2NhbGVDb2xvciwgdGV4dHVyZUNvbG9yLCBTQVRVUkFUSU9OKSk7CiAgICByZXR1cm4gcmVzOwp9CgojZGVmaW5lIHB3ciB2ZWMzKDEuMC8oKC0wLjcqKDEuMC1zY2FubGluZV93ZWlnaHQpKzEuMCkqKC0wLjUqRE9UTUFTSysxLjApKS0xLjI1KQoKCi8vIFJldHVybnMgZ2FtbWEgY29ycmVjdGVkIG91dHB1dCwgY29tcGVuc2F0ZWQgZm9yIHNjYW5saW5lK21hc2sgZW1iZWRkZWQgZ2FtbWEKdmVjMyBpbnZfZ2FtbWEodmVjMyBjb2wsIHZlYzMgcG93ZXIpCnsKICAgIHZlYzMgY2lyICA9IGNvbC0xLjA7CiAgICAgICAgIGNpciAqPSBjaXI7CiAgICAgICAgIGNvbCAgPSBtaXgoc3FydChjb2wpLHNxcnQoMS4wLWNpcikscG93ZXIpOwogICAgcmV0dXJuIGNvbDsKfQoKdm9pZCBtYWluKCkKewovLyBIZXJlJ3MgYSBoZWxwZnVsIGRpYWdyYW0gdG8ga2VlcCBpbiBtaW5kIHdoaWxlIHRyeWluZyB0bwovLyB1bmRlcnN0YW5kIHRoZSBjb2RlOgovLwovLyAgfCAgICAgIHwgICAgICB8ICAgICAgfCAgICAgIHwKLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQovLyAgfCAgICAgIHwgICAgICB8ICAgICAgfCAgICAgIHwKLy8gIHwgIDAxICB8ICAxMSAgfCAgMjEgIHwgIDMxICB8IDwtLSBjdXJyZW50IHNjYW5saW5lCi8vICB8ICAgICAgfCBAICAgIHwgICAgICB8ICAgICAgfAovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi8vICB8ICAgICAgfCAgICAgIHwgICAgICB8ICAgICAgfAovLyAgfCAgMDIgIHwgIDEyICB8ICAyMiAgfCAgMzIgIHwgPC0tIG5leHQgc2NhbmxpbmUKLy8gIHwgICAgICB8ICAgICAgfCAgICAgIHwgICAgICB8Ci8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KLy8gIHwgICAgICB8ICAgICAgfCAgICAgIHwgICAgICB8Ci8vCi8vIEVhY2ggY2hhcmFjdGVyLWNlbGwgcmVwcmVzZW50cyBhIHBpeGVsIG9uIHRoZSBvdXRwdXQKLy8gc3VyZmFjZSwgIkAiIHJlcHJlc2VudHMgdGhlIGN1cnJlbnQgcGl4ZWwgKGFsd2F5cyBzb21ld2hlcmUKLy8gaW4gdGhlIGJvdHRvbSBoYWxmIG9mIHRoZSBjdXJyZW50IHNjYW4tbGluZSwgb3IgdGhlIHRvcC1oYWxmCi8vIG9mIHRoZSBuZXh0IHNjYW5saW5lKS4gVGhlIGdyaWQgb2YgbGluZXMgcmVwcmVzZW50cyB0aGUKLy8gZWRnZXMgb2YgdGhlIHRleGVscyBvZiB0aGUgdW5kZXJseWluZyB0ZXh0dXJlLgoKLy8gVGV4dHVyZSBjb29yZGluYXRlcyBvZiB0aGUgdGV4ZWwgY29udGFpbmluZyB0aGUgYWN0aXZlIHBpeGVsLgoJdmVjMiB4eSA9IChDVVJWQVRVUkUgPiAwLjUpID8gdHJhbnNmb3JtKFRFWDAueHkpIDogVEVYMC54eTsKCglmbG9hdCBjdmFsID0gY29ybmVyKHh5KTsKCi8vIE9mIGFsbCB0aGUgcGl4ZWxzIHRoYXQgYXJlIG1hcHBlZCBvbnRvIHRoZSB0ZXhlbCB3ZSBhcmUKLy8gY3VycmVudGx5IHJlbmRlcmluZywgd2hpY2ggcGl4ZWwgYXJlIHdlIGN1cnJlbnRseSByZW5kZXJpbmc/Cgl2ZWMyIGlsdmVjID0gdmVjMigwLjAsaWxmYWMueSAqIGludGVybGFjZV9kZXRlY3QgPiAxLjUgPyBtb2QoZmxvYXQoRnJhbWVDb3VudCksMi4wKSA6IDAuMCk7Cgl2ZWMyIHJhdGlvX3NjYWxlID0gKHh5ICogVGV4dHVyZVNpemUgLSB2ZWMyKDAuNSkgKyBpbHZlYykvaWxmYWM7CiNpZmRlZiBPVkVSU0FNUExFCglmbG9hdCBmaWx0ZXJfID0gSW5wdXRTaXplLnkvT3V0cHV0U2l6ZS55Oy8vZndpZHRoKHJhdGlvX3NjYWxlLnkpOwojZW5kaWYKCXZlYzIgdXZfcmF0aW8gPSBmcmFjdChyYXRpb19zY2FsZSk7CgovLyBTbmFwIHRvIHRoZSBjZW50ZXIgb2YgdGhlIHVuZGVybHlpbmcgdGV4ZWwuCgl4eSA9IChmbG9vcihyYXRpb19zY2FsZSkqaWxmYWMgKyB2ZWMyKDAuNSkgLSBpbHZlYykgLyBUZXh0dXJlU2l6ZTsKCi8vIENhbGN1bGF0ZSBMYW5jem9zIHNjYWxpbmcgY29lZmZpY2llbnRzIGRlc2NyaWJpbmcgdGhlIGVmZmVjdAovLyBvZiB2YXJpb3VzIG5laWdoYm91ciB0ZXhlbHMgaW4gYSBzY2FubGluZSBvbiB0aGUgY3VycmVudAovLyBwaXhlbC4KCXZlYzQgY29lZmZzID0gUEkgKiB2ZWM0KDEuMCArIHV2X3JhdGlvLngsIHV2X3JhdGlvLngsIDEuMCAtIHV2X3JhdGlvLngsIDIuMCAtIHV2X3JhdGlvLngpOwoKLy8gUHJldmVudCBkaXZpc2lvbiBieSB6ZXJvLgoJY29lZmZzID0gRklYKGNvZWZmcyk7CgovLyBMYW5jem9zMiBrZXJuZWwuCgljb2VmZnMgPSAyLjAgKiBzaW4oY29lZmZzKSAqIHNpbihjb2VmZnMgLyAyLjApIC8gKGNvZWZmcyAqIGNvZWZmcyk7CgovLyBOb3JtYWxpemUuCgljb2VmZnMgLz0gZG90KGNvZWZmcywgdmVjNCgxLjApKTsKCi8vIENhbGN1bGF0ZSB0aGUgZWZmZWN0aXZlIGNvbG91ciBvZiB0aGUgY3VycmVudCBhbmQgbmV4dAovLyBzY2FubGluZXMgYXQgdGhlIGhvcml6b250YWwgbG9jYXRpb24gb2YgdGhlIGN1cnJlbnQgcGl4ZWwsCi8vIHVzaW5nIHRoZSBMYW5jem9zIGNvZWZmaWNpZW50cyBhYm92ZS4KCXZlYzQgY29sICA9IGNsYW1wKG1hdDQoCiAgICAgICAgICAgICAgICAgICAgICAgIFRFWDJEKHh5ICsgdmVjMigtb25lLngsIDAuMCkpLAogICAgICAgICAgICAgICAgICAgICAgICBURVgyRCh4eSksCiAgICAgICAgICAgICAgICAgICAgICAgIFRFWDJEKHh5ICsgdmVjMihvbmUueCwgMC4wKSksCiAgICAgICAgICAgICAgICAgICAgICAgIFRFWDJEKHh5ICsgdmVjMigyLjAgKiBvbmUueCwgMC4wKSkpICogY29lZmZzLAogICAgICAgICAgICAgICAgICAgICAgICAwLjAsIDEuMCk7CiAgICAgICAgdmVjNCBjb2wyID0gY2xhbXAobWF0NCgKICAgICAgICAgICAgICAgICAgICAgICAgVEVYMkQoeHkgKyB2ZWMyKC1vbmUueCwgb25lLnkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgVEVYMkQoeHkgKyB2ZWMyKDAuMCwgb25lLnkpKSwKICAgICAgICAgICAgICAgICAgICAgICAgVEVYMkQoeHkgKyBvbmUpLAogICAgICAgICAgICAgICAgICAgICAgICBURVgyRCh4eSArIHZlYzIoMi4wICogb25lLngsIG9uZS55KSkpICogY29lZmZzLAogICAgICAgICAgICAgICAgICAgICAgICAwLjAsIDEuMCk7CgojaWZuZGVmIExJTkVBUl9QUk9DRVNTSU5HCgljb2wgID0gcG93KGNvbCAsIHZlYzQoQ1JUZ2FtbWEpKTsKCWNvbDIgPSBwb3coY29sMiwgdmVjNChDUlRnYW1tYSkpOwojZW5kaWYKCi8vIENhbGN1bGF0ZSB0aGUgaW5mbHVlbmNlIG9mIHRoZSBjdXJyZW50IGFuZCBuZXh0IHNjYW5saW5lcyBvbgovLyB0aGUgY3VycmVudCBwaXhlbC4KCXZlYzQgd2VpZ2h0cyAgPSBzY2FubGluZVdlaWdodHModXZfcmF0aW8ueSwgY29sKTsKCXZlYzQgd2VpZ2h0czIgPSBzY2FubGluZVdlaWdodHMoMS4wIC0gdXZfcmF0aW8ueSwgY29sMik7CiNpZmRlZiBPVkVSU0FNUExFCgl1dl9yYXRpby55ID11dl9yYXRpby55KzEuMC8zLjAqZmlsdGVyXzsKCXdlaWdodHMgPSAod2VpZ2h0cytzY2FubGluZVdlaWdodHModXZfcmF0aW8ueSwgY29sKSkvMy4wOwoJd2VpZ2h0czI9KHdlaWdodHMyK3NjYW5saW5lV2VpZ2h0cyhhYnMoMS4wLXV2X3JhdGlvLnkpLCBjb2wyKSkvMy4wOwoJdXZfcmF0aW8ueSA9dXZfcmF0aW8ueS0yLjAvMy4wKmZpbHRlcl87Cgl3ZWlnaHRzPXdlaWdodHMrc2NhbmxpbmVXZWlnaHRzKGFicyh1dl9yYXRpby55KSwgY29sKS8zLjA7Cgl3ZWlnaHRzMj13ZWlnaHRzMitzY2FubGluZVdlaWdodHMoYWJzKDEuMC11dl9yYXRpby55KSwgY29sMikvMy4wOwojZW5kaWYKCgl2ZWMzIG11bF9yZXMgID0gKGNvbCAqIHdlaWdodHMgKyBjb2wyICogd2VpZ2h0czIpLnJnYiAqIHZlYzMoY3ZhbCk7CgovLyBkb3QtbWFzayBlbXVsYXRpb246Ci8vIE91dHB1dCBwaXhlbHMgYXJlIGFsdGVybmF0ZWx5IHRpbnRlZCBncmVlbiBhbmQgbWFnZW50YS4KdmVjMyBkb3RNYXNrV2VpZ2h0cyA9IG1peCgKCXZlYzMoMS4wLCAxLjAgLSBET1RNQVNLLCAxLjApLAoJdmVjMygxLjAgLSBET1RNQVNLLCAxLjAsIDEuMCAtIERPVE1BU0spLAoJZmxvb3IobW9kKG1vZF9mYWN0b3IsIDIuMCkpCiAgICAgICAgKTsKCgltdWxfcmVzICo9IGRvdE1hc2tXZWlnaHRzOwoKLy8gQ29udmVydCB0aGUgaW1hZ2UgZ2FtbWEgZm9yIGRpc3BsYXkgb24gb3VyIG91dHB1dCBkZXZpY2UuCmlmIChJTlYgPT0gMS4wKXsgbXVsX3JlcyA9IGludl9nYW1tYShtdWxfcmVzLHB3cik7fSAKCWVsc2UgbXVsX3JlcyA9IHBvdyhtdWxfcmVzLCB2ZWMzKDEuMC9tb25pdG9yZ2FtbWEpKTsKICAgICAgICAKICAgICAgICBtdWxfcmVzID0gc2F0dXJhdGlvbihtdWxfcmVzKTsKCgoKLy8gQ29sb3IgdGhlIHRleGVsLgogICAgb3V0cHV0X2R1bW15IF9PVVQ7CiAgICBfT1VULl9jb2xvciA9IHZlYzQobXVsX3JlcywgMS4wKTsKICAgIEZyYWdDb2xvciA9IF9PVVQuX2NvbG9yOwogICAgcmV0dXJuOwp9IAojZW5kaWYK"
        }]
    },
    "crt-mattias.glslp": {
        shader: {
            type: "text",
            value: "shaders = 1\n\nshader0 = crt-mattias.glsl\nfilter_linear0 = false"
        },
        resources: [{
            name: "crt-mattias.glsl",
            type: "base64",
            value: "Ly8gQ1JUIEVtdWxhdGlvbgovLyBieSBNYXR0aWFzCi8vIGh0dHBzOi8vd3d3LnNoYWRlcnRveS5jb20vdmlldy9sc0IzRFYKCiNwcmFnbWEgcGFyYW1ldGVyIENVUlZBVFVSRSAiQ3VydmF0dXJlIiAwLjUgMC4wIDEuMCAwLjA1CiNwcmFnbWEgcGFyYW1ldGVyIFNDQU5TUEVFRCAiU2NhbmxpbmUgQ3Jhd2wgU3BlZWQiIDEuMCAwLjAgMTAuMCAwLjUKCiNpZiBkZWZpbmVkKFZFUlRFWCkKCiNpZiBfX1ZFUlNJT05fXyA+PSAxMzAKI2RlZmluZSBDT01QQVRfVkFSWUlORyBvdXQKI2RlZmluZSBDT01QQVRfQVRUUklCVVRFIGluCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZQojZWxzZQojZGVmaW5lIENPTVBBVF9WQVJZSU5HIHZhcnlpbmcgCiNkZWZpbmUgQ09NUEFUX0FUVFJJQlVURSBhdHRyaWJ1dGUgCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZTJECiNlbmRpZgoKI2lmZGVmIEdMX0VTCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTgojZW5kaWYKCkNPTVBBVF9BVFRSSUJVVEUgdmVjNCBWZXJ0ZXhDb29yZDsKQ09NUEFUX0FUVFJJQlVURSB2ZWM0IENPTE9SOwpDT01QQVRfQVRUUklCVVRFIHZlYzQgVGV4Q29vcmQ7CkNPTVBBVF9WQVJZSU5HIHZlYzQgQ09MMDsKQ09NUEFUX1ZBUllJTkcgdmVjNCBURVgwOwovLyBvdXQgdmFyaWFibGVzIGdvIGhlcmUgYXMgQ09NUEFUX1ZBUllJTkcgd2hhdGV2ZXIKCnZlYzQgX29Qb3NpdGlvbjE7IAp1bmlmb3JtIG1hdDQgTVZQTWF0cml4Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lRGlyZWN0aW9uOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lQ291bnQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIE91dHB1dFNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIFRleHR1cmVTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBJbnB1dFNpemU7CgovLyBjb21wYXRpYmlsaXR5ICNkZWZpbmVzCiNkZWZpbmUgdlRleENvb3JkIFRFWDAueHkKI2RlZmluZSBTb3VyY2VTaXplIHZlYzQoVGV4dHVyZVNpemUsIDEuMCAvIFRleHR1cmVTaXplKSAvL2VpdGhlciBUZXh0dXJlU2l6ZSBvciBJbnB1dFNpemUKI2RlZmluZSBPdXRTaXplIHZlYzQoT3V0cHV0U2l6ZSwgMS4wIC8gT3V0cHV0U2l6ZSkKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gTVZQTWF0cml4ICogVmVydGV4Q29vcmQ7CiAgICBURVgwLnh5ID0gVGV4Q29vcmQueHk7Cn0KCiNlbGlmIGRlZmluZWQoRlJBR01FTlQpCgojaWZkZWYgR0xfRVMKI2lmZGVmIEdMX0ZSQUdNRU5UX1BSRUNJU0lPTl9ISUdICnByZWNpc2lvbiBoaWdocCBmbG9hdDsKI2Vsc2UKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CiNlbmRpZgojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04gbWVkaXVtcAojZWxzZQojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04KI2VuZGlmCgojaWYgX19WRVJTSU9OX18gPj0gMTMwCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgaW4KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlCm91dCBDT01QQVRfUFJFQ0lTSU9OIHZlYzQgRnJhZ0NvbG9yOwojZWxzZQojZGVmaW5lIENPTVBBVF9WQVJZSU5HIHZhcnlpbmcKI2RlZmluZSBGcmFnQ29sb3IgZ2xfRnJhZ0NvbG9yCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZTJECiNlbmRpZgoKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZURpcmVjdGlvbjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZUNvdW50Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBPdXRwdXRTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBUZXh0dXJlU2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgSW5wdXRTaXplOwp1bmlmb3JtIHNhbXBsZXIyRCBUZXh0dXJlOwpDT01QQVRfVkFSWUlORyB2ZWM0IFRFWDA7CgovLyBjb21wYXRpYmlsaXR5ICNkZWZpbmVzCiNkZWZpbmUgU291cmNlIFRleHR1cmUKI2RlZmluZSB2VGV4Q29vcmQgVEVYMC54eQoKI2RlZmluZSBTb3VyY2VTaXplIHZlYzQoVGV4dHVyZVNpemUsIDEuMCAvIFRleHR1cmVTaXplKSAvL2VpdGhlciBUZXh0dXJlU2l6ZSBvciBJbnB1dFNpemUKI2RlZmluZSBPdXRTaXplIHZlYzQoT3V0cHV0U2l6ZSwgMS4wIC8gT3V0cHV0U2l6ZSkKCiNpZmRlZiBQQVJBTUVURVJfVU5JRk9STQp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgQ1VSVkFUVVJFLCBTQ0FOU1BFRUQ7CiNlbHNlCiNkZWZpbmUgQ1VSVkFUVVJFIDAuNQojZGVmaW5lIFNDQU5TUEVFRCAxLjAKI2VuZGlmCgojZGVmaW5lIGlDaGFubmVsMCBUZXh0dXJlCiNkZWZpbmUgaVRpbWUgKGZsb2F0KEZyYW1lQ291bnQpIC8gNjAuMCkKI2RlZmluZSBpUmVzb2x1dGlvbiBPdXRwdXRTaXplLnh5CiNkZWZpbmUgZnJhZ0Nvb3JkIGdsX0ZyYWdDb29yZC54eQoKdmVjMyBzYW1wbGVfKCBzYW1wbGVyMkQgdGV4LCB2ZWMyIHRjICkKewoJdmVjMyBzID0gcG93KENPTVBBVF9URVhUVVJFKHRleCx0YykucmdiLCB2ZWMzKDIuMikpOwoJcmV0dXJuIHM7Cn0KCnZlYzMgYmx1cihzYW1wbGVyMkQgdGV4LCB2ZWMyIHRjLCBmbG9hdCBvZmZzKQp7Cgl2ZWM0IHhvZmZzID0gb2ZmcyAqIHZlYzQoLTIuMCwgLTEuMCwgMS4wLCAyLjApIC8gKGlSZXNvbHV0aW9uLnggKiBUZXh0dXJlU2l6ZS54IC8gSW5wdXRTaXplLngpOwoJdmVjNCB5b2ZmcyA9IG9mZnMgKiB2ZWM0KC0yLjAsIC0xLjAsIDEuMCwgMi4wKSAvIChpUmVzb2x1dGlvbi55ICogVGV4dHVyZVNpemUueSAvIElucHV0U2l6ZS55KTsKICAgdGMgPSB0YyAqIElucHV0U2l6ZSAvIFRleHR1cmVTaXplOwoJCgl2ZWMzIGNvbG9yID0gdmVjMygwLjAsIDAuMCwgMC4wKTsKCWNvbG9yICs9IHNhbXBsZV8odGV4LHRjICsgdmVjMih4b2Zmcy54LCB5b2Zmcy54KSkgKiAwLjAwMzY2OwoJY29sb3IgKz0gc2FtcGxlXyh0ZXgsdGMgKyB2ZWMyKHhvZmZzLnksIHlvZmZzLngpKSAqIDAuMDE0NjU7Cgljb2xvciArPSBzYW1wbGVfKHRleCx0YyArIHZlYzIoICAgIDAuMCwgeW9mZnMueCkpICogMC4wMjU2NDsKCWNvbG9yICs9IHNhbXBsZV8odGV4LHRjICsgdmVjMih4b2Zmcy56LCB5b2Zmcy54KSkgKiAwLjAxNDY1OwoJY29sb3IgKz0gc2FtcGxlXyh0ZXgsdGMgKyB2ZWMyKHhvZmZzLncsIHlvZmZzLngpKSAqIDAuMDAzNjY7CgkKCWNvbG9yICs9IHNhbXBsZV8odGV4LHRjICsgdmVjMih4b2Zmcy54LCB5b2Zmcy55KSkgKiAwLjAxNDY1OwoJY29sb3IgKz0gc2FtcGxlXyh0ZXgsdGMgKyB2ZWMyKHhvZmZzLnksIHlvZmZzLnkpKSAqIDAuMDU4NjE7Cgljb2xvciArPSBzYW1wbGVfKHRleCx0YyArIHZlYzIoICAgIDAuMCwgeW9mZnMueSkpICogMC4wOTUyNDsKCWNvbG9yICs9IHNhbXBsZV8odGV4LHRjICsgdmVjMih4b2Zmcy56LCB5b2Zmcy55KSkgKiAwLjA1ODYxOwoJY29sb3IgKz0gc2FtcGxlXyh0ZXgsdGMgKyB2ZWMyKHhvZmZzLncsIHlvZmZzLnkpKSAqIDAuMDE0NjU7CgkKCWNvbG9yICs9IHNhbXBsZV8odGV4LHRjICsgdmVjMih4b2Zmcy54LCAwLjApKSAqIDAuMDI1NjQ7Cgljb2xvciArPSBzYW1wbGVfKHRleCx0YyArIHZlYzIoeG9mZnMueSwgMC4wKSkgKiAwLjA5NTI0OwoJY29sb3IgKz0gc2FtcGxlXyh0ZXgsdGMgKyB2ZWMyKCAgICAwLjAsIDAuMCkpICogMC4xNTAxODsKCWNvbG9yICs9IHNhbXBsZV8odGV4LHRjICsgdmVjMih4b2Zmcy56LCAwLjApKSAqIDAuMDk1MjQ7Cgljb2xvciArPSBzYW1wbGVfKHRleCx0YyArIHZlYzIoeG9mZnMudywgMC4wKSkgKiAwLjAyNTY0OwoJCgljb2xvciArPSBzYW1wbGVfKHRleCx0YyArIHZlYzIoeG9mZnMueCwgeW9mZnMueikpICogMC4wMTQ2NTsKCWNvbG9yICs9IHNhbXBsZV8odGV4LHRjICsgdmVjMih4b2Zmcy55LCB5b2Zmcy56KSkgKiAwLjA1ODYxOwoJY29sb3IgKz0gc2FtcGxlXyh0ZXgsdGMgKyB2ZWMyKCAgICAwLjAsIHlvZmZzLnopKSAqIDAuMDk1MjQ7Cgljb2xvciArPSBzYW1wbGVfKHRleCx0YyArIHZlYzIoeG9mZnMueiwgeW9mZnMueikpICogMC4wNTg2MTsKCWNvbG9yICs9IHNhbXBsZV8odGV4LHRjICsgdmVjMih4b2Zmcy53LCB5b2Zmcy56KSkgKiAwLjAxNDY1OwoJCgljb2xvciArPSBzYW1wbGVfKHRleCx0YyArIHZlYzIoeG9mZnMueCwgeW9mZnMudykpICogMC4wMDM2NjsKCWNvbG9yICs9IHNhbXBsZV8odGV4LHRjICsgdmVjMih4b2Zmcy55LCB5b2Zmcy53KSkgKiAwLjAxNDY1OwoJY29sb3IgKz0gc2FtcGxlXyh0ZXgsdGMgKyB2ZWMyKCAgICAwLjAsIHlvZmZzLncpKSAqIDAuMDI1NjQ7Cgljb2xvciArPSBzYW1wbGVfKHRleCx0YyArIHZlYzIoeG9mZnMueiwgeW9mZnMudykpICogMC4wMTQ2NTsKCWNvbG9yICs9IHNhbXBsZV8odGV4LHRjICsgdmVjMih4b2Zmcy53LCB5b2Zmcy53KSkgKiAwLjAwMzY2OwoKCXJldHVybiBjb2xvcjsKfQoKLy9DYW5vbmljYWwgbm9pc2UgZnVuY3Rpb247IHJlcGxhY2VkIHRvIHByZXZlbnQgcHJlY2lzaW9uIGVycm9ycwovL2Zsb2F0IHJhbmQodmVjMiBjbyl7Ci8vICAgIHJldHVybiBmcmFjdChzaW4oZG90KGNvLnh5ICx2ZWMyKDEyLjk4OTgsNzguMjMzKSkpICogNDM3NTguNTQ1Myk7Ci8vfQoKZmxvYXQgcmFuZCh2ZWMyIGNvKQp7CiAgICBmbG9hdCBhID0gMTIuOTg5ODsKICAgIGZsb2F0IGIgPSA3OC4yMzM7CiAgICBmbG9hdCBjID0gNDM3NTguNTQ1MzsKICAgIGZsb2F0IGR0PSBkb3QoY28ueHkgLHZlYzIoYSxiKSk7CiAgICBmbG9hdCBzbj0gbW9kKGR0LDMuMTQpOwogICAgcmV0dXJuIGZyYWN0KHNpbihzbikgKiBjKTsKfQoKdmVjMiBjdXJ2ZSh2ZWMyIHV2KQp7Cgl1diA9ICh1diAtIDAuNSkgKiAyLjA7Cgl1diAqPSAxLjE7CQoJdXYueCAqPSAxLjAgKyBwb3coKGFicyh1di55KSAvIDUuMCksIDIuMCk7Cgl1di55ICo9IDEuMCArIHBvdygoYWJzKHV2LngpIC8gNC4wKSwgMi4wKTsKCXV2ICA9ICh1diAvIDIuMCkgKyAwLjU7Cgl1diA9ICB1diAqMC45MiArIDAuMDQ7CglyZXR1cm4gdXY7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzIgcSA9ICh2VGV4Q29vcmQueHkgKiBUZXh0dXJlU2l6ZS54eSAvIElucHV0U2l6ZS54eSk7Ly9mcmFnQ29vcmQueHkgLyBpUmVzb2x1dGlvbi54eTsKICAgIHZlYzIgdXYgPSBxOwogICAgdXYgPSBtaXgoIHV2LCBjdXJ2ZSggdXYgKSwgQ1VSVkFUVVJFICkgKiBJbnB1dFNpemUueHkgLyBUZXh0dXJlU2l6ZS54eTsKICAgIHZlYzMgY29sOwoJZmxvYXQgeCA9ICBzaW4oMC4xKmlUaW1lK3V2LnkqMjEuMCkqc2luKDAuMjMqaVRpbWUrdXYueSoyOS4wKSpzaW4oMC4zKzAuMTEqaVRpbWUrdXYueSozMS4wKSowLjAwMTc7CglmbG9hdCBvID0yLjAqbW9kKGZyYWdDb29yZC55LDIuMCkvaVJlc29sdXRpb24ueDsKCXgrPW87CiAgIHV2ID0gdXYgKiBUZXh0dXJlU2l6ZSAvIElucHV0U2l6ZTsKICAgIGNvbC5yID0gMS4wKmJsdXIoaUNoYW5uZWwwLHZlYzIodXYueCswLjAwMDksdXYueSswLjAwMDkpLDEuMikueCswLjAwNTsKICAgIGNvbC5nID0gMS4wKmJsdXIoaUNoYW5uZWwwLHZlYzIodXYueCswLjAwMCx1di55LTAuMDAxNSksMS4yKS55KzAuMDA1OwogICAgY29sLmIgPSAxLjAqYmx1cihpQ2hhbm5lbDAsdmVjMih1di54LTAuMDAxNSx1di55KzAuMDAwKSwxLjIpLnorMC4wMDU7CiAgICBjb2wuciArPSAwLjIqYmx1cihpQ2hhbm5lbDAsdmVjMih1di54KzAuMDAwOSx1di55KzAuMDAwOSksMi4yNSkueC0wLjAwNTsKICAgIGNvbC5nICs9IDAuMipibHVyKGlDaGFubmVsMCx2ZWMyKHV2LngrMC4wMDAsdXYueS0wLjAwMTUpLDEuNzUpLnktMC4wMDU7CiAgICBjb2wuYiArPSAwLjIqYmx1cihpQ2hhbm5lbDAsdmVjMih1di54LTAuMDAxNSx1di55KzAuMDAwKSwxLjI1KS56LTAuMDA1OwogICAgZmxvYXQgZ2hzID0gMC4wNTsKCWNvbC5yICs9IGdocyooMS4wLTAuMjk5KSpibHVyKGlDaGFubmVsMCwwLjc1KnZlYzIoMC4wMSwgLTAuMDI3KSt2ZWMyKHV2LngrMC4wMDEsdXYueSswLjAwMSksNy4wKS54OwogICAgY29sLmcgKz0gZ2hzKigxLjAtMC41ODcpKmJsdXIoaUNoYW5uZWwwLDAuNzUqdmVjMigtMC4wMjIsIC0wLjAyKSt2ZWMyKHV2LngrMC4wMDAsdXYueS0wLjAwMiksNS4wKS55OwogICAgY29sLmIgKz0gZ2hzKigxLjAtMC4xMTQpKmJsdXIoaUNoYW5uZWwwLDAuNzUqdmVjMigtMC4wMiwgLTAuMCkrdmVjMih1di54LTAuMDAyLHV2LnkrMC4wMDApLDMuMCkuejsKICAgIAogICAgCgogICAgY29sID0gY2xhbXAoY29sKjAuNCswLjYqY29sKmNvbCoxLjAsMC4wLDEuMCk7CiAgICBmbG9hdCB2aWcgPSAoMC4wICsgMS4wKjE2LjAqdXYueCp1di55KigxLjAtdXYueCkqKDEuMC11di55KSk7Cgl2aWcgPSBwb3codmlnLDAuMyk7Cgljb2wgKj0gdmVjMyh2aWcpOwoKICAgIGNvbCAqPSB2ZWMzKDAuOTUsMS4wNSwwLjk1KTsKCWNvbCA9IG1peCggY29sLCBjb2wgKiBjb2wsIDAuMykgKiAzLjg7CgoJZmxvYXQgc2NhbnMgPSBjbGFtcCggMC4zNSswLjE1KnNpbigzLjUqKGlUaW1lICogU0NBTlNQRUVEKSt1di55KmlSZXNvbHV0aW9uLnkqMS41KSwgMC4wLCAxLjApOwoJCglmbG9hdCBzID0gcG93KHNjYW5zLDAuOSk7Cgljb2wgPSBjb2wqdmVjMyggcykgOwoKICAgIGNvbCAqPSAxLjArMC4wMDE1KnNpbigzMDAuMCppVGltZSk7CgkKCWNvbCo9MS4wLTAuMTUqdmVjMyhjbGFtcCgobW9kKGZyYWdDb29yZC54K28sIDIuMCktMS4wKSoyLjAsMC4wLDEuMCkpOwoJY29sICo9IHZlYzMoIDEuMCApIC0gMC4yNSp2ZWMzKCByYW5kKCB1diswLjAwMDEqaVRpbWUpLCAgcmFuZCggdXYrMC4wMDAxKmlUaW1lICsgMC4zICksICByYW5kKCB1diswLjAwMDEqaVRpbWUrIDAuNSApICApOwoJY29sID0gcG93KGNvbCwgdmVjMygwLjQ1KSk7CgoJaWYgKHV2LnggPCAwLjAgfHwgdXYueCA+IDEuMCkKCQljb2wgKj0gMC4wOwoJaWYgKHV2LnkgPCAwLjAgfHwgdXYueSA+IDEuMCkKCQljb2wgKj0gMC4wOwoJCgogICAgZmxvYXQgY29tcCA9IHNtb290aHN0ZXAoIDAuMSwgMC45LCBzaW4oaVRpbWUpICk7CgogICAgRnJhZ0NvbG9yID0gdmVjNChjb2wsMS4wKTsKfSAKI2VuZGlmCg=="
        }]
    },
    "crt-beam": {
        shader: {
            type: "text",
            value: 'shaders = "1"\nfeedback_pass = "0"\nshader0 = "CRT-Beam.glsl"\nfilter_linear0 = "true"\nwrap_mode0 = "clamp_to_border"\nmipmap_input0 = "false"\nalias0 = ""\nfloat_framebuffer0 = "false"\nsrgb_framebuffer0 = "false"\n\n'
        },
        resources: [{
            name: "CRT-Beam.glsl",
            type: "base64",
            value: "LyoKCWNydC1iZWFtCglmb3IgYmVzdCByZXN1bHRzIHVzZSBpbnRlZ2VyIHNjYWxlIDV4IG9yIG1vcmUKKi8KCiNwcmFnbWEgcGFyYW1ldGVyIGJsdXIgIkhvcml6b250YWwgQmx1ci9CZWFtIHNoYXBlIiAwLjYgMC4wIDEuMCAwLjEKI3ByYWdtYSBwYXJhbWV0ZXIgU2NhbmxpbmUgIlNjYW5saW5lIHRoaWNrbmVzcyIgMC4yIDAuMCAxLjAgMC4wNQojcHJhZ21hIHBhcmFtZXRlciB3ZWlnaHRyICJTY2FubGluZSBSZWQgYnJpZ2h0bmVzcyIgMC44IDAuMCAxLjAgMC4wNQojcHJhZ21hIHBhcmFtZXRlciB3ZWlnaHRnICJTY2FubGluZSBHcmVlbiBicmlnaHRuZXNzIiAwLjggMC4wIDEuMCAwLjA1CiNwcmFnbWEgcGFyYW1ldGVyIHdlaWdodGIgIlNjYW5saW5lIEJsdWUgYnJpZ2h0bmVzcyIgMC44IDAuMCAxLjAgMC4wNQojcHJhZ21hIHBhcmFtZXRlciBib2d1c19tc2sgIiBbIE1BU0tTIF0gIiAwLjAgMC4wIDAuMCAwLjAKI3ByYWdtYSBwYXJhbWV0ZXIgbWFzayAiTWFzayAwOkNHV0csMS0yOkxvdHRlcywzLTQgR3JheSw1LTY6Q0dXRyBzbG90LDcgVkdBIiAzLjAgLTEuMCA3LjAgMS4wCiNwcmFnbWEgcGFyYW1ldGVyIG1za19zaXplICJNYXNrIHNpemUiIDEuMCAxLjAgMi4wIDEuMAojcHJhZ21hIHBhcmFtZXRlciBzY2FsZSAiVkdBIE1hc2sgVmVydGljYWwgU2NhbGUiIDIuMCAyLjAwIDEwLjAwIDEuMAojcHJhZ21hIHBhcmFtZXRlciBNYXNrRGFyayAiTG90dGVzIE1hc2sgRGFyayIgMC43IDAuMDAgMi4wMCAwLjEwCiNwcmFnbWEgcGFyYW1ldGVyIE1hc2tMaWdodCAiTG90dGVzIE1hc2sgTGlnaHQiIDEuMCAwLjAwIDIuMDAgMC4xMAojcHJhZ21hIHBhcmFtZXRlciBib2d1c19jb2wgIiBbIENPTE9SIF0gIiAwLjAgMC4wIDAuMCAwLjAKI3ByYWdtYSBwYXJhbWV0ZXIgc2F0ICJTYXR1cmF0aW9uIiAxLjAgMC4wMCAyLjAwIDAuMDUKI3ByYWdtYSBwYXJhbWV0ZXIgYnJpZ2h0ICJCb29zdCBicmlnaHQiIDEuMCAxLjAwIDIuMDAgMC4wNQojcHJhZ21hIHBhcmFtZXRlciBkYXJrICJCb29zdCBkYXJrIiAxLjQ1IDEuMDAgMi4wMCAwLjA1CiNwcmFnbWEgcGFyYW1ldGVyIGdsb3cgIkdsb3cgU3RyZW5ndGgiIDAuMDggMC4wIDAuNSAwLjAxCgoKI2RlZmluZSBwaSAzLjE0MTU5CgojaWZkZWYgR0xfRVMKI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OIG1lZGl1bXAKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CiNlbHNlCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTgojZW5kaWYKCgp1bmlmb3JtIHZlYzIgVGV4dHVyZVNpemU7CnZhcnlpbmcgdmVjMiBURVgwOwp2YXJ5aW5nIHZlYzIgZnJhZ3BvczsKCiNpZiBkZWZpbmVkKFZFUlRFWCkKdW5pZm9ybSBtYXQ0IE1WUE1hdHJpeDsKYXR0cmlidXRlIHZlYzQgVmVydGV4Q29vcmQ7CmF0dHJpYnV0ZSB2ZWMyIFRleENvb3JkOwp1bmlmb3JtIHZlYzIgSW5wdXRTaXplOwp1bmlmb3JtIHZlYzIgT3V0cHV0U2l6ZTsKCnZvaWQgbWFpbigpCnsKCVRFWDAgPSBUZXhDb29yZCoxLjAwMDE7ICAgICAgICAgICAgICAgICAgICAKCWdsX1Bvc2l0aW9uID0gTVZQTWF0cml4ICogVmVydGV4Q29vcmQ7ICAKCWZyYWdwb3MgPSBURVgwLnh5Kk91dHB1dFNpemUueHkqVGV4dHVyZVNpemUueHkvSW5wdXRTaXplLnh5OyAgIAp9CgojZWxpZiBkZWZpbmVkKEZSQUdNRU5UKQoKdW5pZm9ybSBzYW1wbGVyMkQgVGV4dHVyZTsKdW5pZm9ybSB2ZWMyIE91dHB1dFNpemU7CnVuaWZvcm0gdmVjMiBJbnB1dFNpemU7CgojZGVmaW5lIHZUZXhDb29yZCBURVgwLnh5CiNkZWZpbmUgU291cmNlU2l6ZSB2ZWM0KFRleHR1cmVTaXplLCAxLjAgLyBUZXh0dXJlU2l6ZSkgLy9laXRoZXIgVGV4dHVyZVNpemUgb3IgSW5wdXRTaXplCiNkZWZpbmUgb3V0U2l6ZSB2ZWM0KE91dHB1dFNpemUueHksIDEuMC9PdXRwdXRTaXplLnh5LzQuMCkKI2RlZmluZSBGcmFnQ29sb3IgZ2xfRnJhZ0NvbG9yCiNkZWZpbmUgU291cmNlIFRleHR1cmUKCgojaWZkZWYgUEFSQU1FVEVSX1VOSUZPUk0KCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBibHVyOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgU2NhbmxpbmU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCB3ZWlnaHRyOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgd2VpZ2h0ZzsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IHdlaWdodGI7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBtYXNrOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgc2NhbGU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBtc2tfc2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IE1hc2tEYXJrOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgTWFza0xpZ2h0Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgYnJpZ2h0Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgZGFyazsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IHNhdDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IGdsb3c7CgojZWxzZQoKI2RlZmluZSBibHVyIDAuNgojZGVmaW5lIFNjYW5saW5lIDAuMgojZGVmaW5lIHdlaWdodHIgIDAuMgojZGVmaW5lIHdlaWdodGcgIDAuNgojZGVmaW5lIHdlaWdodGIgIDAuMQojZGVmaW5lIG1hc2sgICAgICA3LjAgICAKI2RlZmluZSBtc2tfc2l6ZSAgMS4wCiNkZWZpbmUgc2NhbGUgICAyLjAKI2RlZmluZSBNYXNrRGFyayAgMC41CiNkZWZpbmUgTWFza0xpZ2h0ICAxLjUKI2RlZmluZSBicmlnaHQgIDEuNQojZGVmaW5lIGRhcmsgIDEuMjUKI2RlZmluZSBnbG93ICAgICAgMC4wNSAgIAojZGVmaW5lIHNhdCAgICAgICAxLjAKCiNlbmRpZgoKdmVjNCBNYXNrICh2ZWMyIHApCnsJCQoJCXAgPSBmbG9vcihwL21za19zaXplKTsKCQlmbG9hdCBtZj1mcmFjdChwLngqMC41KTsKCQlmbG9hdCBtPU1hc2tEYXJrOwoJCXZlYzMgTWFzayA9IHZlYzMgKE1hc2tEYXJrKTsKCi8vIFBob3NwaG9yLgoJaWYgKG1hc2s9PTAuMCkKCXsKCQlpZiAobWYgPCAwLjUpIHJldHVybiB2ZWM0IChNYXNrTGlnaHQsbSxNYXNrTGlnaHQsMS4wKTsgCgkJZWxzZSByZXR1cm4gdmVjNCAobSxNYXNrTGlnaHQsbSwxLjApOwoJfQoKLy8gVmVyeSBjb21wcmVzc2VkIFRWIHN0eWxlIHNoYWRvdyBtYXNrLgoJZWxzZSBpZiAobWFzayA9PSAxLjApCgl7CgkJZmxvYXQgbGluZSA9IE1hc2tMaWdodDsKCQlmbG9hdCBvZGQgID0gMC4wOwoKCQlpZiAoZnJhY3QocC54LzYuMCkgPCAwLjUpCgkJCW9kZCA9IDEuMDsKCQlpZiAoZnJhY3QoKHAueSArIG9kZCkvMi4wKSA8IDAuNSkKCQkJbGluZSA9IE1hc2tEYXJrOwoKCQlwLnggPSBmcmFjdChwLngvMy4wKTsKICAgIAoJCWlmICAgICAgKHAueCA8IDAuMzMzKSBNYXNrLnIgPSBNYXNrTGlnaHQ7CgkJZWxzZSBpZiAocC54IDwgMC42NjYpIE1hc2suZyA9IE1hc2tMaWdodDsKCQllbHNlICAgICAgICAgICAgICAgICAgTWFzay5iID0gTWFza0xpZ2h0OwoJCQoJCU1hc2sqPWxpbmU7CgkJcmV0dXJuIHZlYzQgKE1hc2suciwgTWFzay5nLCBNYXNrLmIsMS4wKTsgIAoJfSAKCi8vIEFwZXJ0dXJlLWdyaWxsZS4KCWVsc2UgaWYgKG1hc2sgPT0gMi4wKQoJewoJCXAueCA9IGZyYWN0KHAueC8zLjApOwoKCQlpZiAgICAgIChwLnggPCAwLjMzMykgTWFzay5yID0gTWFza0xpZ2h0OwoJCWVsc2UgaWYgKHAueCA8IDAuNjY2KSBNYXNrLmcgPSBNYXNrTGlnaHQ7CgkJZWxzZSAgICAgICAgICAgICAgICAgIE1hc2suYiA9IE1hc2tMaWdodDsKCQlyZXR1cm4gdmVjNCAoTWFzay5yLCBNYXNrLmcsIE1hc2suYiwxLjApOyAgCgoJfSAKLy8gZ3JheQoJZWxzZSBpZiAobWFzaz09My4wKQoJewoJCQoJCWlmIChtZiA8IDAuNSkgcmV0dXJuIHZlYzQgKE1hc2tMaWdodCxNYXNrTGlnaHQsTWFza0xpZ2h0LDEuMCk7IAoJCWVsc2UgcmV0dXJuIHZlYzQgKG0sbSxtLDEuMCk7Cgl9Ci8vZ3JheSAzcHgKCWVsc2UgaWYgKG1hc2s9PTQuMCkKCXsKCQlmbG9hdCBtZj1mcmFjdChwLngqMC4zMzMzKTsKCQlpZiAobWYgPCAwLjY2NjYpIHJldHVybiB2ZWM0IChNYXNrTGlnaHQsTWFza0xpZ2h0LE1hc2tMaWdodCwxLjApOyAKCQllbHNlIHJldHVybiB2ZWM0IChtLG0sbSwxLjApOwoJfQovL2Nnd2cgc2xvdAoJZWxzZSBpZiAobWFzayA9PSA1LjApCgl7CgkJZmxvYXQgbGluZSA9IE1hc2tMaWdodDsKCQlmbG9hdCBvZGQgID0gMC4wOwoKCQlpZiAoZnJhY3QocC54LzQuMCkgPCAwLjUpCgkJCW9kZCA9IDEuMDsKCQlpZiAoZnJhY3QoKHAueSArIG9kZCkvMi4wKSA8IDAuNSkKCQkJbGluZSA9IE1hc2tEYXJrOwoKCQlwLnggPSBmcmFjdChwLngvMi4wKTsKICAgIAoJCWlmICAocC54IDwgMC41KSB7TWFzay5yID0gMS4wOyBNYXNrLmIgPSAxLjA7fQoJCWVsc2UgIE1hc2suZyA9IDEuMDsJCgkJTWFzayo9bGluZTsgIAoJCXJldHVybiB2ZWM0IChNYXNrLnIsIE1hc2suZywgTWFzay5iLDEuMCk7ICAKCgl9IAoKLy9jZ3dnIHNsb3QgMTQ0MHAKCWVsc2UgaWYgKG1hc2sgPT0gNi4wKQoJewoJCWZsb2F0IGxpbmUgPSBNYXNrTGlnaHQ7CgkJZmxvYXQgb2RkICA9IDAuMDsKCgkJaWYgKGZyYWN0KHAueC82LjApIDwgMC41KQoJCQlvZGQgPSAxLjA7CgkJaWYgKGZyYWN0KChwLnkgKyBvZGQpLzMuMCkgPCAwLjUpCgkJCWxpbmUgPSBNYXNrRGFyazsKCgkJcC54ID0gZnJhY3QocC54LzIuMCk7CiAgICAKCQlpZiAgKHAueCA8IDAuNSkge01hc2suciA9IE1hc2tMaWdodDsgTWFzay5iID0gTWFza0xpZ2h0O30KCQkJZWxzZSAge01hc2suZyA9IE1hc2tMaWdodDt9CQoJCQoJCU1hc2sqPWxpbmU7IAoJCXJldHVybiB2ZWM0IChNYXNrLnIsIE1hc2suZywgTWFzay5iLDEuMCk7ICAgCgl9IAoKLy9QQyBDUlQgVkdBIHN0eWxlIG1hc2sKCWVsc2UgaWYgKG1hc2sgPT0gNy4wKQoJewoJCWZsb2F0IGxpbmUgPSAxLjA7CgkJcC54ID0gZnJhY3QocC54LzIuMCk7CgoJCWlmIChmcmFjdChwLnkvc2NhbGUpIDwgMC41KQoJCQl7CgkJCQlpZiAgKHAueCA8IDAuNSkge01hc2suciA9IDEuMDsgTWFzay5iID0gMS4wO30KCQkJCWVsc2UgIHtNYXNrLmcgPSAxLjA7fQkKCQkJfQoJCWVsc2UKCQkJewoJCQkJaWYgIChwLnggPCAwLjUpIHtNYXNrLmcgPSAxLjA7fQkKCQkJCWVsc2UgICB7TWFzay5yID0gMS4wOyBNYXNrLmIgPSAxLjA7fQoJfQoJCU1hc2sqPWxpbmU7CgkJcmV0dXJuIHZlYzQgKE1hc2suciwgTWFzay5nLCBNYXNrLmIsMS4wKTsgICAKCgl9IAplbHNlIHJldHVybiB2ZWM0KDEuMCk7Cn0KdmVjMyBib29zdGVyICh2ZWMyIHBvcykKewoJdmVjMiBkeCA9IHZlYzIoU291cmNlU2l6ZS56LDAuMCk7Cgl2ZWMyIGR5ID0gdmVjMigwLjAsU291cmNlU2l6ZS53KTsKCgl2ZWM0IGMwMCA9IHRleHR1cmUyRChTb3VyY2UscG9zKTsKCXZlYzQgYzAxID0gdGV4dHVyZTJEKFNvdXJjZSxwb3MrZHgpOwoJdmVjNCBjMDIgPSB0ZXh0dXJlMkQoU291cmNlLHBvcytkeSk7Cgl2ZWM0IGMwMyA9IHRleHR1cmUyRChTb3VyY2UscG9zK2R4K2R5KTsKCgl2ZWM0IGdsID0gKGMwMCtjMDErYzAyK2MwMykvNC4wOyBnbCAqPWdsOwoJdmVjMyBnbDAgPSBnbC5yZ2I7CglyZXR1cm4gZ2wwKmdsb3c7Cn0KCnZvaWQgbWFpbigpCnsJCgl2ZWMyIHBvcyA9dlRleENvb3JkOwoJdmVjMiBPR0wyUG9zID0gcG9zKlRleHR1cmVTaXplOwoJdmVjMiBjZW50ID0gKGZsb29yKE9HTDJQb3MpKzAuNSkvVGV4dHVyZVNpemU7CglmbG9hdCB4Y29vcmQgPSBtaXgoY2VudC54LHZUZXhDb29yZC54LGJsdXIpOwoJdmVjMiBjb29yZHMgPSB2ZWMyKHhjb29yZCwgY2VudC55KTsKCgl2ZWMzIHJlcz0gdGV4dHVyZTJEKFNvdXJjZSwgY29vcmRzKS5yZ2I7CgoJZmxvYXQgbHVtID0gbWF4KG1heChyZXMucip3ZWlnaHRyLHJlcy5nKndlaWdodGcpLHJlcy5iKndlaWdodGIpOwoJZmxvYXQgZiA9IGZyYWN0KE9HTDJQb3MueSk7CgkKCXJlcyAqPSAxLjAtKGYtMC41KSooZi0wLjUpKjQ1LjAqKFNjYW5saW5lKigxLjAtbHVtKSk7CglyZXMgPSBjbGFtcChyZXMsMC4wLDEuMCk7CgkKCWZsb2F0IGwgPSBkb3QocmVzLHZlYzMoMC4zLDAuNiwwLjEpKTsKCXJlcyA9IG1peCh2ZWMzKGwpLCByZXMsIHNhdCk7CglyZXMgKz0gYm9vc3Rlcihjb29yZHMpOwoJdmVjNCByZXMwID0gdmVjNChyZXMsMS4wKTsgCglyZXMwICo9IE1hc2soZnJhZ3BvcyoxLjAwMDEpOwoJcmVzMCAqPSBtaXgoZGFyayxicmlnaHQsbCk7CgkKCUZyYWdDb2xvciA9IHJlczA7Cn0KI2VuZGlmCg=="
        }]
    },
    "crt-caligari": {
        shader: {
            type: "text",
            value: "shaders = 1\n\nshader0 = crt-caligari.glsl\nfilter_linear0 = false\n"
        },
        resources: [{
            name: "crt-caligari.glsl",
            type: "base64",
            value: "Ly8gUGFyYW1ldGVyIGxpbmVzIGdvIGhlcmU6Ci8vIDAuNSA9IHRoZSBzcG90IHN0YXlzIGluc2lkZSB0aGUgb3JpZ2luYWwgcGl4ZWwKLy8gMS4wID0gdGhlIHNwb3QgYmxlZWRzIHVwIHRvIHRoZSBjZW50ZXIgb2YgbmV4dCBwaXhlbAojcHJhZ21hIHBhcmFtZXRlciBTUE9UX1dJRFRIICJDUlRDYWxpZ2FyaSBTcG90IFdpZHRoIiAwLjkgMC41IDEuNSAwLjA1CiNwcmFnbWEgcGFyYW1ldGVyIFNQT1RfSEVJR0hUICJDUlRDYWxpZ2FyaSBTcG90IEhlaWdodCIgMC42NSAwLjUgMS41IDAuMDUKLy8gVXNlZCB0byBjb3VudGVyYWN0IHRoZSBkZXNhdHVyYXRpb24gZWZmZWN0IG9mIHdlaWdodGluZy4KI3ByYWdtYSBwYXJhbWV0ZXIgQ09MT1JfQk9PU1QgIkNSVENhbGlnYXJpIENvbG9yIEJvb3N0IiAxLjQ1IDEuMCAyLjAgMC4wNQovLyBDb25zdGFudHMgdXNlZCB3aXRoIGdhbW1hIGNvcnJlY3Rpb24uCiNwcmFnbWEgcGFyYW1ldGVyIElucHV0R2FtbWEgIkNSVENhbGlnYXJpIElucHV0IEdhbW1hIiAyLjQgMC4wIDUuMCAwLjEKI3ByYWdtYSBwYXJhbWV0ZXIgT3V0cHV0R2FtbWEgIkNSVENhbGlnYXJpIE91dHB1dCBHYW1tYSIgMi4yIDAuMCA1LjAgMC4xCgojaWYgZGVmaW5lZChWRVJURVgpCgojaWYgX19WRVJTSU9OX18gPj0gMTMwCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgb3V0CiNkZWZpbmUgQ09NUEFUX0FUVFJJQlVURSBpbgojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUKI2Vsc2UKI2RlZmluZSBDT01QQVRfVkFSWUlORyB2YXJ5aW5nIAojZGVmaW5lIENPTVBBVF9BVFRSSUJVVEUgYXR0cmlidXRlIAojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUyRAojZW5kaWYKCiNpZmRlZiBHTF9FUwojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04gbWVkaXVtcAojZWxzZQojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04KI2VuZGlmCgpDT01QQVRfQVRUUklCVVRFIHZlYzQgVmVydGV4Q29vcmQ7CkNPTVBBVF9BVFRSSUJVVEUgdmVjNCBDT0xPUjsKQ09NUEFUX0FUVFJJQlVURSB2ZWM0IFRleENvb3JkOwpDT01QQVRfVkFSWUlORyB2ZWM0IENPTDA7CkNPTVBBVF9WQVJZSU5HIHZlYzQgVEVYMDsKQ09NUEFUX1ZBUllJTkcgdmVjMiBvbmV4OwpDT01QQVRfVkFSWUlORyB2ZWMyIG9uZXk7Cgp2ZWM0IF9vUG9zaXRpb24xOyAKdW5pZm9ybSBtYXQ0IE1WUE1hdHJpeDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZURpcmVjdGlvbjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZUNvdW50Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBPdXRwdXRTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBUZXh0dXJlU2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgSW5wdXRTaXplOwoKI2RlZmluZSBTb3VyY2VTaXplIHZlYzQoVGV4dHVyZVNpemUsIDEuMCAvIFRleHR1cmVTaXplKSAvL2VpdGhlciBUZXh0dXJlU2l6ZSBvciBJbnB1dFNpemUKCnZvaWQgbWFpbigpCnsKICAgIGdsX1Bvc2l0aW9uID0gTVZQTWF0cml4ICogVmVydGV4Q29vcmQ7CiAgICBDT0wwID0gQ09MT1I7CiAgICBURVgwLnh5ID0gVGV4Q29vcmQueHk7CiAgIG9uZXggPSB2ZWMyKFNvdXJjZVNpemUueiwgMC4wKTsKICAgb25leSA9IHZlYzIoMC4wLCBTb3VyY2VTaXplLncpOwp9CgojZWxpZiBkZWZpbmVkKEZSQUdNRU5UKQoKI2lmIF9fVkVSU0lPTl9fID49IDEzMAojZGVmaW5lIENPTVBBVF9WQVJZSU5HIGluCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZQpvdXQgdmVjNCBGcmFnQ29sb3I7CiNlbHNlCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgdmFyeWluZwojZGVmaW5lIEZyYWdDb2xvciBnbF9GcmFnQ29sb3IKI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlMkQKI2VuZGlmCgojaWZkZWYgR0xfRVMKI2lmZGVmIEdMX0ZSQUdNRU5UX1BSRUNJU0lPTl9ISUdICnByZWNpc2lvbiBoaWdocCBmbG9hdDsKI2Vsc2UKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CiNlbmRpZgojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04gbWVkaXVtcAojZWxzZQojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04KI2VuZGlmCgp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lRGlyZWN0aW9uOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lQ291bnQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIE91dHB1dFNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIFRleHR1cmVTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBJbnB1dFNpemU7CnVuaWZvcm0gc2FtcGxlcjJEIFRleHR1cmU7CkNPTVBBVF9WQVJZSU5HIHZlYzQgVEVYMDsKQ09NUEFUX1ZBUllJTkcgdmVjMiBvbmV4OwpDT01QQVRfVkFSWUlORyB2ZWMyIG9uZXk7CgovLyBjb21wYXRpYmlsaXR5ICNkZWZpbmVzCiNkZWZpbmUgU291cmNlIFRleHR1cmUKI2RlZmluZSB2VGV4Q29vcmQgVEVYMC54eQoKI2RlZmluZSBTb3VyY2VTaXplIHZlYzQoVGV4dHVyZVNpemUsIDEuMCAvIFRleHR1cmVTaXplKSAvL2VpdGhlciBUZXh0dXJlU2l6ZSBvciBJbnB1dFNpemUKI2RlZmluZSBPdXRwdXRTaXplIHZlYzQoT3V0cHV0U2l6ZSwgMS4wIC8gT3V0cHV0U2l6ZSkKCiNpZmRlZiBQQVJBTUVURVJfVU5JRk9STQovLyBBbGwgcGFyYW1ldGVyIGZsb2F0cyBuZWVkIHRvIGhhdmUgQ09NUEFUX1BSRUNJU0lPTiBpbiBmcm9udCBvZiB0aGVtCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBTUE9UX1dJRFRIOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgU1BPVF9IRUlHSFQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBDT0xPUl9CT09TVDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IElucHV0R2FtbWE7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBPdXRwdXRHYW1tYTsKI2Vsc2UKI2RlZmluZSBTUE9UX1dJRFRIIDAuOQojZGVmaW5lIFNQT1RfSEVJR0hUIDAuNjUKI2RlZmluZSBDT0xPUl9CT09TVCAxLjQ1CiNkZWZpbmUgSW5wdXRHYW1tYSAyLjQKI2RlZmluZSBPdXRwdXRHYW1tYSAyLjIKI2VuZGlmCgojZGVmaW5lIEdBTU1BX0lOKGNvbG9yKSAgICAgcG93KGNvbG9yLHZlYzQoSW5wdXRHYW1tYSkpCiNkZWZpbmUgR0FNTUFfT1VUKGNvbG9yKSAgICBwb3coY29sb3IsIHZlYzQoMS4wIC8gT3V0cHV0R2FtbWEpKQoKI2RlZmluZSBURVgyRChjb29yZHMpCUdBTU1BX0lOKCBDT01QQVRfVEVYVFVSRShTb3VyY2UsIGNvb3JkcykgKQoKLy8gTWFjcm8gZm9yIHdlaWdodHMgY29tcHV0aW5nCiNkZWZpbmUgV0VJR0hUKHcpIFwKICAgaWYodz4xLjApIHc9MS4wOyBcCncgPSAxLjAgLSB3ICogdzsgXAp3ID0gdyAqIHc7Cgp2b2lkIG1haW4oKQp7CiAgIHZlYzIgY29vcmRzID0gKCB2VGV4Q29vcmQgKiBTb3VyY2VTaXplLnh5ICk7CiAgIHZlYzIgcGl4ZWxfY2VudGVyID0gZmxvb3IoIGNvb3JkcyApICsgdmVjMigwLjUsIDAuNSk7CiAgIHZlYzIgdGV4dHVyZV9jb29yZHMgPSBwaXhlbF9jZW50ZXIgKiBTb3VyY2VTaXplLnp3OwoKICAgdmVjNCBjb2xvciA9IFRFWDJEKCB0ZXh0dXJlX2Nvb3JkcyApOwoKICAgZmxvYXQgZHggPSBjb29yZHMueCAtIHBpeGVsX2NlbnRlci54OwoKICAgZmxvYXQgaF93ZWlnaHRfMDAgPSBkeCAvIFNQT1RfV0lEVEg7CiAgIFdFSUdIVCggaF93ZWlnaHRfMDAgKTsKCiAgIGNvbG9yICo9IHZlYzQoIGhfd2VpZ2h0XzAwLCBoX3dlaWdodF8wMCwgaF93ZWlnaHRfMDAsIGhfd2VpZ2h0XzAwICApOwoKICAgLy8gZ2V0IGNsb3Nlc3QgaG9yaXpvbnRhbCBuZWlnaGJvdXIgdG8gYmxlbmQKICAgdmVjMiBjb29yZHMwMTsKICAgaWYgKGR4PjAuMCkgewogICAgICBjb29yZHMwMSA9IG9uZXg7CiAgICAgIGR4ID0gMS4wIC0gZHg7CiAgIH0gZWxzZSB7CiAgICAgIGNvb3JkczAxID0gLW9uZXg7CiAgICAgIGR4ID0gMS4wICsgZHg7CiAgIH0KICAgdmVjNCBjb2xvck5CID0gVEVYMkQoIHRleHR1cmVfY29vcmRzICsgY29vcmRzMDEgKTsKCiAgIGZsb2F0IGhfd2VpZ2h0XzAxID0gZHggLyBTUE9UX1dJRFRIOwogICBXRUlHSFQoIGhfd2VpZ2h0XzAxICk7CgogICBjb2xvciA9IGNvbG9yICsgY29sb3JOQiAqIHZlYzQoIGhfd2VpZ2h0XzAxICk7CgogICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8KICAgLy8gVmVydGljYWwgQmxlbmRpbmcKICAgZmxvYXQgZHkgPSBjb29yZHMueSAtIHBpeGVsX2NlbnRlci55OwogICBmbG9hdCB2X3dlaWdodF8wMCA9IGR5IC8gU1BPVF9IRUlHSFQ7CiAgIFdFSUdIVCggdl93ZWlnaHRfMDAgKTsKICAgY29sb3IgKj0gdmVjNCggdl93ZWlnaHRfMDAgKTsKCiAgIC8vIGdldCBjbG9zZXN0IHZlcnRpY2FsIG5laWdoYm91ciB0byBibGVuZAogICB2ZWMyIGNvb3JkczEwOwogICBpZiAoZHk+MC4wKSB7CiAgICAgIGNvb3JkczEwID0gb25leTsKICAgICAgZHkgPSAxLjAgLSBkeTsKICAgfSBlbHNlIHsKICAgICAgY29vcmRzMTAgPSAtb25leTsKICAgICAgZHkgPSAxLjAgKyBkeTsKICAgfQogICBjb2xvck5CID0gVEVYMkQoIHRleHR1cmVfY29vcmRzICsgY29vcmRzMTAgKTsKCiAgIGZsb2F0IHZfd2VpZ2h0XzEwID0gZHkgLyBTUE9UX0hFSUdIVDsKICAgV0VJR0hUKCB2X3dlaWdodF8xMCApOwoKICAgY29sb3IgPSBjb2xvciArIGNvbG9yTkIgKiB2ZWM0KCB2X3dlaWdodF8xMCAqIGhfd2VpZ2h0XzAwLCB2X3dlaWdodF8xMCAqIGhfd2VpZ2h0XzAwLCB2X3dlaWdodF8xMCAqIGhfd2VpZ2h0XzAwLCB2X3dlaWdodF8xMCAqIGhfd2VpZ2h0XzAwICk7CgogICBjb2xvck5CID0gVEVYMkQoICB0ZXh0dXJlX2Nvb3JkcyArIGNvb3JkczAxICsgY29vcmRzMTAgKTsKCiAgIGNvbG9yID0gY29sb3IgKyBjb2xvck5CICogdmVjNCggdl93ZWlnaHRfMTAgKiBoX3dlaWdodF8wMSwgdl93ZWlnaHRfMTAgKiBoX3dlaWdodF8wMSwgdl93ZWlnaHRfMTAgKiBoX3dlaWdodF8wMSwgdl93ZWlnaHRfMTAgKiBoX3dlaWdodF8wMSApOwoKICAgY29sb3IgKj0gdmVjNCggQ09MT1JfQk9PU1QgKTsKCiAgIEZyYWdDb2xvciA9IGNsYW1wKCBHQU1NQV9PVVQoY29sb3IpLCAwLjAsIDEuMCApOwp9IAojZW5kaWYK"
        }]
    },
    "crt-lottes": {
        shader: {
            type: "text",
            value: "shaders = 1\n\nshader0 = crt-lottes.glsl\nfilter_linear0 = false\n"
        },
        resources: [{
            name: "crt-lottes.glsl",
            type: "base64",
            value: "Ly8gUGFyYW1ldGVyIGxpbmVzIGdvIGhlcmU6CiNwcmFnbWEgcGFyYW1ldGVyIGhhcmRTY2FuICJoYXJkU2NhbiIgLTguMCAtMjAuMCAwLjAgMS4wCiNwcmFnbWEgcGFyYW1ldGVyIGhhcmRQaXggImhhcmRQaXgiIC0zLjAgLTIwLjAgMC4wIDEuMAojcHJhZ21hIHBhcmFtZXRlciB3YXJwWCAid2FycFgiIDAuMDMxIDAuMCAwLjEyNSAwLjAxCiNwcmFnbWEgcGFyYW1ldGVyIHdhcnBZICJ3YXJwWSIgMC4wNDEgMC4wIDAuMTI1IDAuMDEKI3ByYWdtYSBwYXJhbWV0ZXIgbWFza0RhcmsgIm1hc2tEYXJrIiAwLjUgMC4wIDIuMCAwLjEKI3ByYWdtYSBwYXJhbWV0ZXIgbWFza0xpZ2h0ICJtYXNrTGlnaHQiIDEuNSAwLjAgMi4wIDAuMQojcHJhZ21hIHBhcmFtZXRlciBzY2FsZUluTGluZWFyR2FtbWEgInNjYWxlSW5MaW5lYXJHYW1tYSIgMS4wIDAuMCAxLjAgMS4wCiNwcmFnbWEgcGFyYW1ldGVyIHNoYWRvd01hc2sgInNoYWRvd01hc2siIDMuMCAwLjAgNC4wIDEuMAojcHJhZ21hIHBhcmFtZXRlciBicmlnaHRCb29zdCAiYnJpZ2h0bmVzcyBib29zdCIgMS4wIDAuMCAyLjAgMC4wNQojcHJhZ21hIHBhcmFtZXRlciBoYXJkQmxvb21QaXggImJsb29tLXggc29mdCIgLTEuNSAtMi4wIC0wLjUgMC4xCiNwcmFnbWEgcGFyYW1ldGVyIGhhcmRCbG9vbVNjYW4gImJsb29tLXkgc29mdCIgLTIuMCAtNC4wIC0xLjAgMC4xCiNwcmFnbWEgcGFyYW1ldGVyIGJsb29tQW1vdW50ICJibG9vbSBhbW1vdW50IiAwLjE1IDAuMCAxLjAgMC4wNQojcHJhZ21hIHBhcmFtZXRlciBzaGFwZSAiZmlsdGVyIGtlcm5lbCBzaGFwZSIgMi4wIDAuMCAxMC4wIDAuMDUKCiNpZiBkZWZpbmVkKFZFUlRFWCkKCiNpZiBfX1ZFUlNJT05fXyA+PSAxMzAKI2RlZmluZSBDT01QQVRfVkFSWUlORyBvdXQKI2RlZmluZSBDT01QQVRfQVRUUklCVVRFIGluCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZQojZWxzZQojZGVmaW5lIENPTVBBVF9WQVJZSU5HIHZhcnlpbmcgCiNkZWZpbmUgQ09NUEFUX0FUVFJJQlVURSBhdHRyaWJ1dGUgCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZTJECiNlbmRpZgoKI2lmZGVmIEdMX0VTCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTgojZW5kaWYKCkNPTVBBVF9BVFRSSUJVVEUgdmVjNCBWZXJ0ZXhDb29yZDsKQ09NUEFUX0FUVFJJQlVURSB2ZWM0IENPTE9SOwpDT01QQVRfQVRUUklCVVRFIHZlYzQgVGV4Q29vcmQ7CkNPTVBBVF9WQVJZSU5HIHZlYzQgQ09MMDsKQ09NUEFUX1ZBUllJTkcgdmVjNCBURVgwOwoKdW5pZm9ybSBtYXQ0IE1WUE1hdHJpeDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZURpcmVjdGlvbjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZUNvdW50Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBPdXRwdXRTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBUZXh0dXJlU2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgSW5wdXRTaXplOwoKLy8gdmVydGV4IGNvbXBhdGliaWxpdHkgI2RlZmluZXMKI2RlZmluZSB2VGV4Q29vcmQgVEVYMC54eQojZGVmaW5lIFNvdXJjZVNpemUgdmVjNChUZXh0dXJlU2l6ZSwgMS4wIC8gVGV4dHVyZVNpemUpIC8vZWl0aGVyIFRleHR1cmVTaXplIG9yIElucHV0U2l6ZQojZGVmaW5lIG91dHNpemUgdmVjNChPdXRwdXRTaXplLCAxLjAgLyBPdXRwdXRTaXplKQoKdm9pZCBtYWluKCkKewogICAgZ2xfUG9zaXRpb24gPSBNVlBNYXRyaXggKiBWZXJ0ZXhDb29yZDsKICAgIFRFWDAueHkgPSBUZXhDb29yZC54eTsKfQoKI2VsaWYgZGVmaW5lZChGUkFHTUVOVCkKCiNpZiBfX1ZFUlNJT05fXyA+PSAxMzAKI2RlZmluZSBDT01QQVRfVkFSWUlORyBpbgojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUKb3V0IHZlYzQgRnJhZ0NvbG9yOwojZWxzZQojZGVmaW5lIENPTVBBVF9WQVJZSU5HIHZhcnlpbmcKI2RlZmluZSBGcmFnQ29sb3IgZ2xfRnJhZ0NvbG9yCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZTJECiNlbmRpZgoKI2lmZGVmIEdMX0VTCiNpZmRlZiBHTF9GUkFHTUVOVF9QUkVDSVNJT05fSElHSApwcmVjaXNpb24gaGlnaHAgZmxvYXQ7CiNlbHNlCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwojZW5kaWYKI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OIG1lZGl1bXAKI2Vsc2UKI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OCiNlbmRpZgoKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZURpcmVjdGlvbjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZUNvdW50Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBPdXRwdXRTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBUZXh0dXJlU2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgSW5wdXRTaXplOwp1bmlmb3JtIHNhbXBsZXIyRCBUZXh0dXJlOwpDT01QQVRfVkFSWUlORyB2ZWM0IFRFWDA7CgovLyBmcmFnbWVudCBjb21wYXRpYmlsaXR5ICNkZWZpbmVzCiNkZWZpbmUgU291cmNlIFRleHR1cmUKI2RlZmluZSB2VGV4Q29vcmQgVEVYMC54eQoKI2RlZmluZSBTb3VyY2VTaXplIHZlYzQoVGV4dHVyZVNpemUsIDEuMCAvIFRleHR1cmVTaXplKSAvL2VpdGhlciBUZXh0dXJlU2l6ZSBvciBJbnB1dFNpemUKI2RlZmluZSBvdXRzaXplIHZlYzQoT3V0cHV0U2l6ZSwgMS4wIC8gT3V0cHV0U2l6ZSkKCiNpZmRlZiBQQVJBTUVURVJfVU5JRk9STQovLyBBbGwgcGFyYW1ldGVyIGZsb2F0cyBuZWVkIHRvIGhhdmUgQ09NUEFUX1BSRUNJU0lPTiBpbiBmcm9udCBvZiB0aGVtCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBoYXJkU2NhbjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IGhhcmRQaXg7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCB3YXJwWDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IHdhcnBZOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgbWFza0Rhcms7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBtYXNrTGlnaHQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBzY2FsZUluTGluZWFyR2FtbWE7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBzaGFkb3dNYXNrOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgYnJpZ2h0Qm9vc3Q7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBoYXJkQmxvb21QaXg7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBoYXJkQmxvb21TY2FuOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgYmxvb21BbW91bnQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBzaGFwZTsKI2Vsc2UKI2RlZmluZSBoYXJkU2NhbiAtOC4wCiNkZWZpbmUgaGFyZFBpeCAtMy4wCiNkZWZpbmUgd2FycFggMC4wMzEKI2RlZmluZSB3YXJwWSAwLjA0MQojZGVmaW5lIG1hc2tEYXJrIDAuNQojZGVmaW5lIG1hc2tMaWdodCAxLjUKI2RlZmluZSBzY2FsZUluTGluZWFyR2FtbWEgMS4wCiNkZWZpbmUgc2hhZG93TWFzayAzLjAKI2RlZmluZSBicmlnaHRCb29zdCAxLjAKI2RlZmluZSBoYXJkQmxvb21QaXggLTEuNQojZGVmaW5lIGhhcmRCbG9vbVNjYW4gLTIuMAojZGVmaW5lIGJsb29tQW1vdW50IDAuMTUKI2RlZmluZSBzaGFwZSAyLjAKI2VuZGlmCgovL1VuY29tbWVudCB0byByZWR1Y2UgaW5zdHJ1Y3Rpb25zIHdpdGggc2ltcGxlciBsaW5lYXJpemF0aW9uCi8vKGZpeGVzIEhEMzAwMCBTYW5keSBCcmlkZ2UgSUdQKQovLyNkZWZpbmUgU0lNUExFX0xJTkVBUl9HQU1NQQojZGVmaW5lIERPX0JMT09NCgovLyAtLS0tLS0tLS0tLS0tIC8vCgovLyBzUkdCIHRvIExpbmVhci4KLy8gQXNzdW1pbmcgdXNpbmcgc1JHQiB0eXBlZCB0ZXh0dXJlcyB0aGlzIHNob3VsZCBub3QgYmUgbmVlZGVkLgojaWZkZWYgU0lNUExFX0xJTkVBUl9HQU1NQQpmbG9hdCBUb0xpbmVhcjEoZmxvYXQgYykKewogICAgcmV0dXJuIGM7Cn0KdmVjMyBUb0xpbmVhcih2ZWMzIGMpCnsKICAgIHJldHVybiBjOwp9CnZlYzMgVG9TcmdiKHZlYzMgYykKewogICAgcmV0dXJuIHBvdyhjLCB2ZWMzKDEuMCAvIDIuMikpOwp9CiNlbHNlCmZsb2F0IFRvTGluZWFyMShmbG9hdCBjKQp7CiAgICBpZiAoc2NhbGVJbkxpbmVhckdhbW1hID09IDAuKSAKICAgICAgICByZXR1cm4gYzsKICAgIAogICAgcmV0dXJuKGM8PTAuMDQwNDUpID8gYy8xMi45MiA6IHBvdygoYyArIDAuMDU1KS8xLjA1NSwgMi40KTsKfQoKdmVjMyBUb0xpbmVhcih2ZWMzIGMpCnsKICAgIGlmIChzY2FsZUluTGluZWFyR2FtbWE9PTAuKSAKICAgICAgICByZXR1cm4gYzsKICAgIAogICAgcmV0dXJuIHZlYzMoVG9MaW5lYXIxKGMuciksIFRvTGluZWFyMShjLmcpLCBUb0xpbmVhcjEoYy5iKSk7Cn0KCi8vIExpbmVhciB0byBzUkdCLgovLyBBc3N1bWluZyB1c2luZyBzUkdCIHR5cGVkIHRleHR1cmVzIHRoaXMgc2hvdWxkIG5vdCBiZSBuZWVkZWQuCmZsb2F0IFRvU3JnYjEoZmxvYXQgYykKewogICAgaWYgKHNjYWxlSW5MaW5lYXJHYW1tYSA9PSAwLikgCiAgICAgICAgcmV0dXJuIGM7CiAgICAKICAgIHJldHVybihjPDAuMDAzMTMwOCA/IGMqMTIuOTIgOiAxLjA1NSpwb3coYywgMC40MTY2NikgLSAwLjA1NSk7Cn0KCnZlYzMgVG9TcmdiKHZlYzMgYykKewogICAgaWYgKHNjYWxlSW5MaW5lYXJHYW1tYSA9PSAwLikgCiAgICAgICAgcmV0dXJuIGM7CiAgICAKICAgIHJldHVybiB2ZWMzKFRvU3JnYjEoYy5yKSwgVG9TcmdiMShjLmcpLCBUb1NyZ2IxKGMuYikpOwp9CiNlbmRpZgoKLy8gTmVhcmVzdCBlbXVsYXRlZCBzYW1wbGUgZ2l2ZW4gZmxvYXRpbmcgcG9pbnQgcG9zaXRpb24gYW5kIHRleGVsIG9mZnNldC4KLy8gQWxzbyB6ZXJvJ3Mgb2ZmIHNjcmVlbi4KdmVjMyBGZXRjaCh2ZWMyIHBvcyx2ZWMyIG9mZil7CiAgcG9zPShmbG9vcihwb3MqU291cmNlU2l6ZS54eStvZmYpK3ZlYzIoMC41LDAuNSkpL1NvdXJjZVNpemUueHk7CiNpZmRlZiBTSU1QTEVfTElORUFSX0dBTU1BCiAgcmV0dXJuIFRvTGluZWFyKGJyaWdodEJvb3N0ICogcG93KENPTVBBVF9URVhUVVJFKFNvdXJjZSxwb3MueHkpLnJnYiwgdmVjMygyLjIpKSk7CiNlbHNlCiAgcmV0dXJuIFRvTGluZWFyKGJyaWdodEJvb3N0ICogQ09NUEFUX1RFWFRVUkUoU291cmNlLHBvcy54eSkucmdiKTsKI2VuZGlmCn0KCi8vIERpc3RhbmNlIGluIGVtdWxhdGVkIHBpeGVscyB0byBuZWFyZXN0IHRleGVsLgp2ZWMyIERpc3QodmVjMiBwb3MpCnsKICAgIHBvcyA9IHBvcypTb3VyY2VTaXplLnh5OwogICAgCiAgICByZXR1cm4gLSgocG9zIC0gZmxvb3IocG9zKSkgLSB2ZWMyKDAuNSkpOwp9CiAgICAKLy8gMUQgR2F1c3NpYW4uCmZsb2F0IEdhdXMoZmxvYXQgcG9zLCBmbG9hdCBzY2FsZSkKewogICAgcmV0dXJuIGV4cDIoc2NhbGUqcG93KGFicyhwb3MpLCBzaGFwZSkpOwp9CgovLyAzLXRhcCBHYXVzc2lhbiBmaWx0ZXIgYWxvbmcgaG9yeiBsaW5lLgp2ZWMzIEhvcnozKHZlYzIgcG9zLCBmbG9hdCBvZmYpCnsKICAgIHZlYzMgYiAgICA9IEZldGNoKHBvcywgdmVjMigtMS4wLCBvZmYpKTsKICAgIHZlYzMgYyAgICA9IEZldGNoKHBvcywgdmVjMiggMC4wLCBvZmYpKTsKICAgIHZlYzMgZCAgICA9IEZldGNoKHBvcywgdmVjMiggMS4wLCBvZmYpKTsKICAgIGZsb2F0IGRzdCA9IERpc3QocG9zKS54OwoKICAgIC8vIENvbnZlcnQgZGlzdGFuY2UgdG8gd2VpZ2h0LgogICAgZmxvYXQgc2NhbGUgPSBoYXJkUGl4OwogICAgZmxvYXQgd2IgPSBHYXVzKGRzdC0xLjAsc2NhbGUpOwogICAgZmxvYXQgd2MgPSBHYXVzKGRzdCswLjAsc2NhbGUpOwogICAgZmxvYXQgd2QgPSBHYXVzKGRzdCsxLjAsc2NhbGUpOwoKICAgIC8vIFJldHVybiBmaWx0ZXJlZCBzYW1wbGUuCiAgICByZXR1cm4gKGIqd2IrYyp3YytkKndkKS8od2Ird2Mrd2QpOwp9CgovLyA1LXRhcCBHYXVzc2lhbiBmaWx0ZXIgYWxvbmcgaG9yeiBsaW5lLgp2ZWMzIEhvcno1KHZlYzIgcG9zLGZsb2F0IG9mZil7CiAgICB2ZWMzIGEgPSBGZXRjaChwb3MsdmVjMigtMi4wLCBvZmYpKTsKICAgIHZlYzMgYiA9IEZldGNoKHBvcyx2ZWMyKC0xLjAsIG9mZikpOwogICAgdmVjMyBjID0gRmV0Y2gocG9zLHZlYzIoIDAuMCwgb2ZmKSk7CiAgICB2ZWMzIGQgPSBGZXRjaChwb3MsdmVjMiggMS4wLCBvZmYpKTsKICAgIHZlYzMgZSA9IEZldGNoKHBvcyx2ZWMyKCAyLjAsIG9mZikpOwogICAgCiAgICBmbG9hdCBkc3QgPSBEaXN0KHBvcykueDsKICAgIC8vIENvbnZlcnQgZGlzdGFuY2UgdG8gd2VpZ2h0LgogICAgZmxvYXQgc2NhbGUgPSBoYXJkUGl4OwogICAgZmxvYXQgd2EgPSBHYXVzKGRzdCAtIDIuMCwgc2NhbGUpOwogICAgZmxvYXQgd2IgPSBHYXVzKGRzdCAtIDEuMCwgc2NhbGUpOwogICAgZmxvYXQgd2MgPSBHYXVzKGRzdCArIDAuMCwgc2NhbGUpOwogICAgZmxvYXQgd2QgPSBHYXVzKGRzdCArIDEuMCwgc2NhbGUpOwogICAgZmxvYXQgd2UgPSBHYXVzKGRzdCArIDIuMCwgc2NhbGUpOwogICAgCiAgICAvLyBSZXR1cm4gZmlsdGVyZWQgc2FtcGxlLgogICAgcmV0dXJuIChhKndhK2Iqd2IrYyp3YytkKndkK2Uqd2UpLyh3YSt3Yit3Yyt3ZCt3ZSk7Cn0KICAKLy8gNy10YXAgR2F1c3NpYW4gZmlsdGVyIGFsb25nIGhvcnogbGluZS4KdmVjMyBIb3J6Nyh2ZWMyIHBvcyxmbG9hdCBvZmYpCnsKICAgIHZlYzMgYSA9IEZldGNoKHBvcywgdmVjMigtMy4wLCBvZmYpKTsKICAgIHZlYzMgYiA9IEZldGNoKHBvcywgdmVjMigtMi4wLCBvZmYpKTsKICAgIHZlYzMgYyA9IEZldGNoKHBvcywgdmVjMigtMS4wLCBvZmYpKTsKICAgIHZlYzMgZCA9IEZldGNoKHBvcywgdmVjMiggMC4wLCBvZmYpKTsKICAgIHZlYzMgZSA9IEZldGNoKHBvcywgdmVjMiggMS4wLCBvZmYpKTsKICAgIHZlYzMgZiA9IEZldGNoKHBvcywgdmVjMiggMi4wLCBvZmYpKTsKICAgIHZlYzMgZyA9IEZldGNoKHBvcywgdmVjMiggMy4wLCBvZmYpKTsKCiAgICBmbG9hdCBkc3QgPSBEaXN0KHBvcykueDsKICAgIC8vIENvbnZlcnQgZGlzdGFuY2UgdG8gd2VpZ2h0LgogICAgZmxvYXQgc2NhbGUgPSBoYXJkQmxvb21QaXg7CiAgICBmbG9hdCB3YSA9IEdhdXMoZHN0IC0gMy4wLCBzY2FsZSk7CiAgICBmbG9hdCB3YiA9IEdhdXMoZHN0IC0gMi4wLCBzY2FsZSk7CiAgICBmbG9hdCB3YyA9IEdhdXMoZHN0IC0gMS4wLCBzY2FsZSk7CiAgICBmbG9hdCB3ZCA9IEdhdXMoZHN0ICsgMC4wLCBzY2FsZSk7CiAgICBmbG9hdCB3ZSA9IEdhdXMoZHN0ICsgMS4wLCBzY2FsZSk7CiAgICBmbG9hdCB3ZiA9IEdhdXMoZHN0ICsgMi4wLCBzY2FsZSk7CiAgICBmbG9hdCB3ZyA9IEdhdXMoZHN0ICsgMy4wLCBzY2FsZSk7CgogICAgLy8gUmV0dXJuIGZpbHRlcmVkIHNhbXBsZS4KICAgIHJldHVybiAoYSp3YStiKndiK2Mqd2MrZCp3ZCtlKndlK2Yqd2YrZyp3ZykvKHdhK3diK3djK3dkK3dlK3dmK3dnKTsKfQogIAovLyBSZXR1cm4gc2NhbmxpbmUgd2VpZ2h0LgpmbG9hdCBTY2FuKHZlYzIgcG9zLCBmbG9hdCBvZmYpCnsKICAgIGZsb2F0IGRzdCA9IERpc3QocG9zKS55OwoKICAgIHJldHVybiBHYXVzKGRzdCArIG9mZiwgaGFyZFNjYW4pOwp9CiAgCi8vIFJldHVybiBzY2FubGluZSB3ZWlnaHQgZm9yIGJsb29tLgpmbG9hdCBCbG9vbVNjYW4odmVjMiBwb3MsIGZsb2F0IG9mZikKewogICAgZmxvYXQgZHN0ID0gRGlzdChwb3MpLnk7CiAgICAKICAgIHJldHVybiBHYXVzKGRzdCArIG9mZiwgaGFyZEJsb29tU2Nhbik7Cn0KCi8vIEFsbG93IG5lYXJlc3QgdGhyZWUgbGluZXMgdG8gZWZmZWN0IHBpeGVsLgp2ZWMzIFRyaSh2ZWMyIHBvcykKewogICAgdmVjMyBhID0gSG9yejMocG9zLC0xLjApOwogICAgdmVjMyBiID0gSG9yejUocG9zLCAwLjApOwogICAgdmVjMyBjID0gSG9yejMocG9zLCAxLjApOwogICAgCiAgICBmbG9hdCB3YSA9IFNjYW4ocG9zLC0xLjApOyAKICAgIGZsb2F0IHdiID0gU2Nhbihwb3MsIDAuMCk7CiAgICBmbG9hdCB3YyA9IFNjYW4ocG9zLCAxLjApOwogICAgCiAgICByZXR1cm4gYSp3YSArIGIqd2IgKyBjKndjOwp9CiAgCi8vIFNtYWxsIGJsb29tLgp2ZWMzIEJsb29tKHZlYzIgcG9zKQp7CiAgICB2ZWMzIGEgPSBIb3J6NShwb3MsLTIuMCk7CiAgICB2ZWMzIGIgPSBIb3J6Nyhwb3MsLTEuMCk7CiAgICB2ZWMzIGMgPSBIb3J6Nyhwb3MsIDAuMCk7CiAgICB2ZWMzIGQgPSBIb3J6Nyhwb3MsIDEuMCk7CiAgICB2ZWMzIGUgPSBIb3J6NShwb3MsIDIuMCk7CgogICAgZmxvYXQgd2EgPSBCbG9vbVNjYW4ocG9zLC0yLjApOwogICAgZmxvYXQgd2IgPSBCbG9vbVNjYW4ocG9zLC0xLjApOyAKICAgIGZsb2F0IHdjID0gQmxvb21TY2FuKHBvcywgMC4wKTsKICAgIGZsb2F0IHdkID0gQmxvb21TY2FuKHBvcywgMS4wKTsKICAgIGZsb2F0IHdlID0gQmxvb21TY2FuKHBvcywgMi4wKTsKCiAgICByZXR1cm4gYSp3YStiKndiK2Mqd2MrZCp3ZCtlKndlOwp9CiAgCi8vIERpc3RvcnRpb24gb2Ygc2NhbmxpbmVzLCBhbmQgZW5kIG9mIHNjcmVlbiBhbHBoYS4KdmVjMiBXYXJwKHZlYzIgcG9zKQp7CiAgICBwb3MgID0gcG9zKjIuMC0xLjA7ICAgIAogICAgcG9zICo9IHZlYzIoMS4wICsgKHBvcy55KnBvcy55KSp3YXJwWCwgMS4wICsgKHBvcy54KnBvcy54KSp3YXJwWSk7CiAgICAKICAgIHJldHVybiBwb3MqMC41ICsgMC41Owp9CiAgCi8vIFNoYWRvdyBtYXNrLgp2ZWMzIE1hc2sodmVjMiBwb3MpCnsKICAgIHZlYzMgbWFzayA9IHZlYzMobWFza0RhcmssIG1hc2tEYXJrLCBtYXNrRGFyayk7CiAgCiAgICAvLyBWZXJ5IGNvbXByZXNzZWQgVFYgc3R5bGUgc2hhZG93IG1hc2suCiAgICBpZiAoc2hhZG93TWFzayA9PSAxLjApIAogICAgewogICAgICAgIGZsb2F0IGxpbmUgPSBtYXNrTGlnaHQ7CiAgICAgICAgZmxvYXQgb2RkID0gMC4wOwogICAgICAgIAogICAgICAgIGlmIChmcmFjdChwb3MueCowLjE2NjY2NjY2NikgPCAwLjUpIG9kZCA9IDEuMDsKICAgICAgICBpZiAoZnJhY3QoKHBvcy55ICsgb2RkKSAqIDAuNSkgPCAwLjUpIGxpbmUgPSBtYXNrRGFyazsgIAogICAgICAgIAogICAgICAgIHBvcy54ID0gZnJhY3QocG9zLngqMC4zMzMzMzMzMzMpOwoKICAgICAgICBpZiAgICAgIChwb3MueCA8IDAuMzMzKSBtYXNrLnIgPSBtYXNrTGlnaHQ7CiAgICAgICAgZWxzZSBpZiAocG9zLnggPCAwLjY2NikgbWFzay5nID0gbWFza0xpZ2h0OwogICAgICAgIGVsc2UgICAgICAgICAgICAgICAgICAgIG1hc2suYiA9IG1hc2tMaWdodDsKICAgICAgICBtYXNrKj1saW5lOyAgCiAgICB9IAoKICAgIC8vIEFwZXJ0dXJlLWdyaWxsZS4KICAgIGVsc2UgaWYgKHNoYWRvd01hc2sgPT0gMi4wKSAKICAgIHsKICAgICAgICBwb3MueCA9IGZyYWN0KHBvcy54KjAuMzMzMzMzMzMzKTsKCiAgICAgICAgaWYgICAgICAocG9zLnggPCAwLjMzMykgbWFzay5yID0gbWFza0xpZ2h0OwogICAgICAgIGVsc2UgaWYgKHBvcy54IDwgMC42NjYpIG1hc2suZyA9IG1hc2tMaWdodDsKICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICBtYXNrLmIgPSBtYXNrTGlnaHQ7CiAgICB9IAoKICAgIC8vIFN0cmV0Y2hlZCBWR0Egc3R5bGUgc2hhZG93IG1hc2sgKHNhbWUgYXMgcHJpb3Igc2hhZGVycykuCiAgICBlbHNlIGlmIChzaGFkb3dNYXNrID09IDMuMCkgCiAgICB7CiAgICAgICAgcG9zLnggKz0gcG9zLnkqMy4wOwogICAgICAgIHBvcy54ICA9IGZyYWN0KHBvcy54KjAuMTY2NjY2NjY2KTsKCiAgICAgICAgaWYgICAgICAocG9zLnggPCAwLjMzMykgbWFzay5yID0gbWFza0xpZ2h0OwogICAgICAgIGVsc2UgaWYgKHBvcy54IDwgMC42NjYpIG1hc2suZyA9IG1hc2tMaWdodDsKICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICBtYXNrLmIgPSBtYXNrTGlnaHQ7CiAgICB9CgogICAgLy8gVkdBIHN0eWxlIHNoYWRvdyBtYXNrLgogICAgZWxzZSBpZiAoc2hhZG93TWFzayA9PSA0LjApIAogICAgewogICAgICAgIHBvcy54eSAgPSBmbG9vcihwb3MueHkqdmVjMigxLjAsIDAuNSkpOwogICAgICAgIHBvcy54ICArPSBwb3MueSozLjA7CiAgICAgICAgcG9zLnggICA9IGZyYWN0KHBvcy54KjAuMTY2NjY2NjY2KTsKCiAgICAgICAgaWYgICAgICAocG9zLnggPCAwLjMzMykgbWFzay5yID0gbWFza0xpZ2h0OwogICAgICAgIGVsc2UgaWYgKHBvcy54IDwgMC42NjYpIG1hc2suZyA9IG1hc2tMaWdodDsKICAgICAgICBlbHNlICAgICAgICAgICAgICAgICAgICBtYXNrLmIgPSBtYXNrTGlnaHQ7CiAgICB9CgogICAgcmV0dXJuIG1hc2s7Cn0KCnZvaWQgbWFpbigpCnsKICAgIHZlYzIgcG9zID0gV2FycChURVgwLnh5KihUZXh0dXJlU2l6ZS54eS9JbnB1dFNpemUueHkpKSooSW5wdXRTaXplLnh5L1RleHR1cmVTaXplLnh5KTsKICAgIHZlYzMgb3V0Q29sb3IgPSBUcmkocG9zKTsKCiNpZmRlZiBET19CTE9PTQogICAgLy9BZGQgQmxvb20KICAgIG91dENvbG9yLnJnYiArPSBCbG9vbShwb3MpKmJsb29tQW1vdW50OwojZW5kaWYKCiAgICBpZiAoc2hhZG93TWFzayA+IDAuMCkKICAgICAgICBvdXRDb2xvci5yZ2IgKj0gTWFzayhnbF9GcmFnQ29vcmQueHkgKiAxLjAwMDAwMSk7CiAgICAKI2lmZGVmIEdMX0VTICAgIC8qIFRPRE8vRklYTUUgLSBoYWNreSBjbGFtcCBmaXggKi8KICAgIHZlYzIgYm9yZGVydGVzdCA9IChwb3MpOwogICAgaWYgKCBib3JkZXJ0ZXN0LnggPiAwLjAwMDEgJiYgYm9yZGVydGVzdC54IDwgMC45OTk5ICYmIGJvcmRlcnRlc3QueSA+IDAuMDAwMSAmJiBib3JkZXJ0ZXN0LnkgPCAwLjk5OTkpCiAgICAgICAgb3V0Q29sb3IucmdiID0gb3V0Q29sb3IucmdiOwogICAgZWxzZQogICAgICAgIG91dENvbG9yLnJnYiA9IHZlYzMoMC4wKTsKI2VuZGlmCiAgICBGcmFnQ29sb3IgPSB2ZWM0KFRvU3JnYihvdXRDb2xvci5yZ2IpLCAxLjApOwp9IAojZW5kaWYK"
        }]
    },
    "crt-zfast": {
        shader: {
            type: "text",
            value: "shaders = 1\n\nshader0 = zfast_crt.glsl\nfilter_linear0 = true"
        },
        resources: [{
            name: "zfast_crt.glsl",
            type: "base64",
            value: "Ly9Gb3IgdGVzdGluZyBjb21waWxhdGlvbg0KLy8jZGVmaW5lIEZSQUdNRU5UDQovLyNkZWZpbmUgVkVSVEVYDQoNCi8vVGhpcyBjYW4ndCBiZSBhbiBvcHRpb24gd2l0aG91dCBzbG93aW5nIHRoZSBzaGFkZXIgZG93bg0KLy9Db21tZW50IHRoaXMgb3V0IGZvciBhIGNvYXJzZXIgMyBwaXhlbCBtYXNrLi4ud2hpY2ggaXMgY3VycmVudGx5IGJyb2tlbg0KLy9vbiBTTkVTIENsYXNzaWMgRWRpdGlvbiBkdWUgdG8gTWFsaSA0MDAgZ3B1IHByZWNpc2lvbg0KI2RlZmluZSBGSU5FTUFTSw0KLy9Tb21lIGRyaXZlcnMgZG9uJ3QgcmV0dXJuIGJsYWNrIHdpdGggdGV4dHVyZSBjb29yZGluYXRlcyBvdXQgb2YgYm91bmRzDQovL1NORVMgQ2xhc3NpYyBpcyB0b28gc2xvdyB0byBibGFjayB0aGVzZSBhcmVhcyBvdXQgd2hlbiB1c2luZyBmdWxsc2NyZWVuDQovL292ZXJsYXlzLiAgQnV0IHlvdSBjYW4gdW5jb21tZW50IHRoZSBiZWxvdyB0byBibGFjayB0aGVtIG91dCBpZiBuZWNlc3NhcnkNCi8vI2RlZmluZSBCTEFDS19PVVRfQk9SREVSDQoNCi8vIFBhcmFtZXRlciBsaW5lcyBnbyBoZXJlOg0KI3ByYWdtYSBwYXJhbWV0ZXIgQkxVUlNDQUxFWCAiQmx1ciBBbW91bnQgWC1BeGlzIiAwLjMwIDAuMCAxLjAgMC4wNQ0KI3ByYWdtYSBwYXJhbWV0ZXIgTE9XTFVNU0NBTiAiU2NhbmxpbmUgRGFya25lc3MgLSBMb3ciIDYuMCAwLjAgMTAuMCAwLjUNCiNwcmFnbWEgcGFyYW1ldGVyIEhJTFVNU0NBTiAiU2NhbmxpbmUgRGFya25lc3MgLSBIaWdoIiA4LjAgMC4wIDUwLjAgMS4wDQojcHJhZ21hIHBhcmFtZXRlciBCUklHSFRCT09TVCAiRGFyayBQaXhlbCBCcmlnaHRuZXNzIEJvb3N0IiAxLjI1IDAuNSAxLjUgMC4wNQ0KI3ByYWdtYSBwYXJhbWV0ZXIgTUFTS19EQVJLICJNYXNrIEVmZmVjdCBBbW91bnQiIDAuMjUgMC4wIDEuMCAwLjA1DQojcHJhZ21hIHBhcmFtZXRlciBNQVNLX0ZBREUgIk1hc2svU2NhbmxpbmUgRmFkZSIgMC44IDAuMCAxLjAgMC4wNQ0KDQojaWYgZGVmaW5lZChWRVJURVgpDQoNCiNpZiBfX1ZFUlNJT05fXyA+PSAxMzANCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgb3V0DQojZGVmaW5lIENPTVBBVF9BVFRSSUJVVEUgaW4NCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZQ0KI2Vsc2UNCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgdmFyeWluZyANCiNkZWZpbmUgQ09NUEFUX0FUVFJJQlVURSBhdHRyaWJ1dGUgDQojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUyRA0KI2VuZGlmDQoNCiNpZmRlZiBHTF9FUw0KI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OIG1lZGl1bXANCiNlbHNlDQojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04NCiNlbmRpZg0KDQpDT01QQVRfQVRUUklCVVRFIHZlYzQgVmVydGV4Q29vcmQ7DQpDT01QQVRfQVRUUklCVVRFIHZlYzQgQ09MT1I7DQpDT01QQVRfQVRUUklCVVRFIHZlYzQgVGV4Q29vcmQ7DQpDT01QQVRfVkFSWUlORyB2ZWM0IENPTDA7DQpDT01QQVRfVkFSWUlORyB2ZWM0IFRFWDA7DQpDT01QQVRfVkFSWUlORyBmbG9hdCBtYXNrRmFkZTsNCkNPTVBBVF9WQVJZSU5HIHZlYzIgaW52RGltczsNCg0KdmVjNCBfb1Bvc2l0aW9uMTsgDQp1bmlmb3JtIG1hdDQgTVZQTWF0cml4Ow0KdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZURpcmVjdGlvbjsNCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVDb3VudDsNCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIE91dHB1dFNpemU7DQp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBUZXh0dXJlU2l6ZTsNCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIElucHV0U2l6ZTsNCg0KLy8gY29tcGF0aWJpbGl0eSAjZGVmaW5lcw0KI2RlZmluZSB2VGV4Q29vcmQgVEVYMC54eQ0KI2RlZmluZSBTb3VyY2VTaXplIHZlYzQoVGV4dHVyZVNpemUsIDEuMCAvIFRleHR1cmVTaXplKSAvL2VpdGhlciBUZXh0dXJlU2l6ZSBvciBJbnB1dFNpemUNCiNkZWZpbmUgT3V0U2l6ZSB2ZWM0KE91dHB1dFNpemUsIDEuMCAvIE91dHB1dFNpemUpDQoNCiNpZmRlZiBQQVJBTUVURVJfVU5JRk9STQ0KLy8gQWxsIHBhcmFtZXRlciBmbG9hdHMgbmVlZCB0byBoYXZlIENPTVBBVF9QUkVDSVNJT04gaW4gZnJvbnQgb2YgdGhlbQ0KdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IEJMVVJTQ0FMRVg7DQovL3VuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBCTFVSU0NBTEVZOw0KdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IExPV0xVTVNDQU47DQp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgSElMVU1TQ0FOOw0KdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IEJSSUdIVEJPT1NUOw0KdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IE1BU0tfREFSSzsNCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBNQVNLX0ZBREU7DQojZWxzZQ0KI2RlZmluZSBCTFVSU0NBTEVYIDAuNDUNCi8vI2RlZmluZSBCTFVSU0NBTEVZIDAuMjANCiNkZWZpbmUgTE9XTFVNU0NBTiA1LjANCiNkZWZpbmUgSElMVU1TQ0FOIDEwLjANCiNkZWZpbmUgQlJJR0hUQk9PU1QgMS4yNQ0KI2RlZmluZSBNQVNLX0RBUksgMC4yNQ0KI2RlZmluZSBNQVNLX0ZBREUgMC44DQojZW5kaWYNCg0Kdm9pZCBtYWluKCkNCnsNCiAgICBnbF9Qb3NpdGlvbiA9IE1WUE1hdHJpeCAqIFZlcnRleENvb3JkOw0KCQ0KCVRFWDAueHkgPSBUZXhDb29yZC54eSoxLjAwMDE7DQoJbWFza0ZhZGUgPSAwLjMzMzMqTUFTS19GQURFOw0KCWludkRpbXMgPSAxLjAvVGV4dHVyZVNpemUueHk7DQp9DQoNCiNlbGlmIGRlZmluZWQoRlJBR01FTlQpDQoNCiNpZmRlZiBHTF9FUw0KI2lmZGVmIEdMX0ZSQUdNRU5UX1BSRUNJU0lPTl9ISUdIDQpwcmVjaXNpb24gaGlnaHAgZmxvYXQ7DQojZWxzZQ0KcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7DQojZW5kaWYNCiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wDQojZWxzZQ0KI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9ODQojZW5kaWYNCg0KI2lmIF9fVkVSU0lPTl9fID49IDEzMA0KI2RlZmluZSBDT01QQVRfVkFSWUlORyBpbg0KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlDQpvdXQgQ09NUEFUX1BSRUNJU0lPTiB2ZWM0IEZyYWdDb2xvcjsNCiNlbHNlDQojZGVmaW5lIENPTVBBVF9WQVJZSU5HIHZhcnlpbmcNCiNkZWZpbmUgRnJhZ0NvbG9yIGdsX0ZyYWdDb2xvcg0KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlMkQNCiNlbmRpZg0KDQp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lRGlyZWN0aW9uOw0KdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZUNvdW50Ow0KdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgT3V0cHV0U2l6ZTsNCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIFRleHR1cmVTaXplOw0KdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgSW5wdXRTaXplOw0KdW5pZm9ybSBzYW1wbGVyMkQgVGV4dHVyZTsNCkNPTVBBVF9WQVJZSU5HIHZlYzQgVEVYMDsNCkNPTVBBVF9WQVJZSU5HIGZsb2F0IG1hc2tGYWRlOw0KQ09NUEFUX1ZBUllJTkcgdmVjMiBpbnZEaW1zOw0KDQovLyBjb21wYXRpYmlsaXR5ICNkZWZpbmVzDQojZGVmaW5lIFNvdXJjZSBUZXh0dXJlDQojZGVmaW5lIHZUZXhDb29yZCBURVgwLnh5DQojZGVmaW5lIHRleHR1cmUoYywgZCkgQ09NUEFUX1RFWFRVUkUoYywgZCkNCiNkZWZpbmUgU291cmNlU2l6ZSB2ZWM0KFRleHR1cmVTaXplLCAxLjAgLyBUZXh0dXJlU2l6ZSkgLy9laXRoZXIgVGV4dHVyZVNpemUgb3IgSW5wdXRTaXplDQojZGVmaW5lIE91dFNpemUgdmVjNChPdXRwdXRTaXplLCAxLjAgLyBPdXRwdXRTaXplKQ0KDQojaWZkZWYgUEFSQU1FVEVSX1VOSUZPUk0NCi8vIEFsbCBwYXJhbWV0ZXIgZmxvYXRzIG5lZWQgdG8gaGF2ZSBDT01QQVRfUFJFQ0lTSU9OIGluIGZyb250IG9mIHRoZW0NCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBCTFVSU0NBTEVYOw0KLy91bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgQkxVUlNDQUxFWTsNCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBMT1dMVU1TQ0FOOw0KdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGZsb2F0IEhJTFVNU0NBTjsNCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBCUklHSFRCT09TVDsNCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBNQVNLX0RBUks7DQp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgTUFTS19GQURFOw0KI2Vsc2UNCiNkZWZpbmUgQkxVUlNDQUxFWCAwLjQ1DQovLyNkZWZpbmUgQkxVUlNDQUxFWSAwLjIwDQojZGVmaW5lIExPV0xVTVNDQU4gNS4wDQojZGVmaW5lIEhJTFVNU0NBTiAxMC4wDQojZGVmaW5lIEJSSUdIVEJPT1NUIDEuMjUNCiNkZWZpbmUgTUFTS19EQVJLIDAuMjUNCiNkZWZpbmUgTUFTS19GQURFIDAuOA0KI2VuZGlmDQoNCnZvaWQgbWFpbigpDQp7DQoNCgkvL1RoaXMgaXMganVzdCBsaWtlICJRdWlsZXogU2NhbGluZyIgYnV0IHNoYXJwZXINCglDT01QQVRfUFJFQ0lTSU9OIHZlYzIgcCA9IHZUZXhDb29yZCAqIFRleHR1cmVTaXplOw0KCUNPTVBBVF9QUkVDSVNJT04gdmVjMiBpID0gZmxvb3IocCkgKyAwLjUwOw0KCUNPTVBBVF9QUkVDSVNJT04gdmVjMiBmID0gcCAtIGk7DQoJcCA9IChpICsgNC4wKmYqZipmKSppbnZEaW1zOw0KCXAueCA9IG1peCggcC54ICwgdlRleENvb3JkLngsIEJMVVJTQ0FMRVgpOw0KCUNPTVBBVF9QUkVDSVNJT04gZmxvYXQgWSA9IGYueSpmLnk7DQoJQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBZWSA9IFkqWTsNCiNkZWZpbmUgcmF0aW8gU291cmNlU2l6ZS54L0lucHV0U2l6ZS54CQ0KI2lmIGRlZmluZWQoRklORU1BU0spIA0KCUNPTVBBVF9QUkVDSVNJT04gZmxvYXQgd2hpY2htYXNrID0gZmxvb3IodlRleENvb3JkLngqT3V0cHV0U2l6ZS54KnJhdGlvKSotMC41Ow0KCUNPTVBBVF9QUkVDSVNJT04gZmxvYXQgbWFzayA9IDEuMCArIGZsb2F0KGZyYWN0KHdoaWNobWFzaykgPCAwLjUpICogLU1BU0tfREFSSzsNCiNlbHNlDQoJQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCB3aGljaG1hc2sgPSBmbG9vcih2VGV4Q29vcmQueCpPdXRwdXRTaXplLngqcmF0aW8pKi0wLjMzMzM7DQoJQ09NUEFUX1BSRUNJU0lPTiBmbG9hdCBtYXNrID0gMS4wICsgZmxvYXQoZnJhY3Qod2hpY2htYXNrKSA8IDAuMzMzMykgKiAtTUFTS19EQVJLOw0KI2VuZGlmDQoJQ09NUEFUX1BSRUNJU0lPTiB2ZWMzIGNvbG91ciA9IENPTVBBVF9URVhUVVJFKFNvdXJjZSwgcCkucmdiOw0KCQ0KCUNPTVBBVF9QUkVDSVNJT04gZmxvYXQgc2NhbkxpbmVXZWlnaHQgPSAoQlJJR0hUQk9PU1QgLSBMT1dMVU1TQ0FOKihZIC0gMi4wNSpZWSkpOw0KCUNPTVBBVF9QUkVDSVNJT04gZmxvYXQgc2NhbkxpbmVXZWlnaHRCID0gMS4wIC0gSElMVU1TQ0FOKihZWS0yLjgqWVkqWSk7CQ0KCQ0KI2lmIGRlZmluZWQoQkxBQ0tfT1VUX0JPUkRFUikNCgljb2xvdXIucmdiKj1mbG9hdCh0Yy54ID4gMC4wKSpmbG9hdCh0Yy55ID4gMC4wKTsgLy93aHkgZG9lc24ndCB0aGUgZHJpdmVyIGRvIHRoZSByaWdodCB0aGluZz8NCiNlbmRpZg0KDQoJRnJhZ0NvbG9yLnJnYmEgPSB2ZWM0KGNvbG91ci5yZ2IqbWl4KHNjYW5MaW5lV2VpZ2h0Km1hc2ssIHNjYW5MaW5lV2VpZ2h0QiwgZG90KGNvbG91ci5yZ2IsdmVjMyhtYXNrRmFkZSkpKSwxLjApOw0KCQ0KfSANCiNlbmRpZg0K"
        }]
    },
    "crt-yeetron": {
        shader: {
            type: "text",
            value: "shaders = 1\n\nshader0 = yeetron.glsl\nfilter_linear0 = false\n"
        },
        resources: [{
            name: "yeetron.glsl",
            type: "base64",
            value: "Ly8gcG9ydGVkIGZyb20gUmVTaGFkZQoKI2lmIGRlZmluZWQoVkVSVEVYKQoKI2lmIF9fVkVSU0lPTl9fID49IDEzMAojZGVmaW5lIENPTVBBVF9WQVJZSU5HIG91dAojZGVmaW5lIENPTVBBVF9BVFRSSUJVVEUgaW4KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgdmFyeWluZyAKI2RlZmluZSBDT01QQVRfQVRUUklCVVRFIGF0dHJpYnV0ZSAKI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlMkQKI2VuZGlmCgojaWZkZWYgR0xfRVMKI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OIG1lZGl1bXAKI2Vsc2UKI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OCiNlbmRpZgoKQ09NUEFUX0FUVFJJQlVURSB2ZWM0IFZlcnRleENvb3JkOwpDT01QQVRfQVRUUklCVVRFIHZlYzQgQ09MT1I7CkNPTVBBVF9BVFRSSUJVVEUgdmVjNCBUZXhDb29yZDsKQ09NUEFUX1ZBUllJTkcgdmVjNCBDT0wwOwpDT01QQVRfVkFSWUlORyB2ZWM0IFRFWDA7Cgp2ZWM0IF9vUG9zaXRpb24xOyAKdW5pZm9ybSBtYXQ0IE1WUE1hdHJpeDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZURpcmVjdGlvbjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZUNvdW50Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBPdXRwdXRTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBUZXh0dXJlU2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgSW5wdXRTaXplOwoKLy8gY29tcGF0aWJpbGl0eSAjZGVmaW5lcwojZGVmaW5lIHZUZXhDb29yZCBURVgwLnh5CiNkZWZpbmUgU291cmNlU2l6ZSB2ZWM0KFRleHR1cmVTaXplLCAxLjAgLyBUZXh0dXJlU2l6ZSkgLy9laXRoZXIgVGV4dHVyZVNpemUgb3IgSW5wdXRTaXplCiNkZWZpbmUgT3V0U2l6ZSB2ZWM0KE91dHB1dFNpemUsIDEuMCAvIE91dHB1dFNpemUpCgp2b2lkIG1haW4oKQp7CiAgICBnbF9Qb3NpdGlvbiA9IE1WUE1hdHJpeCAqIFZlcnRleENvb3JkOwogICAgVEVYMC54eSA9IFRleENvb3JkLnh5Owp9CgojZWxpZiBkZWZpbmVkKEZSQUdNRU5UKQoKI2lmZGVmIEdMX0VTCiNpZmRlZiBHTF9GUkFHTUVOVF9QUkVDSVNJT05fSElHSApwcmVjaXNpb24gaGlnaHAgZmxvYXQ7CiNlbHNlCnByZWNpc2lvbiBtZWRpdW1wIGZsb2F0OwojZW5kaWYKI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OIG1lZGl1bXAKI2Vsc2UKI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OCiNlbmRpZgoKI2lmIF9fVkVSU0lPTl9fID49IDEzMAojZGVmaW5lIENPTVBBVF9WQVJZSU5HIGluCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZQpvdXQgQ09NUEFUX1BSRUNJU0lPTiB2ZWM0IEZyYWdDb2xvcjsKI2Vsc2UKI2RlZmluZSBDT01QQVRfVkFSWUlORyB2YXJ5aW5nCiNkZWZpbmUgRnJhZ0NvbG9yIGdsX0ZyYWdDb2xvcgojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUyRAojZW5kaWYKCnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVEaXJlY3Rpb247CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVDb3VudDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgT3V0cHV0U2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgVGV4dHVyZVNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIElucHV0U2l6ZTsKdW5pZm9ybSBzYW1wbGVyMkQgVGV4dHVyZTsKQ09NUEFUX1ZBUllJTkcgdmVjNCBURVgwOwoKLy8gY29tcGF0aWJpbGl0eSAjZGVmaW5lcwojZGVmaW5lIFNvdXJjZSBUZXh0dXJlCiNkZWZpbmUgdlRleENvb3JkIFRFWDAueHkKCiNkZWZpbmUgU291cmNlU2l6ZSB2ZWM0KFRleHR1cmVTaXplLCAxLjAgLyBUZXh0dXJlU2l6ZSkgLy9laXRoZXIgVGV4dHVyZVNpemUgb3IgSW5wdXRTaXplCiNkZWZpbmUgT3V0U2l6ZSB2ZWM0KE91dHB1dFNpemUsIDEuMCAvIE91dHB1dFNpemUpCgp2ZWM0IGNtcCh2ZWM0IHNyYzAsIHZlYzQgc3JjMSwgdmVjNCBzcmMyKSB7CglyZXR1cm4gdmVjNCgKCQlzcmMwLnggPj0gMC4wID8gc3JjMS54IDogc3JjMi54LAoJCXNyYzAueSA+PSAwLjAgPyBzcmMxLnkgOiBzcmMyLnksCgkJc3JjMC56ID49IDAuMCA/IHNyYzEueiA6IHNyYzIueiwKCQlzcmMwLncgPj0gMC4wID8gc3JjMS53IDogc3JjMi53CgkpOwp9CgojZGVmaW5lIHNhdHVyYXRlKGMpIGNsYW1wKGMsIDAuMCwgMS4wKQoKdm9pZCBtYWluKCkKewoJLy9EZWNsYXJlIHBhcmFtZXRlcnMKCS8vcGl4ZWxTaXplCgl2ZWM0IGMwID0gSW5wdXRTaXplLnh5eXk7CgkvL3RleHR1cmVTaXplCgl2ZWM0IGMxID0gU291cmNlU2l6ZTsKCS8vdmlld1NpemUKCXZlYzQgYzIgPSBPdXRTaXplOwogICAKCS8vRGVjbGFyZSBjb25zdGFudHMKCWNvbnN0IHZlYzQgYzMgPSB2ZWM0KDEuNSwgMC44MDAwMDAwMTIsIDEuMjUsIDAuNzUpOwoJY29uc3QgdmVjNCBjNCA9IHZlYzQoNi4yODMxODU0OCwgLTMuMTQxNTkyNzQsIDAuMjUsIC0wLjI1KTsKCWNvbnN0IHZlYzQgYzUgPSB2ZWM0KDEuLCAwLjUsIDcyMC4sIDMuKTsKCWNvbnN0IHZlYzQgYzYgPSB2ZWM0KDAuMTY2NjY2NjcyLCAtMC4zMzMwMDAwMDQsIC0wLjY2NjAwMDAwOSwgMC44OTk5OTk5NzYpOwoJY29uc3QgdmVjNCBjNyA9IHZlYzQoMC44OTk5OTk5NzYsIDEuMTAwMDAwMDIsIDAuLCAwLik7Cgljb25zdCB2ZWM0IGM4ID0gdmVjNCgtMC41LCAtMC4yNSwgMi4sIDAuNSk7CgoJLy9EZWNsYXJlIHJlZ2lzdGVycwoJdmVjNCByMCwgcjEsIHIyLCByMywgcjQsIHI1LCByNiwgcjcsIHI4LCByOTsKCgkvL0NvZGUgc3RhcnRzIGhlcmUKCXZlYzQgdjAgPSB2VGV4Q29vcmQueHl5eTsKCS8vZGNsXzJkIHMwCglyMC54ID0gMS4wIC8gYzAueDsKCXIwLnkgPSAxLjAgLyBjMC55OwoJcjAueHkgPSAocjAgKiBjMSkueHk7CglyMC54eSA9IChyMCAqIHYwKS54eTsKCXIwLnh5ID0gKHIwICogYzIpLnh5OwoJcjAuencgPSBmcmFjdChyMC54eXh5KS56dzsKCXIwLnh5ID0gKC1yMC56d3p3ICsgcjApLnh5OwoJcjAueHkgPSAocjAgKyBjOC53d3d3KS54eTsKCXIwLnggPSByMC55ICogYzUudyArIHIwLng7CglyMC54ID0gcjAueCAqIGM2Lng7CglyMC54ID0gZnJhY3QocjAueCk7CglyMC54eSA9IChyMC54eHh4ICsgYzYueXp6dykueHk7CglyMS55eiA9IChyMC55ID49IDAuMCA/IGM3Lnh4eXcgOiBjNy54eXh3KS55ejsKCXIxLnggPSBjNi53OwoJcjAueHl6ID0gKHIwLnggPj0gMC4wID8gcjEgOiBjNy55eHh3KS54eXo7CglyMS54eSA9IChjMSAqIHYwKS54eTsKCXIwLncgPSByMS55ICogYzgudyArIGM4Lnc7CglyMC53ID0gZnJhY3QocjAudyk7CglyMC53ID0gcjAudyAqIGM0LnggKyBjNC55OwoJcjIueSA9IHNpbihyMC53KTsKCXIxLnp3ID0gKGFicyhyMikueXl5eSArIGM0KS56dzsKCXIxLnogPSBjbGFtcChyMS56LCAwLjAsIDEuMCk7CglyMC53ID0gcjEudyA+PSAwLjAgPyByMS56IDogYzgudzsKCXIyID0gZnJhY3QocjEueHl4eSk7CglyMS54eSA9IChyMSArIC1yMi56d3p3KS54eTsKCXIyID0gcjIgKyBjOC54eHl5OwoJcjEuencgPSAocjEueHl4eSArIGM4Lnd3d3cpLnp3OwoJcjEuencgPSAodjAueHl4eSAqIC1jMS54eXh5ICsgcjEpLnp3OwoJcjEudyA9IHIxLncgKyByMS53OwoJcjEueiA9IHIxLnogKiBjOC53OwoJcjEueiA9IC1hYnMocjEpLnogKyBjMy54OwoJcjMueCA9IG1heChjMy55LCByMS56KTsKCXI0LnggPSBtaW4ocjMueCwgYzMueik7CglyMS56dyA9ICgtYWJzKHIxKS53d3d3ICsgYzMpLnp3OwoJcjEueiA9IGNsYW1wKHIxLnosIDAuMCwgMS4wKTsKCXIxLnogPSByMS53ID49IDAuMCA/IHIxLnogOiBjOC53OwoJcjQueSA9IHIwLncgKyByMS56OwoJcjAudyA9IHIwLncgKiByNC54OwoJcjEueiA9IHIxLnogKiByNC54OwoJcjMueHkgPSAocjQgKiBjNSkueHk7CglyMS53ID0gcjMueSAqIHIzLng7CglyMi56ID0gY21wKHIyLCByMi54eXh5LCBjOC55eXl5KS56OwoJcjMueHkgPSBtYXgoYzgueXl5eSwgLXIyLnp3encpLnh5OwoJcjIueHkgPSAocjIgKyByMykueHk7CglyMS54eSA9IChyMiAqIGM4Lnp6enogKyByMSkueHk7CglyMS54eSA9IChyMSArIGM4Lnd3d3cpLnh5OwoJcjIueCA9IDEuMCAvIGMxLng7CglyMi55ID0gMS4wIC8gYzEueTsKCXIxLnh5ID0gKHIxICogcjIpLnh5OwoJcjIgPSBDT01QQVRfVEVYVFVSRShTb3VyY2UsIHIxLnh5KTsKCXIzLnggPSByMC53ICogcjIueDsKCXIzLnl6ID0gKHIxLnh6d3cgKiByMikueXo7CglGcmFnQ29sb3IudyA9IHIyLnc7CglyMC54eXogPSAocjAgKiByMykueHl6OwoJcjEueiA9IGM1Lno7CglyMC53ID0gcjEueiArIC1jMi55OwoJRnJhZ0NvbG9yLnh5eiA9IChyMC53ID49IDAuMCA/IHIzIDogcjApLnh5ejsKfSAKI2VuZGlmCg=="
        }]
    },
    bicubic: {
        shader: {
            type: "text",
            value: "shaders = 1\n\nshader0 = bicubic.glsl\nfilter_linear0 = false"
        },
        resources: [{
            name: "bicubic.glsl",
            type: "base64",
            value: "Ly8gRGVmYXVsdCB0byBNaXRjaGVsLU5ldHJhdmFsaSBjb2VmZmljaWVudHMgZm9yIGJlc3QgcHN5Y2hvdmlzdWFsIHJlc3VsdAovLyBiaWN1YmljLXNoYXJwIGlzIEIgPSAwLjEgYW5kIEMgPSAwLjUKLy8gYmljdWJpYy1zaGFycGVyIGlzIEIgPSAwLjAgYW5kIEMgPSAwLjc1CiNwcmFnbWEgcGFyYW1ldGVyIEIgIkJpY3ViaWMgQ29lZmYgQiIgMC4zMyAwLjAgMS4wIDAuMDEKI3ByYWdtYSBwYXJhbWV0ZXIgQyAiQmljdWJpYyBDb2VmZiBDIiAwLjMzIDAuMCAxLjAgMC4wMQoKI2lmIGRlZmluZWQoVkVSVEVYKQoKI2lmIF9fVkVSU0lPTl9fID49IDEzMAojZGVmaW5lIENPTVBBVF9WQVJZSU5HIG91dAojZGVmaW5lIENPTVBBVF9BVFRSSUJVVEUgaW4KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgdmFyeWluZyAKI2RlZmluZSBDT01QQVRfQVRUUklCVVRFIGF0dHJpYnV0ZSAKI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlMkQKI2VuZGlmCgojaWZkZWYgR0xfRVMKI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OIG1lZGl1bXAKI2Vsc2UKI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OCiNlbmRpZgoKQ09NUEFUX0FUVFJJQlVURSB2ZWM0IFZlcnRleENvb3JkOwpDT01QQVRfQVRUUklCVVRFIHZlYzQgVGV4Q29vcmQ7CkNPTVBBVF9WQVJZSU5HIHZlYzQgVEVYMDsKCnVuaWZvcm0gbWF0NCBNVlBNYXRyaXg7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVEaXJlY3Rpb247CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVDb3VudDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgT3V0cHV0U2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgVGV4dHVyZVNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIElucHV0U2l6ZTsKCi8vIGNvbXBhdGliaWxpdHkgI2RlZmluZXMKI2RlZmluZSB2VGV4Q29vcmQgVEVYMC54eQojZGVmaW5lIFNvdXJjZVNpemUgdmVjNChUZXh0dXJlU2l6ZSwgMS4wIC8gVGV4dHVyZVNpemUpIC8vZWl0aGVyIFRleHR1cmVTaXplIG9yIElucHV0U2l6ZQojZGVmaW5lIE91dFNpemUgdmVjNChPdXRwdXRTaXplLCAxLjAgLyBPdXRwdXRTaXplKQoKdm9pZCBtYWluKCkKewogICBnbF9Qb3NpdGlvbiA9IE1WUE1hdHJpeCAqIFZlcnRleENvb3JkOwogICBURVgwLnh5ID0gVGV4Q29vcmQueHk7Cn0KCiNlbGlmIGRlZmluZWQoRlJBR01FTlQpCgojaWZkZWYgR0xfRVMKI2lmZGVmIEdMX0ZSQUdNRU5UX1BSRUNJU0lPTl9ISUdICnByZWNpc2lvbiBoaWdocCBmbG9hdDsKI2Vsc2UKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CiNlbmRpZgojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04gbWVkaXVtcAojZWxzZQojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04KI2VuZGlmCgojaWYgX19WRVJTSU9OX18gPj0gMTMwCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgaW4KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlCm91dCBDT01QQVRfUFJFQ0lTSU9OIHZlYzQgRnJhZ0NvbG9yOwojZWxzZQojZGVmaW5lIENPTVBBVF9WQVJZSU5HIHZhcnlpbmcKI2RlZmluZSBGcmFnQ29sb3IgZ2xfRnJhZ0NvbG9yCiNkZWZpbmUgQ09NUEFUX1RFWFRVUkUgdGV4dHVyZTJECiNlbmRpZgoKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZURpcmVjdGlvbjsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIGludCBGcmFtZUNvdW50Owp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBPdXRwdXRTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBUZXh0dXJlU2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgSW5wdXRTaXplOwp1bmlmb3JtIHNhbXBsZXIyRCBUZXh0dXJlOwpDT01QQVRfVkFSWUlORyB2ZWM0IFRFWDA7CgovLyBjb21wYXRpYmlsaXR5ICNkZWZpbmVzCiNkZWZpbmUgU291cmNlIFRleHR1cmUKI2RlZmluZSB2VGV4Q29vcmQgVEVYMC54eQoKI2RlZmluZSBTb3VyY2VTaXplIHZlYzQoVGV4dHVyZVNpemUsIDEuMCAvIFRleHR1cmVTaXplKSAvL2VpdGhlciBUZXh0dXJlU2l6ZSBvciBJbnB1dFNpemUKI2RlZmluZSBPdXRTaXplIHZlYzQoT3V0cHV0U2l6ZSwgMS4wIC8gT3V0cHV0U2l6ZSkKCiNpZmRlZiBQQVJBTUVURVJfVU5JRk9STQp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gZmxvYXQgQiwgQzsKI2Vsc2UKI2RlZmluZSBCIDAuMzMzMwojZGVmaW5lIEMgMC4zMzMzCiNlbmRpZgoKZmxvYXQgd2VpZ2h0KGZsb2F0IHgpCnsKCWZsb2F0IGF4ID0gYWJzKHgpOwoKCWlmIChheCA8IDEuMCkKCXsKCQlyZXR1cm4KCQkJKAoJCQkgcG93KHgsIDIuMCkgKiAoKDEyLjAgLSA5LjAgKiBCIC0gNi4wICogQykgKiBheCArICgtMTguMCArIDEyLjAgKiBCICsgNi4wICogQykpICsKCQkJICg2LjAgLSAyLjAgKiBCKQoJCQkpIC8gNi4wOwoJfQoJZWxzZSBpZiAoKGF4ID49IDEuMCkgJiYgKGF4IDwgMi4wKSkKCXsKCQlyZXR1cm4KCQkJKAoJCQkgcG93KHgsIDIuMCkgKiAoKC1CIC0gNi4wICogQykgKiBheCArICg2LjAgKiBCICsgMzAuMCAqIEMpKSArCgkJCSAoLTEyLjAgKiBCIC0gNDguMCAqIEMpICogYXggKyAoOC4wICogQiArIDI0LjAgKiBDKQoJCQkpIC8gNi4wOwoJfQoJZWxzZQoJewoJCXJldHVybiAwLjA7Cgl9Cn0KCQp2ZWM0IHdlaWdodDQoZmxvYXQgeCkKewoJcmV0dXJuIHZlYzQoCgkJCXdlaWdodCh4IC0gMi4wKSwKCQkJd2VpZ2h0KHggLSAxLjApLAoJCQl3ZWlnaHQoeCksCgkJCXdlaWdodCh4ICsgMS4wKSk7Cn0KCnZlYzMgcGl4ZWwoZmxvYXQgeHBvcywgZmxvYXQgeXBvcywgc2FtcGxlcjJEIHRleCkKewoJcmV0dXJuIENPTVBBVF9URVhUVVJFKHRleCwgdmVjMih4cG9zLCB5cG9zKSkucmdiOwp9Cgp2ZWMzIGxpbmVfcnVuKGZsb2F0IHlwb3MsIHZlYzQgeHBvcywgdmVjNCBsaW5ldGFwcywgc2FtcGxlcjJEIHRleCkKewoJcmV0dXJuCgkJcGl4ZWwoeHBvcy5yLCB5cG9zLCB0ZXgpICogbGluZXRhcHMuciArCgkJcGl4ZWwoeHBvcy5nLCB5cG9zLCB0ZXgpICogbGluZXRhcHMuZyArCgkJcGl4ZWwoeHBvcy5iLCB5cG9zLCB0ZXgpICogbGluZXRhcHMuYiArCgkJcGl4ZWwoeHBvcy5hLCB5cG9zLCB0ZXgpICogbGluZXRhcHMuYTsKfQoKdm9pZCBtYWluKCkKewogICAgICAgIHZlYzIgc3RlcHh5ID0gdmVjMigxLjAvU291cmNlU2l6ZS54LCAxLjAvU291cmNlU2l6ZS55KTsKICAgICAgICB2ZWMyIHBvcyA9IHZUZXhDb29yZC54eSArIHN0ZXB4eSAqIDAuNTsKICAgICAgICB2ZWMyIGYgPSBmcmFjdChwb3MgLyBzdGVweHkpOwoJCQoJdmVjNCBsaW5ldGFwcyAgID0gd2VpZ2h0NCgxLjAgLSBmLngpOwoJdmVjNCBjb2x1bW50YXBzID0gd2VpZ2h0NCgxLjAgLSBmLnkpOwoKCS8vbWFrZSBzdXJlIGFsbCB0YXBzIGFkZGVkIHRvZ2V0aGVyIGlzIGV4YWN0bHkgMS4wLCBvdGhlcndpc2Ugc29tZSAodmVyeSBzbWFsbCkgZGlzdG9ydGlvbiBjYW4gb2NjdXIKCWxpbmV0YXBzIC89IGxpbmV0YXBzLnIgKyBsaW5ldGFwcy5nICsgbGluZXRhcHMuYiArIGxpbmV0YXBzLmE7Cgljb2x1bW50YXBzIC89IGNvbHVtbnRhcHMuciArIGNvbHVtbnRhcHMuZyArIGNvbHVtbnRhcHMuYiArIGNvbHVtbnRhcHMuYTsKCgl2ZWMyIHh5c3RhcnQgPSAoLTEuNSAtIGYpICogc3RlcHh5ICsgcG9zOwoJdmVjNCB4cG9zID0gdmVjNCh4eXN0YXJ0LngsIHh5c3RhcnQueCArIHN0ZXB4eS54LCB4eXN0YXJ0LnggKyBzdGVweHkueCAqIDIuMCwgeHlzdGFydC54ICsgc3RlcHh5LnggKiAzLjApOwoKCi8vIGZpbmFsIHN1bSBhbmQgd2VpZ2h0IG5vcm1hbGl6YXRpb24KICAgdmVjNCBmaW5hbCA9IHZlYzQobGluZV9ydW4oeHlzdGFydC55ICAgICAgICAgICAgICAgICAsIHhwb3MsIGxpbmV0YXBzLCBTb3VyY2UpICogY29sdW1udGFwcy5yICsKICAgICAgICAgICAgICAgICAgICAgIGxpbmVfcnVuKHh5c3RhcnQueSArIHN0ZXB4eS55ICAgICAgLCB4cG9zLCBsaW5ldGFwcywgU291cmNlKSAqIGNvbHVtbnRhcHMuZyArCiAgICAgICAgICAgICAgICAgICAgICBsaW5lX3J1bih4eXN0YXJ0LnkgKyBzdGVweHkueSAqIDIuMCwgeHBvcywgbGluZXRhcHMsIFNvdXJjZSkgKiBjb2x1bW50YXBzLmIgKwogICAgICAgICAgICAgICAgICAgICAgbGluZV9ydW4oeHlzdGFydC55ICsgc3RlcHh5LnkgKiAzLjAsIHhwb3MsIGxpbmV0YXBzLCBTb3VyY2UpICogY29sdW1udGFwcy5hLDEpOwoKICAgRnJhZ0NvbG9yID0gZmluYWw7Cn0gCiNlbmRpZgo=\n"
        }]
    },
    "mix-frames": {
        shader: {
            type: "text",
            value: 'shaders = "1"\n\nshader0 = "mix_frames.glsl"\nfilter_linear0 = "false"\n'
        },
        resources: [{
            name: "mix_frames.glsl",
            type: "base64",
            value: "LyoKCW1peF9mcmFtZXMgLSBwZXJmb3JtcyA1MDo1MCBibGVuZGluZyBiZXR3ZWVuIHRoZSBjdXJyZW50IGFuZCBwcmV2aW91cwoJZnJhbWVzLgoJCglBdXRob3I6IGpkZ2xlYXZlcgoJCglUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTsgeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeSBpdAoJdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBhcyBwdWJsaXNoZWQgYnkgdGhlIEZyZWUKCVNvZnR3YXJlIEZvdW5kYXRpb247IGVpdGhlciB2ZXJzaW9uIDIgb2YgdGhlIExpY2Vuc2UsIG9yIChhdCB5b3VyIG9wdGlvbikKCWFueSBsYXRlciB2ZXJzaW9uLgoqLwoKI2lmIGRlZmluZWQoVkVSVEVYKQoKI2lmIF9fVkVSU0lPTl9fID49IDEzMAojZGVmaW5lIENPTVBBVF9WQVJZSU5HIG91dAojZGVmaW5lIENPTVBBVF9BVFRSSUJVVEUgaW4KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlCiNlbHNlCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgdmFyeWluZyAKI2RlZmluZSBDT01QQVRfQVRUUklCVVRFIGF0dHJpYnV0ZSAKI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlMkQKI2VuZGlmCgojaWZkZWYgR0xfRVMKI2lmZGVmIEdMX0ZSQUdNRU5UX1BSRUNJU0lPTl9ISUdICiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBoaWdocAojZWxzZQojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04gbWVkaXVtcAojZW5kaWYKI2Vsc2UKI2RlZmluZSBDT01QQVRfUFJFQ0lTSU9OCiNlbmRpZgoKLyogQ09NUEFUSUJJTElUWQogICAtIEdMU0wgY29tcGlsZXJzCiovCgpDT01QQVRfQVRUUklCVVRFIENPTVBBVF9QUkVDSVNJT04gdmVjNCBWZXJ0ZXhDb29yZDsKQ09NUEFUX0FUVFJJQlVURSBDT01QQVRfUFJFQ0lTSU9OIHZlYzQgQ09MT1I7CkNPTVBBVF9BVFRSSUJVVEUgQ09NUEFUX1BSRUNJU0lPTiB2ZWM0IFRleENvb3JkOwpDT01QQVRfVkFSWUlORyBDT01QQVRfUFJFQ0lTSU9OIHZlYzQgQ09MMDsKQ09NUEFUX1ZBUllJTkcgQ09NUEFUX1BSRUNJU0lPTiB2ZWM0IFRFWDA7CgpDT01QQVRfUFJFQ0lTSU9OIHZlYzQgX29Qb3NpdGlvbjE7IAp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gbWF0NCBNVlBNYXRyaXg7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVEaXJlY3Rpb247CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiBpbnQgRnJhbWVDb3VudDsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgT3V0cHV0U2l6ZTsKdW5pZm9ybSBDT01QQVRfUFJFQ0lTSU9OIHZlYzIgVGV4dHVyZVNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIElucHV0U2l6ZTsKCnZvaWQgbWFpbigpCnsKCVRFWDAgPSBUZXhDb29yZCAqIDEuMDAwMTsKCWdsX1Bvc2l0aW9uID0gTVZQTWF0cml4ICogVmVydGV4Q29vcmQ7Cn0KCiNlbGlmIGRlZmluZWQoRlJBR01FTlQpCgojaWYgX19WRVJTSU9OX18gPj0gMTMwCiNkZWZpbmUgQ09NUEFUX1ZBUllJTkcgaW4KI2RlZmluZSBDT01QQVRfVEVYVFVSRSB0ZXh0dXJlCm91dCB2ZWM0IEZyYWdDb2xvcjsKI2Vsc2UKI2RlZmluZSBDT01QQVRfVkFSWUlORyB2YXJ5aW5nCiNkZWZpbmUgRnJhZ0NvbG9yIGdsX0ZyYWdDb2xvcgojZGVmaW5lIENPTVBBVF9URVhUVVJFIHRleHR1cmUyRAojZW5kaWYKCiNpZmRlZiBHTF9FUwojaWZkZWYgR0xfRlJBR01FTlRfUFJFQ0lTSU9OX0hJR0gKcHJlY2lzaW9uIGhpZ2hwIGZsb2F0OwojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04gaGlnaHAKI2Vsc2UKcHJlY2lzaW9uIG1lZGl1bXAgZmxvYXQ7CiNkZWZpbmUgQ09NUEFUX1BSRUNJU0lPTiBtZWRpdW1wCiNlbmRpZgojZWxzZQojZGVmaW5lIENPTVBBVF9QUkVDSVNJT04KI2VuZGlmCgp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lRGlyZWN0aW9uOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gaW50IEZyYW1lQ291bnQ7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIE91dHB1dFNpemU7CnVuaWZvcm0gQ09NUEFUX1BSRUNJU0lPTiB2ZWMyIFRleHR1cmVTaXplOwp1bmlmb3JtIENPTVBBVF9QUkVDSVNJT04gdmVjMiBJbnB1dFNpemU7CnVuaWZvcm0gc2FtcGxlcjJEIFRleHR1cmU7CnVuaWZvcm0gc2FtcGxlcjJEIFByZXZUZXh0dXJlOwpDT01QQVRfVkFSWUlORyBDT01QQVRfUFJFQ0lTSU9OIHZlYzQgVEVYMDsKCnZvaWQgbWFpbigpCnsKCS8vIEdldCBjb2xvdXIgb2YgY3VycmVudCBwaXhlbAoJQ09NUEFUX1BSRUNJU0lPTiB2ZWMzIGNvbG91ciA9IENPTVBBVF9URVhUVVJFKFRleHR1cmUsIFRFWDAueHkpLnJnYjsKCQoJLy8gR2V0IGNvbG91ciBvZiBwcmV2aW91cyBwaXhlbAoJQ09NUEFUX1BSRUNJU0lPTiB2ZWMzIGNvbG91clByZXYgPSBDT01QQVRfVEVYVFVSRShQcmV2VGV4dHVyZSwgVEVYMC54eSkucmdiOwoJCgkvLyBNaXggY29sb3VycwoJY29sb3VyLnJnYiA9IG1peChjb2xvdXIucmdiLCBjb2xvdXJQcmV2LnJnYiwgMC41KTsKCQoJZ2xfRnJhZ0NvbG9yID0gdmVjNChjb2xvdXIucmdiLCAxLjApOwp9CiNlbmRpZgo="
        }]
    }
},
function(t, e) {
    "object" == typeof exports && "object" == typeof module ? module.exports = e() : "function" == typeof define && define.amd ? define("nipplejs", [], e) : "object" == typeof exports ? exports.nipplejs = e() : t.nipplejs = e()
}(window, (function() {
    return function(t) {
        var e = {};
        function i(n) {
            if (e[n])
                return e[n].exports;
            var s = e[n] = {
                i: n,
                l: !1,
                exports: {}
            };
            return t[n].call(s.exports, s, s.exports, i),
            s.l = !0,
            s.exports
        }
        return i.m = t,
        i.c = e,
        i.d = function(t, e, n) {
            i.o(t, e) || Object.defineProperty(t, e, {
                enumerable: !0,
                get: n
            })
        }
        ,
        i.r = function(t) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
                value: "Module"
            }),
            Object.defineProperty(t, "__esModule", {
                value: !0
            })
        }
        ,
        i.t = function(t, e) {
            if (1 & e && (t = i(t)),
            8 & e)
                return t;
            if (4 & e && "object" == typeof t && t && t.__esModule)
                return t;
            var n = Object.create(null);
            if (i.r(n),
            Object.defineProperty(n, "default", {
                enumerable: !0,
                value: t
            }),
            2 & e && "string" != typeof t)
                for (var s in t)
                    i.d(n, s, function(e) {
                        return t[e]
                    }
                    .bind(null, s));
            return n
        }
        ,
        i.n = function(t) {
            var e = t && t.__esModule ? function() {
                return t.default
            }
            : function() {
                return t
            }
            ;
            return i.d(e, "a", e),
            e
        }
        ,
        i.o = function(t, e) {
            return Object.prototype.hasOwnProperty.call(t, e)
        }
        ,
        i.p = "",
        i(i.s = 0)
    }([function(t, e, i) {
        "use strict";
        i.r(e);
        var n, s = function(t, e) {
            var i = e.x - t.x
              , n = e.y - t.y;
            return Math.sqrt(i * i + n * n)
        }, o = function(t) {
            return t * (Math.PI / 180)
        }, a = new Map, l = function(t) {
            a.has(t) && clearTimeout(a.get(t)),
            a.set(t, setTimeout(t, 100))
        }, r = function(t, e, i) {
            for (var n, s = e.split(/[ ,]+/g), o = 0; o < s.length; o += 1)
                n = s[o],
                t.addEventListener ? t.addEventListener(n, i, !1) : t.attachEvent && t.attachEvent(n, i)
        }, c = function(t, e, i) {
            for (var n, s = e.split(/[ ,]+/g), o = 0; o < s.length; o += 1)
                n = s[o],
                t.removeEventListener ? t.removeEventListener(n, i) : t.detachEvent && t.detachEvent(n, i)
        }, d = function(t) {
            return t.preventDefault(),
            t.type.match(/^touch/) ? t.changedTouches : t
        }, g = function() {
            return {
                x: void 0 !== window.pageXOffset ? window.pageXOffset : (document.documentElement || document.body.parentNode || document.body).scrollLeft,
                y: void 0 !== window.pageYOffset ? window.pageYOffset : (document.documentElement || document.body.parentNode || document.body).scrollTop
            }
        }, h = function(t, e) {
            e.top || e.right || e.bottom || e.left ? (t.style.top = e.top,
            t.style.right = e.right,
            t.style.bottom = e.bottom,
            t.style.left = e.left) : (t.style.left = e.x + "px",
            t.style.top = e.y + "px")
        }, p = function(t, e, i) {
            var n = u(t);
            for (var s in n)
                if (n.hasOwnProperty(s))
                    if ("string" == typeof e)
                        n[s] = e + " " + i;
                    else {
                        for (var o = "", a = 0, l = e.length; a < l; a += 1)
                            o += e[a] + " " + i + ", ";
                        n[s] = o.slice(0, -2)
                    }
            return n
        }, u = function(t) {
            var e = {};
            return e[t] = "",
            ["webkit", "Moz", "o"].forEach((function(i) {
                e[i + t.charAt(0).toUpperCase() + t.slice(1)] = ""
            }
            )),
            e
        }, m = function(t, e) {
            for (var i in e)
                e.hasOwnProperty(i) && (t[i] = e[i]);
            return t
        }, I = function(t, e) {
            if (t.length)
                for (var i = 0, n = t.length; i < n; i += 1)
                    e(t[i]);
            else
                e(t)
        }, C = !!("ontouchstart"in window), b = !!window.PointerEvent, y = !!window.MSPointerEvent, Z = {
            start: "mousedown",
            move: "mousemove",
            end: "mouseup"
        }, V = {};
        function f() {}
        b ? n = {
            start: "pointerdown",
            move: "pointermove",
            end: "pointerup, pointercancel"
        } : y ? n = {
            start: "MSPointerDown",
            move: "MSPointerMove",
            end: "MSPointerUp"
        } : C ? (n = {
            start: "touchstart",
            move: "touchmove",
            end: "touchend, touchcancel"
        },
        V = Z) : n = Z,
        f.prototype.on = function(t, e) {
            var i, n = t.split(/[ ,]+/g);
            this._handlers_ = this._handlers_ || {};
            for (var s = 0; s < n.length; s += 1)
                i = n[s],
                this._handlers_[i] = this._handlers_[i] || [],
                this._handlers_[i].push(e);
            return this
        }
        ,
        f.prototype.off = function(t, e) {
            return this._handlers_ = this._handlers_ || {},
            void 0 === t ? this._handlers_ = {} : void 0 === e ? this._handlers_[t] = null : this._handlers_[t] && this._handlers_[t].indexOf(e) >= 0 && this._handlers_[t].splice(this._handlers_[t].indexOf(e), 1),
            this
        }
        ,
        f.prototype.trigger = function(t, e) {
            var i, n = this, s = t.split(/[ ,]+/g);
            n._handlers_ = n._handlers_ || {};
            for (var o = 0; o < s.length; o += 1)
                i = s[o],
                n._handlers_[i] && n._handlers_[i].length && n._handlers_[i].forEach((function(t) {
                    t.call(n, {
                        type: i,
                        target: n
                    }, e)
                }
                ))
        }
        ,
        f.prototype.config = function(t) {
            this.options = this.defaults || {},
            t && (this.options = function(t, e) {
                var i = {};
                for (var n in t)
                    t.hasOwnProperty(n) && e.hasOwnProperty(n) ? i[n] = e[n] : t.hasOwnProperty(n) && (i[n] = t[n]);
                return i
            }(this.options, t))
        }
        ,
        f.prototype.bindEvt = function(t, e) {
            var i = this;
            return i._domHandlers_ = i._domHandlers_ || {},
            i._domHandlers_[e] = function() {
                "function" == typeof i["on" + e] ? i["on" + e].apply(i, arguments) : console.warn('[WARNING] : Missing "on' + e + '" handler.')
            }
            ,
            r(t, n[e], i._domHandlers_[e]),
            V[e] && r(t, V[e], i._domHandlers_[e]),
            i
        }
        ,
        f.prototype.unbindEvt = function(t, e) {
            return this._domHandlers_ = this._domHandlers_ || {},
            c(t, n[e], this._domHandlers_[e]),
            V[e] && c(t, V[e], this._domHandlers_[e]),
            delete this._domHandlers_[e],
            this
        }
        ;
        var B = f;
        function S(t, e) {
            return this.identifier = e.identifier,
            this.position = e.position,
            this.frontPosition = e.frontPosition,
            this.collection = t,
            this.defaults = {
                size: 100,
                threshold: .1,
                color: "white",
                fadeTime: 250,
                dataOnly: !1,
                restJoystick: !0,
                restOpacity: .5,
                mode: "dynamic",
                zone: document.body,
                lockX: !1,
                lockY: !1,
                shape: "circle"
            },
            this.config(e),
            "dynamic" === this.options.mode && (this.options.restOpacity = 0),
            this.id = S.id,
            S.id += 1,
            this.buildEl().stylize(),
            this.instance = {
                el: this.ui.el,
                on: this.on.bind(this),
                off: this.off.bind(this),
                show: this.show.bind(this),
                hide: this.hide.bind(this),
                add: this.addToDom.bind(this),
                remove: this.removeFromDom.bind(this),
                destroy: this.destroy.bind(this),
                setPosition: this.setPosition.bind(this),
                resetDirection: this.resetDirection.bind(this),
                computeDirection: this.computeDirection.bind(this),
                trigger: this.trigger.bind(this),
                position: this.position,
                frontPosition: this.frontPosition,
                ui: this.ui,
                identifier: this.identifier,
                id: this.id,
                options: this.options
            },
            this.instance
        }
        S.prototype = new B,
        S.constructor = S,
        S.id = 0,
        S.prototype.buildEl = function(t) {
            return this.ui = {},
            this.options.dataOnly || (this.ui.el = document.createElement("div"),
            this.ui.back = document.createElement("div"),
            this.ui.front = document.createElement("div"),
            this.ui.el.className = "nipple collection_" + this.collection.id,
            this.ui.back.className = "back",
            this.ui.front.className = "front",
            this.ui.el.setAttribute("id", "nipple_" + this.collection.id + "_" + this.id),
            this.ui.el.appendChild(this.ui.back),
            this.ui.el.appendChild(this.ui.front)),
            this
        }
        ,
        S.prototype.stylize = function() {
            if (this.options.dataOnly)
                return this;
            var t = this.options.fadeTime + "ms"
              , e = function() {
                var t = u("borderRadius");
                for (var e in t)
                    t.hasOwnProperty(e) && (t[e] = "50%");
                return t
            }()
              , i = p("transition", "opacity", t)
              , n = {};
            return n.el = {
                position: "absolute",
                opacity: this.options.restOpacity,
                display: "block",
                zIndex: 999
            },
            n.back = {
                position: "absolute",
                display: "block",
                width: this.options.size + "px",
                height: this.options.size + "px",
                left: 0,
                marginLeft: -this.options.size / 2 + "px",
                marginTop: -this.options.size / 2 + "px",
                background: this.options.color,
                opacity: ".5"
            },
            n.front = {
                width: this.options.size / 2 + "px",
                height: this.options.size / 2 + "px",
                position: "absolute",
                display: "block",
                left: 0,
                marginLeft: -this.options.size / 4 + "px",
                marginTop: -this.options.size / 4 + "px",
                background: this.options.color,
                opacity: ".5",
                transform: "translate(0px, 0px)"
            },
            m(n.el, i),
            "circle" === this.options.shape && m(n.back, e),
            m(n.front, e),
            this.applyStyles(n),
            this
        }
        ,
        S.prototype.applyStyles = function(t) {
            for (var e in this.ui)
                if (this.ui.hasOwnProperty(e))
                    for (var i in t[e])
                        this.ui[e].style[i] = t[e][i];
            return this
        }
        ,
        S.prototype.addToDom = function() {
            return this.options.dataOnly || document.body.contains(this.ui.el) || this.options.zone.appendChild(this.ui.el),
            this
        }
        ,
        S.prototype.removeFromDom = function() {
            return this.options.dataOnly || !document.body.contains(this.ui.el) || this.options.zone.removeChild(this.ui.el),
            this
        }
        ,
        S.prototype.destroy = function() {
            clearTimeout(this.removeTimeout),
            clearTimeout(this.showTimeout),
            clearTimeout(this.restTimeout),
            this.trigger("destroyed", this.instance),
            this.removeFromDom(),
            this.off()
        }
        ,
        S.prototype.show = function(t) {
            var e = this;
            return e.options.dataOnly || (clearTimeout(e.removeTimeout),
            clearTimeout(e.showTimeout),
            clearTimeout(e.restTimeout),
            e.addToDom(),
            e.restCallback(),
            setTimeout((function() {
                e.ui.el.style.opacity = 1
            }
            ), 0),
            e.showTimeout = setTimeout((function() {
                e.trigger("shown", e.instance),
                "function" == typeof t && t.call(this)
            }
            ), e.options.fadeTime)),
            e
        }
        ,
        S.prototype.hide = function(t) {
            var e = this;
            if (e.options.dataOnly)
                return e;
            if (e.ui.el.style.opacity = e.options.restOpacity,
            clearTimeout(e.removeTimeout),
            clearTimeout(e.showTimeout),
            clearTimeout(e.restTimeout),
            e.removeTimeout = setTimeout((function() {
                var i = "dynamic" === e.options.mode ? "none" : "block";
                e.ui.el.style.display = i,
                "function" == typeof t && t.call(e),
                e.trigger("hidden", e.instance)
            }
            ), e.options.fadeTime),
            e.options.restJoystick) {
                var i = e.options.restJoystick
                  , n = {};
                n.x = !0 === i || !1 !== i.x ? 0 : e.instance.frontPosition.x,
                n.y = !0 === i || !1 !== i.y ? 0 : e.instance.frontPosition.y,
                e.setPosition(t, n)
            }
            return e
        }
        ,
        S.prototype.setPosition = function(t, e) {
            var i = this;
            i.frontPosition = {
                x: e.x,
                y: e.y
            };
            var n = i.options.fadeTime + "ms"
              , s = {};
            s.front = p("transition", ["transform"], n);
            var o = {
                front: {}
            };
            o.front = {
                transform: "translate(" + i.frontPosition.x + "px," + i.frontPosition.y + "px)"
            },
            i.applyStyles(s),
            i.applyStyles(o),
            i.restTimeout = setTimeout((function() {
                "function" == typeof t && t.call(i),
                i.restCallback()
            }
            ), i.options.fadeTime)
        }
        ,
        S.prototype.restCallback = function() {
            var t = {};
            t.front = p("transition", "none", ""),
            this.applyStyles(t),
            this.trigger("rested", this.instance)
        }
        ,
        S.prototype.resetDirection = function() {
            this.direction = {
                x: !1,
                y: !1,
                angle: !1
            }
        }
        ,
        S.prototype.computeDirection = function(t) {
            var e, i, n, s = t.angle.radian, o = Math.PI / 4, a = Math.PI / 2;
            if (s > o && s < 3 * o && !t.lockX ? e = "up" : s > -o && s <= o && !t.lockY ? e = "left" : s > 3 * -o && s <= -o && !t.lockX ? e = "down" : t.lockY || (e = "right"),
            t.lockY || (i = s > -a && s < a ? "left" : "right"),
            t.lockX || (n = s > 0 ? "up" : "down"),
            t.force > this.options.threshold) {
                var l, r = {};
                for (l in this.direction)
                    this.direction.hasOwnProperty(l) && (r[l] = this.direction[l]);
                var c = {};
                for (l in this.direction = {
                    x: i,
                    y: n,
                    angle: e
                },
                t.direction = this.direction,
                r)
                    r[l] === this.direction[l] && (c[l] = !0);
                if (c.x && c.y && c.angle)
                    return t;
                c.x && c.y || this.trigger("plain", t),
                c.x || this.trigger("plain:" + i, t),
                c.y || this.trigger("plain:" + n, t),
                c.angle || this.trigger("dir dir:" + e, t)
            } else
                this.resetDirection();
            return t
        }
        ;
        var A = S;
        function v(t, e) {
            this.nipples = [],
            this.idles = [],
            this.actives = [],
            this.ids = [],
            this.pressureIntervals = {},
            this.manager = t,
            this.id = v.id,
            v.id += 1,
            this.defaults = {
                zone: document.body,
                multitouch: !1,
                maxNumberOfNipples: 10,
                mode: "dynamic",
                position: {
                    top: 0,
                    left: 0
                },
                catchDistance: 200,
                size: 100,
                threshold: .1,
                color: "white",
                fadeTime: 250,
                dataOnly: !1,
                restJoystick: !0,
                restOpacity: .5,
                lockX: !1,
                lockY: !1,
                shape: "circle",
                dynamicPage: !1,
                follow: !1
            },
            this.config(e),
            "static" !== this.options.mode && "semi" !== this.options.mode || (this.options.multitouch = !1),
            this.options.multitouch || (this.options.maxNumberOfNipples = 1);
            var i = getComputedStyle(this.options.zone.parentElement);
            return i && "flex" === i.display && (this.parentIsFlex = !0),
            this.updateBox(),
            this.prepareNipples(),
            this.bindings(),
            this.begin(),
            this.nipples
        }
        v.prototype = new B,
        v.constructor = v,
        v.id = 0,
        v.prototype.prepareNipples = function() {
            var t = this.nipples;
            t.on = this.on.bind(this),
            t.off = this.off.bind(this),
            t.options = this.options,
            t.destroy = this.destroy.bind(this),
            t.ids = this.ids,
            t.id = this.id,
            t.processOnMove = this.processOnMove.bind(this),
            t.processOnEnd = this.processOnEnd.bind(this),
            t.get = function(e) {
                if (void 0 === e)
                    return t[0];
                for (var i = 0, n = t.length; i < n; i += 1)
                    if (t[i].identifier === e)
                        return t[i];
                return !1
            }
        }
        ,
        v.prototype.bindings = function() {
            this.bindEvt(this.options.zone, "start"),
            this.options.zone.style.touchAction = "none",
            this.options.zone.style.msTouchAction = "none"
        }
        ,
        v.prototype.begin = function() {
            var t = this.options;
            if ("static" === t.mode) {
                var e = this.createNipple(t.position, this.manager.getIdentifier());
                e.add(),
                this.idles.push(e)
            }
        }
        ,
        v.prototype.createNipple = function(t, e) {
            var i = this.manager.scroll
              , n = {}
              , s = this.options
              , o = this.parentIsFlex ? i.x : i.x + this.box.left
              , a = this.parentIsFlex ? i.y : i.y + this.box.top;
            if (t.x && t.y)
                n = {
                    x: t.x - o,
                    y: t.y - a
                };
            else if (t.top || t.right || t.bottom || t.left) {
                var l = document.createElement("DIV");
                l.style.display = "hidden",
                l.style.top = t.top,
                l.style.right = t.right,
                l.style.bottom = t.bottom,
                l.style.left = t.left,
                l.style.position = "absolute",
                s.zone.appendChild(l);
                var r = l.getBoundingClientRect();
                s.zone.removeChild(l),
                n = t,
                t = {
                    x: r.left + i.x,
                    y: r.top + i.y
                }
            }
            var c = new A(this,{
                color: s.color,
                size: s.size,
                threshold: s.threshold,
                fadeTime: s.fadeTime,
                dataOnly: s.dataOnly,
                restJoystick: s.restJoystick,
                restOpacity: s.restOpacity,
                mode: s.mode,
                identifier: e,
                position: t,
                zone: s.zone,
                frontPosition: {
                    x: 0,
                    y: 0
                },
                shape: s.shape
            });
            return s.dataOnly || (h(c.ui.el, n),
            h(c.ui.front, c.frontPosition)),
            this.nipples.push(c),
            this.trigger("added " + c.identifier + ":added", c),
            this.manager.trigger("added " + c.identifier + ":added", c),
            this.bindNipple(c),
            c
        }
        ,
        v.prototype.updateBox = function() {
            this.box = this.options.zone.getBoundingClientRect()
        }
        ,
        v.prototype.bindNipple = function(t) {
            var e, i = this, n = function(t, n) {
                e = t.type + " " + n.id + ":" + t.type,
                i.trigger(e, n)
            };
            t.on("destroyed", i.onDestroyed.bind(i)),
            t.on("shown hidden rested dir plain", n),
            t.on("dir:up dir:right dir:down dir:left", n),
            t.on("plain:up plain:right plain:down plain:left", n)
        }
        ,
        v.prototype.pressureFn = function(t, e, i) {
            var n = this
              , s = 0;
            clearInterval(n.pressureIntervals[i]),
            n.pressureIntervals[i] = setInterval(function() {
                var i = t.force || t.pressure || t.webkitForce || 0;
                i !== s && (e.trigger("pressure", i),
                n.trigger("pressure " + e.identifier + ":pressure", i),
                s = i)
            }
            .bind(n), 100)
        }
        ,
        v.prototype.onstart = function(t) {
            var e = this
              , i = e.options
              , n = t;
            return t = d(t),
            e.updateBox(),
            I(t, (function(s) {
                e.actives.length < i.maxNumberOfNipples ? e.processOnStart(s) : n.type.match(/^touch/) && (Object.keys(e.manager.ids).forEach((function(i) {
                    if (Object.values(n.touches).findIndex((function(t) {
                        return t.identifier === i
                    }
                    )) < 0) {
                        var s = [t[0]];
                        s.identifier = i,
                        e.processOnEnd(s)
                    }
                }
                )),
                e.actives.length < i.maxNumberOfNipples && e.processOnStart(s))
            }
            )),
            e.manager.bindDocument(),
            !1
        }
        ,
        v.prototype.processOnStart = function(t) {
            var e, i = this, n = i.options, o = i.manager.getIdentifier(t), a = t.force || t.pressure || t.webkitForce || 0, l = {
                x: t.pageX,
                y: t.pageY
            }, r = i.getOrCreate(o, l);
            r.identifier !== o && i.manager.removeIdentifier(r.identifier),
            r.identifier = o;
            var c = function(e) {
                e.trigger("start", e),
                i.trigger("start " + e.id + ":start", e),
                e.show(),
                a > 0 && i.pressureFn(t, e, e.identifier),
                i.processOnMove(t)
            };
            if ((e = i.idles.indexOf(r)) >= 0 && i.idles.splice(e, 1),
            i.actives.push(r),
            i.ids.push(r.identifier),
            "semi" !== n.mode)
                c(r);
            else {
                if (!(s(l, r.position) <= n.catchDistance))
                    return r.destroy(),
                    void i.processOnStart(t);
                c(r)
            }
            return r
        }
        ,
        v.prototype.getOrCreate = function(t, e) {
            var i, n = this.options;
            return /(semi|static)/.test(n.mode) ? (i = this.idles[0]) ? (this.idles.splice(0, 1),
            i) : "semi" === n.mode ? this.createNipple(e, t) : (console.warn("Coudln't find the needed nipple."),
            !1) : i = this.createNipple(e, t)
        }
        ,
        v.prototype.processOnMove = function(t) {
            var e = this.options
              , i = this.manager.getIdentifier(t)
              , n = this.nipples.get(i)
              , a = this.manager.scroll;
            if (function(t) {
                return isNaN(t.buttons) ? 0 !== t.pressure : 0 !== t.buttons
            }(t)) {
                if (!n)
                    return console.error("Found zombie joystick with ID " + i),
                    void this.manager.removeIdentifier(i);
                if (e.dynamicPage) {
                    var l = n.el.getBoundingClientRect();
                    n.position = {
                        x: a.x + l.left,
                        y: a.y + l.top
                    }
                }
                n.identifier = i;
                var r = n.options.size / 2
                  , c = {
                    x: t.pageX,
                    y: t.pageY
                };
                e.lockX && (c.y = n.position.y),
                e.lockY && (c.x = n.position.x);
                var d, g, h, p, u, m, I, C, b, y, Z = s(c, n.position), V = (d = c,
                h = (g = n.position).x - d.x,
                p = g.y - d.y,
                function(t) {
                    return t * (180 / Math.PI)
                }(Math.atan2(p, h))), f = o(V), B = Z / r, S = {
                    distance: Z,
                    position: c
                };
                if ("circle" === n.options.shape ? (u = Math.min(Z, r),
                I = n.position,
                C = u,
                y = {
                    x: 0,
                    y: 0
                },
                b = o(b = V),
                y.x = I.x - C * Math.cos(b),
                y.y = I.y - C * Math.sin(b),
                m = y) : (m = function(t, e, i) {
                    return {
                        x: Math.min(Math.max(t.x, e.x - i), e.x + i),
                        y: Math.min(Math.max(t.y, e.y - i), e.y + i)
                    }
                }(c, n.position, r),
                u = s(m, n.position)),
                e.follow) {
                    if (Z > r) {
                        var A = c.x - m.x
                          , v = c.y - m.y;
                        n.position.x += A,
                        n.position.y += v,
                        n.el.style.top = n.position.y - (this.box.top + a.y) + "px",
                        n.el.style.left = n.position.x - (this.box.left + a.x) + "px",
                        Z = s(c, n.position)
                    }
                } else
                    c = m,
                    Z = u;
                var w = c.x - n.position.x
                  , U = c.y - n.position.y;
                n.frontPosition = {
                    x: w,
                    y: U
                },
                e.dataOnly || (n.ui.front.style.transform = "translate(" + w + "px," + U + "px)");
                var N = {
                    identifier: n.identifier,
                    position: c,
                    force: B,
                    pressure: t.force || t.pressure || t.webkitForce || 0,
                    distance: Z,
                    angle: {
                        radian: f,
                        degree: V
                    },
                    vector: {
                        x: w / r,
                        y: -U / r
                    },
                    raw: S,
                    instance: n,
                    lockX: e.lockX,
                    lockY: e.lockY
                };
                (N = n.computeDirection(N)).angle = {
                    radian: o(180 - V),
                    degree: 180 - V
                },
                n.trigger("move", N),
                this.trigger("move " + n.id + ":move", N)
            } else
                this.processOnEnd(t)
        }
        ,
        v.prototype.processOnEnd = function(t) {
            var e = this
              , i = e.options
              , n = e.manager.getIdentifier(t)
              , s = e.nipples.get(n)
              , o = e.manager.removeIdentifier(s.identifier);
            s && (i.dataOnly || s.hide((function() {
                "dynamic" === i.mode && (s.trigger("removed", s),
                e.trigger("removed " + s.id + ":removed", s),
                e.manager.trigger("removed " + s.id + ":removed", s),
                s.destroy())
            }
            )),
            clearInterval(e.pressureIntervals[s.identifier]),
            s.resetDirection(),
            s.trigger("end", s),
            e.trigger("end " + s.id + ":end", s),
            e.ids.indexOf(s.identifier) >= 0 && e.ids.splice(e.ids.indexOf(s.identifier), 1),
            e.actives.indexOf(s) >= 0 && e.actives.splice(e.actives.indexOf(s), 1),
            /(semi|static)/.test(i.mode) ? e.idles.push(s) : e.nipples.indexOf(s) >= 0 && e.nipples.splice(e.nipples.indexOf(s), 1),
            e.manager.unbindDocument(),
            /(semi|static)/.test(i.mode) && (e.manager.ids[o.id] = o.identifier))
        }
        ,
        v.prototype.onDestroyed = function(t, e) {
            this.nipples.indexOf(e) >= 0 && this.nipples.splice(this.nipples.indexOf(e), 1),
            this.actives.indexOf(e) >= 0 && this.actives.splice(this.actives.indexOf(e), 1),
            this.idles.indexOf(e) >= 0 && this.idles.splice(this.idles.indexOf(e), 1),
            this.ids.indexOf(e.identifier) >= 0 && this.ids.splice(this.ids.indexOf(e.identifier), 1),
            this.manager.removeIdentifier(e.identifier),
            this.manager.unbindDocument()
        }
        ,
        v.prototype.destroy = function() {
            for (var t in this.unbindEvt(this.options.zone, "start"),
            this.nipples.forEach((function(t) {
                t.destroy()
            }
            )),
            this.pressureIntervals)
                this.pressureIntervals.hasOwnProperty(t) && clearInterval(this.pressureIntervals[t]);
            this.trigger("destroyed", this.nipples),
            this.manager.unbindDocument(),
            this.off()
        }
        ;
        var w = v;
        function U(t) {
            var e = this;
            e.ids = {},
            e.index = 0,
            e.collections = [],
            e.scroll = g(),
            e.config(t),
            e.prepareCollections();
            var i = function() {
                var t;
                e.collections.forEach((function(i) {
                    i.forEach((function(i) {
                        t = i.el.getBoundingClientRect(),
                        i.position = {
                            x: e.scroll.x + t.left,
                            y: e.scroll.y + t.top
                        }
                    }
                    ))
                }
                ))
            };
            r(window, "resize", (function() {
                l(i)
            }
            ));
            var n = function() {
                e.scroll = g()
            };
            return r(window, "scroll", (function() {
                l(n)
            }
            )),
            e.collections
        }
        U.prototype = new B,
        U.constructor = U,
        U.prototype.prepareCollections = function() {
            var t = this;
            t.collections.create = t.create.bind(t),
            t.collections.on = t.on.bind(t),
            t.collections.off = t.off.bind(t),
            t.collections.destroy = t.destroy.bind(t),
            t.collections.get = function(e) {
                var i;
                return t.collections.every((function(t) {
                    return !(i = t.get(e))
                }
                )),
                i
            }
        }
        ,
        U.prototype.create = function(t) {
            return this.createCollection(t)
        }
        ,
        U.prototype.createCollection = function(t) {
            var e = new w(this,t);
            return this.bindCollection(e),
            this.collections.push(e),
            e
        }
        ,
        U.prototype.bindCollection = function(t) {
            var e, i = this, n = function(t, n) {
                e = t.type + " " + n.id + ":" + t.type,
                i.trigger(e, n)
            };
            t.on("destroyed", i.onDestroyed.bind(i)),
            t.on("shown hidden rested dir plain", n),
            t.on("dir:up dir:right dir:down dir:left", n),
            t.on("plain:up plain:right plain:down plain:left", n)
        }
        ,
        U.prototype.bindDocument = function() {
            this.binded || (this.bindEvt(document, "move").bindEvt(document, "end"),
            this.binded = !0)
        }
        ,
        U.prototype.unbindDocument = function(t) {
            Object.keys(this.ids).length && !0 !== t || (this.unbindEvt(document, "move").unbindEvt(document, "end"),
            this.binded = !1)
        }
        ,
        U.prototype.getIdentifier = function(t) {
            var e;
            return t ? void 0 === (e = void 0 === t.identifier ? t.pointerId : t.identifier) && (e = this.latest || 0) : e = this.index,
            void 0 === this.ids[e] && (this.ids[e] = this.index,
            this.index += 1),
            this.latest = e,
            this.ids[e]
        }
        ,
        U.prototype.removeIdentifier = function(t) {
            var e = {};
            for (var i in this.ids)
                if (this.ids[i] === t) {
                    e.id = i,
                    e.identifier = this.ids[i],
                    delete this.ids[i];
                    break
                }
            return e
        }
        ,
        U.prototype.onmove = function(t) {
            return this.onAny("move", t),
            !1
        }
        ,
        U.prototype.onend = function(t) {
            return this.onAny("end", t),
            !1
        }
        ,
        U.prototype.oncancel = function(t) {
            return this.onAny("end", t),
            !1
        }
        ,
        U.prototype.onAny = function(t, e) {
            var i, n = this, s = "processOn" + t.charAt(0).toUpperCase() + t.slice(1);
            return e = d(e),
            I(e, (function(t) {
                i = n.getIdentifier(t),
                I(n.collections, function(t, e, i) {
                    i.ids.indexOf(e) >= 0 && (i[s](t),
                    t._found_ = !0)
                }
                .bind(null, t, i)),
                t._found_ || n.removeIdentifier(i)
            }
            )),
            !1
        }
        ,
        U.prototype.destroy = function() {
            this.unbindDocument(!0),
            this.ids = {},
            this.index = 0,
            this.collections.forEach((function(t) {
                t.destroy()
            }
            )),
            this.off()
        }
        ,
        U.prototype.onDestroyed = function(t, e) {
            if (this.collections.indexOf(e) < 0)
                return !1;
            this.collections.splice(this.collections.indexOf(e), 1)
        }
        ;
        var N = new U;
        e.default = {
            create: function(t) {
                return N.create(t)
            },
            factory: N
        }
    }
    ]).default
}
));
class GamepadHandler {
    gamepads;
    timeout;
    listeners;
    constructor() {
        this.buttonLabels = {
            0: "BUTTON_1",
            1: "BUTTON_2",
            2: "BUTTON_3",
            3: "BUTTON_4",
            4: "LEFT_TOP_SHOULDER",
            5: "RIGHT_TOP_SHOULDER",
            6: "LEFT_BOTTOM_SHOULDER",
            7: "RIGHT_BOTTOM_SHOULDER",
            8: "SELECT",
            9: "START",
            10: "LEFT_STICK",
            11: "RIGHT_STICK",
            12: "DPAD_UP",
            13: "DPAD_DOWN",
            14: "DPAD_LEFT",
            15: "DPAD_RIGHT"
        },
        this.gamepads = [],
        this.listeners = {},
        this.timeout = null,
        this.loop()
    }
    terminate() {
        window.clearTimeout(this.timeout)
    }
    getGamepads() {
        return navigator.getGamepads ? navigator.getGamepads() : navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []
    }
    loop() {
        this.updateGamepadState(),
        this.timeout = setTimeout(this.loop.bind(this), 10)
    }
    updateGamepadState() {
        let t = Array.from(this.getGamepads());
        if (t) {
            if (!Array.isArray(t) && t.length) {
                let e = [];
                for (let i = 0; i < t.length; i++)
                    e.push(t[i]);
                t = e
            } else if (!Array.isArray(t))
                return;
            t.forEach(( (e, i) => {
                if (!e)
                    return;
                let n = !1;
                this.gamepads.forEach(( (t, i) => {
                    if (t.index !== e.index)
                        return;
                    const s = {
                        axes: [],
                        buttons: {},
                        index: t.index,
                        id: t.id
                    };
                    n = !0,
                    t.axes.forEach(( (t, i) => {
                        const n = t < .01 && t > -.01 ? 0 : t
                          , o = e.axes[i] < .01 && e.axes[i] > -.01 ? 0 : e.axes[i];
                        if (o !== n) {
                            let t = ["LEFT_STICK_X", "LEFT_STICK_Y", "RIGHT_STICK_X", "RIGHT_STICK_Y"][i];
                            t || (t = "EXTRA_STICK_" + i),
                            this.dispatchEvent("axischanged", {
                                axis: t,
                                value: o,
                                index: e.index,
                                label: this.getAxisLabel(t, o),
                                gamepadIndex: e.index
                            })
                        }
                        s.axes[i] = o
                    }
                    )),
                    e.buttons.forEach(( (i, n) => {
                        let o = 1 === t.buttons[n];
                        "object" == typeof t.buttons[n] && (o = t.buttons[n].pressed);
                        let a = 1 === i;
                        "object" == typeof i && (a = i.pressed),
                        s.buttons[n] = {
                            pressed: a
                        },
                        o !== a && (a ? this.dispatchEvent("buttondown", {
                            index: n,
                            label: this.getButtonLabel(n),
                            gamepadIndex: e.index
                        }) : this.dispatchEvent("buttonup", {
                            index: n,
                            label: this.getButtonLabel(n),
                            gamepadIndex: e.index
                        }))
                    }
                    )),
                    this.gamepads[i] = s
                }
                )),
                n || (this.gamepads.push(t[i]),
                this.gamepads.sort(( (t, e) => null == t && null == e ? 0 : null == t ? 1 : null == e ? -1 : t.index - e.index)),
                this.dispatchEvent("connected", {
                    gamepadIndex: e.index
                }))
            }
            ));
            for (let e = 0; e < this.gamepads.length; e++) {
                if (!this.gamepads[e])
                    continue;
                let i = !1;
                for (let n = 0; n < t.length; n++)
                    if (t[n] && this.gamepads[e].index === t[n].index) {
                        i = !0;
                        break
                    }
                i || (this.dispatchEvent("disconnected", {
                    gamepadIndex: this.gamepads[e].index
                }),
                this.gamepads.splice(e, 1),
                e--)
            }
        }
    }
    dispatchEvent(t, e) {
        "function" == typeof this.listeners[t] && (e || (e = {}),
        e.type = t,
        this.listeners[t](e))
    }
    on(t, e) {
        this.listeners[t.toLowerCase()] = e
    }
    getButtonLabel(t) {
        return null == t ? null : void 0 === this.buttonLabels[t] ? `GAMEPAD_${t}` : this.buttonLabels[t]
    }
    getAxisLabel(t, e) {
        let i = null;
        return (e > .5 || e < -.5) && (i = e > 0 ? "+1" : "-1"),
        t && i ? `${t}:${i}` : null
    }
}
window.GamepadHandler = GamepadHandler;
class EmulatorJS {
    getCores() {
        let t = {
            atari5200: ["a5200"],
            vb: ["beetle_vb"],
            nds: ["melonds", "desmume", "desmume2015"],
            arcade: ["fbneo", "fbalpha2012_cps1", "fbalpha2012_cps2"],
            nes: ["fceumm", "nestopia"],
            gb: ["gambatte"],
            coleco: ["gearcoleco"],
            segaMS: ["smsplus", "genesis_plus_gx", "picodrive"],
            segaMD: ["genesis_plus_gx", "picodrive"],
            segaGG: ["genesis_plus_gx"],
            segaCD: ["genesis_plus_gx", "picodrive"],
            sega32x: ["picodrive"],
            sega: ["genesis_plus_gx", "picodrive"],
            lynx: ["handy"],
            mame: ["mame2003_plus", "mame2003"],
            ngp: ["mednafen_ngp"],
            pce: ["mednafen_pce"],
            pcfx: ["mednafen_pcfx"],
            psx: ["pcsx_rearmed", "mednafen_psx_hw"],
            ws: ["mednafen_wswan"],
            gba: ["mgba"],
            n64: ["mupen64plus_next", "parallel_n64"],
            "3do": ["opera"],
            psp: ["ppsspp"],
            atari7800: ["prosystem"],
            snes: ["snes9x"],
            atari2600: ["stella2014"],
            jaguar: ["virtualjaguar"],
            segaSaturn: ["yabause"],
            amiga: ["puae"],
            c64: ["vice_x64sc"],
            c128: ["vice_x128"],
            pet: ["vice_xpet"],
            plus4: ["vice_xplus4"],
            vic20: ["vice_xvic"],
            dos: ["dosbox_pure"]
        };
        return this.isSafari && this.isMobile && (t.n64 = t.n64.reverse()),
        t
    }
    requiresThreads(t) {
        return ["ppsspp", "dosbox_pure"].includes(t)
    }
    requiresWebGL2(t) {
        return ["ppsspp"].includes(t)
    }
    getCore(t) {
        const e = this.getCores()
          , i = this.config.system;
        if (t) {
            for (const t in e)
                if (e[t].includes(i))
                    return t;
            return i
        }
        const n = this.getCore(!0);
        return e[n] && e[n].includes(this.preGetSetting("retroarch_core")) ? this.preGetSetting("retroarch_core") : e[i] ? e[i][0] : i
    }
    createElement(t) {
        return document.createElement(t)
    }
    addEventListener(t, e, i) {
        const n = e.split(" ");
        let s = [];
        for (let e = 0; e < n.length; e++) {
            t.addEventListener(n[e], i);
            const o = {
                cb: i,
                elem: t,
                listener: n[e]
            };
            s.push(o)
        }
        return s
    }
    removeEventListener(t) {
        for (let e = 0; e < t.length; e++)
            t[e].elem.removeEventListener(t[e].listener, t[e].cb)
    }
    downloadFile(t, e, i, n) {
        return new Promise((async s => {
            const o = this.toData(t);
            if (o)
                return void o.then((t => {
                    "HEAD" === n.method ? s({
                        headers: {}
                    }) : s({
                        headers: {},
                        data: t
                    })
                }
                ));
            const a = i ? "" : this.config.dataPath;
            let l;
            t = a + t,
            !i && this.config.filePaths && "string" == typeof this.config.filePaths[t.split("/").pop()] && (t = this.config.filePaths[t.split("/").pop()]);
            try {
                l = new URL(t)
            } catch (t) {}
            if (l && !["http:", "https:"].includes(l.protocol)) {
                if ("HEAD" === n.method)
                    return void s({
                        headers: {}
                    });
                try {
                    let e = await fetch(t);
                    if (n.type && "arraybuffer" === n.type.toLowerCase() || !n.type)
                        e = await e.arrayBuffer();
                    else {
                        e = await e.text();
                        try {
                            e = JSON.parse(e)
                        } catch (t) {}
                    }
                    t.startsWith("blob:") && URL.revokeObjectURL(t),
                    s({
                        data: e,
                        headers: {}
                    })
                } catch (t) {
                    s(-1)
                }
                return
            }
            const r = new XMLHttpRequest;
            e instanceof Function && r.addEventListener("progress", (t => {
                const i = t.total ? " " + Math.floor(t.loaded / t.total * 100).toString() + "%" : " " + (t.loaded / 1048576).toFixed(2) + "MB";
                e(i)
            }
            )),
            r.onload = function() {
                if (r.readyState === r.DONE) {
                    let t = r.response;
                    if (r.status.toString().startsWith("4") || r.status.toString().startsWith("5"))
                        return void s(-1);
                    try {
                        t = JSON.parse(t)
                    } catch (t) {}
                    s({
                        data: t,
                        headers: {
                            "content-length": r.getResponseHeader("content-length")
                        }
                    })
                }
            }
            ,
            n.responseType && (r.responseType = n.responseType),
            r.onerror = () => s(-1),
            r.open(n.method, t, !0),
            r.send()
        }
        ))
    }
    toData(t, e) {
        return t instanceof ArrayBuffer || t instanceof Uint8Array || t instanceof Blob ? !!e || new Promise((async e => {
            t instanceof ArrayBuffer ? e(new Uint8Array(t)) : t instanceof Uint8Array ? e(t) : t instanceof Blob && e(new Uint8Array(await t.arrayBuffer())),
            e()
        }
        )) : null
    }
    checkForUpdates() {
        this.ejs_version.endsWith("-beta") ? console.warn("Using EmulatorJS beta. Not checking for updates. This instance may be out of date. Using stable is highly recommended unless you build and ship your own cores.") : fetch("https://cdn.emulatorjs.org/stable/data/version.json").then((t => {
            t.ok && t.text().then((t => {
                let e = JSON.parse(t);
                this.versionAsInt(this.ejs_version) < this.versionAsInt(e.version) && console.log(`Using EmulatorJS version ${this.ejs_version} but the newest version is ${e.current_version}\nopen https://github.com/EmulatorJS/EmulatorJS to update`)
            }
            ))
        }
        ))
    }
    versionAsInt(t) {
        if (t.endsWith("-beta"))
            return 99999999;
        let e = t.split(".");
        return 1 === e[e.length - 1].length && (e[e.length - 1] = "0" + e[e.length - 1]),
        parseInt(e.join(""))
    }
    constructor(t, e) {
        if (this.ejs_version = "4.2.3",
        this.extensions = [],
        this.initControlVars(),
        this.debug = !0 === window.EJS_DEBUG_XX,
        (this.debug || window.location && ["localhost", "127.0.0.1"].includes(location.hostname)) && this.checkForUpdates(),
        this.netplayEnabled = !0 === window.EJS_DEBUG_XX && !0 === window.EJS_EXPERIMENTAL_NETPLAY,
        this.config = e,
        this.config.buttonOpts = this.buildButtonOptions(this.config.buttonOpts),
        this.config.settingsLanguage = window.EJS_settingsLanguage || !1,
        this.currentPopup = null,
        this.isFastForward = !1,
        this.isSlowMotion = !1,
        this.failedToStart = !1,
        this.rewindEnabled = "enabled" === this.preGetSetting("rewindEnabled"),
        this.touch = !1,
        this.cheats = [],
        this.started = !1,
        this.volume = "number" == typeof this.config.volume ? this.config.volume : .5,
        this.config.defaultControllers && (this.defaultControllers = this.config.defaultControllers),
        this.muted = !1,
        this.paused = !0,
        this.missingLang = [],
        this.setElements(t),
        this.setColor(this.config.color || ""),
        this.config.alignStartButton = "string" == typeof this.config.alignStartButton ? this.config.alignStartButton : "bottom",
        this.config.backgroundColor = "string" == typeof this.config.backgroundColor ? this.config.backgroundColor : "rgb(51, 51, 51)",
        this.config.adUrl && (this.config.adSize = Array.isArray(this.config.adSize) ? this.config.adSize : ["300px", "250px"],
        this.setupAds(this.config.adUrl, this.config.adSize[0], this.config.adSize[1])),
        this.isMobile = function() {
            let t = !1;
            var e;
            return e = navigator.userAgent || navigator.vendor || window.opera,
            (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(e) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(e.substr(0, 4))) && (t = !0),
            t
        }(),
        this.hasTouchScreen = function() {
            if (window.PointerEvent && "maxTouchPoints"in navigator) {
                if (navigator.maxTouchPoints > 0)
                    return !0
            } else {
                if (window.matchMedia && window.matchMedia("(any-pointer:coarse)").matches)
                    return !0;
                if (window.TouchEvent || "ontouchstart"in window)
                    return !0
            }
            return !1
        }(),
        this.canvas = this.createElement("canvas"),
        this.canvas.classList.add("ejs_canvas"),
        this.videoRotation = [0, 1, 2, 3].includes(this.config.videoRotation) ? this.config.videoRotation : this.preGetSetting("videoRotation") || 0,
        this.videoRotationChanged = !1,
        this.capture = this.capture || {},
        this.capture.photo = this.capture.photo || {},
        this.capture.photo.source = ["canvas", "retroarch"].includes(this.capture.photo.source) ? this.capture.photo.source : "canvas",
        this.capture.photo.format = "string" == typeof this.capture.photo.format ? this.capture.photo.format : "png",
        this.capture.photo.upscale = "number" == typeof this.capture.photo.upscale ? this.capture.photo.upscale : 1,
        this.capture.video = this.capture.video || {},
        this.capture.video.format = "string" == typeof this.capture.video.format ? this.capture.video.format : "detect",
        this.capture.video.upscale = "number" == typeof this.capture.video.upscale ? this.capture.video.upscale : 1,
        this.capture.video.fps = "number" == typeof this.capture.video.fps ? this.capture.video.fps : 30,
        this.capture.video.videoBitrate = "number" == typeof this.capture.video.videoBitrate ? this.capture.video.videoBitrate : 2621440,
        this.capture.video.audioBitrate = "number" == typeof this.capture.video.audioBitrate ? this.capture.video.audioBitrate : 196608,
        this.bindListeners(),
        this.config.netplayUrl = this.config.netplayUrl || "https://netplay.emulatorjs.org",
        this.fullscreen = !1,
        this.enableMouseLock = !1,
        this.supportsWebgl2 = !!document.createElement("canvas").getContext("webgl2") && !0 !== this.config.forceLegacyCores,
        this.webgl2Enabled = ( () => {
            let t = this.preGetSetting("webgl2Enabled");
            return !("disabled" === t || !this.supportsWebgl2) && ("enabled" === t || null)
        }
        )(),
        this.isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent),
        this.config.disableDatabases ? this.storage = {
            rom: new window.EJS_DUMMYSTORAGE,
            bios: new window.EJS_DUMMYSTORAGE,
            core: new window.EJS_DUMMYSTORAGE
        } : this.storage = {
            rom: new window.EJS_STORAGE("EmulatorJS-roms","rom"),
            bios: new window.EJS_STORAGE("EmulatorJS-bios","bios"),
            core: new window.EJS_STORAGE("EmulatorJS-core","core")
        },
        this.storage.states = new window.EJS_STORAGE("EmulatorJS-states","states"),
        this.game.classList.add("ejs_game"),
        "string" == typeof this.config.backgroundImg ? (this.game.classList.add("ejs_game_background"),
        this.config.backgroundBlur && this.game.classList.add("ejs_game_background_blur"),
        this.game.setAttribute("style", `--ejs-background-image: url("${this.config.backgroundImg}"); --ejs-background-color: ${this.config.backgroundColor};`),
        this.on("start", ( () => {
            this.game.classList.remove("ejs_game_background"),
            this.config.backgroundBlur && this.game.classList.remove("ejs_game_background_blur")
        }
        ))) : this.game.setAttribute("style", "--ejs-background-color: " + this.config.backgroundColor + ";"),
        Array.isArray(this.config.cheats))
            for (let t = 0; t < this.config.cheats.length; t++) {
                const e = this.config.cheats[t];
                Array.isArray(e) && e[0] && e[1] && this.cheats.push({
                    desc: e[0],
                    checked: !1,
                    code: e[1],
                    is_permanent: !0
                })
            }
        this.createStartButton(),
        this.handleResize()
    }
    setColor(t) {
        "string" != typeof t && (t = "");
        let e = function(t) {
            if ((t = t.toLowerCase()) && /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/.test(t)) {
                if (4 === t.length) {
                    let e = "#";
                    for (let i = 1; i < 4; i++)
                        e += t.slice(i, i + 1) + t.slice(i, i + 1);
                    t = e
                }
                let e = [];
                for (let i = 1; i < 7; i += 2)
                    e.push(parseInt("0x" + t.slice(i, i + 2), 16));
                return e.join(", ")
            }
            return null
        };
        t && null !== e(t) ? this.elements.parent.setAttribute("style", "--ejs-primary-color:" + e(t) + ";") : this.elements.parent.setAttribute("style", "--ejs-primary-color: 26,175,255;")
    }
    setupAds(t, e, i) {
        const n = this.createElement("div");
        "number" == typeof this.config.adMode && this.config.adMode > -1 && this.config.adMode < 3 && this.config.adMode;
        n.classList.add("ejs_ad_iframe");
        const s = this.createElement("iframe");
        s.src = t,
        s.setAttribute("scrolling", "no"),
        s.setAttribute("frameborder", "no"),
        s.style.width = e,
        s.style.height = i;
        const o = this.createElement("div");
        o.classList.add("ejs_ad_close");
        const a = this.createElement("a");
        o.appendChild(a),
        o.setAttribute("hidden", ""),
        n.appendChild(o),
        n.appendChild(s),
        1 !== this.config.adMode && this.elements.parent.appendChild(n),
        this.addEventListener(a, "click", ( () => {
            n.remove()
        }
        )),
        this.on("start-clicked", ( () => {
            0 === this.config.adMode && n.remove(),
            1 === this.config.adMode && this.elements.parent.appendChild(n)
        }
        )),
        this.on("start", ( () => {
            o.removeAttribute("hidden");
            const t = "number" == typeof this.config.adTimer && this.config.adTimer > 0 ? this.config.adTimer : 1e4;
            -1 === this.config.adTimer && n.remove(),
            0 !== this.config.adTimer && setTimeout(( () => {
                n.remove()
            }
            ), t)
        }
        ))
    }
    adBlocked(t, e) {
        if (e)
            document.querySelector('div[class="ejs_ad_iframe"]').remove();
        else {
            try {
                document.querySelector('div[class="ejs_ad_iframe"]').remove()
            } catch (t) {}
            this.config.adUrl = t,
            this.setupAds(this.config.adUrl, this.config.adSize[0], this.config.adSize[1])
        }
    }
    on(t, e) {
        this.functions || (this.functions = {}),
        Array.isArray(this.functions[t]) || (this.functions[t] = []),
        this.functions[t].push(e)
    }
    callEvent(t, e) {
        return this.functions || (this.functions = {}),
        Array.isArray(this.functions[t]) ? (this.functions[t].forEach((t => t(e))),
        this.functions[t].length) : 0
    }
    setElements(t) {
        const e = this.createElement("div")
          , i = document.querySelector(t);
        i.innerHTML = "",
        i.appendChild(e),
        this.game = e,
        this.elements = {
            main: this.game,
            parent: i
        },
        this.elements.parent.classList.add("ejs_parent"),
        this.elements.parent.setAttribute("tabindex", -1)
    }
    createStartButton() {
        const t = this.createElement("div");
        t.classList.add("ejs_start_button");
        let e = 0;
        "string" == typeof this.config.backgroundImg && (t.classList.add("ejs_start_button_border"),
        e = 1),
        t.innerText = "string" == typeof this.config.startBtnName ? this.config.startBtnName : this.localization("Start Game"),
        "top" == this.config.alignStartButton ? t.style.bottom = "calc(100% - 20px)" : "center" == this.config.alignStartButton && (t.style.bottom = "calc(50% + 22.5px + " + e + "px)"),
        this.elements.parent.appendChild(t),
        this.addEventListener(t, "touchstart", ( () => {
            this.touch = !0
        }
        )),
        this.addEventListener(t, "click", this.startButtonClicked.bind(this)),
        !0 === this.config.startOnLoad && this.startButtonClicked(t),
        setTimeout(( () => {
            this.callEvent("ready")
        }
        ), 20)
    }
    startButtonClicked(t) {
        this.callEvent("start-clicked"),
        "touch" === t.pointerType && (this.touch = !0),
        t.preventDefault ? (t.preventDefault(),
        t.target.remove()) : t.remove(),
        this.createText(),
        this.downloadGameCore()
    }
    createText() {
        this.textElem = this.createElement("div"),
        this.textElem.classList.add("ejs_loading_text"),
        "string" == typeof this.config.backgroundImg && this.textElem.classList.add("ejs_loading_text_glow"),
        this.textElem.innerText = this.localization("Loading..."),
        this.elements.parent.appendChild(this.textElem)
    }
    localization(t, e) {
        if (void 0 !== t && 0 !== t.length)
            return (t = t.toString()).includes("EmulatorJS v") ? t : this.config.langJson ? (void 0 === e && (e = !0),
            !this.config.langJson[t] && e && (this.missingLang.includes(t) || this.missingLang.push(t),
            console.log(`Translation not found for '${t}'. Language set to '${this.config.language}'`)),
            this.config.langJson[t] || t) : t
    }
    checkCompression(t, e, i) {
        return this.compression || (this.compression = new window.EJS_COMPRESSION(this)),
        e && (this.textElem.innerText = e),
        this.compression.decompress(t, ( (t, i) => {
            this.textElem.innerText = i ? e + t : t
        }
        ), i)
    }
    checkCoreCompatibility(t) {
        if (this.versionAsInt(t.minimumEJSVersion) > this.versionAsInt(this.ejs_version))
            throw this.startGameError(this.localization("Outdated EmulatorJS version")),
            new Error("Core requires minimum EmulatorJS version of " + t.minimumEJSVersion)
    }
    startGameError(t) {
        console.log(t),
        this.textElem.innerText = t,
        this.textElem.classList.add("ejs_error_text"),
        this.setupSettingsMenu(),
        this.loadSettings(),
        this.menu.failedToStart(),
        this.handleResize(),
        this.failedToStart = !0
    }
    downloadGameCore() {
        if (this.textElem.innerText = this.localization("Download Game Core"),
        !this.config.threads && this.requiresThreads(this.getCore()))
            return this.startGameError(this.localization("Error for site owner") + "\n" + this.localization("Check console")),
            void console.warn("This core requires threads, but EJS_threads is not set!");
        if (!this.supportsWebgl2 && this.requiresWebGL2(this.getCore()))
            return void this.startGameError(this.localization("Outdated graphics driver"));
        if (this.config.threads && "function" != typeof window.SharedArrayBuffer)
            return this.startGameError(this.localization("Error for site owner") + "\n" + this.localization("Check console")),
            void console.warn("Threads is set to true, but the SharedArrayBuffer function is not exposed. Threads requires 2 headers to be set when sending you html page. See https://stackoverflow.com/a/68630724");
        const t = t => {
            this.defaultCoreOpts = {},
            this.checkCompression(new Uint8Array(t), this.localization("Decompress Game Core")).then((t => {
                let e, i, n;
                for (let s in t)
                    if (s.endsWith(".wasm"))
                        n = t[s];
                    else if (s.endsWith(".worker.js"))
                        i = t[s];
                    else if (s.endsWith(".js"))
                        e = t[s];
                    else if ("build.json" === s)
                        this.checkCoreCompatibility(JSON.parse((new TextDecoder).decode(t[s])));
                    else if ("core.json" === s) {
                        let e = JSON.parse((new TextDecoder).decode(t[s]));
                        this.extensions = e.extensions,
                        this.coreName = e.name,
                        this.repository = e.repo,
                        this.defaultCoreOpts = e.options,
                        this.enableMouseLock = e.options.supportsMouse,
                        this.retroarchOpts = e.retroarchOpts,
                        this.saveFileExt = e.save
                    } else
                        "license.txt" === s && (this.license = (new TextDecoder).decode(t[s]));
                !1 === this.saveFileExt && (this.elements.bottomBar.saveSavFiles[0].style.display = "none",
                this.elements.bottomBar.loadSavFiles[0].style.display = "none"),
                this.initGameCore(e, n, i)
            }
            ))
        }
          , e = "cores/reports/" + this.getCore() + ".json";
        this.downloadFile(e, null, !1, {
            responseType: "text",
            method: "GET"
        }).then((async e => {
            (e = -1 === e || "string" == typeof e || "string" == typeof e.data ? {} : e.data).buildStart || (console.warn("Could not fetch core report JSON! Core caching will be disabled!"),
            e.buildStart = 100 * Math.random()),
            null === this.webgl2Enabled && (this.webgl2Enabled = !!e.options && e.options.defaultWebGL2),
            this.requiresWebGL2(this.getCore()) && (this.webgl2Enabled = !0);
            let i = !1;
            if ("function" == typeof window.SharedArrayBuffer) {
                const t = this.preGetSetting("ejs_threads");
                i = t ? "enabled" === t : this.config.threads
            }
            let n = this.supportsWebgl2 && this.webgl2Enabled ? "" : "-legacy"
              , s = this.getCore() + (i ? "-thread" : "") + n + "-wasm.data";
            if (!this.debug) {
                const i = await this.storage.core.get(s);
                if (i && i.version === e.buildStart)
                    return void t(i.data)
            }
            const o = "cores/" + s;
            let a = await this.downloadFile(o, (t => {
                this.textElem.innerText = this.localization("Download Game Core") + t
            }
            ), !1, {
                responseType: "arraybuffer",
                method: "GET"
            });
            if (-1 === a) {
                console.log("File not found, attemping to fetch from emulatorjs cdn."),
                console.error("**THIS METHOD IS A FAILSAFE, AND NOT OFFICIALLY SUPPORTED. USE AT YOUR OWN RISK**");
                let t = this.ejs_version.endsWith("-beta") ? "nightly" : this.ejs_version;
                if (a = await this.downloadFile(`https://google.com/${t}/data/${o}`, (t => {
                    this.textElem.innerText = this.localization("Download Game Core") + t
                }
                ), !0, {
                    responseType: "arraybuffer",
                    method: "GET"
                }),
                -1 === a)
                    return void (this.supportsWebgl2 ? this.startGameError(this.localization("Error downloading core") + " (" + s + ")") : this.startGameError(this.localization("Outdated graphics driver")));
                console.warn("File was not found locally, but was found on the emulatorjs cdn.\nIt is recommended to download the stable release from here: https://cdn.emulatorjs.org/releases/")
            }
            t(a.data),
            this.storage.core.put(s, {
                version: e.buildStart,
                data: a.data
            })
        }
        ))
    }
    initGameCore(t, e, i) {
        let n = this.createElement("script");
        n.src = URL.createObjectURL(new Blob([t],{
            type: "application/javascript"
        })),
        n.addEventListener("load", ( () => {
            this.initModule(e, i)
        }
        )),
        document.body.appendChild(n)
    }
    getBaseFileName(t) {
        if (!this.started && !t)
            return null;
        if (t && "game" !== this.config.gameUrl && !this.config.gameUrl.startsWith("blob:"))
            return this.config.gameUrl.split("/").pop().split("#")[0].split("?")[0];
        if ("string" == typeof this.config.gameName) {
            const t = /[#<$+%>!`&*'|{}/\\?"=@:^\r\n]/gi
              , e = this.config.gameName.replace(t, "").trim();
            if (e)
                return e
        }
        if (!this.fileName)
            return "game";
        let e = this.fileName.split(".");
        return e.splice(e.length - 1, 1),
        e.join(".")
    }
    saveInBrowserSupported() {
        return !(!window.indexedDB || "string" != typeof this.config.gameName && this.config.gameUrl.startsWith("blob:"))
    }
    displayMessage(t, e) {
        this.msgElem || (this.msgElem = this.createElement("div"),
        this.msgElem.classList.add("ejs_message"),
        this.elements.parent.appendChild(this.msgElem)),
        clearTimeout(this.msgTimeout),
        this.msgTimeout = setTimeout(( () => {
            this.msgElem.innerText = ""
        }
        ), "number" == typeof e && e > 0 ? e : 3e3),
        this.msgElem.innerText = t
    }
    downloadStartState() {
        return new Promise(( (t, e) => {
            "string" == typeof this.config.loadState || this.toData(this.config.loadState, !0) ? (this.textElem.innerText = this.localization("Download Game State"),
            this.downloadFile(this.config.loadState, (t => {
                this.textElem.innerText = this.localization("Download Game State") + t
            }
            ), !0, {
                responseType: "arraybuffer",
                method: "GET"
            }).then((e => {
                -1 !== e ? (this.on("start", ( () => {
                    setTimeout(( () => {
                        this.gameManager.loadState(new Uint8Array(e.data))
                    }
                    ), 10)
                }
                )),
                t()) : this.startGameError(this.localization("Error downloading game state"))
            }
            ))) : t()
        }
        ))
    }
    downloadGameFile(t, e, i, n) {
        return new Promise((async (s, o) => {
            if (!("string" == typeof t && t.trim() || this.toData(t, !0)))
                return s(t);
            const a = async e => {
                if (!0 === this.config.dontExtractBIOS)
                    return this.gameManager.FS.writeFile(t, new Uint8Array(e)),
                    s(t);
                const i = await this.checkCompression(new Uint8Array(e), n);
                for (const e in i) {
                    const n = "/" + this.fileName
                      , s = n.substring(0, n.length - n.split("/").pop().length);
                    if ("!!notCompressedData" === e) {
                        this.gameManager.FS.writeFile(s + t.split("/").pop().split("#")[0].split("?")[0], i[e]);
                        break
                    }
                    e.endsWith("/") || this.gameManager.FS.writeFile(s + e.split("/").pop(), i[e])
                }
            }
            ;
            if (this.textElem.innerText = i,
            !this.debug) {
                const i = await this.downloadFile(t, null, !0, {
                    method: "HEAD"
                })
                  , n = await this.storage.rom.get(t.split("/").pop());
                if (n && n["content-length"] === i.headers["content-length"] && n.type === e)
                    return await a(n.data),
                    s(t)
            }
            const l = await this.downloadFile(t, (t => {
                this.textElem.innerText = i + t
            }
            ), !0, {
                responseType: "arraybuffer",
                method: "GET"
            });
            if (-1 === l)
                return this.startGameError(this.localization("Network Error")),
                void s(t);
            t instanceof File ? t = t.name : this.toData(t, !0) && (t = "game"),
            await a(l.data),
            s(t);
            const r = "number" == typeof this.config.cacheLimit ? this.config.cacheLimit : 1073741824;
            parseFloat(l.headers["content-length"]) < r && this.saveInBrowserSupported() && "game" !== t && this.storage.rom.put(t.split("/").pop(), {
                "content-length": l.headers["content-length"],
                data: l.data,
                type: e
            })
        }
        ))
    }
    downloadGamePatch() {
        return new Promise((async t => {
            this.config.gamePatchUrl = await this.downloadGameFile(this.config.gamePatchUrl, "patch", this.localization("Download Game Patch"), this.localization("Decompress Game Patch")),
            t()
        }
        ))
    }
    downloadGameParent() {
        return new Promise((async t => {
            this.config.gameParentUrl = await this.downloadGameFile(this.config.gameParentUrl, "parent", this.localization("Download Game Parent"), this.localization("Decompress Game Parent")),
            t()
        }
        ))
    }
    downloadBios() {
        return new Promise((async t => {
            this.config.biosUrl = await this.downloadGameFile(this.config.biosUrl, "bios", this.localization("Download Game BIOS"), this.localization("Decompress Game BIOS")),
            t()
        }
        ))
    }
    downloadRom() {
        const t = t => {
            this.getCore();
            return !!this.extensions && this.extensions.includes(t)
        }
        ;
        return new Promise((e => {
            this.textElem.innerText = this.localization("Download Game Data");
            const i = i => {
                if (["arcade", "mame"].includes(this.getCore(!0)))
                    return this.fileName = this.getBaseFileName(!0),
                    this.gameManager.FS.writeFile(this.fileName, new Uint8Array(i)),
                    void e();
                const n = this.getBaseFileName(!0);
                let s = !1;
                s = !(!["pcsx_rearmed", "genesis_plus_gx", "picodrive", "mednafen_pce", "smsplus", "vice_x64", "vice_x64sc", "vice_x128", "vice_xvic", "vice_xplus4", "vice_xpet", "puae"].includes(this.getCore()) || void 0 !== this.config.disableCue) || this.config.disableCue;
                let o = [];
                this.checkCompression(new Uint8Array(i), this.localization("Decompress Game Data"), ( (t, e) => {
                    if (t.includes("/")) {
                        const e = t.split("/");
                        let i = "";
                        for (let t = 0; t < e.length - 1; t++)
                            "" !== e[t] && (i += `/${e[t]}`,
                            this.gameManager.FS.analyzePath(i).exists || this.gameManager.FS.mkdir(i))
                    }
                    t.endsWith("/") ? this.gameManager.FS.mkdir(t) : "!!notCompressedData" === t ? (this.gameManager.FS.writeFile(n, e),
                    o.push(n)) : (this.gameManager.FS.writeFile(`/${t}`, e),
                    o.push(t))
                }
                )).then(( () => {
                    let i = null
                      , n = null
                      , a = null
                      , l = null;
                    o.forEach((e => {
                        const s = e.split(".").pop().toLowerCase();
                        null === n && t(s) && (n = e),
                        null === i && ["iso", "cso", "chd", "elf"].includes(s) && (i = e),
                        ["cue", "ccd", "toc", "m3u"].includes(s) && ("psx" === this.getCore(!0) ? "m3u" !== l && (null !== a && "m3u" !== s || (a = e,
                        l = s)) : ["cue", "ccd"].includes(l) || (null === a || ["cue", "ccd"].includes(s)) && (a = e,
                        l = s))
                    }
                    )),
                    this.fileName = null !== n ? n : o[0],
                    null !== i && (t("iso") || t("cso") || t("chd") || t("elf")) ? this.fileName = i : (t("cue") || t("ccd") || t("toc") || t("m3u")) && (null !== a ? this.fileName = a : s || (this.fileName = this.gameManager.createCueFile(o))),
                    e()
                }
                ))
            }
              , n = async () => {
                const t = await this.downloadFile(this.config.gameUrl, (t => {
                    this.textElem.innerText = this.localization("Download Game Data") + t
                }
                ), !0, {
                    responseType: "arraybuffer",
                    method: "GET"
                });
                if (-1 === t)
                    return void this.startGameError(this.localization("Network Error"));
                this.config.gameUrl instanceof File ? this.config.gameUrl = this.config.gameUrl.name : this.toData(this.config.gameUrl, !0) && (this.config.gameUrl = "game"),
                i(t.data);
                const e = "number" == typeof this.config.cacheLimit ? this.config.cacheLimit : 1073741824;
                parseFloat(t.headers["content-length"]) < e && this.saveInBrowserSupported() && "game" !== this.config.gameUrl && this.storage.rom.put(this.config.gameUrl.split("/").pop(), {
                    "content-length": t.headers["content-length"],
                    data: t.data
                })
            }
            ;
            this.debug ? n() : this.downloadFile(this.config.gameUrl, null, !0, {
                method: "HEAD"
            }).then((async t => {
                const e = "string" == typeof this.config.gameUrl ? this.config.gameUrl.split("/").pop() : "game"
                  , s = await this.storage.rom.get(e);
                s && s["content-length"] === t.headers["content-length"] && "game" !== e ? i(s.data) : n()
            }
            ))
        }
        ))
    }
    downloadFiles() {
        (async () => {
            this.gameManager = new window.EJS_GameManager(this.Module,this),
            await this.gameManager.loadExternalFiles(),
            await this.gameManager.mountFileSystems(),
            this.callEvent("saveDatabaseLoaded", this.gameManager.FS),
            "ppsspp" === this.getCore() && await this.gameManager.loadPpssppAssets(),
            await this.downloadRom(),
            await this.downloadBios(),
            await this.downloadStartState(),
            await this.downloadGameParent(),
            await this.downloadGamePatch(),
            this.startGame()
        }
        )()
    }
    initModule(t, e) {
        if ("function" != typeof window.EJS_Runtime)
            throw console.warn("EJS_Runtime is not defined!"),
            this.startGameError(this.localization("Error loading EmulatorJS runtime")),
            new Error("EJS_Runtime is not defined!");
        window.EJS_Runtime({
            noInitialRun: !0,
            onRuntimeInitialized: null,
            arguments: [],
            preRun: [],
            postRun: [],
            canvas: this.canvas,
            callbacks: {},
            parent: this.elements.parent,
            print: t => {
                this.debug && console.log(t)
            }
            ,
            printErr: t => {
                this.debug && console.log(t)
            }
            ,
            totalDependencies: 0,
            locateFile: function(i) {
                return this.debug && console.log(i),
                i.endsWith(".wasm") ? URL.createObjectURL(new Blob([t],{
                    type: "application/wasm"
                })) : i.endsWith(".worker.js") ? URL.createObjectURL(new Blob([e],{
                    type: "application/javascript"
                })) : void 0
            },
            getSavExt: () => this.saveFileExt ? "." + this.saveFileExt : ".srm"
        }).then((t => {
            this.Module = t,
            this.downloadFiles()
        }
        )).catch((t => {
            console.warn(t),
            this.startGameError(this.localization("Failed to start game"))
        }
        ))
    }
    startGame() {
        try {
            const t = [];
            if (this.debug && t.push("-v"),
            t.push("/" + this.fileName),
            this.debug && console.log(t),
            this.Module.callMain(t),
            "number" == typeof this.config.softLoad && this.config.softLoad > 0 && (this.resetTimeout = setTimeout(( () => {
                this.gameManager.restart()
            }
            ), 1e3 * this.config.softLoad)),
            this.Module.resumeMainLoop(),
            this.checkSupportedOpts(),
            this.setupDisksMenu(),
            this.gameManager.getDiskCount() > 1 || (this.diskParent.style.display = "none"),
            this.setupSettingsMenu(),
            this.loadSettings(),
            this.updateCheatUI(),
            this.updateGamepadLabels(),
            this.muted || this.setVolume(this.volume),
            !0 !== this.config.noAutoFocus && this.elements.parent.focus(),
            this.textElem.remove(),
            this.textElem = null,
            this.game.classList.remove("ejs_game"),
            this.game.classList.add("ejs_canvas_parent"),
            this.game.appendChild(this.canvas),
            this.handleResize(),
            this.started = !0,
            this.paused = !1,
            this.touch && (this.virtualGamepad.style.display = ""),
            this.handleResize(),
            this.config.fullscreenOnLoad)
                try {
                    this.toggleFullscreen(!0)
                } catch (t) {
                    this.debug && console.warn("Could not fullscreen on load")
                }
            this.menu.open(),
            this.isSafari && this.isMobile && this.checkStarted()
        } catch (t) {
            return console.warn("Failed to start game", t),
            this.startGameError(this.localization("Failed to start game")),
            void this.callEvent("exit")
        }
        this.callEvent("start")
    }
    checkStarted() {
        (async () => {
            let t, e = t => new Promise((e => setTimeout(e, t))), i = "suspended";
            for (; "suspended" === i; ) {
                if (!this.Module.AL)
                    return;
                if (this.Module.AL.currentCtx.sources.forEach((t => {
                    i = t.gain.context.state
                }
                )),
                "suspended" !== i)
                    break;
                if (!t) {
                    t = this.createPopup("", {});
                    const e = this.createElement("button");
                    e.innerText = this.localization("Click to resume Emulator"),
                    e.classList.add("ejs_menu_button"),
                    e.style.width = "25%",
                    e.style.height = "25%",
                    t.appendChild(e),
                    t.style["text-align"] = "center",
                    t.style["font-size"] = "28px"
                }
                await e(10)
            }
            t && this.closePopup()
        }
        )()
    }
    bindListeners() {
        this.createContextMenu(),
        this.createBottomMenuBar(),
        this.createControlSettingMenu(),
        this.createCheatsMenu(),
        this.createNetplayMenu(),
        this.setVirtualGamepad(),
        this.addEventListener(this.elements.parent, "keydown keyup", this.keyChange.bind(this)),
        this.addEventListener(this.elements.parent, "mousedown touchstart", (t => {
            document.activeElement !== this.elements.parent && !0 !== this.config.noAutoFocus && this.elements.parent.focus()
        }
        )),
        this.addEventListener(window, "resize", this.handleResize.bind(this));
        let t = 0;
        this.elements.statePopupPanel = this.createPopup("", {}, !0),
        this.elements.statePopupPanel.innerText = this.localization("Drop save state here to load"),
        this.elements.statePopupPanel.style["text-align"] = "center",
        this.elements.statePopupPanel.style["font-size"] = "28px",
        this.addEventListener(window, "webkitfullscreenchange mozfullscreenchange fullscreenchange MSFullscreenChange", ( () => {
            setTimeout(( () => {
                this.handleResize.bind(this),
                !0 !== this.config.noAutoFocus && this.elements.parent.focus()
            }
            ), 0)
        }
        )),
        this.addEventListener(window, "beforeunload", (t => {
            this.started && this.callEvent("exit")
        }
        )),
        this.addEventListener(this.elements.parent, "dragenter", (e => {
            e.preventDefault(),
            this.started && (t++,
            this.elements.statePopupPanel.parentElement.style.display = "block")
        }
        )),
        this.addEventListener(this.elements.parent, "dragover", (t => {
            t.preventDefault()
        }
        )),
        this.addEventListener(this.elements.parent, "dragleave", (e => {
            e.preventDefault(),
            this.started && (t--,
            0 === t && (this.elements.statePopupPanel.parentElement.style.display = "none"))
        }
        )),
        this.addEventListener(this.elements.parent, "dragend", (e => {
            e.preventDefault(),
            this.started && (t = 0,
            this.elements.statePopupPanel.parentElement.style.display = "none")
        }
        )),
        this.addEventListener(this.elements.parent, "drop", (e => {
            if (e.preventDefault(),
            !this.started)
                return;
            this.elements.statePopupPanel.parentElement.style.display = "none",
            t = 0;
            const i = e.dataTransfer.items;
            let n;
            for (let t = 0; t < i.length; t++)
                if ("file" === i[t].kind) {
                    n = i[t];
                    break
                }
            if (!n)
                return;
            n.getAsFile().arrayBuffer().then((t => {
                this.gameManager.loadState(new Uint8Array(t))
            }
            ))
        }
        )),
        this.gamepad = new GamepadHandler,
        this.gamepad.on("connected", (t => {
            if (this.gamepadLabels) {
                for (let e = 0; e < this.gamepadSelection.length; e++)
                    if ("" === this.gamepadSelection[e]) {
                        this.gamepadSelection[e] = this.gamepad.gamepads[t.gamepadIndex].id + "_" + this.gamepad.gamepads[t.gamepadIndex].index;
                        break
                    }
                this.updateGamepadLabels()
            }
        }
        )),
        this.gamepad.on("disconnected", (t => {
            const e = this.gamepad.gamepads.indexOf(this.gamepad.gamepads.find((e => e.index == t.gamepadIndex)))
              , i = this.gamepad.gamepads[e].id + "_" + this.gamepad.gamepads[e].index;
            for (let t = 0; t < this.gamepadSelection.length; t++)
                this.gamepadSelection[t] === i && (this.gamepadSelection[t] = "");
            setTimeout(this.updateGamepadLabels.bind(this), 10)
        }
        )),
        this.gamepad.on("axischanged", this.gamepadEvent.bind(this)),
        this.gamepad.on("buttondown", this.gamepadEvent.bind(this)),
        this.gamepad.on("buttonup", this.gamepadEvent.bind(this))
    }
    checkSupportedOpts() {
        this.gameManager.supportsStates() || (this.elements.bottomBar.saveState[0].style.display = "none",
        this.elements.bottomBar.loadState[0].style.display = "none",
        this.elements.bottomBar.netplay[0].style.display = "none",
        this.elements.contextMenu.save.style.display = "none",
        this.elements.contextMenu.load.style.display = "none"),
        "number" == typeof this.config.gameId && this.config.netplayUrl && !1 !== this.netplayEnabled || (this.elements.bottomBar.netplay[0].style.display = "none")
    }
    updateGamepadLabels() {
        for (let t = 0; t < this.gamepadLabels.length; t++) {
            this.gamepadLabels[t].innerHTML = "";
            const e = this.createElement("option");
            e.setAttribute("value", "notconnected"),
            e.innerText = "Not Connected",
            this.gamepadLabels[t].appendChild(e);
            for (let e = 0; e < this.gamepad.gamepads.length; e++) {
                const i = this.createElement("option");
                i.setAttribute("value", this.gamepad.gamepads[e].id + "_" + this.gamepad.gamepads[e].index),
                i.innerText = this.gamepad.gamepads[e].id + "_" + this.gamepad.gamepads[e].index,
                this.gamepadLabels[t].appendChild(i)
            }
            this.gamepadLabels[t].value = this.gamepadSelection[t] || "notconnected"
        }
    }
    createLink(t, e, i, n) {
        const s = this.createElement("a");
        if (s.href = e,
        s.target = "_blank",
        s.innerText = this.localization(i),
        n) {
            const e = this.createElement("p");
            e.appendChild(s),
            t.appendChild(e)
        } else
            t.appendChild(s)
    }
    defaultButtonOptions = {
        playPause: {
            visible: !0,
            icon: "play",
            displayName: "Play/Pause"
        },
        play: {
            visible: !0,
            icon: '<svg viewBox="0 0 320 512"><path d="M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z"/></svg>',
            displayName: "Play"
        },
        pause: {
            visible: !0,
            icon: '<svg viewBox="0 0 320 512"><path d="M272 63.1l-32 0c-26.51 0-48 21.49-48 47.1v288c0 26.51 21.49 48 48 48L272 448c26.51 0 48-21.49 48-48v-288C320 85.49 298.5 63.1 272 63.1zM80 63.1l-32 0c-26.51 0-48 21.49-48 48v288C0 426.5 21.49 448 48 448l32 0c26.51 0 48-21.49 48-48v-288C128 85.49 106.5 63.1 80 63.1z"/></svg>',
            displayName: "Pause"
        },
        restart: {
            visible: !0,
            icon: '<svg viewBox="0 0 512 512"><path d="M496 48V192c0 17.69-14.31 32-32 32H320c-17.69 0-32-14.31-32-32s14.31-32 32-32h63.39c-29.97-39.7-77.25-63.78-127.6-63.78C167.7 96.22 96 167.9 96 256s71.69 159.8 159.8 159.8c34.88 0 68.03-11.03 95.88-31.94c14.22-10.53 34.22-7.75 44.81 6.375c10.59 14.16 7.75 34.22-6.375 44.81c-39.03 29.28-85.36 44.86-134.2 44.86C132.5 479.9 32 379.4 32 256s100.5-223.9 223.9-223.9c69.15 0 134 32.47 176.1 86.12V48c0-17.69 14.31-32 32-32S496 30.31 496 48z"/></svg>',
            displayName: "Restart"
        },
        mute: {
            visible: !0,
            icon: '<svg viewBox="0 0 640 512"><path d="M412.6 182c-10.28-8.334-25.41-6.867-33.75 3.402c-8.406 10.24-6.906 25.35 3.375 33.74C393.5 228.4 400 241.8 400 255.1c0 14.17-6.5 27.59-17.81 36.83c-10.28 8.396-11.78 23.5-3.375 33.74c4.719 5.806 11.62 8.802 18.56 8.802c5.344 0 10.75-1.779 15.19-5.399C435.1 311.5 448 284.6 448 255.1S435.1 200.4 412.6 182zM473.1 108.2c-10.22-8.334-25.34-6.898-33.78 3.34c-8.406 10.24-6.906 25.35 3.344 33.74C476.6 172.1 496 213.3 496 255.1s-19.44 82.1-53.31 110.7c-10.25 8.396-11.75 23.5-3.344 33.74c4.75 5.775 11.62 8.771 18.56 8.771c5.375 0 10.75-1.779 15.22-5.431C518.2 366.9 544 313 544 255.1S518.2 145 473.1 108.2zM534.4 33.4c-10.22-8.334-25.34-6.867-33.78 3.34c-8.406 10.24-6.906 25.35 3.344 33.74C559.9 116.3 592 183.9 592 255.1s-32.09 139.7-88.06 185.5c-10.25 8.396-11.75 23.5-3.344 33.74C505.3 481 512.2 484 519.2 484c5.375 0 10.75-1.779 15.22-5.431C601.5 423.6 640 342.5 640 255.1S601.5 88.34 534.4 33.4zM301.2 34.98c-11.5-5.181-25.01-3.076-34.43 5.29L131.8 160.1H48c-26.51 0-48 21.48-48 47.96v95.92c0 26.48 21.49 47.96 48 47.96h83.84l134.9 119.8C272.7 477 280.3 479.8 288 479.8c4.438 0 8.959-.9314 13.16-2.835C312.7 471.8 320 460.4 320 447.9V64.12C320 51.55 312.7 40.13 301.2 34.98z"/></svg>',
            displayName: "Mute"
        },
        unmute: {
            visible: !0,
            icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 576 512"><path d="M301.2 34.85c-11.5-5.188-25.02-3.122-34.44 5.253L131.8 160H48c-26.51 0-48 21.49-48 47.1v95.1c0 26.51 21.49 47.1 48 47.1h83.84l134.9 119.9c5.984 5.312 13.58 8.094 21.26 8.094c4.438 0 8.972-.9375 13.17-2.844c11.5-5.156 18.82-16.56 18.82-29.16V64C319.1 51.41 312.7 40 301.2 34.85zM513.9 255.1l47.03-47.03c9.375-9.375 9.375-24.56 0-33.94s-24.56-9.375-33.94 0L480 222.1L432.1 175c-9.375-9.375-24.56-9.375-33.94 0s-9.375 24.56 0 33.94l47.03 47.03l-47.03 47.03c-9.375 9.375-9.375 24.56 0 33.94c9.373 9.373 24.56 9.381 33.94 0L480 289.9l47.03 47.03c9.373 9.373 24.56 9.381 33.94 0c9.375-9.375 9.375-24.56 0-33.94L513.9 255.1z"/></svg>',
            displayName: "Unmute"
        },
        settings: {
            visible: !0,
            icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M495.9 166.6C499.2 175.2 496.4 184.9 489.6 191.2L446.3 230.6C447.4 238.9 448 247.4 448 256C448 264.6 447.4 273.1 446.3 281.4L489.6 320.8C496.4 327.1 499.2 336.8 495.9 345.4C491.5 357.3 486.2 368.8 480.2 379.7L475.5 387.8C468.9 398.8 461.5 409.2 453.4 419.1C447.4 426.2 437.7 428.7 428.9 425.9L373.2 408.1C359.8 418.4 344.1 427 329.2 433.6L316.7 490.7C314.7 499.7 307.7 506.1 298.5 508.5C284.7 510.8 270.5 512 255.1 512C241.5 512 227.3 510.8 213.5 508.5C204.3 506.1 197.3 499.7 195.3 490.7L182.8 433.6C167 427 152.2 418.4 138.8 408.1L83.14 425.9C74.3 428.7 64.55 426.2 58.63 419.1C50.52 409.2 43.12 398.8 36.52 387.8L31.84 379.7C25.77 368.8 20.49 357.3 16.06 345.4C12.82 336.8 15.55 327.1 22.41 320.8L65.67 281.4C64.57 273.1 64 264.6 64 256C64 247.4 64.57 238.9 65.67 230.6L22.41 191.2C15.55 184.9 12.82 175.3 16.06 166.6C20.49 154.7 25.78 143.2 31.84 132.3L36.51 124.2C43.12 113.2 50.52 102.8 58.63 92.95C64.55 85.8 74.3 83.32 83.14 86.14L138.8 103.9C152.2 93.56 167 84.96 182.8 78.43L195.3 21.33C197.3 12.25 204.3 5.04 213.5 3.51C227.3 1.201 241.5 0 256 0C270.5 0 284.7 1.201 298.5 3.51C307.7 5.04 314.7 12.25 316.7 21.33L329.2 78.43C344.1 84.96 359.8 93.56 373.2 103.9L428.9 86.14C437.7 83.32 447.4 85.8 453.4 92.95C461.5 102.8 468.9 113.2 475.5 124.2L480.2 132.3C486.2 143.2 491.5 154.7 495.9 166.6V166.6zM256 336C300.2 336 336 300.2 336 255.1C336 211.8 300.2 175.1 256 175.1C211.8 175.1 176 211.8 176 255.1C176 300.2 211.8 336 256 336z"/></svg>',
            displayName: "Settings"
        },
        fullscreen: {
            visible: !0,
            icon: "fullscreen",
            displayName: "Fullscreen"
        },
        enterFullscreen: {
            visible: !0,
            icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M208 281.4c-12.5-12.5-32.76-12.5-45.26-.002l-78.06 78.07l-30.06-30.06c-6.125-6.125-14.31-9.367-22.63-9.367c-4.125 0-8.279 .7891-12.25 2.43c-11.97 4.953-19.75 16.62-19.75 29.56v135.1C.0013 501.3 10.75 512 24 512h136c12.94 0 24.63-7.797 29.56-19.75c4.969-11.97 2.219-25.72-6.938-34.87l-30.06-30.06l78.06-78.07c12.5-12.49 12.5-32.75 .002-45.25L208 281.4zM487.1 0h-136c-12.94 0-24.63 7.797-29.56 19.75c-4.969 11.97-2.219 25.72 6.938 34.87l30.06 30.06l-78.06 78.07c-12.5 12.5-12.5 32.76 0 45.26l22.62 22.62c12.5 12.5 32.76 12.5 45.26 0l78.06-78.07l30.06 30.06c9.156 9.141 22.87 11.84 34.87 6.937C504.2 184.6 512 172.9 512 159.1V23.1C512 10.74 501.3 0 487.1 0z"/></svg>',
            displayName: "Enter Fullscreen"
        },
        exitFullscreen: {
            visible: !0,
            icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path d="M215.1 272h-136c-12.94 0-24.63 7.797-29.56 19.75C45.47 303.7 48.22 317.5 57.37 326.6l30.06 30.06l-78.06 78.07c-12.5 12.5-12.5 32.75-.0012 45.25l22.62 22.62c12.5 12.5 32.76 12.5 45.26 .0013l78.06-78.07l30.06 30.06c6.125 6.125 14.31 9.367 22.63 9.367c4.125 0 8.279-.7891 12.25-2.43c11.97-4.953 19.75-16.62 19.75-29.56V296C239.1 282.7 229.3 272 215.1 272zM296 240h136c12.94 0 24.63-7.797 29.56-19.75c4.969-11.97 2.219-25.72-6.938-34.87l-30.06-30.06l78.06-78.07c12.5-12.5 12.5-32.76 .0002-45.26l-22.62-22.62c-12.5-12.5-32.76-12.5-45.26-.0003l-78.06 78.07l-30.06-30.06c-9.156-9.141-22.87-11.84-34.87-6.937c-11.97 4.953-19.75 16.62-19.75 29.56v135.1C272 229.3 282.7 240 296 240z"/></svg>',
            displayName: "Exit Fullscreen"
        },
        saveState: {
            visible: !0,
            icon: '<svg viewBox="0 0 448 512"><path fill="currentColor" d="M433.941 129.941l-83.882-83.882A48 48 0 0 0 316.118 32H48C21.49 32 0 53.49 0 80v352c0 26.51 21.49 48 48 48h352c26.51 0 48-21.49 48-48V163.882a48 48 0 0 0-14.059-33.941zM224 416c-35.346 0-64-28.654-64-64 0-35.346 28.654-64 64-64s64 28.654 64 64c0 35.346-28.654 64-64 64zm96-304.52V212c0 6.627-5.373 12-12 12H76c-6.627 0-12-5.373-12-12V108c0-6.627 5.373-12 12-12h228.52c3.183 0 6.235 1.264 8.485 3.515l3.48 3.48A11.996 11.996 0 0 1 320 111.48z"/></svg>',
            displayName: "Save State"
        },
        loadState: {
            visible: !0,
            icon: '<svg viewBox="0 0 576 512"><path fill="currentColor" d="M572.694 292.093L500.27 416.248A63.997 63.997 0 0 1 444.989 448H45.025c-18.523 0-30.064-20.093-20.731-36.093l72.424-124.155A64 64 0 0 1 152 256h399.964c18.523 0 30.064 20.093 20.73 36.093zM152 224h328v-48c0-26.51-21.49-48-48-48H272l-64-64H48C21.49 64 0 85.49 0 112v278.046l69.077-118.418C86.214 242.25 117.989 224 152 224z"/></svg>',
            displayName: "Load State"
        },
        screenRecord: {
            visible: !0
        },
        gamepad: {
            visible: !0,
            icon: '<svg viewBox="0 0 640 512"><path fill="currentColor" d="M480 96H160C71.6 96 0 167.6 0 256s71.6 160 160 160c44.8 0 85.2-18.4 114.2-48h91.5c29 29.6 69.5 48 114.2 48 88.4 0 160-71.6 160-160S568.4 96 480 96zM256 276c0 6.6-5.4 12-12 12h-52v52c0 6.6-5.4 12-12 12h-40c-6.6 0-12-5.4-12-12v-52H76c-6.6 0-12-5.4-12-12v-40c0-6.6 5.4-12 12-12h52v-52c0-6.6 5.4-12 12-12h40c6.6 0 12 5.4 12 12v52h52c6.6 0 12 5.4 12 12v40zm184 68c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48zm80-80c-26.5 0-48-21.5-48-48s21.5-48 48-48 48 21.5 48 48-21.5 48-48 48z"/></svg>',
            displayName: "Control Settings"
        },
        cheat: {
            visible: !0,
            icon: '<svg viewBox="0 0 496 512"><path fill="currentColor" d="M248 8C111 8 0 119 0 256s111 248 248 248 248-111 248-248S385 8 248 8zm0 448c-110.3 0-200-89.7-200-200S137.7 56 248 56s200 89.7 200 200-89.7 200-200 200zm-80-216c17.7 0 32-14.3 32-32s-14.3-32-32-32-32 14.3-32 32 14.3 32 32 32zm160 0c17.7 0 32-14.3 32-32s-14.3-32-32-32-32 14.3-32 32 14.3 32 32 32zm4 72.6c-20.8 25-51.5 39.4-84 39.4s-63.2-14.3-84-39.4c-8.5-10.2-23.7-11.5-33.8-3.1-10.2 8.5-11.5 23.6-3.1 33.8 30 36 74.1 56.6 120.9 56.6s90.9-20.6 120.9-56.6c8.5-10.2 7.1-25.3-3.1-33.8-10.1-8.4-25.3-7.1-33.8 3.1z" class=""></path></svg>',
            displayName: "Cheats"
        },
        volumeSlider: {
            visible: !0
        },
        saveSavFiles: {
            visible: !0,
            icon: '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 23 23"><path d="M3 6.5V5C3 3.89543 3.89543 3 5 3H16.1716C16.702 3 17.2107 3.21071 17.5858 3.58579L20.4142 6.41421C20.7893 6.78929 21 7.29799 21 7.82843V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V17.5" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" fill="transparent"></path><path d="M8 3H16V8.4C16 8.73137 15.7314 9 15.4 9H8.6C8.26863 9 8 8.73137 8 8.4V3Z" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" fill="transparent"></path><path d="M18 21V13.6C18 13.2686 17.7314 13 17.4 13H15" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" fill="transparent"></path><path d="M6 21V17.5" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" fill="transparent"></path><path d="M12 12H1M1 12L4 9M1 12L4 15" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg>',
            displayName: "Export Save File"
        },
        loadSavFiles: {
            visible: !0,
            icon: '<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 23 23"><path d="M3 7.5V5C3 3.89543 3.89543 3 5 3H16.1716C16.702 3 17.2107 3.21071 17.5858 3.58579L20.4142 6.41421C20.7893 6.78929 21 7.29799 21 7.82843V19C21 20.1046 20.1046 21 19 21H5C3.89543 21 3 20.1046 3 19V16.5" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" fill="transparent"></path><path d="M6 21V17" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M18 21V13.6C18 13.2686 17.7314 13 17.4 13H15" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" fill="transparent"></path><path d="M16 3V8.4C16 8.73137 15.7314 9 15.4 9H13.5" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" fill="transparent"></path><path d="M8 3V6" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path><path d="M1 12H12M12 12L9 9M12 12L9 15" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round"></path></svg>',
            displayName: "Import Save File"
        },
        quickSave: {
            visible: !0
        },
        quickLoad: {
            visible: !0
        },
        screenshot: {
            visible: !0
        },
        cacheManager: {
            visible: !0,
            icon: '<svg viewBox="0 0 1800 1800"><path d="M896 768q237 0 443-43t325-127v170q0 69-103 128t-280 93.5-385 34.5-385-34.5T231 896 128 768V598q119 84 325 127t443 43zm0 768q237 0 443-43t325-127v170q0 69-103 128t-280 93.5-385 34.5-385-34.5-280-93.5-103-128v-170q119 84 325 127t443 43zm0-384q237 0 443-43t325-127v170q0 69-103 128t-280 93.5-385 34.5-385-34.5-280-93.5-103-128V982q119 84 325 127t443 43zM896 0q208 0 385 34.5t280 93.5 103 128v128q0 69-103 128t-280 93.5T896 640t-385-34.5T231 512 128 384V256q0-69 103-128t280-93.5T896 0z"/></svg>',
            displayName: "Cache Manager"
        },
        exitEmulation: {
            visible: !0,
            icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 460 460"><path style="fill:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(255,255,255);stroke-opacity:1;stroke-miterlimit:4;" d="M 14.000061 7.636414 L 14.000061 4.5 C 14.000061 4.223877 13.776123 3.999939 13.5 3.999939 L 4.5 3.999939 C 4.223877 3.999939 3.999939 4.223877 3.999939 4.5 L 3.999939 19.5 C 3.999939 19.776123 4.223877 20.000061 4.5 20.000061 L 13.5 20.000061 C 13.776123 20.000061 14.000061 19.776123 14.000061 19.5 L 14.000061 16.363586 " transform="matrix(21.333333,0,0,21.333333,0,0)"/><path style="fill:none;stroke-width:3;stroke-linecap:round;stroke-linejoin:round;stroke:rgb(255,255,255);stroke-opacity:1;stroke-miterlimit:4;" d="M 9.999939 12 L 21 12 M 21 12 L 18.000366 8.499939 M 21 12 L 18 15.500061 " transform="matrix(21.333333,0,0,21.333333,0,0)"/></svg>',
            displayName: "Exit Emulation"
        },
        netplay: {
            visible: !1,
            icon: '<svg viewBox="0 0 512 512"><path fill="currentColor" d="M364.215 192h131.43c5.439 20.419 8.354 41.868 8.354 64s-2.915 43.581-8.354 64h-131.43c5.154-43.049 4.939-86.746 0-128zM185.214 352c10.678 53.68 33.173 112.514 70.125 151.992.221.001.44.008.661.008s.44-.008.661-.008c37.012-39.543 59.467-98.414 70.125-151.992H185.214zm174.13-192h125.385C452.802 84.024 384.128 27.305 300.95 12.075c30.238 43.12 48.821 96.332 58.394 147.925zm-27.35 32H180.006c-5.339 41.914-5.345 86.037 0 128h151.989c5.339-41.915 5.345-86.037-.001-128zM152.656 352H27.271c31.926 75.976 100.6 132.695 183.778 147.925-30.246-43.136-48.823-96.35-58.393-147.925zm206.688 0c-9.575 51.605-28.163 104.814-58.394 147.925 83.178-15.23 151.852-71.949 183.778-147.925H359.344zm-32.558-192c-10.678-53.68-33.174-112.514-70.125-151.992-.221 0-.44-.008-.661-.008s-.44.008-.661.008C218.327 47.551 195.872 106.422 185.214 160h141.572zM16.355 192C10.915 212.419 8 233.868 8 256s2.915 43.581 8.355 64h131.43c-4.939-41.254-5.154-84.951 0-128H16.355zm136.301-32c9.575-51.602 28.161-104.81 58.394-147.925C127.872 27.305 59.198 84.024 27.271 160h125.385z"/></svg>',
            displayName: "Netplay"
        },
        diskButton: {
            visible: !0,
            icon: '<svg fill="#FFFFFF" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 473.109 473.109"><path d="M340.963,101.878H12.105C5.423,101.878,0,107.301,0,113.983v328.862c0,6.68,5.423,12.105,12.105,12.105h328.857 c6.685,0,12.104-5.426,12.104-12.105V113.983C353.067,107.301,347.647,101.878,340.963,101.878z M67.584,120.042h217.895v101.884 H67.584V120.042z M296.076,429.228H56.998V278.414h239.079V429.228z M223.947,135.173h30.269v72.638h-30.269V135.173z M274.13,315.741H78.933v-12.105H274.13V315.741z M274.13,358.109H78.933v-12.105H274.13V358.109z M274.13,398.965H78.933v-12.105 H274.13V398.965z M473.109,30.263v328.863c0,6.68-5.426,12.105-12.105,12.105H384.59v-25.724h31.528V194.694H384.59v-56.489h20.93 V36.321H187.625v43.361h-67.583v-49.42c0-6.682,5.423-12.105,12.105-12.105H461.01C467.695,18.158,473.109,23.581,473.109,30.263z M343.989,51.453h30.269v31.321c-3.18-1.918-6.868-3.092-10.853-3.092h-19.416V51.453z M394.177,232.021h-9.581v-12.105h9.581 V232.021z M384.59,262.284h9.581v12.105h-9.581V262.284z M384.59,303.14h9.581v12.104h-9.581V303.14z"/></svg>',
            displayName: "Disks"
        },
        contextMenu: {
            visible: !0,
            icon: '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">\x3c!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2023 Fonticons, Inc.--\x3e<path d="M0 96C0 78.3 14.3 64 32 64H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 128 0 113.7 0 96zM0 256c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z"/></svg>',
            displayName: "Context Menu"
        }
    };
    defaultButtonAliases = {
        volume: "volumeSlider"
    };
    buildButtonOptions(t) {
        let e = this.defaultButtonOptions;
        if (t)
            for (const i in t) {
                let n = i;
                if (this.defaultButtonAliases[i] && (n = this.defaultButtonAliases[i]),
                "contextMenu" !== n)
                    if (e[n]) {
                        if ("boolean" == typeof t[n])
                            e[n].visible = t[n];
                        else if ("object" == typeof t[n])
                            if (this.defaultButtonOptions[n])
                                for (const i in t[n])
                                    null !== t[n][i] && (e[n][i] = t[n][i]);
                            else
                                t[n].displayName && t[n].icon && t[n].callback ? e[n] = {
                                    visible: !0,
                                    displayName: t[n].displayName,
                                    icon: t[n].icon,
                                    callback: t[n].callback,
                                    custom: !0
                                } : console.warn(`Custom button "${n}" is missing required properties`);
                        switch (n) {
                        case "playPause":
                            e.play.visible = e.playPause.visible,
                            e.pause.visible = e.playPause.visible;
                            break;
                        case "mute":
                            e.unmute.visible = e.mute.visible;
                            break;
                        case "fullscreen":
                            e.enterFullscreen.visible = e.fullscreen.visible,
                            e.exitFullscreen.visible = e.fullscreen.visible
                        }
                    } else
                        console.warn(`Button "${n}" is not a valid button.`)
            }
        return e
    }
    createContextMenu() {
        this.elements.contextmenu = this.createElement("div"),
        this.elements.contextmenu.classList.add("ejs_context_menu"),
        this.addEventListener(this.game, "contextmenu", (t => {
            if (t.preventDefault(),
            this.config.buttonOpts && !1 === this.config.buttonOpts.rightClick || !this.started)
                return;
            const e = this.elements.parent.getBoundingClientRect();
            this.elements.contextmenu.style.display = "block";
            const i = this.elements.contextmenu.getBoundingClientRect()
              , n = t.offsetY + i.height > e.height - 25
              , s = t.offsetX + i.width > e.width - 5;
            this.elements.contextmenu.style.left = t.offsetX - (s ? i.width : 0) + "px",
            this.elements.contextmenu.style.top = t.offsetY - (n ? i.height : 0) + "px"
        }
        ));
        const t = () => {
            this.elements.contextmenu.style.display = "none"
        }
        ;
        this.addEventListener(this.elements.contextmenu, "contextmenu", (t => t.preventDefault())),
        this.addEventListener(this.elements.parent, "contextmenu", (t => t.preventDefault())),
        this.addEventListener(this.game, "mousedown touchend", t);
        const e = this.createElement("ul")
          , i = (i, n, s) => {
            const o = this.createElement("li");
            n && (o.hidden = !0);
            const a = this.createElement("a");
            return s instanceof Function && this.addEventListener(o, "click", (t => {
                t.preventDefault(),
                s()
            }
            )),
            a.href = "#",
            a.onclick = "return false",
            a.innerText = this.localization(i),
            o.appendChild(a),
            e.appendChild(o),
            t(),
            o
        }
        ;
        let n;
        const s = i("Take Screenshot", !1, ( () => {
            n && URL.revokeObjectURL(n);
            const e = new Date
              , i = this.getBaseFileName() + "-" + e.getMonth() + "-" + e.getDate() + "-" + e.getFullYear();
            this.screenshot(( (e, s) => {
                n = URL.createObjectURL(e);
                const o = this.createElement("a");
                o.href = n,
                o.download = i + "." + s,
                o.click(),
                t()
            }
            ))
        }
        ));
        let o = null;
        const a = i("Start Screen Recording", !1, ( () => {
            null !== o && o.stop(),
            o = this.screenRecord(),
            a.setAttribute("hidden", "hidden"),
            l.removeAttribute("hidden"),
            t()
        }
        ))
          , l = i("Stop Screen Recording", !0, ( () => {
            null !== o && (o.stop(),
            o = null),
            a.removeAttribute("hidden"),
            l.setAttribute("hidden", "hidden"),
            t()
        }
        ))
          , r = i("Quick Save", !1, ( () => {
            const e = this.getSettingValue("save-state-slot") ? this.getSettingValue("save-state-slot") : "1";
            this.gameManager.quickSave(e) ? this.displayMessage(this.localization("SAVED STATE TO SLOT") + " " + e) : this.displayMessage(this.localization("FAILED TO SAVE STATE")),
            t()
        }
        ))
          , c = i("Quick Load", !1, ( () => {
            const e = this.getSettingValue("save-state-slot") ? this.getSettingValue("save-state-slot") : "1";
            this.gameManager.quickLoad(e),
            this.displayMessage(this.localization("LOADED STATE FROM SLOT") + " " + e),
            t()
        }
        ));
        this.elements.contextMenu = {
            screenshot: s,
            startScreenRecording: a,
            stopScreenRecording: l,
            save: r,
            load: c
        },
        i("EmulatorJS v" + this.ejs_version, !1, ( () => {
            t();
            const e = this.createPopup("EmulatorJS", {
                Close: () => {
                    this.closePopup()
                }
            });
            e.style.display = "flex";
            const i = this.createElement("div");
            e.appendChild(i),
            i.classList.add("ejs_list_selector");
            const n = this.createElement("ul")
              , s = (e, i, s) => {
                const o = this.createElement("li");
                i && (o.hidden = !0);
                const a = this.createElement("a");
                return s instanceof Function && this.addEventListener(o, "click", (t => {
                    t.preventDefault(),
                    s(o)
                }
                )),
                a.href = "#",
                a.onclick = "return false",
                a.innerText = this.localization(e),
                o.appendChild(a),
                n.appendChild(o),
                t(),
                o
            }
              , o = this.createElement("div")
              , a = this.createElement("div");
            a.style.display = "none";
            const l = this.createElement("div");
            l.style.display = "none";
            const r = this.createElement("div");
            r.style.display = "none",
            e.appendChild(o),
            e.appendChild(a),
            e.appendChild(l),
            e.appendChild(r),
            o.innerText = "EmulatorJS v" + this.ejs_version,
            o.appendChild(this.createElement("br")),
            o.appendChild(this.createElement("br")),
            o.classList.add("ejs_context_menu_tab"),
            a.classList.add("ejs_context_menu_tab"),
            l.classList.add("ejs_context_menu_tab"),
            r.classList.add("ejs_context_menu_tab"),
            this.createLink(o, "https://github.com/EmulatorJS/EmulatorJS", "View on GitHub", !0),
            this.createLink(o, "https://discord.gg/6akryGkETU", "Join the discord", !0);
            const c = this.createElement("div");
            this.createLink(c, "https://emulatorjs.org", "EmulatorJS"),
            c.innerHTML += " is powered by ",
            this.createLink(c, "https://github.com/libretro/RetroArch/", "RetroArch"),
            this.repository && this.coreName ? (c.innerHTML += ". This core is powered by ",
            this.createLink(c, this.repository, this.coreName),
            c.innerHTML += ".") : c.innerHTML += ".",
            o.appendChild(c),
            o.appendChild(this.createElement("br")),
            i.appendChild(n);
            let d = o;
            const g = (t, e) => {
                if (d === t)
                    return;
                d && (d.style.display = "none");
                let i = e.parentElement.querySelector(".ejs_active_list_element");
                i && i.classList.remove("ejs_active_list_element"),
                e.classList.add("ejs_active_list_element"),
                d = t,
                t.style.display = ""
            }
            ;
            s("Home", !1, (t => {
                g(o, t)
            }
            )).classList.add("ejs_active_list_element"),
            s("EmulatorJS License", !1, (t => {
                g(a, t)
            }
            )),
            s("RetroArch License", !1, (t => {
                g(l, t)
            }
            )),
            this.coreName && this.license && (s(this.coreName + " License", !1, (t => {
                g(r, t)
            }
            )),
            r.innerText = this.license),
            l.innerText = this.localization("This project is powered by") + " ";
            const h = this.createElement("a");
            h.href = "https://github.com/libretro/RetroArch",
            h.target = "_blank",
            h.innerText = "RetroArch",
            l.appendChild(h);
            const p = this.createElement("a");
            p.target = "_blank",
            p.href = "https://github.com/libretro/RetroArch/blob/master/COPYING",
            p.innerText = this.localization("View the RetroArch license here"),
            h.appendChild(this.createElement("br")),
            h.appendChild(p),
            a.innerText = '                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers\' and authors\' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users\' and\nauthors\' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users\' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  "This License" refers to version 3 of the GNU General Public License.\n\n  "Copyright" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  "The Program" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as "you".  "Licensees" and\n"recipients" may be individuals or organizations.\n\n  To "modify" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a "modified version" of the\nearlier work or a work "based on" the earlier work.\n\n  A "covered work" means either the unmodified Program or a work based\non the Program.\n\n  To "propagate" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To "convey" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays "Appropriate Legal Notices"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The "source code" for a work means the preferred form of the work\nfor making modifications to it.  "Object code" means any non-source\nform of a work.\n\n  A "Standard Interface" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The "System Libraries" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n"Major Component", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The "Corresponding Source" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work\'s\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users\' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work\'s\nusers, your or third parties\' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program\'s source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    "keep intact all notices".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n"aggregate" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation\'s users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A "User Product" is either (1) a "consumer product", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, "normally used" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  "Installation Information" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  "Additional permissions" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered "further\nrestrictions" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An "entity transaction" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party\'s predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A "contributor" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor\'s "contributor version".\n\n  A contributor\'s "essential patent claims" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, "control" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor\'s essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a "patent license" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To "grant" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  "Knowingly relying" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient\'s use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is "discriminatory" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others\' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License "or any later version" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy\'s\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe "copyright" line and a pointer to where the full notice is found.\n\n    EmulatorJS: RetroArch on the web\n    Copyright (C) 2022-2024  Ethan O\'Brien\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    EmulatorJS  Copyright (C) 2023-2025  Ethan O\'Brien\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w\'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c\' for details.\n\nThe hypothetical commands `show w\' and `show c\' should show the appropriate\nparts of the General Public License.  Of course, your program\'s commands\nmight be different; for a GUI interface, you would use an "about box".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a "copyright disclaimer" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n'
        }
        )),
        this.config.buttonOpts && (!1 === this.config.buttonOpts.screenshot.visible && s.setAttribute("hidden", ""),
        !1 === this.config.buttonOpts.screenRecord.visible && a.setAttribute("hidden", ""),
        !1 === this.config.buttonOpts.quickSave.visible && r.setAttribute("hidden", ""),
        !1 === this.config.buttonOpts.quickLoad.visible && c.setAttribute("hidden", "")),
        this.elements.contextmenu.appendChild(e),
        this.elements.parent.appendChild(this.elements.contextmenu)
    }
    closePopup() {
        if (null !== this.currentPopup) {
            try {
                this.currentPopup.remove()
            } catch (t) {}
            this.currentPopup = null
        }
    }
    createPopup(t, e, i) {
        i || this.closePopup();
        const n = this.createElement("div");
        n.classList.add("ejs_popup_container"),
        this.elements.parent.appendChild(n);
        const s = this.createElement("h4");
        s.innerText = this.localization(t);
        const o = this.createElement("div");
        o.classList.add("ejs_popup_body"),
        n.appendChild(s),
        n.appendChild(o);
        const a = this.createElement("div");
        a.style["padding-top"] = "10px",
        n.appendChild(a);
        for (let t in e) {
            const i = this.createElement("a");
            e[t]instanceof Function && i.addEventListener("click", (i => {
                e[t](),
                i.preventDefault()
            }
            )),
            i.classList.add("ejs_button"),
            i.innerText = this.localization(t),
            n.appendChild(i)
        }
        return i ? n.style.display = "none" : this.currentPopup = n,
        o
    }
    selectFile() {
        return new Promise(( (t, e) => {
            const i = this.createElement("input");
            i.type = "file",
            this.addEventListener(i, "change", (e => {
                t(e.target.files[0])
            }
            )),
            i.click()
        }
        ))
    }
    isPopupOpen() {
        return "none" !== this.cheatMenu.style.display || "none" !== this.netplayMenu.style.display || "none" !== this.controlMenu.style.display || null !== this.currentPopup
    }
    isChild(t, e) {
        if (!t || !e)
            return !1;
        const i = 9 === t.nodeType ? t.documentElement : t;
        return t === e || (i.contains ? i.contains(e) : t.compareDocumentPosition && 16 & t.compareDocumentPosition(e))
    }
    createBottomMenuBar() {
        this.elements.menu = this.createElement("div"),
        this.elements.menu.style.opacity = 0,
        this.on("start", (t => {
            this.elements.menu.style.opacity = ""
        }
        )),
        this.elements.menu.classList.add("ejs_menu_bar"),
        this.elements.menu.classList.add("ejs_menu_bar_hidden");
        let t = null
          , e = !1;
        const i = () => {
            this.paused || this.settingsMenuOpen || this.disksMenuOpen || this.elements.menu.classList.add("ejs_menu_bar_hidden")
        }
          , n = () => {
            clearTimeout(t),
            t = setTimeout(i, 3e3),
            this.elements.menu.classList.remove("ejs_menu_bar_hidden")
        }
        ;
        let s;
        this.menu = {
            close: () => {
                clearTimeout(t),
                this.elements.menu.classList.add("ejs_menu_bar_hidden")
            }
            ,
            open: e => {
                (this.started || !0 === e) && (clearTimeout(t),
                !0 !== e && (t = setTimeout(i, 3e3)),
                this.elements.menu.classList.remove("ejs_menu_bar_hidden"))
            }
            ,
            toggle: () => {
                this.started && (clearTimeout(t),
                this.elements.menu.classList.contains("ejs_menu_bar_hidden") && (t = setTimeout(i, 3e3)),
                this.elements.menu.classList.toggle("ejs_menu_bar_hidden"))
            }
        },
        this.createBottomMenuBarListeners = () => {
            const t = t => {
                "touch" !== t.pointerType && this.started && !e && document.pointerLockElement !== this.canvas && (this.isPopupOpen() || n())
            }
              , i = t => {
                if (!this.started || e || document.pointerLockElement === this.canvas)
                    return;
                if (this.isPopupOpen())
                    return;
                const i = t.movementX
                  , s = t.movementY
                  , o = this.elements.menu.offsetHeight + 30;
                if (t.clientY >= window.innerHeight - o)
                    return void n();
                let a = Math.atan2(s, i) * (180 / Math.PI);
                a < 0 && (a += 360),
                a < 85 || a > 95 || n()
            }
            ;
            this.menu.mousemoveListener && this.removeEventListener(this.menu.mousemoveListener),
            "downward" === (this.preGetSetting("menubarBehavior") || "downward") ? this.menu.mousemoveListener = this.addEventListener(this.elements.parent, "mousemove", i) : this.menu.mousemoveListener = this.addEventListener(this.elements.parent, "mousemove", t),
            this.addEventListener(this.elements.parent, "click", t)
        }
        ,
        this.createBottomMenuBarListeners(),
        this.elements.parent.appendChild(this.elements.menu),
        this.addEventListener(this.elements.parent, "mousedown touchstart", (t => {
            if (this.isChild(this.elements.menu, t.target) || this.isChild(this.elements.menuToggle, t.target))
                return;
            if (!this.started || this.elements.menu.classList.contains("ejs_menu_bar_hidden") || this.isPopupOpen())
                return;
            this.elements.parent.getBoundingClientRect().width > 575 || (clearTimeout(s),
            s = setTimeout(( () => {
                e = !1
            }
            ), 2e3),
            e = !0,
            this.menu.close())
        }
        ));
        let o = !1;
        const a = (t, e, i, n) => {
            const s = this.createElement("button");
            s.type = "button";
            const a = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            a.setAttribute("role", "presentation"),
            a.setAttribute("focusable", "false"),
            a.innerHTML = t.icon;
            const l = this.createElement("span");
            return l.innerText = this.localization(t.displayName),
            o && l.classList.add("ejs_menu_text_right"),
            l.classList.add("ejs_menu_text"),
            s.classList.add("ejs_menu_button"),
            s.appendChild(a),
            s.appendChild(l),
            i ? i.appendChild(s) : this.elements.menu.appendChild(s),
            e instanceof Function && this.addEventListener(s, "click", e),
            t.callback instanceof Function && this.addEventListener(s, "click", t.callback),
            n ? [s, a, l] : s
        }
          , l = a(this.config.buttonOpts.restart, ( () => {
            this.isNetplay && this.netplay.owner ? (this.gameManager.restart(),
            this.netplay.reset(),
            this.netplay.sendMessage({
                restart: !0
            }),
            this.play()) : this.isNetplay || this.gameManager.restart()
        }
        ))
          , r = a(this.config.buttonOpts.pause, ( () => {
            this.isNetplay && this.netplay.owner ? (this.pause(),
            this.gameManager.saveSaveFiles(),
            this.netplay.sendMessage({
                pause: !0
            })) : this.isNetplay || this.pause()
        }
        ))
          , c = a(this.config.buttonOpts.play, ( () => {
            this.isNetplay && this.netplay.owner ? (this.play(),
            this.netplay.sendMessage({
                play: !0
            })) : this.isNetplay || this.play()
        }
        ));
        let d;
        c.style.display = "none",
        this.togglePlaying = t => {
            this.paused = !this.paused,
            t || (this.paused ? (r.style.display = "none",
            c.style.display = "") : (r.style.display = "",
            c.style.display = "none")),
            this.gameManager.toggleMainLoop(this.paused ? 0 : 1),
            this.enableMouseLock && (this.canvas.exitPointerLock ? this.canvas.exitPointerLock() : this.canvas.mozExitPointerLock && this.canvas.mozExitPointerLock())
        }
        ,
        this.play = t => {
            this.paused && this.togglePlaying(t)
        }
        ,
        this.pause = t => {
            this.paused || this.togglePlaying(t)
        }
        ;
        const g = a(this.config.buttonOpts.saveState, (async () => {
            let t;
            try {
                t = this.gameManager.getState()
            } catch (t) {
                return void this.displayMessage(this.localization("FAILED TO SAVE STATE"))
            }
            const {screenshot: e, format: i} = await this.takeScreenshot(this.capture.photo.source, this.capture.photo.format, this.capture.photo.upscale);
            if (!(this.callEvent("saveState", {
                screenshot: e,
                format: i,
                state: t
            }) > 0))
                if (d && URL.revokeObjectURL(d),
                "browser" === this.getSettingValue("save-state-location") && this.saveInBrowserSupported())
                    this.storage.states.put(this.getBaseFileName() + ".state", t),
                    this.displayMessage(this.localization("SAVE SAVED TO BROWSER"));
                else {
                    const e = new Blob([t]);
                    d = URL.createObjectURL(e);
                    const i = this.createElement("a");
                    i.href = d,
                    i.download = this.getBaseFileName() + ".state",
                    i.click()
                }
        }
        ))
          , h = a(this.config.buttonOpts.loadState, (async () => {
            if (!(this.callEvent("loadState") > 0))
                if ("browser" === this.getSettingValue("save-state-location") && this.saveInBrowserSupported())
                    this.storage.states.get(this.getBaseFileName() + ".state").then((t => {
                        this.gameManager.loadState(t),
                        this.displayMessage(this.localization("SAVE LOADED FROM BROWSER"))
                    }
                    ));
                else {
                    const t = await this.selectFile()
                      , e = new Uint8Array(await t.arrayBuffer());
                    this.gameManager.loadState(e)
                }
        }
        ))
          , p = a(this.config.buttonOpts.gamepad, ( () => {
            this.controlMenu.style.display = ""
        }
        ))
          , u = a(this.config.buttonOpts.cheat, ( () => {
            this.cheatMenu.style.display = ""
        }
        ))
          , m = a(this.config.buttonOpts.cacheManager, ( () => {
            this.openCacheMenu()
        }
        ));
        let I;
        this.config.disableDatabases && (m.style.display = "none");
        const C = a(this.config.buttonOpts.saveSavFiles, (async () => {
            const t = await this.gameManager.getSaveFile()
              , {screenshot: e, format: i} = await this.takeScreenshot(this.capture.photo.source, this.capture.photo.format, this.capture.photo.upscale);
            if (this.callEvent("saveSave", {
                screenshot: e,
                format: i,
                save: t
            }) > 0)
                return;
            const n = new Blob([t]);
            I = URL.createObjectURL(n);
            const s = this.createElement("a");
            s.href = I,
            s.download = this.gameManager.getSaveFilePath().split("/").pop(),
            s.click()
        }
        ))
          , b = a(this.config.buttonOpts.loadSavFiles, (async () => {
            if (this.callEvent("loadSave") > 0)
                return;
            const t = await this.selectFile()
              , e = new Uint8Array(await t.arrayBuffer())
              , i = this.gameManager.getSaveFilePath()
              , n = i.split("/");
            let s = "";
            for (let t = 0; t < n.length - 1; t++)
                "" !== n[t] && (s += "/" + n[t],
                this.gameManager.FS.analyzePath(s).exists || this.gameManager.FS.mkdir(s));
            this.gameManager.FS.analyzePath(i).exists && this.gameManager.FS.unlink(i),
            this.gameManager.FS.writeFile(i, e),
            this.gameManager.loadSaveFiles()
        }
        ))
          , y = a(this.config.buttonOpts.netplay, (async () => {
            this.openNetplayMenu()
        }
        ));
        if (this.config.buttonOpts)
            for (const [t,e] of Object.entries(this.config.buttonOpts))
                if (!0 === e.custom) {
                    a(e)
                }
        const Z = this.createElement("span");
        Z.classList.add("ejs_menu_bar_spacer"),
        this.elements.menu.appendChild(Z),
        o = !0;
        const V = this.createElement("div");
        V.classList.add("ejs_volume_parent");
        const f = a(this.config.buttonOpts.mute, ( () => {
            f.style.display = "none",
            B.style.display = "",
            this.muted = !0,
            this.setVolume(0)
        }
        ), V)
          , B = a(this.config.buttonOpts.unmute, ( () => {
            0 === this.volume && (this.volume = .5),
            f.style.display = "",
            B.style.display = "none",
            this.muted = !1,
            this.setVolume(this.volume)
        }
        ), V);
        B.style.display = "none";
        const S = this.createElement("input");
        S.setAttribute("data-range", "volume"),
        S.setAttribute("type", "range"),
        S.setAttribute("min", 0),
        S.setAttribute("max", 1),
        S.setAttribute("step", .01),
        S.setAttribute("autocomplete", "off"),
        S.setAttribute("role", "slider"),
        S.setAttribute("aria-label", "Volume"),
        S.setAttribute("aria-valuemin", 0),
        S.setAttribute("aria-valuemax", 100),
        this.setVolume = t => {
            this.saveSettings(),
            this.muted = 0 === t,
            S.value = t,
            S.setAttribute("aria-valuenow", 100 * t),
            S.setAttribute("aria-valuetext", (100 * t).toFixed(1) + "%"),
            S.setAttribute("style", "--value: " + 100 * t + "%;margin-left: 5px;position: relative;z-index: 2;"),
            this.Module.AL && this.Module.AL.currentCtx && this.Module.AL.currentCtx.sources && this.Module.AL.currentCtx.sources.forEach((e => {
                e.gain.gain.value = t
            }
            )),
            this.config.buttonOpts && !1 === this.config.buttonOpts.mute || (B.style.display = 0 === t ? "" : "none",
            f.style.display = 0 === t ? "none" : "")
        }
        ,
        this.addEventListener(S, "change mousemove touchmove mousedown touchstart mouseup", (t => {
            setTimeout(( () => {
                const t = parseFloat(S.value);
                0 === t && this.muted || (this.volume = t,
                this.setVolume(this.volume))
            }
            ), 5)
        }
        )),
        this.config.buttonOpts && !1 === this.config.buttonOpts.volume || V.appendChild(S),
        this.elements.menu.appendChild(V);
        const A = a(this.config.buttonOpts.contextMenu, ( () => {
            "none" === this.elements.contextmenu.style.display ? (this.elements.contextmenu.style.display = "block",
            this.elements.contextmenu.style.left = getComputedStyle(this.elements.parent).width.split("px")[0] / 2 - getComputedStyle(this.elements.contextmenu).width.split("px")[0] / 2 + "px",
            this.elements.contextmenu.style.top = getComputedStyle(this.elements.parent).height.split("px")[0] / 2 - getComputedStyle(this.elements.contextmenu).height.split("px")[0] / 2 + "px",
            setTimeout(this.menu.close.bind(this), 20)) : this.elements.contextmenu.style.display = "none"
        }
        ));
        this.diskParent = this.createElement("div"),
        this.diskParent.id = "ejs_disksMenu",
        this.disksMenuOpen = !1;
        const v = a(this.config.buttonOpts.diskButton, ( () => {
            this.disksMenuOpen = !this.disksMenuOpen,
            v[1].classList.toggle("ejs_svg_rotate", this.disksMenuOpen),
            this.disksMenu.style.display = this.disksMenuOpen ? "" : "none",
            v[2].classList.toggle("ejs_disks_text", this.disksMenuOpen)
        }
        ), this.diskParent, !0);
        this.elements.menu.appendChild(this.diskParent),
        this.closeDisksMenu = () => {
            this.disksMenu && (this.disksMenuOpen = !1,
            v[1].classList.toggle("ejs_svg_rotate", this.disksMenuOpen),
            v[2].classList.toggle("ejs_disks_text", this.disksMenuOpen),
            this.disksMenu.style.display = "none")
        }
        ,
        this.addEventListener(this.elements.parent, "mousedown touchstart", (t => {
            this.isChild(this.disksMenu, t.target) || "touch" !== t.pointerType && t.target !== v[0] && t.target !== v[2] && this.closeDisksMenu()
        }
        )),
        this.settingParent = this.createElement("div"),
        this.settingsMenuOpen = !1;
        const w = a(this.config.buttonOpts.settings, ( () => {
            this.settingsMenuOpen = !this.settingsMenuOpen,
            w[1].classList.toggle("ejs_svg_rotate", this.settingsMenuOpen),
            this.settingsMenu.style.display = this.settingsMenuOpen ? "" : "none",
            w[2].classList.toggle("ejs_settings_text", this.settingsMenuOpen)
        }
        ), this.settingParent, !0);
        this.elements.menu.appendChild(this.settingParent),
        this.closeSettingsMenu = () => {
            this.settingsMenu && (this.settingsMenuOpen = !1,
            w[1].classList.toggle("ejs_svg_rotate", this.settingsMenuOpen),
            w[2].classList.toggle("ejs_settings_text", this.settingsMenuOpen),
            this.settingsMenu.style.display = "none")
        }
        ,
        this.addEventListener(this.elements.parent, "mousedown touchstart", (t => {
            this.isChild(this.settingsMenu, t.target) || "touch" !== t.pointerType && t.target !== w[0] && t.target !== w[2] && this.closeSettingsMenu()
        }
        )),
        this.addEventListener(this.canvas, "click", (t => {
            "touch" !== t.pointerType && this.enableMouseLock && !this.paused && (this.canvas.requestPointerLock ? this.canvas.requestPointerLock() : this.canvas.mozRequestPointerLock && this.canvas.mozRequestPointerLock(),
            this.menu.close())
        }
        ));
        const U = a(this.config.buttonOpts.enterFullscreen, ( () => {
            this.toggleFullscreen(!0)
        }
        ))
          , N = a(this.config.buttonOpts.exitFullscreen, ( () => {
            this.toggleFullscreen(!1)
        }
        ));
        N.style.display = "none",
        this.toggleFullscreen = t => {
            if (t) {
                if (this.elements.parent.requestFullscreen ? this.elements.parent.requestFullscreen() : this.elements.parent.mozRequestFullScreen ? this.elements.parent.mozRequestFullScreen() : this.elements.parent.webkitRequestFullscreen ? this.elements.parent.webkitRequestFullscreen() : this.elements.parent.msRequestFullscreen && this.elements.parent.msRequestFullscreen(),
                N.style.display = "",
                U.style.display = "none",
                this.isMobile)
                    try {
                        screen.orientation.lock("nds" === this.getCore(!0) ? "portrait" : "landscape").catch((t => {}
                        ))
                    } catch (t) {}
            } else if (document.exitFullscreen ? document.exitFullscreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.msExitFullscreen && document.msExitFullscreen(),
            N.style.display = "none",
            U.style.display = "",
            this.isMobile)
                try {
                    screen.orientation.unlock()
                } catch (t) {}
        }
        ;
        let M = !1;
        const W = a(this.config.buttonOpts.exitEmulation, (async () => {
            if (M)
                return;
            M = !0;
            const t = this.createSubPopup();
            this.game.appendChild(t[0]),
            t[1].classList.add("ejs_cheat_parent"),
            t[1].style.width = "100%";
            const e = t[1]
              , i = this.createElement("div");
            i.classList.add("ejs_cheat_header");
            const n = this.createElement("h2");
            n.innerText = this.localization("Are you sure you want to exit?"),
            n.classList.add("ejs_cheat_heading");
            const s = this.createElement("button");
            s.classList.add("ejs_cheat_close"),
            i.appendChild(n),
            i.appendChild(s),
            e.appendChild(i),
            this.addEventListener(s, "click", (e => {
                M = !1,
                t[0].remove()
            }
            )),
            e.appendChild(this.createElement("br"));
            const o = this.createElement("footer")
              , a = this.createElement("button")
              , l = this.createElement("button");
            a.innerText = this.localization("Exit"),
            l.innerText = this.localization("Cancel"),
            a.classList.add("ejs_button_button"),
            l.classList.add("ejs_button_button"),
            a.classList.add("ejs_popup_submit"),
            l.classList.add("ejs_popup_submit"),
            a.style["background-color"] = "rgba(var(--ejs-primary-color),1)",
            o.appendChild(a);
            const r = this.createElement("span");
            r.innerText = " ",
            o.appendChild(r),
            o.appendChild(l),
            e.appendChild(o),
            this.addEventListener(l, "click", (e => {
                t[0].remove(),
                M = !1
            }
            )),
            this.addEventListener(a, "click", (e => {
                t[0].remove();
                this.createPopup("EmulatorJS has exited", {});
                this.callEvent("exit")
            }
            )),
            setTimeout(this.menu.close.bind(this), 20)
        }
        ));
        this.addEventListener(document, "webkitfullscreenchange mozfullscreenchange fullscreenchange", (t => {
            t.target === this.elements.parent && (null === document.fullscreenElement ? (N.style.display = "none",
            U.style.display = "") : (N.style.display = "",
            U.style.display = "none"))
        }
        ));
        !!(this.elements.parent.requestFullscreen || this.elements.parent.mozRequestFullScreen || this.elements.parent.webkitRequestFullscreen || this.elements.parent.msRequestFullscreen) || (N.style.display = "none",
        U.style.display = "none"),
        this.elements.bottomBar = {
            playPause: [r, c],
            restart: [l],
            settings: [w],
            contextMenu: [A],
            fullscreen: [U, N],
            saveState: [g],
            loadState: [h],
            gamepad: [p],
            cheat: [u],
            cacheManager: [m],
            saveSavFiles: [C],
            loadSavFiles: [b],
            netplay: [y],
            exit: [W]
        },
        this.config.buttonOpts && (this.debug && console.log(this.config.buttonOpts),
        !1 === this.config.buttonOpts.playPause.visible && (r.style.display = "none",
        c.style.display = "none"),
        !1 === this.config.buttonOpts.contextMenuButton && !1 !== this.config.buttonOpts.rightClick && !1 === this.isMobile && (A.style.display = "none"),
        !1 === this.config.buttonOpts.restart.visible && (l.style.display = "none"),
        !1 === this.config.buttonOpts.settings.visible && (w[0].style.display = "none"),
        !1 === this.config.buttonOpts.fullscreen.visible && (U.style.display = "none",
        N.style.display = "none"),
        !1 === this.config.buttonOpts.mute.visible && (f.style.display = "none",
        B.style.display = "none"),
        !1 === this.config.buttonOpts.saveState.visible && (g.style.display = "none"),
        !1 === this.config.buttonOpts.loadState.visible && (h.style.display = "none"),
        !1 === this.config.buttonOpts.saveSavFiles.visible && (C.style.display = "none"),
        !1 === this.config.buttonOpts.loadSavFiles.visible && (b.style.display = "none"),
        !1 === this.config.buttonOpts.gamepad.visible && (p.style.display = "none"),
        !1 === this.config.buttonOpts.cheat.visible && (u.style.display = "none"),
        !1 === this.config.buttonOpts.cacheManager.visible && (m.style.display = "none"),
        !1 === this.config.buttonOpts.netplay.visible && (y.style.display = "none"),
        !1 === this.config.buttonOpts.diskButton.visible && (v[0].style.display = "none"),
        !1 === this.config.buttonOpts.volumeSlider.visible && (S.style.display = "none"),
        !1 === this.config.buttonOpts.exitEmulation.visible && (W.style.display = "none")),
        this.menu.failedToStart = () => {
            this.config.buttonOpts || (this.config.buttonOpts = {}),
            this.config.buttonOpts.mute = !1,
            w[0].style.display = "",
            r.style.display = "none",
            c.style.display = "none",
            A.style.display = "none",
            l.style.display = "none",
            U.style.display = "none",
            N.style.display = "none",
            f.style.display = "none",
            B.style.display = "none",
            g.style.display = "none",
            h.style.display = "none",
            C.style.display = "none",
            b.style.display = "none",
            p.style.display = "none",
            u.style.display = "none",
            m.style.display = "none",
            y.style.display = "none",
            v[0].style.display = "none",
            S.style.display = "none",
            W.style.display = "none",
            this.elements.menu.style.opacity = "",
            this.elements.menu.style.background = "transparent",
            this.virtualGamepad.style.display = "none",
            w[0].classList.add("shadow"),
            this.menu.open(!0)
        }
    }
    openCacheMenu() {
        (async () => {
            const t = this.createElement("table")
              , e = this.createElement("tbody")
              , i = this.createPopup("Cache Manager", {
                "Clear All": async () => {
                    const t = await this.storage.rom.getSizes();
                    for (const e in t)
                        await this.storage.rom.remove(e);
                    e.innerHTML = ""
                }
                ,
                Close: () => {
                    this.closePopup()
                }
            })
              , n = await this.storage.rom.getSizes();
            t.style.width = "100%",
            t.style["padding-left"] = "10px",
            t.style["text-align"] = "left",
            i.appendChild(t),
            t.appendChild(e);
            const s = function(t) {
                let e = -1;
                do {
                    t /= 1024,
                    e++
                } while (t > 1024);
                return Math.max(t, .1).toFixed(1) + [" kB", " MB", " GB", " TB", "PB", "EB", "ZB", "YB"][e]
            };
            for (const t in n) {
                const i = this.createElement("tr")
                  , o = this.createElement("td")
                  , a = this.createElement("td")
                  , l = this.createElement("td");
                l.style.cursor = "pointer",
                o.innerText = t,
                a.innerText = s(n[t]);
                const r = this.createElement("a");
                r.innerText = this.localization("Remove"),
                this.addEventListener(l, "click", ( () => {
                    this.storage.rom.remove(t),
                    i.remove()
                }
                )),
                l.appendChild(r),
                i.appendChild(o),
                i.appendChild(a),
                i.appendChild(l),
                e.appendChild(i)
            }
        }
        )()
    }
    getControlScheme() {
        return this.config.controlScheme && "string" == typeof this.config.controlScheme ? this.config.controlScheme : this.getCore(!0)
    }
    createControlSettingMenu() {
        let t = [];
        this.checkGamepadInputs = () => t.forEach((t => t())),
        this.gamepadLabels = [],
        this.gamepadSelection = [],
        this.controls = JSON.parse(JSON.stringify(this.defaultControllers));
        const e = this.createPopup("Control Settings", {
            Reset: () => {
                this.controls = JSON.parse(JSON.stringify(this.defaultControllers)),
                this.setupKeys(),
                this.checkGamepadInputs(),
                this.saveSettings()
            }
            ,
            Clear: () => {
                this.controls = {
                    0: {},
                    1: {},
                    2: {},
                    3: {}
                },
                this.setupKeys(),
                this.checkGamepadInputs(),
                this.saveSettings()
            }
            ,
            Close: () => {
                this.controlMenu.style.display = "none"
            }
        }, !0);
        let i;
        if (this.setupKeys(),
        this.controlMenu = e.parentElement,
        e.classList.add("ejs_control_body"),
        "gb" === this.getControlScheme() ? i = [{
            id: 8,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "nes" === this.getControlScheme() ? (i = [{
            id: 8,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }],
        "nestopia" === this.getCore() ? i.push({
            id: 10,
            label: this.localization("SWAP DISKS")
        }) : (i.push({
            id: 10,
            label: this.localization("SWAP DISKS")
        }),
        i.push({
            id: 11,
            label: this.localization("EJECT/INSERT DISK")
        }))) : i = "snes" === this.getControlScheme() ? [{
            id: 8,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 9,
            label: this.localization("X")
        }, {
            id: 1,
            label: this.localization("Y")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }, {
            id: 10,
            label: this.localization("L")
        }, {
            id: 11,
            label: this.localization("R")
        }] : "n64" === this.getControlScheme() ? [{
            id: 0,
            label: this.localization("A")
        }, {
            id: 1,
            label: this.localization("B")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("D-PAD UP")
        }, {
            id: 5,
            label: this.localization("D-PAD DOWN")
        }, {
            id: 6,
            label: this.localization("D-PAD LEFT")
        }, {
            id: 7,
            label: this.localization("D-PAD RIGHT")
        }, {
            id: 10,
            label: this.localization("L")
        }, {
            id: 11,
            label: this.localization("R")
        }, {
            id: 12,
            label: this.localization("Z")
        }, {
            id: 19,
            label: this.localization("STICK UP")
        }, {
            id: 18,
            label: this.localization("STICK DOWN")
        }, {
            id: 17,
            label: this.localization("STICK LEFT")
        }, {
            id: 16,
            label: this.localization("STICK RIGHT")
        }, {
            id: 23,
            label: this.localization("C-PAD UP")
        }, {
            id: 22,
            label: this.localization("C-PAD DOWN")
        }, {
            id: 21,
            label: this.localization("C-PAD LEFT")
        }, {
            id: 20,
            label: this.localization("C-PAD RIGHT")
        }] : "gba" === this.getControlScheme() ? [{
            id: 8,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 10,
            label: this.localization("L")
        }, {
            id: 11,
            label: this.localization("R")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "nds" === this.getControlScheme() ? [{
            id: 8,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 9,
            label: this.localization("X")
        }, {
            id: 1,
            label: this.localization("Y")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }, {
            id: 10,
            label: this.localization("L")
        }, {
            id: 11,
            label: this.localization("R")
        }, {
            id: 14,
            label: this.localization("Microphone")
        }] : "vb" === this.getControlScheme() ? [{
            id: 8,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 10,
            label: this.localization("L")
        }, {
            id: 11,
            label: this.localization("R")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("LEFT D-PAD UP")
        }, {
            id: 5,
            label: this.localization("LEFT D-PAD DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT D-PAD LEFT")
        }, {
            id: 7,
            label: this.localization("LEFT D-PAD RIGHT")
        }, {
            id: 19,
            label: this.localization("RIGHT D-PAD UP")
        }, {
            id: 18,
            label: this.localization("RIGHT D-PAD DOWN")
        }, {
            id: 17,
            label: this.localization("RIGHT D-PAD LEFT")
        }, {
            id: 16,
            label: this.localization("RIGHT D-PAD RIGHT")
        }] : ["segaCD", "sega32x"].includes(this.getControlScheme()) ? [{
            id: 1,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 8,
            label: this.localization("C")
        }, {
            id: 10,
            label: this.localization("X")
        }, {
            id: 9,
            label: this.localization("Y")
        }, {
            id: 11,
            label: this.localization("Z")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 2,
            label: this.localization("MODE")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "segaMS" === this.getControlScheme() ? [{
            id: 0,
            label: this.localization("BUTTON 1 / START")
        }, {
            id: 8,
            label: this.localization("BUTTON 2")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "segaGG" === this.getControlScheme() ? [{
            id: 0,
            label: this.localization("BUTTON 1")
        }, {
            id: 8,
            label: this.localization("BUTTON 2")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "segaSaturn" === this.getControlScheme() ? [{
            id: 1,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 8,
            label: this.localization("C")
        }, {
            id: 9,
            label: this.localization("X")
        }, {
            id: 10,
            label: this.localization("Y")
        }, {
            id: 11,
            label: this.localization("Z")
        }, {
            id: 12,
            label: this.localization("L")
        }, {
            id: 13,
            label: this.localization("R")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "3do" === this.getControlScheme() ? [{
            id: 1,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 8,
            label: this.localization("C")
        }, {
            id: 10,
            label: this.localization("L")
        }, {
            id: 11,
            label: this.localization("R")
        }, {
            id: 2,
            label: this.localization("X")
        }, {
            id: 3,
            label: this.localization("P")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "atari2600" === this.getControlScheme() ? [{
            id: 0,
            label: this.localization("FIRE")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("RESET")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }, {
            id: 10,
            label: this.localization("LEFT DIFFICULTY A")
        }, {
            id: 12,
            label: this.localization("LEFT DIFFICULTY B")
        }, {
            id: 11,
            label: this.localization("RIGHT DIFFICULTY A")
        }, {
            id: 13,
            label: this.localization("RIGHT DIFFICULTY B")
        }, {
            id: 14,
            label: this.localization("COLOR")
        }, {
            id: 15,
            label: this.localization("B/W")
        }] : "atari7800" === this.getControlScheme() ? [{
            id: 0,
            label: this.localization("BUTTON 1")
        }, {
            id: 8,
            label: this.localization("BUTTON 2")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("PAUSE")
        }, {
            id: 9,
            label: this.localization("RESET")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }, {
            id: 10,
            label: this.localization("LEFT DIFFICULTY")
        }, {
            id: 11,
            label: this.localization("RIGHT DIFFICULTY")
        }] : "lynx" === this.getControlScheme() ? [{
            id: 8,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 10,
            label: this.localization("OPTION 1")
        }, {
            id: 11,
            label: this.localization("OPTION 2")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "jaguar" === this.getControlScheme() ? [{
            id: 8,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 1,
            label: this.localization("C")
        }, {
            id: 2,
            label: this.localization("PAUSE")
        }, {
            id: 3,
            label: this.localization("OPTION")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "pce" === this.getControlScheme() ? [{
            id: 8,
            label: this.localization("I")
        }, {
            id: 0,
            label: this.localization("II")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("RUN")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "ngp" === this.getControlScheme() ? [{
            id: 0,
            label: this.localization("A")
        }, {
            id: 8,
            label: this.localization("B")
        }, {
            id: 3,
            label: this.localization("OPTION")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "ws" === this.getControlScheme() ? [{
            id: 8,
            label: this.localization("A")
        }, {
            id: 0,
            label: this.localization("B")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("X UP")
        }, {
            id: 5,
            label: this.localization("X DOWN")
        }, {
            id: 6,
            label: this.localization("X LEFT")
        }, {
            id: 7,
            label: this.localization("X RIGHT")
        }, {
            id: 13,
            label: this.localization("Y UP")
        }, {
            id: 12,
            label: this.localization("Y DOWN")
        }, {
            id: 10,
            label: this.localization("Y LEFT")
        }, {
            id: 11,
            label: this.localization("Y RIGHT")
        }] : "coleco" === this.getControlScheme() ? [{
            id: 8,
            label: this.localization("LEFT BUTTON")
        }, {
            id: 0,
            label: this.localization("RIGHT BUTTON")
        }, {
            id: 9,
            label: this.localization("1")
        }, {
            id: 1,
            label: this.localization("2")
        }, {
            id: 11,
            label: this.localization("3")
        }, {
            id: 10,
            label: this.localization("4")
        }, {
            id: 13,
            label: this.localization("5")
        }, {
            id: 12,
            label: this.localization("6")
        }, {
            id: 15,
            label: this.localization("7")
        }, {
            id: 14,
            label: this.localization("8")
        }, {
            id: 2,
            label: this.localization("*")
        }, {
            id: 3,
            label: this.localization("#")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "pcfx" === this.getControlScheme() ? [{
            id: 8,
            label: this.localization("I")
        }, {
            id: 0,
            label: this.localization("II")
        }, {
            id: 9,
            label: this.localization("III")
        }, {
            id: 1,
            label: this.localization("IV")
        }, {
            id: 10,
            label: this.localization("V")
        }, {
            id: 11,
            label: this.localization("VI")
        }, {
            id: 3,
            label: this.localization("RUN")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 12,
            label: this.localization("MODE1")
        }, {
            id: 13,
            label: this.localization("MODE2")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }] : "psp" === this.getControlScheme() ? [{
            id: 9,
            label: this.localization("△")
        }, {
            id: 1,
            label: this.localization("□")
        }, {
            id: 0,
            label: this.localization("ｘ")
        }, {
            id: 8,
            label: this.localization("○")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }, {
            id: 10,
            label: this.localization("L")
        }, {
            id: 11,
            label: this.localization("R")
        }, {
            id: 19,
            label: this.localization("STICK UP")
        }, {
            id: 18,
            label: this.localization("STICK DOWN")
        }, {
            id: 17,
            label: this.localization("STICK LEFT")
        }, {
            id: 16,
            label: this.localization("STICK RIGHT")
        }] : [{
            id: 0,
            label: this.localization("B")
        }, {
            id: 1,
            label: this.localization("Y")
        }, {
            id: 2,
            label: this.localization("SELECT")
        }, {
            id: 3,
            label: this.localization("START")
        }, {
            id: 4,
            label: this.localization("UP")
        }, {
            id: 5,
            label: this.localization("DOWN")
        }, {
            id: 6,
            label: this.localization("LEFT")
        }, {
            id: 7,
            label: this.localization("RIGHT")
        }, {
            id: 8,
            label: this.localization("A")
        }, {
            id: 9,
            label: this.localization("X")
        }, {
            id: 10,
            label: this.localization("L")
        }, {
            id: 11,
            label: this.localization("R")
        }, {
            id: 12,
            label: this.localization("L2")
        }, {
            id: 13,
            label: this.localization("R2")
        }, {
            id: 14,
            label: this.localization("L3")
        }, {
            id: 15,
            label: this.localization("R3")
        }, {
            id: 19,
            label: this.localization("L STICK UP")
        }, {
            id: 18,
            label: this.localization("L STICK DOWN")
        }, {
            id: 17,
            label: this.localization("L STICK LEFT")
        }, {
            id: 16,
            label: this.localization("L STICK RIGHT")
        }, {
            id: 23,
            label: this.localization("R STICK UP")
        }, {
            id: 22,
            label: this.localization("R STICK DOWN")
        }, {
            id: 21,
            label: this.localization("R STICK LEFT")
        }, {
            id: 20,
            label: this.localization("R STICK RIGHT")
        }],
        ["arcade", "mame"].includes(this.getControlScheme()))
            for (const t in i)
                2 === i[t].id && (i[t].label = this.localization("INSERT COIN"));
        i.push({
            id: 24,
            label: this.localization("QUICK SAVE STATE")
        }, {
            id: 25,
            label: this.localization("QUICK LOAD STATE")
        }, {
            id: 26,
            label: this.localization("CHANGE STATE SLOT")
        }, {
            id: 27,
            label: this.localization("FAST FORWARD")
        }, {
            id: 29,
            label: this.localization("SLOW MOTION")
        }, {
            id: 28,
            label: this.localization("REWIND")
        });
        let n, s = [];
        for (let t = 0; t < i.length; t++)
            s.push(i[t].id);
        for (let t = 0; t < 30; t++)
            s.includes(t) || (delete this.defaultControllers[0][t],
            delete this.defaultControllers[1][t],
            delete this.defaultControllers[2][t],
            delete this.defaultControllers[3][t],
            delete this.controls[0][t],
            delete this.controls[1][t],
            delete this.controls[2][t],
            delete this.controls[3][t]);
        let o = []
          , a = [];
        const l = this.createElement("ul");
        l.classList.add("ejs_control_player_bar");
        for (let t = 1; t < 5; t++) {
            const e = this.createElement("li");
            e.classList.add("tabs-title"),
            e.setAttribute("role", "presentation");
            const i = this.createElement("a");
            i.innerText = this.localization("Player") + " " + t,
            i.setAttribute("role", "tab"),
            i.setAttribute("aria-controls", "controls-" + (t - 1)),
            i.setAttribute("aria-selected", "false"),
            i.id = "controls-" + (t - 1) + "-label",
            this.addEventListener(i, "click", (e => {
                e.preventDefault(),
                o[n].classList.remove("ejs_control_selected"),
                a[n].setAttribute("hidden", ""),
                n = t - 1,
                o[t - 1].classList.add("ejs_control_selected"),
                a[t - 1].removeAttribute("hidden")
            }
            )),
            e.appendChild(i),
            l.appendChild(e),
            o.push(e)
        }
        e.appendChild(l);
        const r = this.createElement("div");
        for (let e = 0; e < 4; e++) {
            this.controls[e] || (this.controls[e] = {});
            const n = this.createElement("div")
              , s = this.createElement("div")
              , o = this.createElement("div");
            o.innerText = this.localization("Connected Gamepad") + ": ";
            const l = this.createElement("select");
            l.classList.add("ejs_gamepad_dropdown"),
            l.setAttribute("title", "gamepad-" + e),
            l.setAttribute("index", e),
            this.gamepadLabels.push(l),
            this.gamepadSelection.push(""),
            this.addEventListener(l, "change", (t => {
                const e = t.target.value
                  , i = parseInt(t.target.getAttribute("index"));
                if ("notconnected" === e)
                    this.gamepadSelection[i] = "";
                else {
                    for (let t = 0; t < this.gamepadSelection.length; t++)
                        i !== t && this.gamepadSelection[t] === e && (this.gamepadSelection[t] = "");
                    this.gamepadSelection[i] = e,
                    this.updateGamepadLabels()
                }
            }
            ));
            const c = this.createElement("option");
            c.setAttribute("value", "notconnected"),
            c.innerText = "Not Connected",
            l.appendChild(c),
            o.appendChild(l),
            o.classList.add("ejs_gamepad_section");
            const d = this.createElement("div");
            d.style = "width:25%;float:left;",
            d.innerHTML = "&nbsp;";
            const g = this.createElement("div");
            g.style = "font-size:12px;width:50%;float:left;";
            const h = this.createElement("div");
            h.style = "text-align:center;width:50%;float:left;",
            h.innerText = this.localization("Gamepad"),
            g.appendChild(h);
            const p = this.createElement("div");
            p.style = "text-align:center;width:50%;float:left;",
            p.innerText = this.localization("Keyboard"),
            g.appendChild(p);
            const u = this.createElement("div");
            if (u.style = "clear:both;",
            s.appendChild(o),
            s.appendChild(d),
            s.appendChild(g),
            (this.touch || this.hasTouchScreen) && 0 === e) {
                const t = this.createElement("div");
                t.style = "width:25%;float:right;clear:none;padding:0;font-size: 11px;padding-left: 2.25rem;",
                t.classList.add("ejs_control_row"),
                t.classList.add("ejs_cheat_row");
                const e = this.createElement("input");
                e.type = "checkbox",
                e.checked = !0,
                e.value = "o",
                e.id = "ejs_vp",
                t.appendChild(e);
                const i = this.createElement("label");
                i.for = "ejs_vp",
                i.innerText = "Virtual Gamepad",
                t.appendChild(i),
                i.addEventListener("click", (t => {
                    e.checked = !e.checked,
                    this.changeSettingOption("virtual-gamepad", e.checked ? "enabled" : "disabled")
                }
                )),
                this.on("start", (t => {
                    "disabled" === this.getSettingValue("virtual-gamepad") && (e.checked = !1)
                }
                )),
                s.appendChild(t)
            }
            s.appendChild(u),
            n.appendChild(s);
            for (const s in i) {
                const o = i[s].id
                  , a = i[s].label
                  , l = this.createElement("div");
                l.setAttribute("data-id", o),
                l.setAttribute("data-index", e),
                l.setAttribute("data-label", a),
                l.style = "margin-bottom:10px;",
                l.classList.add("ejs_control_bar");
                const r = this.createElement("div");
                r.style = "width:25%;float:left;font-size:12px;";
                const c = this.createElement("label");
                c.innerText = a + ":",
                r.appendChild(c);
                const d = this.createElement("div");
                d.style = "width:50%;float:left;";
                const g = this.createElement("div");
                g.style = "width:50%;float:left;padding: 0 5px;";
                const h = this.createElement("input");
                h.style = "text-align:center;height:25px;width: 100%;",
                h.type = "text",
                h.setAttribute("readonly", ""),
                h.setAttribute("placeholder", ""),
                g.appendChild(h);
                const p = this.createElement("div");
                p.style = "width:50%;float:left;padding: 0 5px;";
                const u = this.createElement("input");
                if (u.style = "text-align:center;height:25px;width: 100%;",
                u.type = "text",
                u.setAttribute("readonly", ""),
                u.setAttribute("placeholder", ""),
                p.appendChild(u),
                t.push(( () => {
                    if (u.value = "",
                    h.value = "",
                    this.controls[e][o] && void 0 !== this.controls[e][o].value) {
                        let t = this.keyMap[this.controls[e][o].value];
                        t = this.localization(t),
                        u.value = t
                    }
                    if (this.controls[e][o] && void 0 !== this.controls[e][o].value2 && "" !== this.controls[e][o].value2) {
                        let t = this.controls[e][o].value2.toString();
                        t.includes(":") ? (t = t.split(":"),
                        t = this.localization(t[0]) + ":" + this.localization(t[1])) : t = isNaN(t) ? this.localization(t) : this.localization("BUTTON") + " " + this.localization(t),
                        h.value = t
                    }
                }
                )),
                this.controls[e][o] && this.controls[e][o].value) {
                    let t = this.keyMap[this.controls[e][o].value];
                    t = this.localization(t),
                    u.value = t
                }
                if (this.controls[e][o] && this.controls[e][o].value2) {
                    let t = this.controls[e][o].value2.toString();
                    t.includes(":") ? (t = t.split(":"),
                    t = this.localization(t[0]) + ":" + this.localization(t[1])) : t = isNaN(t) ? this.localization(t) : this.localization("BUTTON") + " " + this.localization(t),
                    h.value = t
                }
                d.appendChild(g),
                d.appendChild(p);
                const m = this.createElement("div");
                m.style = "clear:both;",
                d.appendChild(m);
                const I = this.createElement("div");
                I.style = "width:25%;float:left;";
                const C = this.createElement("a");
                C.classList.add("ejs_control_set_button"),
                C.innerText = this.localization("Set"),
                I.appendChild(C);
                const b = this.createElement("div");
                b.style = "clear:both;",
                l.appendChild(r),
                l.appendChild(d),
                l.appendChild(I),
                l.appendChild(b),
                n.appendChild(l),
                this.addEventListener(l, "mousedown", (t => {
                    t.preventDefault(),
                    this.controlPopup.parentElement.parentElement.removeAttribute("hidden"),
                    this.controlPopup.innerText = "[ " + a + " ]\n" + this.localization("Press Keyboard"),
                    this.controlPopup.setAttribute("button-num", o),
                    this.controlPopup.setAttribute("player-num", e)
                }
                ))
            }
            r.appendChild(n),
            n.setAttribute("hidden", ""),
            a.push(n)
        }
        e.appendChild(r),
        n = 0,
        o[0].classList.add("ejs_control_selected"),
        a[0].removeAttribute("hidden");
        const c = this.createElement("div");
        c.classList.add("ejs_popup_container");
        const d = this.createElement("div");
        this.addEventListener(c, "mousedown click touchstart", (t => {
            this.isChild(d, t.target) || this.controlPopup.parentElement.parentElement.setAttribute("hidden", "")
        }
        ));
        const g = this.createElement("a");
        g.classList.add("ejs_control_set_button"),
        g.innerText = this.localization("Clear"),
        this.addEventListener(g, "mousedown click touchstart", (t => {
            const e = this.controlPopup.getAttribute("button-num")
              , i = this.controlPopup.getAttribute("player-num");
            this.controls[i][e] || (this.controls[i][e] = {}),
            this.controls[i][e].value = 0,
            this.controls[i][e].value2 = "",
            this.controlPopup.parentElement.parentElement.setAttribute("hidden", ""),
            this.checkGamepadInputs(),
            this.saveSettings()
        }
        )),
        d.classList.add("ejs_popup_box"),
        d.innerText = "",
        c.setAttribute("hidden", "");
        const h = this.createElement("div");
        this.controlPopup = h,
        c.appendChild(d),
        d.appendChild(h),
        d.appendChild(this.createElement("br")),
        d.appendChild(g),
        this.controlMenu.appendChild(c)
    }
    initControlVars() {
        this.defaultControllers = {
            0: {
                0: {
                    value: "x",
                    value2: "BUTTON_2"
                },
                1: {
                    value: "s",
                    value2: "BUTTON_4"
                },
                2: {
                    value: "v",
                    value2: "SELECT"
                },
                3: {
                    value: "enter",
                    value2: "START"
                },
                4: {
                    value: "up arrow",
                    value2: "DPAD_UP"
                },
                5: {
                    value: "down arrow",
                    value2: "DPAD_DOWN"
                },
                6: {
                    value: "left arrow",
                    value2: "DPAD_LEFT"
                },
                7: {
                    value: "right arrow",
                    value2: "DPAD_RIGHT"
                },
                8: {
                    value: "z",
                    value2: "BUTTON_1"
                },
                9: {
                    value: "a",
                    value2: "BUTTON_3"
                },
                10: {
                    value: "q",
                    value2: "LEFT_TOP_SHOULDER"
                },
                11: {
                    value: "e",
                    value2: "RIGHT_TOP_SHOULDER"
                },
                12: {
                    value: "tab",
                    value2: "LEFT_BOTTOM_SHOULDER"
                },
                13: {
                    value: "r",
                    value2: "RIGHT_BOTTOM_SHOULDER"
                },
                14: {
                    value: "",
                    value2: "LEFT_STICK"
                },
                15: {
                    value: "",
                    value2: "RIGHT_STICK"
                },
                16: {
                    value: "h",
                    value2: "LEFT_STICK_X:+1"
                },
                17: {
                    value: "f",
                    value2: "LEFT_STICK_X:-1"
                },
                18: {
                    value: "g",
                    value2: "LEFT_STICK_Y:+1"
                },
                19: {
                    value: "t",
                    value2: "LEFT_STICK_Y:-1"
                },
                20: {
                    value: "l",
                    value2: "RIGHT_STICK_X:+1"
                },
                21: {
                    value: "j",
                    value2: "RIGHT_STICK_X:-1"
                },
                22: {
                    value: "k",
                    value2: "RIGHT_STICK_Y:+1"
                },
                23: {
                    value: "i",
                    value2: "RIGHT_STICK_Y:-1"
                },
                24: {
                    value: "1"
                },
                25: {
                    value: "2"
                },
                26: {
                    value: "3"
                },
                27: {},
                28: {},
                29: {}
            },
            1: {},
            2: {},
            3: {}
        },
        this.keyMap = {
            0: "",
            8: "backspace",
            9: "tab",
            13: "enter",
            16: "shift",
            17: "ctrl",
            18: "alt",
            19: "pause/break",
            20: "caps lock",
            27: "escape",
            32: "space",
            33: "page up",
            34: "page down",
            35: "end",
            36: "home",
            37: "left arrow",
            38: "up arrow",
            39: "right arrow",
            40: "down arrow",
            45: "insert",
            46: "delete",
            48: "0",
            49: "1",
            50: "2",
            51: "3",
            52: "4",
            53: "5",
            54: "6",
            55: "7",
            56: "8",
            57: "9",
            65: "a",
            66: "b",
            67: "c",
            68: "d",
            69: "e",
            70: "f",
            71: "g",
            72: "h",
            73: "i",
            74: "j",
            75: "k",
            76: "l",
            77: "m",
            78: "n",
            79: "o",
            80: "p",
            81: "q",
            82: "r",
            83: "s",
            84: "t",
            85: "u",
            86: "v",
            87: "w",
            88: "x",
            89: "y",
            90: "z",
            91: "left window key",
            92: "right window key",
            93: "select key",
            96: "numpad 0",
            97: "numpad 1",
            98: "numpad 2",
            99: "numpad 3",
            100: "numpad 4",
            101: "numpad 5",
            102: "numpad 6",
            103: "numpad 7",
            104: "numpad 8",
            105: "numpad 9",
            106: "multiply",
            107: "add",
            109: "subtract",
            110: "decimal point",
            111: "divide",
            112: "f1",
            113: "f2",
            114: "f3",
            115: "f4",
            116: "f5",
            117: "f6",
            118: "f7",
            119: "f8",
            120: "f9",
            121: "f10",
            122: "f11",
            123: "f12",
            144: "num lock",
            145: "scroll lock",
            186: "semi-colon",
            187: "equal sign",
            188: "comma",
            189: "dash",
            190: "period",
            191: "forward slash",
            192: "grave accent",
            219: "open bracket",
            220: "back slash",
            221: "close braket",
            222: "single quote"
        }
    }
    setupKeys() {
        for (let t = 0; t < 4; t++)
            for (let e = 0; e < 30; e++)
                this.controls[t][e] && (this.controls[t][e].value = parseInt(this.keyLookup(this.controls[t][e].value)),
                -1 === this.controls[t][e].value && this.debug && (delete this.controls[t][e].value,
                console.warn("Invalid key for control " + e + " player " + t)))
    }
    keyLookup(t) {
        if (void 0 === t)
            return 0;
        if ("number" == typeof t)
            return t;
        t = t.toString().toLowerCase();
        const e = Object.values(this.keyMap);
        if (e.includes(t)) {
            const i = e.indexOf(t);
            return Object.keys(this.keyMap)[i]
        }
        return -1
    }
    keyChange(t) {
        if (t.repeat)
            return;
        if (!this.started)
            return;
        if (null === this.controlPopup.parentElement.parentElement.getAttribute("hidden")) {
            const e = this.controlPopup.getAttribute("button-num")
              , i = this.controlPopup.getAttribute("player-num");
            return this.controls[i][e] || (this.controls[i][e] = {}),
            this.controls[i][e].value = t.keyCode,
            this.controlPopup.parentElement.parentElement.setAttribute("hidden", ""),
            this.checkGamepadInputs(),
            void this.saveSettings()
        }
        if ("none" !== this.settingsMenu.style.display || this.isPopupOpen() || "enabled" === this.getSettingValue("keyboardInput"))
            return;
        t.preventDefault();
        const e = [16, 17, 18, 19, 20, 21, 22, 23];
        for (let i = 0; i < 4; i++)
            for (let n = 0; n < 30; n++)
                this.controls[i][n] && this.controls[i][n].value === t.keyCode && this.gameManager.simulateInput(i, n, "keyup" === t.type ? 0 : e.includes(n) ? 32767 : 1)
    }
    gamepadEvent(t) {
        if (!this.started)
            return;
        const e = this.gamepadSelection.indexOf(this.gamepad.gamepads[t.gamepadIndex].id + "_" + this.gamepad.gamepads[t.gamepadIndex].index);
        if (e < 0)
            return;
        const i = function(t) {
            return t > .5 || t < -.5 ? t > 0 ? 1 : -1 : 0
        }(t.value || 0);
        if (null === this.controlPopup.parentElement.parentElement.getAttribute("hidden")) {
            if ("buttonup" === t.type || "axischanged" === t.type && 0 === i)
                return;
            const n = this.controlPopup.getAttribute("button-num")
              , s = parseInt(this.controlPopup.getAttribute("player-num"));
            if (e !== s)
                return;
            return this.controls[s][n] || (this.controls[s][n] = {}),
            this.controls[s][n].value2 = t.label,
            this.controlPopup.parentElement.parentElement.setAttribute("hidden", ""),
            this.checkGamepadInputs(),
            void this.saveSettings()
        }
        if ("none" !== this.settingsMenu.style.display || this.isPopupOpen())
            return;
        const n = [16, 17, 18, 19, 20, 21, 22, 23];
        for (let s = 0; s < 4; s++)
            if (e === s)
                for (let e = 0; e < 30; e++) {
                    if (!this.controls[s][e] || void 0 === this.controls[s][e].value2)
                        continue;
                    const o = this.controls[s][e].value2;
                    !["buttonup", "buttondown"].includes(t.type) || o !== t.label && o !== t.index ? "axischanged" === t.type && "string" == typeof o && o.split(":")[0] === t.axis && (n.includes(e) ? 16 === e || 17 === e ? t.value > 0 ? (this.gameManager.simulateInput(s, 16, 32767 * t.value),
                    this.gameManager.simulateInput(s, 17, 0)) : (this.gameManager.simulateInput(s, 17, -32767 * t.value),
                    this.gameManager.simulateInput(s, 16, 0)) : 18 === e || 19 === e ? t.value > 0 ? (this.gameManager.simulateInput(s, 18, 32767 * t.value),
                    this.gameManager.simulateInput(s, 19, 0)) : (this.gameManager.simulateInput(s, 19, -32767 * t.value),
                    this.gameManager.simulateInput(s, 18, 0)) : 20 === e || 21 === e ? t.value > 0 ? (this.gameManager.simulateInput(s, 20, 32767 * t.value),
                    this.gameManager.simulateInput(s, 21, 0)) : (this.gameManager.simulateInput(s, 21, -32767 * t.value),
                    this.gameManager.simulateInput(s, 20, 0)) : 22 !== e && 23 !== e || (t.value > 0 ? (this.gameManager.simulateInput(s, 22, 32767 * t.value),
                    this.gameManager.simulateInput(s, 23, 0)) : (this.gameManager.simulateInput(s, 23, -32767 * t.value),
                    this.gameManager.simulateInput(s, 22, 0))) : 0 !== i && o !== t.label && o !== `${t.axis}:${i}` || this.gameManager.simulateInput(s, e, 0 === i ? 0 : 1)) : this.gameManager.simulateInput(s, e, "buttonup" === t.type ? 0 : n.includes(e) ? 32767 : 1)
                }
    }
    setVirtualGamepad() {
        this.virtualGamepad = this.createElement("div"),
        this.toggleVirtualGamepad = t => {
            this.virtualGamepad.style.display = t ? "" : "none"
        }
        ,
        this.virtualGamepad.classList.add("ejs_virtualGamepad_parent"),
        this.elements.parent.appendChild(this.virtualGamepad);
        const t = [{
            type: "button",
            text: "Fast",
            id: "speed_fast",
            location: "center",
            left: -35,
            top: 50,
            fontSize: 15,
            block: !0,
            input_value: 27
        }, {
            type: "button",
            text: "Slow",
            id: "speed_slow",
            location: "center",
            left: 95,
            top: 50,
            fontSize: 15,
            block: !0,
            input_value: 29
        }];
        let e;
        this.rewindEnabled && t.push({
            type: "button",
            text: "Rewind",
            id: "speed_rewind",
            location: "center",
            left: 30,
            top: 50,
            fontSize: 15,
            block: !0,
            input_value: 28
        }),
        this.config.VirtualGamepadSettings && function(t) {
            if (!Array.isArray(t))
                return console.warn("Virtual gamepad settings is not array! Using default gamepad settings"),
                !1;
            if (!t.length)
                return console.warn("Virtual gamepad settings is empty! Using default gamepad settings"),
                !1;
            for (let e = 0; e < t.length; e++)
                if (t[e].type)
                    try {
                        if ("zone" === t[e].type || "dpad" === t[e].type) {
                            if (!t[e].location)
                                return console.warn("Missing location value for " + t[e].type + "! Using default gamepad settings"),
                                !1;
                            if (!t[e].inputValues)
                                return console.warn("Missing inputValues for " + t[e].type + "! Using default gamepad settings"),
                                !1;
                            continue
                        }
                        if (!t[e].location)
                            return console.warn("Missing location value for button " + t[e].text + "! Using default gamepad settings"),
                            !1;
                        if (!t[e].type)
                            return console.warn("Missing type value for button " + t[e].text + "! Using default gamepad settings"),
                            !1;
                        if (!t[e].id.toString())
                            return console.warn("Missing id value for button " + t[e].text + "! Using default gamepad settings"),
                            !1;
                        if (!t[e].input_value.toString())
                            return console.warn("Missing input_value for button " + t[e].text + "! Using default gamepad settings"),
                            !1
                    } catch (t) {
                        return console.warn("Error checking values! Using default gamepad settings"),
                        !1
                    }
            return !0
        }(this.config.VirtualGamepadSettings) ? e = this.config.VirtualGamepadSettings : "gba" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            left: 10,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            left: 81,
            top: 40,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            top: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "Select",
            id: "select",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }, {
            type: "button",
            text: "L",
            id: "l",
            location: "left",
            left: 3,
            top: -90,
            bold: !0,
            block: !0,
            input_value: 10
        }, {
            type: "button",
            text: "R",
            id: "r",
            location: "right",
            right: 3,
            top: -90,
            bold: !0,
            block: !0,
            input_value: 11
        }],
        e.push(...t)) : "gb" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            left: 81,
            top: 40,
            bold: !0,
            input_value: 8
        }, {
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            left: 10,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            top: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "Select",
            id: "select",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }],
        e.push(...t)) : "nes" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            right: 75,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            right: 5,
            top: 70,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "Select",
            id: "select",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }],
        e.push(...t)) : "n64" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            left: -10,
            top: 95,
            input_value: 1,
            bold: !0
        }, {
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            left: 40,
            top: 150,
            input_value: 0,
            bold: !0
        }, {
            type: "zone",
            id: "stick",
            location: "left",
            left: "50%",
            top: "100%",
            joystickInput: !0,
            inputValues: [16, 17, 18, 19]
        }, {
            type: "zone",
            id: "dpad",
            location: "left",
            left: "50%",
            top: "0%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 30,
            top: -10,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "L",
            id: "l",
            block: !0,
            location: "top",
            left: 10,
            top: -40,
            bold: !0,
            input_value: 10
        }, {
            type: "button",
            text: "R",
            id: "r",
            block: !0,
            location: "top",
            right: 10,
            top: -40,
            bold: !0,
            input_value: 11
        }, {
            type: "button",
            text: "Z",
            id: "z",
            block: !0,
            location: "top",
            left: 10,
            bold: !0,
            input_value: 12
        }, {
            fontSize: 20,
            type: "button",
            text: "CU",
            id: "cu",
            joystickInput: !0,
            location: "right",
            left: 25,
            top: -65,
            input_value: 23
        }, {
            fontSize: 20,
            type: "button",
            text: "CD",
            id: "cd",
            joystickInput: !0,
            location: "right",
            left: 25,
            top: 15,
            input_value: 22
        }, {
            fontSize: 20,
            type: "button",
            text: "CL",
            id: "cl",
            joystickInput: !0,
            location: "right",
            left: -15,
            top: -25,
            input_value: 21
        }, {
            fontSize: 20,
            type: "button",
            text: "CR",
            id: "cr",
            joystickInput: !0,
            location: "right",
            left: 65,
            top: -25,
            input_value: 20
        }],
        e.push(...t)) : "nds" === this.getControlScheme() || "snes" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "X",
            id: "x",
            location: "right",
            left: 40,
            bold: !0,
            input_value: 9
        }, {
            type: "button",
            text: "Y",
            id: "y",
            location: "right",
            top: 40,
            bold: !0,
            input_value: 1
        }, {
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            left: 81,
            top: 40,
            bold: !0,
            input_value: 8
        }, {
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            left: 40,
            top: 80,
            bold: !0,
            input_value: 0
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            top: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "Select",
            id: "select",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }, {
            type: "button",
            text: "L",
            id: "l",
            location: "left",
            left: 3,
            top: -100,
            bold: !0,
            block: !0,
            input_value: 10
        }, {
            type: "button",
            text: "R",
            id: "r",
            location: "right",
            right: 3,
            top: -100,
            bold: !0,
            block: !0,
            input_value: 11
        }],
        e.push(...t)) : ["segaMD", "segaCD", "sega32x"].includes(this.getControlScheme()) ? (e = [{
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            right: 145,
            top: 70,
            bold: !0,
            input_value: 1
        }, {
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            right: 75,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "C",
            id: "c",
            location: "right",
            right: 5,
            top: 70,
            bold: !0,
            input_value: 8
        }, {
            type: "button",
            text: "X",
            id: "x",
            location: "right",
            right: 145,
            top: 0,
            bold: !0,
            input_value: 10
        }, {
            type: "button",
            text: "Y",
            id: "y",
            location: "right",
            right: 75,
            top: 0,
            bold: !0,
            input_value: 9
        }, {
            type: "button",
            text: "Z",
            id: "z",
            location: "right",
            right: 5,
            top: 0,
            bold: !0,
            input_value: 11
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Mode",
            id: "mode",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }],
        e.push(...t)) : "segaMS" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "1",
            id: "button_1",
            location: "right",
            left: 10,
            top: 40,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "2",
            id: "button_2",
            location: "right",
            left: 81,
            top: 40,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }],
        e.push(...t)) : "segaGG" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "1",
            id: "button_1",
            location: "right",
            left: 10,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "2",
            id: "button_2",
            location: "right",
            left: 81,
            top: 40,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            top: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 30,
            fontSize: 15,
            block: !0,
            input_value: 3
        }],
        e.push(...t)) : "segaSaturn" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            right: 145,
            top: 70,
            bold: !0,
            input_value: 1
        }, {
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            right: 75,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "C",
            id: "c",
            location: "right",
            right: 5,
            top: 70,
            bold: !0,
            input_value: 8
        }, {
            type: "button",
            text: "X",
            id: "x",
            location: "right",
            right: 145,
            top: 0,
            bold: !0,
            input_value: 9
        }, {
            type: "button",
            text: "Y",
            id: "y",
            location: "right",
            right: 75,
            top: 0,
            bold: !0,
            input_value: 10
        }, {
            type: "button",
            text: "Z",
            id: "z",
            location: "right",
            right: 5,
            top: 0,
            bold: !0,
            input_value: 11
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "L",
            id: "l",
            location: "left",
            left: 3,
            top: -90,
            bold: !0,
            block: !0,
            input_value: 12
        }, {
            type: "button",
            text: "R",
            id: "r",
            location: "right",
            right: 3,
            top: -90,
            bold: !0,
            block: !0,
            input_value: 13
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 30,
            fontSize: 15,
            block: !0,
            input_value: 3
        }],
        e.push(...t)) : "atari2600" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "",
            id: "button_1",
            location: "right",
            right: 10,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Reset",
            id: "reset",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "Select",
            id: "select",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }],
        e.push(...t)) : "atari7800" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "1",
            id: "button_1",
            location: "right",
            right: 75,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "2",
            id: "button_2",
            location: "right",
            right: 5,
            top: 70,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Reset",
            id: "reset",
            location: "center",
            left: -35,
            fontSize: 15,
            block: !0,
            input_value: 9
        }, {
            type: "button",
            text: "Pause",
            id: "pause",
            location: "center",
            left: 95,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "Select",
            id: "select",
            location: "center",
            left: 30,
            fontSize: 15,
            block: !0,
            input_value: 2
        }],
        e.push(...t)) : "lynx" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "B",
            id: "button_1",
            location: "right",
            right: 75,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "A",
            id: "button_2",
            location: "right",
            right: 5,
            top: 70,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Opt 1",
            id: "option_1",
            location: "center",
            left: -35,
            fontSize: 15,
            block: !0,
            input_value: 10
        }, {
            type: "button",
            text: "Opt 2",
            id: "option_2",
            location: "center",
            left: 95,
            fontSize: 15,
            block: !0,
            input_value: 11
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 30,
            fontSize: 15,
            block: !0,
            input_value: 3
        }],
        e.push(...t)) : "jaguar" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            right: 145,
            top: 70,
            bold: !0,
            input_value: 8
        }, {
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            right: 75,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "C",
            id: "c",
            location: "right",
            right: 5,
            top: 70,
            bold: !0,
            input_value: 1
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Option",
            id: "option",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "Pause",
            id: "pause",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }],
        e.push(...t)) : "vb" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            right: 75,
            top: 150,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            right: 5,
            top: 150,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "left_dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "dpad",
            id: "right_dpad",
            location: "right",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [19, 18, 17, 16]
        }, {
            type: "button",
            text: "L",
            id: "l",
            location: "left",
            left: 3,
            top: -90,
            bold: !0,
            block: !0,
            input_value: 10
        }, {
            type: "button",
            text: "R",
            id: "r",
            location: "right",
            right: 3,
            top: -90,
            bold: !0,
            block: !0,
            input_value: 11
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "Select",
            id: "select",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }],
        e.push(...t)) : "3do" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            right: 145,
            top: 70,
            bold: !0,
            input_value: 1
        }, {
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            right: 75,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "C",
            id: "c",
            location: "right",
            right: 5,
            top: 70,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "L",
            id: "l",
            location: "left",
            left: 3,
            top: -90,
            bold: !0,
            block: !0,
            input_value: 10
        }, {
            type: "button",
            text: "R",
            id: "r",
            location: "right",
            right: 3,
            top: -90,
            bold: !0,
            block: !0,
            input_value: 11
        }, {
            type: "button",
            text: "X",
            id: "x",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            bold: !0,
            input_value: 2
        }, {
            type: "button",
            text: "P",
            id: "p",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            bold: !0,
            input_value: 3
        }],
        e.push(...t)) : "pce" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "II",
            id: "ii",
            location: "right",
            right: 75,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "I",
            id: "i",
            location: "right",
            right: 5,
            top: 70,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Run",
            id: "run",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "Select",
            id: "select",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }],
        e.push(...t)) : "ngp" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            right: 75,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            right: 5,
            top: 50,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Option",
            id: "option",
            location: "center",
            left: 30,
            fontSize: 15,
            block: !0,
            input_value: 3
        }],
        e.push(...t)) : "ws" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            right: 75,
            top: 150,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            right: 5,
            top: 150,
            bold: !0,
            input_value: 8
        }, {
            type: "dpad",
            id: "x_dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "dpad",
            id: "y_dpad",
            location: "right",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [13, 12, 10, 11]
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 30,
            fontSize: 15,
            block: !0,
            input_value: 3
        }],
        e.push(...t)) : "coleco" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "L",
            id: "l",
            location: "right",
            left: 10,
            top: 40,
            bold: !0,
            input_value: 8
        }, {
            type: "button",
            text: "R",
            id: "r",
            location: "right",
            left: 81,
            top: 40,
            bold: !0,
            input_value: 0
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }],
        e.push(...t)) : "pcfx" === this.getControlScheme() ? (e = [{
            type: "button",
            text: "I",
            id: "i",
            location: "right",
            right: 5,
            top: 70,
            bold: !0,
            input_value: 8
        }, {
            type: "button",
            text: "II",
            id: "ii",
            location: "right",
            right: 75,
            top: 70,
            bold: !0,
            input_value: 0
        }, {
            type: "button",
            text: "III",
            id: "iii",
            location: "right",
            right: 145,
            top: 70,
            bold: !0,
            input_value: 9
        }, {
            type: "button",
            text: "IV",
            id: "iv",
            location: "right",
            right: 5,
            top: 0,
            bold: !0,
            input_value: 1
        }, {
            type: "button",
            text: "V",
            id: "v",
            location: "right",
            right: 75,
            top: 0,
            bold: !0,
            input_value: 10
        }, {
            type: "button",
            text: "VI",
            id: "vi",
            location: "right",
            right: 145,
            top: 0,
            bold: !0,
            input_value: 11
        }, {
            type: "dpad",
            id: "dpad",
            location: "left",
            left: "50%",
            right: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Select",
            id: "select",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }, {
            type: "button",
            text: "Run",
            id: "run",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }],
        e.push(...t)) : (e = [{
            type: "button",
            text: "Y",
            id: "y",
            location: "right",
            left: 40,
            bold: !0,
            input_value: 9
        }, {
            type: "button",
            text: "X",
            id: "x",
            location: "right",
            top: 40,
            bold: !0,
            input_value: 1
        }, {
            type: "button",
            text: "B",
            id: "b",
            location: "right",
            left: 81,
            top: 40,
            bold: !0,
            input_value: 8
        }, {
            type: "button",
            text: "A",
            id: "a",
            location: "right",
            left: 40,
            top: 80,
            bold: !0,
            input_value: 0
        }, {
            type: "zone",
            id: "dpad",
            location: "left",
            left: "50%",
            top: "50%",
            joystickInput: !1,
            inputValues: [4, 5, 6, 7]
        }, {
            type: "button",
            text: "Start",
            id: "start",
            location: "center",
            left: 60,
            fontSize: 15,
            block: !0,
            input_value: 3
        }, {
            type: "button",
            text: "Select",
            id: "select",
            location: "center",
            left: -5,
            fontSize: 15,
            block: !0,
            input_value: 2
        }],
        e.push(...t));
        for (let t = 0; t < e.length; t++)
            e[t].text && (e[t].text = this.localization(e[t].text));
        e = JSON.parse(JSON.stringify(e));
        const i = this.createElement("div");
        i.classList.add("ejs_virtualGamepad_top");
        const n = this.createElement("div");
        n.classList.add("ejs_virtualGamepad_bottom");
        const s = this.createElement("div");
        s.classList.add("ejs_virtualGamepad_left");
        const o = this.createElement("div");
        o.classList.add("ejs_virtualGamepad_right");
        const a = {
            top: i,
            center: n,
            left: s,
            right: o
        };
        this.virtualGamepad.appendChild(i),
        this.virtualGamepad.appendChild(n),
        this.virtualGamepad.appendChild(s),
        this.virtualGamepad.appendChild(o),
        this.toggleVirtualGamepadLeftHanded = t => {
            s.classList.toggle("ejs_virtualGamepad_left", !t),
            o.classList.toggle("ejs_virtualGamepad_right", !t),
            s.classList.toggle("ejs_virtualGamepad_right", t),
            o.classList.toggle("ejs_virtualGamepad_left", t)
        }
        ;
        const l = !1
          , r = `cs_${this.getControlScheme()}`.split(/\s/g).join("_");
        for (let t = 0; t < e.length; t++) {
            if ("button" !== e[t].type)
                continue;
            l;
            let i = "";
            if (e[t].left && (i += "left:" + e[t].left + ("number" == typeof e[t].left ? "px" : "") + ";"),
            e[t].right && (i += "right:" + e[t].right + ("number" == typeof e[t].right ? "px" : "") + ";"),
            e[t].top && (i += "top:" + e[t].top + ("number" == typeof e[t].top ? "px" : "") + ";"),
            e[t].bold ? e[t].bold && (i += "font-weight:bold;") : i += "font-weight:normal;",
            e[t].fontSize = e[t].fontSize || 30,
            i += "font-size:" + e[t].fontSize + "px;",
            e[t].block && (i += "height:31px;text-align:center;border:1px solid #ccc;border-radius:5px;line-height:31px;"),
            ["top", "center", "left", "right"].includes(e[t].location)) {
                const n = this.createElement("div");
                n.style = i,
                n.innerText = e[t].text,
                n.classList.add("ejs_virtualGamepad_button", r),
                e[t].id && n.classList.add(`b_${e[t].id}`),
                a[e[t].location].appendChild(n);
                const s = e[t].input_new_cores || e[t].input_value;
                let o = !0 === e[t].joystickInput ? 32767 : 1;
                this.addEventListener(n, "touchstart touchend touchcancel", (t => {
                    t.preventDefault(),
                    "touchend" === t.type || "touchcancel" === t.type ? (t.target.classList.remove("ejs_virtualGamepad_button_down"),
                    window.setTimeout(( () => {
                        this.gameManager.simulateInput(0, s, 0)
                    }
                    ))) : (t.target.classList.add("ejs_virtualGamepad_button_down"),
                    this.gameManager.simulateInput(0, s, o))
                }
                ))
            }
        }
        const c = t => {
            const e = t.container
              , i = t.event
              , n = this.createElement("div");
            n.classList.add("ejs_dpad_main");
            const s = this.createElement("div");
            s.classList.add("ejs_dpad_vertical");
            const o = this.createElement("div");
            o.classList.add("ejs_dpad_horizontal");
            const a = this.createElement("div");
            a.classList.add("ejs_dpad_bar");
            const l = this.createElement("div");
            l.classList.add("ejs_dpad_bar"),
            o.appendChild(a),
            s.appendChild(l),
            n.appendChild(s),
            n.appendChild(o);
            this.addEventListener(n, "touchstart touchmove", (t => {
                t.preventDefault();
                const e = t.targetTouches[0];
                if (!e)
                    return;
                const s = n.getBoundingClientRect()
                  , o = e.clientX - s.left - n.clientWidth / 2
                  , a = e.clientY - s.top - n.clientHeight / 2;
                let l = 0
                  , r = 0
                  , c = 0
                  , d = 0
                  , g = Math.atan(o / a) / (Math.PI / 180);
                a <= -10 && (l = 1),
                a >= 10 && (r = 1),
                o >= 10 && (d = 1,
                c = 0,
                (g < 0 && g >= -35 || g > 0 && g <= 35) && (d = 0),
                l = g < 0 && g >= -55 ? 1 : 0,
                r = g > 0 && g <= 55 ? 1 : 0),
                o <= -10 && (d = 0,
                c = 1,
                (g < 0 && g >= -35 || g > 0 && g <= 35) && (c = 0),
                l = g > 0 && g <= 55 ? 1 : 0,
                r = g < 0 && g >= -55 ? 1 : 0),
                n.classList.toggle("ejs_dpad_up_pressed", l),
                n.classList.toggle("ejs_dpad_down_pressed", r),
                n.classList.toggle("ejs_dpad_right_pressed", d),
                n.classList.toggle("ejs_dpad_left_pressed", c),
                i(l, r, c, d)
            }
            )),
            this.addEventListener(n, "touchend touchcancel", (t => {
                t.preventDefault(),
                n.classList.remove("ejs_dpad_up_pressed"),
                n.classList.remove("ejs_dpad_down_pressed"),
                n.classList.remove("ejs_dpad_right_pressed"),
                n.classList.remove("ejs_dpad_left_pressed"),
                i(0, 0, 0, 0)
            }
            )),
            e.appendChild(n)
        }
        ;
        if (e.forEach(( (t, e) => {
            if ("dpad" !== t.type)
                return;
            const i = this.createElement("div");
            let n = "";
            t.left && (n += "left:" + t.left + ";"),
            t.right && (n += "right:" + t.right + ";"),
            t.top && (n += "top:" + t.top + ";"),
            i.classList.add(r),
            t.id && i.classList.add(`b_${t.id}`),
            i.style = n,
            a[t.location].appendChild(i),
            c({
                container: i,
                event: (e, i, n, s) => {
                    t.joystickInput && (1 === e && (e = 32767),
                    1 === i && (i = 32767),
                    1 === n && (n = 32767),
                    1 === s && (s = 32767)),
                    this.gameManager.simulateInput(0, t.inputValues[0], e),
                    this.gameManager.simulateInput(0, t.inputValues[1], i),
                    this.gameManager.simulateInput(0, t.inputValues[2], n),
                    this.gameManager.simulateInput(0, t.inputValues[3], s)
                }
            })
        }
        )),
        e.forEach(( (t, e) => {
            if ("zone" !== t.type)
                return;
            const i = this.createElement("div");
            this.addEventListener(i, "touchstart touchmove touchend touchcancel", (t => {
                t.preventDefault()
            }
            )),
            i.classList.add(r),
            t.id && i.classList.add(`b_${t.id}`),
            a[t.location].appendChild(i);
            const n = nipplejs.create({
                zone: i,
                mode: "static",
                position: {
                    left: t.left,
                    top: t.top
                },
                color: t.color || "red"
            });
            n.on("end", ( () => {
                this.gameManager.simulateInput(0, t.inputValues[0], 0),
                this.gameManager.simulateInput(0, t.inputValues[1], 0),
                this.gameManager.simulateInput(0, t.inputValues[2], 0),
                this.gameManager.simulateInput(0, t.inputValues[3], 0)
            }
            )),
            n.on("move", ( (e, i) => {
                const n = i.angle.degree
                  , s = i.distance;
                if (!0 === t.joystickInput) {
                    let e = 0
                      , i = 0;
                    n > 0 && n <= 45 && (e = s / 50,
                    i = -.022222222222222223 * n * s / 50),
                    n > 45 && n <= 90 && (e = .022222222222222223 * (90 - n) * s / 50,
                    i = -s / 50),
                    n > 90 && n <= 135 && (e = .022222222222222223 * (90 - n) * s / 50,
                    i = -s / 50),
                    n > 135 && n <= 180 && (e = -s / 50,
                    i = -.022222222222222223 * (180 - n) * s / 50),
                    n > 135 && n <= 225 && (e = -s / 50,
                    i = -.022222222222222223 * (180 - n) * s / 50),
                    n > 225 && n <= 270 && (e = -.022222222222222223 * (270 - n) * s / 50,
                    i = s / 50),
                    n > 270 && n <= 315 && (e = -.022222222222222223 * (270 - n) * s / 50,
                    i = s / 50),
                    n > 315 && n <= 359.9 && (e = s / 50,
                    i = .022222222222222223 * (360 - n) * s / 50),
                    e > 0 ? (this.gameManager.simulateInput(0, t.inputValues[0], 32767 * e),
                    this.gameManager.simulateInput(0, t.inputValues[1], 0)) : (this.gameManager.simulateInput(0, t.inputValues[1], 32767 * -e),
                    this.gameManager.simulateInput(0, t.inputValues[0], 0)),
                    i > 0 ? (this.gameManager.simulateInput(0, t.inputValues[2], 32767 * i),
                    this.gameManager.simulateInput(0, t.inputValues[3], 0)) : (this.gameManager.simulateInput(0, t.inputValues[3], 32767 * -i),
                    this.gameManager.simulateInput(0, t.inputValues[2], 0))
                } else
                    n >= 30 && n < 150 ? this.gameManager.simulateInput(0, t.inputValues[0], 1) : window.setTimeout(( () => {
                        this.gameManager.simulateInput(0, t.inputValues[0], 0)
                    }
                    ), 30),
                    n >= 210 && n < 330 ? this.gameManager.simulateInput(0, t.inputValues[1], 1) : window.setTimeout(( () => {
                        this.gameManager.simulateInput(0, t.inputValues[1], 0)
                    }
                    ), 30),
                    n >= 120 && n < 240 ? this.gameManager.simulateInput(0, t.inputValues[2], 1) : window.setTimeout(( () => {
                        this.gameManager.simulateInput(0, t.inputValues[2], 0)
                    }
                    ), 30),
                    n >= 300 || n >= 0 && n < 60 ? this.gameManager.simulateInput(0, t.inputValues[3], 1) : window.setTimeout(( () => {
                        this.gameManager.simulateInput(0, t.inputValues[3], 0)
                    }
                    ), 30)
            }
            ))
        }
        )),
        this.touch || this.hasTouchScreen) {
            const t = this.createElement("div");
            let e;
            t.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path d="M0 96C0 78.33 14.33 64 32 64H416C433.7 64 448 78.33 448 96C448 113.7 433.7 128 416 128H32C14.33 128 0 113.7 0 96zM0 256C0 238.3 14.33 224 32 224H416C433.7 224 448 238.3 448 256C448 273.7 433.7 288 416 288H32C14.33 288 0 273.7 0 256zM416 448H32C14.33 448 0 433.7 0 416C0 398.3 14.33 384 32 384H416C433.7 384 448 398.3 448 416C448 433.7 433.7 448 416 448z"/></svg>',
            t.classList.add("ejs_virtualGamepad_open"),
            t.style.display = "none",
            this.on("start", ( () => {
                t.style.display = "",
                matchMedia("(pointer:fine)").matches && "visible" !== this.getSettingValue("menu-bar-button") && (t.style.opacity = 0,
                this.changeSettingOption("menu-bar-button", "hidden", !0))
            }
            )),
            this.elements.parent.appendChild(t);
            let i = !0;
            this.addEventListener(t, "touchstart touchend mousedown mouseup click", (t => {
                i && (clearTimeout(e),
                e = setTimeout(( () => {
                    i = !0
                }
                ), 2e3),
                i = !1,
                t.preventDefault(),
                this.menu.toggle())
            }
            )),
            this.elements.menuToggle = t
        }
        this.virtualGamepad.style.display = "none"
    }
    handleResize() {
        this.virtualGamepad && "none" === this.virtualGamepad.style.display && (this.virtualGamepad.style.opacity = 0,
        this.virtualGamepad.style.display = "",
        setTimeout(( () => {
            this.virtualGamepad.style.display = "none",
            this.virtualGamepad.style.opacity = ""
        }
        ), 250));
        const t = this.elements.parent.getBoundingClientRect();
        this.game.parentElement.classList.toggle("ejs_small_screen", t.width <= 575),
        this.game.parentElement.classList.toggle("ejs_big_screen", t.width > 575),
        this.handleSettingsResize && this.handleSettingsResize()
    }
    getElementSize(t) {
        let e = t.cloneNode(!0);
        e.style.position = "absolute",
        e.style.opacity = 0,
        e.removeAttribute("hidden"),
        t.parentNode.appendChild(e);
        const i = e.getBoundingClientRect();
        return e.remove(),
        {
            width: i.width,
            height: i.height
        }
    }
    saveSettings() {
        if (!window.localStorage || this.config.disableLocalStorage || !this.settingsLoaded)
            return;
        if (!this.started && !this.failedToStart)
            return;
        const t = {
            controlSettings: this.controls,
            settings: this.settings,
            cheats: this.cheats
        }
          , e = {
            volume: this.volume,
            muted: this.muted
        };
        localStorage.setItem("ejs-settings", JSON.stringify(e)),
        localStorage.setItem(this.getLocalStorageKey(), JSON.stringify(t))
    }
    getLocalStorageKey() {
        let t = (this.config.gameId || 1) + "-" + this.getCore(!0);
        return "string" == typeof this.config.gameName ? t += "-" + this.config.gameName : "string" != typeof this.config.gameUrl || this.config.gameUrl.toLowerCase().startsWith("blob:") ? this.config.gameUrl instanceof File ? t += "-" + this.config.gameUrl.name : "number" != typeof this.config.gameId && console.warn("gameId (EJS_gameID) is not set. This may result in settings persisting across games.") : t += "-" + this.config.gameUrl,
        "ejs-" + t + "-settings"
    }
    preGetSetting(t) {
        if (window.localStorage && !this.config.disableLocalStorage) {
            let e = localStorage.getItem(this.getLocalStorageKey());
            try {
                if (e = JSON.parse(e),
                e && e.settings)
                    return e.settings[t]
            } catch (t) {
                console.warn("Could not load previous settings", t)
            }
        }
        return this.config.defaultOptions && this.config.defaultOptions[t] ? this.config.defaultOptions[t] : null
    }
    getCoreSettings() {
        if (!window.localStorage || this.config.disableLocalStorage) {
            if (this.config.defaultOptions) {
                let t = "";
                for (const e in this.config.defaultOptions) {
                    t += `${e} = ${isNaN(this.config.defaultOptions[e]) ? `"${this.config.defaultOptions[e]}"` : this.config.defaultOptions[e]}\n`
                }
                return t
            }
            return ""
        }
        let t = localStorage.getItem(this.getLocalStorageKey());
        if (t)
            try {
                if (t = JSON.parse(t),
                !(t.settings instanceof Object))
                    throw new Error("Not a JSON object");
                let e = "";
                for (const i in t.settings) {
                    e += `${i} = ${isNaN(t.settings[i]) ? `"${t.settings[i]}"` : t.settings[i]}\n`
                }
                for (const t in this.config.defaultOptions) {
                    if (e.includes(t))
                        continue;
                    e += `${t} = ${isNaN(this.config.defaultOptions[t]) ? `"${this.config.defaultOptions[t]}"` : this.config.defaultOptions[t]}\n`
                }
                return e
            } catch (t) {
                console.warn("Could not load previous settings", t)
            }
        return ""
    }
    loadSettings() {
        if (!window.localStorage || this.config.disableLocalStorage)
            return;
        this.settingsLoaded = !0;
        let t = localStorage.getItem("ejs-settings")
          , e = localStorage.getItem(this.getLocalStorageKey());
        if (e)
            try {
                if (e = JSON.parse(e),
                !(e.controlSettings instanceof Object && e.settings instanceof Object && Array.isArray(e.cheats)))
                    return;
                this.controls = e.controlSettings,
                this.checkGamepadInputs();
                for (const t in e.settings)
                    this.changeSettingOption(t, e.settings[t]);
                for (let t = 0; t < e.cheats.length; t++) {
                    const i = e.cheats[t];
                    let n = !1;
                    for (let t = 0; t < this.cheats.length; t++)
                        if (this.cheats[t].desc === i.desc && this.cheats[t].code === i.code) {
                            this.cheats[t].checked = i.checked,
                            n = !0;
                            break
                        }
                    n || this.cheats.push(i)
                }
            } catch (t) {
                console.warn("Could not load previous settings", t)
            }
        if (t)
            try {
                if (t = JSON.parse(t),
                "number" != typeof t.volume || "boolean" != typeof t.muted)
                    return;
                this.volume = t.volume,
                this.muted = t.muted,
                this.setVolume(this.muted ? 0 : this.volume)
            } catch (t) {
                console.warn("Could not load previous settings", t)
            }
    }
    handleSpecialOptions(t, e) {
        if ("shader" === t)
            this.enableShader(e);
        else if ("disk" === t)
            this.gameManager.setCurrentDisk(e);
        else if ("virtual-gamepad" === t)
            this.toggleVirtualGamepad("disabled" !== e);
        else if ("menu-bar-button" === t)
            this.elements.menuToggle.style.display = "",
            this.elements.menuToggle.style.opacity = "visible" === e ? .5 : 0;
        else if ("virtual-gamepad-left-handed-mode" === t)
            this.toggleVirtualGamepadLeftHanded("disabled" !== e);
        else if ("ff-ratio" === t)
            this.isFastForward && this.gameManager.toggleFastForward(0),
            "unlimited" === e ? this.gameManager.setFastForwardRatio(0) : isNaN(e) || this.gameManager.setFastForwardRatio(parseFloat(e)),
            setTimeout(( () => {
                this.isFastForward && this.gameManager.toggleFastForward(1)
            }
            ), 10);
        else if ("fastForward" === t)
            "enabled" === e ? (this.isFastForward = !0,
            this.gameManager.toggleFastForward(1)) : "disabled" === e && (this.isFastForward = !1,
            this.gameManager.toggleFastForward(0));
        else if ("sm-ratio" === t)
            this.isSlowMotion && this.gameManager.toggleSlowMotion(0),
            this.gameManager.setSlowMotionRatio(parseFloat(e)),
            setTimeout(( () => {
                this.isSlowMotion && this.gameManager.toggleSlowMotion(1)
            }
            ), 10);
        else if ("slowMotion" === t)
            "enabled" === e ? (this.isSlowMotion = !0,
            this.gameManager.toggleSlowMotion(1)) : "disabled" === e && (this.isSlowMotion = !1,
            this.gameManager.toggleSlowMotion(0));
        else if ("rewind-granularity" === t)
            this.rewindEnabled && this.gameManager.setRewindGranularity(parseInt(e));
        else if ("vsync" === t)
            this.gameManager.setVSync("enabled" === e);
        else if ("videoRotation" === t)
            e = parseInt(e),
            !0 === this.videoRotationChanged || 0 !== e ? (this.gameManager.setVideoRotation(e),
            this.videoRotationChanged = !0) : !0 === this.videoRotationChanged && 0 === e && (this.gameManager.setVideoRotation(0),
            this.videoRotationChanged = !0);
        else if ("save-save-interval" === t) {
            if (e = parseInt(e),
            this.saveSaveInterval && null !== this.saveSaveInterval && (clearInterval(this.saveSaveInterval),
            this.saveSaveInterval = null),
            0 === e || isNaN(e))
                return;
            this.started && this.gameManager.saveSaveFiles(),
            this.debug && console.log("Saving every", 1e3 * e, "miliseconds"),
            this.saveSaveInterval = setInterval(( () => {
                this.started && this.gameManager.saveSaveFiles()
            }
            ), 1e3 * e)
        } else
            "menubarBehavior" === t ? this.createBottomMenuBarListeners() : "keyboardInput" === t ? this.gameManager.setKeyboardEnabled("enabled" === e) : "altKeyboardInput" === t ? this.gameManager.setAltKeyEnabled("enabled" === e) : "lockMouse" === t && (this.enableMouseLock = "enabled" === e)
    }
    menuOptionChanged(t, e) {
        this.saveSettings(),
        this.allSettings[t] = e,
        this.debug && console.log(t, e),
        this.gameManager && (this.handleSpecialOptions(t, e),
        this.gameManager.setVariable(t, e),
        this.saveSettings())
    }
    setupDisksMenu() {
        this.disksMenu = this.createElement("div"),
        this.disksMenu.classList.add("ejs_settings_parent");
        const t = this.createElement("div");
        t.classList.add("ejs_settings_transition"),
        this.disks = {};
        const e = this.createElement("div");
        e.style.overflow = "auto";
        const i = [];
        this.handleDisksResize = () => {
            let n = !1;
            "" !== this.disksMenu.style.display && (this.disksMenu.style.opacity = "0",
            this.disksMenu.style.display = "",
            n = !0);
            let s = this.elements.parent.getBoundingClientRect().height
              , o = this.diskParent.parentElement.getBoundingClientRect().width
              , a = this.diskParent.getBoundingClientRect().x;
            o > window.innerWidth && (a += o - window.innerWidth);
            const l = a > (o - 15) / 2;
            s > 375 && (s = 375),
            e.style["max-height"] = s - 95 + "px",
            t.style["max-height"] = s - 95 + "px";
            for (let t = 0; t < i.length; t++)
                i[t].style["max-height"] = s - 95 + "px";
            this.disksMenu.classList.toggle("ejs_settings_center_left", !l),
            this.disksMenu.classList.toggle("ejs_settings_center_right", l),
            n && (this.disksMenu.style.display = "none",
            this.disksMenu.style.opacity = "")
        }
        ,
        e.classList.add("ejs_setting_menu"),
        t.appendChild(e);
        let n = [];
        this.changeDiskOption = (t, e) => {
            this.disks[t] = e,
            n.forEach((e => e(t)))
        }
        ;
        let s = {};
        const o = (o, a, l, r) => {
            const c = this.createElement("span");
            c.innerText = o;
            const d = this.createElement("div");
            d.innerText = "",
            d.classList.add("ejs_settings_main_bar_selected"),
            c.appendChild(d);
            const g = this.createElement("div");
            i.push(g),
            g.setAttribute("hidden", ""),
            g.classList.add("ejs_parent_option_div");
            const h = this.createElement("button")
              , p = () => {
                const i = this.getElementSize(e);
                t.style.width = i.width + 20 + "px",
                t.style.height = i.height + "px",
                g.setAttribute("hidden", ""),
                e.removeAttribute("hidden")
            }
            ;
            this.addEventListener(h, "click", p),
            h.type = "button",
            h.classList.add("ejs_back_button"),
            g.appendChild(h);
            const u = this.createElement("span");
            u.innerText = o,
            u.classList.add("ejs_menu_text_a"),
            h.appendChild(u);
            const m = this.createElement("div");
            m.classList.add("ejs_setting_menu");
            let I = []
              , C = l;
            if (Array.isArray(l)) {
                C = {};
                for (let t = 0; t < l.length; t++)
                    C[l[t]] = l[t]
            }
            s[a] = C,
            n.push((t => {
                if (a === t) {
                    for (let t = 0; t < I.length; t++)
                        I[t].classList.toggle("ejs_option_row_selected", I[t].getAttribute("ejs_value") === this.disks[a]);
                    this.menuOptionChanged(a, this.disks[a]),
                    d.innerText = C[this.disks[a]]
                }
            }
            ));
            for (const t in C) {
                const e = this.createElement("button");
                I.push(e),
                e.setAttribute("ejs_value", t),
                e.type = "button",
                e.value = C[t],
                e.classList.add("ejs_option_row"),
                e.classList.add("ejs_button_style"),
                this.addEventListener(e, "click", (i => {
                    this.disks[a] = t;
                    for (let t = 0; t < I.length; t++)
                        I[t].classList.remove("ejs_option_row_selected");
                    e.classList.add("ejs_option_row_selected"),
                    this.menuOptionChanged(a, t),
                    d.innerText = C[t],
                    p()
                }
                )),
                r === t && (e.classList.add("ejs_option_row_selected"),
                this.menuOptionChanged(a, t),
                d.innerText = C[t]);
                const i = this.createElement("span");
                i.innerText = C[t],
                e.appendChild(i),
                m.appendChild(e)
            }
            e.appendChild(m),
            t.appendChild(g)
        }
        ;
        if (this.gameManager.getDiskCount() > 1) {
            const t = {};
            let e = !1
              , i = {};
            "m3u" === this.fileName.split(".").pop() && (i = this.gameManager.Module.FS.readFile(this.fileName, {
                encoding: "utf8"
            }).split("\n"),
            e = !0);
            for (let n = 0; n < this.gameManager.getDiskCount(); n++)
                if (e) {
                    const e = i[n].split("|");
                    let s = e[0].replace("." + e[0].split(".").pop(), "");
                    e.length >= 2 && (s = e[1]),
                    t[n.toString()] = s
                } else
                    t[n.toString()] = "Disk " + (n + 1);
            o(this.localization("Disk"), "disk", t, this.gameManager.getCurrentDisk().toString())
        }
        this.disksMenu.appendChild(t),
        this.diskParent.appendChild(this.disksMenu),
        this.diskParent.style.position = "relative";
        const a = this.getElementSize(e);
        if (t.style.width = a.width + 20 + "px",
        t.style.height = a.height + "px",
        this.disksMenu.style.display = "none",
        this.debug && console.log("Available core options", s),
        this.config.defaultOptions)
            for (const t in this.config.defaultOptions)
                this.changeDiskOption(t, this.config.defaultOptions[t])
    }
    getSettingValue(t) {
        return this.allSettings[t] || this.settings[t] || null
    }
    setupSettingsMenu() {
        this.settingsMenu = this.createElement("div"),
        this.settingsMenu.classList.add("ejs_settings_parent");
        const t = this.createElement("div");
        t.classList.add("ejs_settings_transition"),
        this.settings = {},
        this.allSettings = {};
        const e = [];
        let i = 0;
        const n = (n, s, o) => {
            const a = this.createElement("div");
            if (a.classList.add("ejs_setting_menu"),
            n) {
                const n = this.createElement("div");
                n.classList.add("ejs_settings_main_bar");
                const l = this.createElement("span");
                l.innerText = s,
                n.appendChild(l),
                o.appendChild(n);
                const r = this.createElement("div")
                  , c = this.createElement("div");
                e.push(r),
                i++,
                r.setAttribute("hidden", ""),
                c.classList.add("ejs_parent_option_div");
                const d = this.createElement("button")
                  , g = () => {
                    const e = this.getElementSize(o);
                    t.style.width = e.width + 20 + "px",
                    t.style.height = e.height + "px",
                    r.setAttribute("hidden", ""),
                    o.removeAttribute("hidden")
                }
                ;
                this.addEventListener(n, "click", (e => {
                    const i = this.getElementSize(r);
                    t.style.width = i.width + 20 + "px",
                    t.style.height = i.height + "px",
                    r.removeAttribute("hidden"),
                    a.scrollTo(0, 0),
                    o.setAttribute("hidden", "")
                }
                ));
                const h = new MutationObserver((i => {
                    for (const s of i)
                        for (const i of s.removedNodes)
                            if (i === r) {
                                n.remove(),
                                h.disconnect();
                                const i = e.indexOf(r);
                                -1 !== i && e.splice(i, 1),
                                this.settingsMenu.style.display = "";
                                const s = this.getElementSize(o);
                                t.style.width = s.width + 20 + "px",
                                t.style.height = s.height + "px",
                                this.settingsMenu.style.display = "none"
                            }
                }
                ));
                this.addEventListener(d, "click", g),
                d.type = "button",
                d.classList.add("ejs_back_button"),
                c.appendChild(d);
                const p = this.createElement("span");
                p.innerText = s,
                p.classList.add("ejs_menu_text_a"),
                d.appendChild(p),
                c.appendChild(a),
                r.appendChild(c),
                t.appendChild(r),
                h.observe(t, {
                    childList: !0,
                    subtree: !0
                })
            }
            return a
        }
          , s = t => {
            null === t.firstChild && (t.parentElement.remove(),
            i--)
        }
          , o = n();
        this.handleSettingsResize = () => {
            let i = !1;
            "" !== this.settingsMenu.style.display && (this.settingsMenu.style.opacity = "0",
            this.settingsMenu.style.display = "",
            i = !0);
            let n = this.elements.parent.getBoundingClientRect().height
              , s = this.settingParent.parentElement.getBoundingClientRect().width
              , a = this.settingParent.getBoundingClientRect().x;
            s > window.innerWidth && (a += s - window.innerWidth);
            const l = a > (s - 15) / 2;
            n > 375 && (n = 375),
            o.style["max-height"] = n - 95 + "px",
            t.style["max-height"] = n - 95 + "px";
            for (let t = 0; t < e.length; t++)
                e[t].style["max-height"] = n - 95 + "px";
            this.settingsMenu.classList.toggle("ejs_settings_center_left", !l),
            this.settingsMenu.classList.toggle("ejs_settings_center_right", l),
            i && (this.settingsMenu.style.display = "none",
            this.settingsMenu.style.opacity = "")
        }
        ,
        t.appendChild(o);
        let a = []
          , l = {};
        this.changeSettingOption = (t, e, i) => {
            this.allSettings[t] = e,
            !0 !== i && (this.settings[t] = e),
            l[t] = e,
            a.forEach((e => e(t)))
        }
        ;
        let r = {};
        const c = (i, n, s, c, d, g) => {
            if (Array.isArray(this.config.hideSettings) && this.config.hideSettings.includes(n))
                return;
            d = d || o;
            const h = g ? d.parentElement.parentElement : d
              , p = this.createElement("div");
            p.classList.add("ejs_settings_main_bar");
            const u = this.createElement("span");
            u.innerText = i;
            const m = this.createElement("div");
            m.innerText = "",
            m.classList.add("ejs_settings_main_bar_selected"),
            u.appendChild(m),
            p.appendChild(u),
            d.appendChild(p);
            const I = this.createElement("div");
            e.push(I);
            const C = this.createElement("div");
            I.setAttribute("hidden", ""),
            C.classList.add("ejs_parent_option_div");
            const b = this.createElement("div");
            b.classList.add("ejs_setting_menu");
            const y = this.createElement("button")
              , Z = () => {
                h.removeAttribute("hidden"),
                I.setAttribute("hidden", "");
                const e = this.getElementSize(h);
                t.style.width = e.width + 20 + "px",
                t.style.height = e.height + "px",
                h.removeAttribute("hidden")
            }
            ;
            this.addEventListener(p, "click", (e => {
                const i = this.getElementSize(I);
                t.style.width = i.width + 20 + "px",
                t.style.height = i.height + "px",
                I.removeAttribute("hidden"),
                b.scrollTo(0, 0),
                h.setAttribute("hidden", ""),
                h.setAttribute("hidden", "")
            }
            )),
            this.addEventListener(y, "click", Z),
            y.type = "button",
            y.classList.add("ejs_back_button"),
            C.appendChild(y);
            const V = this.createElement("span");
            V.innerText = i,
            V.classList.add("ejs_menu_text_a"),
            y.appendChild(V);
            let f = []
              , B = s;
            if (Array.isArray(s)) {
                B = {};
                for (let t = 0; t < s.length; t++)
                    B[s[t]] = s[t]
            }
            r[n] = B,
            a.push((t => {
                if (n === t) {
                    for (let t = 0; t < f.length; t++)
                        f[t].classList.toggle("ejs_option_row_selected", f[t].getAttribute("ejs_value") === l[n]);
                    this.menuOptionChanged(n, l[n]),
                    m.innerText = B[l[n]]
                }
            }
            ));
            for (const t in B) {
                const e = this.createElement("button");
                f.push(e),
                e.setAttribute("ejs_value", t),
                e.type = "button",
                e.value = B[t],
                e.classList.add("ejs_option_row"),
                e.classList.add("ejs_button_style"),
                this.addEventListener(e, "click", (i => {
                    this.changeSettingOption(n, t);
                    for (let t = 0; t < f.length; t++)
                        f[t].classList.remove("ejs_option_row_selected");
                    e.classList.add("ejs_option_row_selected"),
                    this.menuOptionChanged(n, t),
                    m.innerText = B[t],
                    Z()
                }
                )),
                c === t && (e.classList.add("ejs_option_row_selected"),
                this.menuOptionChanged(n, t),
                m.innerText = B[t]);
                const i = this.createElement("span");
                i.innerText = B[t],
                e.appendChild(i),
                b.appendChild(e)
            }
            C.appendChild(b),
            I.appendChild(C),
            t.appendChild(I)
        }
          , d = this.getCores()[this.getCore(!0)];
        d && d.length > 1 && c(this.localization("Core (" + this.localization("Requires restart") + ")"), "retroarch_core", d, this.getCore(), o),
        "function" != typeof window.SharedArrayBuffer || this.requiresThreads(this.getCore()) || c(this.localization("Threads"), "ejs_threads", {
            enabled: this.localization("Enabled"),
            disabled: this.localization("Disabled")
        }, this.config.threads ? "enabled" : "disabled", o);
        const g = n(!0, "Graphics Settings", o);
        if (this.config.shaders) {
            const t = {
                "2xScaleHQ.glslp": this.localization("2xScaleHQ"),
                "4xScaleHQ.glslp": this.localization("4xScaleHQ"),
                "crt-aperture.glslp": this.localization("CRT aperture"),
                "crt-beam": this.localization("CRT beam"),
                "crt-caligari": this.localization("CRT caligari"),
                "crt-easymode.glslp": this.localization("CRT easymode"),
                "crt-geom.glslp": this.localization("CRT geom"),
                "crt-lottes": this.localization("CRT lottes"),
                "crt-mattias.glslp": this.localization("CRT mattias"),
                "crt-yeetron": this.localization("CRT yeetron"),
                "crt-zfast": this.localization("CRT zfast"),
                sabr: this.localization("SABR"),
                bicubic: this.localization("Bicubic"),
                "mix-frames": this.localization("Mix frames")
            };
            let e = {
                disabled: this.localization("Disabled")
            };
            for (const i in this.config.shaders)
                t[i] ? e[i] = t[i] : e[i] = i;
            c(this.localization("Shaders"), "shader", e, "disabled", g, !0)
        }
        this.supportsWebgl2 && !this.requiresWebGL2(this.getCore()) && c(this.localization("WebGL2") + " (" + this.localization("Requires restart") + ")", "webgl2Enabled", {
            enabled: this.localization("Enabled"),
            disabled: this.localization("Disabled")
        }, this.webgl2Enabled ? "enabled" : "disabled", g, !0),
        c(this.localization("FPS"), "fps", {
            show: this.localization("show"),
            hide: this.localization("hide")
        }, "hide", g, !0),
        c(this.localization("VSync"), "vsync", {
            enabled: this.localization("Enabled"),
            disabled: this.localization("Disabled")
        }, "enabled", g, !0),
        c(this.localization("Video Rotation"), "videoRotation", {
            0: "0 deg",
            1: "90 deg",
            2: "180 deg",
            3: "270 deg"
        }, this.videoRotation.toString(), g, !0);
        const h = n(!0, "Screen Capture", o);
        c(this.localization("Screenshot Source"), "screenshotSource", {
            canvas: "canvas",
            retroarch: "retroarch"
        }, this.capture.photo.source, h, !0);
        let p = {
            png: "png",
            jpeg: "jpeg",
            webp: "webp"
        };
        this.isSafari && delete p.webp,
        this.capture.photo.format in p || (this.capture.photo.format = "png"),
        c(this.localization("Screenshot Format"), "screenshotFormat", p, this.capture.photo.format, h, !0);
        const u = this.capture.photo.upscale.toString();
        let m = {
            0: "native",
            1: "1x",
            2: "2x",
            3: "3x"
        };
        u in m || (m[u] = u + "x"),
        c(this.localization("Screenshot Upscale"), "screenshotUpscale", m, u, h, !0);
        const I = this.capture.video.fps.toString();
        let C = {
            30: "30",
            60: "60"
        };
        I in C || (C[I] = I),
        c(this.localization("Screen Recording FPS"), "screenRecordFPS", C, I, h, !0);
        let b = {
            mp4: "mp4",
            webm: "webm"
        };
        for (const t in b)
            MediaRecorder.isTypeSupported("video/" + t) || delete b[t];
        this.capture.video.format in b || (this.capture.video.format = Object.keys(b)[0]),
        c(this.localization("Screen Recording Format"), "screenRecordFormat", b, this.capture.video.format, h, !0);
        const y = this.capture.video.upscale.toString();
        let Z = {
            1: "1x",
            2: "2x",
            3: "3x",
            4: "4x"
        };
        y in Z || (Z[y] = y + "x"),
        c(this.localization("Screen Recording Upscale"), "screenRecordUpscale", Z, y, h, !0);
        const V = this.capture.video.videoBitrate.toString();
        let f = {
            1048576: "1 Mbit/sec",
            2097152: "2 Mbit/sec",
            2621440: "2.5 Mbit/sec",
            3145728: "3 Mbit/sec",
            4194304: "4 Mbit/sec"
        };
        V in f || (f[V] = V + " Bits/sec"),
        c(this.localization("Screen Recording Video Bitrate"), "screenRecordVideoBitrate", f, V, h, !0);
        const B = this.capture.video.audioBitrate.toString();
        let S = {
            65536: "64 Kbit/sec",
            131072: "128 Kbit/sec",
            196608: "192 Kbit/sec",
            262144: "256 Kbit/sec",
            327680: "320 Kbit/sec"
        };
        B in S || (S[B] = B + " Bits/sec"),
        c(this.localization("Screen Recording Audio Bitrate"), "screenRecordAudioBitrate", S, B, h, !0),
        s(h);
        const A = n(!0, "Speed Options", o);
        c(this.localization("Fast Forward"), "fastForward", {
            enabled: this.localization("Enabled"),
            disabled: this.localization("Disabled")
        }, "disabled", A, !0),
        c(this.localization("Fast Forward Ratio"), "ff-ratio", ["1.5", "2.0", "2.5", "3.0", "3.5", "4.0", "4.5", "5.0", "5.5", "6.0", "6.5", "7.0", "7.5", "8.0", "8.5", "9.0", "9.5", "10.0", "unlimited"], "3.0", A, !0),
        c(this.localization("Slow Motion"), "slowMotion", {
            enabled: this.localization("Enabled"),
            disabled: this.localization("Disabled")
        }, "disabled", A, !0),
        c(this.localization("Slow Motion Ratio"), "sm-ratio", ["1.5", "2.0", "2.5", "3.0", "3.5", "4.0", "4.5", "5.0", "5.5", "6.0", "6.5", "7.0", "7.5", "8.0", "8.5", "9.0", "9.5", "10.0"], "3.0", A, !0),
        c(this.localization("Rewind Enabled (" + this.localization("Requires restart") + ")"), "rewindEnabled", {
            enabled: this.localization("Enabled"),
            disabled: this.localization("Disabled")
        }, "disabled", A, !0),
        this.rewindEnabled && c(this.localization("Rewind Granularity"), "rewind-granularity", ["1", "3", "6", "12", "25", "50", "100"], "6", A, !0);
        const v = n(!0, "Input Options", o);
        if (c(this.localization("Menubar Mouse Trigger"), "menubarBehavior", {
            downward: this.localization("Downward Movement"),
            anywhere: this.localization("Movement Anywhere")
        }, "downward", v, !0),
        c(this.localization("Direct Keyboard Input"), "keyboardInput", {
            disabled: this.localization("Disabled"),
            enabled: this.localization("Enabled")
        }, this.defaultCoreOpts && !0 === this.defaultCoreOpts.useKeyboard ? "enabled" : "disabled", v, !0),
        c(this.localization("Forward Alt key"), "altKeyboardInput", {
            disabled: this.localization("Disabled"),
            enabled: this.localization("Enabled")
        }, "disabled", v, !0),
        c(this.localization("Lock Mouse"), "lockMouse", {
            disabled: this.localization("Disabled"),
            enabled: this.localization("Enabled")
        }, !0 === this.enableMouseLock ? "enabled" : "disabled", v, !0),
        s(v),
        this.saveInBrowserSupported()) {
            const t = n(!0, "Save States", o);
            c(this.localization("Save State Slot"), "save-state-slot", ["1", "2", "3", "4", "5", "6", "7", "8", "9"], "1", t, !0),
            c(this.localization("Save State Location"), "save-state-location", {
                download: this.localization("Download"),
                browser: this.localization("Keep in Browser")
            }, "download", t, !0),
            c(this.localization("System Save interval"), "save-save-interval", {
                0: "Disabled",
                30: "30 seconds",
                60: "1 minute",
                300: "5 minutes",
                600: "10 minutes",
                900: "15 minutes",
                1800: "30 minutes"
            }, "300", t, !0),
            s(t)
        }
        if (this.touch || this.hasTouchScreen) {
            const t = n(!0, "Virtual Gamepad", o);
            c(this.localization("Virtual Gamepad"), "virtual-gamepad", {
                enabled: this.localization("Enabled"),
                disabled: this.localization("Disabled")
            }, this.isMobile ? "enabled" : "disabled", t, !0),
            c(this.localization("Menu Bar Button"), "menu-bar-button", {
                visible: this.localization("visible"),
                hidden: this.localization("hidden")
            }, "visible", t, !0),
            c(this.localization("Left Handed Mode"), "virtual-gamepad-left-handed-mode", {
                enabled: this.localization("Enabled"),
                disabled: this.localization("Disabled")
            }, "disabled", t, !0),
            s(t)
        }
        let w;
        try {
            w = this.gameManager.getCoreOptions()
        } catch (t) {}
        if (w) {
            const t = n(!0, "Backend Core Options", o);
            w.split("\n").forEach(( (e, i) => {
                let n = e.split("; ")
                  , s = n[0]
                  , o = n[1].split("|")
                  , a = s.split("|")[0].replace(/_/g, " ").replace(/.+\-(.+)/, "$1");
                if (o.slice(1, -1),
                1 === o.length)
                    return;
                let l = {};
                for (let t = 0; t < o.length; t++)
                    l[o[t]] = this.localization(o[t], this.config.settingsLanguage);
                c(this.localization(a, this.config.settingsLanguage), s.split("|")[0], l, s.split("|").length > 1 ? s.split("|")[1] : o[0].replace("(Default) ", ""), t, !0)
            }
            )),
            s(t)
        }
        if (this.retroarchOpts && Array.isArray(this.retroarchOpts)) {
            const t = n(!0, "RetroArch Options (" + this.localization("Requires restart") + ")", o);
            this.retroarchOpts.forEach((e => {
                c(this.localization(e.title, this.config.settingsLanguage), e.name, e.options, e.default, t, !0)
            }
            )),
            s(t)
        }
        s(g),
        s(A),
        this.settingsMenu.appendChild(t),
        this.settingParent.appendChild(this.settingsMenu),
        this.settingParent.style.position = "relative",
        this.settingsMenu.style.display = "";
        const U = this.getElementSize(o);
        if (t.style.width = U.width + 20 + "px",
        t.style.height = U.height + "px",
        this.settingsMenu.style.display = "none",
        this.debug && console.log("Available core options", r),
        this.config.defaultOptions)
            for (const t in this.config.defaultOptions)
                this.changeSettingOption(t, this.config.defaultOptions[t], !0);
        0 === i && this.on("start", ( () => {
            this.elements.bottomBar.settings[0][0].style.display = "none"
        }
        ))
    }
    createSubPopup(t) {
        const e = this.createElement("div");
        e.classList.add("ejs_popup_container"),
        e.classList.add("ejs_popup_container_box");
        const i = this.createElement("div");
        return i.innerText = "",
        t && e.setAttribute("hidden", ""),
        e.appendChild(i),
        [e, i]
    }
    createNetplayMenu() {
        const t = this.createPopup("Netplay", {
            "Create a Room": () => {
                this.isNetplay ? this.netplay.leaveRoom() : this.netplay.showOpenRoomDialog()
            }
            ,
            Close: () => {
                this.netplayMenu.style.display = "none",
                this.netplay.updateList.stop()
            }
        }, !0);
        this.netplayMenu = t.parentElement;
        const e = this.netplayMenu.getElementsByTagName("a")[0]
          , i = this.createElement("div")
          , n = this.createElement("strong");
        n.innerText = this.localization("Rooms");
        const s = this.createElement("table");
        s.classList.add("ejs_netplay_table"),
        s.style.width = "100%",
        s.setAttribute("cellspacing", "0");
        const o = this.createElement("thead")
          , a = this.createElement("tr")
          , l = t => {
            const e = this.createElement("td");
            return e.innerText = t,
            e.style["text-align"] = "center",
            a.appendChild(e),
            e
        }
        ;
        o.appendChild(a),
        l("Room Name").style["text-align"] = "left",
        l("Players").style.width = "80px",
        l("").style.width = "80px",
        s.appendChild(o);
        const r = this.createElement("tbody");
        s.appendChild(r),
        i.appendChild(n),
        i.appendChild(s);
        const c = this.createElement("div")
          , d = this.createElement("strong");
        d.innerText = "{roomname}";
        const g = this.createElement("div");
        g.innerText = "Password: ";
        const h = this.createElement("table");
        h.classList.add("ejs_netplay_table"),
        h.style.width = "100%",
        h.setAttribute("cellspacing", "0");
        const p = this.createElement("thead")
          , u = this.createElement("tr")
          , m = t => {
            const e = this.createElement("td");
            return e.innerText = t,
            u.appendChild(e),
            e
        }
        ;
        p.appendChild(u),
        m("Player").style.width = "80px",
        m("Name"),
        m("").style.width = "80px",
        h.appendChild(p);
        const I = this.createElement("tbody");
        h.appendChild(I),
        c.appendChild(d),
        c.appendChild(g),
        c.appendChild(h),
        c.style.display = "none",
        t.appendChild(i),
        t.appendChild(c),
        this.openNetplayMenu = () => {
            if (this.netplayMenu.style.display = "",
            !this.netplay || this.netplay && !this.netplay.name) {
                this.netplay = {},
                this.netplay.table = r,
                this.netplay.playerTable = I,
                this.netplay.passwordElem = g,
                this.netplay.roomNameElem = d,
                this.netplay.createButton = e,
                this.netplay.tabs = [i, c],
                this.defineNetplayFunctions();
                const t = this.createSubPopup();
                this.netplayMenu.appendChild(t[0]),
                t[1].classList.add("ejs_cheat_parent");
                const n = t[1]
                  , s = this.createElement("div")
                  , o = this.createElement("h2");
                o.innerText = this.localization("Set Player Name"),
                o.classList.add("ejs_netplay_name_heading"),
                s.appendChild(o),
                n.appendChild(s);
                const a = this.createElement("div");
                a.classList.add("ejs_netplay_header");
                const l = this.createElement("strong");
                l.innerText = this.localization("Player Name");
                const h = this.createElement("input");
                h.type = "text",
                h.setAttribute("maxlength", 20),
                a.appendChild(l),
                a.appendChild(this.createElement("br")),
                a.appendChild(h),
                n.appendChild(a),
                n.appendChild(this.createElement("br"));
                const p = this.createElement("button");
                p.classList.add("ejs_button_button"),
                p.classList.add("ejs_popup_submit"),
                p.style["background-color"] = "rgba(var(--ejs-primary-color),1)",
                p.innerText = this.localization("Submit"),
                n.appendChild(p),
                this.addEventListener(p, "click", (e => {
                    h.value.trim() && (this.netplay.name = h.value.trim(),
                    t[0].remove())
                }
                ))
            }
            this.netplay.updateList.start()
        }
    }
    defineNetplayFunctions() {
        function t() {
            const t = function() {
                return (65536 * (1 + Math.random()) | 0).toString(16).substring(1)
            };
            return t() + t() + "-" + t() + "-" + t() + "-" + t() + "-" + t() + t() + t()
        }
        for (this.netplay.url = this.config.netplayUrl; this.netplay.url.endsWith("/"); )
            this.netplay.url = this.netplay.url.substring(0, this.netplay.url.length - 1);
        this.netplay.current_frame = 0,
        this.netplay.getOpenRooms = async () => JSON.parse(await (await fetch(this.netplay.url + "/list?domain=" + window.location.host + "&game_id=" + this.config.gameId)).text()),
        this.netplay.updateTableList = async () => {
            const t = (t, e, i, n) => {
                const s = this.createElement("tr");
                s.classList.add("ejs_netplay_table_row");
                const o = t => {
                    const e = this.createElement("td");
                    return e.innerText = t,
                    e.style.padding = "10px 0",
                    e.style["text-align"] = "center",
                    s.appendChild(e),
                    e
                }
                ;
                o(e).style["text-align"] = "left",
                o(i + "/" + n).style.width = "80px";
                const a = o("");
                if (a.style.width = "80px",
                this.netplay.table.appendChild(s),
                i < n) {
                    const i = this.createElement("button");
                    return i.classList.add("ejs_netplay_join_button"),
                    i.classList.add("ejs_button_button"),
                    i.style["background-color"] = "rgba(var(--ejs-primary-color),1)",
                    i.innerText = this.localization("Join"),
                    a.appendChild(i),
                    this.addEventListener(i, "click", (i => {
                        this.netplay.joinRoom(t, e)
                    }
                    )),
                    i
                }
            }
              , e = await this.netplay.getOpenRooms();
            this.netplay.table.innerHTML = "";
            for (const i in e)
                t(i, e[i].room_name, e[i].current, e[i].max)
        }
        ,
        this.netplay.showOpenRoomDialog = () => {
            const t = this.createSubPopup();
            this.netplayMenu.appendChild(t[0]),
            t[1].classList.add("ejs_cheat_parent");
            const e = t[1]
              , i = this.createElement("div")
              , n = this.createElement("h2");
            n.innerText = this.localization("Create a room"),
            n.classList.add("ejs_netplay_name_heading"),
            i.appendChild(n),
            e.appendChild(i);
            const s = this.createElement("div");
            s.classList.add("ejs_netplay_header");
            const o = this.createElement("strong");
            o.innerText = this.localization("Room Name");
            const a = this.createElement("input");
            a.type = "text",
            a.setAttribute("maxlength", 20);
            const l = this.createElement("strong");
            l.innerText = this.localization("Max Players");
            const r = this.createElement("select");
            r.setAttribute("disabled", "disabled");
            const c = this.createElement("option");
            c.value = 2,
            c.innerText = "2";
            const d = this.createElement("option");
            d.value = 3,
            d.innerText = "3";
            const g = this.createElement("option");
            g.value = 4,
            g.innerText = "4",
            r.appendChild(c),
            r.appendChild(d),
            r.appendChild(g);
            const h = this.createElement("strong");
            h.innerText = this.localization("Password (optional)");
            const p = this.createElement("input");
            p.type = "text",
            p.setAttribute("maxlength", 20),
            s.appendChild(o),
            s.appendChild(this.createElement("br")),
            s.appendChild(a),
            s.appendChild(l),
            s.appendChild(this.createElement("br")),
            s.appendChild(r),
            s.appendChild(h),
            s.appendChild(this.createElement("br")),
            s.appendChild(p),
            e.appendChild(s),
            e.appendChild(this.createElement("br"));
            const u = this.createElement("button");
            u.classList.add("ejs_button_button"),
            u.classList.add("ejs_popup_submit"),
            u.style["background-color"] = "rgba(var(--ejs-primary-color),1)",
            u.style.margin = "0 10px",
            u.innerText = this.localization("Submit"),
            e.appendChild(u),
            this.addEventListener(u, "click", (e => {
                a.value.trim() && (this.netplay.openRoom(a.value.trim(), parseInt(r.value), p.value.trim()),
                t[0].remove())
            }
            ));
            const m = this.createElement("button");
            m.classList.add("ejs_button_button"),
            m.classList.add("ejs_popup_submit"),
            m.style.margin = "0 10px",
            m.innerText = this.localization("Close"),
            e.appendChild(m),
            this.addEventListener(m, "click", (e => {
                t[0].remove()
            }
            ))
        }
        ,
        this.netplay.startSocketIO = t => {
            this.netplay.socket = io(this.netplay.url),
            this.netplay.socket.on("connect", ( () => t())),
            this.netplay.socket.on("users-updated", (t => {
                this.netplay.reset(),
                this.debug && console.log(t),
                this.netplay.players = t,
                this.netplay.updatePlayersTable(),
                this.netplay.owner && this.netplay.sync()
            }
            )),
            this.netplay.socket.on("disconnect", ( () => this.netplay.roomLeft())),
            this.netplay.socket.on("data-message", (t => {
                this.netplay.dataMessage(t)
            }
            ))
        }
        ,
        this.netplay.openRoom = (e, i, n) => {
            const s = t();
            this.netplay.playerID = t(),
            this.netplay.players = {},
            this.netplay.extra = {
                domain: window.location.host,
                game_id: this.config.gameId,
                room_name: e,
                player_name: this.netplay.name,
                userid: this.netplay.playerID,
                sessionid: s
            },
            this.netplay.players[this.netplay.playerID] = this.netplay.extra,
            this.netplay.users = {},
            this.netplay.startSocketIO((t => {
                this.netplay.socket.emit("open-room", {
                    extra: this.netplay.extra,
                    maxPlayers: i,
                    password: n
                }, (t => {
                    t ? this.debug && console.log("error: ", t) : this.netplay.roomJoined(!0, e, n, s)
                }
                ))
            }
            ))
        }
        ,
        this.netplay.leaveRoom = () => {
            this.debug && console.log("asd"),
            this.netplay.roomLeft()
        }
        ,
        this.netplay.joinRoom = (e, i) => {
            this.netplay.playerID = t(),
            this.netplay.players = {},
            this.netplay.extra = {
                domain: window.location.host,
                game_id: this.config.gameId,
                room_name: i,
                player_name: this.netplay.name,
                userid: this.netplay.playerID,
                sessionid: e
            },
            this.netplay.players[this.netplay.playerID] = this.netplay.extra,
            this.netplay.startSocketIO((t => {
                this.netplay.socket.emit("join-room", {
                    extra: this.netplay.extra
                }, ( (t, n) => {
                    t ? this.debug && console.log("error: ", t) : (this.netplay.players = n,
                    this.netplay.roomJoined(!1, i, "", e))
                }
                ))
            }
            ))
        }
        ,
        this.netplay.roomJoined = (t, e, i, n) => {
            this.isNetplay = !0,
            this.netplay.inputs = {},
            this.netplay.owner = t,
            this.debug && console.log(this.netplay.extra),
            this.netplay.roomNameElem.innerText = e,
            this.netplay.tabs[0].style.display = "none",
            this.netplay.tabs[1].style.display = "",
            i ? (this.netplay.passwordElem.style.display = "",
            this.netplay.passwordElem.innerText = this.localization("Password") + ": " + i) : this.netplay.passwordElem.style.display = "none",
            this.netplay.createButton.innerText = this.localization("Leave Room"),
            this.netplay.updatePlayersTable(),
            this.netplay.owner ? this.netplay.oldStyles = [this.elements.bottomBar.cheat[0].style.display] : (this.netplay.oldStyles = [this.elements.bottomBar.cheat[0].style.display, this.elements.bottomBar.playPause[0].style.display, this.elements.bottomBar.playPause[1].style.display, this.elements.bottomBar.restart[0].style.display, this.elements.bottomBar.loadState[0].style.display, this.elements.bottomBar.saveState[0].style.display, this.elements.bottomBar.saveSavFiles[0].style.display, this.elements.bottomBar.loadSavFiles[0].style.display, this.elements.contextMenu.save.style.display, this.elements.contextMenu.load.style.display],
            this.elements.bottomBar.cheat[0].style.display = "none",
            this.elements.bottomBar.playPause[0].style.display = "none",
            this.elements.bottomBar.playPause[1].style.display = "none",
            this.elements.bottomBar.restart[0].style.display = "none",
            this.elements.bottomBar.loadState[0].style.display = "none",
            this.elements.bottomBar.saveState[0].style.display = "none",
            this.elements.bottomBar.saveSavFiles[0].style.display = "none",
            this.elements.bottomBar.loadSavFiles[0].style.display = "none",
            this.elements.contextMenu.save.style.display = "none",
            this.elements.contextMenu.load.style.display = "none",
            this.gameManager.resetCheat()),
            this.elements.bottomBar.cheat[0].style.display = "none"
        }
        ,
        this.netplay.updatePlayersTable = () => {
            const t = this.netplay.playerTable;
            t.innerHTML = "";
            const e = (e, i) => {
                const n = this.createElement("tr")
                  , s = t => {
                    const e = this.createElement("td");
                    return e.innerText = t,
                    n.appendChild(e),
                    e
                }
                ;
                s(e).style.width = "80px",
                s(i),
                s("").style.width = "80px",
                t.appendChild(n)
            }
            ;
            let i = 1;
            for (const t in this.netplay.players)
                e(i, this.netplay.players[t].player_name),
                i++
        }
        ,
        this.netplay.roomLeft = () => {
            this.isNetplay = !1,
            this.netplay.tabs[0].style.display = "",
            this.netplay.tabs[1].style.display = "none",
            this.netplay.extra = null,
            this.netplay.playerID = null,
            this.netplay.createButton.innerText = this.localization("Create a Room"),
            this.netplay.socket.disconnect(),
            this.elements.bottomBar.cheat[0].style.display = this.netplay.oldStyles[0],
            this.netplay.owner || (this.elements.bottomBar.playPause[0].style.display = this.netplay.oldStyles[1],
            this.elements.bottomBar.playPause[1].style.display = this.netplay.oldStyles[2],
            this.elements.bottomBar.restart[0].style.display = this.netplay.oldStyles[3],
            this.elements.bottomBar.loadState[0].style.display = this.netplay.oldStyles[4],
            this.elements.bottomBar.saveState[0].style.display = this.netplay.oldStyles[5],
            this.elements.bottomBar.saveSavFiles[0].style.display = this.netplay.oldStyles[6],
            this.elements.bottomBar.loadSavFiles[0].style.display = this.netplay.oldStyles[7],
            this.elements.contextMenu.save.style.display = this.netplay.oldStyles[8],
            this.elements.contextMenu.load.style.display = this.netplay.oldStyles[9]),
            this.updateCheatUI()
        }
        ,
        this.netplay.setLoading = t => {
            this.debug && console.log("loading:", t)
        }
        ;
        let e = !1;
        this.netplay.sync = async () => {
            if (e)
                return;
            e = !0,
            this.debug && console.log("sync"),
            this.netplay.ready = 0;
            const t = this.gameManager.getState();
            this.netplay.sendMessage({
                state: t
            }),
            this.netplay.setLoading(!0),
            this.pause(!0),
            this.netplay.ready++,
            this.netplay.current_frame = 0,
            this.netplay.ready === this.netplay.getUserCount() && this.play(!0),
            e = !1
        }
        ,
        this.netplay.getUserIndex = t => {
            let e = 0;
            for (const i in this.netplay.players) {
                if (i === t)
                    return e;
                e++
            }
            return -1
        }
        ,
        this.netplay.getUserCount = () => {
            let t = 0;
            for (const e in this.netplay.players)
                t++;
            return t
        }
        ;
        this.netplay.dataMessage = t => {
            !0 === t.sync && this.netplay.owner && this.netplay.sync(),
            t.state && (this.netplay.wait = !0,
            this.netplay.setLoading(!0),
            this.pause(!0),
            this.gameManager.loadState(new Uint8Array(t.state)),
            this.netplay.sendMessage({
                ready: !0
            })),
            t.play && !this.owner && this.play(!0),
            t.pause && !this.owner && this.pause(!0),
            t.ready && this.netplay.owner && (this.netplay.ready++,
            this.netplay.ready === this.netplay.getUserCount() && (this.netplay.sendMessage({
                readyready: !0
            }),
            this.netplay.reset(),
            setTimeout(( () => this.play(!0)), 48),
            this.netplay.setLoading(!1))),
            t.readyready && (this.netplay.setLoading(!1),
            this.netplay.reset(),
            this.play(!0)),
            t.shortPause && console.log(t.shortPause),
            t.shortPause && t.shortPause !== this.netplay.playerID && (this.pause(!0),
            this.netplay.wait = !0,
            setTimeout(( () => this.play(!0)), 48)),
            t["sync-control"] && t["sync-control"].forEach((t => {
                let e = parseInt(t.frame)
                  , i = this.netplay.currentFrame;
                !t.connected_input || t.connected_input[0] < 0 || (console.log(t, e, i),
                e === i && (e++,
                this.gameManager.functions.simulateInput(t.connected_input[0], t.connected_input[1], t.connected_input[2])),
                this.netplay.inputsData[e] || (this.netplay.inputsData[e] = []),
                this.netplay.inputsData[i] || (this.netplay.inputsData[i] = []),
                this.netplay.owner ? (this.netplay.inputsData[i].push(t),
                this.gameManager.functions.simulateInput(t.connected_input[0], t.connected_input[1], t.connected_input[2]),
                i - 10 >= e && (this.netplay.wait = !0,
                this.pause(!0),
                setTimeout(( () => {
                    this.play(!0),
                    this.netplay.wait = !1
                }
                ), 48))) : (this.netplay.inputsData[e].push(t),
                this.netplay.inputsData[i] && this.play(!0),
                i + 10 <= e && e > this.netplay.init_frame + 100 && this.netplay.sendMessage({
                    shortPause: this.netplay.playerID
                })))
            }
            )),
            t.restart && (this.gameManager.restart(),
            this.netplay.reset(),
            this.play(!0))
        }
        ,
        this.netplay.simulateInput = (t, e, i, n) => {
            if (!this.isNetplay)
                return;
            if (0 !== t && !n)
                return;
            t = this.netplay.getUserIndex(this.netplay.playerID);
            let s = this.netplay.currentFrame;
            this.netplay.owner ? (this.netplay.inputsData[s] || (this.netplay.inputsData[s] = []),
            this.netplay.inputsData[s].push({
                frame: s,
                connected_input: [t, e, i]
            }),
            this.gameManager.functions.simulateInput(t, e, i)) : this.netplay.sendMessage({
                "sync-control": [{
                    frame: s + 10,
                    connected_input: [t, e, i]
                }]
            })
        }
        ,
        this.netplay.sendMessage = t => {
            this.netplay.socket.emit("data-message", t)
        }
        ,
        this.netplay.reset = () => {
            this.netplay.init_frame = this.netplay.currentFrame,
            this.netplay.inputsData = {}
        }
        ,
        this.netplay.init_frame = 0,
        this.netplay.currentFrame = 0,
        this.netplay.inputsData = {},
        this.Module.postMainLoop = () => {
            if (this.netplay.currentFrame = parseInt(this.gameManager.getFrameNum()) - this.netplay.init_frame,
            this.isNetplay) {
                if (this.netplay.owner) {
                    let t = []
                      , e = this.netplay.currentFrame - 1;
                    this.netplay.inputsData[e] ? this.netplay.inputsData[e].forEach((e => {
                        e.frame += 10,
                        t.push(e)
                    }
                    )) : t.push({
                        frame: e + 10
                    }),
                    this.netplay.sendMessage({
                        "sync-control": t
                    })
                } else
                    this.netplay.currentFrame <= 0 || this.netplay.inputsData[this.netplay.currentFrame] ? (this.netplay.wait = !1,
                    this.play(),
                    this.netplay.inputsData[this.netplay.currentFrame].forEach((t => {
                        t.connected_input && (console.log(t.connected_input),
                        this.gameManager.functions.simulateInput(t.connected_input[0], t.connected_input[1], t.connected_input[2]))
                    }
                    ))) : this.netplay.syncing || (console.log("sync"),
                    this.pause(!0),
                    this.netplay.sendMessage({
                        sync: !0
                    }),
                    this.netplay.syncing = !0);
                this.netplay.currentFrame % 100 == 0 && Object.keys(this.netplay.inputsData).forEach((t => {
                    t < this.netplay.currentFrame - 50 && (this.netplay.inputsData[t] = null,
                    delete this.netplay.inputsData[t])
                }
                ))
            }
        }
        ,
        this.netplay.updateList = {
            start: () => {
                this.netplay.updateList.interval = setInterval(this.netplay.updateTableList.bind(this), 1e3)
            }
            ,
            stop: () => {
                clearInterval(this.netplay.updateList.interval)
            }
        }
    }
    createCheatsMenu() {
        const t = this.createPopup("Cheats", {
            "Add Cheat": () => {
                const t = this.createSubPopup();
                this.cheatMenu.appendChild(t[0]),
                t[1].classList.add("ejs_cheat_parent"),
                t[1].style.width = "100%";
                const e = t[1]
                  , i = this.createElement("div");
                i.classList.add("ejs_cheat_header");
                const n = this.createElement("h2");
                n.innerText = this.localization("Add Cheat Code"),
                n.classList.add("ejs_cheat_heading");
                const s = this.createElement("button");
                s.classList.add("ejs_cheat_close"),
                i.appendChild(n),
                i.appendChild(s),
                e.appendChild(i),
                this.addEventListener(s, "click", (e => {
                    t[0].remove()
                }
                ));
                const o = this.createElement("div");
                o.classList.add("ejs_cheat_main");
                const a = this.createElement("strong");
                a.innerText = this.localization("Code"),
                o.appendChild(a),
                o.appendChild(this.createElement("br"));
                const l = this.createElement("textarea");
                l.classList.add("ejs_cheat_code"),
                l.style.width = "100%",
                l.style.height = "80px",
                o.appendChild(l),
                o.appendChild(this.createElement("br"));
                const r = this.createElement("strong");
                r.innerText = this.localization("Description"),
                o.appendChild(r),
                o.appendChild(this.createElement("br"));
                const c = this.createElement("input");
                c.type = "text",
                c.classList.add("ejs_cheat_code"),
                o.appendChild(c),
                o.appendChild(this.createElement("br")),
                e.appendChild(o);
                const d = this.createElement("footer")
                  , g = this.createElement("button")
                  , h = this.createElement("button");
                g.innerText = this.localization("Submit"),
                h.innerText = this.localization("Close"),
                g.classList.add("ejs_button_button"),
                h.classList.add("ejs_button_button"),
                g.classList.add("ejs_popup_submit"),
                h.classList.add("ejs_popup_submit"),
                g.style["background-color"] = "rgba(var(--ejs-primary-color),1)",
                d.appendChild(g);
                const p = this.createElement("span");
                p.innerText = " ",
                d.appendChild(p),
                d.appendChild(h),
                e.appendChild(d),
                this.addEventListener(g, "click", (e => {
                    l.value.trim() && c.value.trim() && (t[0].remove(),
                    this.cheats.push({
                        code: l.value,
                        desc: c.value,
                        checked: !1
                    }),
                    this.updateCheatUI(),
                    this.saveSettings())
                }
                )),
                this.addEventListener(h, "click", (e => {
                    t[0].remove()
                }
                ))
            }
            ,
            Close: () => {
                this.cheatMenu.style.display = "none"
            }
        }, !0);
        this.cheatMenu = t.parentElement,
        this.cheatMenu.getElementsByTagName("h4")[0].style["padding-bottom"] = "0px";
        const e = this.createElement("div");
        e.style["padding-top"] = "0px",
        e.style["padding-bottom"] = "15px",
        e.innerText = this.localization("Note that some cheats require a restart to disable"),
        t.appendChild(e);
        const i = this.createElement("div");
        t.appendChild(i),
        i.classList.add("ejs_cheat_rows"),
        this.elements.cheatRows = i
    }
    updateCheatUI() {
        if (!this.gameManager)
            return;
        this.elements.cheatRows.innerHTML = "";
        const t = (t, e, i, n, s) => {
            const o = this.createElement("div");
            o.classList.add("ejs_cheat_row");
            const a = this.createElement("input");
            a.type = "checkbox",
            a.checked = e,
            a.value = s,
            a.id = "ejs_cheat_switch_" + s,
            o.appendChild(a);
            const l = this.createElement("label");
            if (l.for = "ejs_cheat_switch_" + s,
            l.innerText = t,
            o.appendChild(l),
            l.addEventListener("click", (t => {
                a.checked = !a.checked,
                this.cheats[s].checked = a.checked,
                this.cheatChanged(a.checked, i, s),
                this.saveSettings()
            }
            )),
            !n) {
                const t = this.createElement("a");
                t.classList.add("ejs_cheat_row_button"),
                t.innerText = "×",
                o.appendChild(t),
                t.addEventListener("click", (t => {
                    this.cheatChanged(!1, i, s),
                    this.cheats.splice(s, 1),
                    this.updateCheatUI(),
                    this.saveSettings()
                }
                ))
            }
            this.elements.cheatRows.appendChild(o),
            this.cheatChanged(e, i, s)
        }
        ;
        this.gameManager.resetCheat();
        for (let e = 0; e < this.cheats.length; e++)
            t(this.cheats[e].desc, this.cheats[e].checked, this.cheats[e].code, this.cheats[e].is_permanent, e)
    }
    cheatChanged(t, e, i) {
        this.gameManager && this.gameManager.setCheat(i, t, e)
    }
    enableShader(t) {
        if (!this.gameManager)
            return;
        try {
            this.Module.FS.unlink("/shader/shader.glslp")
        } catch (t) {}
        if ("disabled" === t || !this.config.shaders[t])
            return void this.gameManager.toggleShader(0);
        const e = this.config.shaders[t];
        if ("string" == typeof e)
            this.Module.FS.writeFile("/shader/shader.glslp", e, {}, "w+");
        else {
            const t = e.shader;
            this.Module.FS.writeFile("/shader/shader.glslp", "base64" === t.type ? atob(t.value) : t.value, {}, "w+"),
            e.resources && e.resources.length && e.resources.forEach((t => {
                this.Module.FS.writeFile(`/shader/${t.name}`, "base64" === t.type ? atob(t.value) : t.value, {}, "w+")
            }
            ))
        }
        this.gameManager.toggleShader(1)
    }
    screenshot(t, e, i, n) {
        const s = i || this.getSettingValue("screenshotFormat") || this.capture.photo.format
          , o = n || parseInt(this.getSettingValue("screenshotUpscale") || this.capture.photo.upscale)
          , a = e || this.getSettingValue("screenshotSource") || this.capture.photo.source
          , l = parseInt(this.getSettingValue("videoRotation") || 0)
          , r = this.gameManager.getVideoDimensions("aspect") || 1.333333
          , c = (this.gameManager.getVideoDimensions("width"),
        this.gameManager.getVideoDimensions("height") || 224)
          , d = 1 === l || 3 === l;
        let g = this.canvas.width
          , h = this.canvas.height
          , p = o
          , u = o
          , m = 1;
        if ("retroarch" === a)
            g >= h ? g = h * r : g < h && (h = g / r),
            this.gameManager.screenshot().then((e => {
                const i = new Blob([e],{
                    type: "image/png"
                });
                if (0 === o)
                    t(i, "png");
                else if (o > 1) {
                    m = o;
                    const e = new Image
                      , n = URL.createObjectURL(i);
                    e.src = n,
                    e.onload = () => {
                        const i = document.createElement("canvas");
                        i.width = g * m,
                        i.height = h * m;
                        const o = i.getContext("2d", {
                            alpha: !1
                        });
                        o.imageSmoothingEnabled = !1,
                        o.scale(u, p),
                        o.drawImage(e, 0, 0, g, h),
                        i.toBlob((o => {
                            t(o, s),
                            e.remove(),
                            URL.revokeObjectURL(n),
                            i.remove()
                        }
                        ), "image/" + s, 1)
                    }
                }
            }
            ));
        else if ("canvas" === a) {
            g >= h && !d ? g = h * r : g < h && !d ? h = g / r : g >= h && d ? g = h * (1 / r) : g < h && d && (g = h / (1 / r)),
            0 === o ? (m = c / h,
            p = m,
            u = m) : o > 1 && (m = o);
            const e = document.createElement("canvas");
            e.width = g * m,
            e.height = h * m,
            e.style.display = "none";
            const i = e.getContext("2d", {
                alpha: !1
            });
            i.imageSmoothingEnabled = !1,
            i.scale(m, m);
            const n = this.canvas.width / this.canvas.height
              , a = g / h;
            let l = 0
              , I = 0;
            n > a ? l = (this.canvas.width - g) / -2 : n < a && (I = (this.canvas.height - h) / -2);
            requestAnimationFrame(( () => {
                i.drawImage(this.canvas, l, I, this.canvas.width, this.canvas.height),
                e.toBlob((i => {
                    t(i, s),
                    e.remove()
                }
                ), "image/" + s, 1)
            }
            ))
        }
    }
    async takeScreenshot(t, e, i) {
        return new Promise((n => {
            this.screenshot(( (t, e) => {
                n({
                    blob: t,
                    format: e
                })
            }
            ), t, e, i)
        }
        ))
    }
    collectScreenRecordingMediaTracks(t, e) {
        let i = null;
        const n = t.captureStream(e).getVideoTracks();
        if (0 === n.length)
            return console.error("Unable to capture video stream"),
            null;
        i = n[0];
        let s = null;
        if (this.Module.AL && this.Module.AL.currentCtx && this.Module.AL.currentCtx.audioCtx) {
            const t = this.Module.AL.currentCtx
              , e = t.audioCtx
              , i = [];
            for (let e in t.sources)
                i.push(t.sources[e].gain);
            const n = e.createChannelMerger(i.length);
            i.forEach((t => t.connect(n)));
            const o = e.createMediaStreamDestination();
            n.connect(o);
            const a = o.stream.getAudioTracks();
            0 !== a.length && (s = a[0])
        }
        const o = new MediaStream;
        return i && "live" === i.readyState && o.addTrack(i),
        s && "live" === s.readyState && o.addTrack(s),
        o
    }
    screenRecord() {
        const t = this.getSettingValue("screenRecordingFPS") || this.capture.video.fps
          , e = this.getSettingValue("screenRecordFormat") || this.capture.video.format
          , i = this.getSettingValue("screenRecordUpscale") || this.capture.video.upscale
          , n = this.getSettingValue("screenRecordVideoBitrate") || this.capture.video.videoBitrate
          , s = this.getSettingValue("screenRecordAudioBitrate") || this.capture.video.audioBitrate
          , o = this.gameManager.getVideoDimensions("aspect") || 1.333333
          , a = parseInt(this.getSettingValue("videoRotation") || 0)
          , l = 1 === a || 3 === a;
        let r = 800
          , c = 600
          , d = this.canvas.width / this.canvas.height
          , g = r / c
          , h = 0
          , p = 0;
        const u = document.createElement("canvas")
          , m = u.getContext("2d", {
            alpha: !1
        });
        m.fillStyle = "#000",
        m.imageSmoothingEnabled = !1;
        const I = () => {
            r = this.canvas.width,
            c = this.canvas.height,
            d = r / c,
            r >= c && !l ? r = c * o : r < c && !l ? c = r / o : r >= c && l ? r = c * (1 / o) : r < c && l && (r = c / (1 / o)),
            g = r / c,
            u.width = r * i,
            u.height = c * i,
            m.scale(i, i),
            d > g ? h = (this.canvas.width - r) / -2 : d < g && (p = (this.canvas.height - c) / -2)
        }
        ;
        I(),
        this.addEventListener(this.canvas, "resize", ( () => {
            I()
        }
        ));
        let C = !0;
        const b = () => {
            m.drawImage(this.canvas, h, p, this.canvas.width, this.canvas.height),
            C && requestAnimationFrame(b)
        }
        ;
        requestAnimationFrame(b);
        const y = []
          , Z = this.collectScreenRecordingMediaTracks(u, t)
          , V = new MediaRecorder(Z,{
            videoBitsPerSecond: n,
            audioBitsPerSecond: s,
            mimeType: "video/" + e
        });
        return V.addEventListener("dataavailable", (t => {
            y.push(t.data)
        }
        )),
        V.addEventListener("stop", ( () => {
            const t = new Blob(y)
              , i = URL.createObjectURL(t)
              , n = new Date
              , s = document.createElement("a");
            s.href = i,
            s.download = this.getBaseFileName() + "-" + n.getMonth() + "-" + n.getDate() + "-" + n.getFullYear() + "." + e,
            s.click(),
            C = !1,
            u.remove()
        }
        )),
        V.start(),
        V
    }
}
window.EmulatorJS = EmulatorJS;
class EJS_COMPRESSION {
    constructor(t) {
        this.EJS = t
    }
    isCompressed(t) {
        return 80 === t[0] && 75 === t[1] && (3 === t[2] && 4 === t[3] || 5 === t[2] && 6 === t[3] || 7 === t[2] && 8 === t[3]) ? "zip" : 55 === t[0] && 122 === t[1] && 188 === t[2] && 175 === t[3] && 39 === t[4] && 28 === t[5] ? "7z" : 82 === t[0] && 97 === t[1] && 114 === t[2] && 33 === t[3] && 26 === t[4] && 7 === t[5] && (0 === t[6] || 1 === t[6] && 0 == t[7]) ? "rar" : null
    }
    decompress(t, e, i) {
        const n = this.isCompressed(t.slice(0, 10));
        return null === n ? ("function" == typeof i && i("!!notCompressedData", t),
        new Promise((e => e({
            "!!notCompressedData": t
        })))) : this.decompressFile(n, t, e, i)
    }
    getWorkerFile(t) {
        return new Promise((async (e, i) => {
            let n, s;
            "7z" === t ? (n = "compression/extract7z.js",
            s = "sevenZip") : "zip" === t ? (n = "compression/extractzip.js",
            s = "zip") : "rar" === t && (n = "compression/libunrar.js",
            s = "rar");
            const o = await this.EJS.downloadFile(n, null, !1, {
                responseType: "text",
                method: "GET"
            });
            if (-1 !== o)
                if ("rar" === t) {
                    const t = await this.EJS.downloadFile("compression/libunrar.wasm", null, !1, {
                        responseType: "arraybuffer",
                        method: "GET"
                    });
                    if (-1 === t)
                        return void this.EJS.startGameError(this.EJS.localization("Network Error"));
                    let i = '\n                    let dataToPass = [];\n                    Module = {\n                        monitorRunDependencies: function(left) {\n                            if (left == 0) {\n                                setTimeout(function() {\n                                    unrar(dataToPass, null);\n                                }, 100);\n                            }\n                        },\n                        onRuntimeInitialized: function() {},\n                        locateFile: function(file) {\n                            console.log("locateFile");\n                            return "' + URL.createObjectURL(new Blob([t.data],{
                        type: "application/wasm"
                    })) + '";\n                        }\n                    };\n                    ' + o.data + '\n                    let unrar = function(data, password) {\n                        let cb = function(fileName, fileSize, progress) {\n                            postMessage({ "t": 4, "current": progress, "total": fileSize, "name": fileName });\n                        };\n                        let rarContent = readRARContent(data.map(function(d) {\n                            return {\n                                name: d.name,\n                                content: new Uint8Array(d.content)\n                            }\n                        }), password, cb)\n                        let rec = function(entry) {\n                            if (!entry) return;\n                            if (entry.type === "file") {\n                                postMessage({ "t": 2, "file": entry.fullFileName, "size": entry.fileSize, "data": entry.fileContent });\n                            } else if (entry.type === "dir") {\n                                Object.keys(entry.ls).forEach(function(k) {\n                                    rec(entry.ls[k]);\n                                });\n                            } else {\n                                throw "Unknown type";\n                            }\n                        }\n                        rec(rarContent);\n                        postMessage({ "t": 1 });\n                        return rarContent;\n                    };\n                    onmessage = function(data) {\n                        dataToPass.push({ name: "test.rar", content: data.data });\n                    };\n                ';
                    e(new Blob([i],{
                        type: "application/javascript"
                    }))
                } else {
                    e(new Blob([o.data],{
                        type: "application/javascript"
                    }))
                }
            else
                this.EJS.startGameError(this.EJS.localization("Network Error"))
        }
        ))
    }
    decompressFile(t, e, i, n) {
        return new Promise((async s => {
            const o = await this.getWorkerFile(t)
              , a = new Worker(URL.createObjectURL(o))
              , l = {};
            a.onmessage = t => {
                if (t.data) {
                    if (4 === t.data.t) {
                        const e = t.data
                          , n = Math.floor(e.current / e.total * 100);
                        if (isNaN(n))
                            return;
                        const s = " " + n.toString() + "%";
                        i(s, !0)
                    }
                    2 === t.data.t && ("function" == typeof n ? (n(t.data.file, t.data.data),
                    l[t.data.file] = !0) : l[t.data.file] = t.data.data),
                    1 === t.data.t && s(l)
                }
            }
            ,
            a.postMessage(e)
        }
        ))
    }
}
window.EJS_COMPRESSION = EJS_COMPRESSION;
class EJS_GameManager {
    constructor(t, e) {
        this.EJS = e,
        this.Module = t,
        this.FS = this.Module.FS,
        this.functions = {
            restart: this.Module.cwrap("system_restart", "", []),
            saveStateInfo: this.Module.cwrap("save_state_info", "string", []),
            loadState: this.Module.cwrap("load_state", "number", ["string", "number"]),
            screenshot: this.Module.cwrap("cmd_take_screenshot", "", []),
            simulateInput: this.Module.cwrap("simulate_input", "null", ["number", "number", "number"]),
            toggleMainLoop: this.Module.cwrap("toggleMainLoop", "null", ["number"]),
            getCoreOptions: this.Module.cwrap("get_core_options", "string", []),
            setVariable: this.Module.cwrap("ejs_set_variable", "null", ["string", "string"]),
            setCheat: this.Module.cwrap("set_cheat", "null", ["number", "number", "string"]),
            resetCheat: this.Module.cwrap("reset_cheat", "null", []),
            toggleShader: this.Module.cwrap("shader_enable", "null", ["number"]),
            getDiskCount: this.Module.cwrap("get_disk_count", "number", []),
            getCurrentDisk: this.Module.cwrap("get_current_disk", "number", []),
            setCurrentDisk: this.Module.cwrap("set_current_disk", "null", ["number"]),
            getSaveFilePath: this.Module.cwrap("save_file_path", "string", []),
            saveSaveFiles: this.Module.cwrap("cmd_savefiles", "", []),
            supportsStates: this.Module.cwrap("supports_states", "number", []),
            loadSaveFiles: this.Module.cwrap("refresh_save_files", "null", []),
            toggleFastForward: this.Module.cwrap("toggle_fastforward", "null", ["number"]),
            setFastForwardRatio: this.Module.cwrap("set_ff_ratio", "null", ["number"]),
            toggleRewind: this.Module.cwrap("toggle_rewind", "null", ["number"]),
            setRewindGranularity: this.Module.cwrap("set_rewind_granularity", "null", ["number"]),
            toggleSlowMotion: this.Module.cwrap("toggle_slow_motion", "null", ["number"]),
            setSlowMotionRatio: this.Module.cwrap("set_sm_ratio", "null", ["number"]),
            getFrameNum: this.Module.cwrap("get_current_frame_count", "number", [""]),
            setVSync: this.Module.cwrap("set_vsync", "null", ["number"]),
            setVideoRoation: this.Module.cwrap("set_video_rotation", "null", ["number"]),
            getVideoDimensions: this.Module.cwrap("get_video_dimensions", "number", ["string"]),
            setKeyboardEnabled: this.Module.cwrap("ejs_set_keyboard_enabled", "null", ["number"])
        },
        this.writeFile("/home/web_user/.config/retroarch/retroarch.cfg", this.getRetroArchCfg()),
        this.writeConfigFile(),
        this.initShaders(),
        this.setupPreLoadSettings(),
        this.EJS.on("exit", ( () => {
            this.EJS.failedToStart || (this.saveSaveFiles(),
            this.functions.restart(),
            this.saveSaveFiles()),
            this.toggleMainLoop(0),
            this.FS.unmount("/data/saves"),
            setTimeout(( () => {
                try {
                    this.Module.abort()
                } catch (t) {
                    console.warn(t)
                }
            }
            ), 1e3)
        }
        ))
    }
    setupPreLoadSettings() {
        this.Module.callbacks.setupCoreSettingFile = t => {
            this.EJS.debug && console.log("Setting up core settings with path:", t),
            this.writeFile(t, this.EJS.getCoreSettings())
        }
    }
    mountFileSystems() {
        return new Promise((async t => {
            this.mkdir("/data"),
            this.mkdir("/data/saves"),
            this.FS.mount(this.FS.filesystems.IDBFS, {
                autoPersist: !0
            }, "/data/saves"),
            this.FS.syncfs(!0, t)
        }
        ))
    }
    writeConfigFile() {
        if (!this.EJS.defaultCoreOpts.file || !this.EJS.defaultCoreOpts.settings)
            return;
        let t = "";
        for (const e in this.EJS.defaultCoreOpts.settings)
            t += e + ' = "' + this.EJS.defaultCoreOpts.settings[e] + '"\n';
        this.writeFile("/home/web_user/retroarch/userdata/config/" + this.EJS.defaultCoreOpts.file, t)
    }
    loadExternalFiles() {
        return new Promise((async (t, e) => {
            if (this.EJS.config.externalFiles && "Object" === this.EJS.config.externalFiles.constructor.name)
                for (const t in this.EJS.config.externalFiles)
                    await new Promise((e => {
                        this.EJS.downloadFile(this.EJS.config.externalFiles[t], null, !0, {
                            responseType: "arraybuffer",
                            method: "GET"
                        }).then((async i => {
                            if (-1 === i)
                                return this.EJS.debug && console.warn("Failed to fetch file from '" + this.EJS.config.externalFiles[t] + "'. Make sure the file exists."),
                                e();
                            let n = t;
                            if (t.trim().endsWith("/")) {
                                const s = /[#<$+%>!`&*'|{}/\\?"=@:^\r\n]/gi;
                                let o = this.EJS.config.externalFiles[t].split("/").pop().split("#")[0].split("?")[0].replace(s, "").trim();
                                if (!o)
                                    return e();
                                const a = await this.EJS.checkCompression(new Uint8Array(i.data), this.EJS.localization("Decompress Game Assets"));
                                if (!a["!!notCompressedData"]) {
                                    for (const t in a)
                                        this.writeFile(n + t, a[t]);
                                    return e()
                                }
                                n += o
                            }
                            try {
                                this.writeFile(n, i.data)
                            } catch (t) {
                                this.EJS.debug && console.warn("Failed to write file to '" + n + "'. Make sure there are no conflicting files.")
                            }
                            e()
                        }
                        ))
                    }
                    ));
            t()
        }
        ))
    }
    writeFile(t, e) {
        const i = t.split("/");
        let n = "/";
        for (let t = 0; t < i.length - 1; t++)
            i[t].trim() && (n += i[t] + "/",
            this.mkdir(n));
        this.FS.writeFile(t, e)
    }
    mkdir(t) {
        try {
            this.FS.mkdir(t)
        } catch (t) {}
    }
    getRetroArchCfg() {
        let t = 'autosave_interval = 60\nscreenshot_directory = "/"\nblock_sram_overwrite = false\nvideo_gpu_screenshot = false\naudio_latency = 64\nvideo_top_portrait_viewport = true\nvideo_vsync = true\nvideo_smooth = false\nfastforward_ratio = 3.0\nslowmotion_ratio = 3.0\n' + (this.EJS.rewindEnabled ? "rewind_enable = true\n" : "") + (this.EJS.rewindEnabled ? "rewind_granularity = 6\n" : "") + 'savefile_directory = "/data/saves"\n';
        return this.EJS.retroarchOpts && Array.isArray(this.EJS.retroarchOpts) && this.EJS.retroarchOpts.forEach((e => {
            let i = this.EJS.preGetSetting(e.name);
            console.log(i),
            i || (i = e.default);
            const n = !1 === e.isString ? i : '"' + i + '"';
            t += e.name + " = " + n + "\n"
        }
        )),
        t
    }
    initShaders() {
        if (this.EJS.config.shaders) {
            this.mkdir("/shader");
            for (const t in this.EJS.config.shaders) {
                const e = this.EJS.config.shaders[t];
                "string" == typeof e && this.FS.writeFile(`/shader/${t}`, e)
            }
        }
    }
    clearEJSResetTimer() {
        this.EJS.resetTimeout && (clearTimeout(this.EJS.resetTimeout),
        delete this.EJS.resetTimeout)
    }
    restart() {
        this.clearEJSResetTimer(),
        this.functions.restart()
    }
    getState() {
        const t = this.functions.saveStateInfo().split("|");
        if ("1" !== t[2])
            throw console.error(t[0]),
            new Error(t[0]);
        const e = parseInt(t[0])
          , i = parseInt(t[1])
          , n = this.Module.HEAPU8.subarray(i, i + e);
        return new Uint8Array(n)
    }
    loadState(t) {
        try {
            this.FS.unlink("game.state")
        } catch (t) {}
        this.FS.writeFile("/game.state", t),
        this.clearEJSResetTimer(),
        this.functions.loadState("game.state", 0),
        setTimeout(( () => {
            try {
                this.FS.unlink("game.state")
            } catch (t) {}
        }
        ), 5e3)
    }
    screenshot() {
        try {
            this.FS.unlink("screenshot.png")
        } catch (t) {}
        return this.functions.screenshot(),
        new Promise((async t => {
            for (; ; ) {
                try {
                    return this.FS.stat("/screenshot.png"),
                    t(this.FS.readFile("/screenshot.png"))
                } catch (t) {}
                await new Promise((t => setTimeout(t, 50)))
            }
        }
        ))
    }
    quickSave(t) {
        t || (t = 1);
        let e = t + "-quick.state";
        try {
            this.FS.unlink(e)
        } catch (t) {}
        try {
            let t = this.getState();
            this.FS.writeFile("/" + e, t)
        } catch (t) {
            return !1
        }
        return !0
    }
    quickLoad(t) {
        t || (t = 1),
        (async () => {
            let e = t + "-quick.state";
            this.clearEJSResetTimer(),
            this.functions.loadState(e, 0)
        }
        )()
    }
    simulateInput(t, e, i) {
        if (this.EJS.isNetplay)
            this.EJS.netplay.simulateInput(t, e, i);
        else {
            if ([24, 25, 26, 27, 28, 29].includes(e)) {
                if (24 === e && 1 === i) {
                    const t = this.EJS.settings["save-state-slot"] ? this.EJS.settings["save-state-slot"] : "1";
                    this.quickSave(t) ? this.EJS.displayMessage(this.EJS.localization("SAVED STATE TO SLOT") + " " + t) : this.EJS.displayMessage(this.EJS.localization("FAILED TO SAVE STATE"))
                }
                if (25 === e && 1 === i) {
                    const t = this.EJS.settings["save-state-slot"] ? this.EJS.settings["save-state-slot"] : "1";
                    this.quickLoad(t),
                    this.EJS.displayMessage(this.EJS.localization("LOADED STATE FROM SLOT") + " " + t)
                }
                if (26 === e && 1 === i) {
                    let t;
                    try {
                        t = parseFloat(this.EJS.settings["save-state-slot"] ? this.EJS.settings["save-state-slot"] : "1") + 1
                    } catch (e) {
                        t = 1
                    }
                    t > 9 && (t = 1),
                    this.EJS.displayMessage(this.EJS.localization("SET SAVE STATE SLOT TO") + " " + t),
                    this.EJS.changeSettingOption("save-state-slot", t.toString())
                }
                return 27 === e && this.functions.toggleFastForward(this.EJS.isFastForward ? !i : i),
                29 === e && this.functions.toggleSlowMotion(this.EJS.isSlowMotion ? !i : i),
                void (28 === e && this.EJS.rewindEnabled && this.functions.toggleRewind(i))
            }
            this.functions.simulateInput(t, e, i)
        }
    }
    getFileNames() {
        return "picodrive" === this.EJS.getCore() ? ["bin", "gen", "smd", "md", "32x", "cue", "iso", "sms", "68k", "chd"] : ["toc", "ccd", "exe", "pbp", "chd", "img", "bin", "iso"]
    }
    createCueFile(t) {
        try {
            t.length > 1 && (t = (t = t.filter((t => this.getFileNames().includes(t.split(".").pop().toLowerCase())))).sort(( (t, e) => {
                if (isNaN(t.charAt()) || isNaN(e.charAt()))
                    throw new Error("Incorrect file name format");
                return parseInt(t.charAt()) > parseInt(e.charAt()) ? 1 : -1
            }
            )))
        } catch (e) {
            if (t.length > 1)
                return console.warn("Could not auto-create cue file(s)."),
                null
        }
        for (let e = 0; e < t.length; e++)
            if ("ccd" === t[e].split(".").pop().toLowerCase())
                return console.warn("Did not auto-create cue file(s). Found a ccd."),
                null;
        if (0 === t.length)
            return console.warn("Could not auto-create cue file(s)."),
            null;
        let e = t[0].split("/").pop();
        e.includes(".") && (e = e.substring(0, e.length - e.split(".").pop().length - 1));
        for (let i = 0; i < t.length; i++) {
            const n = ' FILE "' + t[i] + '" BINARY\n  TRACK 01 MODE1/2352\n   INDEX 01 00:00:00';
            this.FS.writeFile("/" + e + "-" + i + ".cue", n)
        }
        if (t.length > 1) {
            let i = "";
            for (let n = 0; n < t.length; n++)
                i += "/" + e + "-" + n + ".cue\n";
            this.FS.writeFile("/" + e + ".m3u", i)
        }
        return 1 === t.length ? e + "-0.cue" : e + ".m3u"
    }
    loadPpssppAssets() {
        return new Promise((t => {
            this.EJS.downloadFile("cores/ppsspp-assets.zip", null, !1, {
                responseType: "arraybuffer",
                method: "GET"
            }).then((e => {
                this.EJS.checkCompression(new Uint8Array(e.data), this.EJS.localization("Decompress Game Data")).then((e => {
                    if (-1 === e)
                        return this.EJS.textElem.innerText = this.localization("Network Error"),
                        void (this.EJS.textElem.style.color = "red");
                    this.mkdir("/PPSSPP");
                    for (const t in e) {
                        const i = e[t]
                          , n = "/PPSSPP/" + t
                          , s = n.split("/");
                        let o = "";
                        for (let t = 0; t < s.length - 1; t++)
                            "" !== s[t] && (o += "/" + s[t],
                            this.FS.analyzePath(o).exists || this.FS.mkdir(o));
                        n.endsWith("/") || this.FS.writeFile(n, i)
                    }
                    t()
                }
                ))
            }
            ))
        }
        ))
    }
    setVSync(t) {
        this.functions.setVSync(t)
    }
    toggleMainLoop(t) {
        this.functions.toggleMainLoop(t)
    }
    getCoreOptions() {
        return this.functions.getCoreOptions()
    }
    setVariable(t, e) {
        this.functions.setVariable(t, e)
    }
    setCheat(t, e, i) {
        this.functions.setCheat(t, e, i)
    }
    resetCheat() {
        this.functions.resetCheat()
    }
    toggleShader(t) {
        this.functions.toggleShader(t)
    }
    getDiskCount() {
        return this.functions.getDiskCount()
    }
    getCurrentDisk() {
        return this.functions.getCurrentDisk()
    }
    setCurrentDisk(t) {
        this.functions.setCurrentDisk(t)
    }
    getSaveFilePath() {
        return this.functions.getSaveFilePath()
    }
    saveSaveFiles() {
        this.functions.saveSaveFiles(),
        this.EJS.callEvent("saveSaveFiles", this.getSaveFile(!1))
    }
    supportsStates() {
        return !!this.functions.supportsStates()
    }
    getSaveFile(t) {
        !1 !== t && this.saveSaveFiles();
        return this.FS.analyzePath(this.getSaveFilePath()).exists ? this.FS.readFile(this.getSaveFilePath()) : null
    }
    loadSaveFiles() {
        this.clearEJSResetTimer(),
        this.functions.loadSaveFiles()
    }
    setFastForwardRatio(t) {
        this.functions.setFastForwardRatio(t)
    }
    toggleFastForward(t) {
        this.functions.toggleFastForward(t)
    }
    setSlowMotionRatio(t) {
        this.functions.setSlowMotionRatio(t)
    }
    toggleSlowMotion(t) {
        this.functions.toggleSlowMotion(t)
    }
    setRewindGranularity(t) {
        this.functions.setRewindGranularity(t)
    }
    getFrameNum() {
        return this.functions.getFrameNum()
    }
    setVideoRotation(t) {
        this.functions.setVideoRoation(t)
    }
    getVideoDimensions(t) {
        try {
            return this.functions.getVideoDimensions(t)
        } catch (t) {
            console.warn(t)
        }
    }
    setKeyboardEnabled(t) {
        this.functions.setKeyboardEnabled(!0 === t ? 1 : 0)
    }
    setAltKeyEnabled(t) {
        this.functions.setKeyboardEnabled(!0 === t ? 3 : 2)
    }
}
window.EJS_GameManager = EJS_GameManager;
