data:application/octet-stream;base64,J3VzZSBzdHJpY3QnOwpzZWxmLmlucHV0UG9ydCA9IG51bGw7CnNlbGYuam9iUXVldWUgPSBbXTsKc2VsZi5qb2JXb3JrZXJzID0gW107CnNlbGYuc2VudEJsb2JzID0gW107CnNlbGYuc2VudEJ1ZmZlcnMgPSBbXTsKc2VsZi5pbXBvcnRlZFNjcmlwdHMgPSBbXTsKc2VsZi5sYXN0QnJvYWRjYXN0cyA9IG5ldyBNYXA7CmNsYXNzIEpvYldvcmtlciB7CiAgICBjb25zdHJ1Y3Rvcihwb3J0LCBudW1iZXIpIHsKICAgICAgICB0aGlzLl9wb3J0ID0gcG9ydDsKICAgICAgICB0aGlzLl9udW1iZXIgPSBudW1iZXI7CiAgICAgICAgdGhpcy5faXNSZWFkeSA9IGZhbHNlOwogICAgICAgIHRoaXMuX2lzQnVzeSA9IGZhbHNlOwogICAgICAgIHRoaXMuX3BvcnQub25tZXNzYWdlID0gZSA9PiB0aGlzLl9Pbk1lc3NhZ2UoZS5kYXRhKQogICAgfQogICAgSW1wb3J0U2NyaXB0cyhzY3JpcHRzKSB7CiAgICAgICAgdGhpcy5fcG9ydC5wb3N0TWVzc2FnZSh7CiAgICAgICAgICAgICJ0eXBlIjogIl9pbXBvcnRfc2NyaXB0cyIsCiAgICAgICAgICAgICJzY3JpcHRzIjogc2NyaXB0cwogICAgICAgIH0pCiAgICB9CiAgICBTZW5kQmxvYihibG9iLCBpZCkgewogICAgICAgIHRoaXMuX3BvcnQucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAidHlwZSI6ICJfc2VuZF9ibG9iIiwKICAgICAgICAgICAgImJsb2IiOiBibG9iLAogICAgICAgICAgICAiaWQiOiBpZAogICAgICAgIH0pCiAgICB9CiAgICBTZW5kQnVmZmVyKGJ1ZmZlciwgaWQpIHsKICAgICAgICB0aGlzLl9wb3J0LnBvc3RNZXNzYWdlKHsKICAgICAgICAgICAgInR5cGUiOiAiX3NlbmRfYnVmZmVyIiwKICAgICAgICAgICAgImJ1ZmZlciI6IGJ1ZmZlciwKICAgICAgICAgICAgImlkIjogaWQKICAgICAgICB9KQogICAgfQogICAgU2VuZEpvYihqb2IpIHsKICAgICAgICBpZiAodGhpcy5faXNCdXN5IHx8ICF0aGlzLl9pc1JlYWR5KSB0aHJvdyBuZXcgRXJyb3IoImNhbm5vdCB0YWtlIGpvYiIpOwogICAgICAgIHRoaXMuX2lzQnVzeSA9IHRydWU7CiAgICAgICAgdGhpcy5fcG9ydC5wb3N0TWVzc2FnZShqb2IsIGpvYlsidHJhbnNmZXJhYmxlcyJdKQogICAgfQogICAgX0luaXRCcm9hZGNhc3Qoam9iKSB7CiAgICAgICAgdGhpcy5fcG9ydC5wb3N0TWVzc2FnZShqb2IsIGpvYlsidHJhbnNmZXJhYmxlcyJdKQogICAgfQogICAgU2VuZFJlYWR5KCkgewogICAgICAgIHRoaXMuX3BvcnQucG9zdE1lc3NhZ2UoewogICAgICAgICAgICAidHlwZSI6ICJfcmVhZHkiCiAgICAgICAgfSkKICAgIH0KICAgIElzUmVhZHkoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuX2lzUmVhZHkKICAgIH0KICAgIF9PblJlYWR5KCkgewogICAgICAgIHRoaXMuX2lzUmVhZHkgPSB0cnVlOwogICAgICAgIHRoaXMuTWF5YmVTdGFydE5leHRKb2IoKQogICAgfQogICAgSXNCdXN5KCkgewogICAgICAgIHJldHVybiB0aGlzLl9pc0J1c3kKICAgIH0KICAgIEdldE51bWJlcigpIHsKICAgICAgICByZXR1cm4gdGhpcy5fbnVtYmVyCiAgICB9CiAgICBfT25NZXNzYWdlKG1zZykgewogICAgICAgIGNvbnN0IHR5cGUgPSBtc2dbInR5cGUiXTsKICAgICAgICBzd2l0Y2ggKHR5cGUpIHsKICAgICAgICAgICAgY2FzZSAicmVhZHkiOgogICAgICAgICAgICAgICAgdGhpcy5fT25SZWFkeSgpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICBjYXNlICJkb25lIjoKICAgICAgICAgICAgICAgIHRoaXMuX09uSm9iRG9uZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigidW5rbm93biBtZXNzYWdlIGZyb20gd29ya2VyICciICsKICAgICAgICAgICAgICAgICAgICB0eXBlICsgIiciKTsKICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgIH0KICAgIF9PbkpvYkRvbmUoKSB7CiAgICAgICAgdGhpcy5faXNCdXN5ID0gZmFsc2U7CiAgICAgICAgdGhpcy5NYXliZVN0YXJ0TmV4dEpvYigpCiAgICB9CiAgICBNYXliZVN0YXJ0TmV4dEpvYigpIHsKICAgICAgICBpZiAodGhpcy5faXNCdXN5IHx8ICF0aGlzLl9pc1JlYWR5KSByZXR1cm47CiAgICAgICAgY29uc3QgaSA9IHRoaXMuX0ZpbmRBdmFpbGFibGVKb2IoKTsKICAgICAgICBpZiAoaSA9PT0gLTEpIHJldHVybjsKICAgICAgICBjb25zdCBqb2IgPSBzZWxmLmpvYlF1ZXVlW2ldOwogICAgICAgIGNvbnN0IGlzQnJvYWRjYXN0ID0gam9iWyJpc0Jyb2FkY2FzdCJdOwogICAgICAgIGlmIChpc0Jyb2FkY2FzdCkgewogICAgICAgICAgICBqb2JbImRvbmVGbGFncyJdW3RoaXMuX251bWJlcl0gPSB0cnVlOwogICAgICAgICAgICBpZiAoam9iWyJkb25lRmxhZ3MiXS5ldmVyeSh4ID0+IHgpKSBzZWxmLmpvYlF1ZXVlLnNwbGljZShpLCAxKQogICAgICAgIH0gZWxzZSBzZWxmLmpvYlF1ZXVlLnNwbGljZShpLCAxKTsKICAgICAgICB0aGlzLlNlbmRKb2Ioam9iKQogICAgfQogICAgX0ZpbmRBdmFpbGFibGVKb2IoKSB7CiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGYuam9iUXVldWUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHsKICAgICAgICAgICAgY29uc3Qgam9iID0gc2VsZi5qb2JRdWV1ZVtpXTsKICAgICAgICAgICAgaWYgKHR5cGVvZiBqb2JbIm1heFdvcmtlck51bSJdID09PSAibnVtYmVyIiAmJiB0aGlzLl9udW1iZXIgPj0gam9iWyJtYXhXb3JrZXJOdW0iXSkgY29udGludWU7CiAgICAgICAgICAgIGlmICgham9iWyJpc0Jyb2FkY2FzdCJdIHx8IHRoaXMuX251bWJlciA8IGpvYlsiZG9uZUZsYWdzIl0ubGVuZ3RoICYmICFqb2JbImRvbmVGbGFncyJdW3RoaXMuX251bWJlcl0pIHJldHVybiBpCiAgICAgICAgfQogICAgICAgIHJldHVybiAtMQogICAgfQp9CmxldCBudW1iZXIgPSAwOwoKZnVuY3Rpb24gQWRkSm9iV29ya2VyKHBvcnQpIHsKICAgIGNvbnN0IGpvYldvcmtlciA9IG5ldyBKb2JXb3JrZXIocG9ydCwgbnVtYmVyKyspOwogICAgc2VsZi5qb2JXb3JrZXJzLnB1c2goam9iV29ya2VyKTsKICAgIGZvciAoY29uc3QgW2Jsb2IsIGlkXSBvZiBzZWxmLnNlbnRCbG9icykgam9iV29ya2VyLlNlbmRCbG9iKGJsb2IsIGlkKTsKICAgIGZvciAoY29uc3QgW2J1ZmZlciwgaWRdIG9mIHNlbGYuc2VudEJ1ZmZlcnMpIGpvYldvcmtlci5TZW5kQnVmZmVyKGJ1ZmZlciwgaWQpOwogICAgZm9yIChjb25zdCBzY3JpcHRzIG9mIHNlbGYuaW1wb3J0ZWRTY3JpcHRzKSBqb2JXb3JrZXIuSW1wb3J0U2NyaXB0cyhzY3JpcHRzKTsKICAgIGZvciAoY29uc3QgYnJvYWRjYXN0Sm9iIG9mIHNlbGYubGFzdEJyb2FkY2FzdHMudmFsdWVzKCkpIGpvYldvcmtlci5fSW5pdEJyb2FkY2FzdChicm9hZGNhc3RKb2IpOwogICAgam9iV29ya2VyLlNlbmRSZWFkeSgpCn0KCmZ1bmN0aW9uIENhbmNlbEpvYihqb2JJZCkgewogICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHNlbGYuam9iUXVldWUubGVuZ3RoOyBpIDwgbGVuOyArK2kpCiAgICAgICAgaWYgKHNlbGYuam9iUXVldWVbaV0uam9iSWQgPT09IGpvYklkKSB7CiAgICAgICAgICAgIHNlbGYuam9iUXVldWUuc3BsaWNlKGksIDEpOwogICAgICAgICAgICByZXR1cm4KICAgICAgICB9Cn0Kc2VsZi5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIiwgZSA9PiB7CiAgICBjb25zdCBtc2cgPSBlLmRhdGE7CiAgICBjb25zdCB0eXBlID0gbXNnWyJ0eXBlIl07CiAgICBpZiAodHlwZSA9PT0gIl9pbml0IikgewogICAgICAgIHNlbGYuaW5wdXRQb3J0ID0gbXNnWyJpbi1wb3J0Il07CiAgICAgICAgc2VsZi5pbnB1dFBvcnQub25tZXNzYWdlID0gT25JbnB1dFBvcnRNZXNzYWdlCiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICJfYWRkSm9iV29ya2VyIikgQWRkSm9iV29ya2VyKG1zZ1sicG9ydCJdKQp9KTsKCmZ1bmN0aW9uIE9uSW5wdXRQb3J0TWVzc2FnZShlKSB7CiAgICBjb25zdCBtc2cgPSBlLmRhdGE7CiAgICBjb25zdCB0eXBlID0gbXNnWyJ0eXBlIl07CiAgICBpZiAodHlwZSA9PT0gIl9jYW5jZWwiKSB7CiAgICAgICAgQ2FuY2VsSm9iKG1zZy5qb2JJZCk7CiAgICAgICAgcmV0dXJuCiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICJfaW1wb3J0X3NjcmlwdHMiKSB7CiAgICAgICAgY29uc3Qgc2NyaXB0cyA9IG1zZ1sic2NyaXB0cyJdOwogICAgICAgIGZvciAoY29uc3QgdyBvZiBzZWxmLmpvYldvcmtlcnMpIHcuSW1wb3J0U2NyaXB0cyhzY3JpcHRzKTsKICAgICAgICBzZWxmLmltcG9ydGVkU2NyaXB0cy5wdXNoKHNjcmlwdHMpOwogICAgICAgIHJldHVybgogICAgfSBlbHNlIGlmICh0eXBlID09PSAiX3NlbmRfYmxvYiIpIHsKICAgICAgICBjb25zdCBibG9iID0gbXNnWyJibG9iIl07CiAgICAgICAgY29uc3QgaWQgPSBtc2dbImlkIl07CiAgICAgICAgZm9yIChjb25zdCB3IG9mIHNlbGYuam9iV29ya2Vycykgdy5TZW5kQmxvYihibG9iLCBpZCk7CiAgICAgICAgc2VsZi5zZW50QmxvYnMucHVzaChbYmxvYiwgaWRdKTsKICAgICAgICByZXR1cm4KICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gIl9zZW5kX2J1ZmZlciIpIHsKICAgICAgICBjb25zdCBidWZmZXIgPSBtc2dbImJ1ZmZlciJdOwogICAgICAgIGNvbnN0IGlkID0KICAgICAgICAgICAgbXNnWyJpZCJdOwogICAgICAgIGZvciAoY29uc3QgdyBvZiBzZWxmLmpvYldvcmtlcnMpIHcuU2VuZEJ1ZmZlcihidWZmZXIsIGlkKTsKICAgICAgICBzZWxmLnNlbnRCdWZmZXJzLnB1c2goW2J1ZmZlciwgaWRdKTsKICAgICAgICByZXR1cm4KICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gIl9ub19tb3JlX3dvcmtlcnMiKSB7CiAgICAgICAgc2VsZi5zZW50QmxvYnMubGVuZ3RoID0gMDsKICAgICAgICBzZWxmLnNlbnRCdWZmZXJzLmxlbmd0aCA9IDA7CiAgICAgICAgc2VsZi5pbXBvcnRlZFNjcmlwdHMubGVuZ3RoID0gMDsKICAgICAgICBzZWxmLmxhc3RCcm9hZGNhc3RzLmNsZWFyKCk7CiAgICAgICAgcmV0dXJuCiAgICB9CiAgICBzZWxmLmpvYlF1ZXVlLnB1c2gobXNnKTsKICAgIGlmIChtc2dbImlzQnJvYWRjYXN0Il0pIHsKICAgICAgICBjb25zdCBtYXhXb3JrZXJOdW0gPSBtc2dbIm1heFdvcmtlck51bSJdOwogICAgICAgIGNvbnN0IGN1cldvcmtlckNvdW50ID0gc2VsZi5qb2JXb3JrZXJzLmxlbmd0aDsKICAgICAgICBjb25zdCB1c2VXb3JrZXJDb3VudCA9IHR5cGVvZiBtYXhXb3JrZXJOdW0gPT09ICJudW1iZXIiID8gTWF0aC5taW4obWF4V29ya2VyTnVtLCBjdXJXb3JrZXJDb3VudCkgOiBjdXJXb3JrZXJDb3VudDsKICAgICAgICBtc2dbImRvbmVGbGFncyJdID0KICAgICAgICAgICAgKG5ldyBBcnJheSh1c2VXb3JrZXJDb3VudCkpLmZpbGwoZmFsc2UpOwogICAgICAgIG1zZ1sidHJhbnNmZXJhYmxlcyJdID0gW107CiAgICAgICAgc2VsZi5sYXN0QnJvYWRjYXN0cy5zZXQobXNnWyJ0eXBlIl0sIG1zZykKICAgIH0KICAgIGZvciAoY29uc3QgdyBvZiBzZWxmLmpvYldvcmtlcnMpIHcuTWF5YmVTdGFydE5leHRKb2IoKQp9Ow==