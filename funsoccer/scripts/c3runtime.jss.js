data:application/octet-stream;base64,// Generated by Construct, the game and app creator :: https://www.construct.net
// ../3rdparty/glmatrix.js
{
    /*
     @fileoverview gl-matrix - High performance matrix and vector operations
    @author Brandon Jones
    @author Colin MacKenzie IV
    @version 3.4.1

    Copyright (c) 2015-2021, Brandon Jones, Colin MacKenzie IV.

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.

    */
    'use strict';
    (function(global, factory) {
        typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, factory(global.glMatrix = {}))
    })(this, function(exports) {
        var EPSILON = 1E-6;
        var ARRAY_TYPE = typeof Float32Array !== "undefined" ? Float32Array : Array;
        var RANDOM = Math.random;
        var ANGLE_ORDER = "zyx";

        function setMatrixArrayType(type) {
            ARRAY_TYPE = type
        }
        var degree = Math.PI / 180;

        function toRadian(a) {
            return a *
                degree
        }

        function equals$9(a, b) {
            return Math.abs(a - b) <= EPSILON * Math.max(1, Math.abs(a), Math.abs(b))
        }
        if (!Math.hypot) Math.hypot = function() {
            var y = 0,
                i = arguments.length;
            while (i--) y += arguments[i] * arguments[i];
            return Math.sqrt(y)
        };
        var common = Object.freeze({
            __proto__: null,
            EPSILON: EPSILON,
            get ARRAY_TYPE() {
                return ARRAY_TYPE
            },
            RANDOM: RANDOM,
            ANGLE_ORDER: ANGLE_ORDER,
            setMatrixArrayType: setMatrixArrayType,
            toRadian: toRadian,
            equals: equals$9
        });

        function create$8() {
            var out = new ARRAY_TYPE(4);
            if (ARRAY_TYPE != Float32Array) {
                out[1] =
                    0;
                out[2] = 0
            }
            out[0] = 1;
            out[3] = 1;
            return out
        }

        function clone$8(a) {
            var out = new ARRAY_TYPE(4);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            return out
        }

        function copy$8(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            return out
        }

        function identity$5(out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out
        }

        function fromValues$8(m00, m01, m10, m11) {
            var out = new ARRAY_TYPE(4);
            out[0] = m00;
            out[1] = m01;
            out[2] = m10;
            out[3] = m11;
            return out
        }

        function set$8(out, m00, m01, m10, m11) {
            out[0] = m00;
            out[1] = m01;
            out[2] = m10;
            out[3] = m11;
            return out
        }

        function transpose$2(out, a) {
            if (out === a) {
                var a1 = a[1];
                out[1] = a[2];
                out[2] = a1
            } else {
                out[0] = a[0];
                out[1] = a[2];
                out[2] = a[1];
                out[3] = a[3]
            }
            return out
        }

        function invert$5(out, a) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var det = a0 * a3 - a2 * a1;
            if (!det) return null;
            det = 1 / det;
            out[0] = a3 * det;
            out[1] = -a1 * det;
            out[2] = -a2 * det;
            out[3] = a0 * det;
            return out
        }

        function adjoint$2(out, a) {
            var a0 = a[0];
            out[0] = a[3];
            out[1] = -a[1];
            out[2] = -a[2];
            out[3] = a0;
            return out
        }

        function determinant$3(a) {
            return a[0] * a[3] - a[2] * a[1]
        }

        function multiply$8(out, a, b) {
            var a0 =
                a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3];
            out[0] = a0 * b0 + a2 * b1;
            out[1] = a1 * b0 + a3 * b1;
            out[2] = a0 * b2 + a2 * b3;
            out[3] = a1 * b2 + a3 * b3;
            return out
        }

        function rotate$4(out, a, rad) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = a0 * c + a2 * s;
            out[1] = a1 * c + a3 * s;
            out[2] = a0 * -s + a2 * c;
            out[3] = a1 * -s + a3 * c;
            return out
        }

        function scale$8(out, a, v) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var v0 = v[0],
                v1 = v[1];
            out[0] = a0 * v0;
            out[1] = a1 * v0;
            out[2] = a2 * v1;
            out[3] = a3 * v1;
            return out
        }

        function fromRotation$4(out,
            rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = c;
            out[1] = s;
            out[2] = -s;
            out[3] = c;
            return out
        }

        function fromScaling$3(out, v) {
            out[0] = v[0];
            out[1] = 0;
            out[2] = 0;
            out[3] = v[1];
            return out
        }

        function str$8(a) {
            return "mat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")"
        }

        function frob$3(a) {
            return Math.hypot(a[0], a[1], a[2], a[3])
        }

        function LDU(L, D, U, a) {
            L[2] = a[2] / a[0];
            U[0] = a[0];
            U[1] = a[1];
            U[3] = a[3] - L[2] * U[1];
            return [L, D, U]
        }

        function add$8(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            out[3] = a[3] + b[3];
            return out
        }

        function subtract$6(out,
            a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];
            return out
        }

        function exactEquals$8(a, b) {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3]
        }

        function equals$8(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3),
                Math.abs(b3))
        }

        function multiplyScalar$3(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            return out
        }

        function multiplyScalarAndAdd$3(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            out[3] = a[3] + b[3] * scale;
            return out
        }
        var mul$8 = multiply$8;
        var sub$6 = subtract$6;
        var mat2 = Object.freeze({
            __proto__: null,
            create: create$8,
            clone: clone$8,
            copy: copy$8,
            identity: identity$5,
            fromValues: fromValues$8,
            set: set$8,
            transpose: transpose$2,
            invert: invert$5,
            adjoint: adjoint$2,
            determinant: determinant$3,
            multiply: multiply$8,
            rotate: rotate$4,
            scale: scale$8,
            fromRotation: fromRotation$4,
            fromScaling: fromScaling$3,
            str: str$8,
            frob: frob$3,
            LDU: LDU,
            add: add$8,
            subtract: subtract$6,
            exactEquals: exactEquals$8,
            equals: equals$8,
            multiplyScalar: multiplyScalar$3,
            multiplyScalarAndAdd: multiplyScalarAndAdd$3,
            mul: mul$8,
            sub: sub$6
        });

        function create$7() {
            var out = new ARRAY_TYPE(6);
            if (ARRAY_TYPE != Float32Array) {
                out[1] = 0;
                out[2] = 0;
                out[4] = 0;
                out[5] = 0
            }
            out[0] = 1;
            out[3] = 1;
            return out
        }

        function clone$7(a) {
            var out = new ARRAY_TYPE(6);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            return out
        }

        function copy$7(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            return out
        }

        function identity$4(out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            out[4] = 0;
            out[5] = 0;
            return out
        }

        function fromValues$7(a, b, c, d, tx, ty) {
            var out = new ARRAY_TYPE(6);
            out[0] = a;
            out[1] = b;
            out[2] = c;
            out[3] = d;
            out[4] = tx;
            out[5] = ty;
            return out
        }

        function set$7(out, a, b, c, d, tx, ty) {
            out[0] = a;
            out[1] = b;
            out[2] = c;
            out[3] = d;
            out[4] = tx;
            out[5] = ty;
            return out
        }

        function invert$4(out,
            a) {
            var aa = a[0],
                ab = a[1],
                ac = a[2],
                ad = a[3];
            var atx = a[4],
                aty = a[5];
            var det = aa * ad - ab * ac;
            if (!det) return null;
            det = 1 / det;
            out[0] = ad * det;
            out[1] = -ab * det;
            out[2] = -ac * det;
            out[3] = aa * det;
            out[4] = (ac * aty - ad * atx) * det;
            out[5] = (ab * atx - aa * aty) * det;
            return out
        }

        function determinant$2(a) {
            return a[0] * a[3] - a[1] * a[2]
        }

        function multiply$7(out, a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3],
                b4 = b[4],
                b5 = b[5];
            out[0] = a0 * b0 + a2 * b1;
            out[1] = a1 * b0 + a3 * b1;
            out[2] = a0 * b2 + a2 * b3;
            out[3] = a1 * b2 + a3 * b3;
            out[4] =
                a0 * b4 + a2 * b5 + a4;
            out[5] = a1 * b4 + a3 * b5 + a5;
            return out
        }

        function rotate$3(out, a, rad) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5];
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = a0 * c + a2 * s;
            out[1] = a1 * c + a3 * s;
            out[2] = a0 * -s + a2 * c;
            out[3] = a1 * -s + a3 * c;
            out[4] = a4;
            out[5] = a5;
            return out
        }

        function scale$7(out, a, v) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5];
            var v0 = v[0],
                v1 = v[1];
            out[0] = a0 * v0;
            out[1] = a1 * v0;
            out[2] = a2 * v1;
            out[3] = a3 * v1;
            out[4] = a4;
            out[5] = a5;
            return out
        }

        function translate$3(out, a, v) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5];
            var v0 = v[0],
                v1 = v[1];
            out[0] = a0;
            out[1] = a1;
            out[2] = a2;
            out[3] = a3;
            out[4] = a0 * v0 + a2 * v1 + a4;
            out[5] = a1 * v0 + a3 * v1 + a5;
            return out
        }

        function fromRotation$3(out, rad) {
            var s = Math.sin(rad),
                c = Math.cos(rad);
            out[0] = c;
            out[1] = s;
            out[2] = -s;
            out[3] = c;
            out[4] = 0;
            out[5] = 0;
            return out
        }

        function fromScaling$2(out, v) {
            out[0] = v[0];
            out[1] = 0;
            out[2] = 0;
            out[3] = v[1];
            out[4] = 0;
            out[5] = 0;
            return out
        }

        function fromTranslation$3(out, v) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            out[4] = v[0];
            out[5] = v[1];
            return out
        }

        function str$7(a) {
            return "mat2d(" +
                a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ")"
        }

        function frob$2(a) {
            return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], 1)
        }

        function add$7(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            out[3] = a[3] + b[3];
            out[4] = a[4] + b[4];
            out[5] = a[5] + b[5];
            return out
        }

        function subtract$5(out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];
            out[4] = a[4] - b[4];
            out[5] = a[5] - b[5];
            return out
        }

        function multiplyScalar$2(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            out[4] =
                a[4] * b;
            out[5] = a[5] * b;
            return out
        }

        function multiplyScalarAndAdd$2(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            out[3] = a[3] + b[3] * scale;
            out[4] = a[4] + b[4] * scale;
            out[5] = a[5] + b[5] * scale;
            return out
        }

        function exactEquals$7(a, b) {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5]
        }

        function equals$7(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3],
                b4 = b[4],
                b5 = b[5];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1,
                Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5))
        }
        var mul$7 = multiply$7;
        var sub$5 = subtract$5;
        var mat2d = Object.freeze({
            __proto__: null,
            create: create$7,
            clone: clone$7,
            copy: copy$7,
            identity: identity$4,
            fromValues: fromValues$7,
            set: set$7,
            invert: invert$4,
            determinant: determinant$2,
            multiply: multiply$7,
            rotate: rotate$3,
            scale: scale$7,
            translate: translate$3,
            fromRotation: fromRotation$3,
            fromScaling: fromScaling$2,
            fromTranslation: fromTranslation$3,
            str: str$7,
            frob: frob$2,
            add: add$7,
            subtract: subtract$5,
            multiplyScalar: multiplyScalar$2,
            multiplyScalarAndAdd: multiplyScalarAndAdd$2,
            exactEquals: exactEquals$7,
            equals: equals$7,
            mul: mul$7,
            sub: sub$5
        });

        function create$6() {
            var out = new ARRAY_TYPE(9);
            if (ARRAY_TYPE != Float32Array) {
                out[1] = 0;
                out[2] = 0;
                out[3] =
                    0;
                out[5] = 0;
                out[6] = 0;
                out[7] = 0
            }
            out[0] = 1;
            out[4] = 1;
            out[8] = 1;
            return out
        }

        function fromMat4$1(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[4];
            out[4] = a[5];
            out[5] = a[6];
            out[6] = a[8];
            out[7] = a[9];
            out[8] = a[10];
            return out
        }

        function clone$6(a) {
            var out = new ARRAY_TYPE(9);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            return out
        }

        function copy$6(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] =
                a[8];
            return out
        }

        function fromValues$6(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
            var out = new ARRAY_TYPE(9);
            out[0] = m00;
            out[1] = m01;
            out[2] = m02;
            out[3] = m10;
            out[4] = m11;
            out[5] = m12;
            out[6] = m20;
            out[7] = m21;
            out[8] = m22;
            return out
        }

        function set$6(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
            out[0] = m00;
            out[1] = m01;
            out[2] = m02;
            out[3] = m10;
            out[4] = m11;
            out[5] = m12;
            out[6] = m20;
            out[7] = m21;
            out[8] = m22;
            return out
        }

        function identity$3(out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 1;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 1;
            return out
        }

        function transpose$1(out,
            a) {
            if (out === a) {
                var a01 = a[1],
                    a02 = a[2],
                    a12 = a[5];
                out[1] = a[3];
                out[2] = a[6];
                out[3] = a01;
                out[5] = a[7];
                out[6] = a02;
                out[7] = a12
            } else {
                out[0] = a[0];
                out[1] = a[3];
                out[2] = a[6];
                out[3] = a[1];
                out[4] = a[4];
                out[5] = a[7];
                out[6] = a[2];
                out[7] = a[5];
                out[8] = a[8]
            }
            return out
        }

        function invert$3(out, a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2];
            var a10 = a[3],
                a11 = a[4],
                a12 = a[5];
            var a20 = a[6],
                a21 = a[7],
                a22 = a[8];
            var b01 = a22 * a11 - a12 * a21;
            var b11 = -a22 * a10 + a12 * a20;
            var b21 = a21 * a10 - a11 * a20;
            var det = a00 * b01 + a01 * b11 + a02 * b21;
            if (!det) return null;
            det = 1 / det;
            out[0] = b01 *
                det;
            out[1] = (-a22 * a01 + a02 * a21) * det;
            out[2] = (a12 * a01 - a02 * a11) * det;
            out[3] = b11 * det;
            out[4] = (a22 * a00 - a02 * a20) * det;
            out[5] = (-a12 * a00 + a02 * a10) * det;
            out[6] = b21 * det;
            out[7] = (-a21 * a00 + a01 * a20) * det;
            out[8] = (a11 * a00 - a01 * a10) * det;
            return out
        }

        function adjoint$1(out, a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2];
            var a10 = a[3],
                a11 = a[4],
                a12 = a[5];
            var a20 = a[6],
                a21 = a[7],
                a22 = a[8];
            out[0] = a11 * a22 - a12 * a21;
            out[1] = a02 * a21 - a01 * a22;
            out[2] = a01 * a12 - a02 * a11;
            out[3] = a12 * a20 - a10 * a22;
            out[4] = a00 * a22 - a02 * a20;
            out[5] = a02 * a10 - a00 * a12;
            out[6] = a10 * a21 - a11 * a20;
            out[7] = a01 * a20 - a00 * a21;
            out[8] = a00 * a11 - a01 * a10;
            return out
        }

        function determinant$1(a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2];
            var a10 = a[3],
                a11 = a[4],
                a12 = a[5];
            var a20 = a[6],
                a21 = a[7],
                a22 = a[8];
            return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20)
        }

        function multiply$6(out, a, b) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2];
            var a10 = a[3],
                a11 = a[4],
                a12 = a[5];
            var a20 = a[6],
                a21 = a[7],
                a22 = a[8];
            var b00 = b[0],
                b01 = b[1],
                b02 = b[2];
            var b10 = b[3],
                b11 = b[4],
                b12 = b[5];
            var b20 = b[6],
                b21 = b[7],
                b22 = b[8];
            out[0] = b00 * a00 + b01 * a10 + b02 * a20;
            out[1] =
                b00 * a01 + b01 * a11 + b02 * a21;
            out[2] = b00 * a02 + b01 * a12 + b02 * a22;
            out[3] = b10 * a00 + b11 * a10 + b12 * a20;
            out[4] = b10 * a01 + b11 * a11 + b12 * a21;
            out[5] = b10 * a02 + b11 * a12 + b12 * a22;
            out[6] = b20 * a00 + b21 * a10 + b22 * a20;
            out[7] = b20 * a01 + b21 * a11 + b22 * a21;
            out[8] = b20 * a02 + b21 * a12 + b22 * a22;
            return out
        }

        function translate$2(out, a, v) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a10 = a[3],
                a11 = a[4],
                a12 = a[5],
                a20 = a[6],
                a21 = a[7],
                a22 = a[8],
                x = v[0],
                y = v[1];
            out[0] = a00;
            out[1] = a01;
            out[2] = a02;
            out[3] = a10;
            out[4] = a11;
            out[5] = a12;
            out[6] = x * a00 + y * a10 + a20;
            out[7] = x * a01 + y * a11 + a21;
            out[8] = x *
                a02 + y * a12 + a22;
            return out
        }

        function rotate$2(out, a, rad) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a10 = a[3],
                a11 = a[4],
                a12 = a[5],
                a20 = a[6],
                a21 = a[7],
                a22 = a[8],
                s = Math.sin(rad),
                c = Math.cos(rad);
            out[0] = c * a00 + s * a10;
            out[1] = c * a01 + s * a11;
            out[2] = c * a02 + s * a12;
            out[3] = c * a10 - s * a00;
            out[4] = c * a11 - s * a01;
            out[5] = c * a12 - s * a02;
            out[6] = a20;
            out[7] = a21;
            out[8] = a22;
            return out
        }

        function scale$6(out, a, v) {
            var x = v[0],
                y = v[1];
            out[0] = x * a[0];
            out[1] = x * a[1];
            out[2] = x * a[2];
            out[3] = y * a[3];
            out[4] = y * a[4];
            out[5] = y * a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            return out
        }

        function fromTranslation$2(out, v) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 1;
            out[5] = 0;
            out[6] = v[0];
            out[7] = v[1];
            out[8] = 1;
            return out
        }

        function fromRotation$2(out, rad) {
            var s = Math.sin(rad),
                c = Math.cos(rad);
            out[0] = c;
            out[1] = s;
            out[2] = 0;
            out[3] = -s;
            out[4] = c;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 1;
            return out
        }

        function fromScaling$1(out, v) {
            out[0] = v[0];
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = v[1];
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            out[8] = 1;
            return out
        }

        function fromMat2d(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = 0;
            out[3] = a[2];
            out[4] = a[3];
            out[5] = 0;
            out[6] = a[4];
            out[7] = a[5];
            out[8] = 1;
            return out
        }

        function fromQuat$1(out, q) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3];
            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx = x * x2;
            var yx = y * x2;
            var yy = y * y2;
            var zx = z * x2;
            var zy = z * y2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;
            out[0] = 1 - yy - zz;
            out[3] = yx - wz;
            out[6] = zx + wy;
            out[1] = yx + wz;
            out[4] = 1 - xx - zz;
            out[7] = zy - wx;
            out[2] = zx - wy;
            out[5] = zy + wx;
            out[8] = 1 - xx - yy;
            return out
        }

        function normalFromMat4(out, a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a03 = a[3];
            var a10 = a[4],
                a11 = a[5],
                a12 = a[6],
                a13 = a[7];
            var a20 =
                a[8],
                a21 = a[9],
                a22 = a[10],
                a23 = a[11];
            var a30 = a[12],
                a31 = a[13],
                a32 = a[14],
                a33 = a[15];
            var b00 = a00 * a11 - a01 * a10;
            var b01 = a00 * a12 - a02 * a10;
            var b02 = a00 * a13 - a03 * a10;
            var b03 = a01 * a12 - a02 * a11;
            var b04 = a01 * a13 - a03 * a11;
            var b05 = a02 * a13 - a03 * a12;
            var b06 = a20 * a31 - a21 * a30;
            var b07 = a20 * a32 - a22 * a30;
            var b08 = a20 * a33 - a23 * a30;
            var b09 = a21 * a32 - a22 * a31;
            var b10 = a21 * a33 - a23 * a31;
            var b11 = a22 * a33 - a23 * a32;
            var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
            if (!det) return null;
            det = 1 / det;
            out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
            out[1] = (a12 *
                b08 - a10 * b11 - a13 * b07) * det;
            out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
            out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
            out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
            out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
            out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
            out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
            out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
            return out
        }

        function projection(out, width, height) {
            out[0] = 2 / width;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = -2 / height;
            out[5] = 0;
            out[6] = -1;
            out[7] = 1;
            out[8] = 1;
            return out
        }

        function str$6(a) {
            return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " +
                a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")"
        }

        function frob$1(a) {
            return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8])
        }

        function add$6(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            out[3] = a[3] + b[3];
            out[4] = a[4] + b[4];
            out[5] = a[5] + b[5];
            out[6] = a[6] + b[6];
            out[7] = a[7] + b[7];
            out[8] = a[8] + b[8];
            return out
        }

        function subtract$4(out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];
            out[4] = a[4] - b[4];
            out[5] = a[5] - b[5];
            out[6] = a[6] - b[6];
            out[7] = a[7] - b[7];
            out[8] =
                a[8] - b[8];
            return out
        }

        function multiplyScalar$1(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            out[4] = a[4] * b;
            out[5] = a[5] * b;
            out[6] = a[6] * b;
            out[7] = a[7] * b;
            out[8] = a[8] * b;
            return out
        }

        function multiplyScalarAndAdd$1(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            out[3] = a[3] + b[3] * scale;
            out[4] = a[4] + b[4] * scale;
            out[5] = a[5] + b[5] * scale;
            out[6] = a[6] + b[6] * scale;
            out[7] = a[7] + b[7] * scale;
            out[8] = a[8] + b[8] * scale;
            return out
        }

        function exactEquals$6(a, b) {
            return a[0] === b[0] &&
                a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8]
        }

        function equals$6(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5],
                a6 = a[6],
                a7 = a[7],
                a8 = a[8];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3],
                b4 = b[4],
                b5 = b[5],
                b6 = b[6],
                b7 = b[7],
                b8 = b[8];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON *
                Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8))
        }
        var mul$6 = multiply$6;
        var sub$4 = subtract$4;
        var mat3 = Object.freeze({
            __proto__: null,
            create: create$6,
            fromMat4: fromMat4$1,
            clone: clone$6,
            copy: copy$6,
            fromValues: fromValues$6,
            set: set$6,
            identity: identity$3,
            transpose: transpose$1,
            invert: invert$3,
            adjoint: adjoint$1,
            determinant: determinant$1,
            multiply: multiply$6,
            translate: translate$2,
            rotate: rotate$2,
            scale: scale$6,
            fromTranslation: fromTranslation$2,
            fromRotation: fromRotation$2,
            fromScaling: fromScaling$1,
            fromMat2d: fromMat2d,
            fromQuat: fromQuat$1,
            normalFromMat4: normalFromMat4,
            projection: projection,
            str: str$6,
            frob: frob$1,
            add: add$6,
            subtract: subtract$4,
            multiplyScalar: multiplyScalar$1,
            multiplyScalarAndAdd: multiplyScalarAndAdd$1,
            exactEquals: exactEquals$6,
            equals: equals$6,
            mul: mul$6,
            sub: sub$4
        });

        function create$5() {
            var out = new ARRAY_TYPE(16);
            if (ARRAY_TYPE != Float32Array) {
                out[1] = 0;
                out[2] = 0;
                out[3] = 0;
                out[4] = 0;
                out[6] = 0;
                out[7] = 0;
                out[8] = 0;
                out[9] = 0;
                out[11] = 0;
                out[12] = 0;
                out[13] = 0;
                out[14] = 0
            }
            out[0] = 1;
            out[5] = 1;
            out[10] = 1;
            out[15] = 1;
            return out
        }

        function clone$5(a) {
            var out = new ARRAY_TYPE(16);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] =
                a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
            return out
        }

        function copy$5(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            out[8] = a[8];
            out[9] = a[9];
            out[10] = a[10];
            out[11] = a[11];
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
            return out
        }

        function fromValues$5(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
            var out = new ARRAY_TYPE(16);
            out[0] = m00;
            out[1] = m01;
            out[2] = m02;
            out[3] = m03;
            out[4] = m10;
            out[5] = m11;
            out[6] = m12;
            out[7] = m13;
            out[8] =
                m20;
            out[9] = m21;
            out[10] = m22;
            out[11] = m23;
            out[12] = m30;
            out[13] = m31;
            out[14] = m32;
            out[15] = m33;
            return out
        }

        function set$5(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
            out[0] = m00;
            out[1] = m01;
            out[2] = m02;
            out[3] = m03;
            out[4] = m10;
            out[5] = m11;
            out[6] = m12;
            out[7] = m13;
            out[8] = m20;
            out[9] = m21;
            out[10] = m22;
            out[11] = m23;
            out[12] = m30;
            out[13] = m31;
            out[14] = m32;
            out[15] = m33;
            return out
        }

        function identity$2(out) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = 1;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 1;
            out[11] =
                0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function transpose(out, a) {
            if (out === a) {
                var a01 = a[1],
                    a02 = a[2],
                    a03 = a[3];
                var a12 = a[6],
                    a13 = a[7];
                var a23 = a[11];
                out[1] = a[4];
                out[2] = a[8];
                out[3] = a[12];
                out[4] = a01;
                out[6] = a[9];
                out[7] = a[13];
                out[8] = a02;
                out[9] = a12;
                out[11] = a[14];
                out[12] = a03;
                out[13] = a13;
                out[14] = a23
            } else {
                out[0] = a[0];
                out[1] = a[4];
                out[2] = a[8];
                out[3] = a[12];
                out[4] = a[1];
                out[5] = a[5];
                out[6] = a[9];
                out[7] = a[13];
                out[8] = a[2];
                out[9] = a[6];
                out[10] = a[10];
                out[11] = a[14];
                out[12] = a[3];
                out[13] = a[7];
                out[14] = a[11];
                out[15] =
                    a[15]
            }
            return out
        }

        function invert$2(out, a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a03 = a[3];
            var a10 = a[4],
                a11 = a[5],
                a12 = a[6],
                a13 = a[7];
            var a20 = a[8],
                a21 = a[9],
                a22 = a[10],
                a23 = a[11];
            var a30 = a[12],
                a31 = a[13],
                a32 = a[14],
                a33 = a[15];
            var b00 = a00 * a11 - a01 * a10;
            var b01 = a00 * a12 - a02 * a10;
            var b02 = a00 * a13 - a03 * a10;
            var b03 = a01 * a12 - a02 * a11;
            var b04 = a01 * a13 - a03 * a11;
            var b05 = a02 * a13 - a03 * a12;
            var b06 = a20 * a31 - a21 * a30;
            var b07 = a20 * a32 - a22 * a30;
            var b08 = a20 * a33 - a23 * a30;
            var b09 = a21 * a32 - a22 * a31;
            var b10 = a21 * a33 - a23 * a31;
            var b11 = a22 * a33 - a23 * a32;
            var det =
                b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
            if (!det) return null;
            det = 1 / det;
            out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
            out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
            out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
            out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
            out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
            out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
            out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
            out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
            out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
            out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
            out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
            out[11] = (a21 * b02 -
                a20 * b04 - a23 * b00) * det;
            out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
            out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
            out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
            out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
            return out
        }

        function adjoint(out, a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a03 = a[3];
            var a10 = a[4],
                a11 = a[5],
                a12 = a[6],
                a13 = a[7];
            var a20 = a[8],
                a21 = a[9],
                a22 = a[10],
                a23 = a[11];
            var a30 = a[12],
                a31 = a[13],
                a32 = a[14],
                a33 = a[15];
            var b00 = a00 * a11 - a01 * a10;
            var b01 = a00 * a12 - a02 * a10;
            var b02 = a00 * a13 - a03 * a10;
            var b03 = a01 * a12 - a02 * a11;
            var b04 = a01 * a13 - a03 * a11;
            var b05 =
                a02 * a13 - a03 * a12;
            var b06 = a20 * a31 - a21 * a30;
            var b07 = a20 * a32 - a22 * a30;
            var b08 = a20 * a33 - a23 * a30;
            var b09 = a21 * a32 - a22 * a31;
            var b10 = a21 * a33 - a23 * a31;
            var b11 = a22 * a33 - a23 * a32;
            out[0] = a11 * b11 - a12 * b10 + a13 * b09;
            out[1] = a02 * b10 - a01 * b11 - a03 * b09;
            out[2] = a31 * b05 - a32 * b04 + a33 * b03;
            out[3] = a22 * b04 - a21 * b05 - a23 * b03;
            out[4] = a12 * b08 - a10 * b11 - a13 * b07;
            out[5] = a00 * b11 - a02 * b08 + a03 * b07;
            out[6] = a32 * b02 - a30 * b05 - a33 * b01;
            out[7] = a20 * b05 - a22 * b02 + a23 * b01;
            out[8] = a10 * b10 - a11 * b08 + a13 * b06;
            out[9] = a01 * b08 - a00 * b10 - a03 * b06;
            out[10] = a30 * b04 - a31 * b02 + a33 * b00;
            out[11] = a21 * b02 - a20 * b04 - a23 * b00;
            out[12] = a11 * b07 - a10 * b09 - a12 * b06;
            out[13] = a00 * b09 - a01 * b07 + a02 * b06;
            out[14] = a31 * b01 - a30 * b03 - a32 * b00;
            out[15] = a20 * b03 - a21 * b01 + a22 * b00;
            return out
        }

        function determinant(a) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a03 = a[3];
            var a10 = a[4],
                a11 = a[5],
                a12 = a[6],
                a13 = a[7];
            var a20 = a[8],
                a21 = a[9],
                a22 = a[10],
                a23 = a[11];
            var a30 = a[12],
                a31 = a[13],
                a32 = a[14],
                a33 = a[15];
            var b0 = a00 * a11 - a01 * a10;
            var b1 = a00 * a12 - a02 * a10;
            var b2 = a01 * a12 - a02 * a11;
            var b3 = a20 * a31 - a21 * a30;
            var b4 = a20 * a32 - a22 * a30;
            var b5 = a21 * a32 - a22 * a31;
            var b6 =
                a00 * b5 - a01 * b4 + a02 * b3;
            var b7 = a10 * b5 - a11 * b4 + a12 * b3;
            var b8 = a20 * b2 - a21 * b1 + a22 * b0;
            var b9 = a30 * b2 - a31 * b1 + a32 * b0;
            return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9
        }

        function multiply$5(out, a, b) {
            var a00 = a[0],
                a01 = a[1],
                a02 = a[2],
                a03 = a[3];
            var a10 = a[4],
                a11 = a[5],
                a12 = a[6],
                a13 = a[7];
            var a20 = a[8],
                a21 = a[9],
                a22 = a[10],
                a23 = a[11];
            var a30 = a[12],
                a31 = a[13],
                a32 = a[14],
                a33 = a[15];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3];
            out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[3] = b0 * a03 + b1 * a13 + b2 * a23 +
                b3 * a33;
            b0 = b[4];
            b1 = b[5];
            b2 = b[6];
            b3 = b[7];
            out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            b0 = b[8];
            b1 = b[9];
            b2 = b[10];
            b3 = b[11];
            out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            b0 = b[12];
            b1 = b[13];
            b2 = b[14];
            b3 = b[15];
            out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
            out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
            out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
            out[15] =
                b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
            return out
        }

        function translate$1(out, a, v) {
            var x = v[0],
                y = v[1],
                z = v[2];
            var a00, a01, a02, a03;
            var a10, a11, a12, a13;
            var a20, a21, a22, a23;
            if (a === out) {
                out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
                out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
                out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
                out[15] = a[3] * x + a[7] * y + a[11] * z + a[15]
            } else {
                a00 = a[0];
                a01 = a[1];
                a02 = a[2];
                a03 = a[3];
                a10 = a[4];
                a11 = a[5];
                a12 = a[6];
                a13 = a[7];
                a20 = a[8];
                a21 = a[9];
                a22 = a[10];
                a23 = a[11];
                out[0] = a00;
                out[1] = a01;
                out[2] = a02;
                out[3] = a03;
                out[4] = a10;
                out[5] = a11;
                out[6] = a12;
                out[7] =
                    a13;
                out[8] = a20;
                out[9] = a21;
                out[10] = a22;
                out[11] = a23;
                out[12] = a00 * x + a10 * y + a20 * z + a[12];
                out[13] = a01 * x + a11 * y + a21 * z + a[13];
                out[14] = a02 * x + a12 * y + a22 * z + a[14];
                out[15] = a03 * x + a13 * y + a23 * z + a[15]
            }
            return out
        }

        function scale$5(out, a, v) {
            var x = v[0],
                y = v[1],
                z = v[2];
            out[0] = a[0] * x;
            out[1] = a[1] * x;
            out[2] = a[2] * x;
            out[3] = a[3] * x;
            out[4] = a[4] * y;
            out[5] = a[5] * y;
            out[6] = a[6] * y;
            out[7] = a[7] * y;
            out[8] = a[8] * z;
            out[9] = a[9] * z;
            out[10] = a[10] * z;
            out[11] = a[11] * z;
            out[12] = a[12];
            out[13] = a[13];
            out[14] = a[14];
            out[15] = a[15];
            return out
        }

        function rotate$1(out,
            a, rad, axis) {
            var x = axis[0],
                y = axis[1],
                z = axis[2];
            var len = Math.hypot(x, y, z);
            var s, c, t;
            var a00, a01, a02, a03;
            var a10, a11, a12, a13;
            var a20, a21, a22, a23;
            var b00, b01, b02;
            var b10, b11, b12;
            var b20, b21, b22;
            if (len < EPSILON) return null;
            len = 1 / len;
            x *= len;
            y *= len;
            z *= len;
            s = Math.sin(rad);
            c = Math.cos(rad);
            t = 1 - c;
            a00 = a[0];
            a01 = a[1];
            a02 = a[2];
            a03 = a[3];
            a10 = a[4];
            a11 = a[5];
            a12 = a[6];
            a13 = a[7];
            a20 = a[8];
            a21 = a[9];
            a22 = a[10];
            a23 = a[11];
            b00 = x * x * t + c;
            b01 = y * x * t + z * s;
            b02 = z * x * t - y * s;
            b10 = x * y * t - z * s;
            b11 = y * y * t + c;
            b12 = z * y * t + x * s;
            b20 = x * z * t + y * s;
            b21 = y * z * t - x *
                s;
            b22 = z * z * t + c;
            out[0] = a00 * b00 + a10 * b01 + a20 * b02;
            out[1] = a01 * b00 + a11 * b01 + a21 * b02;
            out[2] = a02 * b00 + a12 * b01 + a22 * b02;
            out[3] = a03 * b00 + a13 * b01 + a23 * b02;
            out[4] = a00 * b10 + a10 * b11 + a20 * b12;
            out[5] = a01 * b10 + a11 * b11 + a21 * b12;
            out[6] = a02 * b10 + a12 * b11 + a22 * b12;
            out[7] = a03 * b10 + a13 * b11 + a23 * b12;
            out[8] = a00 * b20 + a10 * b21 + a20 * b22;
            out[9] = a01 * b20 + a11 * b21 + a21 * b22;
            out[10] = a02 * b20 + a12 * b21 + a22 * b22;
            out[11] = a03 * b20 + a13 * b21 + a23 * b22;
            if (a !== out) {
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15]
            }
            return out
        }

        function rotateX$3(out, a, rad) {
            var s =
                Math.sin(rad);
            var c = Math.cos(rad);
            var a10 = a[4];
            var a11 = a[5];
            var a12 = a[6];
            var a13 = a[7];
            var a20 = a[8];
            var a21 = a[9];
            var a22 = a[10];
            var a23 = a[11];
            if (a !== out) {
                out[0] = a[0];
                out[1] = a[1];
                out[2] = a[2];
                out[3] = a[3];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15]
            }
            out[4] = a10 * c + a20 * s;
            out[5] = a11 * c + a21 * s;
            out[6] = a12 * c + a22 * s;
            out[7] = a13 * c + a23 * s;
            out[8] = a20 * c - a10 * s;
            out[9] = a21 * c - a11 * s;
            out[10] = a22 * c - a12 * s;
            out[11] = a23 * c - a13 * s;
            return out
        }

        function rotateY$3(out, a, rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            var a00 = a[0];
            var a01 = a[1];
            var a02 = a[2];
            var a03 = a[3];
            var a20 = a[8];
            var a21 = a[9];
            var a22 = a[10];
            var a23 = a[11];
            if (a !== out) {
                out[4] = a[4];
                out[5] = a[5];
                out[6] = a[6];
                out[7] = a[7];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15]
            }
            out[0] = a00 * c - a20 * s;
            out[1] = a01 * c - a21 * s;
            out[2] = a02 * c - a22 * s;
            out[3] = a03 * c - a23 * s;
            out[8] = a00 * s + a20 * c;
            out[9] = a01 * s + a21 * c;
            out[10] = a02 * s + a22 * c;
            out[11] = a03 * s + a23 * c;
            return out
        }

        function rotateZ$3(out, a, rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            var a00 = a[0];
            var a01 = a[1];
            var a02 = a[2];
            var a03 = a[3];
            var a10 =
                a[4];
            var a11 = a[5];
            var a12 = a[6];
            var a13 = a[7];
            if (a !== out) {
                out[8] = a[8];
                out[9] = a[9];
                out[10] = a[10];
                out[11] = a[11];
                out[12] = a[12];
                out[13] = a[13];
                out[14] = a[14];
                out[15] = a[15]
            }
            out[0] = a00 * c + a10 * s;
            out[1] = a01 * c + a11 * s;
            out[2] = a02 * c + a12 * s;
            out[3] = a03 * c + a13 * s;
            out[4] = a10 * c - a00 * s;
            out[5] = a11 * c - a01 * s;
            out[6] = a12 * c - a02 * s;
            out[7] = a13 * c - a03 * s;
            return out
        }

        function fromTranslation$1(out, v) {
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = 1;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 1;
            out[11] = 0;
            out[12] = v[0];
            out[13] = v[1];
            out[14] =
                v[2];
            out[15] = 1;
            return out
        }

        function fromScaling(out, v) {
            out[0] = v[0];
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = v[1];
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = v[2];
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function fromRotation$1(out, rad, axis) {
            var x = axis[0],
                y = axis[1],
                z = axis[2];
            var len = Math.hypot(x, y, z);
            var s, c, t;
            if (len < EPSILON) return null;
            len = 1 / len;
            x *= len;
            y *= len;
            z *= len;
            s = Math.sin(rad);
            c = Math.cos(rad);
            t = 1 - c;
            out[0] = x * x * t + c;
            out[1] = y * x * t + z * s;
            out[2] = z * x * t - y * s;
            out[3] = 0;
            out[4] = x * y * t - z *
                s;
            out[5] = y * y * t + c;
            out[6] = z * y * t + x * s;
            out[7] = 0;
            out[8] = x * z * t + y * s;
            out[9] = y * z * t - x * s;
            out[10] = z * z * t + c;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function fromXRotation(out, rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = 1;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = c;
            out[6] = s;
            out[7] = 0;
            out[8] = 0;
            out[9] = -s;
            out[10] = c;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function fromYRotation(out, rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = c;
            out[1] = 0;
            out[2] = -s;
            out[3] = 0;
            out[4] =
                0;
            out[5] = 1;
            out[6] = 0;
            out[7] = 0;
            out[8] = s;
            out[9] = 0;
            out[10] = c;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function fromZRotation(out, rad) {
            var s = Math.sin(rad);
            var c = Math.cos(rad);
            out[0] = c;
            out[1] = s;
            out[2] = 0;
            out[3] = 0;
            out[4] = -s;
            out[5] = c;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 1;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function fromRotationTranslation$1(out, q, v) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3];
            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx = x * x2;
            var xy = x * y2;
            var xz = x * z2;
            var yy =
                y * y2;
            var yz = y * z2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;
            out[0] = 1 - (yy + zz);
            out[1] = xy + wz;
            out[2] = xz - wy;
            out[3] = 0;
            out[4] = xy - wz;
            out[5] = 1 - (xx + zz);
            out[6] = yz + wx;
            out[7] = 0;
            out[8] = xz + wy;
            out[9] = yz - wx;
            out[10] = 1 - (xx + yy);
            out[11] = 0;
            out[12] = v[0];
            out[13] = v[1];
            out[14] = v[2];
            out[15] = 1;
            return out
        }

        function fromQuat2(out, a) {
            var translation = new ARRAY_TYPE(3);
            var bx = -a[0],
                by = -a[1],
                bz = -a[2],
                bw = a[3],
                ax = a[4],
                ay = a[5],
                az = a[6],
                aw = a[7];
            var magnitude = bx * bx + by * by + bz * bz + bw * bw;
            if (magnitude > 0) {
                translation[0] = (ax * bw + aw * bx + ay * bz -
                    az * by) * 2 / magnitude;
                translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2 / magnitude;
                translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2 / magnitude
            } else {
                translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
                translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
                translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2
            }
            fromRotationTranslation$1(out, a, translation);
            return out
        }

        function getTranslation$1(out, mat) {
            out[0] = mat[12];
            out[1] = mat[13];
            out[2] = mat[14];
            return out
        }

        function getScaling(out, mat) {
            var m11 = mat[0];
            var m12 = mat[1];
            var m13 = mat[2];
            var m21 = mat[4];
            var m22 =
                mat[5];
            var m23 = mat[6];
            var m31 = mat[8];
            var m32 = mat[9];
            var m33 = mat[10];
            out[0] = Math.hypot(m11, m12, m13);
            out[1] = Math.hypot(m21, m22, m23);
            out[2] = Math.hypot(m31, m32, m33);
            return out
        }

        function getRotation(out, mat) {
            var scaling = new ARRAY_TYPE(3);
            getScaling(scaling, mat);
            var is1 = 1 / scaling[0];
            var is2 = 1 / scaling[1];
            var is3 = 1 / scaling[2];
            var sm11 = mat[0] * is1;
            var sm12 = mat[1] * is2;
            var sm13 = mat[2] * is3;
            var sm21 = mat[4] * is1;
            var sm22 = mat[5] * is2;
            var sm23 = mat[6] * is3;
            var sm31 = mat[8] * is1;
            var sm32 = mat[9] * is2;
            var sm33 = mat[10] * is3;
            var trace =
                sm11 + sm22 + sm33;
            var S = 0;
            if (trace > 0) {
                S = Math.sqrt(trace + 1) * 2;
                out[3] = .25 * S;
                out[0] = (sm23 - sm32) / S;
                out[1] = (sm31 - sm13) / S;
                out[2] = (sm12 - sm21) / S
            } else if (sm11 > sm22 && sm11 > sm33) {
                S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
                out[3] = (sm23 - sm32) / S;
                out[0] = .25 * S;
                out[1] = (sm12 + sm21) / S;
                out[2] = (sm31 + sm13) / S
            } else if (sm22 > sm33) {
                S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
                out[3] = (sm31 - sm13) / S;
                out[0] = (sm12 + sm21) / S;
                out[1] = .25 * S;
                out[2] = (sm23 + sm32) / S
            } else {
                S = Math.sqrt(1 + sm33 - sm11 - sm22) * 2;
                out[3] = (sm12 - sm21) / S;
                out[0] = (sm31 + sm13) / S;
                out[1] = (sm23 + sm32) / S;
                out[2] =
                    .25 * S
            }
            return out
        }

        function decompose(out_r, out_t, out_s, mat) {
            out_t[0] = mat[12];
            out_t[1] = mat[13];
            out_t[2] = mat[14];
            var m11 = mat[0];
            var m12 = mat[1];
            var m13 = mat[2];
            var m21 = mat[4];
            var m22 = mat[5];
            var m23 = mat[6];
            var m31 = mat[8];
            var m32 = mat[9];
            var m33 = mat[10];
            out_s[0] = Math.hypot(m11, m12, m13);
            out_s[1] = Math.hypot(m21, m22, m23);
            out_s[2] = Math.hypot(m31, m32, m33);
            var is1 = 1 / out_s[0];
            var is2 = 1 / out_s[1];
            var is3 = 1 / out_s[2];
            var sm11 = m11 * is1;
            var sm12 = m12 * is2;
            var sm13 = m13 * is3;
            var sm21 = m21 * is1;
            var sm22 = m22 * is2;
            var sm23 = m23 * is3;
            var sm31 = m31 * is1;
            var sm32 = m32 * is2;
            var sm33 = m33 * is3;
            var trace = sm11 + sm22 + sm33;
            var S = 0;
            if (trace > 0) {
                S = Math.sqrt(trace + 1) * 2;
                out_r[3] = .25 * S;
                out_r[0] = (sm23 - sm32) / S;
                out_r[1] = (sm31 - sm13) / S;
                out_r[2] = (sm12 - sm21) / S
            } else if (sm11 > sm22 && sm11 > sm33) {
                S = Math.sqrt(1 + sm11 - sm22 - sm33) * 2;
                out_r[3] = (sm23 - sm32) / S;
                out_r[0] = .25 * S;
                out_r[1] = (sm12 + sm21) / S;
                out_r[2] = (sm31 + sm13) / S
            } else if (sm22 > sm33) {
                S = Math.sqrt(1 + sm22 - sm11 - sm33) * 2;
                out_r[3] = (sm31 - sm13) / S;
                out_r[0] = (sm12 + sm21) / S;
                out_r[1] = .25 * S;
                out_r[2] = (sm23 + sm32) / S
            } else {
                S = Math.sqrt(1 +
                    sm33 - sm11 - sm22) * 2;
                out_r[3] = (sm12 - sm21) / S;
                out_r[0] = (sm31 + sm13) / S;
                out_r[1] = (sm23 + sm32) / S;
                out_r[2] = .25 * S
            }
            return out_r
        }

        function fromRotationTranslationScale(out, q, v, s) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3];
            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx = x * x2;
            var xy = x * y2;
            var xz = x * z2;
            var yy = y * y2;
            var yz = y * z2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;
            var sx = s[0];
            var sy = s[1];
            var sz = s[2];
            out[0] = (1 - (yy + zz)) * sx;
            out[1] = (xy + wz) * sx;
            out[2] = (xz - wy) * sx;
            out[3] = 0;
            out[4] = (xy - wz) * sy;
            out[5] = (1 - (xx + zz)) * sy;
            out[6] = (yz + wx) * sy;
            out[7] =
                0;
            out[8] = (xz + wy) * sz;
            out[9] = (yz - wx) * sz;
            out[10] = (1 - (xx + yy)) * sz;
            out[11] = 0;
            out[12] = v[0];
            out[13] = v[1];
            out[14] = v[2];
            out[15] = 1;
            return out
        }

        function fromRotationTranslationScaleOrigin(out, q, v, s, o) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3];
            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx = x * x2;
            var xy = x * y2;
            var xz = x * z2;
            var yy = y * y2;
            var yz = y * z2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;
            var sx = s[0];
            var sy = s[1];
            var sz = s[2];
            var ox = o[0];
            var oy = o[1];
            var oz = o[2];
            var out0 = (1 - (yy + zz)) * sx;
            var out1 = (xy + wz) * sx;
            var out2 = (xz - wy) * sx;
            var out4 =
                (xy - wz) * sy;
            var out5 = (1 - (xx + zz)) * sy;
            var out6 = (yz + wx) * sy;
            var out8 = (xz + wy) * sz;
            var out9 = (yz - wx) * sz;
            var out10 = (1 - (xx + yy)) * sz;
            out[0] = out0;
            out[1] = out1;
            out[2] = out2;
            out[3] = 0;
            out[4] = out4;
            out[5] = out5;
            out[6] = out6;
            out[7] = 0;
            out[8] = out8;
            out[9] = out9;
            out[10] = out10;
            out[11] = 0;
            out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);
            out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);
            out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);
            out[15] = 1;
            return out
        }

        function fromQuat(out, q) {
            var x = q[0],
                y = q[1],
                z = q[2],
                w = q[3];
            var x2 = x + x;
            var y2 = y + y;
            var z2 = z + z;
            var xx =
                x * x2;
            var yx = y * x2;
            var yy = y * y2;
            var zx = z * x2;
            var zy = z * y2;
            var zz = z * z2;
            var wx = w * x2;
            var wy = w * y2;
            var wz = w * z2;
            out[0] = 1 - yy - zz;
            out[1] = yx + wz;
            out[2] = zx - wy;
            out[3] = 0;
            out[4] = yx - wz;
            out[5] = 1 - xx - zz;
            out[6] = zy + wx;
            out[7] = 0;
            out[8] = zx + wy;
            out[9] = zy - wx;
            out[10] = 1 - xx - yy;
            out[11] = 0;
            out[12] = 0;
            out[13] = 0;
            out[14] = 0;
            out[15] = 1;
            return out
        }

        function frustum(out, left, right, bottom, top, near, far) {
            var rl = 1 / (right - left);
            var tb = 1 / (top - bottom);
            var nf = 1 / (near - far);
            out[0] = near * 2 * rl;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = near * 2 * tb;
            out[6] = 0;
            out[7] =
                0;
            out[8] = (right + left) * rl;
            out[9] = (top + bottom) * tb;
            out[10] = (far + near) * nf;
            out[11] = -1;
            out[12] = 0;
            out[13] = 0;
            out[14] = far * near * 2 * nf;
            out[15] = 0;
            return out
        }

        function perspectiveNO(out, fovy, aspect, near, far) {
            var f = 1 / Math.tan(fovy / 2);
            out[0] = f / aspect;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = f;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[11] = -1;
            out[12] = 0;
            out[13] = 0;
            out[15] = 0;
            if (far != null && far !== Infinity) {
                var nf = 1 / (near - far);
                out[10] = (far + near) * nf;
                out[14] = 2 * far * near * nf
            } else {
                out[10] = -1;
                out[14] = -2 * near
            }
            return out
        }
        var perspective =
            perspectiveNO;

        function perspectiveZO(out, fovy, aspect, near, far) {
            var f = 1 / Math.tan(fovy / 2);
            out[0] = f / aspect;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = f;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[11] = -1;
            out[12] = 0;
            out[13] = 0;
            out[15] = 0;
            if (far != null && far !== Infinity) {
                var nf = 1 / (near - far);
                out[10] = far * nf;
                out[14] = far * near * nf
            } else {
                out[10] = -1;
                out[14] = -near
            }
            return out
        }

        function perspectiveFromFieldOfView(out, fov, near, far) {
            var upTan = Math.tan(fov.upDegrees * Math.PI / 180);
            var downTan = Math.tan(fov.downDegrees * Math.PI / 180);
            var leftTan = Math.tan(fov.leftDegrees * Math.PI / 180);
            var rightTan = Math.tan(fov.rightDegrees * Math.PI / 180);
            var xScale = 2 / (leftTan + rightTan);
            var yScale = 2 / (upTan + downTan);
            out[0] = xScale;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = yScale;
            out[6] = 0;
            out[7] = 0;
            out[8] = -((leftTan - rightTan) * xScale * .5);
            out[9] = (upTan - downTan) * yScale * .5;
            out[10] = far / (near - far);
            out[11] = -1;
            out[12] = 0;
            out[13] = 0;
            out[14] = far * near / (near - far);
            out[15] = 0;
            return out
        }

        function orthoNO(out, left, right, bottom, top, near, far) {
            var lr = 1 / (left - right);
            var bt =
                1 / (bottom - top);
            var nf = 1 / (near - far);
            out[0] = -2 * lr;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = -2 * bt;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = 2 * nf;
            out[11] = 0;
            out[12] = (left + right) * lr;
            out[13] = (top + bottom) * bt;
            out[14] = (far + near) * nf;
            out[15] = 1;
            return out
        }
        var ortho = orthoNO;

        function orthoZO(out, left, right, bottom, top, near, far) {
            var lr = 1 / (left - right);
            var bt = 1 / (bottom - top);
            var nf = 1 / (near - far);
            out[0] = -2 * lr;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            out[4] = 0;
            out[5] = -2 * bt;
            out[6] = 0;
            out[7] = 0;
            out[8] = 0;
            out[9] = 0;
            out[10] = nf;
            out[11] = 0;
            out[12] = (left + right) * lr;
            out[13] = (top + bottom) * bt;
            out[14] = near * nf;
            out[15] = 1;
            return out
        }

        function lookAt(out, eye, center, up) {
            var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;
            var eyex = eye[0];
            var eyey = eye[1];
            var eyez = eye[2];
            var upx = up[0];
            var upy = up[1];
            var upz = up[2];
            var centerx = center[0];
            var centery = center[1];
            var centerz = center[2];
            if (Math.abs(eyex - centerx) < EPSILON && Math.abs(eyey - centery) < EPSILON && Math.abs(eyez - centerz) < EPSILON) return identity$2(out);
            z0 = eyex - centerx;
            z1 = eyey - centery;
            z2 = eyez - centerz;
            len = 1 / Math.hypot(z0, z1,
                z2);
            z0 *= len;
            z1 *= len;
            z2 *= len;
            x0 = upy * z2 - upz * z1;
            x1 = upz * z0 - upx * z2;
            x2 = upx * z1 - upy * z0;
            len = Math.hypot(x0, x1, x2);
            if (!len) {
                x0 = 0;
                x1 = 0;
                x2 = 0
            } else {
                len = 1 / len;
                x0 *= len;
                x1 *= len;
                x2 *= len
            }
            y0 = z1 * x2 - z2 * x1;
            y1 = z2 * x0 - z0 * x2;
            y2 = z0 * x1 - z1 * x0;
            len = Math.hypot(y0, y1, y2);
            if (!len) {
                y0 = 0;
                y1 = 0;
                y2 = 0
            } else {
                len = 1 / len;
                y0 *= len;
                y1 *= len;
                y2 *= len
            }
            out[0] = x0;
            out[1] = y0;
            out[2] = z0;
            out[3] = 0;
            out[4] = x1;
            out[5] = y1;
            out[6] = z1;
            out[7] = 0;
            out[8] = x2;
            out[9] = y2;
            out[10] = z2;
            out[11] = 0;
            out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
            out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
            out[14] = -(z0 *
                eyex + z1 * eyey + z2 * eyez);
            out[15] = 1;
            return out
        }

        function targetTo(out, eye, target, up) {
            var eyex = eye[0],
                eyey = eye[1],
                eyez = eye[2],
                upx = up[0],
                upy = up[1],
                upz = up[2];
            var z0 = eyex - target[0],
                z1 = eyey - target[1],
                z2 = eyez - target[2];
            var len = z0 * z0 + z1 * z1 + z2 * z2;
            if (len > 0) {
                len = 1 / Math.sqrt(len);
                z0 *= len;
                z1 *= len;
                z2 *= len
            }
            var x0 = upy * z2 - upz * z1,
                x1 = upz * z0 - upx * z2,
                x2 = upx * z1 - upy * z0;
            len = x0 * x0 + x1 * x1 + x2 * x2;
            if (len > 0) {
                len = 1 / Math.sqrt(len);
                x0 *= len;
                x1 *= len;
                x2 *= len
            }
            out[0] = x0;
            out[1] = x1;
            out[2] = x2;
            out[3] = 0;
            out[4] = z1 * x2 - z2 * x1;
            out[5] = z2 * x0 - z0 * x2;
            out[6] =
                z0 * x1 - z1 * x0;
            out[7] = 0;
            out[8] = z0;
            out[9] = z1;
            out[10] = z2;
            out[11] = 0;
            out[12] = eyex;
            out[13] = eyey;
            out[14] = eyez;
            out[15] = 1;
            return out
        }

        function str$5(a) {
            return "mat4(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ", " + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + ")"
        }

        function frob(a) {
            return Math.hypot(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15])
        }

        function add$5(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] =
                a[2] + b[2];
            out[3] = a[3] + b[3];
            out[4] = a[4] + b[4];
            out[5] = a[5] + b[5];
            out[6] = a[6] + b[6];
            out[7] = a[7] + b[7];
            out[8] = a[8] + b[8];
            out[9] = a[9] + b[9];
            out[10] = a[10] + b[10];
            out[11] = a[11] + b[11];
            out[12] = a[12] + b[12];
            out[13] = a[13] + b[13];
            out[14] = a[14] + b[14];
            out[15] = a[15] + b[15];
            return out
        }

        function subtract$3(out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];
            out[4] = a[4] - b[4];
            out[5] = a[5] - b[5];
            out[6] = a[6] - b[6];
            out[7] = a[7] - b[7];
            out[8] = a[8] - b[8];
            out[9] = a[9] - b[9];
            out[10] = a[10] - b[10];
            out[11] = a[11] - b[11];
            out[12] =
                a[12] - b[12];
            out[13] = a[13] - b[13];
            out[14] = a[14] - b[14];
            out[15] = a[15] - b[15];
            return out
        }

        function multiplyScalar(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            out[4] = a[4] * b;
            out[5] = a[5] * b;
            out[6] = a[6] * b;
            out[7] = a[7] * b;
            out[8] = a[8] * b;
            out[9] = a[9] * b;
            out[10] = a[10] * b;
            out[11] = a[11] * b;
            out[12] = a[12] * b;
            out[13] = a[13] * b;
            out[14] = a[14] * b;
            out[15] = a[15] * b;
            return out
        }

        function multiplyScalarAndAdd(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            out[3] = a[3] + b[3] * scale;
            out[4] =
                a[4] + b[4] * scale;
            out[5] = a[5] + b[5] * scale;
            out[6] = a[6] + b[6] * scale;
            out[7] = a[7] + b[7] * scale;
            out[8] = a[8] + b[8] * scale;
            out[9] = a[9] + b[9] * scale;
            out[10] = a[10] + b[10] * scale;
            out[11] = a[11] + b[11] * scale;
            out[12] = a[12] + b[12] * scale;
            out[13] = a[13] + b[13] * scale;
            out[14] = a[14] + b[14] * scale;
            out[15] = a[15] + b[15] * scale;
            return out
        }

        function exactEquals$5(a, b) {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] && a[12] ===
                b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15]
        }

        function equals$5(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var a4 = a[4],
                a5 = a[5],
                a6 = a[6],
                a7 = a[7];
            var a8 = a[8],
                a9 = a[9],
                a10 = a[10],
                a11 = a[11];
            var a12 = a[12],
                a13 = a[13],
                a14 = a[14],
                a15 = a[15];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3];
            var b4 = b[4],
                b5 = b[5],
                b6 = b[6],
                b7 = b[7];
            var b8 = b[8],
                b9 = b[9],
                b10 = b[10],
                b11 = b[11];
            var b12 = b[12],
                b13 = b[13],
                b14 = b[14],
                b15 = b[15];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1),
                Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= EPSILON * Math.max(1, Math.abs(a8), Math.abs(b8)) && Math.abs(a9 - b9) <= EPSILON * Math.max(1, Math.abs(a9),
                Math.abs(b9)) && Math.abs(a10 - b10) <= EPSILON * Math.max(1, Math.abs(a10), Math.abs(b10)) && Math.abs(a11 - b11) <= EPSILON * Math.max(1, Math.abs(a11), Math.abs(b11)) && Math.abs(a12 - b12) <= EPSILON * Math.max(1, Math.abs(a12), Math.abs(b12)) && Math.abs(a13 - b13) <= EPSILON * Math.max(1, Math.abs(a13), Math.abs(b13)) && Math.abs(a14 - b14) <= EPSILON * Math.max(1, Math.abs(a14), Math.abs(b14)) && Math.abs(a15 - b15) <= EPSILON * Math.max(1, Math.abs(a15), Math.abs(b15))
        }
        var mul$5 = multiply$5;
        var sub$3 = subtract$3;
        var mat4 = Object.freeze({
            __proto__: null,
            create: create$5,
            clone: clone$5,
            copy: copy$5,
            fromValues: fromValues$5,
            set: set$5,
            identity: identity$2,
            transpose: transpose,
            invert: invert$2,
            adjoint: adjoint,
            determinant: determinant,
            multiply: multiply$5,
            translate: translate$1,
            scale: scale$5,
            rotate: rotate$1,
            rotateX: rotateX$3,
            rotateY: rotateY$3,
            rotateZ: rotateZ$3,
            fromTranslation: fromTranslation$1,
            fromScaling: fromScaling,
            fromRotation: fromRotation$1,
            fromXRotation: fromXRotation,
            fromYRotation: fromYRotation,
            fromZRotation: fromZRotation,
            fromRotationTranslation: fromRotationTranslation$1,
            fromQuat2: fromQuat2,
            getTranslation: getTranslation$1,
            getScaling: getScaling,
            getRotation: getRotation,
            decompose: decompose,
            fromRotationTranslationScale: fromRotationTranslationScale,
            fromRotationTranslationScaleOrigin: fromRotationTranslationScaleOrigin,
            fromQuat: fromQuat,
            frustum: frustum,
            perspectiveNO: perspectiveNO,
            perspective: perspective,
            perspectiveZO: perspectiveZO,
            perspectiveFromFieldOfView: perspectiveFromFieldOfView,
            orthoNO: orthoNO,
            ortho: ortho,
            orthoZO: orthoZO,
            lookAt: lookAt,
            targetTo: targetTo,
            str: str$5,
            frob: frob,
            add: add$5,
            subtract: subtract$3,
            multiplyScalar: multiplyScalar,
            multiplyScalarAndAdd: multiplyScalarAndAdd,
            exactEquals: exactEquals$5,
            equals: equals$5,
            mul: mul$5,
            sub: sub$3
        });

        function create$4() {
            var out = new ARRAY_TYPE(3);
            if (ARRAY_TYPE != Float32Array) {
                out[0] = 0;
                out[1] = 0;
                out[2] = 0
            }
            return out
        }

        function clone$4(a) {
            var out = new ARRAY_TYPE(3);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            return out
        }

        function length$4(a) {
            var x = a[0];
            var y = a[1];
            var z = a[2];
            return Math.hypot(x, y, z)
        }

        function fromValues$4(x, y, z) {
            var out = new ARRAY_TYPE(3);
            out[0] = x;
            out[1] = y;
            out[2] = z;
            return out
        }

        function copy$4(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            return out
        }

        function set$4(out, x, y, z) {
            out[0] = x;
            out[1] = y;
            out[2] = z;
            return out
        }

        function add$4(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            return out
        }

        function subtract$2(out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            return out
        }

        function multiply$4(out, a, b) {
            out[0] = a[0] * b[0];
            out[1] = a[1] * b[1];
            out[2] = a[2] * b[2];
            return out
        }

        function divide$2(out, a, b) {
            out[0] = a[0] / b[0];
            out[1] = a[1] / b[1];
            out[2] = a[2] / b[2];
            return out
        }

        function ceil$2(out, a) {
            out[0] = Math.ceil(a[0]);
            out[1] = Math.ceil(a[1]);
            out[2] = Math.ceil(a[2]);
            return out
        }

        function floor$2(out, a) {
            out[0] = Math.floor(a[0]);
            out[1] = Math.floor(a[1]);
            out[2] = Math.floor(a[2]);
            return out
        }

        function min$2(out, a, b) {
            out[0] = Math.min(a[0], b[0]);
            out[1] = Math.min(a[1], b[1]);
            out[2] = Math.min(a[2], b[2]);
            return out
        }

        function max$2(out, a, b) {
            out[0] = Math.max(a[0], b[0]);
            out[1] = Math.max(a[1], b[1]);
            out[2] = Math.max(a[2], b[2]);
            return out
        }

        function round$2(out, a) {
            out[0] =
                Math.round(a[0]);
            out[1] = Math.round(a[1]);
            out[2] = Math.round(a[2]);
            return out
        }

        function scale$4(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            return out
        }

        function scaleAndAdd$2(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            return out
        }

        function distance$2(a, b) {
            var x = b[0] - a[0];
            var y = b[1] - a[1];
            var z = b[2] - a[2];
            return Math.hypot(x, y, z)
        }

        function squaredDistance$2(a, b) {
            var x = b[0] - a[0];
            var y = b[1] - a[1];
            var z = b[2] - a[2];
            return x * x + y * y + z * z
        }

        function squaredLength$4(a) {
            var x =
                a[0];
            var y = a[1];
            var z = a[2];
            return x * x + y * y + z * z
        }

        function negate$2(out, a) {
            out[0] = -a[0];
            out[1] = -a[1];
            out[2] = -a[2];
            return out
        }

        function inverse$2(out, a) {
            out[0] = 1 / a[0];
            out[1] = 1 / a[1];
            out[2] = 1 / a[2];
            return out
        }

        function normalize$4(out, a) {
            var x = a[0];
            var y = a[1];
            var z = a[2];
            var len = x * x + y * y + z * z;
            if (len > 0) len = 1 / Math.sqrt(len);
            out[0] = a[0] * len;
            out[1] = a[1] * len;
            out[2] = a[2] * len;
            return out
        }

        function dot$4(a, b) {
            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
        }

        function cross$2(out, a, b) {
            var ax = a[0],
                ay = a[1],
                az = a[2];
            var bx = b[0],
                by = b[1],
                bz = b[2];
            out[0] = ay * bz - az * by;
            out[1] = az * bx - ax * bz;
            out[2] = ax * by - ay * bx;
            return out
        }

        function lerp$4(out, a, b, t) {
            var ax = a[0];
            var ay = a[1];
            var az = a[2];
            out[0] = ax + t * (b[0] - ax);
            out[1] = ay + t * (b[1] - ay);
            out[2] = az + t * (b[2] - az);
            return out
        }

        function slerp$1(out, a, b, t) {
            var angle = Math.acos(Math.min(Math.max(dot$4(a, b), -1), 1));
            var sinTotal = Math.sin(angle);
            var ratioA = Math.sin((1 - t) * angle) / sinTotal;
            var ratioB = Math.sin(t * angle) / sinTotal;
            out[0] = ratioA * a[0] + ratioB * b[0];
            out[1] = ratioA * a[1] + ratioB * b[1];
            out[2] = ratioA * a[2] + ratioB * b[2];
            return out
        }

        function hermite(out, a, b, c, d, t) {
            var factorTimes2 = t * t;
            var factor1 = factorTimes2 * (2 * t - 3) + 1;
            var factor2 = factorTimes2 * (t - 2) + t;
            var factor3 = factorTimes2 * (t - 1);
            var factor4 = factorTimes2 * (3 - 2 * t);
            out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
            out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
            out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
            return out
        }

        function bezier(out, a, b, c, d, t) {
            var inverseFactor = 1 - t;
            var inverseFactorTimesTwo = inverseFactor * inverseFactor;
            var factorTimes2 =
                t * t;
            var factor1 = inverseFactorTimesTwo * inverseFactor;
            var factor2 = 3 * t * inverseFactorTimesTwo;
            var factor3 = 3 * factorTimes2 * inverseFactor;
            var factor4 = factorTimes2 * t;
            out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
            out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
            out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
            return out
        }

        function random$3(out, scale) {
            scale = scale || 1;
            var r = RANDOM() * 2 * Math.PI;
            var z = RANDOM() * 2 - 1;
            var zScale = Math.sqrt(1 - z * z) * scale;
            out[0] = Math.cos(r) * zScale;
            out[1] =
                Math.sin(r) * zScale;
            out[2] = z * scale;
            return out
        }

        function transformMat4$2(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2];
            var w = m[3] * x + m[7] * y + m[11] * z + m[15];
            w = w || 1;
            out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
            out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
            out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
            return out
        }

        function transformMat3$1(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2];
            out[0] = x * m[0] + y * m[3] + z * m[6];
            out[1] = x * m[1] + y * m[4] + z * m[7];
            out[2] = x * m[2] + y * m[5] + z * m[8];
            return out
        }

        function transformQuat$1(out, a, q) {
            var qx = q[0],
                qy = q[1],
                qz = q[2],
                qw = q[3];
            var x =
                a[0],
                y = a[1],
                z = a[2];
            var uvx = qy * z - qz * y,
                uvy = qz * x - qx * z,
                uvz = qx * y - qy * x;
            var uuvx = qy * uvz - qz * uvy,
                uuvy = qz * uvx - qx * uvz,
                uuvz = qx * uvy - qy * uvx;
            var w2 = qw * 2;
            uvx *= w2;
            uvy *= w2;
            uvz *= w2;
            uuvx *= 2;
            uuvy *= 2;
            uuvz *= 2;
            out[0] = x + uvx + uuvx;
            out[1] = y + uvy + uuvy;
            out[2] = z + uvz + uuvz;
            return out
        }

        function rotateX$2(out, a, b, rad) {
            var p = [],
                r = [];
            p[0] = a[0] - b[0];
            p[1] = a[1] - b[1];
            p[2] = a[2] - b[2];
            r[0] = p[0];
            r[1] = p[1] * Math.cos(rad) - p[2] * Math.sin(rad);
            r[2] = p[1] * Math.sin(rad) + p[2] * Math.cos(rad);
            out[0] = r[0] + b[0];
            out[1] = r[1] + b[1];
            out[2] = r[2] + b[2];
            return out
        }

        function rotateY$2(out,
            a, b, rad) {
            var p = [],
                r = [];
            p[0] = a[0] - b[0];
            p[1] = a[1] - b[1];
            p[2] = a[2] - b[2];
            r[0] = p[2] * Math.sin(rad) + p[0] * Math.cos(rad);
            r[1] = p[1];
            r[2] = p[2] * Math.cos(rad) - p[0] * Math.sin(rad);
            out[0] = r[0] + b[0];
            out[1] = r[1] + b[1];
            out[2] = r[2] + b[2];
            return out
        }

        function rotateZ$2(out, a, b, rad) {
            var p = [],
                r = [];
            p[0] = a[0] - b[0];
            p[1] = a[1] - b[1];
            p[2] = a[2] - b[2];
            r[0] = p[0] * Math.cos(rad) - p[1] * Math.sin(rad);
            r[1] = p[0] * Math.sin(rad) + p[1] * Math.cos(rad);
            r[2] = p[2];
            out[0] = r[0] + b[0];
            out[1] = r[1] + b[1];
            out[2] = r[2] + b[2];
            return out
        }

        function angle$1(a, b) {
            var ax =
                a[0],
                ay = a[1],
                az = a[2],
                bx = b[0],
                by = b[1],
                bz = b[2],
                mag = Math.sqrt((ax * ax + ay * ay + az * az) * (bx * bx + by * by + bz * bz)),
                cosine = mag && dot$4(a, b) / mag;
            return Math.acos(Math.min(Math.max(cosine, -1), 1))
        }

        function zero$2(out) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            return out
        }

        function str$4(a) {
            return "vec3(" + a[0] + ", " + a[1] + ", " + a[2] + ")"
        }

        function exactEquals$4(a, b) {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2]
        }

        function equals$4(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0),
                Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2))
        }
        var sub$2 = subtract$2;
        var mul$4 = multiply$4;
        var div$2 = divide$2;
        var dist$2 = distance$2;
        var sqrDist$2 = squaredDistance$2;
        var len$4 = length$4;
        var sqrLen$4 = squaredLength$4;
        var forEach$2 = function() {
            var vec = create$4();
            return function(a, stride, offset, count, fn, arg) {
                var i, l;
                if (!stride) stride = 3;
                if (!offset) offset = 0;
                if (count) l = Math.min(count * stride + offset, a.length);
                else l = a.length;
                for (i = offset; i < l; i += stride) {
                    vec[0] = a[i];
                    vec[1] = a[i + 1];
                    vec[2] = a[i + 2];
                    fn(vec, vec, arg);
                    a[i] = vec[0];
                    a[i + 1] = vec[1];
                    a[i + 2] = vec[2]
                }
                return a
            }
        }();
        var vec3 = Object.freeze({
            __proto__: null,
            create: create$4,
            clone: clone$4,
            length: length$4,
            fromValues: fromValues$4,
            copy: copy$4,
            set: set$4,
            add: add$4,
            subtract: subtract$2,
            multiply: multiply$4,
            divide: divide$2,
            ceil: ceil$2,
            floor: floor$2,
            min: min$2,
            max: max$2,
            round: round$2,
            scale: scale$4,
            scaleAndAdd: scaleAndAdd$2,
            distance: distance$2,
            squaredDistance: squaredDistance$2,
            squaredLength: squaredLength$4,
            negate: negate$2,
            inverse: inverse$2,
            normalize: normalize$4,
            dot: dot$4,
            cross: cross$2,
            lerp: lerp$4,
            slerp: slerp$1,
            hermite: hermite,
            bezier: bezier,
            random: random$3,
            transformMat4: transformMat4$2,
            transformMat3: transformMat3$1,
            transformQuat: transformQuat$1,
            rotateX: rotateX$2,
            rotateY: rotateY$2,
            rotateZ: rotateZ$2,
            angle: angle$1,
            zero: zero$2,
            str: str$4,
            exactEquals: exactEquals$4,
            equals: equals$4,
            sub: sub$2,
            mul: mul$4,
            div: div$2,
            dist: dist$2,
            sqrDist: sqrDist$2,
            len: len$4,
            sqrLen: sqrLen$4,
            forEach: forEach$2
        });

        function create$3() {
            var out =
                new ARRAY_TYPE(4);
            if (ARRAY_TYPE != Float32Array) {
                out[0] = 0;
                out[1] = 0;
                out[2] = 0;
                out[3] = 0
            }
            return out
        }

        function clone$3(a) {
            var out = new ARRAY_TYPE(4);
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            return out
        }

        function fromValues$3(x, y, z, w) {
            var out = new ARRAY_TYPE(4);
            out[0] = x;
            out[1] = y;
            out[2] = z;
            out[3] = w;
            return out
        }

        function copy$3(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            return out
        }

        function set$3(out, x, y, z, w) {
            out[0] = x;
            out[1] = y;
            out[2] = z;
            out[3] = w;
            return out
        }

        function add$3(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            out[3] = a[3] + b[3];
            return out
        }

        function subtract$1(out, a, b) {
            out[0] = a[0] - b[0];
            out[1] = a[1] - b[1];
            out[2] = a[2] - b[2];
            out[3] = a[3] - b[3];
            return out
        }

        function multiply$3(out, a, b) {
            out[0] = a[0] * b[0];
            out[1] = a[1] * b[1];
            out[2] = a[2] * b[2];
            out[3] = a[3] * b[3];
            return out
        }

        function divide$1(out, a, b) {
            out[0] = a[0] / b[0];
            out[1] = a[1] / b[1];
            out[2] = a[2] / b[2];
            out[3] = a[3] / b[3];
            return out
        }

        function ceil$1(out, a) {
            out[0] = Math.ceil(a[0]);
            out[1] = Math.ceil(a[1]);
            out[2] = Math.ceil(a[2]);
            out[3] = Math.ceil(a[3]);
            return out
        }

        function floor$1(out, a) {
            out[0] = Math.floor(a[0]);
            out[1] = Math.floor(a[1]);
            out[2] = Math.floor(a[2]);
            out[3] = Math.floor(a[3]);
            return out
        }

        function min$1(out, a, b) {
            out[0] = Math.min(a[0], b[0]);
            out[1] = Math.min(a[1], b[1]);
            out[2] = Math.min(a[2], b[2]);
            out[3] = Math.min(a[3], b[3]);
            return out
        }

        function max$1(out, a, b) {
            out[0] = Math.max(a[0], b[0]);
            out[1] = Math.max(a[1], b[1]);
            out[2] = Math.max(a[2], b[2]);
            out[3] = Math.max(a[3], b[3]);
            return out
        }

        function round$1(out, a) {
            out[0] = Math.round(a[0]);
            out[1] = Math.round(a[1]);
            out[2] = Math.round(a[2]);
            out[3] = Math.round(a[3]);
            return out
        }

        function scale$3(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            return out
        }

        function scaleAndAdd$1(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            out[2] = a[2] + b[2] * scale;
            out[3] = a[3] + b[3] * scale;
            return out
        }

        function distance$1(a, b) {
            var x = b[0] - a[0];
            var y = b[1] - a[1];
            var z = b[2] - a[2];
            var w = b[3] - a[3];
            return Math.hypot(x, y, z, w)
        }

        function squaredDistance$1(a, b) {
            var x = b[0] - a[0];
            var y = b[1] - a[1];
            var z = b[2] - a[2];
            var w = b[3] - a[3];
            return x * x + y * y + z * z + w *
                w
        }

        function length$3(a) {
            var x = a[0];
            var y = a[1];
            var z = a[2];
            var w = a[3];
            return Math.hypot(x, y, z, w)
        }

        function squaredLength$3(a) {
            var x = a[0];
            var y = a[1];
            var z = a[2];
            var w = a[3];
            return x * x + y * y + z * z + w * w
        }

        function negate$1(out, a) {
            out[0] = -a[0];
            out[1] = -a[1];
            out[2] = -a[2];
            out[3] = -a[3];
            return out
        }

        function inverse$1(out, a) {
            out[0] = 1 / a[0];
            out[1] = 1 / a[1];
            out[2] = 1 / a[2];
            out[3] = 1 / a[3];
            return out
        }

        function normalize$3(out, a) {
            var x = a[0];
            var y = a[1];
            var z = a[2];
            var w = a[3];
            var len = x * x + y * y + z * z + w * w;
            if (len > 0) len = 1 / Math.sqrt(len);
            out[0] =
                x * len;
            out[1] = y * len;
            out[2] = z * len;
            out[3] = w * len;
            return out
        }

        function dot$3(a, b) {
            return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3]
        }

        function cross$1(out, u, v, w) {
            var A = v[0] * w[1] - v[1] * w[0],
                B = v[0] * w[2] - v[2] * w[0],
                C = v[0] * w[3] - v[3] * w[0],
                D = v[1] * w[2] - v[2] * w[1],
                E = v[1] * w[3] - v[3] * w[1],
                F = v[2] * w[3] - v[3] * w[2];
            var G = u[0];
            var H = u[1];
            var I = u[2];
            var J = u[3];
            out[0] = H * F - I * E + J * D;
            out[1] = -(G * F) + I * C - J * B;
            out[2] = G * E - H * C + J * A;
            out[3] = -(G * D) + H * B - I * A;
            return out
        }

        function lerp$3(out, a, b, t) {
            var ax = a[0];
            var ay = a[1];
            var az = a[2];
            var aw = a[3];
            out[0] =
                ax + t * (b[0] - ax);
            out[1] = ay + t * (b[1] - ay);
            out[2] = az + t * (b[2] - az);
            out[3] = aw + t * (b[3] - aw);
            return out
        }

        function random$2(out, scale) {
            scale = scale || 1;
            var v1, v2, v3, v4;
            var s1, s2;
            do {
                v1 = RANDOM() * 2 - 1;
                v2 = RANDOM() * 2 - 1;
                s1 = v1 * v1 + v2 * v2
            } while (s1 >= 1);
            do {
                v3 = RANDOM() * 2 - 1;
                v4 = RANDOM() * 2 - 1;
                s2 = v3 * v3 + v4 * v4
            } while (s2 >= 1);
            var d = Math.sqrt((1 - s1) / s2);
            out[0] = scale * v1;
            out[1] = scale * v2;
            out[2] = scale * v3 * d;
            out[3] = scale * v4 * d;
            return out
        }

        function transformMat4$1(out, a, m) {
            var x = a[0],
                y = a[1],
                z = a[2],
                w = a[3];
            out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
            out[1] =
                m[1] * x + m[5] * y + m[9] * z + m[13] * w;
            out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
            out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
            return out
        }

        function transformQuat(out, a, q) {
            var x = a[0],
                y = a[1],
                z = a[2];
            var qx = q[0],
                qy = q[1],
                qz = q[2],
                qw = q[3];
            var ix = qw * x + qy * z - qz * y;
            var iy = qw * y + qz * x - qx * z;
            var iz = qw * z + qx * y - qy * x;
            var iw = -qx * x - qy * y - qz * z;
            out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
            out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
            out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
            out[3] = a[3];
            return out
        }

        function zero$1(out) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 0;
            return out
        }

        function str$3(a) {
            return "vec4(" +
                a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")"
        }

        function exactEquals$3(a, b) {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3]
        }

        function equals$3(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3))
        }
        var sub$1 = subtract$1;
        var mul$3 = multiply$3;
        var div$1 = divide$1;
        var dist$1 = distance$1;
        var sqrDist$1 = squaredDistance$1;
        var len$3 = length$3;
        var sqrLen$3 = squaredLength$3;
        var forEach$1 = function() {
            var vec = create$3();
            return function(a, stride, offset, count, fn, arg) {
                var i, l;
                if (!stride) stride = 4;
                if (!offset) offset = 0;
                if (count) l = Math.min(count * stride + offset, a.length);
                else l = a.length;
                for (i = offset; i < l; i += stride) {
                    vec[0] = a[i];
                    vec[1] = a[i + 1];
                    vec[2] = a[i + 2];
                    vec[3] = a[i + 3];
                    fn(vec, vec, arg);
                    a[i] = vec[0];
                    a[i + 1] = vec[1];
                    a[i + 2] = vec[2];
                    a[i + 3] = vec[3]
                }
                return a
            }
        }();
        var vec4 = Object.freeze({
            __proto__: null,
            create: create$3,
            clone: clone$3,
            fromValues: fromValues$3,
            copy: copy$3,
            set: set$3,
            add: add$3,
            subtract: subtract$1,
            multiply: multiply$3,
            divide: divide$1,
            ceil: ceil$1,
            floor: floor$1,
            min: min$1,
            max: max$1,
            round: round$1,
            scale: scale$3,
            scaleAndAdd: scaleAndAdd$1,
            distance: distance$1,
            squaredDistance: squaredDistance$1,
            length: length$3,
            squaredLength: squaredLength$3,
            negate: negate$1,
            inverse: inverse$1,
            normalize: normalize$3,
            dot: dot$3,
            cross: cross$1,
            lerp: lerp$3,
            random: random$2,
            transformMat4: transformMat4$1,
            transformQuat: transformQuat,
            zero: zero$1,
            str: str$3,
            exactEquals: exactEquals$3,
            equals: equals$3,
            sub: sub$1,
            mul: mul$3,
            div: div$1,
            dist: dist$1,
            sqrDist: sqrDist$1,
            len: len$3,
            sqrLen: sqrLen$3,
            forEach: forEach$1
        });

        function create$2() {
            var out = new ARRAY_TYPE(4);
            if (ARRAY_TYPE != Float32Array) {
                out[0] = 0;
                out[1] = 0;
                out[2] = 0
            }
            out[3] = 1;
            return out
        }

        function identity$1(out) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            return out
        }

        function setAxisAngle(out, axis, rad) {
            rad = rad * .5;
            var s = Math.sin(rad);
            out[0] = s * axis[0];
            out[1] = s * axis[1];
            out[2] = s *
                axis[2];
            out[3] = Math.cos(rad);
            return out
        }

        function getAxisAngle(out_axis, q) {
            var rad = Math.acos(q[3]) * 2;
            var s = Math.sin(rad / 2);
            if (s > EPSILON) {
                out_axis[0] = q[0] / s;
                out_axis[1] = q[1] / s;
                out_axis[2] = q[2] / s
            } else {
                out_axis[0] = 1;
                out_axis[1] = 0;
                out_axis[2] = 0
            }
            return rad
        }

        function getAngle(a, b) {
            var dotproduct = dot$2(a, b);
            return Math.acos(2 * dotproduct * dotproduct - 1)
        }

        function multiply$2(out, a, b) {
            var ax = a[0],
                ay = a[1],
                az = a[2],
                aw = a[3];
            var bx = b[0],
                by = b[1],
                bz = b[2],
                bw = b[3];
            out[0] = ax * bw + aw * bx + ay * bz - az * by;
            out[1] = ay * bw + aw * by + az * bx -
                ax * bz;
            out[2] = az * bw + aw * bz + ax * by - ay * bx;
            out[3] = aw * bw - ax * bx - ay * by - az * bz;
            return out
        }

        function rotateX$1(out, a, rad) {
            rad *= .5;
            var ax = a[0],
                ay = a[1],
                az = a[2],
                aw = a[3];
            var bx = Math.sin(rad),
                bw = Math.cos(rad);
            out[0] = ax * bw + aw * bx;
            out[1] = ay * bw + az * bx;
            out[2] = az * bw - ay * bx;
            out[3] = aw * bw - ax * bx;
            return out
        }

        function rotateY$1(out, a, rad) {
            rad *= .5;
            var ax = a[0],
                ay = a[1],
                az = a[2],
                aw = a[3];
            var by = Math.sin(rad),
                bw = Math.cos(rad);
            out[0] = ax * bw - az * by;
            out[1] = ay * bw + aw * by;
            out[2] = az * bw + ax * by;
            out[3] = aw * bw - ay * by;
            return out
        }

        function rotateZ$1(out, a,
            rad) {
            rad *= .5;
            var ax = a[0],
                ay = a[1],
                az = a[2],
                aw = a[3];
            var bz = Math.sin(rad),
                bw = Math.cos(rad);
            out[0] = ax * bw + ay * bz;
            out[1] = ay * bw - ax * bz;
            out[2] = az * bw + aw * bz;
            out[3] = aw * bw - az * bz;
            return out
        }

        function calculateW(out, a) {
            var x = a[0],
                y = a[1],
                z = a[2];
            out[0] = x;
            out[1] = y;
            out[2] = z;
            out[3] = Math.sqrt(Math.abs(1 - x * x - y * y - z * z));
            return out
        }

        function exp(out, a) {
            var x = a[0],
                y = a[1],
                z = a[2],
                w = a[3];
            var r = Math.sqrt(x * x + y * y + z * z);
            var et = Math.exp(w);
            var s = r > 0 ? et * Math.sin(r) / r : 0;
            out[0] = x * s;
            out[1] = y * s;
            out[2] = z * s;
            out[3] = et * Math.cos(r);
            return out
        }

        function ln(out, a) {
            var x = a[0],
                y = a[1],
                z = a[2],
                w = a[3];
            var r = Math.sqrt(x * x + y * y + z * z);
            var t = r > 0 ? Math.atan2(r, w) / r : 0;
            out[0] = x * t;
            out[1] = y * t;
            out[2] = z * t;
            out[3] = .5 * Math.log(x * x + y * y + z * z + w * w);
            return out
        }

        function pow(out, a, b) {
            ln(out, a);
            scale$2(out, out, b);
            exp(out, out);
            return out
        }

        function slerp(out, a, b, t) {
            var ax = a[0],
                ay = a[1],
                az = a[2],
                aw = a[3];
            var bx = b[0],
                by = b[1],
                bz = b[2],
                bw = b[3];
            var omega, cosom, sinom, scale0, scale1;
            cosom = ax * bx + ay * by + az * bz + aw * bw;
            if (cosom < 0) {
                cosom = -cosom;
                bx = -bx;
                by = -by;
                bz = -bz;
                bw = -bw
            }
            if (1 - cosom > EPSILON) {
                omega =
                    Math.acos(cosom);
                sinom = Math.sin(omega);
                scale0 = Math.sin((1 - t) * omega) / sinom;
                scale1 = Math.sin(t * omega) / sinom
            } else {
                scale0 = 1 - t;
                scale1 = t
            }
            out[0] = scale0 * ax + scale1 * bx;
            out[1] = scale0 * ay + scale1 * by;
            out[2] = scale0 * az + scale1 * bz;
            out[3] = scale0 * aw + scale1 * bw;
            return out
        }

        function random$1(out) {
            var u1 = RANDOM();
            var u2 = RANDOM();
            var u3 = RANDOM();
            var sqrt1MinusU1 = Math.sqrt(1 - u1);
            var sqrtU1 = Math.sqrt(u1);
            out[0] = sqrt1MinusU1 * Math.sin(2 * Math.PI * u2);
            out[1] = sqrt1MinusU1 * Math.cos(2 * Math.PI * u2);
            out[2] = sqrtU1 * Math.sin(2 * Math.PI * u3);
            out[3] = sqrtU1 * Math.cos(2 * Math.PI * u3);
            return out
        }

        function invert$1(out, a) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3];
            var dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;
            var invDot = dot ? 1 / dot : 0;
            out[0] = -a0 * invDot;
            out[1] = -a1 * invDot;
            out[2] = -a2 * invDot;
            out[3] = a3 * invDot;
            return out
        }

        function conjugate$1(out, a) {
            out[0] = -a[0];
            out[1] = -a[1];
            out[2] = -a[2];
            out[3] = a[3];
            return out
        }

        function fromMat3(out, m) {
            var fTrace = m[0] + m[4] + m[8];
            var fRoot;
            if (fTrace > 0) {
                fRoot = Math.sqrt(fTrace + 1);
                out[3] = .5 * fRoot;
                fRoot = .5 / fRoot;
                out[0] = (m[5] - m[7]) * fRoot;
                out[1] = (m[6] -
                    m[2]) * fRoot;
                out[2] = (m[1] - m[3]) * fRoot
            } else {
                var i = 0;
                if (m[4] > m[0]) i = 1;
                if (m[8] > m[i * 3 + i]) i = 2;
                var j = (i + 1) % 3;
                var k = (i + 2) % 3;
                fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1);
                out[i] = .5 * fRoot;
                fRoot = .5 / fRoot;
                out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;
                out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;
                out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot
            }
            return out
        }

        function fromEuler(out, x, y, z) {
            var order = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ANGLE_ORDER;
            var halfToRad = Math.PI / 360;
            x *= halfToRad;
            z *= halfToRad;
            y *= halfToRad;
            var sx = Math.sin(x);
            var cx =
                Math.cos(x);
            var sy = Math.sin(y);
            var cy = Math.cos(y);
            var sz = Math.sin(z);
            var cz = Math.cos(z);
            switch (order) {
                case "xyz":
                    out[0] = sx * cy * cz + cx * sy * sz;
                    out[1] = cx * sy * cz - sx * cy * sz;
                    out[2] = cx * cy * sz + sx * sy * cz;
                    out[3] = cx * cy * cz - sx * sy * sz;
                    break;
                case "xzy":
                    out[0] = sx * cy * cz - cx * sy * sz;
                    out[1] = cx * sy * cz - sx * cy * sz;
                    out[2] = cx * cy * sz + sx * sy * cz;
                    out[3] = cx * cy * cz + sx * sy * sz;
                    break;
                case "yxz":
                    out[0] = sx * cy * cz + cx * sy * sz;
                    out[1] = cx * sy * cz - sx * cy * sz;
                    out[2] = cx * cy * sz - sx * sy * cz;
                    out[3] = cx * cy * cz + sx * sy * sz;
                    break;
                case "yzx":
                    out[0] = sx * cy * cz + cx * sy * sz;
                    out[1] = cx * sy *
                        cz + sx * cy * sz;
                    out[2] = cx * cy * sz - sx * sy * cz;
                    out[3] = cx * cy * cz - sx * sy * sz;
                    break;
                case "zxy":
                    out[0] = sx * cy * cz - cx * sy * sz;
                    out[1] = cx * sy * cz + sx * cy * sz;
                    out[2] = cx * cy * sz + sx * sy * cz;
                    out[3] = cx * cy * cz - sx * sy * sz;
                    break;
                case "zyx":
                    out[0] = sx * cy * cz - cx * sy * sz;
                    out[1] = cx * sy * cz + sx * cy * sz;
                    out[2] = cx * cy * sz - sx * sy * cz;
                    out[3] = cx * cy * cz + sx * sy * sz;
                    break;
                default:
                    throw new Error("Unknown angle order " + order);
            }
            return out
        }

        function str$2(a) {
            return "quat(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ")"
        }
        var clone$2 = clone$3;
        var fromValues$2 = fromValues$3;
        var copy$2 = copy$3;
        var set$2 = set$3;
        var add$2 = add$3;
        var mul$2 = multiply$2;
        var scale$2 = scale$3;
        var dot$2 = dot$3;
        var lerp$2 = lerp$3;
        var length$2 = length$3;
        var len$2 = length$2;
        var squaredLength$2 = squaredLength$3;
        var sqrLen$2 = squaredLength$2;
        var normalize$2 = normalize$3;
        var exactEquals$2 = exactEquals$3;

        function equals$2(a, b) {
            return Math.abs(dot$3(a, b)) >= 1 - EPSILON
        }
        var rotationTo = function() {
            var tmpvec3 = create$4();
            var xUnitVec3 = fromValues$4(1, 0, 0);
            var yUnitVec3 = fromValues$4(0, 1, 0);
            return function(out, a, b) {
                var dot = dot$4(a, b);
                if (dot <
                    -.999999) {
                    cross$2(tmpvec3, xUnitVec3, a);
                    if (len$4(tmpvec3) < 1E-6) cross$2(tmpvec3, yUnitVec3, a);
                    normalize$4(tmpvec3, tmpvec3);
                    setAxisAngle(out, tmpvec3, Math.PI);
                    return out
                } else if (dot > .999999) {
                    out[0] = 0;
                    out[1] = 0;
                    out[2] = 0;
                    out[3] = 1;
                    return out
                } else {
                    cross$2(tmpvec3, a, b);
                    out[0] = tmpvec3[0];
                    out[1] = tmpvec3[1];
                    out[2] = tmpvec3[2];
                    out[3] = 1 + dot;
                    return normalize$2(out, out)
                }
            }
        }();
        var sqlerp = function() {
            var temp1 = create$2();
            var temp2 = create$2();
            return function(out, a, b, c, d, t) {
                slerp(temp1, a, d, t);
                slerp(temp2, b, c, t);
                slerp(out,
                    temp1, temp2, 2 * t * (1 - t));
                return out
            }
        }();
        var setAxes = function() {
            var matr = create$6();
            return function(out, view, right, up) {
                matr[0] = right[0];
                matr[3] = right[1];
                matr[6] = right[2];
                matr[1] = up[0];
                matr[4] = up[1];
                matr[7] = up[2];
                matr[2] = -view[0];
                matr[5] = -view[1];
                matr[8] = -view[2];
                return normalize$2(out, fromMat3(out, matr))
            }
        }();
        var quat = Object.freeze({
            __proto__: null,
            create: create$2,
            identity: identity$1,
            setAxisAngle: setAxisAngle,
            getAxisAngle: getAxisAngle,
            getAngle: getAngle,
            multiply: multiply$2,
            rotateX: rotateX$1,
            rotateY: rotateY$1,
            rotateZ: rotateZ$1,
            calculateW: calculateW,
            exp: exp,
            ln: ln,
            pow: pow,
            slerp: slerp,
            random: random$1,
            invert: invert$1,
            conjugate: conjugate$1,
            fromMat3: fromMat3,
            fromEuler: fromEuler,
            str: str$2,
            clone: clone$2,
            fromValues: fromValues$2,
            copy: copy$2,
            set: set$2,
            add: add$2,
            mul: mul$2,
            scale: scale$2,
            dot: dot$2,
            lerp: lerp$2,
            length: length$2,
            len: len$2,
            squaredLength: squaredLength$2,
            sqrLen: sqrLen$2,
            normalize: normalize$2,
            exactEquals: exactEquals$2,
            equals: equals$2,
            rotationTo: rotationTo,
            sqlerp: sqlerp,
            setAxes: setAxes
        });

        function create$1() {
            var dq =
                new ARRAY_TYPE(8);
            if (ARRAY_TYPE != Float32Array) {
                dq[0] = 0;
                dq[1] = 0;
                dq[2] = 0;
                dq[4] = 0;
                dq[5] = 0;
                dq[6] = 0;
                dq[7] = 0
            }
            dq[3] = 1;
            return dq
        }

        function clone$1(a) {
            var dq = new ARRAY_TYPE(8);
            dq[0] = a[0];
            dq[1] = a[1];
            dq[2] = a[2];
            dq[3] = a[3];
            dq[4] = a[4];
            dq[5] = a[5];
            dq[6] = a[6];
            dq[7] = a[7];
            return dq
        }

        function fromValues$1(x1, y1, z1, w1, x2, y2, z2, w2) {
            var dq = new ARRAY_TYPE(8);
            dq[0] = x1;
            dq[1] = y1;
            dq[2] = z1;
            dq[3] = w1;
            dq[4] = x2;
            dq[5] = y2;
            dq[6] = z2;
            dq[7] = w2;
            return dq
        }

        function fromRotationTranslationValues(x1, y1, z1, w1, x2, y2, z2) {
            var dq = new ARRAY_TYPE(8);
            dq[0] = x1;
            dq[1] = y1;
            dq[2] = z1;
            dq[3] = w1;
            var ax = x2 * .5,
                ay = y2 * .5,
                az = z2 * .5;
            dq[4] = ax * w1 + ay * z1 - az * y1;
            dq[5] = ay * w1 + az * x1 - ax * z1;
            dq[6] = az * w1 + ax * y1 - ay * x1;
            dq[7] = -ax * x1 - ay * y1 - az * z1;
            return dq
        }

        function fromRotationTranslation(out, q, t) {
            var ax = t[0] * .5,
                ay = t[1] * .5,
                az = t[2] * .5,
                bx = q[0],
                by = q[1],
                bz = q[2],
                bw = q[3];
            out[0] = bx;
            out[1] = by;
            out[2] = bz;
            out[3] = bw;
            out[4] = ax * bw + ay * bz - az * by;
            out[5] = ay * bw + az * bx - ax * bz;
            out[6] = az * bw + ax * by - ay * bx;
            out[7] = -ax * bx - ay * by - az * bz;
            return out
        }

        function fromTranslation(out, t) {
            out[0] = 0;
            out[1] = 0;
            out[2] = 0;
            out[3] =
                1;
            out[4] = t[0] * .5;
            out[5] = t[1] * .5;
            out[6] = t[2] * .5;
            out[7] = 0;
            return out
        }

        function fromRotation(out, q) {
            out[0] = q[0];
            out[1] = q[1];
            out[2] = q[2];
            out[3] = q[3];
            out[4] = 0;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            return out
        }

        function fromMat4(out, a) {
            var outer = create$2();
            getRotation(outer, a);
            var t = new ARRAY_TYPE(3);
            getTranslation$1(t, a);
            fromRotationTranslation(out, outer, t);
            return out
        }

        function copy$1(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            out[2] = a[2];
            out[3] = a[3];
            out[4] = a[4];
            out[5] = a[5];
            out[6] = a[6];
            out[7] = a[7];
            return out
        }

        function identity(out) {
            out[0] =
                0;
            out[1] = 0;
            out[2] = 0;
            out[3] = 1;
            out[4] = 0;
            out[5] = 0;
            out[6] = 0;
            out[7] = 0;
            return out
        }

        function set$1(out, x1, y1, z1, w1, x2, y2, z2, w2) {
            out[0] = x1;
            out[1] = y1;
            out[2] = z1;
            out[3] = w1;
            out[4] = x2;
            out[5] = y2;
            out[6] = z2;
            out[7] = w2;
            return out
        }
        var getReal = copy$2;

        function getDual(out, a) {
            out[0] = a[4];
            out[1] = a[5];
            out[2] = a[6];
            out[3] = a[7];
            return out
        }
        var setReal = copy$2;

        function setDual(out, q) {
            out[4] = q[0];
            out[5] = q[1];
            out[6] = q[2];
            out[7] = q[3];
            return out
        }

        function getTranslation(out, a) {
            var ax = a[4],
                ay = a[5],
                az = a[6],
                aw = a[7],
                bx = -a[0],
                by = -a[1],
                bz = -a[2],
                bw = a[3];
            out[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;
            out[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;
            out[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;
            return out
        }

        function translate(out, a, v) {
            var ax1 = a[0],
                ay1 = a[1],
                az1 = a[2],
                aw1 = a[3],
                bx1 = v[0] * .5,
                by1 = v[1] * .5,
                bz1 = v[2] * .5,
                ax2 = a[4],
                ay2 = a[5],
                az2 = a[6],
                aw2 = a[7];
            out[0] = ax1;
            out[1] = ay1;
            out[2] = az1;
            out[3] = aw1;
            out[4] = aw1 * bx1 + ay1 * bz1 - az1 * by1 + ax2;
            out[5] = aw1 * by1 + az1 * bx1 - ax1 * bz1 + ay2;
            out[6] = aw1 * bz1 + ax1 * by1 - ay1 * bx1 + az2;
            out[7] = -ax1 * bx1 - ay1 * by1 - az1 * bz1 + aw2;
            return out
        }

        function rotateX(out, a, rad) {
            var bx = -a[0],
                by = -a[1],
                bz = -a[2],
                bw = a[3],
                ax = a[4],
                ay = a[5],
                az = a[6],
                aw = a[7],
                ax1 = ax * bw + aw * bx + ay * bz - az * by,
                ay1 = ay * bw + aw * by + az * bx - ax * bz,
                az1 = az * bw + aw * bz + ax * by - ay * bx,
                aw1 = aw * bw - ax * bx - ay * by - az * bz;
            rotateX$1(out, a, rad);
            bx = out[0];
            by = out[1];
            bz = out[2];
            bw = out[3];
            out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
            out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
            out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
            out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
            return out
        }

        function rotateY(out, a, rad) {
            var bx = -a[0],
                by = -a[1],
                bz = -a[2],
                bw = a[3],
                ax = a[4],
                ay = a[5],
                az = a[6],
                aw = a[7],
                ax1 = ax * bw + aw * bx +
                ay * bz - az * by,
                ay1 = ay * bw + aw * by + az * bx - ax * bz,
                az1 = az * bw + aw * bz + ax * by - ay * bx,
                aw1 = aw * bw - ax * bx - ay * by - az * bz;
            rotateY$1(out, a, rad);
            bx = out[0];
            by = out[1];
            bz = out[2];
            bw = out[3];
            out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
            out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
            out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
            out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
            return out
        }

        function rotateZ(out, a, rad) {
            var bx = -a[0],
                by = -a[1],
                bz = -a[2],
                bw = a[3],
                ax = a[4],
                ay = a[5],
                az = a[6],
                aw = a[7],
                ax1 = ax * bw + aw * bx + ay * bz - az * by,
                ay1 = ay * bw + aw * by + az * bx - ax * bz,
                az1 = az * bw + aw * bz + ax * by - ay * bx,
                aw1 = aw * bw -
                ax * bx - ay * by - az * bz;
            rotateZ$1(out, a, rad);
            bx = out[0];
            by = out[1];
            bz = out[2];
            bw = out[3];
            out[4] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
            out[5] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
            out[6] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
            out[7] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
            return out
        }

        function rotateByQuatAppend(out, a, q) {
            var qx = q[0],
                qy = q[1],
                qz = q[2],
                qw = q[3],
                ax = a[0],
                ay = a[1],
                az = a[2],
                aw = a[3];
            out[0] = ax * qw + aw * qx + ay * qz - az * qy;
            out[1] = ay * qw + aw * qy + az * qx - ax * qz;
            out[2] = az * qw + aw * qz + ax * qy - ay * qx;
            out[3] = aw * qw - ax * qx - ay * qy - az * qz;
            ax = a[4];
            ay = a[5];
            az = a[6];
            aw = a[7];
            out[4] = ax *
                qw + aw * qx + ay * qz - az * qy;
            out[5] = ay * qw + aw * qy + az * qx - ax * qz;
            out[6] = az * qw + aw * qz + ax * qy - ay * qx;
            out[7] = aw * qw - ax * qx - ay * qy - az * qz;
            return out
        }

        function rotateByQuatPrepend(out, q, a) {
            var qx = q[0],
                qy = q[1],
                qz = q[2],
                qw = q[3],
                bx = a[0],
                by = a[1],
                bz = a[2],
                bw = a[3];
            out[0] = qx * bw + qw * bx + qy * bz - qz * by;
            out[1] = qy * bw + qw * by + qz * bx - qx * bz;
            out[2] = qz * bw + qw * bz + qx * by - qy * bx;
            out[3] = qw * bw - qx * bx - qy * by - qz * bz;
            bx = a[4];
            by = a[5];
            bz = a[6];
            bw = a[7];
            out[4] = qx * bw + qw * bx + qy * bz - qz * by;
            out[5] = qy * bw + qw * by + qz * bx - qx * bz;
            out[6] = qz * bw + qw * bz + qx * by - qy * bx;
            out[7] = qw * bw - qx * bx - qy *
                by - qz * bz;
            return out
        }

        function rotateAroundAxis(out, a, axis, rad) {
            if (Math.abs(rad) < EPSILON) return copy$1(out, a);
            var axisLength = Math.hypot(axis[0], axis[1], axis[2]);
            rad = rad * .5;
            var s = Math.sin(rad);
            var bx = s * axis[0] / axisLength;
            var by = s * axis[1] / axisLength;
            var bz = s * axis[2] / axisLength;
            var bw = Math.cos(rad);
            var ax1 = a[0],
                ay1 = a[1],
                az1 = a[2],
                aw1 = a[3];
            out[0] = ax1 * bw + aw1 * bx + ay1 * bz - az1 * by;
            out[1] = ay1 * bw + aw1 * by + az1 * bx - ax1 * bz;
            out[2] = az1 * bw + aw1 * bz + ax1 * by - ay1 * bx;
            out[3] = aw1 * bw - ax1 * bx - ay1 * by - az1 * bz;
            var ax = a[4],
                ay = a[5],
                az = a[6],
                aw = a[7];
            out[4] = ax * bw + aw * bx + ay * bz - az * by;
            out[5] = ay * bw + aw * by + az * bx - ax * bz;
            out[6] = az * bw + aw * bz + ax * by - ay * bx;
            out[7] = aw * bw - ax * bx - ay * by - az * bz;
            return out
        }

        function add$1(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            out[2] = a[2] + b[2];
            out[3] = a[3] + b[3];
            out[4] = a[4] + b[4];
            out[5] = a[5] + b[5];
            out[6] = a[6] + b[6];
            out[7] = a[7] + b[7];
            return out
        }

        function multiply$1(out, a, b) {
            var ax0 = a[0],
                ay0 = a[1],
                az0 = a[2],
                aw0 = a[3],
                bx1 = b[4],
                by1 = b[5],
                bz1 = b[6],
                bw1 = b[7],
                ax1 = a[4],
                ay1 = a[5],
                az1 = a[6],
                aw1 = a[7],
                bx0 = b[0],
                by0 = b[1],
                bz0 = b[2],
                bw0 = b[3];
            out[0] = ax0 *
                bw0 + aw0 * bx0 + ay0 * bz0 - az0 * by0;
            out[1] = ay0 * bw0 + aw0 * by0 + az0 * bx0 - ax0 * bz0;
            out[2] = az0 * bw0 + aw0 * bz0 + ax0 * by0 - ay0 * bx0;
            out[3] = aw0 * bw0 - ax0 * bx0 - ay0 * by0 - az0 * bz0;
            out[4] = ax0 * bw1 + aw0 * bx1 + ay0 * bz1 - az0 * by1 + ax1 * bw0 + aw1 * bx0 + ay1 * bz0 - az1 * by0;
            out[5] = ay0 * bw1 + aw0 * by1 + az0 * bx1 - ax0 * bz1 + ay1 * bw0 + aw1 * by0 + az1 * bx0 - ax1 * bz0;
            out[6] = az0 * bw1 + aw0 * bz1 + ax0 * by1 - ay0 * bx1 + az1 * bw0 + aw1 * bz0 + ax1 * by0 - ay1 * bx0;
            out[7] = aw0 * bw1 - ax0 * bx1 - ay0 * by1 - az0 * bz1 + aw1 * bw0 - ax1 * bx0 - ay1 * by0 - az1 * bz0;
            return out
        }
        var mul$1 = multiply$1;

        function scale$1(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            out[2] = a[2] * b;
            out[3] = a[3] * b;
            out[4] = a[4] * b;
            out[5] = a[5] * b;
            out[6] = a[6] * b;
            out[7] = a[7] * b;
            return out
        }
        var dot$1 = dot$2;

        function lerp$1(out, a, b, t) {
            var mt = 1 - t;
            if (dot$1(a, b) < 0) t = -t;
            out[0] = a[0] * mt + b[0] * t;
            out[1] = a[1] * mt + b[1] * t;
            out[2] = a[2] * mt + b[2] * t;
            out[3] = a[3] * mt + b[3] * t;
            out[4] = a[4] * mt + b[4] * t;
            out[5] = a[5] * mt + b[5] * t;
            out[6] = a[6] * mt + b[6] * t;
            out[7] = a[7] * mt + b[7] * t;
            return out
        }

        function invert(out, a) {
            var sqlen = squaredLength$1(a);
            out[0] = -a[0] / sqlen;
            out[1] = -a[1] / sqlen;
            out[2] = -a[2] / sqlen;
            out[3] = a[3] / sqlen;
            out[4] = -a[4] / sqlen;
            out[5] = -a[5] / sqlen;
            out[6] = -a[6] / sqlen;
            out[7] = a[7] / sqlen;
            return out
        }

        function conjugate(out, a) {
            out[0] = -a[0];
            out[1] = -a[1];
            out[2] = -a[2];
            out[3] = a[3];
            out[4] = -a[4];
            out[5] = -a[5];
            out[6] = -a[6];
            out[7] = a[7];
            return out
        }
        var length$1 = length$2;
        var len$1 = length$1;
        var squaredLength$1 = squaredLength$2;
        var sqrLen$1 = squaredLength$1;

        function normalize$1(out, a) {
            var magnitude = squaredLength$1(a);
            if (magnitude > 0) {
                magnitude = Math.sqrt(magnitude);
                var a0 = a[0] / magnitude;
                var a1 = a[1] / magnitude;
                var a2 = a[2] / magnitude;
                var a3 =
                    a[3] / magnitude;
                var b0 = a[4];
                var b1 = a[5];
                var b2 = a[6];
                var b3 = a[7];
                var a_dot_b = a0 * b0 + a1 * b1 + a2 * b2 + a3 * b3;
                out[0] = a0;
                out[1] = a1;
                out[2] = a2;
                out[3] = a3;
                out[4] = (b0 - a0 * a_dot_b) / magnitude;
                out[5] = (b1 - a1 * a_dot_b) / magnitude;
                out[6] = (b2 - a2 * a_dot_b) / magnitude;
                out[7] = (b3 - a3 * a_dot_b) / magnitude
            }
            return out
        }

        function str$1(a) {
            return "quat2(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ")"
        }

        function exactEquals$1(a, b) {
            return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] ===
                b[5] && a[6] === b[6] && a[7] === b[7]
        }

        function equals$1(a, b) {
            var a0 = a[0],
                a1 = a[1],
                a2 = a[2],
                a3 = a[3],
                a4 = a[4],
                a5 = a[5],
                a6 = a[6],
                a7 = a[7];
            var b0 = b[0],
                b1 = b[1],
                b2 = b[2],
                b3 = b[3],
                b4 = b[4],
                b5 = b[5],
                b6 = b[6],
                b7 = b[7];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= EPSILON * Math.max(1, Math.abs(a4),
                Math.abs(b4)) && Math.abs(a5 - b5) <= EPSILON * Math.max(1, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= EPSILON * Math.max(1, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= EPSILON * Math.max(1, Math.abs(a7), Math.abs(b7))
        }
        var quat2 = Object.freeze({
            __proto__: null,
            create: create$1,
            clone: clone$1,
            fromValues: fromValues$1,
            fromRotationTranslationValues: fromRotationTranslationValues,
            fromRotationTranslation: fromRotationTranslation,
            fromTranslation: fromTranslation,
            fromRotation: fromRotation,
            fromMat4: fromMat4,
            copy: copy$1,
            identity: identity,
            set: set$1,
            getReal: getReal,
            getDual: getDual,
            setReal: setReal,
            setDual: setDual,
            getTranslation: getTranslation,
            translate: translate,
            rotateX: rotateX,
            rotateY: rotateY,
            rotateZ: rotateZ,
            rotateByQuatAppend: rotateByQuatAppend,
            rotateByQuatPrepend: rotateByQuatPrepend,
            rotateAroundAxis: rotateAroundAxis,
            add: add$1,
            multiply: multiply$1,
            mul: mul$1,
            scale: scale$1,
            dot: dot$1,
            lerp: lerp$1,
            invert: invert,
            conjugate: conjugate,
            length: length$1,
            len: len$1,
            squaredLength: squaredLength$1,
            sqrLen: sqrLen$1,
            normalize: normalize$1,
            str: str$1,
            exactEquals: exactEquals$1,
            equals: equals$1
        });

        function create() {
            var out = new ARRAY_TYPE(2);
            if (ARRAY_TYPE != Float32Array) {
                out[0] = 0;
                out[1] = 0
            }
            return out
        }

        function clone(a) {
            var out = new ARRAY_TYPE(2);
            out[0] = a[0];
            out[1] = a[1];
            return out
        }

        function fromValues(x, y) {
            var out = new ARRAY_TYPE(2);
            out[0] = x;
            out[1] = y;
            return out
        }

        function copy(out, a) {
            out[0] = a[0];
            out[1] = a[1];
            return out
        }

        function set(out, x, y) {
            out[0] = x;
            out[1] = y;
            return out
        }

        function add(out, a, b) {
            out[0] = a[0] + b[0];
            out[1] = a[1] + b[1];
            return out
        }

        function subtract(out, a, b) {
            out[0] = a[0] - b[0];
            out[1] =
                a[1] - b[1];
            return out
        }

        function multiply(out, a, b) {
            out[0] = a[0] * b[0];
            out[1] = a[1] * b[1];
            return out
        }

        function divide(out, a, b) {
            out[0] = a[0] / b[0];
            out[1] = a[1] / b[1];
            return out
        }

        function ceil(out, a) {
            out[0] = Math.ceil(a[0]);
            out[1] = Math.ceil(a[1]);
            return out
        }

        function floor(out, a) {
            out[0] = Math.floor(a[0]);
            out[1] = Math.floor(a[1]);
            return out
        }

        function min(out, a, b) {
            out[0] = Math.min(a[0], b[0]);
            out[1] = Math.min(a[1], b[1]);
            return out
        }

        function max(out, a, b) {
            out[0] = Math.max(a[0], b[0]);
            out[1] = Math.max(a[1], b[1]);
            return out
        }

        function round(out,
            a) {
            out[0] = Math.round(a[0]);
            out[1] = Math.round(a[1]);
            return out
        }

        function scale(out, a, b) {
            out[0] = a[0] * b;
            out[1] = a[1] * b;
            return out
        }

        function scaleAndAdd(out, a, b, scale) {
            out[0] = a[0] + b[0] * scale;
            out[1] = a[1] + b[1] * scale;
            return out
        }

        function distance(a, b) {
            var x = b[0] - a[0],
                y = b[1] - a[1];
            return Math.hypot(x, y)
        }

        function squaredDistance(a, b) {
            var x = b[0] - a[0],
                y = b[1] - a[1];
            return x * x + y * y
        }

        function length(a) {
            var x = a[0],
                y = a[1];
            return Math.hypot(x, y)
        }

        function squaredLength(a) {
            var x = a[0],
                y = a[1];
            return x * x + y * y
        }

        function negate(out,
            a) {
            out[0] = -a[0];
            out[1] = -a[1];
            return out
        }

        function inverse(out, a) {
            out[0] = 1 / a[0];
            out[1] = 1 / a[1];
            return out
        }

        function normalize(out, a) {
            var x = a[0],
                y = a[1];
            var len = x * x + y * y;
            if (len > 0) len = 1 / Math.sqrt(len);
            out[0] = a[0] * len;
            out[1] = a[1] * len;
            return out
        }

        function dot(a, b) {
            return a[0] * b[0] + a[1] * b[1]
        }

        function cross(out, a, b) {
            var z = a[0] * b[1] - a[1] * b[0];
            out[0] = out[1] = 0;
            out[2] = z;
            return out
        }

        function lerp(out, a, b, t) {
            var ax = a[0],
                ay = a[1];
            out[0] = ax + t * (b[0] - ax);
            out[1] = ay + t * (b[1] - ay);
            return out
        }

        function random(out, scale) {
            scale = scale ||
                1;
            var r = RANDOM() * 2 * Math.PI;
            out[0] = Math.cos(r) * scale;
            out[1] = Math.sin(r) * scale;
            return out
        }

        function transformMat2(out, a, m) {
            var x = a[0],
                y = a[1];
            out[0] = m[0] * x + m[2] * y;
            out[1] = m[1] * x + m[3] * y;
            return out
        }

        function transformMat2d(out, a, m) {
            var x = a[0],
                y = a[1];
            out[0] = m[0] * x + m[2] * y + m[4];
            out[1] = m[1] * x + m[3] * y + m[5];
            return out
        }

        function transformMat3(out, a, m) {
            var x = a[0],
                y = a[1];
            out[0] = m[0] * x + m[3] * y + m[6];
            out[1] = m[1] * x + m[4] * y + m[7];
            return out
        }

        function transformMat4(out, a, m) {
            var x = a[0];
            var y = a[1];
            out[0] = m[0] * x + m[4] * y + m[12];
            out[1] =
                m[1] * x + m[5] * y + m[13];
            return out
        }

        function rotate(out, a, b, rad) {
            var p0 = a[0] - b[0],
                p1 = a[1] - b[1],
                sinC = Math.sin(rad),
                cosC = Math.cos(rad);
            out[0] = p0 * cosC - p1 * sinC + b[0];
            out[1] = p0 * sinC + p1 * cosC + b[1];
            return out
        }

        function angle(a, b) {
            var x1 = a[0],
                y1 = a[1],
                x2 = b[0],
                y2 = b[1],
                mag = Math.sqrt((x1 * x1 + y1 * y1) * (x2 * x2 + y2 * y2)),
                cosine = mag && (x1 * x2 + y1 * y2) / mag;
            return Math.acos(Math.min(Math.max(cosine, -1), 1))
        }

        function zero(out) {
            out[0] = 0;
            out[1] = 0;
            return out
        }

        function str(a) {
            return "vec2(" + a[0] + ", " + a[1] + ")"
        }

        function exactEquals(a, b) {
            return a[0] ===
                b[0] && a[1] === b[1]
        }

        function equals(a, b) {
            var a0 = a[0],
                a1 = a[1];
            var b0 = b[0],
                b1 = b[1];
            return Math.abs(a0 - b0) <= EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1))
        }
        var len = length;
        var sub = subtract;
        var mul = multiply;
        var div = divide;
        var dist = distance;
        var sqrDist = squaredDistance;
        var sqrLen = squaredLength;
        var forEach = function() {
            var vec = create();
            return function(a, stride, offset, count, fn, arg) {
                var i, l;
                if (!stride) stride = 2;
                if (!offset) offset = 0;
                if (count) l = Math.min(count *
                    stride + offset, a.length);
                else l = a.length;
                for (i = offset; i < l; i += stride) {
                    vec[0] = a[i];
                    vec[1] = a[i + 1];
                    fn(vec, vec, arg);
                    a[i] = vec[0];
                    a[i + 1] = vec[1]
                }
                return a
            }
        }();
        var vec2 = Object.freeze({
            __proto__: null,
            create: create,
            clone: clone,
            fromValues: fromValues,
            copy: copy,
            set: set,
            add: add,
            subtract: subtract,
            multiply: multiply,
            divide: divide,
            ceil: ceil,
            floor: floor,
            min: min,
            max: max,
            round: round,
            scale: scale,
            scaleAndAdd: scaleAndAdd,
            distance: distance,
            squaredDistance: squaredDistance,
            length: length,
            squaredLength: squaredLength,
            negate: negate,
            inverse: inverse,
            normalize: normalize,
            dot: dot,
            cross: cross,
            lerp: lerp,
            random: random,
            transformMat2: transformMat2,
            transformMat2d: transformMat2d,
            transformMat3: transformMat3,
            transformMat4: transformMat4,
            rotate: rotate,
            angle: angle,
            zero: zero,
            str: str,
            exactEquals: exactEquals,
            equals: equals,
            len: len,
            sub: sub,
            mul: mul,
            div: div,
            dist: dist,
            sqrDist: sqrDist,
            sqrLen: sqrLen,
            forEach: forEach
        });
        exports.glMatrix = common;
        exports.mat2 = mat2;
        exports.mat2d = mat2d;
        exports.mat3 = mat3;
        exports.mat4 = mat4;
        exports.quat = quat;
        exports.quat2 = quat2;
        exports.vec2 = vec2;
        exports.vec3 = vec3;
        exports.vec4 = vec4;
        Object.defineProperty(exports, "__esModule", {
            value: true
        })
    });

}

// ../3rdparty/grapheme-splitter.js
{
    function GraphemeSplitter() {
        function h(a, c) {
            void 0 === c && (c = 0);
            var b = a.charCodeAt(c);
            if (55296 <= b && 56319 >= b && c < a.length - 1) {
                var d = b;
                a = a.charCodeAt(c + 1);
                return 56320 <= a && 57343 >= a ? 1024 * (d - 55296) + (a - 56320) + 65536 : d
            }
            return 56320 <= b && 57343 >= b && 1 <= c ? (d = a.charCodeAt(c - 1), a = b, 55296 <= d && 56319 >= d ? 1024 * (d - 55296) + (a - 56320) + 65536 : a) : b
        }

        function l(a, c, b) {
            var d = [a].concat(c).concat([b]),
                e = d[d.length - 2],
                g = d.lastIndexOf(14);
            if (1 < g && d.slice(1, g).every(function(f) {
                    return 3 == f
                }) && -1 == [3, 13, 17].indexOf(a)) return 2;
            a = d.lastIndexOf(4);
            if (0 < a && d.slice(1, a).every(function(f) {
                    return 4 == f
                }) && -1 == [12, 4].indexOf(e)) return 1 == d.filter(function(f) {
                return 4 == f
            }).length % 2 ? 3 : 4;
            if (0 == e && 1 == b) return 0;
            if (2 == e || 0 == e || 1 == e) return 14 == b && c.every(function(f) {
                return 3 == f
            }) ? 2 : 1;
            if (2 == b || 0 == b || 1 == b) return 1;
            if (6 != e || 6 != b && 7 != b && 9 != b && 10 != b)
                if (9 != e && 7 != e || 7 != b && 8 != b)
                    if (10 != e && 8 != e || 8 != b) {
                        if (3 == b || 15 == b || 5 == b || 12 == e) return 0
                    } else return 0;
            else return 0;
            else return 0;
            a = -1 != d.indexOf(3) ? d.lastIndexOf(3) - 1 : d.length - 2;
            return -1 != [13, 17].indexOf(d[a]) && d.slice(a +
                1, -1).every(function(f) {
                return 3 == f
            }) && 14 == b || 15 == e && -1 != [16, 17].indexOf(b) ? 0 : -1 != c.indexOf(4) ? 2 : 4 == e && 4 == b ? 0 : 1
        }

        function k(a) {
            return 1536 <= a && 1541 >= a || 1757 == a || 1807 == a || 2274 == a || 3406 == a || 69821 == a || 70082 <= a && 70083 >= a || 72250 == a || 72326 <= a && 72329 >= a || 73030 == a ? 12 : 13 == a ? 0 : 10 == a ? 1 : 0 <= a && 9 >= a || 11 <= a && 12 >= a || 14 <= a && 31 >= a || 127 <= a && 159 >= a || 173 == a || 1564 == a || 6158 == a || 8203 == a || 8206 <= a && 8207 >= a || 8232 == a || 8233 == a || 8234 <= a && 8238 >= a || 8288 <= a && 8292 >= a || 8293 == a || 8294 <= a && 8303 >= a || 55296 <= a && 57343 >= a || 65279 == a || 65520 <=
                a && 65528 >= a || 65529 <= a && 65531 >= a || 113824 <= a && 113827 >= a || 119155 <= a && 119162 >= a || 917504 == a || 917505 == a || 917506 <= a && 917535 >= a || 917632 <= a && 917759 >= a || 918E3 <= a && 921599 >= a ? 2 : 768 <= a && 879 >= a || 1155 <= a && 1159 >= a || 1160 <= a && 1161 >= a || 1425 <= a && 1469 >= a || 1471 == a || 1473 <= a && 1474 >= a || 1476 <= a && 1477 >= a || 1479 == a || 1552 <= a && 1562 >= a || 1611 <= a && 1631 >= a || 1648 == a || 1750 <= a && 1756 >= a || 1759 <= a && 1764 >= a || 1767 <= a && 1768 >= a || 1770 <= a && 1773 >= a || 1809 == a || 1840 <= a && 1866 >= a || 1958 <= a && 1968 >= a || 2027 <= a && 2035 >= a || 2070 <= a && 2073 >= a || 2075 <= a && 2083 >=
                a || 2085 <= a && 2087 >= a || 2089 <= a && 2093 >= a || 2137 <= a && 2139 >= a || 2260 <= a && 2273 >= a || 2275 <= a && 2306 >= a || 2362 == a || 2364 == a || 2369 <= a && 2376 >= a || 2381 == a || 2385 <= a && 2391 >= a || 2402 <= a && 2403 >= a || 2433 == a || 2492 == a || 2494 == a || 2497 <= a && 2500 >= a || 2509 == a || 2519 == a || 2530 <= a && 2531 >= a || 2561 <= a && 2562 >= a || 2620 == a || 2625 <= a && 2626 >= a || 2631 <= a && 2632 >= a || 2635 <= a && 2637 >= a || 2641 == a || 2672 <= a && 2673 >= a || 2677 == a || 2689 <= a && 2690 >= a || 2748 == a || 2753 <= a && 2757 >= a || 2759 <= a && 2760 >= a || 2765 == a || 2786 <= a && 2787 >= a || 2810 <= a && 2815 >= a || 2817 == a || 2876 == a || 2878 ==
                a || 2879 == a || 2881 <= a && 2884 >= a || 2893 == a || 2902 == a || 2903 == a || 2914 <= a && 2915 >= a || 2946 == a || 3006 == a || 3008 == a || 3021 == a || 3031 == a || 3072 == a || 3134 <= a && 3136 >= a || 3142 <= a && 3144 >= a || 3146 <= a && 3149 >= a || 3157 <= a && 3158 >= a || 3170 <= a && 3171 >= a || 3201 == a || 3260 == a || 3263 == a || 3266 == a || 3270 == a || 3276 <= a && 3277 >= a || 3285 <= a && 3286 >= a || 3298 <= a && 3299 >= a || 3328 <= a && 3329 >= a || 3387 <= a && 3388 >= a || 3390 == a || 3393 <= a && 3396 >= a || 3405 == a || 3415 == a || 3426 <= a && 3427 >= a || 3530 == a || 3535 == a || 3538 <= a && 3540 >= a || 3542 == a || 3551 == a || 3633 == a || 3636 <= a && 3642 >= a || 3655 <=
                a && 3662 >= a || 3761 == a || 3764 <= a && 3769 >= a || 3771 <= a && 3772 >= a || 3784 <= a && 3789 >= a || 3864 <= a && 3865 >= a || 3893 == a || 3895 == a || 3897 == a || 3953 <= a && 3966 >= a || 3968 <= a && 3972 >= a || 3974 <= a && 3975 >= a || 3981 <= a && 3991 >= a || 3993 <= a && 4028 >= a || 4038 == a || 4141 <= a && 4144 >= a || 4146 <= a && 4151 >= a || 4153 <= a && 4154 >= a || 4157 <= a && 4158 >= a || 4184 <= a && 4185 >= a || 4190 <= a && 4192 >= a || 4209 <= a && 4212 >= a || 4226 == a || 4229 <= a && 4230 >= a || 4237 == a || 4253 == a || 4957 <= a && 4959 >= a || 5906 <= a && 5908 >= a || 5938 <= a && 5940 >= a || 5970 <= a && 5971 >= a || 6002 <= a && 6003 >= a || 6068 <= a && 6069 >= a || 6071 <=
                a && 6077 >= a || 6086 == a || 6089 <= a && 6099 >= a || 6109 == a || 6155 <= a && 6157 >= a || 6277 <= a && 6278 >= a || 6313 == a || 6432 <= a && 6434 >= a || 6439 <= a && 6440 >= a || 6450 == a || 6457 <= a && 6459 >= a || 6679 <= a && 6680 >= a || 6683 == a || 6742 == a || 6744 <= a && 6750 >= a || 6752 == a || 6754 == a || 6757 <= a && 6764 >= a || 6771 <= a && 6780 >= a || 6783 == a || 6832 <= a && 6845 >= a || 6846 == a || 6912 <= a && 6915 >= a || 6964 == a || 6966 <= a && 6970 >= a || 6972 == a || 6978 == a || 7019 <= a && 7027 >= a || 7040 <= a && 7041 >= a || 7074 <= a && 7077 >= a || 7080 <= a && 7081 >= a || 7083 <= a && 7085 >= a || 7142 == a || 7144 <= a && 7145 >= a || 7149 == a || 7151 <= a && 7153 >=
                a || 7212 <= a && 7219 >= a || 7222 <= a && 7223 >= a || 7376 <= a && 7378 >= a || 7380 <= a && 7392 >= a || 7394 <= a && 7400 >= a || 7405 == a || 7412 == a || 7416 <= a && 7417 >= a || 7616 <= a && 7673 >= a || 7675 <= a && 7679 >= a || 8204 == a || 8400 <= a && 8412 >= a || 8413 <= a && 8416 >= a || 8417 == a || 8418 <= a && 8420 >= a || 8421 <= a && 8432 >= a || 11503 <= a && 11505 >= a || 11647 == a || 11744 <= a && 11775 >= a || 12330 <= a && 12333 >= a || 12334 <= a && 12335 >= a || 12441 <= a && 12442 >= a || 42607 == a || 42608 <= a && 42610 >= a || 42612 <= a && 42621 >= a || 42654 <= a && 42655 >= a || 42736 <= a && 42737 >= a || 43010 == a || 43014 == a || 43019 == a || 43045 <= a && 43046 >=
                a || 43204 <= a && 43205 >= a || 43232 <= a && 43249 >= a || 43302 <= a && 43309 >= a || 43335 <= a && 43345 >= a || 43392 <= a && 43394 >= a || 43443 == a || 43446 <= a && 43449 >= a || 43452 == a || 43493 == a || 43561 <= a && 43566 >= a || 43569 <= a && 43570 >= a || 43573 <= a && 43574 >= a || 43587 == a || 43596 == a || 43644 == a || 43696 == a || 43698 <= a && 43700 >= a || 43703 <= a && 43704 >= a || 43710 <= a && 43711 >= a || 43713 == a || 43756 <= a && 43757 >= a || 43766 == a || 44005 == a || 44008 == a || 44013 == a || 64286 == a || 65024 <= a && 65039 >= a || 65056 <= a && 65071 >= a || 65438 <= a && 65439 >= a || 66045 == a || 66272 == a || 66422 <= a && 66426 >= a || 68097 <= a &&
                68099 >= a || 68101 <= a && 68102 >= a || 68108 <= a && 68111 >= a || 68152 <= a && 68154 >= a || 68159 == a || 68325 <= a && 68326 >= a || 69633 == a || 69688 <= a && 69702 >= a || 69759 <= a && 69761 >= a || 69811 <= a && 69814 >= a || 69817 <= a && 69818 >= a || 69888 <= a && 69890 >= a || 69927 <= a && 69931 >= a || 69933 <= a && 69940 >= a || 70003 == a || 70016 <= a && 70017 >= a || 70070 <= a && 70078 >= a || 70090 <= a && 70092 >= a || 70191 <= a && 70193 >= a || 70196 == a || 70198 <= a && 70199 >= a || 70206 == a || 70367 == a || 70371 <= a && 70378 >= a || 70400 <= a && 70401 >= a || 70460 == a || 70462 == a || 70464 == a || 70487 == a || 70502 <= a && 70508 >= a || 70512 <= a && 70516 >=
                a || 70712 <= a && 70719 >= a || 70722 <= a && 70724 >= a || 70726 == a || 70832 == a || 70835 <= a && 70840 >= a || 70842 == a || 70845 == a || 70847 <= a && 70848 >= a || 70850 <= a && 70851 >= a || 71087 == a || 71090 <= a && 71093 >= a || 71100 <= a && 71101 >= a || 71103 <= a && 71104 >= a || 71132 <= a && 71133 >= a || 71219 <= a && 71226 >= a || 71229 == a || 71231 <= a && 71232 >= a || 71339 == a || 71341 == a || 71344 <= a && 71349 >= a || 71351 == a || 71453 <= a && 71455 >= a || 71458 <= a && 71461 >= a || 71463 <= a && 71467 >= a || 72193 <= a && 72198 >= a || 72201 <= a && 72202 >= a || 72243 <= a && 72248 >= a || 72251 <= a && 72254 >= a || 72263 == a || 72273 <= a && 72278 >= a ||
                72281 <= a && 72283 >= a || 72330 <= a && 72342 >= a || 72344 <= a && 72345 >= a || 72752 <= a && 72758 >= a || 72760 <= a && 72765 >= a || 72767 == a || 72850 <= a && 72871 >= a || 72874 <= a && 72880 >= a || 72882 <= a && 72883 >= a || 72885 <= a && 72886 >= a || 73009 <= a && 73014 >= a || 73018 == a || 73020 <= a && 73021 >= a || 73023 <= a && 73029 >= a || 73031 == a || 92912 <= a && 92916 >= a || 92976 <= a && 92982 >= a || 94095 <= a && 94098 >= a || 113821 <= a && 113822 >= a || 119141 == a || 119143 <= a && 119145 >= a || 119150 <= a && 119154 >= a || 119163 <= a && 119170 >= a || 119173 <= a && 119179 >= a || 119210 <= a && 119213 >= a || 119362 <= a && 119364 >= a || 121344 <=
                a && 121398 >= a || 121403 <= a && 121452 >= a || 121461 == a || 121476 == a || 121499 <= a && 121503 >= a || 121505 <= a && 121519 >= a || 122880 <= a && 122886 >= a || 122888 <= a && 122904 >= a || 122907 <= a && 122913 >= a || 122915 <= a && 122916 >= a || 122918 <= a && 122922 >= a || 125136 <= a && 125142 >= a || 125252 <= a && 125258 >= a || 917536 <= a && 917631 >= a || 917760 <= a && 917999 >= a ? 3 : 127462 <= a && 127487 >= a ? 4 : 2307 == a || 2363 == a || 2366 <= a && 2368 >= a || 2377 <= a && 2380 >= a || 2382 <= a && 2383 >= a || 2434 <= a && 2435 >= a || 2495 <= a && 2496 >= a || 2503 <= a && 2504 >= a || 2507 <= a && 2508 >= a || 2563 == a || 2622 <= a && 2624 >= a || 2691 ==
                a || 2750 <= a && 2752 >= a || 2761 == a || 2763 <= a && 2764 >= a || 2818 <= a && 2819 >= a || 2880 == a || 2887 <= a && 2888 >= a || 2891 <= a && 2892 >= a || 3007 == a || 3009 <= a && 3010 >= a || 3014 <= a && 3016 >= a || 3018 <= a && 3020 >= a || 3073 <= a && 3075 >= a || 3137 <= a && 3140 >= a || 3202 <= a && 3203 >= a || 3262 == a || 3264 <= a && 3265 >= a || 3267 <= a && 3268 >= a || 3271 <= a && 3272 >= a || 3274 <= a && 3275 >= a || 3330 <= a && 3331 >= a || 3391 <= a && 3392 >= a || 3398 <= a && 3400 >= a || 3402 <= a && 3404 >= a || 3458 <= a && 3459 >= a || 3536 <= a && 3537 >= a || 3544 <= a && 3550 >= a || 3570 <= a && 3571 >= a || 3635 == a || 3763 == a || 3902 <= a && 3903 >= a || 3967 == a || 4145 ==
                a || 4155 <= a && 4156 >= a || 4182 <= a && 4183 >= a || 4228 == a || 6070 == a || 6078 <= a && 6085 >= a || 6087 <= a && 6088 >= a || 6435 <= a && 6438 >= a || 6441 <= a && 6443 >= a || 6448 <= a && 6449 >= a || 6451 <= a && 6456 >= a || 6681 <= a && 6682 >= a || 6741 == a || 6743 == a || 6765 <= a && 6770 >= a || 6916 == a || 6965 == a || 6971 == a || 6973 <= a && 6977 >= a || 6979 <= a && 6980 >= a || 7042 == a || 7073 == a || 7078 <= a && 7079 >= a || 7082 == a || 7143 == a || 7146 <= a && 7148 >= a || 7150 == a || 7154 <= a && 7155 >= a || 7204 <= a && 7211 >= a || 7220 <= a && 7221 >= a || 7393 == a || 7410 <= a && 7411 >= a || 7415 == a || 43043 <= a && 43044 >= a || 43047 == a || 43136 <= a && 43137 >= a ||
                43188 <= a && 43203 >= a || 43346 <= a && 43347 >= a || 43395 == a || 43444 <= a && 43445 >= a || 43450 <= a && 43451 >= a || 43453 <= a && 43456 >= a || 43567 <= a && 43568 >= a || 43571 <= a && 43572 >= a || 43597 == a || 43755 == a || 43758 <= a && 43759 >= a || 43765 == a || 44003 <= a && 44004 >= a || 44006 <= a && 44007 >= a || 44009 <= a && 44010 >= a || 44012 == a || 69632 == a || 69634 == a || 69762 == a || 69808 <= a && 69810 >= a || 69815 <= a && 69816 >= a || 69932 == a || 70018 == a || 70067 <= a && 70069 >= a || 70079 <= a && 70080 >= a || 70188 <= a && 70190 >= a || 70194 <= a && 70195 >= a || 70197 == a || 70368 <= a && 70370 >= a || 70402 <= a && 70403 >= a || 70463 == a || 70465 <=
                a && 70468 >= a || 70471 <= a && 70472 >= a || 70475 <= a && 70477 >= a || 70498 <= a && 70499 >= a || 70709 <= a && 70711 >= a || 70720 <= a && 70721 >= a || 70725 == a || 70833 <= a && 70834 >= a || 70841 == a || 70843 <= a && 70844 >= a || 70846 == a || 70849 == a || 71088 <= a && 71089 >= a || 71096 <= a && 71099 >= a || 71102 == a || 71216 <= a && 71218 >= a || 71227 <= a && 71228 >= a || 71230 == a || 71340 == a || 71342 <= a && 71343 >= a || 71350 == a || 71456 <= a && 71457 >= a || 71462 == a || 72199 <= a && 72200 >= a || 72249 == a || 72279 <= a && 72280 >= a || 72343 == a || 72751 == a || 72766 == a || 72873 == a || 72881 == a || 72884 == a || 94033 <= a && 94078 >= a || 119142 ==
                a || 119149 == a ? 5 : 4352 <= a && 4447 >= a || 43360 <= a && 43388 >= a ? 6 : 4448 <= a && 4519 >= a || 55216 <= a && 55238 >= a ? 7 : 4520 <= a && 4607 >= a || 55243 <= a && 55291 >= a ? 8 : 44032 == a || 44060 == a || 44088 == a || 44116 == a || 44144 == a || 44172 == a || 44200 == a || 44228 == a || 44256 == a || 44284 == a || 44312 == a || 44340 == a || 44368 == a || 44396 == a || 44424 == a || 44452 == a || 44480 == a || 44508 == a || 44536 == a || 44564 == a || 44592 == a || 44620 == a || 44648 == a || 44676 == a || 44704 == a || 44732 == a || 44760 == a || 44788 == a || 44816 == a || 44844 == a || 44872 == a || 44900 == a || 44928 == a || 44956 == a || 44984 == a || 45012 == a || 45040 == a ||
                45068 == a || 45096 == a || 45124 == a || 45152 == a || 45180 == a || 45208 == a || 45236 == a || 45264 == a || 45292 == a || 45320 == a || 45348 == a || 45376 == a || 45404 == a || 45432 == a || 45460 == a || 45488 == a || 45516 == a || 45544 == a || 45572 == a || 45600 == a || 45628 == a || 45656 == a || 45684 == a || 45712 == a || 45740 == a || 45768 == a || 45796 == a || 45824 == a || 45852 == a || 45880 == a || 45908 == a || 45936 == a || 45964 == a || 45992 == a || 46020 == a || 46048 == a || 46076 == a || 46104 == a || 46132 == a || 46160 == a || 46188 == a || 46216 == a || 46244 == a || 46272 == a || 46300 == a || 46328 == a || 46356 == a || 46384 == a || 46412 == a || 46440 == a || 46468 ==
                a || 46496 == a || 46524 == a || 46552 == a || 46580 == a || 46608 == a || 46636 == a || 46664 == a || 46692 == a || 46720 == a || 46748 == a || 46776 == a || 46804 == a || 46832 == a || 46860 == a || 46888 == a || 46916 == a || 46944 == a || 46972 == a || 47E3 == a || 47028 == a || 47056 == a || 47084 == a || 47112 == a || 47140 == a || 47168 == a || 47196 == a || 47224 == a || 47252 == a || 47280 == a || 47308 == a || 47336 == a || 47364 == a || 47392 == a || 47420 == a || 47448 == a || 47476 == a || 47504 == a || 47532 == a || 47560 == a || 47588 == a || 47616 == a || 47644 == a || 47672 == a || 47700 == a || 47728 == a || 47756 == a || 47784 == a || 47812 == a || 47840 == a || 47868 == a ||
                47896 == a || 47924 == a || 47952 == a || 47980 == a || 48008 == a || 48036 == a || 48064 == a || 48092 == a || 48120 == a || 48148 == a || 48176 == a || 48204 == a || 48232 == a || 48260 == a || 48288 == a || 48316 == a || 48344 == a || 48372 == a || 48400 == a || 48428 == a || 48456 == a || 48484 == a || 48512 == a || 48540 == a || 48568 == a || 48596 == a || 48624 == a || 48652 == a || 48680 == a || 48708 == a || 48736 == a || 48764 == a || 48792 == a || 48820 == a || 48848 == a || 48876 == a || 48904 == a || 48932 == a || 48960 == a || 48988 == a || 49016 == a || 49044 == a || 49072 == a || 49100 == a || 49128 == a || 49156 == a || 49184 == a || 49212 == a || 49240 == a || 49268 == a || 49296 ==
                a || 49324 == a || 49352 == a || 49380 == a || 49408 == a || 49436 == a || 49464 == a || 49492 == a || 49520 == a || 49548 == a || 49576 == a || 49604 == a || 49632 == a || 49660 == a || 49688 == a || 49716 == a || 49744 == a || 49772 == a || 49800 == a || 49828 == a || 49856 == a || 49884 == a || 49912 == a || 49940 == a || 49968 == a || 49996 == a || 50024 == a || 50052 == a || 50080 == a || 50108 == a || 50136 == a || 50164 == a || 50192 == a || 50220 == a || 50248 == a || 50276 == a || 50304 == a || 50332 == a || 50360 == a || 50388 == a || 50416 == a || 50444 == a || 50472 == a || 50500 == a || 50528 == a || 50556 == a || 50584 == a || 50612 == a || 50640 == a || 50668 == a || 50696 == a ||
                50724 == a || 50752 == a || 50780 == a || 50808 == a || 50836 == a || 50864 == a || 50892 == a || 50920 == a || 50948 == a || 50976 == a || 51004 == a || 51032 == a || 51060 == a || 51088 == a || 51116 == a || 51144 == a || 51172 == a || 51200 == a || 51228 == a || 51256 == a || 51284 == a || 51312 == a || 51340 == a || 51368 == a || 51396 == a || 51424 == a || 51452 == a || 51480 == a || 51508 == a || 51536 == a || 51564 == a || 51592 == a || 51620 == a || 51648 == a || 51676 == a || 51704 == a || 51732 == a || 51760 == a || 51788 == a || 51816 == a || 51844 == a || 51872 == a || 51900 == a || 51928 == a || 51956 == a || 51984 == a || 52012 == a || 52040 == a || 52068 == a || 52096 == a || 52124 ==
                a || 52152 == a || 52180 == a || 52208 == a || 52236 == a || 52264 == a || 52292 == a || 52320 == a || 52348 == a || 52376 == a || 52404 == a || 52432 == a || 52460 == a || 52488 == a || 52516 == a || 52544 == a || 52572 == a || 52600 == a || 52628 == a || 52656 == a || 52684 == a || 52712 == a || 52740 == a || 52768 == a || 52796 == a || 52824 == a || 52852 == a || 52880 == a || 52908 == a || 52936 == a || 52964 == a || 52992 == a || 53020 == a || 53048 == a || 53076 == a || 53104 == a || 53132 == a || 53160 == a || 53188 == a || 53216 == a || 53244 == a || 53272 == a || 53300 == a || 53328 == a || 53356 == a || 53384 == a || 53412 == a || 53440 == a || 53468 == a || 53496 == a || 53524 == a ||
                53552 == a || 53580 == a || 53608 == a || 53636 == a || 53664 == a || 53692 == a || 53720 == a || 53748 == a || 53776 == a || 53804 == a || 53832 == a || 53860 == a || 53888 == a || 53916 == a || 53944 == a || 53972 == a || 54E3 == a || 54028 == a || 54056 == a || 54084 == a || 54112 == a || 54140 == a || 54168 == a || 54196 == a || 54224 == a || 54252 == a || 54280 == a || 54308 == a || 54336 == a || 54364 == a || 54392 == a || 54420 == a || 54448 == a || 54476 == a || 54504 == a || 54532 == a || 54560 == a || 54588 == a || 54616 == a || 54644 == a || 54672 == a || 54700 == a || 54728 == a || 54756 == a || 54784 == a || 54812 == a || 54840 == a || 54868 == a || 54896 == a || 54924 == a || 54952 ==
                a || 54980 == a || 55008 == a || 55036 == a || 55064 == a || 55092 == a || 55120 == a || 55148 == a || 55176 == a ? 9 : 44033 <= a && 44059 >= a || 44061 <= a && 44087 >= a || 44089 <= a && 44115 >= a || 44117 <= a && 44143 >= a || 44145 <= a && 44171 >= a || 44173 <= a && 44199 >= a || 44201 <= a && 44227 >= a || 44229 <= a && 44255 >= a || 44257 <= a && 44283 >= a || 44285 <= a && 44311 >= a || 44313 <= a && 44339 >= a || 44341 <= a && 44367 >= a || 44369 <= a && 44395 >= a || 44397 <= a && 44423 >= a || 44425 <= a && 44451 >= a || 44453 <= a && 44479 >= a || 44481 <= a && 44507 >= a || 44509 <= a && 44535 >= a || 44537 <= a && 44563 >= a || 44565 <= a && 44591 >= a || 44593 <= a && 44619 >=
                a || 44621 <= a && 44647 >= a || 44649 <= a && 44675 >= a || 44677 <= a && 44703 >= a || 44705 <= a && 44731 >= a || 44733 <= a && 44759 >= a || 44761 <= a && 44787 >= a || 44789 <= a && 44815 >= a || 44817 <= a && 44843 >= a || 44845 <= a && 44871 >= a || 44873 <= a && 44899 >= a || 44901 <= a && 44927 >= a || 44929 <= a && 44955 >= a || 44957 <= a && 44983 >= a || 44985 <= a && 45011 >= a || 45013 <= a && 45039 >= a || 45041 <= a && 45067 >= a || 45069 <= a && 45095 >= a || 45097 <= a && 45123 >= a || 45125 <= a && 45151 >= a || 45153 <= a && 45179 >= a || 45181 <= a && 45207 >= a || 45209 <= a && 45235 >= a || 45237 <= a && 45263 >= a || 45265 <= a && 45291 >= a || 45293 <= a && 45319 >= a ||
                45321 <= a && 45347 >= a || 45349 <= a && 45375 >= a || 45377 <= a && 45403 >= a || 45405 <= a && 45431 >= a || 45433 <= a && 45459 >= a || 45461 <= a && 45487 >= a || 45489 <= a && 45515 >= a || 45517 <= a && 45543 >= a || 45545 <= a && 45571 >= a || 45573 <= a && 45599 >= a || 45601 <= a && 45627 >= a || 45629 <= a && 45655 >= a || 45657 <= a && 45683 >= a || 45685 <= a && 45711 >= a || 45713 <= a && 45739 >= a || 45741 <= a && 45767 >= a || 45769 <= a && 45795 >= a || 45797 <= a && 45823 >= a || 45825 <= a && 45851 >= a || 45853 <= a && 45879 >= a || 45881 <= a && 45907 >= a || 45909 <= a && 45935 >= a || 45937 <= a && 45963 >= a || 45965 <= a && 45991 >= a || 45993 <= a && 46019 >= a || 46021 <=
                a && 46047 >= a || 46049 <= a && 46075 >= a || 46077 <= a && 46103 >= a || 46105 <= a && 46131 >= a || 46133 <= a && 46159 >= a || 46161 <= a && 46187 >= a || 46189 <= a && 46215 >= a || 46217 <= a && 46243 >= a || 46245 <= a && 46271 >= a || 46273 <= a && 46299 >= a || 46301 <= a && 46327 >= a || 46329 <= a && 46355 >= a || 46357 <= a && 46383 >= a || 46385 <= a && 46411 >= a || 46413 <= a && 46439 >= a || 46441 <= a && 46467 >= a || 46469 <= a && 46495 >= a || 46497 <= a && 46523 >= a || 46525 <= a && 46551 >= a || 46553 <= a && 46579 >= a || 46581 <= a && 46607 >= a || 46609 <= a && 46635 >= a || 46637 <= a && 46663 >= a || 46665 <= a && 46691 >= a || 46693 <= a && 46719 >= a || 46721 <= a &&
                46747 >= a || 46749 <= a && 46775 >= a || 46777 <= a && 46803 >= a || 46805 <= a && 46831 >= a || 46833 <= a && 46859 >= a || 46861 <= a && 46887 >= a || 46889 <= a && 46915 >= a || 46917 <= a && 46943 >= a || 46945 <= a && 46971 >= a || 46973 <= a && 46999 >= a || 47001 <= a && 47027 >= a || 47029 <= a && 47055 >= a || 47057 <= a && 47083 >= a || 47085 <= a && 47111 >= a || 47113 <= a && 47139 >= a || 47141 <= a && 47167 >= a || 47169 <= a && 47195 >= a || 47197 <= a && 47223 >= a || 47225 <= a && 47251 >= a || 47253 <= a && 47279 >= a || 47281 <= a && 47307 >= a || 47309 <= a && 47335 >= a || 47337 <= a && 47363 >= a || 47365 <= a && 47391 >= a || 47393 <= a && 47419 >= a || 47421 <= a && 47447 >=
                a || 47449 <= a && 47475 >= a || 47477 <= a && 47503 >= a || 47505 <= a && 47531 >= a || 47533 <= a && 47559 >= a || 47561 <= a && 47587 >= a || 47589 <= a && 47615 >= a || 47617 <= a && 47643 >= a || 47645 <= a && 47671 >= a || 47673 <= a && 47699 >= a || 47701 <= a && 47727 >= a || 47729 <= a && 47755 >= a || 47757 <= a && 47783 >= a || 47785 <= a && 47811 >= a || 47813 <= a && 47839 >= a || 47841 <= a && 47867 >= a || 47869 <= a && 47895 >= a || 47897 <= a && 47923 >= a || 47925 <= a && 47951 >= a || 47953 <= a && 47979 >= a || 47981 <= a && 48007 >= a || 48009 <= a && 48035 >= a || 48037 <= a && 48063 >= a || 48065 <= a && 48091 >= a || 48093 <= a && 48119 >= a || 48121 <= a && 48147 >= a ||
                48149 <= a && 48175 >= a || 48177 <= a && 48203 >= a || 48205 <= a && 48231 >= a || 48233 <= a && 48259 >= a || 48261 <= a && 48287 >= a || 48289 <= a && 48315 >= a || 48317 <= a && 48343 >= a || 48345 <= a && 48371 >= a || 48373 <= a && 48399 >= a || 48401 <= a && 48427 >= a || 48429 <= a && 48455 >= a || 48457 <= a && 48483 >= a || 48485 <= a && 48511 >= a || 48513 <= a && 48539 >= a || 48541 <= a && 48567 >= a || 48569 <= a && 48595 >= a || 48597 <= a && 48623 >= a || 48625 <= a && 48651 >= a || 48653 <= a && 48679 >= a || 48681 <= a && 48707 >= a || 48709 <= a && 48735 >= a || 48737 <= a && 48763 >= a || 48765 <= a && 48791 >= a || 48793 <= a && 48819 >= a || 48821 <= a && 48847 >= a || 48849 <=
                a && 48875 >= a || 48877 <= a && 48903 >= a || 48905 <= a && 48931 >= a || 48933 <= a && 48959 >= a || 48961 <= a && 48987 >= a || 48989 <= a && 49015 >= a || 49017 <= a && 49043 >= a || 49045 <= a && 49071 >= a || 49073 <= a && 49099 >= a || 49101 <= a && 49127 >= a || 49129 <= a && 49155 >= a || 49157 <= a && 49183 >= a || 49185 <= a && 49211 >= a || 49213 <= a && 49239 >= a || 49241 <= a && 49267 >= a || 49269 <= a && 49295 >= a || 49297 <= a && 49323 >= a || 49325 <= a && 49351 >= a || 49353 <= a && 49379 >= a || 49381 <= a && 49407 >= a || 49409 <= a && 49435 >= a || 49437 <= a && 49463 >= a || 49465 <= a && 49491 >= a || 49493 <= a && 49519 >= a || 49521 <= a && 49547 >= a || 49549 <= a &&
                49575 >= a || 49577 <= a && 49603 >= a || 49605 <= a && 49631 >= a || 49633 <= a && 49659 >= a || 49661 <= a && 49687 >= a || 49689 <= a && 49715 >= a || 49717 <= a && 49743 >= a || 49745 <= a && 49771 >= a || 49773 <= a && 49799 >= a || 49801 <= a && 49827 >= a || 49829 <= a && 49855 >= a || 49857 <= a && 49883 >= a || 49885 <= a && 49911 >= a || 49913 <= a && 49939 >= a || 49941 <= a && 49967 >= a || 49969 <= a && 49995 >= a || 49997 <= a && 50023 >= a || 50025 <= a && 50051 >= a || 50053 <= a && 50079 >= a || 50081 <= a && 50107 >= a || 50109 <= a && 50135 >= a || 50137 <= a && 50163 >= a || 50165 <= a && 50191 >= a || 50193 <= a && 50219 >= a || 50221 <= a && 50247 >= a || 50249 <= a && 50275 >=
                a || 50277 <= a && 50303 >= a || 50305 <= a && 50331 >= a || 50333 <= a && 50359 >= a || 50361 <= a && 50387 >= a || 50389 <= a && 50415 >= a || 50417 <= a && 50443 >= a || 50445 <= a && 50471 >= a || 50473 <= a && 50499 >= a || 50501 <= a && 50527 >= a || 50529 <= a && 50555 >= a || 50557 <= a && 50583 >= a || 50585 <= a && 50611 >= a || 50613 <= a && 50639 >= a || 50641 <= a && 50667 >= a || 50669 <= a && 50695 >= a || 50697 <= a && 50723 >= a || 50725 <= a && 50751 >= a || 50753 <= a && 50779 >= a || 50781 <= a && 50807 >= a || 50809 <= a && 50835 >= a || 50837 <= a && 50863 >= a || 50865 <= a && 50891 >= a || 50893 <= a && 50919 >= a || 50921 <= a && 50947 >= a || 50949 <= a && 50975 >= a ||
                50977 <= a && 51003 >= a || 51005 <= a && 51031 >= a || 51033 <= a && 51059 >= a || 51061 <= a && 51087 >= a || 51089 <= a && 51115 >= a || 51117 <= a && 51143 >= a || 51145 <= a && 51171 >= a || 51173 <= a && 51199 >= a || 51201 <= a && 51227 >= a || 51229 <= a && 51255 >= a || 51257 <= a && 51283 >= a || 51285 <= a && 51311 >= a || 51313 <= a && 51339 >= a || 51341 <= a && 51367 >= a || 51369 <= a && 51395 >= a || 51397 <= a && 51423 >= a || 51425 <= a && 51451 >= a || 51453 <= a && 51479 >= a || 51481 <= a && 51507 >= a || 51509 <= a && 51535 >= a || 51537 <= a && 51563 >= a || 51565 <= a && 51591 >= a || 51593 <= a && 51619 >= a || 51621 <= a && 51647 >= a || 51649 <= a && 51675 >= a || 51677 <=
                a && 51703 >= a || 51705 <= a && 51731 >= a || 51733 <= a && 51759 >= a || 51761 <= a && 51787 >= a || 51789 <= a && 51815 >= a || 51817 <= a && 51843 >= a || 51845 <= a && 51871 >= a || 51873 <= a && 51899 >= a || 51901 <= a && 51927 >= a || 51929 <= a && 51955 >= a || 51957 <= a && 51983 >= a || 51985 <= a && 52011 >= a || 52013 <= a && 52039 >= a || 52041 <= a && 52067 >= a || 52069 <= a && 52095 >= a || 52097 <= a && 52123 >= a || 52125 <= a && 52151 >= a || 52153 <= a && 52179 >= a || 52181 <= a && 52207 >= a || 52209 <= a && 52235 >= a || 52237 <= a && 52263 >= a || 52265 <= a && 52291 >= a || 52293 <= a && 52319 >= a || 52321 <= a && 52347 >= a || 52349 <= a && 52375 >= a || 52377 <= a &&
                52403 >= a || 52405 <= a && 52431 >= a || 52433 <= a && 52459 >= a || 52461 <= a && 52487 >= a || 52489 <= a && 52515 >= a || 52517 <= a && 52543 >= a || 52545 <= a && 52571 >= a || 52573 <= a && 52599 >= a || 52601 <= a && 52627 >= a || 52629 <= a && 52655 >= a || 52657 <= a && 52683 >= a || 52685 <= a && 52711 >= a || 52713 <= a && 52739 >= a || 52741 <= a && 52767 >= a || 52769 <= a && 52795 >= a || 52797 <= a && 52823 >= a || 52825 <= a && 52851 >= a || 52853 <= a && 52879 >= a || 52881 <= a && 52907 >= a || 52909 <= a && 52935 >= a || 52937 <= a && 52963 >= a || 52965 <= a && 52991 >= a || 52993 <= a && 53019 >= a || 53021 <= a && 53047 >= a || 53049 <= a && 53075 >= a || 53077 <= a && 53103 >=
                a || 53105 <= a && 53131 >= a || 53133 <= a && 53159 >= a || 53161 <= a && 53187 >= a || 53189 <= a && 53215 >= a || 53217 <= a && 53243 >= a || 53245 <= a && 53271 >= a || 53273 <= a && 53299 >= a || 53301 <= a && 53327 >= a || 53329 <= a && 53355 >= a || 53357 <= a && 53383 >= a || 53385 <= a && 53411 >= a || 53413 <= a && 53439 >= a || 53441 <= a && 53467 >= a || 53469 <= a && 53495 >= a || 53497 <= a && 53523 >= a || 53525 <= a && 53551 >= a || 53553 <= a && 53579 >= a || 53581 <= a && 53607 >= a || 53609 <= a && 53635 >= a || 53637 <= a && 53663 >= a || 53665 <= a && 53691 >= a || 53693 <= a && 53719 >= a || 53721 <= a && 53747 >= a || 53749 <= a && 53775 >= a || 53777 <= a && 53803 >= a ||
                53805 <= a && 53831 >= a || 53833 <= a && 53859 >= a || 53861 <= a && 53887 >= a || 53889 <= a && 53915 >= a || 53917 <= a && 53943 >= a || 53945 <= a && 53971 >= a || 53973 <= a && 53999 >= a || 54001 <= a && 54027 >= a || 54029 <= a && 54055 >= a || 54057 <= a && 54083 >= a || 54085 <= a && 54111 >= a || 54113 <= a && 54139 >= a || 54141 <= a && 54167 >= a || 54169 <= a && 54195 >= a || 54197 <= a && 54223 >= a || 54225 <= a && 54251 >= a || 54253 <= a && 54279 >= a || 54281 <= a && 54307 >= a || 54309 <= a && 54335 >= a || 54337 <= a && 54363 >= a || 54365 <= a && 54391 >= a || 54393 <= a && 54419 >= a || 54421 <= a && 54447 >= a || 54449 <= a && 54475 >= a || 54477 <= a && 54503 >= a || 54505 <=
                a && 54531 >= a || 54533 <= a && 54559 >= a || 54561 <= a && 54587 >= a || 54589 <= a && 54615 >= a || 54617 <= a && 54643 >= a || 54645 <= a && 54671 >= a || 54673 <= a && 54699 >= a || 54701 <= a && 54727 >= a || 54729 <= a && 54755 >= a || 54757 <= a && 54783 >= a || 54785 <= a && 54811 >= a || 54813 <= a && 54839 >= a || 54841 <= a && 54867 >= a || 54869 <= a && 54895 >= a || 54897 <= a && 54923 >= a || 54925 <= a && 54951 >= a || 54953 <= a && 54979 >= a || 54981 <= a && 55007 >= a || 55009 <= a && 55035 >= a || 55037 <= a && 55063 >= a || 55065 <= a && 55091 >= a || 55093 <= a && 55119 >= a || 55121 <= a && 55147 >= a || 55149 <= a && 55175 >= a || 55177 <= a && 55203 >= a ? 10 : 9757 ==
                a || 9977 == a || 9994 <= a && 9997 >= a || 127877 == a || 127938 <= a && 127940 >= a || 127943 == a || 127946 <= a && 127948 >= a || 128066 <= a && 128067 >= a || 128070 <= a && 128080 >= a || 128110 == a || 128112 <= a && 128120 >= a || 128124 == a || 128129 <= a && 128131 >= a || 128133 <= a && 128135 >= a || 128170 == a || 128372 <= a && 128373 >= a || 128378 == a || 128400 == a || 128405 <= a && 128406 >= a || 128581 <= a && 128583 >= a || 128587 <= a && 128591 >= a || 128675 == a || 128692 <= a && 128694 >= a || 128704 == a || 128716 == a || 129304 <= a && 129308 >= a || 129310 <= a && 129311 >= a || 129318 == a || 129328 <= a && 129337 >= a || 129341 <= a && 129342 >= a ||
                129489 <= a && 129501 >= a ? 13 : 127995 <= a && 127999 >= a ? 14 : 8205 == a ? 15 : 9792 == a || 9794 == a || 9877 <= a && 9878 >= a || 9992 == a || 10084 == a || 127752 == a || 127806 == a || 127859 == a || 127891 == a || 127908 == a || 127912 == a || 127979 == a || 127981 == a || 128139 == a || 128187 <= a && 128188 >= a || 128295 == a || 128300 == a || 128488 == a || 128640 == a || 128658 == a ? 16 : 128102 <= a && 128105 >= a ? 17 : 11
        }
        this.nextBreak = function(a, c) {
            void 0 === c && (c = 0);
            if (0 > c) return 0;
            if (c >= a.length - 1) return a.length;
            var b = k(h(a, c)),
                d = [];
            for (c += 1; c < a.length; c++) {
                var e = a,
                    g = c - 1;
                if (!(55296 <= e.charCodeAt(g) &&
                        56319 >= e.charCodeAt(g) && 56320 <= e.charCodeAt(g + 1) && 57343 >= e.charCodeAt(g + 1))) {
                    e = k(h(a, c));
                    if (l(b, d, e)) return c;
                    d.push(e)
                }
            }
            return a.length
        };
        this.splitGraphemes = function(a) {
            for (var c = [], b = 0, d;
                (d = this.nextBreak(a, b)) < a.length;) c.push(a.slice(b, d)), b = d;
            b < a.length && c.push(a.slice(b));
            return c
        };
        this.iterateGraphemes = function(a) {
            var c = 0,
                b = {
                    next: function() {
                        var d;
                        if ((d = this.nextBreak(a, c)) < a.length) {
                            var e = a.slice(c, d);
                            c = d;
                            return {
                                value: e,
                                done: !1
                            }
                        }
                        return c < a.length ? (e = a.slice(c), c = a.length, {
                            value: e,
                            done: !1
                        }) : {
                            value: void 0,
                            done: !0
                        }
                    }.bind(this)
                };
            "undefined" !== typeof Symbol && Symbol.iterator && (b[Symbol.iterator] = function() {
                return b
            });
            return b
        };
        this.countGraphemes = function(a) {
            for (var c = 0, b = 0, d;
                (d = this.nextBreak(a, b)) < a.length;) b = d, c++;
            b < a.length && c++;
            return c
        };
        return this
    }
    self.GraphemeSplitter = GraphemeSplitter;

}

// 3rdparty/poly-decomp.js
{
    'use strict';

    function lineInt(l1, l2, precision) {
        precision = precision || 0;
        var i = [0, 0];
        var a1, b1, c1, a2, b2, c2, det;
        a1 = l1[1][1] - l1[0][1];
        b1 = l1[0][0] - l1[1][0];
        c1 = a1 * l1[0][0] + b1 * l1[0][1];
        a2 = l2[1][1] - l2[0][1];
        b2 = l2[0][0] - l2[1][0];
        c2 = a2 * l2[0][0] + b2 * l2[0][1];
        det = a1 * b2 - a2 * b1;
        if (!scalar_eq(det, 0, precision)) {
            i[0] = (b2 * c1 - b1 * c2) / det;
            i[1] = (a1 * c2 - a2 * c1) / det
        }
        return i
    }

    function lineSegmentsIntersect(p1, p2, q1, q2) {
        var dx = p2[0] - p1[0];
        var dy = p2[1] - p1[1];
        var da = q2[0] - q1[0];
        var db = q2[1] - q1[1];
        if (da * dy - db * dx === 0) return false;
        var s = (dx * (q1[1] - p1[1]) + dy * (p1[0] - q1[0])) / (da * dy - db * dx);
        var t = (da * (p1[1] - q1[1]) + db * (q1[0] - p1[0])) / (db * dx - da * dy);
        return s >= 0 && s <= 1 && t >= 0 && t <= 1
    }

    function triangleArea(a, b, c) {
        return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1])
    }

    function isLeft(a, b, c) {
        return triangleArea(a, b, c) > 0
    }

    function isLeftOn(a, b, c) {
        return triangleArea(a, b, c) >= 0
    }

    function isRight(a, b, c) {
        return triangleArea(a, b, c) < 0
    }

    function isRightOn(a, b, c) {
        return triangleArea(a, b, c) <= 0
    }
    var tmpPoint1 = [],
        tmpPoint2 = [];

    function collinear(a, b, c, thresholdAngle) {
        if (!thresholdAngle) return triangleArea(a, b, c) === 0;
        else {
            var ab = tmpPoint1,
                bc = tmpPoint2;
            ab[0] = b[0] - a[0];
            ab[1] = b[1] - a[1];
            bc[0] = c[0] - b[0];
            bc[1] = c[1] - b[1];
            var dot = ab[0] * bc[0] + ab[1] * bc[1],
                magA = Math.sqrt(ab[0] * ab[0] + ab[1] * ab[1]),
                magB = Math.sqrt(bc[0] * bc[0] + bc[1] * bc[1]),
                angle = Math.acos(dot / (magA * magB));
            return angle < thresholdAngle
        }
    }

    function sqdist(a, b) {
        var dx = b[0] - a[0];
        var dy = b[1] - a[1];
        return dx * dx + dy * dy
    }

    function polygonAt(polygon, i) {
        var s = polygon.length;
        return polygon[i < 0 ? i % s + s : i % s]
    }

    function polygonClear(polygon) {
        polygon.length = 0
    }

    function polygonAppend(polygon, poly, from, to) {
        for (var i = from; i < to; i++) polygon.push(poly[i])
    }

    function polygonMakeCCW(polygon) {
        var br = 0,
            v = polygon;
        for (var i = 1; i < polygon.length; ++i)
            if (v[i][1] < v[br][1] || v[i][1] === v[br][1] && v[i][0] > v[br][0]) br = i;
        if (!isLeft(polygonAt(polygon, br - 1), polygonAt(polygon, br), polygonAt(polygon, br + 1))) {
            polygonReverse(polygon);
            return true
        } else return false
    }

    function polygonReverse(polygon) {
        var tmp = [];
        var N = polygon.length;
        for (var i = 0; i !== N; i++) tmp.push(polygon.pop());
        for (var i = 0; i !== N; i++) polygon[i] = tmp[i]
    }

    function polygonIsReflex(polygon, i) {
        return isRight(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1))
    }
    var tmpLine1 = [],
        tmpLine2 = [];

    function polygonCanSee(polygon, a, b) {
        var p, dist, l1 = tmpLine1,
            l2 = tmpLine2;
        if (isLeftOn(polygonAt(polygon, a + 1), polygonAt(polygon, a), polygonAt(polygon, b)) && isRightOn(polygonAt(polygon, a - 1), polygonAt(polygon, a), polygonAt(polygon, b))) return false;
        dist = sqdist(polygonAt(polygon, a), polygonAt(polygon, b));
        for (var i = 0; i !== polygon.length; ++i) {
            if ((i + 1) % polygon.length === a || i === a) continue;
            if (isLeftOn(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i + 1)) && isRightOn(polygonAt(polygon, a), polygonAt(polygon,
                    b), polygonAt(polygon, i))) {
                l1[0] = polygonAt(polygon, a);
                l1[1] = polygonAt(polygon, b);
                l2[0] = polygonAt(polygon, i);
                l2[1] = polygonAt(polygon, i + 1);
                p = lineInt(l1, l2);
                if (sqdist(polygonAt(polygon, a), p) < dist) return false
            }
        }
        return true
    }

    function polygonCanSee2(polygon, a, b) {
        for (var i = 0; i !== polygon.length; ++i) {
            if (i === a || i === b || (i + 1) % polygon.length === a || (i + 1) % polygon.length === b) continue;
            if (lineSegmentsIntersect(polygonAt(polygon, a), polygonAt(polygon, b), polygonAt(polygon, i), polygonAt(polygon, i + 1))) return false
        }
        return true
    }

    function polygonCopy(polygon, i, j, targetPoly) {
        var p = targetPoly || [];
        polygonClear(p);
        if (i < j)
            for (var k = i; k <= j; k++) p.push(polygon[k]);
        else {
            for (var k = 0; k <= j; k++) p.push(polygon[k]);
            for (var k = i; k < polygon.length; k++) p.push(polygon[k])
        }
        return p
    }

    function polygonGetCutEdges(polygon) {
        var min = [],
            tmp1 = [],
            tmp2 = [],
            tmpPoly = [];
        var nDiags = Number.MAX_VALUE;
        for (var i = 0; i < polygon.length; ++i)
            if (polygonIsReflex(polygon, i))
                for (var j = 0; j < polygon.length; ++j)
                    if (polygonCanSee(polygon, i, j)) {
                        tmp1 = polygonGetCutEdges(polygonCopy(polygon, i, j, tmpPoly));
                        tmp2 = polygonGetCutEdges(polygonCopy(polygon, j, i, tmpPoly));
                        for (var k = 0; k < tmp2.length; k++) tmp1.push(tmp2[k]);
                        if (tmp1.length < nDiags) {
                            min = tmp1;
                            nDiags = tmp1.length;
                            min.push([polygonAt(polygon, i), polygonAt(polygon, j)])
                        }
                    }
        return min
    }

    function polygonDecomp(polygon) {
        var edges = polygonGetCutEdges(polygon);
        if (edges.length > 0) return polygonSlice(polygon, edges);
        else return [polygon]
    }

    function polygonSlice(polygon, cutEdges) {
        if (cutEdges.length === 0) return [polygon];
        if (cutEdges instanceof Array && cutEdges.length && cutEdges[0] instanceof Array && cutEdges[0].length === 2 && cutEdges[0][0] instanceof Array) {
            var polys = [polygon];
            for (var i = 0; i < cutEdges.length; i++) {
                var cutEdge = cutEdges[i];
                for (var j = 0; j < polys.length; j++) {
                    var poly = polys[j];
                    var result = polygonSlice(poly, cutEdge);
                    if (result) {
                        polys.splice(j, 1);
                        polys.push(result[0], result[1]);
                        break
                    }
                }
            }
            return polys
        } else {
            var cutEdge = cutEdges;
            var i = polygon.indexOf(cutEdge[0]);
            var j = polygon.indexOf(cutEdge[1]);
            if (i !== -1 && j !== -1) return [polygonCopy(polygon, i, j), polygonCopy(polygon, j, i)];
            else return false
        }
    }

    function polygonIsSimple(polygon) {
        var path = polygon,
            i;
        for (i = 0; i < path.length - 1; i++)
            for (var j = 0; j < i - 1; j++)
                if (lineSegmentsIntersect(path[i], path[i + 1], path[j], path[j + 1])) return false;
        for (i = 1; i < path.length - 2; i++)
            if (lineSegmentsIntersect(path[0], path[path.length - 1], path[i], path[i + 1])) return false;
        return true
    }

    function getIntersectionPoint(p1, p2, q1, q2, delta) {
        delta = delta || 0;
        var a1 = p2[1] - p1[1];
        var b1 = p1[0] - p2[0];
        var c1 = a1 * p1[0] + b1 * p1[1];
        var a2 = q2[1] - q1[1];
        var b2 = q1[0] - q2[0];
        var c2 = a2 * q1[0] + b2 * q1[1];
        var det = a1 * b2 - a2 * b1;
        if (!scalar_eq(det, 0, delta)) return [(b2 * c1 - b1 * c2) / det, (a1 * c2 - a2 * c1) / det];
        else return [0, 0]
    }

    function polygonQuickDecomp(polygon, result, reflexVertices, steinerPoints, delta, maxlevel, level) {
        maxlevel = maxlevel || 100;
        level = level || 0;
        delta = delta || 25;
        result = typeof result !== "undefined" ? result : [];
        reflexVertices = reflexVertices || [];
        steinerPoints = steinerPoints || [];
        var upperInt = [0, 0],
            lowerInt = [0, 0],
            p = [0, 0];
        var upperDist = 0,
            lowerDist = 0,
            d = 0,
            closestDist = 0;
        var upperIndex = 0,
            lowerIndex = 0,
            closestIndex = 0;
        var lowerPoly = [],
            upperPoly = [];
        var poly = polygon,
            v = polygon;
        if (v.length < 3) return result;
        level++;
        if (level > maxlevel) {
            console.warn("quickDecomp: max level (" +
                maxlevel + ") reached.");
            return result
        }
        for (var i = 0; i < polygon.length; ++i)
            if (polygonIsReflex(poly, i)) {
                reflexVertices.push(poly[i]);
                upperDist = lowerDist = Number.MAX_VALUE;
                for (var j = 0; j < polygon.length; ++j) {
                    if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j - 1))) {
                        p = getIntersectionPoint(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j - 1));
                        if (isRight(polygonAt(poly, i + 1), polygonAt(poly, i), p)) {
                            d = sqdist(poly[i],
                                p);
                            if (d < lowerDist) {
                                lowerDist = d;
                                lowerInt = p;
                                lowerIndex = j
                            }
                        }
                    }
                    if (isLeft(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j + 1)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {
                        p = getIntersectionPoint(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j), polygonAt(poly, j + 1));
                        if (isLeft(polygonAt(poly, i - 1), polygonAt(poly, i), p)) {
                            d = sqdist(poly[i], p);
                            if (d < upperDist) {
                                upperDist = d;
                                upperInt = p;
                                upperIndex = j
                            }
                        }
                    }
                }
                if (lowerIndex === (upperIndex + 1) % polygon.length) {
                    p[0] = (lowerInt[0] + upperInt[0]) / 2;
                    p[1] = (lowerInt[1] + upperInt[1]) / 2;
                    steinerPoints.push(p);
                    if (i < upperIndex) {
                        polygonAppend(lowerPoly, poly, i, upperIndex + 1);
                        lowerPoly.push(p);
                        upperPoly.push(p);
                        if (lowerIndex !== 0) polygonAppend(upperPoly, poly, lowerIndex, poly.length);
                        polygonAppend(upperPoly, poly, 0, i + 1)
                    } else {
                        if (i !== 0) polygonAppend(lowerPoly, poly, i, poly.length);
                        polygonAppend(lowerPoly, poly, 0, upperIndex + 1);
                        lowerPoly.push(p);
                        upperPoly.push(p);
                        polygonAppend(upperPoly, poly, lowerIndex, i + 1)
                    }
                } else {
                    if (lowerIndex > upperIndex) upperIndex += polygon.length;
                    closestDist = Number.MAX_VALUE;
                    if (upperIndex < lowerIndex) return result;
                    for (var j = lowerIndex; j <= upperIndex; ++j)
                        if (isLeftOn(polygonAt(poly, i - 1), polygonAt(poly, i), polygonAt(poly, j)) && isRightOn(polygonAt(poly, i + 1), polygonAt(poly, i), polygonAt(poly, j))) {
                            d = sqdist(polygonAt(poly, i), polygonAt(poly, j));
                            if (d < closestDist && polygonCanSee2(poly, i, j)) {
                                closestDist = d;
                                closestIndex = j % polygon.length
                            }
                        }
                    if (i < closestIndex) {
                        polygonAppend(lowerPoly, poly, i, closestIndex + 1);
                        if (closestIndex !== 0) polygonAppend(upperPoly, poly, closestIndex,
                            v.length);
                        polygonAppend(upperPoly, poly, 0, i + 1)
                    } else {
                        if (i !== 0) polygonAppend(lowerPoly, poly, i, v.length);
                        polygonAppend(lowerPoly, poly, 0, closestIndex + 1);
                        polygonAppend(upperPoly, poly, closestIndex, i + 1)
                    }
                }
                if (lowerPoly.length < upperPoly.length) {
                    polygonQuickDecomp(lowerPoly, result, reflexVertices, steinerPoints, delta, maxlevel, level);
                    polygonQuickDecomp(upperPoly, result, reflexVertices, steinerPoints, delta, maxlevel, level)
                } else {
                    polygonQuickDecomp(upperPoly, result, reflexVertices, steinerPoints, delta, maxlevel, level);
                    polygonQuickDecomp(lowerPoly,
                        result, reflexVertices, steinerPoints, delta, maxlevel, level)
                }
                return result
            }
        result.push(polygon);
        return result
    }

    function polygonRemoveCollinearPoints(polygon, precision) {
        var num = 0;
        for (var i = polygon.length - 1; polygon.length > 3 && i >= 0; --i)
            if (collinear(polygonAt(polygon, i - 1), polygonAt(polygon, i), polygonAt(polygon, i + 1), precision)) {
                polygon.splice(i % polygon.length, 1);
                num++
            }
        return num
    }

    function polygonRemoveDuplicatePoints(polygon, precision) {
        for (var i = polygon.length - 1; i >= 1; --i) {
            var pi = polygon[i];
            for (var j = i - 1; j >= 0; --j)
                if (points_eq(pi, polygon[j], precision)) {
                    polygon.splice(i, 1);
                    continue
                }
        }
    }

    function scalar_eq(a, b, precision) {
        precision = precision || 0;
        return Math.abs(a - b) <= precision
    }

    function points_eq(a, b, precision) {
        return scalar_eq(a[0], b[0], precision) && scalar_eq(a[1], b[1], precision)
    }
    self.polyDecomp = {
        decomp: polygonDecomp,
        quickDecomp: polygonQuickDecomp,
        isSimple: polygonIsSimple,
        removeCollinearPoints: polygonRemoveCollinearPoints,
        removeDuplicatePoints: polygonRemoveDuplicatePoints,
        makeCCW: polygonMakeCCW
    };

}

// lib/c3.js
{
    'use strict';
    let isReady = false;
    let hasAppStarted = false;
    let buildMode = "dev";
    const C3 = self.C3 = class C3 {
        constructor() {
            throw TypeError("static class can't be instantiated");
        }
        static SetReady() {
            isReady = true
        }
        static IsReady() {
            return isReady
        }
        static SetAppStarted() {
            hasAppStarted = true
        }
        static HasAppStarted() {
            return hasAppStarted
        }
        static SetBuildMode(m) {
            buildMode = m
        }
        static GetBuildMode() {
            return buildMode
        }
        static IsReleaseBuild() {
            return buildMode === "final"
        }
    };
    C3.isDebug = false;
    C3.isDebugDefend = false;
    C3.hardwareConcurrency = navigator.hardwareConcurrency || 2;
    self.C3X = {};

}

// ../lib/queryParser.js
{
    'use strict';
    const C3 = self.C3;
    C3.QueryParser = class QueryParser {
        constructor(queryString) {
            this._queryString = queryString;
            this._parameters = new Map;
            this._Parse()
        }
        _Parse() {
            let str = this._queryString;
            if (str.startsWith("?") || str.startsWith("#")) str = str.substr(1);
            const arr = str.split("&");
            for (const p of arr) this._ParseParameter(p)
        }
        _ParseParameter(p) {
            if (!p) return;
            if (!p.includes("=")) {
                this._parameters.set(p, null);
                return
            }
            const i = p.indexOf("=");
            const parameterName = decodeURIComponent(p.substring(0, i));
            const parameterValue = decodeURIComponent(p.substring(i +
                1));
            this._parameters.set(parameterName, parameterValue)
        }
        LogAll() {
            for (const e of this._parameters) console.log("[QueryParser] Parameter '" + e[0] + "' = " + (e[1] === null ? "null" : "'" + e[1] + "'"))
        }
        Has(name) {
            return this._parameters.has(name)
        }
        Get(name) {
            const ret = this._parameters.get(name);
            if (typeof ret === "undefined") return null;
            else return ret
        }
        ClearHash() {
            history.replaceState("", document.title, location.pathname + location.search)
        }
        Reparse(str) {
            this._queryString = str;
            this._parameters.clear();
            this._Parse()
        }
    };
    C3.QueryString = new C3.QueryParser(location.search);
    C3.LocationHashString = new C3.QueryParser(location.hash);
    if (C3.QueryString.Has("perf")) C3.isPerformanceProfiling = true;
    if (C3.QueryString.Get("mode") !== "dev") C3.SetBuildMode("final");

}

// ../lib/detect/detect.js
{
    'use strict';
    const C3 = self.C3;
    const UNKNOWN = "(unknown)";
    C3.Platform = {
        OS: UNKNOWN,
        OSVersion: UNKNOWN,
        Browser: UNKNOWN,
        BrowserVersion: UNKNOWN,
        BrowserVersionNumber: NaN,
        BrowserEngine: UNKNOWN,
        Context: "browser",
        IsDesktop: true,
        IsMobile: false,
        IsAppleOS: false,
        IsIpadOS: false,
        GetDetailedInfo: async () => {}
    };
    const windowsNTVerMap = new Map([
        [5, "2000"],
        [5.1, "XP"],
        [5.2, "XP"],
        [6, "Vista"],
        [6.1, "7"],
        [6.2, "8"],
        [6.3, "8.1"],
        [10, "10"]
    ]);

    function GetWindowsNTVersionName(ntVer) {
        const num = parseFloat(ntVer);
        const ret = windowsNTVerMap.get(num);
        if (ret) return ret;
        if (num >= 13) return "11";
        return "NT " + ntVer
    }
    const uaStr = navigator.userAgent;
    const uaData = navigator["userAgentData"];
    if (uaData && uaData["brands"].length > 0) {
        C3.Platform.OS = uaData["platform"];
        C3.Platform.IsMobile = uaData["mobile"];
        C3.Platform.IsDesktop = !C3.Platform.IsMobile;
        const RECOGNIZED_BROWSERS = new Map([
            ["Google Chrome", "Chrome"],
            ["Microsoft Edge", "Edge"],
            ["Opera", "Opera"],
            ["Opera GX", "Opera GX"],
            ["Mozilla Firefox", "Firefox"],
            ["Apple Safari", "Safari"],
            ["NW.js", "NW.js"]
        ]);
        const RECOGNIZED_ENGINES = new Map([
            ["Chromium", "Chromium"],
            ["Gecko", "Gecko"],
            ["WebKit", "WebKit"]
        ]);

        function ReadBrandList(brands) {
            let browser =
                "";
            let browser_version = "";
            let engine = "";
            let engine_version = "";
            for (const o of brands) {
                const recognizedBrowser = RECOGNIZED_BROWSERS.get(o["brand"]);
                if (!browser && recognizedBrowser) {
                    browser = recognizedBrowser;
                    browser_version = o["version"]
                }
                const recognizedEngine = RECOGNIZED_ENGINES.get(o["brand"]);
                if (!engine && recognizedEngine) {
                    engine = recognizedEngine;
                    engine_version = o["version"]
                }
            }
            if (!browser && engine === "Chromium") {
                C3.Platform.Browser = "Chromium";
                C3.Platform.BrowserVersion = engine_version
            }
            C3.Platform.Browser = browser ||
                UNKNOWN;
            C3.Platform.BrowserVersion = browser_version || UNKNOWN;
            C3.Platform.BrowserEngine = engine || UNKNOWN
        }
        ReadBrandList(uaData["brands"]);
        let didGetDetailedInfo = false;
        C3.Platform.GetDetailedInfo = async () => {
            if (didGetDetailedInfo) return;
            try {
                const details = await navigator["userAgentData"]["getHighEntropyValues"](["platformVersion", "fullVersionList"]);
                ReadBrandList(details["fullVersionList"]);
                if (C3.Platform.OS === "Windows") C3.Platform.OSVersion = GetWindowsNTVersionName(details["platformVersion"]);
                else C3.Platform.OSVersion =
                    details["platformVersion"];
                didGetDetailedInfo = true
            } catch (err) {
                console.warn("Failed to get detailed user agent information: ", err)
            }
        }
    } else {
        function RunTest(regex_or_arr, handler) {
            const arr = Array.isArray(regex_or_arr) ? regex_or_arr : [regex_or_arr];
            for (const regex of arr) {
                const result = regex.exec(uaStr);
                if (result) {
                    handler(result);
                    break
                }
            }
        }
        RunTest(/windows\s+nt\s+([\d\.]+)/i, result => {
            C3.Platform.OS = "Windows";
            const ntVer = result[1];
            C3.Platform.OSVersion = GetWindowsNTVersionName(ntVer)
        });
        RunTest(/mac\s+os\s+x\s+([\d\._]+)/i,
            result => {
                C3.Platform.OS = "macOS";
                C3.Platform.OSVersion = result[1].replace(/_/g, ".")
            });
        RunTest(/CrOS/, () => {
            C3.Platform.OS = "Chrome OS"
        });
        RunTest(/linux|openbsd|freebsd|netbsd/i, () => {
            C3.Platform.OS = "Linux"
        });
        RunTest(/android/i, () => {
            C3.Platform.OS = "Android"
        });
        RunTest(/android\s+([\d\.]+)/i, result => {
            C3.Platform.OS = "Android";
            C3.Platform.OSVersion = result[1]
        });
        if (C3.Platform.OS === UNKNOWN) {
            RunTest(/(iphone|ipod|ipad)/i, result => {
                C3.Platform.OS = "iOS"
            });
            RunTest([/iphone\s+os\s+([\d\._]+)/i, /ipad[^)]*os\s+([\d\._]+)/i],
                result => {
                    C3.Platform.OS = "iOS";
                    C3.Platform.OSVersion = result[1].replace(/_/g, ".")
                })
        }
        const hasChrome = /chrome\//i.test(uaStr);
        const hasChromium = /chromium\//i.test(uaStr);
        const hasEdge = /edg\//i.test(uaStr);
        const hasOpera = /OPR\//.test(uaStr);
        const hasNWjs = /nwjs/i.test(uaStr);
        const hasSafari = /safari\//i.test(uaStr);
        const hasWebKit = /webkit/i.test(uaStr);
        if (!hasEdge && !hasOpera) RunTest(/chrome\/([\d\.]+)/i, result => {
            C3.Platform.Browser = "Chrome";
            C3.Platform.BrowserVersion = result[1];
            C3.Platform.BrowserEngine =
                "Chromium"
        });
        RunTest(/edg\/([\d\.]+)/i, result => {
            C3.Platform.Browser = "Edge";
            C3.Platform.BrowserVersion = result[1];
            C3.Platform.BrowserEngine = "Chromium"
        });
        RunTest(/OPR\/([\d\.]+)/, result => {
            C3.Platform.Browser = "Opera";
            C3.Platform.BrowserVersion = result[1];
            C3.Platform.BrowserEngine = "Chromium"
        });
        RunTest(/chromium\/([\d\.]+)/i, result => {
            C3.Platform.Browser = "Chromium";
            C3.Platform.BrowserVersion = result[1];
            C3.Platform.BrowserEngine = "Chromium"
        });
        RunTest(/nwjs\/[0-9.]+/i, result => {
            C3.Platform.Browser = "NW.js";
            C3.Platform.BrowserVersion =
                result[1];
            C3.Platform.BrowserEngine = "Chromium";
            C3.Platform.Context = "nwjs"
        });
        RunTest(/firefox\/([\d\.]+)/i, result => {
            C3.Platform.Browser = "Firefox";
            C3.Platform.BrowserVersion = result[1];
            C3.Platform.BrowserEngine = "Gecko"
        });
        if (hasSafari && !hasChrome && !hasChromium && !hasEdge && !hasOpera && !hasNWjs) {
            C3.Platform.Browser = "Safari";
            C3.Platform.BrowserEngine = "WebKit";
            RunTest(/version\/([\d\.]+)/i, result => {
                C3.Platform.BrowserVersion = result[1]
            });
            RunTest(/crios\/([\d\.]+)/i, result => {
                C3.Platform.Browser = "Chrome for iOS";
                C3.Platform.BrowserVersion = result[1]
            });
            RunTest(/fxios\/([\d\.]+)/i, result => {
                C3.Platform.Browser = "Firefox for iOS";
                C3.Platform.BrowserVersion = result[1]
            });
            RunTest(/edgios\/([\d\.]+)/i, result => {
                C3.Platform.Browser = "Edge for iOS";
                C3.Platform.BrowserVersion = result[1]
            })
        }
        if (C3.Platform.BrowserEngine === UNKNOWN && hasWebKit) C3.Platform.BrowserEngine = "WebKit";
        if (C3.Platform.OS === "Android" && C3.Platform.Browser === "Safari") C3.Platform.Browser = "Stock";
        const desktopOSs = new Set(["Windows", "macOS", "Linux", "Chrome OS"]);
        const isDesktop = desktopOSs.has(C3.Platform.OS) || C3.Platform.Context === "nwjs";
        C3.Platform.IsDesktop = isDesktop;
        C3.Platform.IsMobile = !isDesktop
    }
    if (C3.Platform.Browser === "Chrome" && C3.Platform.Context === "browser" && /wv\)/.test(uaStr)) C3.Platform.Context = "webview";
    if (C3.Platform.Context !== "nwjs" && typeof window !== "undefined" && (window.matchMedia && window.matchMedia("(display-mode: standalone)").matches || navigator["standalone"])) C3.Platform.Context = "webapp";
    C3.Platform.BrowserVersionNumber = parseFloat(C3.Platform.BrowserVersion);
    const looksLikeIPadOS = C3.Platform.OS === "macOS" && navigator["maxTouchPoints"] && navigator["maxTouchPoints"] > 2;
    if (looksLikeIPadOS) {
        C3.Platform.OS = "iOS";
        C3.Platform.OSVersion = C3.Platform.BrowserVersion;
        C3.Platform.IsDesktop = false;
        C3.Platform.IsMobile = true;
        C3.Platform.IsIpadOS = true
    }
    C3.Platform.IsAppleOS = C3.Platform.OS === "macOS" || C3.Platform.OS === "iOS";

}

// ../lib/storage/kvStorage.js
{
    'use strict'; {
        const VERSION = 2;
        const STORE_NAME = "keyvaluepairs";
        const DATABASE_PROMISE_MAP = new Map;
        const SUPPORTS_GETALL = typeof IDBObjectStore !== "undefined" && typeof IDBObjectStore.prototype.getAll === "function";
        const SUPPORTS_GETALLKEYS = typeof IDBObjectStore !== "undefined" && typeof IDBObjectStore.prototype.getAllKeys === "function";

        function asyncifyRequest(request) {
            return new Promise((res, rej) => {
                request.onsuccess = () => res(request.result);
                request.onerror = () => rej(request.error)
            })
        }

        function asyncifyTransaction(tx) {
            return new Promise((res,
                rej) => {
                tx.oncomplete = () => res();
                tx.onerror = () => rej(tx.error);
                tx.onabort = () => rej(tx.error)
            })
        }

        function openReadOnlyTransaction(name, method) {
            return openTransaction(name, method)
        }

        function openWriteTransaction(name, method) {
            return openTransaction(name, method, true)
        }
        async function openTransaction(name, method, write = false, allowRetry = true) {
            const db = await lazyOpenDatabase(name);
            try {
                const tx = db.transaction([STORE_NAME], write ? "readwrite" : "readonly");
                return method(tx)
            } catch (err) {
                if (allowRetry && err["name"] === "InvalidStateError") {
                    DATABASE_PROMISE_MAP.delete(name);
                    return openTransaction(name, method, write, false)
                } else throw err;
            }
        }

        function lazyOpenDatabase(name) {
            RequireString(name);
            let dbPromise = DATABASE_PROMISE_MAP.get(name);
            if (!(dbPromise instanceof Promise)) {
                dbPromise = openDatabase(name);
                DATABASE_PROMISE_MAP.set(name, dbPromise);
                dbPromise.catch(err => DATABASE_PROMISE_MAP.delete(name))
            }
            return dbPromise
        }
        async function openDatabase(name) {
            RequireString(name);
            const openRequest = indexedDB.open(name, VERSION);
            openRequest.addEventListener("upgradeneeded", e => {
                try {
                    const db =
                        e.target.result;
                    db.createObjectStore(STORE_NAME)
                } catch (err) {
                    console.error(`Failed to create objectstore for database ${name}`, err)
                }
            });
            return asyncifyRequest(openRequest)
        }

        function RequireString(x) {
            if (typeof x !== "string") throw new TypeError("expected string");
        }

        function getEntriesFromCursor(tx, type) {
            const request = tx.objectStore(STORE_NAME).openCursor();
            return new Promise(resolve => {
                const results = [];
                request.onsuccess = event => {
                    const cursor = event.target.result;
                    if (cursor) {
                        switch (type) {
                            case "entries":
                                results.push([cursor.key,
                                    cursor.value
                                ]);
                                break;
                            case "keys":
                                results.push(cursor.key);
                                break;
                            case "values":
                                results.push(cursor.value);
                                break
                        }
                        cursor.continue()
                    } else resolve(results)
                }
            })
        }
        class KVStorageContainer {
            constructor(name) {
                RequireString(name);
                this.name = name
            }
            async ready() {
                await lazyOpenDatabase(this.name)
            }
            set(key, value) {
                RequireString(key);
                return openWriteTransaction(this.name, async tx => {
                    const request = tx.objectStore(STORE_NAME).put(value, key);
                    const requestPromise = asyncifyRequest(request);
                    const txPromise = asyncifyTransaction(tx);
                    await Promise.all([txPromise, requestPromise])
                })
            }
            get(key) {
                RequireString(key);
                return openReadOnlyTransaction(this.name, async tx => {
                    const request = tx.objectStore(STORE_NAME).get(key);
                    const requestPromise = asyncifyRequest(request);
                    const txPromise = asyncifyTransaction(tx);
                    const [_, value] = await Promise.all([txPromise, requestPromise]);
                    return value
                })
            }
            delete(key) {
                RequireString(key);
                return openWriteTransaction(this.name, async tx => {
                    const request = tx.objectStore(STORE_NAME).delete(key);
                    const requestPromise = asyncifyRequest(request);
                    const txPromise = asyncifyTransaction(tx);
                    await Promise.all([txPromise, requestPromise])
                })
            }
            clear() {
                return openWriteTransaction(this.name, async tx => {
                    const request = tx.objectStore(STORE_NAME).clear();
                    const requestPromise = asyncifyRequest(request);
                    const txPromise = asyncifyTransaction(tx);
                    await Promise.all([txPromise, requestPromise])
                })
            }
            keys() {
                return openReadOnlyTransaction(this.name, async tx => {
                    let requestPromise;
                    if (SUPPORTS_GETALLKEYS) {
                        const request = tx.objectStore(STORE_NAME).getAllKeys();
                        requestPromise = asyncifyRequest(request)
                    } else requestPromise =
                        getEntriesFromCursor(tx, "keys");
                    const txPromise = asyncifyTransaction(tx);
                    const [_, value] = await Promise.all([txPromise, requestPromise]);
                    return value
                })
            }
            values() {
                return openReadOnlyTransaction(this.name, async tx => {
                    let requestPromise;
                    if (SUPPORTS_GETALL) {
                        const request = tx.objectStore(STORE_NAME).getAll();
                        requestPromise = asyncifyRequest(request)
                    } else requestPromise = getEntriesFromCursor(tx, "values");
                    const txPromise = asyncifyTransaction(tx);
                    const [_, value] = await Promise.all([txPromise, requestPromise]);
                    return value
                })
            }
            entries() {
                return openReadOnlyTransaction(this.name,
                    async tx => {
                        const requestPromise = getEntriesFromCursor(tx, "entries");
                        const txPromise = asyncifyTransaction(tx);
                        const [_, value] = await Promise.all([txPromise, requestPromise]);
                        return value
                    })
            }
        }
        self.KVStorageContainer = KVStorageContainer
    };

}

// ../lib/storage/localForageAdaptor.js
{
    'use strict'; {
        const KVStorageContainer = self.KVStorageContainer;
        const CRITICAL_ERRORS = [/no available storage method found/i, /an attempt was made to break through the security policy of the user agent/i, /the user denied permission to access the database/i, /a mutation operation was attempted on a database that did not allow mutations/i, /idbfactory\.open\(\) called in an invalid security context/i];
        const memoryStorage = new WeakMap;
        let isInMemory = false;
        if (typeof indexedDB === "undefined") {
            isInMemory = true;
            console.warn("Unable to use local storage because indexedDB is not defined")
        }

        function NOT_IMPLEMENTED(name) {
            throw new Error(`"${name}" is not implemented`);
        }

        function DISALLOW_CALLBACK(fn) {
            if (typeof fn === "function") throw new Error(`localforage callback API is not implemented; please use the promise API instead`);
        }

        function StructuredClone(value) {
            if (typeof value === "object") return new Promise(resolve => {
                const {
                    port1,
                    port2
                } = new MessageChannel;
                port2.onmessage = ev => resolve(ev.data);
                port1.postMessage(value)
            });
            else return Promise.resolve(value)
        }
        class ForageAdaptor {
            constructor(inst) {
                this._inst = inst;
                memoryStorage.set(this, new Map)
            }
            _MaybeSwitchToMemoryFallback(err) {
                if (isInMemory) return;
                for (const regex of CRITICAL_ERRORS)
                    if (err && regex.test(err.message)) {
                        console.error("Unable to use local storage, reverting to in-memory store: ", err, err.message);
                        isInMemory = true;
                        break
                    }
            }
            async _getItemFallback(name) {
                const value = memoryStorage.get(this).get(name);
                const ret = await StructuredClone(value);
                return typeof ret === "undefined" ?
                    null : ret
            }
            async _setItemFallback(name, value) {
                value = await StructuredClone(value);
                memoryStorage.get(this).set(name, value)
            }
            _removeItemFallback(name) {
                memoryStorage.get(this).delete(name)
            }
            _clearFallback() {
                memoryStorage.get(this).clear()
            }
            _keysFallback() {
                return Array.from(memoryStorage.get(this).keys())
            }
            IsUsingFallback() {
                return isInMemory
            }
            async getItem(key, successCallback) {
                DISALLOW_CALLBACK(successCallback);
                if (isInMemory) return await this._getItemFallback(key);
                let result;
                try {
                    result = await this._inst.get(key)
                } catch (err) {
                    this._MaybeSwitchToMemoryFallback(err);
                    if (isInMemory) return await this._getItemFallback(key);
                    else {
                        console.error(`Error reading '${key}' from storage, returning null: `, err);
                        return null
                    }
                }
                return typeof result === "undefined" ? null : result
            }
            async setItem(key, value, successCallback) {
                DISALLOW_CALLBACK(successCallback);
                if (typeof value === "undefined") value = null;
                if (isInMemory) {
                    await this._setItemFallback(key, value);
                    return
                }
                try {
                    await this._inst.set(key, value)
                } catch (err) {
                    this._MaybeSwitchToMemoryFallback(err);
                    if (isInMemory) await this._setItemFallback(key,
                        value);
                    else throw err;
                }
            }
            async removeItem(key, successCallback) {
                DISALLOW_CALLBACK(successCallback);
                if (isInMemory) {
                    this._removeItemFallback(key);
                    return
                }
                try {
                    await this._inst.delete(key)
                } catch (err) {
                    this._MaybeSwitchToMemoryFallback(err);
                    if (isInMemory) this._removeItemFallback(key);
                    else console.error(`Error removing '${key}' from storage: `, err)
                }
            }
            async clear(successCallback) {
                DISALLOW_CALLBACK(successCallback);
                if (isInMemory) {
                    this._clearFallback();
                    return
                }
                try {
                    await this._inst.clear()
                } catch (err) {
                    this._MaybeSwitchToMemoryFallback(err);
                    if (isInMemory) this._clearFallback();
                    else console.error(`Error clearing storage: `, err)
                }
            }
            async keys(successCallback) {
                DISALLOW_CALLBACK(successCallback);
                if (isInMemory) return this._keysFallback();
                let result = [];
                try {
                    result = await this._inst.keys()
                } catch (err) {
                    this._MaybeSwitchToMemoryFallback(err);
                    if (isInMemory) return this._keysFallback();
                    else console.error(`Error getting storage keys: `, err)
                }
                return result
            }
            ready(successCallback) {
                DISALLOW_CALLBACK(successCallback);
                if (isInMemory) return Promise.resolve(true);
                else return this._inst.ready()
            }
            createInstance(options) {
                if (typeof options !== "object") throw new TypeError("invalid options object");
                const name = options["name"];
                if (typeof name !== "string") throw new TypeError("invalid store name");
                const inst = new KVStorageContainer(name);
                return new ForageAdaptor(inst)
            }
            length(successCallback) {
                NOT_IMPLEMENTED("localforage.length()")
            }
            key(index, successCallback) {
                NOT_IMPLEMENTED("localforage.key()")
            }
            iterate(iteratorCallback, successCallback) {
                NOT_IMPLEMENTED("localforage.iterate()")
            }
            setDriver(driverName) {
                NOT_IMPLEMENTED("localforage.setDriver()")
            }
            config(options) {
                NOT_IMPLEMENTED("localforage.config()")
            }
            defineDriver(customDriver) {
                NOT_IMPLEMENTED("localforage.defineDriver()")
            }
            driver() {
                NOT_IMPLEMENTED("localforage.driver()")
            }
            supports(driverName) {
                NOT_IMPLEMENTED("localforage.supports()")
            }
            dropInstance() {
                NOT_IMPLEMENTED("localforage.dropInstance()")
            }
            disableMemoryMode() {
                isInMemory =
                    false
            }
        }
        self["localforage"] = new ForageAdaptor(new KVStorageContainer("localforage"))
    };

}

// ../lib/misc/supports.js
{
    'use strict';
    const C3 = self.C3;
    C3.Supports = {};
    C3.Supports.WebAnimations = (() => {
        try {
            if (C3.Platform.Browser === "Safari") return false;
            if (typeof document === "undefined") return false;
            const e = document.createElement("div");
            if (typeof e.animate === "undefined") return false;
            const player = e.animate([{
                opacity: "0"
            }, {
                opacity: "1"
            }], 1E3);
            return typeof player.reverse !== "undefined"
        } catch (e) {
            return false
        }
    })();
    C3.Supports.DialogElement = typeof HTMLDialogElement !== "undefined";
    C3.Supports.RequestIdleCallback = !!self.requestIdleCallback;
    C3.Supports.ImageBitmap = !!self.createImageBitmap;
    C3.Supports.ImageBitmapOptions = false;
    C3.Supports.ImageBitmapOptionsResize = false;
    if (C3.Supports.ImageBitmap) {
        try {
            self.createImageBitmap(new ImageData(32, 32), {
                "premultiplyAlpha": "none"
            }).then(() => {
                C3.Supports.ImageBitmapOptions = true
            }).catch(() => {
                C3.Supports.ImageBitmapOptions = false
            })
        } catch (err) {
            C3.Supports.ImageBitmapOptions = false
        }
        try {
            self.createImageBitmap(new ImageData(32, 32), {
                "resizeWidth": 10,
                "resizeHeight": 10
            }).then(imageBitmap => {
                C3.Supports.ImageBitmapOptionsResize = imageBitmap.width === 10 && imageBitmap.height === 10
            }).catch(() => {
                C3.Supports.ImageBitmapOptionsResize = false
            })
        } catch (err) {
            C3.Supports.ImageBitmapOptionsResize =
                false
        }
    }
    C3.Supports.ClipboardReadText = !!(navigator["clipboard"] && navigator["clipboard"]["readText"] && C3.Platform.Browser !== "Firefox");
    C3.Supports.PermissionsQuery = !!(navigator["permissions"] && navigator["permissions"]["query"]);
    C3.Supports.ClipboardPermissionsQuery = false;
    if (C3.Supports.PermissionsQuery) {
        const permission = {
            "name": "clipboard-read"
        };
        navigator["permissions"]["query"](permission).then(() => {
            C3.Supports.ClipboardPermissionsQuery = true
        }).catch(() => {
            C3.Supports.ClipboardPermissionsQuery = false
        })
    }
    C3.Supports.AsyncClipboardApi = !!(navigator["permissions"] && navigator["clipboard"] && self["ClipboardItem"]);
    C3.Supports.Proxies = typeof Proxy !== "undefined";
    C3.Supports.DownloadAttribute = (() => {
        if (typeof document === "undefined") return false;
        const a = document.createElement("a");
        return typeof a.download !== "undefined"
    })();
    C3.Supports.Fetch = typeof fetch === "function";
    C3.Supports.PersistentStorage = !!(self.isSecureContext && C3.Platform.Browser !== "Opera" && (navigator["storage"] && navigator["storage"]["persist"]));
    C3.Supports.StorageQuotaEstimate = !!(self.isSecureContext && (navigator["storage"] && navigator["storage"]["estimate"]));
    C3.Supports.Fullscreen = (() => {
        if (typeof document === "undefined") return false;
        if (C3.Platform.OS === "iOS") return false;
        const elem = document.documentElement;
        return !!(elem.requestFullscreen || elem.msRequestFullscreen || elem.mozRequestFullScreen || elem.webkitRequestFullscreen)
    })();
    C3.Supports.ImageDecoder = typeof self["ImageDecoder"] !== "undefined";
    C3.Supports.WebCodecs = !!self["VideoEncoder"];
    C3.Supports.NativeFileSystemAPI = !!self["showOpenFilePicker"];
    C3.Supports.QueryLocalFonts = !!self["queryLocalFonts"];
    C3.Supports.UserActivation = !!navigator["userActivation"];
    C3.Supports.CanvasToBlobWebP = false;
    (async () => {
        let canvas;
        if (typeof document === "undefined") canvas = new OffscreenCanvas(32, 32);
        else {
            canvas = document.createElement("canvas");
            canvas.width = 32;
            canvas.height = 32
        }
        const ctx = canvas.getContext("2d");
        ctx.fillStyle = "blue";
        ctx.fillRect(0, 0, 32, 32);
        let blob = null;
        try {
            if (canvas.toBlob) blob = await new Promise(resolve => canvas.toBlob(resolve, "image/webp", 1));
            else if (canvas["convertToBlob"]) blob = await canvas["convertToBlob"]({
                "type": "image/webp",
                "quality": 1
            });
            C3.Supports.CanvasToBlobWebP = blob && blob.type ===
                "image/webp"
        } catch (err) {
            C3.Supports.CanvasToBlobWebP = false
        }
    })();

}

// ../lib/misc/polyfills.js
{
    'use strict';
    const C3 = self.C3;
    if (!String.prototype.trimStart) {
        const startWhitespace = /^[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]*/;
        String.prototype.trimStart = function trimStart() {
            return this.replace(startWhitespace, "")
        }
    }
    if (!String.prototype.trimEnd) {
        const endWhitespace = /[\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF]*$/;
        String.prototype.trimEnd = function trimEnd() {
            return this.replace(endWhitespace, "")
        }
    }
    if (!String.prototype.replaceAll) String.prototype.replaceAll = function replaceAll(find, replace) {
        return this.replace(new RegExp(C3.EscapeRegex(find), "g"), replace)
    };
    if (!Array.prototype.values) Array.prototype.values = function*() {
        for (const i of this) yield i
    };
    if (!Array.prototype.flat) {
        function arrayFlat(arr, depth) {
            return arr.reduce((acc, val) => {
                if (depth > 0 && Array.isArray(val)) {
                    Array.prototype.push.apply(acc, arrayFlat(val, depth - 1));
                    return acc
                } else {
                    acc.push(val);
                    return acc
                }
            }, [])
        }
        Array.prototype.flat = function(depth = 1) {
            return arrayFlat(this, depth)
        }
    }
    if (!Array.prototype.at) Array.prototype.at = function at(n) {
        n = Math.trunc(n) || 0;
        if (n < 0) n += this.length;
        if (n < 0 || n >= this.length) return undefined;
        return this[n]
    };
    if (!String.prototype.at) String.prototype.at = function at(n) {
        n = Math.trunc(n) || 0;
        if (n < 0) n += this.length;
        if (n < 0 || n >= this.length) return undefined;
        return this[n]
    };
    if (!RegExp.escape) RegExp.escape = function(s) {
        return String(s).replace(/[\\^$*+?.()|[\]{}]/g, "\\$&")
    };
    if (navigator["storage"] && !navigator["storage"]["estimate"] && navigator["webkitTemporaryStorage"] && navigator["webkitTemporaryStorage"]["queryUsageAndQuota"]) navigator["storage"]["estimate"] = function() {
        return new Promise((resolve, reject) => {
            return navigator["webkitTemporaryStorage"]["queryUsageAndQuota"]((usage, quota) => resolve({
                "usage": usage,
                "quota": quota
            }), reject)
        })
    };
    if (typeof self.isSecureContext === "undefined") self.isSecureContext = location.protocol === "https:";
    if (typeof self["globalThis"] === "undefined") self["globalThis"] = self;

}

// lib/misc/assert.js
{
    'use strict';
    const C3 = self.C3;

    function assertFail(msg_) {
        let stack = C3.GetCallStack();
        let msg = "Assertion failure: " + msg_ + "\n\nStack trace:\n" + stack;
        console.error(msg)
    }
    self.assert = function assert(cnd_, msg_) {
        if (!cnd_) assertFail(msg_)
    };

}

// ../lib/misc/typeChecks.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    C3.IsNumber = function IsNumber(x) {
        return typeof x === "number"
    };
    C3.IsFiniteNumber = function IsFiniteNumber(x) {
        return C3.IsNumber(x) && isFinite(x)
    };
    C3.RequireNumber = function RequireNumber(x) {
        if (!C3.IsNumber(x)) throw new TypeError("expected number");
    };
    C3.RequireOptionalNumber = function RequireOptionalNumber(x) {
        if (C3.IsNullOrUndefined(x)) return
    };
    C3.RequireNumberInRange = function RequireNumberInRange(x, low, high) {
        if (!C3.IsNumber(x) || isNaN(x) || low > x || high < x) throw new RangeError("number outside of range");
    };
    C3.RequireAllNumber = function RequireAllNumber(...args) {
        for (let a of args);
    };
    C3.RequireFiniteNumber = function RequireFiniteNumber(x) {
        if (!C3.IsFiniteNumber(x)) throw new TypeError("expected finite number");
    };
    C3.RequireOptionalFiniteNumber = function RequireOptionalFiniteNumber(x) {
        if (C3.IsNullOrUndefined(x)) return
    };
    C3.RequireAllFiniteNumber = function RequireAllFiniteNumber(...args) {
        for (let a of args);
    };
    C3.IsString = function IsString(x) {
        return typeof x === "string"
    };
    C3.RequireString = function RequireString(x) {
        if (!C3.IsString(x)) throw new TypeError("expected string");
    };
    C3.RequireOptionalString = function RequireOptionalString(x) {
        if (C3.IsNullOrUndefined(x)) return
    };
    C3.RequireAllString = function RequireAllString(...args) {
        for (let a of args);
    };
    C3.IsSimpleObject = function IsSimpleObject(x) {
        if (typeof x !== "object" || x === null) return false;
        let proto = Object.getPrototypeOf(x);
        return proto ? proto.constructor === Object : proto === null
    };
    C3.RequireSimpleObject = function RequireSimpleObject(x) {
        if (!C3.IsSimpleObject(x)) throw new TypeError("expected simple object");
    };
    C3.RequireOptionalSimpleObject = function RequireSimpleObject(x) {
        if (C3.IsNullOrUndefined(x)) return;
        if (!C3.IsSimpleObject(x)) throw new TypeError("expected simple object");
    };
    C3.IsObject = function IsObject(x) {
        return typeof x === "object" && x !== null && !Array.isArray(x)
    };
    C3.RequireObject = function RequireObject(x) {
        if (!C3.IsObject(x)) throw new TypeError("expected object");
    };
    C3.RequireOptionalObject = function RequireOptionalObject(x) {
        if (C3.IsNullOrUndefined(x)) return
    };
    C3.RequireAllObject = function RequireAllObject(...args) {
        for (let a of args);
    };
    C3.IsFileLike = function IsFileLike(x) {
        return C3.WeakIsInstanceOf(x, Blob) && typeof x["name"] === "string"
    };
    C3.RequireFileLike = function RequireFileLike(x) {
        if (!C3.IsFileLike(x)) throw new TypeError("expected file");
    };
    C3.RequireOptionalFileLike = function RequireOptionalFileLike(x) {
        if (C3.IsNullOrUndefined(x)) return
    };
    C3.IsArray = function IsArray(x) {
        return Array.isArray(x)
    };
    C3.RequireArray = function RequireArray(x) {
        if (!C3.IsArray(x)) throw new TypeError("expected array");
    };
    C3.RequireOptionalArray = function RequireOptionalArray(x) {
        if (C3.IsNullOrUndefined(x)) return
    };
    C3.RequireAllArray = function RequireAllArray(...args) {
        for (let a of args);
    };
    C3.Is2DArray = function(x) {
        if (!C3.IsArray(x)) return false;
        if (!x.length) return true;
        if (!C3.IsArray(x[0])) return false;
        return true
    };
    C3.Require2DArray = function Require2DArray(x) {
        if (!C3.Is2DArray(x)) throw new TypeError("expected 2d array");
        for (let arr of x)
            if (!C3.IsArray(arr)) throw new TypeError("expected 2d array");
    };
    C3.RequireOptional2DArray = function Require2DArray(x) {
        if (C3.IsNullOrUndefined(x)) return
    };
    C3.IsFunction = function IsFunction(x) {
        return typeof x === "function"
    };
    C3.RequireFunction = function RequireFunction(x, f) {
        if (!C3.IsFunction(x)) throw new TypeError("expected function");
        if (!C3.IsNullOrUndefined(f))
            if (x !== f) throw new TypeError("expected same function reference");
    };
    C3.RequireOptionalFunction = function RequireOptionalFunction(x) {
        if (C3.IsNullOrUndefined(x)) return
    };
    C3.RequireAllFunction = function RequireAllFunction(...args) {
        for (let a of args);
    };
    C3.RequireAnyFunction = function RequireAllFunction(x, ...args) {
        if (!C3.IsFunction(x)) throw new TypeError("expected function");
        if (!args.length) throw new Error("missing comparison functions");
        for (let a of args)
            if (!C3.IsNullOrUndefined(a))
                if (x === a) return;
        throw new TypeError("expected same function reference");
    };
    C3.RequireOptionalAllFunction = function RequireAllFunction(...args) {
        if (C3.IsNullOrUndefined(args)) return;
        for (let a of args);
    };
    C3.IsInstanceOf = function IsInstanceOf(x, t) {
        return x instanceof t
    };
    C3.IsInstanceOfAny = function IsInstanceOfAny(x, ...args) {
        for (let t of args)
            if (C3.IsInstanceOf(x, t)) return true;
        return false
    };
    C3.RequireInstanceOf = function RequireInstanceOf(x, t) {
        if (!C3.IsInstanceOf(x, t)) throw new TypeError("unexpected type");
    };
    C3.RequireOptionalInstanceOf = function RequireOptionalInstanceOf(x, t) {
        if (C3.IsNullOrUndefined(x)) return
    };
    C3.RequireAllInstanceOf = function RequireAllInstanceOf(t, ...args) {
        for (let a of args);
    };
    C3.RequireAnyInstanceOf = function RequireAnyInstanceOf(x, ...args) {
        if (!C3.IsInstanceOfAny(x, ...args)) throw new TypeError("unexpected type");
    };
    C3.RequireAnyOptionalInstanceOf = function RequireAnyOptionalInstanceOf(x, ...args) {
        if (C3.IsNullOrUndefined(x)) return;
        if (!C3.IsInstanceOfAny(x, ...args)) throw new TypeError("unexpected type");
    };
    C3.IsArrayOf = function IsArrayOf(x, t) {
        for (let i of x)
            if (!C3.IsInstanceOf(i, t)) return false;
        return true
    };
    C3.IsArrayOfFiniteNumbers = function IsArrayOfFiniteNumbers(x) {
        for (let i of x)
            if (!C3.IsFiniteNumber(i)) return false;
        return true
    };
    C3.RequireArrayOf = function RequireArrayOf(x, t) {
        for (let i of x);
    };
    C3.RequireOptionalArrayOf = function RequireOptionalArrayOf(x, t) {
        if (C3.IsNullOrUndefined(x)) return;
        for (let i of x);
    };
    C3.RequireArrayOfAny = function RequireArrayOf(x, ...args) {
        for (let i of x);
    };
    C3.RequireOptionalArrayOfAny = function RequireOptionalArrayOfAny(x, ...args) {
        if (C3.IsNullOrUndefined(x)) return;
        for (let i of x);
    };
    C3.IsDOMNode = function IsDOMNode(d, n) {
        if (C3.IsNullOrUndefined(d) || !C3.IsString(d.nodeName)) return false;
        return !n || C3.equalsNoCase(d.nodeName, n)
    };
    C3.RequireDOMNode = function RequireDOMNode(d, n) {
        if (C3.IsNullOrUndefined(d) || !C3.IsString(d.nodeName)) throw new TypeError("expected DOM node");
        if (n && !C3.equalsNoCase(d.nodeName, n)) throw new TypeError(`expected DOM '${n}' node`);
    };
    C3.RequireOptionalDOMNode = function RequireOptionalDOMNode(d, n) {
        if (C3.IsNullOrUndefined(d)) return
    };
    C3.IsHTMLElement = function IsHTMLElement(e, t) {
        if (C3.IsNullOrUndefined(e) || !C3.IsString(e.tagName)) return false;
        return !t || C3.equalsNoCase(e.tagName, t)
    };
    C3.RequireHTMLElement = function RequireHTMLElement(e, t) {
        if (C3.IsNullOrUndefined(e) || !C3.IsString(e.tagName)) throw new TypeError("expected HTML element");
        if (t && !C3.equalsNoCase(e.tagName, t)) throw new TypeError(`expected HTML '${t}' element`);
    };
    C3.RequireOptionalHTMLElement = function RequireOptionalHTMLElement(e, t) {
        if (C3.IsNullOrUndefined(e)) return
    };
    C3.IsDrawable = function IsDrawable(d) {
        return C3.IsHTMLElement(d, "img") || C3.IsHTMLElement(d, "canvas") || C3.IsHTMLElement(d, "video") || typeof OffscreenCanvas !== "undefined" && d instanceof OffscreenCanvas || typeof ImageBitmap !== "undefined" && d instanceof ImageBitmap
    };
    C3.RequireDrawable = function RequireDrawable(d) {
        if (!C3.IsDrawable(d)) throw new TypeError("expected drawable");
    };
    C3.RequireOptionalDrawable = function RequireOptionalDrawable(d) {
        if (C3.IsNullOrUndefined(d)) return
    };
    C3.IsDrawableOrImageData = function IsDrawableOrImageData(x) {
        if (x instanceof ImageData) return true;
        return C3.IsDrawable(x)
    };
    C3.RequireDrawableOrImageData = function RequireDrawableOrImageData(d) {
        if (!C3.IsDrawableOrImageData(d)) throw new TypeError("expected drawable or image data");
    };
    C3.RequireOptionalDrawableOrImageData = function RequireOptionalDrawableOrImageData(d) {
        if (C3.IsNullOrUndefined(d)) return;
        if (!C3.IsDrawableOrImageData(d)) throw new TypeError("expected drawable or image data");
    };
    C3.IsStringLike = function IsStringLike(x) {
        return typeof x === "string" || C3.HtmlString && x instanceof C3.HtmlString || x instanceof C3.BBString
    };
    C3.RequireStringLike = function RequireStringLike(x) {
        if (!C3.IsStringLike(x)) throw new TypeError("expected string-like");
    };
    C3.RequireOptionalStringLike = function RequireOptionalStringLike(x) {
        if (C3.IsNullOrUndefined(x)) return
    };
    C3.RequireAllStringLike = function RequireAllStringLike(...args) {
        for (let a of args);
    };
    C3.RequireOverride = function RequireOverride() {
        throw new Error("must be overridden");
    };
    C3.NotYetImplemented = function NotYetImplemented() {
        throw new Error("not yet implemented");
    };
    C3.IsDefined = function isDefined(obj, ...follow) {
        let currentObject = obj;
        if (typeof currentObject === "undefined") return false;
        for (let key of follow) {
            if (typeof currentObject[key] === "undefined") return false;
            currentObject = currentObject[key]
        }
        return true
    };
    C3.IsNullOrUndefined = function(x) {
        return typeof x === "undefined" || x === null
    };
    C3.AreArrayElementsOfSameType = function(arr) {
        let type = arr[0].constructor;
        for (let x of arr)
            if (x.constructor !== type) return false;
        return type
    };
    C3.AreArrayElementsOfType = function(arr, t) {
        for (let x of arr)
            if (!(x instanceof t)) return false;
        return true
    };
    const TypedArray = Object.getPrototypeOf(Uint8Array);
    C3.IsTypedArray = function(view) {
        return C3.IsInstanceOf(view, TypedArray)
    };
    C3.RequireTypedArray = function(view) {};
    C3.WeakRequireTypedArray = function WeakRequireTypedArray(inst) {
        C3.WeakRequireInstanceOf(inst, TypedArray)
    };
    C3.WeakRequireAnyInstanceOf = function WeakRequireAnyInstanceOf(inst, ...ctors) {
        if (!C3.WeakIsAnyInstanceOf(inst, ...ctors)) throw new TypeError("unexpected type");
    };
    C3.WeakIsAnyInstanceOf = function WeakIsAnyInstanceOf(inst, ...ctors) {
        for (const ctor of ctors)
            if (C3.WeakIsInstanceOf(inst, ctor)) return true;
        return false
    };
    C3.WeakRequireInstanceOf = function WeakRequireInstanceOf(inst, ctor) {
        if (!C3.WeakIsInstanceOf(inst, ctor)) throw new TypeError("unexpected type");
    };
    C3.WeakIsInstanceOf = function WeakIsInstanceOf(inst, ctor) {
        while (inst = Object.getPrototypeOf(inst))
            if (inst.constructor.name === ctor.name) return true;
        return false
    };
    C3X.RequireNumber = C3.RequireNumber;
    C3X.RequireOptionalNumber = C3.RequireOptionalNumber;
    C3X.RequireFiniteNumber = C3.RequireFiniteNumber;
    C3X.RequireOptionalFiniteNumber = C3.RequireOptionalFiniteNumber;
    C3X.RequireString = C3.RequireString;
    C3X.RequireOptionalString = C3.RequireOptionalString;
    C3X.RequireObject = C3.RequireObject;
    C3X.RequireOptionalObject = C3.RequireOptionalObject;
    C3X.RequireArray = C3.RequireArray;
    C3X.RequireOptionalArray = C3.RequireOptionalArray;
    C3X.RequireFunction = C3.RequireFunction;
    C3X.RequireOptionalFunction = C3.RequireOptionalFunction;
    C3X.RequireInstanceOf = C3.RequireInstanceOf;
    C3X.RequireOptionalInstanceOf = C3.RequireOptionalInstanceOf;
    C3X.IsNullOrUndefined = C3.IsNullOrUndefined;

}

// ../lib/misc/jsutil.js
{
    'use strict';
    const C3 = self.C3;
    const logRafIds = new Map;
    C3.ColorLog = function(message, color) {
        console.log(`%c${message}`, `font-weight: bold; color:${color}`)
    };
    C3.RafLog = function RaFLog(name, ...args) {
        if (!logRafIds.has(name)) logRafIds.set(name, -1);
        if (logRafIds.get(name) === -1) logRafIds.set(name, requestAnimationFrame(() => {
            console.log(`%c${name}`, "font-weight: bold", ...args);
            logRafIds.set(name, -1)
        }))
    };
    let measures;
    C3.StartMeasure = function StartMeasure(name) {
        performance.mark(name);
        if (!measures) measures = new Map;
        if (!measures.has(name)) measures.set(name, {
            current: 0,
            total: 0,
            average: 0,
            calls: 1,
            toString: function() {
                return `${name} :: current => ${this.current.toPrecision(3)} :: average => ${this.average.toPrecision(3)} :: calls => ${this.calls}`
            }
        })
    };
    C3.EndMeasure = function EndMeasure(name) {
        performance.measure(`measure-${name}`, name);
        const entry = performance.getEntriesByName(`measure-${name}`)[0];
        const m = measures.get(name);
        m.current = entry.duration;
        m.total += m.current;
        m.average = m.total / m.calls;
        console.log(m.toString());
        m.calls++;
        performance.clearMarks(name);
        performance.clearMeasures(`measure-${name}`)
    };
    C3.GetCallStack = function GetCallStack() {
        return (new Error).stack
    };
    C3.Debugger = function Debugger() {
        debugger
    };
    C3.cast = function cast(o, T) {
        if (o && o instanceof T) return o;
        else return null
    };
    C3.getName = function getName(o) {
        if (typeof o === "undefined") return "undefined";
        if (o === null) return "null";
        if (typeof o === "boolean") return "<boolean>";
        if (C3.IsNumber(o)) return "<number>";
        if (C3.IsString(o)) return "<string>";
        if (C3.IsArray(o)) return "<array>";
        if (typeof o === "symbol") return "<" + o.toString() + ">";
        if (C3.IsFunction(o)) {
            if (o.name && o.name !== "Function") return o.name;
            return "<anonymous function>"
        }
        if (typeof o === "object") {
            if (o.constructor && o.constructor.name && o.constructor.name !== "Object") return o.constructor.name;
            return "<anonymous object>"
        }
        return "<unknown>"
    };
    C3.getType = function getType(o) {
        if (o === null) return "null";
        if (Array.isArray(o)) return "array";
        return typeof o
    };
    C3.range = function* range(a, b) {
        if (!isFinite(Math.abs(a - b))) throw new Error("Invalid parameters");
        if (a > b)
            for (let i = a - 1; i >= b; i--) yield i;
        else
            for (let i = a; i < b; i++) yield i
    };

    function isValidTypeChange(from, to) {
        let fromType = C3.getType(from);
        let toType = C3.getType(to);
        if (fromType === "null" || toType === "null") return true;
        if (fromType === "undefined" || toType === "undefined") return false;
        return fromType === toType
    }
    let ctorObjectToProxy = new Map;
    let ctorProxyToObject = new Map;
    let proxyToObject = new WeakMap;
    let releasedObjects = new WeakMap;
    C3.DefendHandler = {};
    const VALID_GET_MISSING_KEYS = new Set(["then", "splice"]);

    function logDefendedObjectWarning(msg) {
        console.warn("[Defence] " + msg + " @", C3.GetCallStack())
    }
    C3.DefendHandler.get = function defended_get(target, key) {
        if (!(key in target) && typeof key !== "symbol" && !VALID_GET_MISSING_KEYS.has(key)) logDefendedObjectWarning(`Accessed missing property '${key}' from defended object '${C3.getName(target)}', returning undefined`);
        if (releasedObjects.has(target) && typeof key !== "symbol" && !VALID_GET_MISSING_KEYS.has(key)) logDefendedObjectWarning(`Accessed property '${key}' on a released object '${C3.getName(target)}'\nObject was originally released at: ${releasedObjects.get(target)})\nCall stack at access: `);
        return target[key]
    };
    C3.DefendHandler.set = function defended_set(target, key, value) {
        if (!(key in target) && !ctorObjectToProxy.has(target)) logDefendedObjectWarning(`Set non-existent property '${key}' to '${value}' on defended object '${C3.getName(target)}'`);
        if (!isValidTypeChange(target[key], value) && !ctorObjectToProxy.has(target)) logDefendedObjectWarning(`Set '${C3.getType(target[key])}' property '${key}' to type '${C3.getType(value)}' on defended object '${C3.getName(target)}'`);
        if (releasedObjects.has(target)) logDefendedObjectWarning(`Set property '${key}' on a released object '${C3.getName(target)}'\nObject was originally released at: ${releasedObjects.get(target)})\nCall stack at access: `);
        target[key] = value;
        return true
    };
    C3.DefendHandler.deleteProperty = function defended_deleteProperty(target, key) {
        throw new ReferenceError(`Cannot delete property '${key}' from defended object '${C3.getName(target)}'`);
    };
    C3.DefendHandler.defineProperty = function defended_defineProperty(target, key, desc) {
        throw new ReferenceError(`Cannot define property '${key}' on defended object '${C3.getName(target)}'`);
    };
    C3.DefendHandler.enumerate = function defended_enumerate(target) {
        throw new ReferenceError(`Cannot enumerate defended object '${C3.getName(target)}'`);
    };
    let checkRafId = -1;

    function CheckDefendedObjectsUsedCorrectly() {
        checkRafId = -1;
        if (ctorObjectToProxy.size > 0 || ctorProxyToObject.size > 0) {
            let uniqueNames = new Set([...ctorObjectToProxy.keys()].map(o => C3.getName(o)));
            let leftoverNames = [...uniqueNames].join(",");
            console.warn(`An object derived from DefendedBase was not protected with debugDefend(). This will disable some checks. See the coding guidelines! Possible affected class names: ${leftoverNames}`);
            ctorObjectToProxy.clear();
            ctorProxyToObject.clear()
        }
    }
    C3.DefendedBase = class DefendedBase {
        constructor() {
            if (!C3.isDebugDefend || !C3.Supports.Proxies) return;
            let newTarget = new.target;
            let realObject = Object.create(newTarget.prototype);
            let proxy = new Proxy(realObject, C3.DefendHandler);
            ctorObjectToProxy.set(realObject, proxy);
            ctorProxyToObject.set(proxy, realObject);
            proxyToObject.set(proxy, realObject);
            if (checkRafId === -1) checkRafId = requestAnimationFrame(CheckDefendedObjectsUsedCorrectly);
            return proxy
        }
    };
    C3.debugDefend = function debugDefend(o) {
        if (C3.isDebugDefend && C3.Supports.Proxies && o instanceof C3.DefendedBase) {
            if (!ctorProxyToObject.has(o)) return o;
            let realObject = ctorProxyToObject.get(o);
            ctorProxyToObject.delete(o);
            ctorObjectToProxy.delete(realObject);
            return o
        } else if (C3.isDebug) return Object.seal(o);
        else return o
    };
    C3.New = function New(Type, ...args) {
        let o;
        try {
            o = new Type(...args)
        } catch (e) {
            ctorProxyToObject.clear();
            ctorObjectToProxy.clear();
            throw e;
        }
        if (C3.isDebugDefend) VerifyObjectPropertiesConsistent(Type, o);
        return C3.debugDefend(o)
    };
    C3.Release = function Release(o) {
        let realObject = proxyToObject.get(o);
        if (realObject) releasedObjects.set(realObject, C3.GetCallStack())
    };
    C3.WasReleased = function(o) {
        let realObject = proxyToObject.get(o);
        if (!realObject) return false;
        return !!releasedObjects.get(realObject)
    };
    let typeProperties = new Map;

    function getObjectPropertySet(o) {
        let ret = new Set;
        for (let k in o) ret.add(k);
        return ret
    }

    function VerifyObjectPropertiesConsistent(Type, o) {
        let properties = getObjectPropertySet(o);
        let existingProperties = typeProperties.get(Type);
        if (existingProperties) {
            let inconsistentProperties = [];
            for (let k of existingProperties.values())
                if (properties.has(k)) properties.delete(k);
                else inconsistentProperties.push(k);
            C3.appendArray(inconsistentProperties, [...properties]);
            if (inconsistentProperties.length) console.warn(`[Defence] '${C3.getName(Type)}' constructor creates inconsistent properties: ${inconsistentProperties.join(", ")}`)
        } else typeProperties.set(Type, properties)
    }
    C3.PerfMark = class PerfMark {
        constructor(name) {
            this._name = "";
            if (name) this.start(name)
        }
        start(name) {
            if (!C3.isPerformanceProfiling) return;
            this._name = name;
            performance.mark(this._name + "-Start")
        }
        end() {
            if (!C3.isPerformanceProfiling) return;
            performance.mark(this._name + "-End");
            performance.measure(this._name, this._name + "-Start", this._name + "-End")
        }
        next(name) {
            if (!C3.isPerformanceProfiling) return;
            this.end();
            this._name = name;
            performance.mark(this._name + "-Start")
        }
    };

}

// ../lib/misc/mathutil.js
{
    'use strict';
    const C3 = self.C3;
    const TWO_PI = Math.PI * 2;
    const D_TO_R = Math.PI / 180;
    const R_TO_D = 180 / Math.PI;
    C3.wrap = function wrap(x, min, max) {
        x = Math.floor(x);
        min = Math.floor(min);
        max = Math.floor(max);
        const diff = max - min;
        if (diff === 0) return max;
        if (x < min) {
            const r = max - (min - x) % diff;
            return r === max ? 0 : r
        } else return min + (x - min) % diff
    };
    C3.mapToRange = function mapToRange(x, inMin, inMax, outMin, outMax) {
        return (x - inMin) * (outMax - outMin) / (inMax - inMin) + outMin
    };
    C3.normalize = function normalize(value, minimum, maximum) {
        return (value - minimum) / (maximum - minimum)
    };
    C3.clamp = function clamp(x, a, b) {
        if (x < a) return a;
        else if (x > b) return b;
        else return x
    };
    C3.clampAngle = function clampAngle(a) {
        a %= TWO_PI;
        if (a < 0) a += TWO_PI;
        return a
    };
    C3.toRadians = function toRadians(x) {
        return x * D_TO_R
    };
    C3.toDegrees = function toDegrees(x) {
        return x * R_TO_D
    };
    C3.distanceTo = function distanceTo(x1, y1, x2, y2) {
        return Math.hypot(x2 - x1, y2 - y1)
    };
    C3.distanceSquared = function distanceSquared(x1, y1, x2, y2) {
        const dx = x2 - x1;
        const dy = y2 - y1;
        return dx * dx + dy * dy
    };
    C3.angleTo = function angleTo(x1, y1, x2, y2) {
        return Math.atan2(y2 - y1, x2 - x1)
    };
    C3.angleDiff = function angleDiff(a1, a2) {
        if (a1 === a2) return 0;
        let s1 = Math.sin(a1);
        let c1 = Math.cos(a1);
        let s2 = Math.sin(a2);
        let c2 = Math.cos(a2);
        let n = s1 * s2 + c1 * c2;
        if (n >= 1) return 0;
        if (n <= -1) return Math.PI;
        return Math.acos(n)
    };
    C3.angleRotate = function angleRotate(start, end, step) {
        let ss = Math.sin(start);
        let cs = Math.cos(start);
        let se = Math.sin(end);
        let ce = Math.cos(end);
        if (Math.acos(ss * se + cs * ce) > step)
            if (cs * se - ss * ce > 0) return C3.clampAngle(start + step);
            else return C3.clampAngle(start - step);
        else return C3.clampAngle(end)
    };
    C3.angleClockwise = function angleClockwise(a1, a2) {
        let s1 = Math.sin(a1);
        let c1 = Math.cos(a1);
        let s2 = Math.sin(a2);
        let c2 = Math.cos(a2);
        return c1 * s2 - s1 * c2 <= 0
    };
    C3.angleLerp = function angleLerp(a, b, x, r = 0) {
        let diff = C3.angleDiff(a, b);
        const revs = TWO_PI * r;
        if (C3.angleClockwise(b, a)) return C3.clampAngle(a + (diff + revs) * x);
        else return C3.clampAngle(a - (diff + revs) * x)
    };
    C3.angleLerpClockwise = function angleLerpClockwise(a, b, x, r = 0) {
        const diff = C3.angleDiff(a, b);
        const revs = TWO_PI * r;
        if (C3.angleClockwise(b, a)) return C3.clampAngle(a + (diff + revs) * x);
        return C3.clampAngle(a + (TWO_PI - diff + revs) * x)
    };
    C3.angleLerpAntiClockwise = function angleLerpAntiClockwise(a, b, x, r = 0) {
        const diff = C3.angleDiff(a, b);
        const revs = TWO_PI * r;
        if (C3.angleClockwise(b, a)) return C3.clampAngle(a - (-TWO_PI + diff - revs) * x);
        return C3.clampAngle(a - (diff + revs) * x)
    };
    C3.angleReflect = function angleReflect(a, b) {
        const diff = C3.angleDiff(a, b);
        if (C3.angleClockwise(a, b)) return C3.clampAngle(b - diff);
        else return C3.clampAngle(b + diff)
    };
    C3.lerp = function lerp(a, b, x) {
        return a + x * (b - a)
    };
    C3.unlerp = function unlerp(a, b, x) {
        if (a === b) return 0;
        return (x - a) / (b - a)
    };
    C3.relerp = function relerp(a, b, x, c, d) {
        return C3.lerp(c, d, C3.unlerp(a, b, x))
    };
    C3.qarp = function qarp(a, b, c, x) {
        return C3.lerp(C3.lerp(a, b, x), C3.lerp(b, c, x), x)
    };
    C3.cubic = function cubic(a, b, c, d, x) {
        return C3.lerp(C3.qarp(a, b, c, x), C3.qarp(b, c, d, x), x)
    };
    C3.cosp = function cosp(a, b, x) {
        return (a + b + (a - b) * Math.cos(x * Math.PI)) / 2
    };
    C3.isPOT = function isPOT(x) {
        return x > 0 && (x - 1 & x) === 0
    };
    C3.nextHighestPowerOfTwo = function nextHighestPowerOfTwo(x) {
        --x;
        for (let i = 1; i < 32; i <<= 1) x = x | x >> i;
        return x + 1
    };
    C3.roundToNearestFraction = function roundToNearestFraction(x, n) {
        return Math.round(x * n) / n
    };
    C3.floorToNearestFraction = function floorToNearestFraction(x, n) {
        return Math.floor(x * n) / n
    };
    C3.roundToDp = function roundToDp(x, dp) {
        dp = Math.max(Math.floor(dp), 0);
        const m = Math.pow(10, dp);
        return Math.round(x * m) / m
    };
    C3.toFixed = function toFixed(n, dp) {
        let ret = n.toFixed(dp);
        let last = ret.length - 1;
        for (; last >= 0 && ret.charAt(last) === "0"; --last);
        if (last >= 0 && ret.charAt(last) === ".") --last;
        if (last < 0) return ret;
        return ret.substr(0, last + 1)
    };
    C3.PackRGB = function PackRGB(red, green, blue) {
        return C3.clamp(red, 0, 255) | C3.clamp(green, 0, 255) << 8 | C3.clamp(blue, 0, 255) << 16
    };
    const ALPHAEX_SHIFT = 1024;
    const ALPHAEX_MAX = 1023;
    const RGBEX_SHIFT = 16384;
    const RGBEX_MAX = 8191;
    const RGBEX_MIN = -8192;
    C3.PackRGBAEx = function PackRGBAEx(red, green, blue, alpha) {
        red = C3.clamp(Math.floor(red * 1024), RGBEX_MIN, RGBEX_MAX);
        green = C3.clamp(Math.floor(green * 1024), RGBEX_MIN, RGBEX_MAX);
        blue = C3.clamp(Math.floor(blue * 1024), RGBEX_MIN, RGBEX_MAX);
        alpha = C3.clamp(Math.floor(alpha * ALPHAEX_MAX), 0, ALPHAEX_MAX);
        if (red < 0) red += RGBEX_SHIFT;
        if (green < 0) green += RGBEX_SHIFT;
        if (blue < 0) blue += RGBEX_SHIFT;
        return -(red * RGBEX_SHIFT * RGBEX_SHIFT * ALPHAEX_SHIFT + green * RGBEX_SHIFT * ALPHAEX_SHIFT + blue * ALPHAEX_SHIFT + alpha)
    };
    C3.PackRGBEx = function PackRGBEx(red, green, blue) {
        return C3.PackRGBAEx(red, green, blue, 1)
    };

    function isNegativeZero(x) {
        return x === 0 && 1 / x < 0
    }
    C3.GetRValue = function GetRValue(rgb) {
        if (rgb >= 0) return (rgb & 255) / 255;
        else {
            let v = Math.floor(-rgb / (RGBEX_SHIFT * RGBEX_SHIFT * ALPHAEX_SHIFT));
            if (v > RGBEX_MAX) v -= RGBEX_SHIFT;
            return v / 1024
        }
    };
    C3.GetGValue = function GetGValue(rgb) {
        if (rgb >= 0) return ((rgb & 65280) >> 8) / 255;
        else {
            let v = Math.floor(-rgb % (RGBEX_SHIFT * RGBEX_SHIFT * ALPHAEX_SHIFT) / (RGBEX_SHIFT * ALPHAEX_SHIFT));
            if (v > RGBEX_MAX) v -= RGBEX_SHIFT;
            return v / 1024
        }
    };
    C3.GetBValue = function GetBValue(rgb) {
        if (rgb >= 0) return ((rgb & 16711680) >> 16) / 255;
        else {
            let v = Math.floor(-rgb % (RGBEX_SHIFT * ALPHAEX_SHIFT) / ALPHAEX_SHIFT);
            if (v > RGBEX_MAX) v -= RGBEX_SHIFT;
            return v / 1024
        }
    };
    C3.GetAValue = function GetAValue(rgb) {
        if (isNegativeZero(rgb)) return 0;
        else if (rgb >= 0) return 1;
        else {
            const v = Math.floor(-rgb % ALPHAEX_SHIFT);
            return v / ALPHAEX_MAX
        }
    };
    C3.greatestCommonDivisor = function greatestCommonDivisor(a, b) {
        a = Math.floor(a);
        b = Math.floor(b);
        while (b !== 0) {
            let t = b;
            b = a % b;
            a = t
        }
        return a
    };
    const COMMON_ASPECT_RATIOS = [
        [3, 2],
        [4, 3],
        [5, 4],
        [5, 3],
        [6, 5],
        [14, 9],
        [16, 9],
        [16, 10],
        [21, 9]
    ];
    C3.getAspectRatio = function getAspectRatio(w, h) {
        w = Math.floor(w);
        h = Math.floor(h);
        if (w === h) return [1, 1];
        for (let aspect of COMMON_ASPECT_RATIOS) {
            let approxH = w / aspect[0] * aspect[1];
            if (Math.abs(h - approxH) < 1) return aspect.slice(0);
            approxH = w / aspect[1] * aspect[0];
            if (Math.abs(h - approxH) < 1) return [aspect[1], aspect[0]]
        }
        let gcd = C3.greatestCommonDivisor(w, h);
        return [w / gcd, h / gcd]
    };
    C3.segmentsIntersect = function segmentsIntersect(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y) {
        const min_ax = Math.min(a1x, a2x);
        const max_ax = Math.max(a1x, a2x);
        const min_bx = Math.min(b1x, b2x);
        const max_bx = Math.max(b1x, b2x);
        if (max_ax < min_bx || min_ax > max_bx) return false;
        const min_ay = Math.min(a1y, a2y);
        const max_ay = Math.max(a1y, a2y);
        const min_by = Math.min(b1y, b2y);
        const max_by = Math.max(b1y, b2y);
        if (max_ay < min_by || min_ay > max_by) return false;
        const dpx = b1x - a1x + b2x - a2x;
        const dpy = b1y - a1y + b2y - a2y;
        const qax = a2x - a1x;
        const qay = a2y -
            a1y;
        const qbx = b2x - b1x;
        const qby = b2y - b1y;
        const d = Math.abs(qay * qbx - qby * qax);
        const la = qbx * dpy - qby * dpx;
        if (Math.abs(la) > d) return false;
        const lb = qax * dpy - qay * dpx;
        return Math.abs(lb) <= d
    };
    C3.segmentsIntersectPreCalc = function segmentsIntersectPreCalc(a1x, a1y, a2x, a2y, min_ax, max_ax, min_ay, max_ay, b1x, b1y, b2x, b2y) {
        const min_bx = Math.min(b1x, b2x);
        const max_bx = Math.max(b1x, b2x);
        if (max_ax < min_bx || min_ax > max_bx) return false;
        const min_by = Math.min(b1y, b2y);
        const max_by = Math.max(b1y, b2y);
        if (max_ay < min_by || min_ay > max_by) return false;
        const dpx = b1x - a1x + b2x - a2x;
        const dpy = b1y - a1y + b2y - a2y;
        const qax = a2x - a1x;
        const qay = a2y - a1y;
        const qbx = b2x - b1x;
        const qby = b2y - b1y;
        const d = Math.abs(qay * qbx - qby * qax);
        const la =
            qbx * dpy - qby * dpx;
        if (Math.abs(la) > d) return false;
        const lb = qax * dpy - qay * dpx;
        return Math.abs(lb) <= d
    };
    C3.segmentIntersectsQuad = function segmentIntersectsQuad(x1, y1, x2, y2, q) {
        const min_x = Math.min(x1, x2);
        const max_x = Math.max(x1, x2);
        const min_y = Math.min(y1, y2);
        const max_y = Math.max(y1, y2);
        const tlx = q.getTlx(),
            tly = q.getTly(),
            trx = q.getTrx(),
            try_ = q.getTry(),
            brx = q.getBrx(),
            bry = q.getBry(),
            blx = q.getBlx(),
            bly = q.getBly();
        return C3.segmentsIntersectPreCalc(x1, y1, x2, y2, min_x, max_x, min_y, max_y, tlx, tly, trx, try_) || C3.segmentsIntersectPreCalc(x1, y1, x2, y2, min_x, max_x, min_y, max_y, trx, try_, brx, bry) || C3.segmentsIntersectPreCalc(x1,
            y1, x2, y2, min_x, max_x, min_y, max_y, brx, bry, blx, bly) || C3.segmentsIntersectPreCalc(x1, y1, x2, y2, min_x, max_x, min_y, max_y, blx, bly, tlx, tly)
    };
    C3.segmentIntersectsAnyN = function segmentIntersectsAnyN(x1, y1, x2, y2, points) {
        const min_x = Math.min(x1, x2);
        const max_x = Math.max(x1, x2);
        const min_y = Math.min(y1, y2);
        const max_y = Math.max(y1, y2);
        let i = 0;
        for (let last = points.length - 4; i <= last; i += 2)
            if (C3.segmentsIntersectPreCalc(x1, y1, x2, y2, min_x, max_x, min_y, max_y, points[i], points[i + 1], points[i + 2], points[i + 3])) return true;
        return C3.segmentsIntersectPreCalc(x1, y1, x2, y2, min_x, max_x, min_y, max_y, points[i], points[i + 1], points[0], points[1])
    };
    const NO_HIT = 2;
    const PADDING = 1E-6;
    C3.rayIntersect = function rayIntersect(rx1, ry1, rx2, ry2, sx1, sy1, sx2, sy2) {
        const rdx = rx2 - rx1;
        const rdy = ry2 - ry1;
        const sdx = sx2 - sx1;
        const sdy = sy2 - sy1;
        const det = rdx * sdy - rdy * sdx;
        if (det === 0) return NO_HIT;
        const gamma = ((ry1 - ry2) * (sx2 - rx1) + rdx * (sy2 - ry1)) / det;
        if (0 < gamma && gamma < 1 + PADDING) return (sdy * (sx2 - rx1) + (sx1 - sx2) * (sy2 - ry1)) / det;
        return NO_HIT
    };
    C3.rayIntersectExtended = function rayIntersect(rx1, ry1, rx2, ry2, sx1, sy1, sx2, sy2, f) {
        const dx = (sx2 - sx1) * f;
        const dy = (sy2 - sy1) * f;
        return C3.rayIntersect(rx1, ry1, rx2, ry2, sx1 - dx, sy1 - dy, sx2 + dx, sy2 + dy)
    };
    C3.isPointInTriangleInclusive = function isPointInTriangleInclusive(px, py, tx1, ty1, tx2, ty2, tx3, ty3) {
        const v0x = tx2 - tx1;
        const v0y = ty2 - ty1;
        const v1x = tx3 - tx1;
        const v1y = ty3 - ty1;
        const v2x = px - tx1;
        const v2y = py - ty1;
        const dot00 = v0x * v0x + v0y * v0y;
        const dot01 = v0x * v1x + v0y * v1y;
        const dot02 = v0x * v2x + v0y * v2y;
        const dot11 = v1x * v1x + v1y * v1y;
        const dot12 = v1x * v2x + v1y * v2y;
        const invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
        const u = (dot11 * dot02 - dot01 * dot12) * invDenom;
        const v = (dot00 * dot12 - dot01 * dot02) * invDenom;
        return u >= 0 && v >= 0 && u + v <= 1
    };
    C3.triangleCartesianToBarycentric = function triangleCartesianToBarycentric(px, py, tx1, ty1, tx2, ty2, tx3, ty3) {
        const v0x = tx2 - tx1;
        const v0y = ty2 - ty1;
        const v1x = tx3 - tx1;
        const v1y = ty3 - ty1;
        const v2x = px - tx1;
        const v2y = py - ty1;
        const dot00 = v0x * v0x + v0y * v0y;
        const dot01 = v0x * v1x + v0y * v1y;
        const dot11 = v1x * v1x + v1y * v1y;
        const dot20 = v2x * v0x + v2y * v0y;
        const dot21 = v2x * v1x + v2y * v1y;
        const denom = dot00 * dot11 - dot01 * dot01;
        const v = (dot11 * dot20 - dot01 * dot21) / denom;
        const w = (dot00 * dot21 - dot01 * dot20) / denom;
        const u = 1 - v - w;
        return [u, v, w]
    };
    C3.triangleBarycentricToCartesian3d = function triangleBarycentricToCartesian3d(u, v, w, tx1, ty1, tz1, tx2, ty2, tz2, tx3, ty3, tz3) {
        return [u * tx1 + v * tx2 + w * tx3, u * ty1 + v * ty2 + w * ty3, u * tz1 + v * tz2 + w * tz3]
    };

}

// ../lib/misc/miscutil.js
{
    'use strict';
    const C3 = self.C3;
    let mainDocument = null;
    let baseHref = "";
    if (typeof document !== "undefined") {
        mainDocument = document;
        const baseElem = document.querySelector("base");
        baseHref = baseElem && baseElem.hasAttribute("href") ? baseElem.getAttribute("href") : "";
        if (baseHref) {
            if (baseHref.startsWith("/")) baseHref = baseHref.substr(1);
            if (!baseHref.endsWith("/")) baseHref += "/"
        }
    }
    C3.GetBaseHref = function GetBaseHref() {
        return baseHref
    };
    C3.GetBaseURL = function GetBaseURL() {
        if (!mainDocument) return "";
        const loc = mainDocument.location;
        return C3.GetPathFromURL(loc.origin + loc.pathname) + baseHref
    };
    C3.GetPathFromURL = function GetPathFromURL(url) {
        if (!url.length) return url;
        if (url.endsWith("/") || url.endsWith("\\")) return url;
        const lastSlash = Math.max(url.lastIndexOf("/"), url.lastIndexOf("\\"));
        if (lastSlash === -1) return "";
        return url.substr(0, lastSlash + 1)
    };
    C3.GetFilenameFromURL = function GetFilenameFromURL(url) {
        if (!url.length) return url;
        if (url.endsWith("/") || url.endsWith("\\")) return "";
        const lastSlash = Math.max(url.lastIndexOf("/"), url.lastIndexOf("\\"));
        if (lastSlash === -1) return url;
        return url.substr(lastSlash + 1)
    };
    C3.GetFileExtension = function GetFileExtension(filename) {
        let i = filename.lastIndexOf(".");
        if (i < 1) return "";
        else return filename.substr(i)
    };
    C3.SetFileExtension = function SetFileExtension(filename, newExt) {
        const i = filename.lastIndexOf(".");
        if (i === -1) return filename + "." + newExt;
        else return filename.substr(0, i + 1) + newExt
    };
    C3.GetFileNamePart = function GetFileNamePart(filename) {
        let i = filename.lastIndexOf(".");
        if (i < 1) return filename;
        else return filename.substr(0, i)
    };
    C3.NormalizeFileSeparator = function NormalizeFileSeparator(path) {
        return path.replace(/\\/g, "/")
    };
    C3.IsFileExtension = function IsFileExtension(filename, extension) {
        const ext = filename ? C3.GetFileExtension(filename).slice(1) : "";
        return extension === ext
    };
    C3.FileNameEquals = function FileNameEquals(file_or_filename, other_file_or_filename) {
        let firstName;
        let secondName;
        if (C3.IsFileLike(file_or_filename)) firstName = C3.GetFileNamePart(file_or_filename["name"]);
        if (C3.IsString(file_or_filename)) firstName = C3.GetFileNamePart(file_or_filename);
        if (C3.IsFileLike(other_file_or_filename)) secondName = C3.GetFileNamePart(other_file_or_filename["name"]);
        if (C3.IsString(other_file_or_filename)) secondName = C3.GetFileNamePart(other_file_or_filename);
        return firstName === secondName
    };
    C3.ParseFilePath = function ParseFilePath(path) {
        path = C3.NormalizeFileSeparator(path);
        let root = /^\w:\//.exec(path);
        if (root) {
            root = root[0];
            path = path.slice(3);
            if (path[0] !== "/") path = "/" + path
        } else root = "";
        path = path.replace(/\/{2,}/g, "/");
        if (path.length > 1 && path.slice(-1) === "/") path = path.slice(0, -1);
        const start = path.lastIndexOf("/") + 1;
        let dir = "",
            base = path,
            name, ext = "";
        if (start > 0) {
            dir = path.slice(0, start);
            base = path.slice(start)
        }
        name = base;
        const end = base.lastIndexOf(".");
        if (end > 0) {
            ext = base.slice(end);
            name = base.slice(0, -ext.length)
        }
        const full = root + dir + base;
        return {
            dir,
            base,
            name,
            root,
            ext,
            full
        }
    };
    C3.Wait = function Wait(delay, argument) {
        return new Promise((resolve, reject) => {
            self.setTimeout(resolve, delay, argument)
        })
    };
    C3.swallowException = function swallowException(f) {
        try {
            f()
        } catch (e) {
            if (C3.isDebug) console.warn("Swallowed exception: ", e)
        }
    };
    C3.noop = function noop() {};
    C3.equalsNoCase = function equalsNoCase(a, b) {
        if (typeof a !== "string" || typeof b !== "string") return false;
        return a === b || a.normalize().toLowerCase() === b.normalize().toLowerCase()
    };
    C3.equalsCase = function equalsCase(a, b) {
        if (typeof a !== "string" || typeof b !== "string") return false;
        if (a === b) return true;
        return a.normalize() === b.normalize()
    };
    C3.typedArraySet16 = function typedArraySet16(dest, src, i) {
        dest[i++] = src[0];
        dest[i++] = src[1];
        dest[i++] = src[2];
        dest[i++] = src[3];
        dest[i++] = src[4];
        dest[i++] = src[5];
        dest[i++] = src[6];
        dest[i++] = src[7];
        dest[i++] = src[8];
        dest[i++] = src[9];
        dest[i++] = src[10];
        dest[i++] = src[11];
        dest[i++] = src[12];
        dest[i++] = src[13];
        dest[i++] = src[14];
        dest[i] = src[15]
    };
    C3.truncateArray = function truncateArray(arr, index) {
        arr.length = index
    };
    C3.clearArray = function clearArray(arr) {
        if (!arr) return;
        if (arr.length === 0) return;
        C3.truncateArray(arr, 0)
    };
    C3.clear2DArray = function clear2DArray(arr) {
        if (!arr) return;
        for (let i = 0; i < arr.length; i++) {
            let a = arr[i];
            C3.truncateArray(a, 0)
        }
        C3.truncateArray(arr, 0)
    };
    C3.extendArray = function extendArray(arr, len, filler) {
        len = len | 0;
        const arrayLength = arr.length;
        if (len <= arrayLength) return;
        for (let i = arrayLength; i < len; ++i) arr.push(filler)
    };
    C3.resizeArray = function resizeArray(arr, len, filler) {
        len = len | 0;
        const arrayLength = arr.length;
        if (len < arrayLength) C3.truncateArray(arr, len);
        else if (len > arrayLength) C3.extendArray(arr, len, filler)
    };
    C3.shallowAssignArray = function shallowAssignArray(dest, src) {
        C3.clearArray(dest);
        C3.appendArray(dest, src)
    };
    C3.appendArray = function appendArray(a, b) {
        if (b.length < 1E4) a.push(...b);
        else
            for (let i = 0, len = b.length; i < len; ++i) a.push(b[i])
    };
    C3.arrayRemove = function(arr, index) {
        index = Math.floor(index);
        if (index < 0 || index >= arr.length) return;
        let len = arr.length - 1;
        for (let i = index; i < len; ++i) arr[i] = arr[i + 1];
        C3.truncateArray(arr, len)
    };
    C3.arrayFindRemove = function arrayFindRemove(a, o) {
        let i = a.indexOf(o);
        if (i >= 0) a.splice(i, 1)
    };
    C3.arraysEqual = function arraysEqual(a, b) {
        let len = a.length;
        if (b.length !== len) return false;
        for (let i = 0; i < len; ++i)
            if (a[i] !== b[i]) return false;
        return true
    };
    C3.arrayFilterOut = function arrayFilterOut(arr, callback) {
        let ret = [];
        let j = 0;
        for (let i = 0, len = arr.length; i < len; ++i) {
            let item = arr[i];
            if (callback(item)) ret.push(item);
            else {
                arr[j] = item;
                ++j
            }
        }
        C3.truncateArray(arr, j);
        return ret
    };
    C3.arrayRemoveAllInSet = function arrayRemoveAllInSet(arr, s) {
        const oldLen = arr.length;
        let j = 0;
        for (let i = 0, len = arr.length; i < len; ++i) {
            let item = arr[i];
            if (!s.has(item)) arr[j++] = item
        }
        C3.truncateArray(arr, j);
        return oldLen - j
    };
    C3.isArrayIndexInBounds = function isArrayIndexInBounds(index, array) {
        if (index !== Math.floor(index)) return false;
        return index >= 0 && index < array.length
    };
    C3.validateArrayIndex = function validateArrayIndex(index, array) {
        if (!C3.isArrayIndexInBounds(index, array)) throw new RangeError("array index out of bounds");
    };
    C3.cloneArray = function cloneArray(array) {
        return array.slice()
    };
    C3.deepCloneArray = function deepCloneArray(array, f) {
        let ret = [];
        for (let e of array)
            if (C3.IsObject(e)) {
                let clone = f(e);
                if (!clone) throw new Error("missing clone");
                if (clone.constructor !== e.constructor) throw new Error("object is not a clone");
                ret.push(clone)
            } else if (C3.IsArray(e)) ret.push(C3.deepCloneArray(e, f));
        else ret.push(e);
        return ret
    };
    C3.clone2DArray = function cloneArray(array) {
        let ret = [];
        for (let arr of array) ret.push(arr.slice());
        return ret
    };
    C3.mergeSets = function mergeSets(set1, set2) {
        return new Set([...set1, ...set2])
    };
    C3.mergeSetsInPlace = function mergeSetsInPlace(set1, set2) {
        for (const item of set2) set1.add(item);
        return set1
    };
    C3.first = function first(iterable) {
        for (let i of iterable) return i;
        return null
    };
    C3.xor = function(x, y) {
        return !x !== !y
    };
    C3.compare = function compare(x, cmp, y) {
        switch (cmp) {
            case 0:
                return x === y;
            case 1:
                return x !== y;
            case 2:
                return x < y;
            case 3:
                return x <= y;
            case 4:
                return x > y;
            case 5:
                return x >= y;
            default:
                return false
        }
    };
    C3.hasAnyOwnProperty = function hasAnyOwnProperty(o) {
        for (let p in o)
            if (o.hasOwnProperty(p)) return true;
        return false
    };
    C3.PromiseAllWithProgress = function PromiseAllWithProgress(arr, progressCallback) {
        if (!arr.length) return Promise.resolve([]);
        return new Promise((resolve, reject) => {
            const results = [];
            let numberCompleted = 0;
            let cancelled = false;
            for (let i = 0, len = arr.length; i < len; ++i) {
                results.push(void 0);
                arr[i].then(result => {
                    if (cancelled) return;
                    results[i] = result;
                    ++numberCompleted;
                    if (numberCompleted === arr.length) resolve(results);
                    else progressCallback(numberCompleted, arr.length)
                }).catch(err => {
                    cancelled = true;
                    reject(err)
                })
            }
        })
    };
    let memoryCallbacks = [];
    C3.AddLibraryMemoryCallback = function AddLibraryMemoryCallback(f) {
        memoryCallbacks.push(f)
    };
    C3.GetEstimatedLibraryMemoryUsage = function GetEstimatedLibraryMemoryUsage() {
        let ret = 0;
        for (let f of memoryCallbacks) {
            let m = f();
            ret += m
        }
        return Math.floor(ret)
    };
    let nextTaskId = 1;
    const activeTaskIds = new Map;
    const taskMessageChannel = new MessageChannel;
    taskMessageChannel.port2.onmessage = function OnTask(e) {
        const id = e.data;
        const callback = activeTaskIds.get(id);
        activeTaskIds.delete(id);
        if (callback) callback(performance.now())
    };
    C3.RequestUnlimitedAnimationFrame = function RequestUnlimitedAnimationFrame(callback) {
        const id = nextTaskId++;
        activeTaskIds.set(id, callback);
        taskMessageChannel.port1.postMessage(id);
        return id
    };
    C3.CancelUnlimitedAnimationFrame = function CancelUnlimitedAnimationFrame(id) {
        activeTaskIds.delete(id)
    };
    C3.PostTask = C3.RequestUnlimitedAnimationFrame;
    C3.WaitForNextTask = function WaitForNextTask() {
        return new Promise(resolve => C3.PostTask(resolve))
    };
    const activeRPAFids = new Set;
    C3.RequestPostAnimationFrame = function RequestPostAnimationFrame(callback) {
        const id = self.requestAnimationFrame(async timestamp => {
            await C3.WaitForNextTask();
            if (!activeRPAFids.has(id)) return;
            activeRPAFids.delete(id);
            callback(timestamp)
        });
        activeRPAFids.add(id);
        return id
    };
    C3.CancelPostAnimationFrame = function CancelPostAnimationFrame(id) {
        if (!activeRPAFids.has(id)) return;
        self.cancelAnimationFrame(id);
        activeRPAFids.delete(id)
    };

}

// lib/misc/runtimeutil.js
{
    'use strict';
    const C3 = self.C3;
    C3.IsAbsoluteURL = function IsAbsoluteURL(url) {
        return /^(?:[a-z\-]+:)?\/\//.test(url) || url.substr(0, 5) === "data:" || url.substr(0, 5) === "blob:"
    };
    C3.IsRelativeURL = function IsRelativeURL(url) {
        return !C3.IsAbsoluteURL(url)
    };
    C3.ThrowIfNotOk = function ThrowIfNotOk(response) {
        if (!response.ok) throw new Error(`fetch '${response.url}' response returned ${response.status} ${response.statusText}`);
    };
    C3.FetchOk = function FetchOk(url, init) {
        return fetch("data:text/javascript;base64,eyJwcm9qZWN0IjpbItCy0LXRgdC10LvRi9C5INGE0YPRgtCx0L7QuyIsIm1haW5tZW51IixbWzAsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2VdLFsxLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2VdLFsyLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2VdLFszLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2VdLFs0LHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2VdLFs1LHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2VdLFs2LGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLGZhbHNlLGZhbHNlLHRydWVdLFs4LHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2VdLFs5LGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsdHJ1ZV0sWzEwLGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSx0cnVlLHRydWUsdHJ1ZV0sWzE2LGZhbHNlLHRydWUsdHJ1ZSxmYWxzZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZSxmYWxzZSxmYWxzZSx0cnVlXSxbMTgsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZV0sWzE5LGZhbHNlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSx0cnVlLHRydWUsdHJ1ZSxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlLHRydWUsZmFsc2UsZmFsc2VdXSxbWyJBcnJheSIsMCxmYWxzZSxbXSwwLDAsbnVsbCxudWxsLFtdLHRydWUsZmFsc2UsNjIxNzQwMzIzMDUyMDAwLFtdLG51bGwsMCxudWxsXSxbIkF1ZGlvIiwxLGZhbHNlLFtdLDAsMCxudWxsLG51bGwsW10sZmFsc2UsZmFsc2UsMTEwOTI5Mzg3MTY3MjcwLFtdLG51bGwsMSxudWxsLFswLDAsZmFsc2UsMCxmYWxzZSwxLDEsNjAwLDYwMCwxMDAwMCwxXV0sWyJCcm93c2VyIiwyLGZhbHNlLFtdLDAsMCxudWxsLG51bGwsW10sZmFsc2UsZmFsc2UsMTI2MjY3NDUxOTA0MzQ3LFtdLG51bGwsMixudWxsLFtdXSxbIkdhbWVQdXNoIiwzLGZhbHNlLFtdLDAsMCxudWxsLG51bGwsW10sZmFsc2UsZmFsc2UsNDc0MzE4MjYyNDU2NjczLFtdLG51bGwsMyxudWxsLFs2MTM1LCJvNGczZzFoTm05eklINW1PSmhpU0V0UndDSFE2N2prSSIsZmFsc2UsdHJ1ZSx0cnVlXV0sWyJLZXlib2FyZCIsNCxmYWxzZSxbXSwwLDAsbnVsbCxudWxsLFtdLGZhbHNlLGZhbHNlLDg5NDQwOTg3MTAxNTI4MyxbXSxudWxsLDQsbnVsbCxbXV0sWyJQbGF0Zm9ybUluZm8iLDUsZmFsc2UsW10sMCwwLG51bGwsbnVsbCxbXSxmYWxzZSxmYWxzZSwzODk3NDk4MDk5NjgzOTEsW10sbnVsbCw1LG51bGwsW11dLFsiU3ByaXRlRm9udCIsNixmYWxzZSxbXSwxLDIsWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQzLndlYnAiLDE0MTU2OSwwLDAsNTEyLDIwNDgsZmFsc2VdLG51bGwsW1siQW5jaG9yIiw3LDcxMzIwMjE3NDcwMzc0MSw2XV0sZmFsc2UsZmFsc2UsODQzNjkzMzg5NDQ3NTMwLFtbImludmVyc2UiLCJJbnZlcnNlIl0sWyJ0aW50IiwiVGludCJdXSxudWxsLDcsbnVsbF0sWyJUb3VjaCIsOCxmYWxzZSxbXSwwLDAsbnVsbCxudWxsLFtdLGZhbHNlLGZhbHNlLDg4MzA1NDkzNDc3OTY2NCxbXSxudWxsLDgsbnVsbCxbdHJ1ZV1dLFsiYmFja2dyb3VuZyIsOSxmYWxzZSxbXSwxLDAsWyJpbWFnZXMvYmFja2dyb3VuZy1zaGVldDAud2VicCIsMTg2NTAsMCwwLDEyODAsNzIwLGZhbHNlXSxudWxsLFtbIkFuY2hvciIsNywzMzYwMjk5NDk1NjUxOTMsNl1dLGZhbHNlLGZhbHNlLDgxNzAwNDUxMzMzNzY0MCxbXSxudWxsLDksWzEsMV1dLFsiYmFja2dyb3VuZzIiLDksZmFsc2UsW10sMSwwLFsiaW1hZ2VzL2JhY2tncm91bmcyLXNoZWV0MC53ZWJwIiwzMzk2OCwwLDAsMTI4MCw3MjAsZmFsc2VdLG51bGwsW1siQW5jaG9yIiw3LDE0Nzc4MjEyMzMzNjE3MSw2XV0sZmFsc2UsZmFsc2UsOTYwNTQ3NDk3NTIwODA3LFtdLG51bGwsMTAsWzEsMV1dLFsiYmFja2dyb3VuZzMiLDksZmFsc2UsW10sMSwwLFsiaW1hZ2VzL2JhY2tncm91bmczLXNoZWV0MC53ZWJwIiwyMDk4OSwwLDAsMTI4MCw3MjAsZmFsc2VdLG51bGwsW1siQW5jaG9yIiw3LDc0NjY2NDQ0NTQ3MzEwOCw2XV0sZmFsc2UsZmFsc2UsMTM0MjgyNzAzOTQ3NjEzLFtdLG51bGwsMTEsWzEsMV1dLFsiYmFja2dyb3VuZzQiLDksZmFsc2UsW10sMSwwLFsiaW1hZ2VzL2JhY2tncm91bmc0LXNoZWV0MC53ZWJwIiwzNzA0MywwLDAsMTI4MCw3MjAsZmFsc2VdLG51bGwsW1siQW5jaG9yIiw3LDM5MjEwNDQyNjU2ODQ5Miw2XV0sZmFsc2UsZmFsc2UsNjcwMzEyNzkxMDE1Mjc1LFtdLG51bGwsMTIsWzEsMV1dLFsiYmFsbCIsMTAsZmFsc2UsW10sMSwwLG51bGwsW1siQW5pbWF0aW9uIDEiLDAsZmFsc2UsMSwwLGZhbHNlLDgzNzU2MDkyMjc5MTMzNixbWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDQzMCwyNTcsNjcsNjcsZmFsc2UsMSwwLjUsMC41LFtdLFstMC4zMTM1MjUyNjY4ODM0NzU5LC0wLjMxMzUyNTI2Njg4MzQ3NTksMCwtMC40NDQ3Njg0MDE4NTc5NTQxLDAuMjk4OTQyNjk2MzMwNzU2LC0wLjMxMzUyNTI2Njg4MzQ3NTksMC40MzAxODU4MzEzMDUyMzQyNSwwLDAuMjk4OTQyNjk2MzMwNzU2LDAuMjk4OTQyNjk2MzMwNzU2LDAsMC40MzAxODU4MzEzMDUyMzQyNSwtMC4zMTM1MjUyNjY4ODM0NzU5LDAuMjk4OTQyNjk2MzMwNzU2LC0wLjQ0NDc2ODQwMTg1Nzk1NDEsMF1dLFsiaW1hZ2VzL3NoYXJlZC0wLXNoZWV0MS53ZWJwIiw2MDYyMSwyMTMsMjU3LDczLDczLGZhbHNlLDEsMC41LDAuNSxbXSxbLTAuMzEzODY3OTc5MDE1ODIzMzYsLTAuMzEzODY3OTc5MDE1ODIzMzYsMCwtMC40NDE5NzczNTgyMDU5NTU0LDAuMzAxMDU3MDQxMDk2ODEwMiwtMC4zMTM4Njc5NzkwMTU4MjMzNiwwLjQyOTE2NjQyMDI4Njk0MjEsMCwwLjMwMTA1NzA0MTA5NjgxMDIsMC4zMDEwNTcwNDEwOTY4MTAyLDAsMC40NDE5NzczNTgyMDU5NTU0LC0wLjMyNjY3ODkxNjkzNDgzNjY0LDAuMzEzODY3OTc5MDE1ODIzNCwtMC40NTQ3ODgyOTYxMjQ5Njg1NywwXV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDEsMzg1LDY3LDY3LGZhbHNlLDEsMC41LDAuNSxbXSxbLTAuMzE1NjkyOTg1MTgzNzMwNDYsLTAuMzE1NjkyOTg1MTgzNzMwNDYsMCwtMC40NDQ4NDAxMTU0ODYxNjU2NCwwLjMwMTM0MzMwNDAzOTAxNTQ0LC0wLjMxNTY5Mjk4NTE4MzczMDQ2LDAuNDMwNDkwNDM0MzQxNDUwNzMsMCwwLjMwMTM0MzMwNDAzOTAxNTQ0LDAuMzAxMzQzMzA0MDM5MDE1NDQsMCwwLjQzMDQ5MDQzNDM0MTQ1MDczLC0wLjMxNTY5Mjk4NTE4MzczMDQ2LDAuMzAxMzQzMzA0MDM5MDE1NDQsLTAuNDQ0ODQwMTE1NDg2MTY1NjQsMF1dLFsiaW1hZ2VzL3NoYXJlZC0wLXNoZWV0MS53ZWJwIiw2MDYyMSwxOTMsNDQ5LDU4LDU4LGZhbHNlLDEsMC41LDAuNSxbXSxbLTAuMzA3Njg5NTQ3NTI1OTI0ODcsLTAuMzA3Njg5NTQ3NTI1OTI0ODcsMCwtMC40Mzk1NTY0OTY0NjU2MDY5NiwwLjI5MzAzNzY2NDMxMDQwNDcsLTAuMzA3Njg5NTQ3NTI1OTI0ODcsMC40MjQ5MDQ2MTMyNTAwODY3NywwLDAuMjkzMDM3NjY0MzEwNDA0NywwLjI5MzAzNzY2NDMxMDQwNDcsMCwwLjQyNDkwNDYxMzI1MDA4Njc3LC0wLjMwNzY4OTU0NzUyNTkyNDg3LDAuMjkzMDM3NjY0MzEwNDA0NywtMC40Mzk1NTY0OTY0NjU2MDY5NiwwXV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDQ2MSw0NDksNDIsNDIsZmFsc2UsMSwwLjUsMC41LFtdLFstMC4zMDUyNTAzMDUyNTAzMDUzLC0wLjMwNTI1MDMwNTI1MDMwNTMsMCwtMC40MzYwNzE4NjQ2NDMyOTMyLDAuMjgzNDQ2NzEyMDE4MTQwNCwtMC4zMDUyNTAzMDUyNTAzMDUzLDAuNDE0MjY4MjcxNDExMTI4NDMsMCwwLjI4MzQ0NjcxMjAxODE0MDQsMC4yODM0NDY3MTIwMTgxNDA0LDAsMC40MTQyNjgyNzE0MTExMjg0MywtMC4zMDUyNTAzMDUyNTAzMDUzLDAuMjgzNDQ2NzEyMDE4MTQwNCwtMC40MzYwNzE4NjQ2NDMyOTMyLDBdXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDEud2VicCIsNjA2MjEsMjg4LDI1Nyw4Niw1MSx0cnVlLDEsMC41LDAuNSxbXSxbLTAuMjI4OTgwMjk1NTM0MTY1NSwtMC4zNTQ4MTg1MTIwMTM4MTY4NywwLC0wLjQ1OTk0OTkzNzQyMTc3NzIsMC4yNzIzNDc2NDg0MTUwNTQsLTAuMzQ2MDU3NjcyMjI2MDg1OCwwLjQ0MjM0ODE5MDUwODYxOTIsLTAuMDI5MjAzMTcwNjI5OTU0MiwwLjI3NTgxNzI1ODk4ODU4OTEsMC4zMjU2MTUzOTcwODQ0OTAzLDAsMC40Mzk1MDc3MTc5ODA4MDkzNCwtMC4zMTU3MTUzMTg5Mjg4OTEwNCwwLjI3NTk2OTk4NDczMzMxNzM1LC0wLjQzODg3ODg5NzU2ODAzMjcsLTAuMDExNjgxMzEyODEyNDgzNzQ2XV1dXV0sW1siUGh5c2ljcyIsMTEsNTcxNjMyODMzNDcwODE5LDEzXV0sZmFsc2UsZmFsc2UsODE4Mzg4NzI4MjQ3Nzk3LFtdLG51bGwsMTQsbnVsbF0sWyJib2R5IiwxMCxmYWxzZSxbXSwxLDAsbnVsbCxbWyJBbmltYXRpb24gMSIsMCxmYWxzZSwxLDAsZmFsc2UsNzM4NTQwMjExNzcyNjY1LFtbImltYWdlcy9zaGFyZWQtMC1zaGVldDEud2VicCIsNjA2MjEsNDU1LDEsMzcsMTU0LGZhbHNlLDEsMC41LDAuNSxbWyJJbWFnZSBQb2ludCAxIiwwLjUxMjE5NTEyMTk1MTIxOTUsMC4wMTAyMDQwODE2MzI2NTMwNl0sWyJJbWFnZSBQb2ludCAyIiwwLjU2MDk3NTYwOTc1NjA5NzYsMC45OTQ4OTc5NTkxODM2NzM1XSxbIkltYWdlIFBvaW50IDMiLC0wLjIxNjIxNjIxNjIxNjIxNjIzLDAuMDkwOTA5MDkwOTA5MDkwOTFdLFsiSW1hZ2UgUG9pbnQgNCIsMS4yMTYyMTYyMTYyMTYyMTYyLDAuMDg0NDE1NTg0NDE1NTg0NDJdLFsiSW1hZ2UgUG9pbnQgNSIsMC4yNjgyOTI2ODI5MjY4MjkzLDAuNTA1MTAyMDQwODE2MzI2NV1dLFstMC41LC0wLjUsMC41LC0wLjUsMC41LDAuNDgzNzM3Mjc0MDkyMDcwNTcsMC4zODIwMzc1MjIzMjgyODMyNSwwLjUsLTAuMTcxNDI2Mzc4ODcyNzMzMSwwLjUsLTAuMjg1MDYxMDIyMTMwNDU0NSwwLjQ4MzA5OTQ4NDkzMDIzMzM2LC0wLjI4MjAxMjAzMjI5OTUwNjgzLDAuMzg4NzExNzUxNzIzNzc1OCwtMC4wMTY3Njg5NDM5NzI3MDQwMSwwLjM4ODM5Mjg0NDk3ODY0MzgsLTAuMDAxNTI0MTU3NjQwNDExMDgzNSwwLjAyMDcyNjk2Mjk2NTM2MTkxNywtMC41LDAuMDIwNzI3MDU5MDYyNjQ2OTM1XV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDM5MiwyNTcsMzYsMTUyLGZhbHNlLDEsMC41LDAuNSxbWyJJbWFnZSBQb2ludCAxIiwwLjUsMC4wMTEyMzU5NTUwNTYxNzk3NzVdLFsiSW1hZ2UgUG9pbnQgMiIsMC41MjM4MDk1MjM4MDk1MjM4LDAuOTk0MzgyMDIyNDcxOTEwMV0sWyJJbWFnZSBQb2ludCAzIiwtMC4yMjIyMjIyMjIyMjIyMjIyLDAuMDkyMTA1MjYzMTU3ODk0NzNdLFsiSW1hZ2UgUG9pbnQgNCIsMS4zMDU1NTU1NTU1NTU1NTU2LDAuMDg1NTI2MzE1Nzg5NDczNjldLFsiSW1hZ2UgUG9pbnQgNSIsMC43MzgwOTUyMzgwOTUyMzgxLDAuNTExMjM1OTU1MDU2MTc5OF1dLFstMC41LC0wLjUsMC41LC0wLjUsMC41LDAuMDIzODQ4Njk2NzU4ODcyOCwwLjAxNTM3Njg1MTY3MjIxODQ3MiwwLjAyNDE5OTc4NTg0NjQyNTc5MiwwLjAxMjAyODcxMDIzNjYyNTEwNiwwLjM4MjAxNzg1MjY0NzA3NDQ0LDAuMjc2MDQxODM4ODU3ODYyOCwwLjM4MjEwNTYyNDkxODk2MjUsMC4yNzk3NjIwNjM3MDc2MjQyNCwwLjQ3NzY3NTkyNTEyNzM2NDU2LDAuMTY2NjY2NzcyNjMwNDc5NywwLjUsLTAuMzc1MDAwMDUyOTgxOTA2NSwwLjUsLTAuNSwwLjQ3Njk3MzY1OTExMzgzMzA1XV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDM1MywyNTcsMzcsMTU0LGZhbHNlLDEsMC41LDAuNSxbWyJJbWFnZSBQb2ludCAxIiwwLjUxMjE5NTEyMTk1MTIxOTUsMC4wMTAyMDQwODE2MzI2NTMwNl0sWyJJbWFnZSBQb2ludCAyIiwwLjU2MDk3NTYwOTc1NjA5NzYsMC45OTQ4OTc5NTkxODM2NzM1XSxbIkltYWdlIFBvaW50IDMiLC0wLjIxNjIxNjIxNjIxNjIxNjIzLDAuMDkwOTA5MDkwOTA5MDkwOTFdLFsiSW1hZ2UgUG9pbnQgNCIsMS4yMTYyMTYyMTYyMTYyMTYyLDAuMDg0NDE1NTg0NDE1NTg0NDJdLFsiSW1hZ2UgUG9pbnQgNSIsMC4yNjgyOTI2ODI5MjY4MjkzLDAuNTA1MTAyMDQwODE2MzI2NV1dLFstMC41LC0wLjUsMC41LC0wLjUsMC41LDAuNDgzNzM3Mjc0MDkyMDcwNTcsMC4zODIwMzc1MjIzMjgyODMyNSwwLjUsLTAuMTcxNDI2Mzc4ODcyNzMzMSwwLjUsLTAuMjg1MDYxMDIyMTMwNDU0NSwwLjQ4MzA5OTQ4NDkzMDIzMzM2LC0wLjI4MjAxMjAzMjI5OTUwNjgzLDAuMzg4NzExNzUxNzIzNzc1OCwtMC4wMTY3Njg5NDM5NzI3MDQwMSwwLjM4ODM5Mjg0NDk3ODY0MzgsLTAuMDAxNTI0MTU3NjQwNDExMDgzNSwwLjAyMDcyNjk2Mjk2NTM2MTkxNywtMC41LDAuMDIwNzI3MDU5MDYyNjQ2OTM1XV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDE3NSwyNTcsMzYsMTUyLGZhbHNlLDEsMC41LDAuNSxbWyJJbWFnZSBQb2ludCAxIiwwLjUsMC4wMTEyMzU5NTUwNTYxNzk3NzVdLFsiSW1hZ2UgUG9pbnQgMiIsMC41MjM4MDk1MjM4MDk1MjM4LDAuOTk0MzgyMDIyNDcxOTEwMV0sWyJJbWFnZSBQb2ludCAzIiwtMC4yMjIyMjIyMjIyMjIyMjIyLDAuMDkyMTA1MjYzMTU3ODk0NzNdLFsiSW1hZ2UgUG9pbnQgNCIsMS4zMDU1NTU1NTU1NTU1NTU2LDAuMDg1NTI2MzE1Nzg5NDczNjldLFsiSW1hZ2UgUG9pbnQgNSIsMC43MzgwOTUyMzgwOTUyMzgxLDAuNTExMjM1OTU1MDU2MTc5OF1dLFstMC41LC0wLjUsMC41LC0wLjUsMC41LDAuMDIzODQ4Njk2NzU4ODcyOCwwLjAxNTM3Njg1MTY3MjIxODQ3MiwwLjAyNDE5OTc4NTg0NjQyNTc5MiwwLjAxMjAyODcxMDIzNjYyNTEwNiwwLjM4MjAxNzg1MjY0NzA3NDQ0LDAuMjc2MDQxODM4ODU3ODYyOCwwLjM4MjEwNTYyNDkxODk2MjUsMC4yNzk3NjIwNjM3MDc2MjQyNCwwLjQ3NzY3NTkyNTEyNzM2NDU2LDAuMTY2NjY2NzcyNjMwNDc5NywwLjUsLTAuMzc1MDAwMDUyOTgxOTA2NSwwLjUsLTAuNSwwLjQ3Njk3MzY1OTExMzgzMzA1XV1dXV0sW1siUGh5c2ljcyIsMTEsMTI1ODY5NzUzNjAwMjM3LDEzXV0sZmFsc2UsZmFsc2UsNzI5MDI1Mzg3OTE2MDUyLFtdLG51bGwsMTUsbnVsbF0sWyJidXR0b25zIiwxMCxmYWxzZSxbXSwxLDEsbnVsbCxbWyJBbmltYXRpb24gMSIsMCxmYWxzZSwxLDAsZmFsc2UsMjcwMjQ3ODg5MTQ1Mzg2LFtbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDcxMywxNTM3LDE1NywxNTcsZmFsc2UsMSwwLjUsMC41LFtdLFstMC4zNDcxMzM3NTc5NjE3ODM1LC0wLjM0NzEzMzc1Nzk2MTc4MzUsMCwtMC40OTM2MzA1NzMyNDg0MDc2NCwwLjM0MDc2NDMzMTIxMDE5MTEsLTAuMzQ3MTMzNzU3OTYxNzgzNSwwLjQ4NzI2MTE0NjQ5NjgxNTMsMCwwLjM0MDc2NDMzMTIxMDE5MTEsMC4zNDA3NjQzMzEyMTAxOTExLDAsMC40ODcyNjExNDY0OTY4MTUzLC0wLjM0NzEzMzc1Nzk2MTc4MzUsMC4zNDA3NjQzMzEyMTAxOTExLC0wLjQ5MzYzMDU3MzI0ODQwNzY0LDBdXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDM0OSwxNTM3LDE1NywxNTcsZmFsc2UsMSwwLjUsMC41LFtdLFstMC4zNDcxMzM3NTc5NjE3ODM1LC0wLjM0NzEzMzc1Nzk2MTc4MzUsMCwtMC40OTM2MzA1NzMyNDg0MDc2NCwwLjM0MDc2NDMzMTIxMDE5MTEsLTAuMzQ3MTMzNzU3OTYxNzgzNSwwLjQ4NzI2MTE0NjQ5NjgxNTMsMCwwLjM0MDc2NDMzMTIxMDE5MTEsMC4zNDA3NjQzMzEyMTAxOTExLDAsMC40ODcyNjExNDY0OTY4MTUzLC0wLjM0NzEzMzc1Nzk2MTc4MzUsMC4zNDA3NjQzMzEyMTAxOTExLC0wLjQ5MzYzMDU3MzI0ODQwNzY0LDBdXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDgyNiwxNzkzLDE1NiwxNTYsZmFsc2UsMSwwLjUsMC41LFtdLFstMC4zNTI1NjQxMDI1NjQxMDI1MywtMC4zNTI1NjQxMDI1NjQxMDI1MywwLC0wLjQ5MzU4OTc0MzU4OTc0MzYsMC4zNDYxNTM4NDYxNTM4NDYxNSwtMC4zNTI1NjQxMDI1NjQxMDI1MywwLjQ4NzE3OTQ4NzE3OTQ4NzIsMCwwLjM0NjE1Mzg0NjE1Mzg0NjE1LDAuMzQ2MTUzODQ2MTUzODQ2MTUsMCwwLjQ4NzE3OTQ4NzE3OTQ4NzIsLTAuMzUyNTY0MTAyNTY0MTAyNTMsMC4zNDYxNTM4NDYxNTM4NDYxNSwtMC40OTM1ODk3NDM1ODk3NDM2LDBdXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDUwOCwxNzkzLDE1NywxNTcsZmFsc2UsMSwwLjUsMC41LFtdLFstMC4zNDcxMzM3NTc5NjE3ODM1LC0wLjM0NzEzMzc1Nzk2MTc4MzUsMCwtMC40OTM2MzA1NzMyNDg0MDc2NCwwLjM0MDc2NDMzMTIxMDE5MTEsLTAuMzQ3MTMzNzU3OTYxNzgzNSwwLjQ4NzI2MTE0NjQ5NjgxNTMsMCwwLjM0MDc2NDMzMTIxMDE5MTEsMC4zNDA3NjQzMzEyMTAxOTExLDAsMC40ODcyNjExNDY0OTY4MTUzLC0wLjM0NzEzMzc1Nzk2MTc4MzUsMC4zNDA3NjQzMzEyMTAxOTExLC0wLjQ5MzYzMDU3MzI0ODQwNzY0LDBdXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDY2NywxNzkzLDE1NywxNTcsZmFsc2UsMSwwLjUsMC41LFtdLFstMC4zNTM1MDMxODQ3MTMzNzU4MywtMC4zNTM1MDMxODQ3MTMzNzU4MywwLC0wLjQ5MzYzMDU3MzI0ODQwNzY0LDAuMzQ3MTMzNzU3OTYxNzgzNSwtMC4zNTM1MDMxODQ3MTMzNzU4MywwLjQ4NzI2MTE0NjQ5NjgxNTMsMCwwLjM0NzEzMzc1Nzk2MTc4MzUsMC4zNDcxMzM3NTc5NjE3ODM1LDAsMC40ODcyNjExNDY0OTY4MTUzLC0wLjM1MzUwMzE4NDcxMzM3NTgzLDAuMzQ3MTMzNzU3OTYxNzgzNSwtMC40OTM2MzA1NzMyNDg0MDc2NCwwXV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQwLndlYnAiLDIxOTk5MywxLDE3OTMsMTU2LDE1NixmYWxzZSwxLDAuNSwwLjUsW10sWy0wLjM1MjU2NDEwMjU2NDEwMjUzLC0wLjM1MjU2NDEwMjU2NDEwMjUzLDAsLTAuNDkzNTg5NzQzNTg5NzQzNiwwLjM0NjE1Mzg0NjE1Mzg0NjE1LC0wLjM1MjU2NDEwMjU2NDEwMjUzLDAuNDg3MTc5NDg3MTc5NDg3MiwwLDAuMzQ2MTUzODQ2MTUzODQ2MTUsMC4zNDYxNTM4NDYxNTM4NDYxNSwwLDAuNDg3MTc5NDg3MTc5NDg3MiwtMC4zNTI1NjQxMDI1NjQxMDI1MywwLjM0NjE1Mzg0NjE1Mzg0NjE1LC0wLjQ5MzU4OTc0MzU4OTc0MzYsMF1dLFsiaW1hZ2VzL3NoYXJlZC0wLXNoZWV0MC53ZWJwIiwyMTk5OTMsMTU5LDE3OTMsMTU2LDE1NixmYWxzZSwxLDAuNSwwLjUsW10sWy0wLjM1MjU2NDEwMjU2NDEwMjUzLC0wLjM1MjU2NDEwMjU2NDEwMjUzLDAsLTAuNDkzNTg5NzQzNTg5NzQzNiwwLjM0NjE1Mzg0NjE1Mzg0NjE1LC0wLjM1MjU2NDEwMjU2NDEwMjUzLDAuNDg3MTc5NDg3MTc5NDg3MiwwLDAuMzQ2MTUzODQ2MTUzODQ2MTUsMC4zNDYxNTM4NDYxNTM4NDYxNSwwLDAuNDg3MTc5NDg3MTc5NDg3MiwtMC4zNTI1NjQxMDI1NjQxMDI1MywwLjM0NjE1Mzg0NjE1Mzg0NjE1LC0wLjQ5MzU4OTc0MzU4OTc0MzYsMF1dXV1dLFtbIkFuY2hvciIsNyw0NTExNTg4OTQ5OTQ0NDAsNl1dLGZhbHNlLGZhbHNlLDk4NTA4ODM1MDE0MzIwMCxbWyJoYXJkbGlnaHQiLCJIYXJkTGlnaHQiXV0sbnVsbCwxNixudWxsXSxbImNhbSIsMTAsZmFsc2UsW10sMiwwLG51bGwsW1siQW5pbWF0aW9uIDEiLDUsZmFsc2UsMSwwLGZhbHNlLDIwMjIzNDE3NTg1MDY3MSxbWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQwLndlYnAiLDIxOTk5Myw1MTMsNzY5LDI1MCwyNTAsZmFsc2UsMSwwLjUsMC41LFtdLFtdXV1dXSxbWyJTY3JvbGxUbyIsMTIsNjIyNzkyMTQ2MDkzNTI0LDE3XSxbIlRpbWVyIiwxMywxNjM3ODg3MDY1Njk0NzUsMThdXSxmYWxzZSxmYWxzZSw4MDQyMTg4NjUyNDcyODIsW10sbnVsbCwxOSxudWxsXSxbImNsb3VkIiwxMCxmYWxzZSxbWzc5NTk1MDYxODM1NjM2NywxLCJhbmdsZW9mbW90aW9uIiwyMF1dLDEsMCxudWxsLFtbIkFuaW1hdGlvbiAxIiwwLGZhbHNlLDEsMCxmYWxzZSwxOTgzMDY2Mzk5NDExNTcsW1siaW1hZ2VzL2Nsb3VkLXNoZWV0MS53ZWJwIiw3MjgxLDEsMSw1MCw0Mix0cnVlLDEsMS4wMiwwLjUyMzgwOTUyMzgwOTUyMzgsW10sWy0wLjg2LC0wLjMzMzMzMzMzMzMzMzMzMzM3LC0wLjUyLC0wLjQ1MjM4MDk1MjM4MDk1MjQ0LC0wLjI0LC0wLjI4NTcxNDI4NTcxNDI4NTc1LC0wLjA5OTk5OTk5OTk5OTk5OTk4LC0wLjAyMzgwOTUyMzgwOTUyMzgzNiwtMC4xODAwMDAwMDAwMDAwMDAwNSwwLjI4NTcxNDI4NTcxNDI4NTcsLTAuNTIsMC40MDQ3NjE5MDQ3NjE5MDQ3NywtMC44NiwwLjI2MTkwNDc2MTkwNDc2MTg2LC0wLjk2LC0wLjAyMzgwOTUyMzgwOTUyMzgzNl1dLFsiaW1hZ2VzL2Nsb3VkLXNoZWV0MS53ZWJwIiw3MjgxLDY1LDEsNTAsNDIsdHJ1ZSwxLDEsMC41MjM4MDk1MjM4MDk1MjM4LFtdLFstMC4wNjAwMDAwMDAwMDAwMDAwNSwtMC4wMjM4MDk1MjM4MDk1MjM4MzYsLTAuMTYwMDAwMDAwMDAwMDAwMDMsMC4yNjE5MDQ3NjE5MDQ3NjE4NiwtMC41LDAuNDA0NzYxOTA0NzYxOTA0NzcsLTAuODQsMC4yODU3MTQyODU3MTQyODU3LC0wLjkyLC0wLjAyMzgwOTUyMzgwOTUyMzgzNiwtMC43OCwtMC4yODU3MTQyODU3MTQyODU3NSwtMC41LC0wLjQ1MjM4MDk1MjM4MDk1MjQ0LC0wLjE2MDAwMDAwMDAwMDAwMDAzLC0wLjMzMzMzMzMzMzMzMzMzMzM3XV0sWyJpbWFnZXMvY2xvdWQtc2hlZXQwLndlYnAiLDEyNjY0NywyMzEsMjU3LDE3MywxMDAsdHJ1ZSwxLDEsMC41LFtdLFstMC44MDM0NjgyMDgwOTI0ODU1LC0wLjE1OTk5OTk5OTk5OTk5OTk4LC0wLjUsLTAuNDIsLTAuMTYxODQ5NzEwOTgyNjU5LC0wLjIyOTk5OTk5OTk5OTk5OTk4LC0wLjA0NjI0Mjc3NDU2NjQ3Mzk2NSwwLC0wLjEwOTgyNjU4OTU5NTM3NTcyLDAuMzEwMDAwMDAwMDAwMDAwMDUsLTAuNSwwLjM1LC0wLjkxOTA3NTE0NDUwODY3MDYsMC4zNSwtMC45MjQ4NTU0OTEzMjk0Nzk4LDBdXSxbImltYWdlcy9jbG91ZC1zaGVldDAud2VicCIsMTI2NjQ3LDMzMywyNTcsMTczLDEwMCx0cnVlLDEsMS4wMDU3ODAzNDY4MjA4MDkzLDAuNDcsW10sWy0wLjA4MDkyNDg1NTQ5MTMyOTU1LDAuMDMwMDAwMDAwMDAwMDAwMDI3LC0wLjA4NjcwNTIwMjMxMjEzODc0LDAuMzgsLTAuNTA1NzgwMzQ2ODIwODA5MywwLjM4LC0wLjg5NTk1Mzc1NzIyNTQzMzYsMC4zNDAwMDAwMDAwMDAwMDAxLC0wLjk1OTUzNzU3MjI1NDMzNTMsMC4wMzAwMDAwMDAwMDAwMDAwMjcsLTAuODQzOTMwNjM1ODM4MTUwMywtMC4xOTk5OTk5OTk5OTk5OTk5NiwtMC41MDU3ODAzNDY4MjA4MDkzLC0wLjM4OTk5OTk5OTk5OTk5OTk2LC0wLjIwMjMxMjEzODcyODMyMzc2LC0wLjEyOTk5OTk5OTk5OTk5OTk1XV0sWyJpbWFnZXMvY2xvdWQtc2hlZXQwLndlYnAiLDEyNjY0NywxLDEsMjExLDExMyx0cnVlLDEsMS4wMDQ3MzkzMzY0OTI4OTEsMC41MDQ0MjQ3Nzg3NjEwNjIsW10sWy0wLjg1MzA4MDU2ODcyMDM3OTEsLTAuMjIxMjM4OTM4MDUzMDk3MzYsLTAuNTA0NzM5MzM2NDkyODkwOSwtMC40MTU5MjkyMDM1Mzk4MjMsLTAuMTIzMjIyNzQ4ODE1MTY1ODIsLTAuMjkyMDM1Mzk4MjMwMDg4NSwtMC4wNDczOTMzNjQ5Mjg5MDk4OSwtMC4wMDQ0MjQ3Nzg3NjEwNjE5NTQsLTAuMTQyMTgwMDk0Nzg2NzI5NzcsMC4yMzg5MzgwNTMwOTczNDUxNywtMC41MDQ3MzkzMzY0OTI4OTA5LDAuMzYyODMxODU4NDA3MDc5NjUsLTAuOTE5NDMxMjc5NjIwODUzLDAuMzI3NDMzNjI4MzE4NTg0LC0wLjk2NjgyNDY0NDU0OTc2MywtMC4wMDQ0MjQ3Nzg3NjEwNjE5NTRdXSxbImltYWdlcy9jbG91ZC1zaGVldDAud2VicCIsMTI2NjQ3LDEyOSwxLDIxMSwxMTMsdHJ1ZSwxLDEuMDA0NzM5MzM2NDkyODkxLDAuNDYwMTc2OTkxMTUwNDQyNDcsW10sWy0wLjA0MjY1NDAyODQzNjAxODg0LDAuMDM5ODIzMDA4ODQ5NTU3NTMsLTAuMDkwMDQ3MzkzMzY0OTI4ODQsMC4zNzE2ODE0MTU5MjkyMDM1LC0wLjUwNDczOTMzNjQ5Mjg5MDksMC40MDcwNzk2NDYwMTc2OTkxNCwtMC44NjcyOTg1NzgxOTkwNTIxLDAuMjgzMTg1ODQwNzA3OTY0NjUsLTAuOTYyMDg1MzA4MDU2ODcyLDAuMDM5ODIzMDA4ODQ5NTU3NTMsLTAuODg2MjU1OTI0MTcwNjE2LC0wLjI0Nzc4NzYxMDYxOTQ2OTAyLC0wLjUwNDczOTMzNjQ5Mjg5MDksLTAuMzcxNjgxNDE1OTI5MjAzNTYsLTAuMTU2Mzk4MTA0MjY1NDAyOCwtMC4xNzY5OTExNTA0NDI0Nzc4N11dLFsiaW1hZ2VzL2Nsb3VkLXNoZWV0MC53ZWJwIiwxMjY2NDcsNDQ5LDI1Nyw4Nyw1Nyx0cnVlLDEsMS4wMTE0OTQyNTI4NzM1NjMzLDAuNTA4NzcxOTI5ODI0NTYxNCxbXSxbLTAuODk2NTUxNzI0MTM3OTMxMiwtMC4zMzMzMzMzMzMzMzMzMzMzNywtMC41MTE0OTQyNTI4NzM1NjMzLC0wLjM4NTk2NDkxMjI4MDcwMTgsLTAuMjQxMzc5MzEwMzQ0ODI3NzQsLTAuMTc1NDM4NTk2NDkxMjI4MTIsLTAuMDkxOTU0MDIyOTg4NTA1ODYsLTAuMDA4NzcxOTI5ODI0NTYxNDMsLTAuMTAzNDQ4Mjc1ODYyMDY5MDYsMC4zNTA4NzcxOTI5ODI0NTYxLC0wLjUxMTQ5NDI1Mjg3MzU2MzMsMC4yMTA1MjYzMTU3ODk0NzM2NywtMC44NTA1NzQ3MTI2NDM2NzgyLDAuMjI4MDcwMTc1NDM4NTk2NDIsLTAuOTY1NTE3MjQxMzc5MzEwNSwtMC4wMDg3NzE5Mjk4MjQ1NjE0M11dLFsiaW1hZ2VzL2Nsb3VkLXNoZWV0MC53ZWJwIiwxMjY2NDcsNDQ5LDM4NSw4Nyw1Nyx0cnVlLDEsMS4wMTE0OTQyNTI4NzM1NjMzLDAuNDczNjg0MjEwNTI2MzE1NzYsW10sWy0wLjA1NzQ3MTI2NDM2NzgxNjEzLDAuMDI2MzE1Nzg5NDczNjg0MjM3LC0wLjE3MjQxMzc5MzEwMzQ0ODQsMC4yNjMxNTc4OTQ3MzY4NDIxLC0wLjUxMTQ5NDI1Mjg3MzU2MzMsMC4yNDU2MTQwMzUwODc3MTkzNCwtMC45MTk1NDAyMjk4ODUwNTc2LDAuMzg1OTY0OTEyMjgwNzAxOCwtMC45MzEwMzQ0ODI3NTg2MjA4LDAuMDI2MzE1Nzg5NDczNjg0MjM3LC0wLjc4MTYwOTE5NTQwMjI5ODksLTAuMTQwMzUwODc3MTkyOTgyNDUsLTAuNTExNDk0MjUyODczNTYzMywtMC4zNTA4NzcxOTI5ODI0NTYxLC0wLjEyNjQzNjc4MTYwOTE5NTQ3LC0wLjI5ODI0NTYxNDAzNTA4NzddXV1dLFsiQW5pbWF0aW9uIDIiLDAsZmFsc2UsMSwwLGZhbHNlLDE4OTU3NDQ2MDU0NDc1NyxbWyJpbWFnZXMvY2xvdWQtc2hlZXQxLndlYnAiLDcyODEsMSw2NSw0OCw0MCx0cnVlLDEsMSwwLjUsW10sWy0wLjg3NSwtMC4zNSwtMC41LC0wLjQ3NSwtMC4xODc1LC0wLjMsLTAuMDYyNSwwLC0wLjE2NjY2NjY2NjY2NjY2NjYzLDAuMzAwMDAwMDAwMDAwMDAwMDQsLTAuNSwwLjQyNTAwMDAwMDAwMDAwMDA0LC0wLjgzMzMzMzMzMzMzMzMzMzQsMC4yNzUsLTAuOTU4MzMzMzMzMzMzMzMzNCwwXV0sWyJpbWFnZXMvY2xvdWQtc2hlZXQxLndlYnAiLDcyODEsNjUsNjUsNDgsNDAsdHJ1ZSwxLDEsMC40NzUsW10sWy0wLjA0MTY2NjY2NjY2NjY2NjYzLDAuMDI1MDAwMDAwMDAwMDAwMDIyLC0wLjE2NjY2NjY2NjY2NjY2NjYzLDAuMzAwMDAwMDAwMDAwMDAwMDQsLTAuNSwwLjQ1MDAwMDAwMDAwMDAwMDA3LC0wLjgzMzMzMzMzMzMzMzMzMzQsMC4zMjUwMDAwMDAwMDAwMDAwNywtMC45Mzc1LDAuMDI1MDAwMDAwMDAwMDAwMDIyLC0wLjgxMjUsLTAuMjc0OTk5OTk5OTk5OTk5OTcsLTAuNSwtMC40NDk5OTk5OTk5OTk5OTk5NiwtMC4xMjUsLTAuMzI0OTk5OTk5OTk5OTk5OTZdXSxbImltYWdlcy9jbG91ZC1zaGVldDAud2VicCIsMTI2NjQ3LDEsMjE0LDE3MSw5OCx0cnVlLDEsMSwwLjUzMDYxMjI0NDg5Nzk1OTIsW10sWy0wLjgxMjg2NTQ5NzA3NjAyMzQsLTAuMjA0MDgxNjMyNjUzMDYxMjgsLTAuNSwtMC40NjkzODc3NTUxMDIwNDA4NCwtMC4xNTc4OTQ3MzY4NDIxMDUzLC0wLjI2NTMwNjEyMjQ0ODk3OTYsLTAuMDQwOTM1NjcyNTE0NjE5OTM2LC0wLjAzMDYxMjI0NDg5Nzk1OTIxOCwtMC4xMTExMTExMTExMTExMTExNiwwLjI3NTUxMDIwNDA4MTYzMjYsLTAuNSwwLjMxNjMyNjUzMDYxMjI0NDksLTAuOTIzOTc2NjA4MTg3MTM0NiwwLjMyNjUzMDYxMjI0NDg5NzksLTAuOTQxNTIwNDY3ODM2MjU3MywtMC4wMzA2MTIyNDQ4OTc5NTkyMThdXSxbImltYWdlcy9jbG91ZC1zaGVldDAud2VicCIsMTI2NjQ3LDEyOSwyMTQsMTcxLDk4LHRydWUsMSwxLjAwNTg0Nzk1MzIxNjM3NDIsMC41MjA0MDgxNjMyNjUzMDYxLFtdLFstMC4wNjQzMjc0ODUzODAxMTY5LC0wLjAyMDQwODE2MzI2NTMwNjE0NSwtMC4wODE4NzEzNDUwMjkyMzk2NSwwLjMzNjczNDY5Mzg3NzU1MDk1LC0wLjUwNTg0Nzk1MzIxNjM3NDIsMC4zMjY1MzA2MTIyNDQ4OTgsLTAuODk0NzM2ODQyMTA1MjYzLDAuMjg1NzE0Mjg1NzE0Mjg1NywtMC45NjQ5MTIyODA3MDE3NTQzLC0wLjAyMDQwODE2MzI2NTMwNjE0NSwtMC44NDc5NTMyMTYzNzQyNjg5LC0wLjI1NTEwMjA0MDgxNjMyNjU0LC0wLjUwNTg0Nzk1MzIxNjM3NDIsLTAuNDU5MTgzNjczNDY5Mzg3NzcsLTAuMTkyOTgyNDU2MTQwMzUwOCwtMC4xOTM4Nzc1NTEwMjA0MDgyXV0sWyJpbWFnZXMvY2xvdWQtc2hlZXQwLndlYnAiLDEyNjY0NywyNTcsMSwyMDksMTExLHRydWUsMSwxLjAwNDc4NDY4ODk5NTIxNTIsMC41MzE1MzE1MzE1MzE1MzE1LFtdLFstMC44NTY0NTkzMzAxNDM1NDA2LC0wLjI1MjI1MjI1MjI1MjI1MjMsLTAuNTA0Nzg0Njg4OTk1MjE1MiwtMC40NTA0NTA0NTA0NTA0NTA0NiwtMC4xMTk2MTcyMjQ4ODAzODI3MywtMC4zMjQzMjQzMjQzMjQzMjQzNCwtMC4wNDMwNjIyMDA5NTY5Mzc2OSwtMC4wMzE1MzE1MzE1MzE1MzE1NCwtMC4xMzg3NTU5ODA4NjEyNDM5NywwLjIxNjIxNjIxNjIxNjIxNjIzLC0wLjUwNDc4NDY4ODk5NTIxNTIsMC4zNDIzNDIzNDIzNDIzNDIzLC0wLjkyMzQ0NDk3NjA3NjU1NSwwLjMwNjMwNjMwNjMwNjMwNjMsLTAuOTcxMjkxODY2MDI4NzA4MSwtMC4wMzE1MzE1MzE1MzE1MzE1NF1dLFsiaW1hZ2VzL2Nsb3VkLXNoZWV0MC53ZWJwIiwxMjY2NDcsMzg1LDEsMjA5LDExMSx0cnVlLDEsMSwwLjUwNDUwNDUwNDUwNDUwNDUsW10sWy0wLjAzMzQ5MjgyMjk2NjUwNzEzLC0wLjAwNDUwNDUwNDUwNDUwNDQ1ODUsLTAuMDgxMzM5NzEyOTE4NjYwMjcsMC4zMzMzMzMzMzMzMzMzMzMzNywtMC41LDAuMzY5MzY5MzY5MzY5MzY5MzcsLTAuODY2MDI4NzA4MTMzOTcxMywwLjI0MzI0MzI0MzI0MzI0MzMsLTAuOTYxNzIyNDg4MDM4Mjc3NSwtMC4wMDQ1MDQ1MDQ1MDQ1MDQ0NTg1LC0wLjg4NTE2NzQ2NDExNDgzMjUsLTAuMjk3Mjk3Mjk3Mjk3Mjk3MjYsLTAuNSwtMC40MjM0MjM0MjM0MjM0MjM0LC0wLjE0ODMyNTM1ODg1MTY3NDY0LC0wLjIyNTIyNTIyNTIyNTIyNTJdXSxbImltYWdlcy9jbG91ZC1zaGVldDAud2VicCIsMTI2NjQ3LDY1LDM4Nyw4NSw1NSx0cnVlLDEsMSwwLjU0NTQ1NDU0NTQ1NDU0NTQsW10sWy0wLjg5NDExNzY0NzA1ODgyMzYsLTAuMzgxODE4MTgxODE4MTgxOCwtMC41LC0wLjQzNjM2MzYzNjM2MzYzNjM0LC0wLjIyMzUyOTQxMTc2NDcwNTg3LC0wLjIxODE4MTgxODE4MTgxODE0LC0wLjA3MDU4ODIzNTI5NDExNzYyLC0wLjA0NTQ1NDU0NTQ1NDU0NTQxNCwtMC4wODIzNTI5NDExNzY0NzA2MywwLjMyNzI3MjcyNzI3MjcyNzI3LC0wLjUsMC4xODE4MTgxODE4MTgxODE4OCwtMC44NDcwNTg4MjM1Mjk0MTE4LDAuMjAwMDAwMDAwMDAwMDAwMDcsLTAuOTY0NzA1ODgyMzUyOTQxMiwtMC4wNDU0NTQ1NDU0NTQ1NDU0MTRdXSxbImltYWdlcy9jbG91ZC1zaGVldDAud2VicCIsMTI2NjQ3LDEyOSwzODcsODUsNTUsdHJ1ZSwxLDEsMC40OTA5MDkwOTA5MDkwOTA5LFtdLFstMC4wMzUyOTQxMTc2NDcwNTg4MSwwLjAwOTA5MDkwOTA5MDkwOTA5NCwtMC4xNTI5NDExNzY0NzA1ODgyNSwwLjI1NDU0NTQ1NDU0NTQ1NDYsLTAuNSwwLjIzNjM2MzYzNjM2MzYzNjQsLTAuOTE3NjQ3MDU4ODIzNTI5NCwwLjM4MTgxODE4MTgxODE4MTgsLTAuOTI5NDExNzY0NzA1ODgyNCwwLjAwOTA5MDkwOTA5MDkwOTA5NCwtMC43NzY0NzA1ODgyMzUyOTQxLC0wLjE2MzYzNjM2MzYzNjM2MzY0LC0wLjUsLTAuMzgxODE4MTgxODE4MTgxODMsLTAuMTA1ODgyMzUyOTQxMTc2NDMsLTAuMzI3MjcyNzI3MjcyNzI3MjddXV1dXSxbWyJCdWxsZXQiLDE0LDU3MzIzNjEzMzgwOTk5NywyMV1dLGZhbHNlLGZhbHNlLDI5MzA3NjA2MjExOTUzNyxbXSxudWxsLDIyLG51bGxdLFsiZ2FsbCIsMTAsZmFsc2UsW10sMCwwLG51bGwsW1siQW5pbWF0aW9uIDEiLDUsZmFsc2UsMSwwLGZhbHNlLDIyNDIwNzQ2NzA1NzI3MixbWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQwLndlYnAiLDIxOTk5MywxLDc2OSwyNTAsMjUwLGZhbHNlLDEsMC41LDAsW10sW11dXV1dLFtdLGZhbHNlLGZhbHNlLDU5MzA0NDIzMzAyNjM3NSxbXSxudWxsLDIzLG51bGxdLFsiZ2xhc3MiLDksZmFsc2UsW10sMSwwLFsiaW1hZ2VzL2dsYXNzLXNoZWV0MC53ZWJwIiw5MTksMCwwLDE1MCwxNTAsZmFsc2VdLG51bGwsW1siUGh5c2ljcyIsMTEsMjM3MDYyODY1NTc5NTI5LDEzXV0sZmFsc2UsZmFsc2UsMTI0ODk0NjA2NjIyMzcxLFtdLG51bGwsMjQsWzEsMV1dLFsiZ2xhc3MyIiw5LGZhbHNlLFtdLDAsMCxbImltYWdlcy9nbGFzczItc2hlZXQwLndlYnAiLDkxOSwwLDAsMTUwLDE1MCxmYWxzZV0sbnVsbCxbXSxmYWxzZSxmYWxzZSw1NTI0MTEzOTc1NTM1MTAsW10sbnVsbCwyNSxbMSwxXV0sWyJnbGFzczMiLDksZmFsc2UsW10sMCwwLFsiaW1hZ2VzL2dsYXNzMy1zaGVldDAud2VicCIsNTc4NywwLDAsMzAwLDE1MCxmYWxzZV0sbnVsbCxbXSxmYWxzZSxmYWxzZSw4ODc2Nzg5MzczODE2MjEsW10sbnVsbCwyNixbMSwyXV0sWyJnbGFzczQiLDksZmFsc2UsW10sMCwwLFsiaW1hZ2VzL2dsYXNzNC1zaGVldDAud2VicCIsOTIwLDAsMCwxNTAsMTUwLGZhbHNlXSxudWxsLFtdLGZhbHNlLGZhbHNlLDQ5ODE5MDIxMjEyODQyNyxbXSxudWxsLDI3LFsxLDFdXSxbImhlYWQiLDEwLGZhbHNlLFtbMTEwNjI0MTUzNTQ0MzgyLDEsInBsYXllciIsMjhdXSwxLDAsbnVsbCxbWyJBbmltYXRpb24gMSIsMCxmYWxzZSwxLDAsZmFsc2UsMzcyMDYzMzA0MTU3ODU3LFtbImltYWdlcy9oZWFkLXNoZWV0MC53ZWJwIiw4MzcwLDEsMSwzOCw0NyxmYWxzZSwxLDAuNjU3ODk0NzM2ODQyMTA1MywwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuOTU3NDQ2ODA4NTEwNjM4MiwtMC4xNTc4OTQ3MzY4NDIxMDUzLC0wLjk3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjk1NzQ0NjgwODUxMDYzODIsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzY4NDIxMDUyNjMxNTc5LC0wLjIzNDA0MjU1MzE5MTQ4OTM3LC0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsNDEsMSwzOCw0NyxmYWxzZSwxLDAuNjU3ODk0NzM2ODQyMTA1MywwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuOTU3NDQ2ODA4NTEwNjM4MiwtMC4xNTc4OTQ3MzY4NDIxMDUzLC0wLjk3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjk1NzQ0NjgwODUxMDYzODIsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzY4NDIxMDUyNjMxNTc5LC0wLjIzNDA0MjU1MzE5MTQ4OTM3LC0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsODEsMSwzOCw0NyxmYWxzZSwxLDAuNjU3ODk0NzM2ODQyMTA1MywwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuOTU3NDQ2ODA4NTEwNjM4MiwtMC4xNTc4OTQ3MzY4NDIxMDUzLC0wLjk3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjk1NzQ0NjgwODUxMDYzODIsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzY4NDIxMDUyNjMxNTc5LC0wLjIzNDA0MjU1MzE5MTQ4OTM3LC0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsMTIxLDEsMzgsNDcsZmFsc2UsMSwwLjY1Nzg5NDczNjg0MjEwNTMsMC45Nzg3MjM0MDQyNTUzMTkxLFtdLFstMC42MzE1Nzg5NDczNjg0MjExLC0wLjk1NzQ0NjgwODUxMDYzODIsLTAuMTU3ODk0NzM2ODQyMTA1MywtMC45Nzg3MjM0MDQyNTUzMTkxLDAuMjg5NDczNjg0MjEwNTI2MiwtMC45NTc0NDY4MDg1MTA2MzgyLDAuMjg5NDczNjg0MjEwNTI2MiwtMC40Nzg3MjM0MDQyNTUzMTkxLDAuMjg5NDczNjg0MjEwNTI2MiwtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4xNTc4OTQ3MzY4NDIxMDUzLC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjM2ODQyMTA1MjYzMTU3OSwtMC4yMzQwNDI1NTMxOTE0ODkzNywtMC42MzE1Nzg5NDczNjg0MjExLC0wLjQ3ODcyMzQwNDI1NTMxOTFdXSxbImltYWdlcy9oZWFkLXNoZWV0MC53ZWJwIiw4MzcwLDE2MSwxLDM4LDQ3LGZhbHNlLDEsMC42NTc4OTQ3MzY4NDIxMDUzLDAuOTc4NzIzNDA0MjU1MzE5MSxbXSxbLTAuNjMxNTc4OTQ3MzY4NDIxMSwtMC45NTc0NDY4MDg1MTA2MzgyLC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuOTc4NzIzNDA0MjU1MzE5MSwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuNDc4NzIzNDA0MjU1MzE5MSwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMTU3ODk0NzM2ODQyMTA1MywtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zNjg0MjEwNTI2MzE1NzksLTAuMjM0MDQyNTUzMTkxNDg5MzcsLTAuNjMxNTc4OTQ3MzY4NDIxMSwtMC40Nzg3MjM0MDQyNTUzMTkxXV0sWyJpbWFnZXMvaGVhZC1zaGVldDAud2VicCIsODM3MCwyMDEsMSwzOCw0NyxmYWxzZSwxLDAuNjU3ODk0NzM2ODQyMTA1MywwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuOTU3NDQ2ODA4NTEwNjM4MiwtMC4xNTc4OTQ3MzY4NDIxMDUzLC0wLjk3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjk1NzQ0NjgwODUxMDYzODIsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzY4NDIxMDUyNjMxNTc5LC0wLjIzNDA0MjU1MzE5MTQ4OTM3LC0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsMSw1MCwzOCw0NyxmYWxzZSwxLDAuNjU3ODk0NzM2ODQyMTA1MywwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuOTU3NDQ2ODA4NTEwNjM4MiwtMC4xNTc4OTQ3MzY4NDIxMDUzLC0wLjk3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjk1NzQ0NjgwODUxMDYzODIsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzY4NDIxMDUyNjMxNTc5LC0wLjIzNDA0MjU1MzE5MTQ4OTM3LC0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsNDEsNTAsMzgsNDcsZmFsc2UsMSwwLjM0MjEwNTI2MzE1Nzg5NDc1LDAuOTc4NzIzNDA0MjU1MzE5MSxbXSxbLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC45NTc0NDY4MDg1MTA2MzgyLDAuMTU3ODk0NzM2ODQyMTA1MjUsLTAuOTc4NzIzNDA0MjU1MzE5MSwwLjYwNTI2MzE1Nzg5NDczNjcsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjYwNTI2MzE1Nzg5NDczNjcsLTAuNDc4NzIzNDA0MjU1MzE5MSwwLjM0MjEwNTI2MzE1Nzg5NDc1LC0wLjIzNDA0MjU1MzE5MTQ4OTM3LDAuMTU3ODk0NzM2ODQyMTA1MjUsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjQ3ODcyMzQwNDI1NTMxOTFdXSxbImltYWdlcy9oZWFkLXNoZWV0MC53ZWJwIiw4MzcwLDgxLDUwLDM4LDQ3LGZhbHNlLDEsMC4zNDIxMDUyNjMxNTc4OTQ3NSwwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjE1Nzg5NDczNjg0MjEwNTI1LC0wLjk3ODcyMzQwNDI1NTMxOTEsMC42MDUyNjMxNTc4OTQ3MzY3LC0wLjk1NzQ0NjgwODUxMDYzODIsMC42MDUyNjMxNTc4OTQ3MzY3LC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4zNDIxMDUyNjMxNTc4OTQ3NSwtMC4yMzQwNDI1NTMxOTE0ODkzNywwLjE1Nzg5NDczNjg0MjEwNTI1LC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC40Nzg3MjM0MDQyNTUzMTkxXV0sWyJpbWFnZXMvaGVhZC1zaGVldDAud2VicCIsODM3MCwxMjEsNTAsMzgsNDcsZmFsc2UsMSwwLjM0MjEwNTI2MzE1Nzg5NDc1LDAuOTc4NzIzNDA0MjU1MzE5MSxbXSxbLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC45NTc0NDY4MDg1MTA2MzgyLDAuMTU3ODk0NzM2ODQyMTA1MjUsLTAuOTc4NzIzNDA0MjU1MzE5MSwwLjYwNTI2MzE1Nzg5NDczNjcsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjYwNTI2MzE1Nzg5NDczNjcsLTAuNDc4NzIzNDA0MjU1MzE5MSwwLjM0MjEwNTI2MzE1Nzg5NDc1LC0wLjIzNDA0MjU1MzE5MTQ4OTM3LDAuMTU3ODk0NzM2ODQyMTA1MjUsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjQ3ODcyMzQwNDI1NTMxOTFdXSxbImltYWdlcy9oZWFkLXNoZWV0MC53ZWJwIiw4MzcwLDE2MSw2NSwzOCw0NyxmYWxzZSwxLDAuMzQyMTA1MjYzMTU3ODk0NzUsMC45Nzg3MjM0MDQyNTUzMTkxLFtdLFstMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjk1NzQ0NjgwODUxMDYzODIsMC4xNTc4OTQ3MzY4NDIxMDUyNSwtMC45Nzg3MjM0MDQyNTUzMTkxLDAuNjA1MjYzMTU3ODk0NzM2NywtMC45NTc0NDY4MDg1MTA2MzgyLDAuNjA1MjYzMTU3ODk0NzM2NywtMC40Nzg3MjM0MDQyNTUzMTkxLDAuMzQyMTA1MjYzMTU3ODk0NzUsLTAuMjM0MDQyNTUzMTkxNDg5MzcsMC4xNTc4OTQ3MzY4NDIxMDUyNSwtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsMjAxLDY1LDM4LDQ3LGZhbHNlLDEsMC4zNDIxMDUyNjMxNTc4OTQ3NSwwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjE1Nzg5NDczNjg0MjEwNTI1LC0wLjk3ODcyMzQwNDI1NTMxOTEsMC42MDUyNjMxNTc4OTQ3MzY3LC0wLjk1NzQ0NjgwODUxMDYzODIsMC42MDUyNjMxNTc4OTQ3MzY3LC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4zNDIxMDUyNjMxNTc4OTQ3NSwtMC4yMzQwNDI1NTMxOTE0ODkzNywwLjE1Nzg5NDczNjg0MjEwNTI1LC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC40Nzg3MjM0MDQyNTUzMTkxXV0sWyJpbWFnZXMvaGVhZC1zaGVldDAud2VicCIsODM3MCwxLDk5LDM4LDQ3LGZhbHNlLDEsMC4zNDIxMDUyNjMxNTc4OTQ3NSwwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjE1Nzg5NDczNjg0MjEwNTI1LC0wLjk3ODcyMzQwNDI1NTMxOTEsMC42MDUyNjMxNTc4OTQ3MzY3LC0wLjk1NzQ0NjgwODUxMDYzODIsMC42MDUyNjMxNTc4OTQ3MzY3LC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4zNDIxMDUyNjMxNTc4OTQ3NSwtMC4yMzQwNDI1NTMxOTE0ODkzNywwLjE1Nzg5NDczNjg0MjEwNTI1LC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC40Nzg3MjM0MDQyNTUzMTkxXV0sWyJpbWFnZXMvaGVhZC1zaGVldDAud2VicCIsODM3MCw0MSw5OSwzOCw0NyxmYWxzZSwxLDAuMzY4NDIxMDUyNjMxNTc4OSwwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjM0MjEwNTI2MzE1Nzg5NDcsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjEzMTU3ODk0NzM2ODQyMTA3LC0wLjk3ODcyMzQwNDI1NTMxOTEsMC41Nzg5NDczNjg0MjEwNTI3LC0wLjk1NzQ0NjgwODUxMDYzODIsMC41Nzg5NDczNjg0MjEwNTI3LC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4zMTU3ODk0NzM2ODQyMTA1NiwtMC4yMzQwNDI1NTMxOTE0ODkzNywwLjEzMTU3ODk0NzM2ODQyMTA3LC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjM0MjEwNTI2MzE1Nzg5NDcsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzQyMTA1MjYzMTU3ODk0NywtMC40Nzg3MjM0MDQyNTUzMTkxXV0sWyJpbWFnZXMvaGVhZC1zaGVldDAud2VicCIsODM3MCw4MSw5OSwzOCw0NyxmYWxzZSwxLDAuNjU3ODk0NzM2ODQyMTA1MywwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuOTU3NDQ2ODA4NTEwNjM4MiwtMC4xNTc4OTQ3MzY4NDIxMDUzLC0wLjk3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjk1NzQ0NjgwODUxMDYzODIsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzY4NDIxMDUyNjMxNTc5LC0wLjIzNDA0MjU1MzE5MTQ4OTM3LC0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsMTIxLDk5LDM4LDQ3LGZhbHNlLDEsMC42NTc4OTQ3MzY4NDIxMDUzLDAuOTc4NzIzNDA0MjU1MzE5MSxbXSxbLTAuNjMxNTc4OTQ3MzY4NDIxMSwtMC45NTc0NDY4MDg1MTA2MzgyLC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuOTc4NzIzNDA0MjU1MzE5MSwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuNDc4NzIzNDA0MjU1MzE5MSwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMTU3ODk0NzM2ODQyMTA1MywtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zNjg0MjEwNTI2MzE1NzksLTAuMjM0MDQyNTUzMTkxNDg5MzcsLTAuNjMxNTc4OTQ3MzY4NDIxMSwtMC40Nzg3MjM0MDQyNTUzMTkxXV0sWyJpbWFnZXMvaGVhZC1zaGVldDAud2VicCIsODM3MCwxNjEsMTI5LDM4LDQ3LGZhbHNlLDEsMC42NTc4OTQ3MzY4NDIxMDUzLDAuOTc4NzIzNDA0MjU1MzE5MSxbXSxbLTAuNjMxNTc4OTQ3MzY4NDIxMSwtMC45NTc0NDY4MDg1MTA2MzgyLC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuOTc4NzIzNDA0MjU1MzE5MSwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuNDc4NzIzNDA0MjU1MzE5MSwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMTU3ODk0NzM2ODQyMTA1MywtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zNjg0MjEwNTI2MzE1NzksLTAuMjM0MDQyNTUzMTkxNDg5MzcsLTAuNjMxNTc4OTQ3MzY4NDIxMSwtMC40Nzg3MjM0MDQyNTUzMTkxXV0sWyJpbWFnZXMvaGVhZC1zaGVldDAud2VicCIsODM3MCwyMDEsMTI5LDM4LDQ3LGZhbHNlLDEsMC42NTc4OTQ3MzY4NDIxMDUzLDAuOTc4NzIzNDA0MjU1MzE5MSxbXSxbLTAuNjMxNTc4OTQ3MzY4NDIxMSwtMC45NTc0NDY4MDg1MTA2MzgyLC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuOTc4NzIzNDA0MjU1MzE5MSwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuNDc4NzIzNDA0MjU1MzE5MSwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMTU3ODk0NzM2ODQyMTA1MywtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zNjg0MjEwNTI2MzE1NzksLTAuMjM0MDQyNTUzMTkxNDg5MzcsLTAuNjMxNTc4OTQ3MzY4NDIxMSwtMC40Nzg3MjM0MDQyNTUzMTkxXV0sWyJpbWFnZXMvaGVhZC1zaGVldDAud2VicCIsODM3MCwxLDE0OCwzOCw0NyxmYWxzZSwxLDAuNjU3ODk0NzM2ODQyMTA1MywwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuOTU3NDQ2ODA4NTEwNjM4MiwtMC4xNTc4OTQ3MzY4NDIxMDUzLC0wLjk3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjk1NzQ0NjgwODUxMDYzODIsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4yODk0NzM2ODQyMTA1MjYyLC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzY4NDIxMDUyNjMxNTc5LC0wLjIzNDA0MjU1MzE5MTQ4OTM3LC0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsNDEsMTQ4LDM4LDQ3LGZhbHNlLDEsMC42NTc4OTQ3MzY4NDIxMDUzLDAuOTc4NzIzNDA0MjU1MzE5MSxbXSxbLTAuNjMxNTc4OTQ3MzY4NDIxMSwtMC45NTc0NDY4MDg1MTA2MzgyLC0wLjE1Nzg5NDczNjg0MjEwNTMsLTAuOTc4NzIzNDA0MjU1MzE5MSwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuNDc4NzIzNDA0MjU1MzE5MSwwLjI4OTQ3MzY4NDIxMDUyNjIsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMTU3ODk0NzM2ODQyMTA1MywtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zNjg0MjEwNTI2MzE1NzksLTAuMjM0MDQyNTUzMTkxNDg5MzcsLTAuNjMxNTc4OTQ3MzY4NDIxMSwtMC40Nzg3MjM0MDQyNTUzMTkxXV0sWyJpbWFnZXMvaGVhZC1zaGVldDAud2VicCIsODM3MCw4MSwxNDgsMzgsNDcsZmFsc2UsMSwwLjY1Nzg5NDczNjg0MjEwNTMsMC45Nzg3MjM0MDQyNTUzMTkxLFtdLFstMC42MzE1Nzg5NDczNjg0MjExLC0wLjk1NzQ0NjgwODUxMDYzODIsLTAuMTU3ODk0NzM2ODQyMTA1MywtMC45Nzg3MjM0MDQyNTUzMTkxLDAuMjg5NDczNjg0MjEwNTI2MiwtMC45NTc0NDY4MDg1MTA2MzgyLDAuMjg5NDczNjg0MjEwNTI2MiwtMC40Nzg3MjM0MDQyNTUzMTkxLDAuMjg5NDczNjg0MjEwNTI2MiwtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4xNTc4OTQ3MzY4NDIxMDUzLC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjM2ODQyMTA1MjYzMTU3OSwtMC4yMzQwNDI1NTMxOTE0ODkzNywtMC42MzE1Nzg5NDczNjg0MjExLC0wLjQ3ODcyMzQwNDI1NTMxOTFdXSxbImltYWdlcy9oZWFkLXNoZWV0MC53ZWJwIiw4MzcwLDEyMSwxNDgsMzgsNDcsZmFsc2UsMSwwLjY1Nzg5NDczNjg0MjEwNTMsMC45Nzg3MjM0MDQyNTUzMTkxLFtdLFstMC42MzE1Nzg5NDczNjg0MjExLC0wLjk1NzQ0NjgwODUxMDYzODIsLTAuMTU3ODk0NzM2ODQyMTA1MywtMC45Nzg3MjM0MDQyNTUzMTkxLDAuMjg5NDczNjg0MjEwNTI2MiwtMC45NTc0NDY4MDg1MTA2MzgyLDAuMjg5NDczNjg0MjEwNTI2MiwtMC40Nzg3MjM0MDQyNTUzMTkxLDAuMDI2MzE1Nzg5NDczNjg0MTgsLTAuMjM0MDQyNTUzMTkxNDg5MzcsLTAuMTU3ODk0NzM2ODQyMTA1MywtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC42MzE1Nzg5NDczNjg0MjExLC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjYzMTU3ODk0NzM2ODQyMTEsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsMTYxLDE5MywzOCw0NyxmYWxzZSwxLDAuMzQyMTA1MjYzMTU3ODk0NzUsMC45Nzg3MjM0MDQyNTUzMTkxLFtdLFstMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjk1NzQ0NjgwODUxMDYzODIsMC4xNTc4OTQ3MzY4NDIxMDUyNSwtMC45Nzg3MjM0MDQyNTUzMTkxLDAuNjA1MjYzMTU3ODk0NzM2NywtMC45NTc0NDY4MDg1MTA2MzgyLDAuNjA1MjYzMTU3ODk0NzM2NywtMC40Nzg3MjM0MDQyNTUzMTkxLDAuMzQyMTA1MjYzMTU3ODk0NzUsLTAuMjM0MDQyNTUzMTkxNDg5MzcsMC4xNTc4OTQ3MzY4NDIxMDUyNSwtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsMjAxLDE5MywzOCw0NyxmYWxzZSwxLDAuMzQyMTA1MjYzMTU3ODk0NzUsMC45Nzg3MjM0MDQyNTUzMTkxLFtdLFstMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjk1NzQ0NjgwODUxMDYzODIsMC4xNTc4OTQ3MzY4NDIxMDUyNSwtMC45Nzg3MjM0MDQyNTUzMTkxLDAuNjA1MjYzMTU3ODk0NzM2NywtMC45NTc0NDY4MDg1MTA2MzgyLDAuNjA1MjYzMTU3ODk0NzM2NywtMC40Nzg3MjM0MDQyNTUzMTkxLDAuMzQyMTA1MjYzMTU3ODk0NzUsLTAuMjM0MDQyNTUzMTkxNDg5MzcsMC4xNTc4OTQ3MzY4NDIxMDUyNSwtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsMSwxOTcsMzgsNDcsZmFsc2UsMSwwLjM0MjEwNTI2MzE1Nzg5NDc1LDAuOTc4NzIzNDA0MjU1MzE5MSxbXSxbLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC45NTc0NDY4MDg1MTA2MzgyLDAuMTU3ODk0NzM2ODQyMTA1MjUsLTAuOTc4NzIzNDA0MjU1MzE5MSwwLjYwNTI2MzE1Nzg5NDczNjcsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjYwNTI2MzE1Nzg5NDczNjcsLTAuNDc4NzIzNDA0MjU1MzE5MSwwLjM0MjEwNTI2MzE1Nzg5NDc1LC0wLjIzNDA0MjU1MzE5MTQ4OTM3LDAuMTU3ODk0NzM2ODQyMTA1MjUsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjQ3ODcyMzQwNDI1NTMxOTFdXSxbImltYWdlcy9oZWFkLXNoZWV0MC53ZWJwIiw4MzcwLDQxLDE5NywzOCw0NyxmYWxzZSwxLDAuMzQyMTA1MjYzMTU3ODk0NzUsMC45Nzg3MjM0MDQyNTUzMTkxLFtdLFstMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjk1NzQ0NjgwODUxMDYzODIsMC4xNTc4OTQ3MzY4NDIxMDUyNSwtMC45Nzg3MjM0MDQyNTUzMTkxLDAuNjA1MjYzMTU3ODk0NzM2NywtMC45NTc0NDY4MDg1MTA2MzgyLDAuNjA1MjYzMTU3ODk0NzM2NywtMC40Nzg3MjM0MDQyNTUzMTkxLDAuMzQyMTA1MjYzMTU3ODk0NzUsLTAuMjM0MDQyNTUzMTkxNDg5MzcsMC4xNTc4OTQ3MzY4NDIxMDUyNSwtMC4wMjEyNzY1OTU3NDQ2ODA3NywtMC4zMTU3ODk0NzM2ODQyMTA1LC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuNDc4NzIzNDA0MjU1MzE5MV1dLFsiaW1hZ2VzL2hlYWQtc2hlZXQwLndlYnAiLDgzNzAsODEsMTk3LDM4LDQ3LGZhbHNlLDEsMC4zNDIxMDUyNjMxNTc4OTQ3NSwwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjE1Nzg5NDczNjg0MjEwNTI1LC0wLjk3ODcyMzQwNDI1NTMxOTEsMC42MDUyNjMxNTc4OTQ3MzY3LC0wLjk1NzQ0NjgwODUxMDYzODIsMC42MDUyNjMxNTc4OTQ3MzY3LC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4zNDIxMDUyNjMxNTc4OTQ3NSwtMC4yMzQwNDI1NTMxOTE0ODkzNywwLjE1Nzg5NDczNjg0MjEwNTI1LC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC40Nzg3MjM0MDQyNTUzMTkxXV0sWyJpbWFnZXMvaGVhZC1zaGVldDAud2VicCIsODM3MCwxMjEsMTk3LDM4LDQ3LGZhbHNlLDEsMC4zNDIxMDUyNjMxNTc4OTQ3NSwwLjk3ODcyMzQwNDI1NTMxOTEsW10sWy0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuOTU3NDQ2ODA4NTEwNjM4MiwwLjE1Nzg5NDczNjg0MjEwNTI1LC0wLjk3ODcyMzQwNDI1NTMxOTEsMC42MDUyNjMxNTc4OTQ3MzY3LC0wLjk1NzQ0NjgwODUxMDYzODIsMC42MDUyNjMxNTc4OTQ3MzY3LC0wLjQ3ODcyMzQwNDI1NTMxOTEsMC4zNDIxMDUyNjMxNTc4OTQ3NSwtMC4yMzQwNDI1NTMxOTE0ODkzNywwLjE1Nzg5NDczNjg0MjEwNTI1LC0wLjAyMTI3NjU5NTc0NDY4MDc3LC0wLjMxNTc4OTQ3MzY4NDIxMDUsLTAuMDIxMjc2NTk1NzQ0NjgwNzcsLTAuMzE1Nzg5NDczNjg0MjEwNSwtMC40Nzg3MjM0MDQyNTUzMTkxXV1dXV0sW1siUGh5c2ljcyIsMTEsMTc2NTU0MzI3MTAzMDYzLDEzXV0sZmFsc2UsZmFsc2UsMzU5Mzc5OTQxOTYzNjI0LFtdLG51bGwsMjksbnVsbF0sWyJtYWlubmFtZSIsMTAsZmFsc2UsW10sMiwwLG51bGwsW1siQW5pbWF0aW9uIDEiLDAsZmFsc2UsMSwwLGZhbHNlLDc2ODQ5MzI2MzY5MTM1NSxbWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQwLndlYnAiLDIxOTk5MywxLDEsNDkxLDI4Nix0cnVlLDEsMC40NzQ1NDE3NTE1Mjc0OTQ5LDAuNjI5MzcwNjI5MzcwNjI5NCxbXSxbLTAuMzg5NTk2MjMzNTE1MjE1NiwtMC4yNzMwMTI2MDgzNjg1MjMxNSwtMC4wNTMyNjUxNzIwNzY2ODE5MSwtMC42MDM1NDQ3NzU2MTEwNDExLDAuMjI1MjI5NTE5OTE4MjE1OTQsLTAuMDU3NDQ4MTUxNDcxMjI4NzI2LDAuMjMzOTAyMTgxMzA3MjUxOTMsMC4yNzA2ODg4NTUxMzkwOTY5LDAuMjMzOTAyMTgxMzA3MjUxOTMsMC4zNzA2MjkzNzA2MjkzNzA2LC0wLjA1MzI2NTE3MjA3NjY4MTkxLDAuMzcwNjI5MzcwNjI5MzcwNiwtMC4zMTY2NzIxMTU1MjEwNjYzMywwLjM3MDYyOTM3MDYyOTM3MDYsLTAuNDc0NTQxNzUxNTI3NDk0OSwwLjI3MDY4ODg1NTEzOTA5NjldXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDI4OSwxLDQ5MSwyODYsdHJ1ZSwxLDAuNDYwMjg1MTMyMzgyODkyMDQsMC4zNzQxMjU4NzQxMjU4NzQxLFtdLFstMC40MzMxNTMzMzAyMTEwNjE0NSwtMC4zMzQ1ODk1MDI1MzQ0NjA4LDAuMDg5NjcxNjcxNjYzODQ1NDksLTAuMjgwMjI2OTkxNTk2MjY3NSwwLjQ3MzAwMTQyMDUyNzQ3NzczLC0wLjI1Nzk4Nzc4MjU3NjA5NzQ1LDAuMzg0MjQ4NDQ1MTA4Mjg5NiwtMC4wNzI2NjEwNDA3NDEzNDc1NSwwLjM4NDI0ODQ0NTEwODI4OTYsLTAuMDk5ODQyMjk2MjEwNDQ0MTYsMC4wODk2NzE2NzE2NjM4NDU0OSwwLjEwNjg4Nzg2NzM3NzM3NzkzLC0wLjM2NDg3Mzk0NTYzNzg0NiwwLjEwMDMxMDU4NDk3MTA4NTc1LC0wLjMyMzkwNjMxNDg5MzkxNjcsLTAuMDcyNjYxMDQwNzQxMzQ3NTVdXV1dXSxbWyJTaW5lIiwxNSwyMjM0Mjg0NDk5NTkxNTksMzBdLFsiU2luZTIiLDE1LDI0ODQ4ODg3NjIyODY3NCwzMV1dLGZhbHNlLGZhbHNlLDU1MTcyNzYyNTkwNTY2MixbXSxudWxsLDMyLG51bGxdLFsibWVudWJhY2siLDksZmFsc2UsW10sMSwwLFsiaW1hZ2VzL21lbnViYWNrLXNoZWV0MC53ZWJwIiwxNzkzOCwwLDAsMTI4MCw3MjEsZmFsc2VdLG51bGwsW1siQW5jaG9yIiw3LDc1Mzc0NjI3MjU4NDEwOCw2XV0sZmFsc2UsZmFsc2UsNjA5NjA2NDE4Njk5NTcyLFtdLG51bGwsMzMsWzEsMV1dLFsibWVudWJ1dHRvbiIsMTAsZmFsc2UsW10sMCwxLG51bGwsW1siQW5pbWF0aW9uIDEiLDAsZmFsc2UsMSwwLGZhbHNlLDU4NzY2MjkwNzMzODI4NyxbWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQwLndlYnAiLDIxOTk5Myw1MTMsMTI4MSwxNzIsMTcyLGZhbHNlLDEsMC41LDAuNSxbXSxbLTAuNDQ1MzcyMzYxODc2NTk2MzUsLTAuNDQ1MzcyMzYxODc2NTk2MzUsMCwtMC40OTEzNDYyODMxMDI1Njc1NiwwLjQzOTYyNTYyMTcyMzM0OTk2LC0wLjQ0NTM3MjM2MTg3NjU5NjM1LDAuNDg1NTk5NTQyOTQ5MzIxMDYsMCwwLjQzOTYyNTYyMTcyMzM0OTk2LDAuNDM5NjI1NjIxNzIzMzQ5OTYsMCwwLjQ4NTU5OTU0Mjk0OTMyMTA2LC0wLjQ0NTM3MjM2MTg3NjU5NjM1LDAuNDM5NjI1NjIxNzIzMzQ5OTYsLTAuNDkxMzQ2MjgzMTAyNTY3NTYsMF1dLFsiaW1hZ2VzL3NoYXJlZC0wLXNoZWV0MC53ZWJwIiwyMTk5OTMsNTEzLDE1MzcsMTcyLDE3MixmYWxzZSwxLDAuNSwwLjUsW10sWy0wLjQ0NTM3MjM2MTg3NjU5NjM1LC0wLjQ0NTM3MjM2MTg3NjU5NjM1LDAsLTAuNDkxMzQ2MjgzMTAyNTY3NTYsMC40Mzk2MjU2MjE3MjMzNDk5NiwtMC40NDUzNzIzNjE4NzY1OTYzNSwwLjQ4NTU5OTU0Mjk0OTMyMTA2LDAsMC40Mzk2MjU2MjE3MjMzNDk5NiwwLjQzOTYyNTYyMTcyMzM0OTk2LDAsMC40ODU1OTk1NDI5NDkzMjEwNiwtMC40NDUzNzIzNjE4NzY1OTYzNSwwLjQzOTYyNTYyMTcyMzM0OTk2LC0wLjQ5MTM0NjI4MzEwMjU2NzU2LDBdXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDEsMTUzNywxNzIsMTcyLGZhbHNlLDEsMC41LDAuNSxbXSxbLTAuNDUwNTgxMzk1MzQ4ODM3MjMsLTAuNDUwNTgxMzk1MzQ4ODM3MjMsMCwtMC40OTQxODYwNDY1MTE2Mjc5LDAuNDQ0NzY3NDQxODYwNDY1MTMsLTAuNDUwNTgxMzk1MzQ4ODM3MjMsMC40OTEyNzkwNjk3Njc0NDE4NCwwLDAuNDQ0NzY3NDQxODYwNDY1MTMsMC40NDQ3Njc0NDE4NjA0NjUxMywwLDAuNDkxMjc5MDY5NzY3NDQxODQsLTAuNDUwNTgxMzk1MzQ4ODM3MjMsMC40NDQ3Njc0NDE4NjA0NjUxMywtMC40OTQxODYwNDY1MTE2Mjc5LDBdXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDE3NSwxNTM3LDE3MiwxNzIsZmFsc2UsMSwwLjUsMC41LFtdLFstMC40NTM0ODgzNzIwOTMwMjMzLC0wLjQ1MzQ4ODM3MjA5MzAyMzMsMC4wMTc0NDE4NjA0NjUxMTYzMSwtMC40OTQxODYwNDY1MTE2Mjc5LDAuNDU5MzAyMzI1NTgxMzk1NCwtMC40MzAyMzI1NTgxMzk1MzQ4NywwLjQ5NDE4NjA0NjUxMTYyNzksMC4wMDI5MDY5NzY3NDQxODYwNTE3LDAuNDUzNDg4MzcyMDkzMDIzMywwLjQyNDQxODYwNDY1MTE2Mjc3LDAuMDE3NDQxODYwNDY1MTE2MzEsMC40OTQxODYwNDY1MTE2Mjc5LC0wLjQ0NzY3NDQxODYwNDY1MTIsMC40NDc2NzQ0MTg2MDQ2NTEyLC0wLjQ5NDE4NjA0NjUxMTYyNzksMC4wMDI5MDY5NzY3NDQxODYwNTE3XV1dXV0sW10sZmFsc2UsZmFsc2UsNDQ5MjExMDAwMzQ2MzkzLFtbImhhcmRsaWdodCIsIkhhcmRMaWdodCJdXSxudWxsLDM0LG51bGxdLFsibWVudWdsYXNzIiw5LGZhbHNlLFtdLDEsMCxbImltYWdlcy9tZW51Z2xhc3Mtc2hlZXQwLndlYnAiLDkxOSwwLDAsMTUwLDE1MCxmYWxzZV0sbnVsbCxbWyJBbmNob3IiLDcsNzc4MTQ3MTc3NDIxMDEyLDZdXSxmYWxzZSxmYWxzZSw4ODAzMzY2ODI5NzM4MDIsW10sbnVsbCwzNSxbMSwxXV0sWyJQYXJ0aWNsZXMiLDE2LGZhbHNlLFtdLDAsMCxbImltYWdlcy9zaGFyZWQtMC1zaGVldDIud2VicCIsMTE0NCwxLDMzLDE4LDE4LGZhbHNlXSxudWxsLFtdLGZhbHNlLGZhbHNlLDc5NTA0MDk0MTMzNzgzNSxbXSxudWxsLDM2LG51bGxdLFsiUGFydGljbGVzMiIsMTYsZmFsc2UsW1s3MjAzNzcxMzI1MjQxMTIsMSwic2lkZSIsMzddLFs3MTAwOTg2MjUxNTMwNDIsMSwid2luZCIsMzhdLFs2NTA0MzkzMTkzNDA5NzUsMSwic3RyZW5ndGgiLDM5XV0sMCwwLFsiaW1hZ2VzL3NoYXJlZC0wLXNoZWV0Mi53ZWJwIiwxMTQ0LDEsMSwxOCwxOCxmYWxzZV0sbnVsbCxbXSxmYWxzZSxmYWxzZSw3OTQ3OTY1MjA4NzM2NzcsW10sbnVsbCw0MCxudWxsXSxbInBsYW5ldCIsMTAsZmFsc2UsW10sMCwwLG51bGwsW1siQW5pbWF0aW9uIDEiLDAsZmFsc2UsMSwwLGZhbHNlLDUzODQyODgzMjc3NzI0NixbWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDM1MywxMjksMTAwLDEwMCxmYWxzZSwxLDAuNSwwLjUsW10sWzAuMzYwNDY1MTE2Mjc5MDY5NzQsLTAuMzYwNDY1MTE2Mjc5MDY5NzQsMC41LDAsMC4zNjA0NjUxMTYyNzkwNjk3NCwwLjM0ODgzNzIwOTMwMjMyNTUzLDAsMC40ODgzNzIwOTMwMjMyNTU4LC0wLjM0ODgzNzIwOTMwMjMyNTUzLDAuMzQ4ODM3MjA5MzAyMzI1NTMsLTAuNDg4MzcyMDkzMDIzMjU1OCwwLC0wLjM0ODgzNzIwOTMwMjMyNTUzLC0wLjM2MDQ2NTExNjI3OTA2OTc0LDAsLTAuNV1dLFsiaW1hZ2VzL3NoYXJlZC0wLXNoZWV0MC53ZWJwIiwyMTk5OTMsODcyLDE1MzcsMTMwLDE1NCxmYWxzZSwxLDAuNSwwLjUsW10sWzAuMTcwOTU5NDc1MzA3MzAxMzgsMC4xMTY1Mzg0MTg2NDYxNDcxMSwwLDAuMjU2Mzg0NTIxMDIxNTIzMywwLjMzNTU4NzExODE5NTgxMzksLTAuMzYxMjY5MDk3ODAzMDU1NiwwLjQ3NDg4NzQzMTQwOTE3MDQ1LDAsMC4zMjI5MjM0NTMzNTgyMzYsMC4zMzc5NjE0MTQwNzM4MjYyLDAsMC40Nzc4MDc1MTY0NDkyMDI2LC0wLjM4NjI0MTc3NzU0NjEyNTQsMC4zODQ1NzY3ODE1MzIyODUxNCwwLjIyMTYxNDEzNDY1NzYxMjkzLDBdXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDMxNywxNzkzLDE1NCwxNTQsZmFsc2UsMSwwLjUsMC41LFtdLFstMC4zNTA2NDkzNTA2NDkzNTA2NiwtMC4zNTA2NDkzNTA2NDkzNTA2NiwwLC0wLjQ5MzUwNjQ5MzUwNjQ5MzUsMC4zNDQxNTU4NDQxNTU4NDQxLC0wLjM1MDY0OTM1MDY0OTM1MDY2LDAuNDg3MDEyOTg3MDEyOTg3LDAsMC4zNDQxNTU4NDQxNTU4NDQxLDAuMzQ0MTU1ODQ0MTU1ODQ0MSwwLDAuNDg3MDEyOTg3MDEyOTg3LC0wLjM1MDY0OTM1MDY0OTM1MDY2LDAuMzQ0MTU1ODQ0MTU1ODQ0MSwtMC40OTM1MDY0OTM1MDY0OTM1LDBdXV1dXSxbXSxmYWxzZSxmYWxzZSwyODA0NTU3NzgzMzMzMTIsW10sbnVsbCw0MSxudWxsXSxbInNoYWRvdyIsOSxmYWxzZSxbXSwxLDAsWyJpbWFnZXMvc2hhZG93LXNoZWV0MC53ZWJwIiwyMTcsMCwwLDUwLDUwLGZhbHNlXSxudWxsLFtbIkFuY2hvciIsNywzOTY4NjI3NzIyNzAyNTAsNl1dLGZhbHNlLGZhbHNlLDIyNTc3MDEyNzMzMzc5OSxbXSxudWxsLDQyLFsxLDFdXSxbInNwYXduZXIiLDEwLGZhbHNlLFtdLDAsMCxudWxsLFtbIkFuaW1hdGlvbiAxIiw1LGZhbHNlLDEsMCxmYWxzZSw3ODczMzE0OTc2NTA2MDcsW1siaW1hZ2VzL3NoYXJlZC0wLXNoZWV0MC53ZWJwIiwyMTk5OTMsMjU3LDc2OSwyNTAsMjUwLGZhbHNlLDEsMC41LDAuNSxbXSxbXV1dXV0sW10sZmFsc2UsZmFsc2UsNjQ1NTk3NTg2MjIxNjY2LFtdLG51bGwsNDMsbnVsbF0sWyJTcHJpdGUiLDEwLGZhbHNlLFtbODg3NDcwODcxMjcyMjEyLDEsInBsYXllciIsMjhdXSwwLDAsbnVsbCxbWyJhIiwwLGZhbHNlLDEsMCxmYWxzZSwyNDU0MTY4ODYxMTg1NTAsW1siaW1hZ2VzL3Nwcml0ZS1zaGVldDAud2VicCIsMjQ2MjgsMSwxLDEzNSwxMjAsdHJ1ZSwxLDAuNTE4NTE4NTE4NTE4NTE4NSwwLjU1LFtdLFstMC40ODE0ODE0ODE0ODE0ODE0NSwtMC41MDgzMzMzMzMzMzMzMzM0LC0wLjAxODUxODUxODUxODUxODQ5LC0wLjU0MTY2NjY2NjY2NjY2NjcsMC40MjIyMjIyMjIyMjIyMjIzLC0wLjQ5MTY2NjY2NjY2NjY2NjcsMC40NjY2NjY2NjY2NjY2NjY3LC0wLjA1MDAwMDAwMDAwMDAwMDA0NCwwLjQyOTYyOTYyOTYyOTYyOTcsMC4zOTE2NjY2NjY2NjY2NjY2LC0wLjAxODUxODUxODUxODUxODQ5LDAuNDMzMzMzMzMzMzMzMzMzMjQsLTAuNDU5MjU5MjU5MjU5MjU5MjYsMC4zNzUsLTAuNTExMTExMTExMTExMTExMSwtMC4wNTAwMDAwMDAwMDAwMDAwNDRdXSxbImltYWdlcy9zcHJpdGUtc2hlZXQwLndlYnAiLDI0NjI4LDEsMjU3LDEzMSwxMTMsdHJ1ZSwxLDAuNSwwLjUzMDk3MzQ1MTMyNzQzMzcsW10sWy0wLjQ2MTgzMjA2MTA2ODcwMjMsLTAuNDg2NzI1NjYzNzE2ODE0MiwwLC0wLjUyMjEyMzg5MzgwNTMwOTgsMC40NTQxOTg0NzMyODI0NDI4LC0wLjQ4NjcyNTY2MzcxNjgxNDIsMC40ODQ3MzI4MjQ0Mjc0ODA5LDAsMC40MjM2NjQxMjIxMzc0MDQ1NiwwLjQ0MjQ3Nzg3NjEwNjE5NDYsMCwwLjQ1MTMyNzQzMzYyODMxODUsLTAuNDMxMjk3NzA5OTIzNjY0MSwwLjQ0MjQ3Nzg3NjEwNjE5NDYsLTAuNDg0NzMyODI0NDI3NDgwOSwwXV0sWyJpbWFnZXMvc3ByaXRlLXNoZWV0MC53ZWJwIiwyNDYyOCwxMjksMSwxMzUsMTIwLHRydWUsMSwwLjUyNTkyNTkyNTkyNTkyNTksMC41NDE2NjY2NjY2NjY2NjY2LFtdLFstMC40ODg4ODg4ODg4ODg4ODg5LC0wLjQ5OTk5OTk5OTk5OTk5OTk0LC0wLjAyNTkyNTkyNTkyNTkyNTkwOCwtMC41MzMzMzMzMzMzMzMzMzMzLDAuNDE0ODE0ODE0ODE0ODE0ODYsLTAuNDgzMzMzMzMzMzMzMzMzMywwLjQ1OTI1OTI1OTI1OTI1OTI2LC0wLjA0MTY2NjY2NjY2NjY2NjYzLDAuNDIyMjIyMjIyMjIyMjIyMywwLjQsLTAuMDI1OTI1OTI1OTI1OTI1OTA4LDAuNDQxNjY2NjY2NjY2NjY2NjUsLTAuNDU5MjU5MjU5MjU5MjU5MjYsMC4zNzUsLTAuNTE4NTE4NTE4NTE4NTE4NSwtMC4wNDE2NjY2NjY2NjY2NjY2M11dLFsiaW1hZ2VzL3Nwcml0ZS1zaGVldDAud2VicCIsMjQ2MjgsMTI5LDI1NywxMzEsMTEzLHRydWUsMSwwLjUsMC41MjY1NDg2NzI1NjYzNzE3LFtdLFstMC40NjE4MzIwNjEwNjg3MDIzLC0wLjQ4MjMwMDg4NDk1NTc1MjI0LDAsLTAuNTE3Njk5MTE1MDQ0MjQ3OCwwLjQ1NDE5ODQ3MzI4MjQ0MjgsLTAuNDgyMzAwODg0OTU1NzUyMjQsMC40ODQ3MzI4MjQ0Mjc0ODA5LDAsMC40MzEyOTc3MDk5MjM2NjQxLDAuNDQ2OTAyNjU0ODY3MjU2NTUsMCwwLjQ1NTc1MjIxMjM4OTM4MDQ2LC0wLjQzMTI5NzcwOTkyMzY2NDEsMC40MzgwNTMwOTczNDUxMzI2NSwtMC40ODQ3MzI4MjQ0Mjc0ODA5LDBdXSxbImltYWdlcy9zcHJpdGUtc2hlZXQwLndlYnAiLDI0NjI4LDI1NywxLDEzNSwxMjAsdHJ1ZSwxLDAuNTE4NTE4NTE4NTE4NTE4NSwwLjUyNSxbXSxbLTAuNDgxNDgxNDgxNDgxNDgxNDUsLTAuNDgzMzMzMzMzMzMzMzMzMzQsLTAuMDE4NTE4NTE4NTE4NTE4NDksLTAuNTE2NjY2NjY2NjY2NjY2NywwLjQyMjIyMjIyMjIyMjIyMjMsLTAuNDY2NjY2NjY2NjY2NjY2NywwLjQ2NjY2NjY2NjY2NjY2NjcsLTAuMDI1MDAwMDAwMDAwMDAwMDIyLDAuNDI5NjI5NjI5NjI5NjI5NywwLjQxNjY2NjY2NjY2NjY2NjYzLC0wLjAxODUxODUxODUxODUxODQ5LDAuNDU4MzMzMzMzMzMzMzMzMjYsLTAuNDU5MjU5MjU5MjU5MjU5MjYsMC40LC0wLjUxMTExMTExMTExMTExMTEsLTAuMDI1MDAwMDAwMDAwMDAwMDIyXV0sWyJpbWFnZXMvc3ByaXRlLXNoZWV0MC53ZWJwIiwyNDYyOCwyNTcsMjU3LDEzMSwxMTMsdHJ1ZSwxLDAuNSwwLjUyMjEyMzg5MzgwNTMwOTgsW10sWy0wLjQ2MTgzMjA2MTA2ODcwMjMsLTAuNDc3ODc2MTA2MTk0NjkwMywwLC0wLjUxMzI3NDMzNjI4MzE4NTksMC40NTQxOTg0NzMyODI0NDI4LC0wLjQ3Nzg3NjEwNjE5NDY5MDMsMC40ODQ3MzI4MjQ0Mjc0ODA5LDAsMC40Mzg5MzEyOTc3MDk5MjM3LDAuNDUxMzI3NDMzNjI4MzE4NSwwLDAuNDYwMTc2OTkxMTUwNDQyNCwtMC40Mzg5MzEyOTc3MDk5MjM3LDAuNDQyNDc3ODc2MTA2MTk0NiwtMC40ODQ3MzI4MjQ0Mjc0ODA5LDBdXSxbImltYWdlcy9zcHJpdGUtc2hlZXQwLndlYnAiLDI0NjI4LDM4NSwxLDEzNSwxMjAsdHJ1ZSwxLDAuNTI1OTI1OTI1OTI1OTI1OSwwLjUxNjY2NjY2NjY2NjY2NjcsW10sWy0wLjQ4ODg4ODg4ODg4ODg4ODksLTAuNDc1MDAwMDAwMDAwMDAwMDMsLTAuMDI1OTI1OTI1OTI1OTI1OTA4LC0wLjUwODMzMzMzMzMzMzMzMzQsMC40MTQ4MTQ4MTQ4MTQ4MTQ4NiwtMC40NTgzMzMzMzMzMzMzMzMzNywwLjQ1OTI1OTI1OTI1OTI1OTI2LC0wLjAxNjY2NjY2NjY2NjY2NjcyLDAuNDIyMjIyMjIyMjIyMjIyMywwLjQyNDk5OTk5OTk5OTk5OTkzLC0wLjAyNTkyNTkyNTkyNTkyNTkwOCwwLjQ2NjY2NjY2NjY2NjY2NjU2LC0wLjQ2NjY2NjY2NjY2NjY2NjcsMC40MDgzMzMzMzMzMzMzMzMzLC0wLjUxODUxODUxODUxODUxODUsLTAuMDE2NjY2NjY2NjY2NjY2NzJdXSxbImltYWdlcy9zcHJpdGUtc2hlZXQwLndlYnAiLDI0NjI4LDM4NSwyNTcsMTMxLDExMyx0cnVlLDEsMC41LDAuNTIyMTIzODkzODA1MzA5OCxbXSxbLTAuNDYxODMyMDYxMDY4NzAyMywtMC40Nzc4NzYxMDYxOTQ2OTAzLDAsLTAuNTEzMjc0MzM2MjgzMTg1OSwwLjQ1NDE5ODQ3MzI4MjQ0MjgsLTAuNDc3ODc2MTA2MTk0NjkwMywwLjQ4NDczMjgyNDQyNzQ4MDksMCwwLjQzODkzMTI5NzcwOTkyMzcsMC40NTEzMjc0MzM2MjgzMTg1LDAsMC40NjAxNzY5OTExNTA0NDI0LC0wLjQzODkzMTI5NzcwOTkyMzcsMC40NDI0Nzc4NzYxMDYxOTQ2LC0wLjQ4NDczMjgyNDQyNzQ4MDksMF1dXV1dLFtdLGZhbHNlLGZhbHNlLDc5MTQ3Njc1NDY4MTk1MixbXSxudWxsLDQ0LG51bGxdLFsiU3ByaXRlMTAiLDEwLGZhbHNlLFtdLDEsMCxudWxsLFtbIkFuaW1hdGlvbiAxIiw1LGZhbHNlLDEsMCxmYWxzZSwyNTM2ODIyMjE1MTgwMDgsW1siaW1hZ2VzL3NoYXJlZC0wLXNoZWV0MC53ZWJwIiwyMTk5OTMsNTEzLDEwMjUsMjUwLDI1MCxmYWxzZSwxLDAuNSwwLjUsW10sW11dXV1dLFtbIlBoeXNpY3MiLDExLDY5OTk5MTY5MjI4NTA4NiwxM11dLGZhbHNlLGZhbHNlLDg0NzA4NTI1MjE1MzkzNixbXSxudWxsLDQ1LG51bGxdLFsiU3ByaXRlMyIsMTAsZmFsc2UsW10sMSwwLG51bGwsW1siQW5pbWF0aW9uIDEiLDAsZmFsc2UsMSwwLGZhbHNlLDM1NDgwMTM3MjQ5NDcwMCxbWyJpbWFnZXMvc3ByaXRlMy1zaGVldDAud2VicCIsMTE1MjYsMSwxLDMzLDgyLGZhbHNlLDEsMC40ODQ4NDg0ODQ4NDg0ODQ4NiwwLjE5NTEyMTk1MTIxOTUxMjIsW10sWy0wLjI2Nzc0MzI3MTg4Mzk3NTIzLC0wLjE4OTgwMjgwNzM1NjA3NzcsMC4xMDAwMTkzNzczODQ0NTk2NSwtMC4xODY3ODUyNDQ4NTUxMDM3NSwwLjUxNTE1MTUxNTE1MTUxNTEsMC4wNzU0Mzg2MDMyOTQyNDc0NSwwLjUxNTE1MTUxNTE1MTUxNTEsMC41NTc2MzYxMjUzODM0NDEsLTAuMDE0NTMzOTgyODkyOTI2NCwwLjU1ODE5ODcwOTMzNDg3NjQsLTAuMDE1MzMwOTk0NTI4NDQ2NjYyLDAuMTkxMzM0NzMyMjc4MDY1MDIsLTAuMjc3NjExNzkzMzIzMzc2OTMsMC4xOTE2OTI4MDA2OTQzMDQyOF1dLFsiaW1hZ2VzL3Nwcml0ZTMtc2hlZXQwLndlYnAiLDExNTI2LDM2LDg1LDMzLDgwLGZhbHNlLDEsMC40ODQ4NDg0ODQ4NDg0ODQ4NiwwLjE4NzUsW10sWy0wLjAwMzc4NzkzNjU4NjMyMjMxNTgsLTAuMTg1OTM3NTA4OTQwNjk2NzIsMC4wNDIwNDU1NjQzNjI0OTY4NDYsLTAuMTg2NzE4NzU0NDcwMzQ4MzYsMC4wODc4NzkwNjUzMTEzMTU5NSwtMC4xODc1LDAuNTE1MTUxNTE1MTUxNTE1MSwwLjA4NzUwMDA0NzY4MzcxNTgzLDAuNTE1MTUxNTE1MTUxNTE1MSwwLjU3MjQ5OTk0Mjc3OTU0MDUsLTAuMDA5MDkxMDAxNTY4NDE4NTc3LDAuNTcyNTAwMDM4MTQ2OTcyMywtMC4wMDYwNjA5NzU5NzA2NDM5MjMsMC4xOTc1MDAwMzgxNDY5NzI2NV1dLFsiaW1hZ2VzL3Nwcml0ZTMtc2hlZXQwLndlYnAiLDExNTI2LDM2LDEsMzMsODIsZmFsc2UsMSwwLjQ4NDg0ODQ4NDg0ODQ4NDg2LDAuMTgyOTI2ODI5MjY4MjkyNjgsW10sWy0wLjQ1NDU0NTQ1NDU0NTQ1NDYsMC4wNzMxNzA3MzE3MDczMTcwOCwtMC4wNjM2MzY1NDg1OTEzODI2OCwtMC4xODA0ODc3OTU1NzM5MDkxLDAuMjc4Nzg3Nzg2MzEwMzY5NywtMC4xODA0ODc4NDIwOTQ2MDc0NywwLjI3ODc4Nzc4NjMxMDM2OTI3LDAuMjA0ODc3OTkyOTU1NjQ5NjgsMC4wMTIxMjE0ODk1NTM3NDA2NSwwLjIwMDAwMDAxODYwODI3OTIsMC4wMTUxNTE1MTUxNTE1MTUwODMsMC41NjA5NzU3MDI3OTc0OTQ0LC0wLjQ2NjY2Njk0NDA5OTE5NTA3LDAuNTYwOTc1NDIzNjczMzA0XV0sWyJpbWFnZXMvc3ByaXRlMy1zaGVldDAud2VicCIsMTE1MjYsMTc2LDEyOSwzMiw4MCxmYWxzZSwxLDAuNDM3NSwwLjIsW10sWy0wLjQzNzUsMC4wNDk5OTk5OTk5OTk5OTk5OSwtMC4wMDYyNDk5MDQ2MzI1NjgzNTksLTAuMiwwLjM0OTk5OTkwNDYzMjU2ODM2LC0wLjIsMC4zNjg3NTAwOTUzNjc0MzE2NCwwLjE4MjUwMDA3NjI5Mzk0NDg4LDAuMDc4MTI0NzYxNTgxNDIwOSwwLjE4NTAwMDAzODE0Njk3MjQsMC4wNzQ5OTk4MDkyNjUxMzY3MiwwLjU1OTk5OTg0NzQxMjEwOTUsLTAuNDM3NSwwLjU2MjQ5OTk5OTk5OTk5OThdXSxbImltYWdlcy9zcHJpdGUzLXNoZWV0MC53ZWJwIiwxMTUyNiw3MSwxLDMzLDgyLGZhbHNlLDEsMC42MDYwNjA2MDYwNjA2MDYxLDAuODA0ODc4MDQ4NzgwNDg3OSxbXSxbLTAuNTc1NzU3NTc1NzU3NTc1OCwtMC43OTI2ODI5MjY4MjkyNjgzLC0wLjEwNjA2MDYwNjA2MDYwNjA4LC0wLjc5MjY4MjkyNjgyOTI2ODMsLTAuMDc5NTQ1NTEyMzQzODk4NSwtMC4xODc0OTk5ODgzNjk4MjUxOCwwLjE4MTgxODE4MTgxODE4MTU1LC0wLjE4NTk3NTYyMTM4NjI3MjIyLDAuMTc0MjQyMzA4NjQ1NTM2NywwLjE4MjkyNjg0MDg5ODQ2NzEsLTAuMTA2MDYwNjA2MDYwNjA2MDgsMC4xODI5MjY4MjkyNjgyOTI2MiwtMC41OTQ2OTcxNDMwOTIyOTk5LC0wLjA1MzM1MzY1ODUzNjU4NTI1XV0sWyJpbWFnZXMvc3ByaXRlMy1zaGVldDAud2VicCIsMTE1MjYsMTA2LDEsMzMsODIsZmFsc2UsMSwwLjQ1NDU0NTQ1NDU0NTQ1NDUzLDAuODA0ODc4MDQ4NzgwNDg3OSxbXSxbMC4wMTUxNTEzOTk1NTQ2MjgzNTMsLTAuODA0ODc4MDQ4NzgwNDg3OSwwLjU0NTQ1NDU0NTQ1NDU0NTQsLTAuODA0ODc4MDQ4NzgwNDg3OSwwLjUyMjcyNzE1NzEzMDM4NiwtMC4wNzMxNzA3NDkxNTI1Nzg5MywwLjA0NTQ1NDU0NTQ1NDU0NTQ3LDAuMTgyOTI2ODI5MjY4MjkyNjIsLTAuMjY4OTM5MjIwNTQ0MDYzNywwLjE4NDQ1MTIwNzg4MjAyMDQsLTAuMjc2NTE1MzgyNzA4OTI1MSwtMC4xODkwMjQzODQ0Mjg4MTUyLDAuMDMwMzAyODU2OTA3NzAwMDcsLTAuMTkwNTQ4NzgwNDg3ODA1MV1dLFsiaW1hZ2VzL3Nwcml0ZTMtc2hlZXQwLndlYnAiLDExNTI2LDcxLDg1LDMzLDgwLGZhbHNlLDEsMC42MDYwNjA2MDYwNjA2MDYxLDAuODEyNSxbXSxbLTAuNjA2MDYwNjA2MDYwNjA2MSwtMC44MTI1LC0wLjEwNjA2MDYwNjA2MDYwNjA4LC0wLjgxMjUsLTAuMDg0ODQ4NTc3MzI1OTk0MzgsLTAuMTk3NTAwMDM4MTQ2OTcyMzcsMC4xNzU3NTc2NjgyMzUwODUxLC0wLjE5NTAwMDA3NjI5Mzk0NSwwLjE4MTgxODE4MTgxODE4MTg4LDAuMTg3NSwtMC4xOTA5MDkxODMzODY2MDA1LDAuMTg3NSwtMC41OTM5Mzk1Nzg4OTQ0MTI4LC0wLjA3NDk5OTk5OTk5OTk5OTg0XV0sWyJpbWFnZXMvc3ByaXRlMy1zaGVldDAud2VicCIsMTE1MjYsMjEwLDEyOSwzMiw4MCxmYWxzZSwxLDAuNDM3NSwwLjgyNSxbXSxbMC4wNDM3NDk4MDkyNjUxMzY3MiwtMC4yMTI0OTk5OTk5OTk5OTk5LDAuMDYyNSwtMC44MjUsMC41MzEyNSwtMC44MjUsMC41NDk5OTk3MTM4OTc3MDUxLC0wLjA4MjUwMDA3NjI5Mzk0NDk2LDAuMTMxMjUwMzgxNDY5NzI2NTYsMC4xNzUwMDAwMDAwMDAwMDAwNCwtMC4yNTYyNDk5MDQ2MzI1NjgzNiwwLjE3NTAwMDAwMDAwMDAwMDA0LC0wLjI2ODc1MDE5MDczNDg2MzMsLTAuMjA1MDAwMDE5MDczNDg1NjRdXSxbImltYWdlcy9zcHJpdGUzLXNoZWV0MC53ZWJwIiwxMTUyNiwxNDEsMSwzMyw4MixmYWxzZSwxLDAuNDg0ODQ4NDg0ODQ4NDg0ODYsMC4xOTUxMjE5NTEyMTk1MTIyLFtdLFstMC4yNjc3NDMyNzE4ODM5NzUyMywtMC4xODk4MDI4MDczNTYwNzc3LDAuMTAwMDE5Mzc3Mzg0NDU5NjUsLTAuMTg2Nzg1MjQ0ODU1MTAzNzUsMC41MTUxNTE1MTUxNTE1MTUxLDAuMDc1NDM4NjAzMjk0MjQ3NDUsMC41MTUxNTE1MTUxNTE1MTUxLDAuNTU3NjM2MTI1MzgzNDQxLC0wLjAxNDUzMzk4Mjg5MjkyNjQsMC41NTgxOTg3MDkzMzQ4NzY0LC0wLjAxNTMzMDk5NDUyODQ0NjY2MiwwLjE5MTMzNDczMjI3ODA2NTAyLC0wLjI3NzYxMTc5MzMyMzM3NjkzLDAuMTkxNjkyODAwNjk0MzA0MjhdXSxbImltYWdlcy9zcHJpdGUzLXNoZWV0MC53ZWJwIiwxMTUyNiwxMDYsMTI5LDMzLDgwLGZhbHNlLDEsMC40ODQ4NDg0ODQ4NDg0ODQ4NiwwLjE4NzUsW10sWy0wLjAwMzc4NzkzNjU4NjMyMjMxNTgsLTAuMTg1OTM3NTA4OTQwNjk2NzIsMC4wNDIwNDU1NjQzNjI0OTY4NDYsLTAuMTg2NzE4NzU0NDcwMzQ4MzYsMC4wODc4NzkwNjUzMTEzMTU5NSwtMC4xODc1LDAuNTE1MTUxNTE1MTUxNTE1MSwwLjA4NzUwMDA0NzY4MzcxNTgzLDAuNTE1MTUxNTE1MTUxNTE1MSwwLjU3MjQ5OTk0Mjc3OTU0MDUsLTAuMDA5MDkxMDAxNTY4NDE4NTc3LDAuNTcyNTAwMDM4MTQ2OTcyMywtMC4wMDYwNjA5NzU5NzA2NDM5MjMsMC4xOTc1MDAwMzgxNDY5NzI2NV1dLFsiaW1hZ2VzL3Nwcml0ZTMtc2hlZXQwLndlYnAiLDExNTI2LDE3NiwxLDMzLDgyLGZhbHNlLDEsMC40ODQ4NDg0ODQ4NDg0ODQ4NiwwLjE4MjkyNjgyOTI2ODI5MjY4LFtdLFstMC40NTQ1NDU0NTQ1NDU0NTQ2LDAuMDczMTcwNzMxNzA3MzE3MDgsLTAuMDYzNjM2NTQ4NTkxMzgyNjgsLTAuMTgwNDg3Nzk1NTczOTA5MSwwLjI3ODc4Nzc4NjMxMDM2OTcsLTAuMTgwNDg3ODQyMDk0NjA3NDcsMC4yNzg3ODc3ODYzMTAzNjkyNywwLjIwNDg3Nzk5Mjk1NTY0OTY4LDAuMDEyMTIxNDg5NTUzNzQwNjUsMC4yMDAwMDAwMTg2MDgyNzkyLDAuMDE1MTUxNTE1MTUxNTE1MDgzLDAuNTYwOTc1NzAyNzk3NDk0NCwtMC40NjY2NjY5NDQwOTkxOTUwNywwLjU2MDk3NTQyMzY3MzMwNF1dLFsiaW1hZ2VzL3Nwcml0ZTMtc2hlZXQwLndlYnAiLDExNTI2LDM2LDE2NywzMiw4MCxmYWxzZSwxLDAuNDM3NSwwLjIsW10sWy0wLjQzNzUsMC4wNDk5OTk5OTk5OTk5OTk5OSwtMC4wMDYyNDk5MDQ2MzI1NjgzNTksLTAuMiwwLjM0OTk5OTkwNDYzMjU2ODM2LC0wLjIsMC4zNjg3NTAwOTUzNjc0MzE2NCwwLjE4MjUwMDA3NjI5Mzk0NDg4LDAuMDc4MTI0NzYxNTgxNDIwOSwwLjE4NTAwMDAzODE0Njk3MjQsMC4wNzQ5OTk4MDkyNjUxMzY3MiwwLjU1OTk5OTg0NzQxMjEwOTUsLTAuNDM3NSwwLjU2MjQ5OTk5OTk5OTk5OThdXSxbImltYWdlcy9zcHJpdGUzLXNoZWV0MC53ZWJwIiwxMTUyNiwyMTEsMSwzMyw4MixmYWxzZSwxLDAuNjA2MDYwNjA2MDYwNjA2MSwwLjgwNDg3ODA0ODc4MDQ4NzksW10sWy0wLjU3NTc1NzU3NTc1NzU3NTgsLTAuNzkyNjgyOTI2ODI5MjY4MywtMC4xMDYwNjA2MDYwNjA2MDYwOCwtMC43OTI2ODI5MjY4MjkyNjgzLC0wLjA3OTU0NTUxMjM0Mzg5ODUsLTAuMTg3NDk5OTg4MzY5ODI1MTgsMC4xODE4MTgxODE4MTgxODE1NSwtMC4xODU5NzU2MjEzODYyNzIyMiwwLjE3NDI0MjMwODY0NTUzNjcsMC4xODI5MjY4NDA4OTg0NjcxLC0wLjEwNjA2MDYwNjA2MDYwNjA4LDAuMTgyOTI2ODI5MjY4MjkyNjIsLTAuNTk0Njk3MTQzMDkyMjk5OSwtMC4wNTMzNTM2NTg1MzY1ODUyNV1dLFsiaW1hZ2VzL3Nwcml0ZTMtc2hlZXQwLndlYnAiLDExNTI2LDEsMTI5LDMzLDgyLGZhbHNlLDEsMC40NTQ1NDU0NTQ1NDU0NTQ1MywwLjgwNDg3ODA0ODc4MDQ4NzksW10sWzAuMDE1MTUxMzk5NTU0NjI4MzUzLC0wLjgwNDg3ODA0ODc4MDQ4NzksMC41NDU0NTQ1NDU0NTQ1NDU0LC0wLjgwNDg3ODA0ODc4MDQ4NzksMC41MjI3MjcxNTcxMzAzODYsLTAuMDczMTcwNzQ5MTUyNTc4OTMsMC4wNDU0NTQ1NDU0NTQ1NDU0NywwLjE4MjkyNjgyOTI2ODI5MjYyLC0wLjI2ODkzOTIyMDU0NDA2MzcsMC4xODQ0NTEyMDc4ODIwMjA0LC0wLjI3NjUxNTM4MjcwODkyNTEsLTAuMTg5MDI0Mzg0NDI4ODE1MiwwLjAzMDMwMjg1NjkwNzcwMDA3LC0wLjE5MDU0ODc4MDQ4NzgwNTFdXSxbImltYWdlcy9zcHJpdGUzLXNoZWV0MC53ZWJwIiwxMTUyNiwxNDEsMTI5LDMzLDgwLGZhbHNlLDEsMC42MDYwNjA2MDYwNjA2MDYxLDAuODEyNSxbXSxbLTAuNjA2MDYwNjA2MDYwNjA2MSwtMC44MTI1LC0wLjEwNjA2MDYwNjA2MDYwNjA4LC0wLjgxMjUsLTAuMDg0ODQ4NTc3MzI1OTk0MzgsLTAuMTk3NTAwMDM4MTQ2OTcyMzcsMC4xNzU3NTc2NjgyMzUwODUxLC0wLjE5NTAwMDA3NjI5Mzk0NSwwLjE4MTgxODE4MTgxODE4MTg4LDAuMTg3NSwtMC4xOTA5MDkxODMzODY2MDA1LDAuMTg3NSwtMC41OTM5Mzk1Nzg4OTQ0MTI4LC0wLjA3NDk5OTk5OTk5OTk5OTg0XV0sWyJpbWFnZXMvc3ByaXRlMy1zaGVldDAud2VicCIsMTE1MjYsNzAsMTY3LDMyLDgwLGZhbHNlLDEsMC40Mzc1LDAuODI1LFtdLFswLjA0Mzc0OTgwOTI2NTEzNjcyLC0wLjIxMjQ5OTk5OTk5OTk5OTksMC4wNjI1LC0wLjgyNSwwLjUzMTI1LC0wLjgyNSwwLjU0OTk5OTcxMzg5NzcwNTEsLTAuMDgyNTAwMDc2MjkzOTQ0OTYsMC4xMzEyNTAzODE0Njk3MjY1NiwwLjE3NTAwMDAwMDAwMDAwMDA0LC0wLjI1NjI0OTkwNDYzMjU2ODM2LDAuMTc1MDAwMDAwMDAwMDAwMDQsLTAuMjY4NzUwMTkwNzM0ODYzMywtMC4yMDUwMDAwMTkwNzM0ODU2NF1dXV1dLFtbIlBoeXNpY3MiLDExLDM0MTA2NzUxNTgxNDIxMiwxM11dLGZhbHNlLGZhbHNlLDcwNzUxMjQzNjQ2OTAwMSxbXSxudWxsLDQ2LG51bGxdLFsiU3ByaXRlNCIsMTAsZmFsc2UsW10sMSwwLG51bGwsW1siQW5pbWF0aW9uIDEiLDAsZmFsc2UsMSwwLGZhbHNlLDk4NzA1ODk1MzA1NDAxMCxbWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDEzMywzODUsMjksODMsZmFsc2UsMSwwLjY2NjY2NjY2NjY2NjY2NjYsMC4wMTgzNDg2MjM4NTMyMTEwMSxbWyJJbWFnZSBQb2ludCAxIiwwLjkzOTM5MzkzOTM5MzkzOTQsMC45MDgyNTY4ODA3MzM5NDVdXSxbLTAuMzI1NzU3NjkxMzU0NDYyNiwtMC4wMTgzNDg2MjM4NTMyMTEwMSwwLjMzMzMzMzMzMzMzMzMzMzM3LC0wLjAxODM0ODYyMzg1MzIxMTAxLDAuMzMzMzMzMzMzMzMzMzMzMzcsMC45ODE2NTEzNzYxNDY3ODksLTAuNDk2NDQ4NTcxMDMxNzQzOCwwLjk4MTY1MTM3NjE0Njc4OSwtMC42NjY2NjY2NjY2NjY2NjY2LDAuOTMwNzE0NzQ3NTAxMDc1OSwtMC42NjY2NjY2NjY2NjY2NjY2LDAuNzc1MTkzMzAxOTA5NTYwMiwtMC4zMTA2MDY0MDczOTY3MjExMywwLjc3MzY3NjM5Njg3NDQ3N11dLFsiaW1hZ2VzL3NoYXJlZC0wLXNoZWV0MS53ZWJwIiw2MDYyMSwzMjEsMzg1LDI5LDgyLGZhbHNlLDEsMC4zMTAzNDQ4Mjc1ODYyMDY5LDAuMDEyMTk1MTIxOTUxMjE5NTEzLFtbIkltYWdlIFBvaW50IDEiLDAuMDM0NDgyNzU4NjIwNjg5NjU1LDAuOTAyNDM5MDI0MzkwMjQzOV1dLFstMC4zMTAzNDQ4Mjc1ODYyMDY5LC0wLjAxMjE5NTEyMTk1MTIxOTUxMywwLjM0OTEzODEyODM0NjQxMDQsLTAuMDEyMTk1MTIxOTUxMjE5NTEzLDAuMzQ0ODI3Mzg4ODk0OTY5MDYsMC43ODM1MzY2NTUxNDY5MDEyLDAuNjg5NjU1MTcyNDEzNzkzMSwwLjc4NDI5ODczMzk2NzEwNjgsMC42ODk2NTUxNzI0MTM3OTMxLDAuOTM4MjYyMTk1MTIxOTUxNSwwLjUzODc5MzAzNzY3NzYzMzEsMC45ODc4MDQ4NzgwNDg3ODA1LC0wLjMxMDM0NDgyNzU4NjIwNjksMC45ODc4MDQ4NzgwNDg3ODA1XV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDI4OSwzODUsMjksODMsZmFsc2UsMSwwLjY2NjY2NjY2NjY2NjY2NjYsMC4wMTgzNDg2MjM4NTMyMTEwMSxbWyJJbWFnZSBQb2ludCAxIiwwLjkzOTM5MzkzOTM5MzkzOTQsMC45MDgyNTY4ODA3MzM5NDVdXSxbLTAuMzI1NzU3NjkxMzU0NDYyNiwtMC4wMTgzNDg2MjM4NTMyMTEwMSwwLjMzMzMzMzMzMzMzMzMzMzM3LC0wLjAxODM0ODYyMzg1MzIxMTAxLDAuMzMzMzMzMzMzMzMzMzMzMzcsMC45ODE2NTEzNzYxNDY3ODksLTAuNDk2NDQ4NTcxMDMxNzQzOCwwLjk4MTY1MTM3NjE0Njc4OSwtMC42NjY2NjY2NjY2NjY2NjY2LDAuOTMwNzE0NzQ3NTAxMDc1OSwtMC42NjY2NjY2NjY2NjY2NjY2LDAuNzc1MTkzMzAxOTA5NTYwMiwtMC4zMTA2MDY0MDczOTY3MjExMywwLjc3MzY3NjM5Njg3NDQ3N11dLFsiaW1hZ2VzL3NoYXJlZC0wLXNoZWV0MS53ZWJwIiw2MDYyMSw0MzAsMzg1LDI5LDgyLGZhbHNlLDEsMC4zMTAzNDQ4Mjc1ODYyMDY5LDAuMDEyMTk1MTIxOTUxMjE5NTEzLFtbIkltYWdlIFBvaW50IDEiLDAuMDM0NDgyNzU4NjIwNjg5NjU1LDAuOTAyNDM5MDI0MzkwMjQzOV1dLFstMC4zMTAzNDQ4Mjc1ODYyMDY5LC0wLjAxMjE5NTEyMTk1MTIxOTUxMywwLjM0OTEzODEyODM0NjQxMDQsLTAuMDEyMTk1MTIxOTUxMjE5NTEzLDAuMzQ0ODI3Mzg4ODk0OTY5MDYsMC43ODM1MzY2NTUxNDY5MDEyLDAuNjg5NjU1MTcyNDEzNzkzMSwwLjc4NDI5ODczMzk2NzEwNjgsMC42ODk2NTUxNzI0MTM3OTMxLDAuOTM4MjYyMTk1MTIxOTUxNSwwLjUzODc5MzAzNzY3NzYzMzEsMC45ODc4MDQ4NzgwNDg3ODA1LC0wLjMxMDM0NDgyNzU4NjIwNjksMC45ODc4MDQ4NzgwNDg3ODA1XV1dXV0sW1siUGh5c2ljcyIsMTEsNzMxNTgxMTY1NzU1MTAwLDEzXV0sZmFsc2UsZmFsc2UsNDA2ODc1MTEzNzE1MjI4LFtdLG51bGwsNDcsbnVsbF0sWyJTcHJpdGU1IiwxMCxmYWxzZSxbXSwxLDAsbnVsbCxbWyJBbmltYXRpb24gMSIsMCxmYWxzZSwxLDAsZmFsc2UsNTQzNzA2MDY2NzI1MzA5LFtbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDEsMTAyNSwxODAsMjgwLGZhbHNlLDEsMC40OTM1ODk3NDM1ODk3NDM2LDAuOTg4MTg4OTc2Mzc3OTUyOCxbXSxbMC4xMzA0OTcwNjM0NTc5NTczLC0wLjk4NDI1MTk2ODUwMzkzNywwLjQ5MTcyNzY3MjQyNDQ0NzYsLTAuOTg0MjUxOTY4NTAzOTM3LDAuNDkxNzI3NDYyMDQ1MDY4MSwtMC45MzM0NjA1NTUyMzg0NDUyLDAuMTYzNTg2ODk5NzA4NjE1NSwtMC45MzQzMDcwNzkxMTU3OTMyLC0wLjQwMTY5NzMzODMxODk5ODk1LC0wLjU5MTQ2NDg4OTQxNDQyMDQsLTAuNDAxNjk3NTQ4Njk4Mzc4MywwLjAwNzg3NDAxNTc0ODAzMTQ4MiwtMC40ODcxNzk0ODcxNzk0ODcyLDAuMDA3ODc0MDE1NzQ4MDMxNDgyLC0wLjQ4NzE3OTQ4NzE3OTQ4NzIsLTAuNjE1MTY3NTU3OTgwMTY3XV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQwLndlYnAiLDIxOTk5Myw3NjksNTEzLDE4MCwzMTksZmFsc2UsMSwwLjQ5MzUwNjQ5MzUwNjQ5MzUsMSxbXSxbMC41MDY0OTM1MDY0OTM1MDY2LC0wLjk0MzU3MzY1NTc1MzMwMDEsMC4xNjM5NjA5Mzk4Nzc5OTI3LC0wLjk0MzU3MzY3NjY4MDMyMjgsLTAuMzk5MzUwNjk4ODkyMTcyMywtMC42MDY1ODMwNDIyMDQ1NjY4LC0wLjM5OTM1MDY0OTM1MDY0OTQsLTAuMDA0NzAyMTEwNjQ5Mjc2MzkyLC0wLjQ4MDUxOTQ4MDUxOTQ4MDUsLTAuMDA2MjY5NTkyNDc2NDg5MDYxLC0wLjQ5MzUwNjQ5MzUwNjQ5MzUsLTAuNjIzODI0NDg3Mjg1NTU0MywwLjE0NjEwMzk5NTE4Njk0MTksLTEsMC41MDY0OTM1MDY0OTM1MDY2LC0xXV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQwLndlYnAiLDIxOTk5Myw1NzcsMSwxODAsMzg0LGZhbHNlLDEsMC40OTM1MDY0OTM1MDY0OTM1LDEsW10sWzAuNTA2NDkzNTA2NDkzNTA2NiwtMC45NDY2MTQ1NzMzOTkyMjU4LDAuMTc1MzI0Nzc0NDA3NzIxMDQsLTAuOTQ1MzEyNDkwMDY1ODkyNSwtMC40MDI1OTc0MDI1OTc0MDI0NSwtMC42MDI4NjQ1ODgzMDAzODY5LC0wLjM4MzExNjg4MzExNjg4MywtMC4wMDM5MDYxNDA3MjQ4MTc5ODYsLTAuNDgwNTE5NDgwNTE5NDgwNSwtMC4wMDUyMDgzMzMzMzMzMzMzNywtMC40OTM1MDY0OTM1MDY0OTM1LC0wLjYyMTA5Mzc1LDAuMTMzMTE2Njg0OTUwNzkxMTUsLTEsMC41MDY0OTM1MDY0OTM1MDY2LC0xXV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQwLndlYnAiLDIxOTk5MywyNTcsMTAyNSwxODAsMjgwLGZhbHNlLDEsMC40OTM1MDY0OTM1MDY0OTM1LDEsW10sWy0wLjQ5MzUwNjQ5MzUwNjQ5MzUsLTEsLTAuMTI0NzkxNDMxMDE4NzY4NiwtMC45OTkxNDY3NjA5MzQwNDIxLDAuNDk1MzIwMzIyMTM1OTY0NiwtMC42MzEzOTkzMzA0MjU1ODc4LDAuNDk1MzIwMzIyMTM1OTY0NiwtMC4wMDY4MjU5Mzg1NjY1NTI4OTE2LDAuNDA4NzI4MTg1OTg3MzMxNDYsLTAuMDA2ODI1OTY0NjA1NDQyMjcsMC40MDg3MjgwMTU0OTgwNjcxLC0wLjYwMjM4OTAxOTkxMDc5MzIsLTAuMTYxMTA0MjE2MjQ3MzA2MDMsLTAuOTQzNjg2MDA2ODI1OTM4NSwtMC40OTM1MDY0OTM1MDY0OTM1LC0wLjk0NjI0NTczMzc4ODM5NTldXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDc2OSwxMDI1LDE4MCwzMTksZmFsc2UsMSwwLjQ5MzUwNjQ5MzUwNjQ5MzUsMSxbXSxbLTAuNDkzNTA2NDkzNTA2NDkzNSwtMSwtMC4xMjAxMjk5MTk2NzEzOTMxNCwtMSwwLjQ5MzUwNjY5MTY3MjU4NTI2LC0wLjYyMzgyNDQyNzQ5NDA2MSwwLjQ5MzUwNjQ5MzUwNjQ5MzUsLTAuMDA2MjY5NTkyNDc2NDg5MDYxLDAuNDAyNTk3MzAzNTE0MzU2OSwtMC4wMDc4MzcwMzg0Mjg4MDU3ODcsMC40MTIzMzc0NjQxNzE1NzA0LC0wLjYwNjU4MzEwMTk5NjA2MDEsLTAuMTYyMzM3NzYxNDIwNzA4MjIsLTAuOTQwNDM4OTA3MzQ4MjUwMSwtMC40OTM1MDY0OTM1MDY0OTM1LC0wLjk0Mjc4OTk4NjU4OTQ4NTVdXSxbImltYWdlcy9zaGFyZWQtMC1zaGVldDAud2VicCIsMjE5OTkzLDc2OSwxLDE4MCwzODQsZmFsc2UsMSwwLjQ5MzUwNjQ5MzUwNjQ5MzUsMSxbXSxbLTAuNDkzNTA2NDkzNTA2NDkzNSwtMSwtMC4xMjk4NzAwMzA3ODcwODQyLC0xLDAuNDk2NzUzMTQ3NjcwMjAxLC0wLjYyMjM5NTgxMzQ2NTExODQsMC40OTM1MDY0OTM1MDY0OTM1LC0wLjAwNTIwODMzMzMzMzMzMzM3LDAuNDA1ODQ0MjU0OTI3MjAxNCwtMC4wMDUyMDgzNDMyNjc0NDA3OTYsMC40MTg4MzExMTkyODk2NDU5NSwtMC42MTMyODEzOTQwNDQ1NTgxLC0wLjE1NTg0NDM1NDAxMDI0NzYsLTAuOTQ0MDEwNDIxNjMzNzIwNCwtMC40OTM1MDY0OTM1MDY0OTM1LC0wLjk0NTMxMjQ4NzU4MjM2NTddXV1dXSxbWyJQaHlzaWNzIiwxMSwzNjM0NzA1NDkwNDUwODYsMTNdXSxmYWxzZSxmYWxzZSwxOTA2MTM4NjY1ODY0ODcsW10sbnVsbCw0OCxudWxsXSxbIlNwcml0ZTYiLDEwLGZhbHNlLFtdLDAsMCxudWxsLFtbIkFuaW1hdGlvbiAxIiwwLGZhbHNlLDEsMCxmYWxzZSwxODUxMjcyMzM2ODkzNjIsW1siaW1hZ2VzL3Nwcml0ZTYtc2hlZXQwLndlYnAiLDIxMTk5MSw1MTMsMTUzNyw0MTEsMzc0LHRydWUsMSwwLjU3MTc3NjE1NTcxNzc2MTUsMC40NTcyMTkyNTEzMzY4OTg0LFtdLFstMC40OTE5NjA2MjUxMTgwNDM3LC0wLjQyMTA1NjAzMTIxMzI1ODk2LC0wLjAxMTQ5NjE5MTk2MDY2NDk4MSwtMC40NTQ1NDU0NTQ1NDU0NTQ1MywwLjQxMzM3NzMxNTA0NjI3MzIsLTAuMzYwODc0MjY5OTIwNzM0MywwLjQyODIyMzg0NDI4MjIzODUsMC4yNjYwMTkwNzY4NzYzOTg0LDAuMzAyMTk1NDYyNzQ1MzkyMiwwLjU0MDEwNjk1MTg3MTY1NzcsLTAuMDExNDk2MTkxOTYwNjY0OTgxLDAuNTQwMTA2OTUxODcxNjU3NywtMC4zODg3MjAzMzM2OTU3OTcwNiwwLjU0MDEwNjk1MTg3MTY1NzcsLTAuNDI4NDI4MTM4MDg4OTY4ODUsMC4yNjYwMTkwNzY4NzYzOTg0XV0sWyJpbWFnZXMvc3ByaXRlNi1zaGVldDAud2VicCIsMjExOTkxLDUxMywxMDI1LDQ2OCwzMjksdHJ1ZSwxLDAuNTc2OTIzMDc2OTIzMDc2OSwwLjUwNzU5ODc4NDE5NDUyODksW10sWy0wLjQ1NDI0NzA1MzIwODY1MjMsLTAuMjk5NjkzMjM5ODEwMzA3OCwwLjA2NTM0NDE2OTcwMjAzMzI3LC0wLjM4NTk1MjYyMTE2MDM3NSwwLjQyMzA3NjkyMzA3NjkyMzEzLC0wLjIwMjY1MTQzNTc5MTQ4MjIsMC40MjMwNzY5MjMwNzY5MjMxMywwLjM2MzQyNTc1NDMxODMzMzcsMC40MDY1NjgyNTYzODk2NDc4LDAuNDkyNDAxMjE1ODA1NDcxMTQsMC4wNjUzNDQxNjk3MDIwMzMyNywwLjQ5MjQwMTIxNTgwNTQ3MTE0LC0wLjMwNjkwMDI4ODUwMjYzNywwLjQ5MjQwMTIxNTgwNTQ3MTE0LC0wLjMyMjQxMDQ3NDI2MTE2NDg3LDAuMzYzNDI1NzU0MzE4MzMzN11dLFsiaW1hZ2VzL3Nwcml0ZTYtc2hlZXQwLndlYnAiLDIxMTk5MSwxLDEsNTcwLDMyNSx0cnVlLDEsMC41Mjk4MjQ1NjE0MDM1MDg4LDAuNDQzMDc2OTIzMDc2OTIzMSxbXSxbLTAuNDM1MjkyMzA2ODY2MDE5LC0wLjEwNjQyMzMzNDk2NDU0MzI2LDAuMTczNjkxNjAzNzkxNDI2MjMsLTAuMzY2NzgyMTIwODg1MzY4NDMsMC40NzAxNzU0Mzg1OTY0OTEyNSwtMC4yMzY2MDI3Mjc5MjQ5NTU4NSwwLjQ3MDE3NTQzODU5NjQ5MTI1LDAuNTU2OTIzMDc2OTIzMDc2OSwwLjQ3MDE3NTQzODU5NjQ5MTI1LDAuNTU2OTIzMDc2OTIzMDc2OSwwLjE3MzY5MTYwMzc5MTQyNjIzLDAuNTU2OTIzMDc2OTIzMDc2OSwtMC41Mjk4MjQ1NjE0MDM1MDg4LDAuNTU2OTIzMDc2OTIzMDc2OSwtMC41Mjk4MjQ1NjE0MDM1MDg4LDAuNTU2OTIzMDc2OTIzMDc2OV1dLFsiaW1hZ2VzL3Nwcml0ZTYtc2hlZXQwLndlYnAiLDIxMTk5MSw1MTMsMSw2MDgsMzAxLHRydWUsMSwwLjUzNzgyODk0NzM2ODQyMSwwLjU0NDg1MDQ5ODMzODg3MDQsW10sWy0wLjQ2OTczMTU0MTUwMDc4MTcsLTAuMjUyMzkzODY1MjUwOTE2MzQsLTAuMDgwMzUzMTUwMTE3MzY4ODIsLTAuNDU4MDE1MzU0OTcyMTkzMTQsMC4yNzA1NjgxMTYxOTExMzkxLC0wLjE2NzcyNjE5MzAxMjc0MzY2LDAuNDI5MjAzNzU3MTI1MTIyMTUsMC4xNzA5NDQ0OTU5Mzk5NDc0MywwLjI4OTc5NjY3ODcyODU5MTcsMC40NTUxNDk1MDE2NjExMjk1NSwtMC4wODAzNTMxNTAxMTczNjg4MiwwLjQ1NTE0OTUwMTY2MTEyOTU1LC0wLjUzNzgyODk0NzM2ODQyMSwwLjQ1NTE0OTUwMTY2MTEyOTU1LC0wLjM5MjgxNzI5MTM1MDk3MTc2LDAuMTcwOTQ0NDk1OTM5OTQ3NDNdXSxbImltYWdlcy9zcHJpdGU2LXNoZWV0MC53ZWJwIiwyMTE5OTEsMjU3LDE1MzcsMzU2LDE5OCx0cnVlLDEsMC41MDU2MTc5Nzc1MjgwODk5LDAuMjgyODI4MjgyODI4MjgyOCxbXSxbLTAuMzU1NjI2MDkwMTMxMDE4NTQsLTAuMDMyMTAwNjY3NjkzODg4MDMsLTAuMDA1NjE3OTc3NTI4MDg5OTAxLC0wLjAyMDExNjQxODQyMTUwMzEzNSwwLjQyMzM2NjMyNDU4NTI0MzI2LC0wLjE2OTkxOTUzNDMyNjMxMzk2LDAuMzE1NjcxNTIwNzA3NDE4OSwwLjI1MjUyNTI1MjUyNTI1MjU0LDAuMzEyMDgxNjkzOTExNDkxNTQsMC40ODMyMjIwNTEwMTg2NjEzLC0wLjAwNTYxNzk3NzUyODA4OTkwMSwwLjM5OTMzMjMwNjExMTk2NzIsLTAuMjczMDYwMDczODI0Njg2NjcsMC4zOTMzNDAxODE0NzU3NzQ2LC0wLjMxMjU0ODE2ODU3OTg4ODksMC4yNTI1MjUyNTI1MjUyNTI1NF1dLFsiaW1hZ2VzL3Nwcml0ZTYtc2hlZXQwLndlYnAiLDIxMTk5MSwxLDEwMjUsNTQ1LDIyMix0cnVlLDEsMC40OTcyNDc3MDY0MjIwMTg0LDAuMjk3Mjk3Mjk3Mjk3Mjk3MyxbXSxbLTAuMzYzMzAyNzUyMjkzNTc4LDAuMDMxNTMxNTMxNTMxNTMxNTQsMC4wMDI3NTIyOTM1Nzc5ODE2MjM4LC0wLjI3NDc3NDc3NDc3NDc3NDgsMC4zODM0ODYyMzg1MzIxMTAxLC0wLjAwOTAwOTAwOTAwOTAwOTAyOCwwLjM5MDgyNTY4ODA3MzM5NDUsMC4yMDI3MDI3MDI3MDI3MDI3LDAuMzcwNjQyMjAxODM0ODYyMzUsMC4zNzgzNzgzNzgzNzgzNzgzNCwwLjAwMjc1MjI5MzU3Nzk4MTYyMzgsMC40ODE5ODE5ODE5ODE5ODIsLTAuMzUwNDU4NzE1NTk2MzMwMywwLjMzNzgzNzgzNzgzNzgzNzgsLTAuMzU5NjMzMDI3NTIyOTM1OCwwLjIwMjcwMjcwMjcwMjcwMjddXSxbImltYWdlcy9zcHJpdGU2LXNoZWV0MS53ZWJwIiw3NDQyLDE5MywxLDUyLDExMCxmYWxzZSwxLDAuNTE5MjMwNzY5MjMwNzY5MywwLjIsW10sWy0wLjQ2MTUzODQ2MTUzODQ2MTU2LC0wLjEyNzI3MjcyNzI3MjcyNzMsMC4wMjg4NDYxNTM4NDYxNTM4NTUsLTAuMTYzNjM2MzYzNjM2MzYzNjQsMC40MDM4NDYxNTM4NDYxNTM4NSwtMC4wODE4MTgxODE4MTgxODE4MywwLjM2NTM4NDYxNTM4NDYxNTMsMC40NzI3MjcyNzI3MjcyNzI3LC0wLjEzNDYxNTM4NDYxNTM4NDY0LDAuNzYzNjM2MzYzNjM2MzYzNywwLjAyODg0NjE1Mzg0NjE1Mzg1NSwwLjc1NDU0NTQ1NDU0NTQ1NDYsMC4yNSwwLjcyNzI3MjcyNzI3MjcyNzMsLTAuMjExNTM4NDYxNTM4NDYxNTYsMC40NzI3MjcyNzI3MjcyNzI3XV0sWyJpbWFnZXMvc3ByaXRlNi1zaGVldDEud2VicCIsNzQ0MiwxLDEsODgsMTEzLGZhbHNlLDEsMC41LDAuMjAzNTM5ODIzMDA4ODQ5NTcsW10sWy0wLjM0MDkwOTA5MDkwOTA5MDk0LC0wLjA3MDc5NjQ2MDE3Njk5MTE1LDAuMDM5NzcyNzI3MjcyNzI3MjksLTAuMTg1ODQwNzA3OTY0NjAxNzgsMC4zNzUsLTAuMDQ0MjQ3Nzg3NjEwNjE5NDgsMC4wNTY4MTgxODE4MTgxODE4OCwwLjQ2MDE3Njk5MTE1MDQ0MjUsMC4xMTM2MzYzNjM2MzYzNjM2NSwwLjc1MjIxMjM4OTM4MDUzMTEsMC4wMzk3NzI3MjcyNzI3MjcyOSwwLjc2MTA2MTk0NjkwMjY1NDgsLTAuMDU2ODE4MTgxODE4MTgxODIsMC43NjEwNjE5NDY5MDI2NTQ4LC0wLjQzMTgxODE4MTgxODE4MTgsMC40NjAxNzY5OTExNTA0NDI1XV0sWyJpbWFnZXMvc3ByaXRlNi1zaGVldDEud2VicCIsNzQ0Miw5MSwxLDgzLDExMSxmYWxzZSwxLDAuNTA2MDI0MDk2Mzg1NTQyMSwwLjIyNTIyNTIyNTIyNTIyNTIzLFtdLFstMC4zMzczNDkzOTc1OTAzNjE0LC0wLjA5OTA5OTA5OTA5OTA5OTExLDAuMDMwMTIwNDgxOTI3NzEwODg1LC0wLjIxNjIxNjIxNjIxNjIxNjIzLDAuMzYxNDQ1NzgzMTMyNTMwMiwtMC4wODEwODEwODEwODEwODEwOSwwLjQ2OTg3OTUxODA3MjI4OTIsMC40NDE0NDE0NDE0NDE0NDE0LDAuMDg0MzM3MzQ5Mzk3NTkwNDEsMC43NDc3NDc3NDc3NDc3NDc4LDAuMDMwMTIwNDgxOTI3NzEwODg1LDAuNzQ3NzQ3NzQ3NzQ3NzQ3OCwtMC4wMzYxNDQ1NzgzMTMyNTI5NiwwLjc0Nzc0Nzc0Nzc0Nzc0NzgsLTAuMzQ5Mzk3NTkwMzYxNDQ1NzQsMC40NDE0NDE0NDE0NDE0NDE0XV1dXV0sW10sZmFsc2UsZmFsc2UsMTU1Mzc5OTcyMTA2MzY5LFtdLG51bGwsNDksbnVsbF0sWyJTcHJpdGU5IiwxMCxmYWxzZSxbXSwyLDAsbnVsbCxbWyJBbmltYXRpb24gMSIsNSxmYWxzZSwxLDAsZmFsc2UsMzIyNjg4MTk5OTE0MDI5LFtbImltYWdlcy9zaGFyZWQtMC1zaGVldDEud2VicCIsNjA2MjEsNzAsNDQ5LDYxLDYxLGZhbHNlLDEsMC41LDAuNSxbXSxbLTAuMzUyNDU5MDE2MzkzNDQyNiwtMC4zNTI0NTkwMTYzOTM0NDI2LDAsLTAuNSwwLjMzNjA2NTU3Mzc3MDQ5MTg0LC0wLjM1MjQ1OTAxNjM5MzQ0MjYsMC40ODM2MDY1NTczNzcwNDkxNiwwLDAuMzM2MDY1NTczNzcwNDkxODQsMC4zMzYwNjU1NzM3NzA0OTE4NCwwLDAuNDgzNjA2NTU3Mzc3MDQ5MTYsLTAuMzUyNDU5MDE2MzkzNDQyNiwwLjMzNjA2NTU3Mzc3MDQ5MTg0LC0wLjUsMF1dXV1dLFtbIkRyYWdEcm9wIiwxNyw0MjcwMzM3MTc0MjI0NTcsNTBdLFsiUGh5c2ljcyIsMTEsNzIxNTk5Mzk1NDU3Mzg3LDEzXV0sZmFsc2UsZmFsc2UsNTA5Mzc3OTk5MjI2MjEzLFtdLG51bGwsNTEsbnVsbF0sWyJZYW5kZXhTREsiLDE4LGZhbHNlLFtdLDAsMCxudWxsLG51bGwsW10sZmFsc2UsZmFsc2UsMTE4MjI3ODEzOTUxNDg4LFtdLG51bGwsNTIsbnVsbCxbdHJ1ZSwyLHRydWUsMCxmYWxzZV1dLFsiU3ByaXRlMiIsMTAsZmFsc2UsW10sMCwwLG51bGwsW1siQW5pbWF0aW9uIDEiLDAsZmFsc2UsMSwwLGZhbHNlLDc4ODg3ODk0OTU5NDE0MCxbWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDE3NSwxLDEzMiw4Nyx0cnVlLDEsMC41LDAuNSxbXSxbXV1dXV0sW10sZmFsc2UsZmFsc2UsMzk5MDA0ODQzMzU0NzY1LFtdLG51bGwsNTMsbnVsbF0sWyJTcHJpdGU3IiwxMCxmYWxzZSxbXSwwLDAsbnVsbCxbWyJBbmltYXRpb24gMSIsMCxmYWxzZSwxLDAsZmFsc2UsMzk5OTIxODYzMDgzNjMyLFtbImltYWdlcy9zaGFyZWQtMC1zaGVldDEud2VicCIsNjA2MjEsMSwxLDE3Niw4NSx0cnVlLDEsMC41LDAuNSxbXSxbXV0sWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDg4LDEsMTc2LDg1LHRydWUsMSwwLjUsMC41LFtdLFtdXV1dXSxbXSxmYWxzZSxmYWxzZSw1ODcxNDUzMDczMTg4NzQsW10sbnVsbCw1NCxudWxsXSxbInRvcCIsMTAsZmFsc2UsW10sMSwwLG51bGwsW1siQW5pbWF0aW9uIDEiLDAsZmFsc2UsMSwwLGZhbHNlLDgzMDE1NDI1Nzg3MzcwNSxbWyJpbWFnZXMvc2hhcmVkLTAtc2hlZXQxLndlYnAiLDYwNjIxLDI2NCwxLDEzMiw4Nyx0cnVlLDEsMC41LDAuNSxbXSxbXV1dXV0sW1siU2luZSIsMTUsNTU5MjYxMTM0ODE4ODQyLDMwXV0sZmFsc2UsZmFsc2UsNDkxNDkyNDkyMzU3NTIxLFtdLG51bGwsNTUsbnVsbF0sWyJnbGFzczUiLDksZmFsc2UsW1sxMzgxNjk0MDU3NzU2MzIsMiwidGFnIiw1Nl1dLDEsMCxbImltYWdlcy9nbGFzczUtc2hlZXQwLndlYnAiLDkxOSwwLDAsMTUwLDE1MCxmYWxzZV0sbnVsbCxbWyJQaHlzaWNzIiwxMSwxNzk5MzUyOTU2MTYwNTYsMTNdXSxmYWxzZSxmYWxzZSw3MDQyMDcxNzMzNzgxNjYsW10sbnVsbCw1NyxbMSwxXV0sWyJEcmF3aW5nQ2FudmFzIiwxOSxmYWxzZSxbWzM1NzkwOTM4OTY0MDYxOSwyLCJ0YWciLDU2XSxbOTY1Mjg4MDI0NzE1NjA2LDEsInBsYXllciIsMjhdXSwwLDAsbnVsbCxudWxsLFtdLGZhbHNlLGZhbHNlLDY2NTE4NDYxNjI4NTgwOCxbXSxudWxsLDU4LG51bGxdXSxbXSxbWyJnYW1lIiwxMjgwLDcyMCx0cnVlLGZhbHNlLDAuNSwwLjUsIkVWRU5UIGdhbWUiLDk4OTUwNjIyMTIyNzkxMSxbWyJiYWNrZ3JvdW5kIiwwLDg1Mzk4MTYzNDMzNDg5Nyx0cnVlLFs5NCw5NCw5NF0sZmFsc2UsMCwwLDEsZmFsc2UsZmFsc2UsMCwwLHRydWUsW1tbLTksLTExLDAsMTMwMiw3NDQsMCwwLFsxLDEsMSwxXSwwLDAsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDExLDg3LFtdLFtbMCwwLDEsMSx0cnVlXV0sW3RydWUsMCwxLDEsMCwwLDEsMSwwLGZhbHNlLDEsMSwxLDAuMSwwLjFdXSxbWy0yLC0zLDAsMTI4OSw3MTcsMCwwLFsxLDEsMSwxXSwwLDAsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDEwLDY5LFtdLFtbMCwwLDEsMSx0cnVlXV0sW3RydWUsMCwxLDEsMCwwLDEsMSwwLGZhbHNlLDEsMSwxLDAuMSwwLjFdXSxbWy00LC00LDAsMTI5MS45ODQ4NjA0MDAzNzEyLDcyMCwwLDAsWzEsMSwxLDFdLDAsMCwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sOSw1MyxbXSxbWzAsMCwxLDEsdHJ1ZV1dLFtmYWxzZSwwLDEsMSwwLDAsMSwxLDAsZmFsc2UsMSwxLDEsMC4xLDAuMV1dLFtbLTIsLTMsMCwxMjg5LDcxNywwLDAsWzEsMSwxLDFdLDAsMCwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sOCwyLFtdLFtbMCwwLDEsMSx0cnVlXV0sW3RydWUsMCwxLDEsMCwwLDEsMSwwLGZhbHNlLDEsMSwxLDAuMSwwLjFdXSxbWzg5NywxNTAsMCwxMDAsMTAwLDAsMCxbMSwxLDEsMV0sMC41LDAuNSwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMjksNTIsW10sW10sW3RydWUsIkFuaW1hdGlvbiAxIiwwLHRydWVdXSxbWzQ3MCwxNDQsMCwyMTEsMTEzLDAsMCxbMSwxLDEsMV0sMS4wMDQ3MzkzMzY0OTI4OTEsMC41MDQ0MjQ3Nzg3NjEwNjIsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDE2LDQ1LFswXSxbWzEwLDAsMCxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiw0LHRydWVdXSxbWzkwNyw2NiwwLDE3MywxMDAsMCwwLFsxLDEsMSwxXSwxLDAuNSwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMTYsNDYsWzBdLFtbMTAsMCwwLGZhbHNlLGZhbHNlLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDIsdHJ1ZV1dLFtbNjQ1LDE5NywwLDUwLDQyLDAsMCxbMSwxLDEsMV0sMSwwLjUyMzgwOTUyMzgwOTUyMzgsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDE2LDQ3LFswXSxbWzEwLDAsMCxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwxLHRydWVdXSxbWzExMzgsMTU3LDAsMTczLDEwMCwwLDAsWzEsMSwxLDFdLDEuMDA1NzgwMzQ2ODIwODA5MywwLjQ3LDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwxNiw1NSxbMF0sW1sxMCwwLDAsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZV1dLFt0cnVlLCJBbmltYXRpb24gMSIsMyx0cnVlXV0sW1stNDUsODIsMCwxNzMsMTAwLDAsMCxbMSwxLDEsMV0sMS4wMDU3ODAzNDY4MjA4MDkzLDAuNDcsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDE2LDQwLFswXSxbWzEwLDAsMCxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwzLHRydWVdXSxbWzE2MTcsOTQsMCwyMTEsMTEzLDAsMCxbMSwxLDEsMV0sMS4wMDQ3MzkzMzY0OTI4OTEsMC41MDQ0MjQ3Nzg3NjEwNjIsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDE2LDQ0LFswXSxbWzEwLDAsMCxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiw0LHRydWVdXSxbWzEzNzksMjExLDAsNTAsNDIsMCwwLFsxLDEsMSwxXSwxLDAuNTIzODA5NTIzODA5NTIzOCwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMTYsNjAsWzBdLFtbMTAsMCwwLGZhbHNlLGZhbHNlLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDEsdHJ1ZV1dLFtbMTY5OCwxNjUsMCw1MCw0MiwwLDAsWzEsMSwxLDFdLDEsMC41MjM4MDk1MjM4MDk1MjM4LDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwxNiw2MSxbMF0sW1sxMCwwLDAsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZV1dLFt0cnVlLCJBbmltYXRpb24gMSIsMSx0cnVlXV0sW1stMTE4LDIwNywwLDUwLDQyLDAsMCxbMSwxLDEsMV0sMSwwLjUyMzgwOTUyMzgwOTUyMzgsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDE2LDYyLFswXSxbWzEwLDAsMCxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwxLHRydWVdXSxbWy00MDMsMTA5LDAsNTAsNDIsMCwwLFsxLDEsMSwxXSwxLDAuNTIzODA5NTIzODA5NTIzOCwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMTYsNjMsWzBdLFtbMTAsMCwwLGZhbHNlLGZhbHNlLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDEsdHJ1ZV1dLFtbLTEyMzMsNDEsMCwyMTEsMTEzLDAsMCxbMSwxLDEsMV0sMS4wMDQ3MzkzMzY0OTI4OTEsMC41MDQ0MjQ3Nzg3NjEwNjIsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDE2LDc1LFswXSxbWzEwLDAsMCxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiw0LHRydWVdXSxbWy0xNTQ0LDE2MywwLDUwLDQyLDAsMCxbMSwxLDEsMV0sMSwwLjUyMzgwOTUyMzgwOTUyMzgsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDE2LDc2LFswXSxbWzEwLDAsMCxmYWxzZSxmYWxzZSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwxLHRydWVdXSxbWy0xNzI0LDM4LDAsMTczLDEwMCwwLDAsWzEsMSwxLDFdLDEuMDA1NzgwMzQ2ODIwODA5MywwLjQ3LDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwxNiw3NyxbMF0sW1sxMCwwLDAsZmFsc2UsZmFsc2UsZmFsc2UsdHJ1ZV1dLFt0cnVlLCJBbmltYXRpb24gMSIsMyx0cnVlXV0sW1s2NDAuMDA0MzU1MjM2NzgxLC0yOSwwLDEwMCwxMjc0LDAsMS41NzA3OTYzMjY3OTQ4OTY2LFsxLDEsMSwxXSwwLDAuNSwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMjcsODAsW10sW10sWzMwLDEwLDAsLTEsdHJ1ZSwyMDAsMTAsMTAwLDAsMTI4MCwwLDAsNSwwLDAsMCwwLDYwMCwwLDAsNV1dLFtbMTMzNiwtNzMsMCwxMDAsMTUwNywwLDIuMzU2MTk0NDkwMTkyMzQ1LFsxLDEsMSwxXSwwLDAuNSwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMjgsODEsWzEsMCwwXSxbXSxbMTUsMTAsMCwtMSx0cnVlLDMwMCwxNSwxMDAsMCwzMDAwLDAsMCw1LDAsMCwwLDAsNjAwLDAsMCw1XV0sW1stMTAsLTU1LDAsMTAwLDEyNDIsMCwwLjc4NTM5ODE2MzM5NzQ0ODMsWzEsMSwxLDFdLDAsMC41LDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwyOCw4MixbMCwwLDBdLFtdLFsxNSwxMCwwLC0xLHRydWUsMzAwLDE1LDEwMCwwLDMwMDAsMCwwLDUsMCwwLDAsMCw2MDAsMCwwLDVdXV0sW10sMCx0cnVlLGZhbHNlLFtdXSxbImdhbWUiLDEsMTM4NzYyODQyNjQzNTE2LHRydWUsWzk0LDk0LDk0XSx0cnVlLDEsMSwxLGZhbHNlLGZhbHNlLDEsMCx0cnVlLFtbWy04MzEsNTI4LDAsMzAwNCw0OTksMCwwLFsxLDEsMSwxXSwwLDAsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDIxLDg1LFtdLFtdLFt0cnVlLDAsMSwxLDAsMCwxLDEsMCxmYWxzZSwxLDEsMSwwLjEsMC4xXV0sW1stODMxLDU1MywwLDMwMDQsMTUyLDAsMCxbMSwxLDEsMV0sMCwwLDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwyMSw4NixbXSxbXSxbdHJ1ZSwwLDEsMSwwLDAsMSwxLDAsZmFsc2UsMSwxLDEsMC4xLDAuMV1dLFtbLTEwNDgsNTI4LDAsMzIxNSwxNTIsMCwwLFsxLDEsMSwxXSwwLDAsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDIwLDczLFtdLFtdLFtmYWxzZSwwLDEsMiwwLDAsMSwxLDAsZmFsc2UsMSwxLDEsMC4xLDAuMV1dLFtbLTEwMzQsNTUzLDAsMzIxNSwxMjYsMCwwLFsxLDEsMSwxXSwwLDAsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDIwLDcyLFtdLFtdLFtmYWxzZSwwLDEsMiwwLDAsMSwxLDAsZmFsc2UsMSwxLDEsMC4xLDAuMV1dLFtbLTk2MSw2ODAsMCwzMjE1LDE1MiwwLDAsWzEsMSwxLDFdLDAsMCwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMjAsNzQsW10sW10sW2ZhbHNlLDAsMSwyLDAsMCwxLDEsMCxmYWxzZSwxLDEsMSwwLjEsMC4xXV0sW1stODc0LDgzMSwwLDMyMTUsMTUyLDAsMCxbMSwxLDEsMV0sMCwwLDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwyMCw3OCxbXSxbXSxbZmFsc2UsMCwxLDIsMCwwLDEsMSwwLGZhbHNlLDEsMSwxLDAuMSwwLjFdXSxbWy03ODgsOTgzLDAsMzIxNSwxNTIsMCwwLFsxLDEsMSwxXSwwLDAsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDIwLDc5LFtdLFtdLFtmYWxzZSwwLDEsMiwwLDAsMSwxLDAsZmFsc2UsMSwxLDEsMC4xLDAuMV1dLFtbLTgzMSw1MjgsMCwzMDA0LDQ5OSwwLDAsWzEsMSwxLDFdLDAsMCwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMTksNzEsW10sW10sW2ZhbHNlLDAsMSwxLDAsMCwxLDEsMCxmYWxzZSwxLDEsMSwwLjEsMC4xXV0sW1stODMxLDU1MywwLDMwMDQsMTUyLDAsMCxbMSwxLDEsMV0sMCwwLDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwxOSw3MCxbXSxbXSxbZmFsc2UsMCwxLDEsMCwwLDEsMSwwLGZhbHNlLDEsMSwxLDAuMSwwLjFdXSxbWy04MzEsNTI4LDAsMzAwNCw0OTksMCwwLFsxLDEsMSwxXSwwLDAsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDE4LDE0LFtdLFtbdHJ1ZSwwLGZhbHNlLDEsMC41LDAuMiwwLDAuMDEsZmFsc2UsZmFsc2VdXSxbdHJ1ZSwwLDEsMSwwLDAsMSwxLDAsZmFsc2UsMSwxLDEsMC4xLDAuMV1dLFtbLTgzMSw1NTMsMCwzMDA0LDE1MiwwLDAsWzEsMSwxLDFdLDAsMCwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMTgsMjEsW10sW1t0cnVlLDEsZmFsc2UsMSwwLjUsMC4yLDAsMC4wMSxmYWxzZSx0cnVlXV0sW3RydWUsMCwxLDEsMCwwLDEsMSwwLGZhbHNlLDEsMSwxLDAuMSwwLjFdXSxbWzk3NSwyNzcsMCwzOCw0NywwLDAsWzEsMSwxLDFdLDAuNjU3ODk0NzM2ODQyMTA1MywwLjk3ODcyMzQwNDI1NTMxOTEsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDIyLDMxLFs0XSxbW2ZhbHNlLDAsZmFsc2UsMSwwLjUsMC41LDAsMC4wMSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwwLHRydWVdXSxbWzk5NywyODgsMCwzMyw4MiwwLDAsWzEsMSwxLDFdLDAuNDU0NTQ1NDU0NTQ1NDU0NTMsMC44MDQ4NzgwNDg3ODA0ODc5LDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwzNCwxOCxbXSxbW2ZhbHNlLDAsZmFsc2UsMC4yLDAuNSwwLjIsMCwwLjEsZmFsc2UsdHJ1ZV1dLFt0cnVlLCJBbmltYXRpb24gMSIsNSx0cnVlXV0sW1s4MzUsMjc3LDAsMzMsODIsMCwwLFsxLDEsMSwxXSwwLjQ4NDg0ODQ4NDg0ODQ4NDg2LDAuMTgyOTI2ODI5MjY4MjkyNjgsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDM0LDgsW10sW1tmYWxzZSwwLGZhbHNlLDAuMiwwLjUsMC4yLDAsMC4xLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDIsdHJ1ZV1dLFtbOTU0LDI4OCwwLDMzLDgyLDAsMCxbMSwxLDEsMV0sMC42MDYwNjA2MDYwNjA2MDYxLDAuODA0ODc4MDQ4NzgwNDg3OSwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMzQsMjksW10sW1tmYWxzZSwwLGZhbHNlLDAuMiwwLjUsMC4yLDAsMC4xLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDQsdHJ1ZV1dLFtbODg0LDI3OCwwLDMzLDgyLDAsMCxbMSwxLDEsMV0sMC40ODQ4NDg0ODQ4NDg0ODQ4NiwwLjE5NTEyMTk1MTIxOTUxMjIsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDM0LDksW10sW1tmYWxzZSwwLGZhbHNlLDAuMiwwLjUsMC4yLDAsMC4xLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDAsdHJ1ZV1dLFtbODUxLDMyNywwLDI5LDgzLDAsMCxbMSwxLDEsMV0sMC42NjY2NjY2NjY2NjY2NjY2LDAuMDE4MzQ4NjIzODUzMjExMDEsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDM1LDEwLFtdLFtbZmFsc2UsMCxmYWxzZSwxLDAuNSwwLjIsMCwwLjAxLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDAsdHJ1ZV1dLFtbODU5LDMzOSwwLDM3LDE1NCwwLDAsWzEsMSwxLDFdLDAuNSwwLjUsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDEzLDYsW10sW1tmYWxzZSwwLGZhbHNlLDQsMC44LDAuMiwwLDAuNSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwwLHRydWVdXSxbWzg1NywyNjYsMCwzOCw0NywwLDAsWzEsMSwxLDFdLDAuNjU3ODk0NzM2ODQyMTA1MywwLjk3ODcyMzQwNDI1NTMxOTEsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDIyLDcsWzNdLFtbZmFsc2UsMCxmYWxzZSwxLDAuNSwwLjUsMCwwLjAxLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDAsdHJ1ZV1dLFtbOTY3LDMzOCwwLDI5LDgzLDAsMCxbMSwxLDEsMV0sMC42NjY2NjY2NjY2NjY2NjY2LDAuMDE4MzQ4NjIzODUzMjExMDEsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDM1LDI4LFtdLFtbZmFsc2UsMCxmYWxzZSwxLDAuNSwwLjIsMCwwLjAxLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDAsdHJ1ZV1dLFtbOTc1LDM0OSwwLDM3LDE1NCwwLDAsWzEsMSwxLDFdLDAuNSwwLjUsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDEzLDMwLFtdLFtbZmFsc2UsMCxmYWxzZSw0LDAuOCwwLjIsMCwwLjUsZmFsc2UsdHJ1ZV1dLFt0cnVlLCJBbmltYXRpb24gMSIsMCx0cnVlXV0sW1s0NjcsMjg4LDAsMzIsODAsMCwwLFsxLDEsMSwxXSwwLjQzNzUsMC4yLDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwzNCwyNyxbXSxbW2ZhbHNlLDAsZmFsc2UsMC4yLDAuNSwwLjIsMCwwLjEsZmFsc2UsdHJ1ZV1dLFt0cnVlLCJBbmltYXRpb24gMSIsMyx0cnVlXV0sW1s1MTgsMjg3LDAsMzMsODAsMCwwLFsxLDEsMSwxXSwwLjQ4NDg0ODQ4NDg0ODQ4NDg2LDAuMTg3NSwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMzQsMTYsW10sW1tmYWxzZSwwLGZhbHNlLDAuMiwwLjUsMC4yLDAsMC4xLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDEsdHJ1ZV1dLFtbNTAwLDMzNiwwLDI5LDgyLDAsNi4yNzQ2NjY1MzMwMTAzNzcsWzEsMSwxLDFdLDAuMzEwMzQ0ODI3NTg2MjA2OSwwLjAxMjE5NTEyMTk1MTIxOTUxMywwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMzUsMTcsW10sW1tmYWxzZSwwLGZhbHNlLDEsMC41LDAuMiwwLDAuMDEsdHJ1ZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwxLHRydWVdXSxbWzQ5MywzNDgsMCwzNiwxNTIsMCwwLFsxLDEsMSwxXSwwLjUsMC41LDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwxMywxOSxbXSxbW2ZhbHNlLDAsZmFsc2UsNCwwLjgsMC4yLDAsMC41LGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDEsdHJ1ZV1dLFtbNDk3LDI3NSwwLDM4LDQ3LDAsMCxbMSwxLDEsMV0sMC4zNDIxMDUyNjMxNTc4OTQ3NSwwLjk3ODcyMzQwNDI1NTMxOTEsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDIyLDIwLFsyXSxbW2ZhbHNlLDAsZmFsc2UsMSwwLjUsMC41LDAsMC4wMSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiw3LHRydWVdXSxbWzMwNiwyNzEsMCwzOCw0NywwLDAsWzEsMSwxLDFdLDAuMzQyMTA1MjYzMTU3ODk0NzUsMC45Nzg3MjM0MDQyNTUzMTkxLDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwyMiwyNixbMV0sW1tmYWxzZSwwLGZhbHNlLDEsMC41LDAuNSwwLDAuMDEsZmFsc2UsdHJ1ZV1dLFt0cnVlLCJBbmltYXRpb24gMSIsNyx0cnVlXV0sW1szMTMsMzMzLDAsMjksODIsMCw2LjI3NDY2NjUzMzAxMDM3NyxbMSwxLDEsMV0sMC4zMTAzNDQ4Mjc1ODYyMDY5LDAuMDEyMTk1MTIxOTUxMjE5NTEzLDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwzNSwyMyxbXSxbW2ZhbHNlLDAsZmFsc2UsMSwwLjUsMC4yLDAsMC4wMSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwxLHRydWVdXSxbWzMzMCwyODUsMCwzMiw4MCwwLDAsWzEsMSwxLDFdLDAuNDM3NSwwLjgyNSwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMzQsMzIsW10sW1tmYWxzZSwwLGZhbHNlLDAuMiwwLjUsMC4yLDAsMC4xLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDcsdHJ1ZV1dLFtbMjg2LDI4NCwwLDMzLDgwLDAsMCxbMSwxLDEsMV0sMC42MDYwNjA2MDYwNjA2MDYxLDAuODEyNSwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMzQsMjIsW10sW1tmYWxzZSwwLGZhbHNlLDAuMiwwLjUsMC4yLDAsMC4xLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDYsdHJ1ZV1dLFtbMzA2LDM0NCwwLDM2LDE1MiwwLDAuMDAyOTEwODU2Mzg0MTIwOTE5LFsxLDEsMSwxXSwwLjUsMC41LDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwxMywyNSxbXSxbW2ZhbHNlLDAsZmFsc2UsNCwwLjgsMC4yLDAsMC41LGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDEsdHJ1ZV1dLFtbNjQwLDM2MCwwLDY1LjA3Njg3NzYxNDA5NTc5LDY1LjA3Njg3NzYxNDA5NTc5LDAsMCxbMSwxLDEsMV0sMC41LDAuNSwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMTUsMzksW10sW1t0cnVlXSxbXV0sW2ZhbHNlLCJBbmltYXRpb24gMSIsMCx0cnVlXV0sW1s0ODcsLTExMiwwLDYzLjIzNzY0NzAxNTA0OTUsNjMuMjM3NjQ3MDE1MDQ5NSwwLDAsWzEsMSwxLDFdLDAuNSwwLjUsMCwwLFtdLG51bGwsWzEyNyxudWxsLDUzXSxudWxsLFsiIiwiIl1dLDMxLDQxLFtdLFtdLFtmYWxzZSwiQW5pbWF0aW9uIDEiLDAsdHJ1ZV1dLFtbNzcyLC0xMDksMCw2My4yMzc2NDcwMTUwNDk1LDYzLjIzNzY0NzAxNTA0OTUsMCwwLFsxLDEsMSwxXSwwLjUsMC41LDAsMCxbXSxudWxsLFsxMjcsbnVsbCw1NF0sbnVsbCxbIiIsIiJdXSwzMSw0MixbXSxbXSxbZmFsc2UsIkFuaW1hdGlvbiAxIiwwLHRydWVdXSxbWzYzNSwtNzMsMCw4MS42NTExODEzOTAzNDU0OSw4MS42NTExODEzOTAzNDU0OSwwLDAsWzEsMSwxLDFdLDAuNSwwLjUsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDEyLDEyLFtdLFtbZmFsc2UsMixmYWxzZSwwLjUsMC41LDAuMiwwLjMsMC4wMSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwwLHRydWVdXSxbWzExNjQsNTg0LDAsMTgwLDMxOSwwLDAsWzEsMSwxLDFdLDAuNDkzNTA2NDkzNTA2NDkzNSwxLDAsMCxbXSxudWxsLFsxMjcsW1s5ODk1MDYyMjEyMjc5MTEsMSwzLDEyNywwLDU3XV0sNTZdLG51bGwsWyIiLCIiXV0sMzYsMTMsW10sW1t0cnVlLDAsZmFsc2UsMSwwLjUsMC4yLDAsMC4wMSxmYWxzZSx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiw0LHRydWVdXSxbWzExMTYuNTc0NTIxMjg4MTg5NSwyNzYuOTU2LDAsNDgsMjU0LDAsMCxbMSwxLDEsMC41XSwwLjUsMCwwLDAsW10sbnVsbCxbMTI3LG51bGwsNTddLG51bGwsWyIiLCIiXV0sMTcsMyxbXSxbXSxbZmFsc2UsIkFuaW1hdGlvbiAxIiwwLHRydWVdXSxbWzEyMCw1OTYsMCwxODAsMzE5LDAsMCxbMSwxLDEsMV0sMC40OTM1MDY0OTM1MDY0OTM1LDEsMCwwLFtdLG51bGwsWzEyNyxbWzk4OTUwNjIyMTIyNzkxMSwxLDE1LDEyNywwLDU5XV0sNThdLG51bGwsWyIiLCIiXV0sMzYsNCxbXSxbW3RydWUsMCxmYWxzZSwxLDAuNSwwLjIsMCwwLjAxLGZhbHNlLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDEsdHJ1ZV1dLFtbMTY1LjgwODYxNDU0MTc1NjczLDI4OCwwLDU0LDI1NCwwLDAsWzEsMSwxLDAuNV0sMC41LDAsMCwwLFtdLG51bGwsWzEyNyxudWxsLDU5XSxudWxsLFsiIiwiIl1dLDE3LDE1LFtdLFtdLFtmYWxzZSwiQW5pbWF0aW9uIDEiLDAsdHJ1ZV1dLFtbLTE5Mi4zNDU0NzQ4NzkwNjUwOCwtMzY3LjI3Mzc5Mzg3Mzk0NjAzLDAsNzYxLDE1MiwwLDEuMDE0OTM4ODMzOTI5MjIyLFsxLDEsMSwxXSwwLDAsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDQzLDk0LFsiIl0sW1t0cnVlLDEsZmFsc2UsMSwwLjUsMC4yLDAsMC4wMSxmYWxzZSx0cnVlXV0sW2ZhbHNlLDAsMSwxLDAsMCwxLDEsMCxmYWxzZSwxLDEsMSwwLjEsMC4xXV0sW1sxNTgxLjAwNzQ2NDI2NTUwNjgsLTI2MS43MjU5OTUyMjUyMzY1LDAsNzE0LDE1MiwwLDIuMTIzMDY1OTA4NTQ2MDMwNCxbMSwxLDEsMV0sMCwwLDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSw0Myw5NSxbIiJdLFtbdHJ1ZSwxLGZhbHNlLDEsMC41LDAuMiwwLDAuMDEsZmFsc2UsdHJ1ZV1dLFtmYWxzZSwwLDEsMSwwLDAsMSwxLDAsZmFsc2UsMSwxLDEsMC4xLDAuMV1dLFtbNjMxLC0yNDksMCwxNzk5LDE1MiwwLDAsWzEsMSwxLDFdLDAuNSwxLDAsMCxbXSxudWxsLFsxMjcsW1s5ODk1MDYyMjEyMjc5MTEsMSw0MSwxMjcsMCw1M10sWzk4OTUwNjIyMTIyNzkxMSwxLDQyLDEyNywwLDU0XV0sNjJdLG51bGwsWyIiLCIiXV0sNDMsOTYsWyJVUCJdLFtbdHJ1ZSwxLGZhbHNlLDEsMC41LDAuMiwwLDAuMDEsZmFsc2UsdHJ1ZV1dLFtmYWxzZSw3LDEsMSwwLDAsMSwxLDAsZmFsc2UsMSwxLDEsMC4xLDAuMV1dLFtbMTE3LC04NCwwLDExMSw5NiwwLDAsWzEsMSwxLDFdLDAuNSwwLjUsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDQ0LDk3LFsiIiwwXSxbXSxbMCx0cnVlLDQsMF1dXSxbXSwwLHRydWUsZmFsc2UsW11dLFsiR1VJIiwyLDYxNDgxMzIwNjMwNjg3MSx0cnVlLFs5NCw5NCw5NF0sdHJ1ZSwwLDAsMSxmYWxzZSxmYWxzZSwwLDAsdHJ1ZSxbW1sxMjMyLDUwLDAsODUuODA0MzIzMDM5MzI3NDEsODUuODA0MzIzMDM5MzI3NDEsMCwwLFsxLDEsMSwxXSwwLjUsMC41LDAsMCxbW3RydWVdXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwxNCw2NixbXSxbWzEsMCwwLDAsdHJ1ZV1dLFt0cnVlLCJBbmltYXRpb24gMSIsMCx0cnVlXV0sW1s1NDIuNDA5MDg1MzYwNDQwNiwxMiwwLDEwNy41NDU0NTQ1NDU0NTM4MiwxMjAuNjM2MzU4MDg3NzEyODQsMCwwLFswLDAsMSwxXSwwLDAsMCwwLFtbdHJ1ZSwxXSxbdHJ1ZSxbMCwwLDFdXV0sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sNiw1LFtdLFtbMiwwLDAsMCx0cnVlXV0sWyIwIix0cnVlLDYzLDc0LCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OS4sOzo/IS1ffiNcIicmKClbXXxgXFwvQMKwKz0qJMKj4oKsPD7QkNCR0JLQk9CU0JXQgdCW0JfQmNCZ0JrQm9Cc0J3QntCf0KDQodCi0KPQpNCl0KbQp9Co0KnQqtCr0KzQrdCu0K/QsNCx0LLQs9C00LXRkdC20LfQuNC50LrQu9C80L3QvtC/0YDRgdGC0YPRhNGF0YbRh9GI0YnRitGL0YzRjdGO0Y8iLCIiLDEsMCwwLDAsMCwwLHRydWUsMCxmYWxzZV1dLFtbNjQzLDExLDAsOTUsOTAsMCwwLFswLDAsMSwxXSwwLDAsMCwwLFtbdHJ1ZSwxXSxbdHJ1ZSxbMSwwLDBdXV0sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sNiwzNyxbXSxbWzIsMCwwLDAsdHJ1ZV1dLFsiMCIsdHJ1ZSw2Myw3NCwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkuLDs6PyEtX34jXCInJigpW118YFxcL0DCsCs9KiTCo+KCrDw+0JDQkdCS0JPQlNCV0IHQltCX0JjQmdCa0JvQnNCd0J7Qn9Cg0KHQotCj0KTQpdCm0KfQqNCp0KrQq9Cs0K3QrtCv0LDQsdCy0LPQtNC10ZHQttC30LjQudC60LvQvNC90L7Qv9GA0YHRgtGD0YTRhdGG0YfRiNGJ0YrRi9GM0Y3RjtGPIiwiIiwxLDAsMCwwLDAsMCx0cnVlLDAsZmFsc2VdXSxbWzYwNS45NTQ1Mzk5MDU4OTUyLDEwLDAsNjQuNjM2Mzc0NzMzNjY0MTgsODEuMDkwOTAzNTQyMjU4MjcsMCwwLFswLDAsMSwxXSwwLDAsMCwwLFtbdHJ1ZSwxXSxbdHJ1ZSxbMSwxLDFdXV0sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sNiwzOCxbXSxbWzIsMCwwLDAsdHJ1ZV1dLFsiOiIsdHJ1ZSw2Myw3NCwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkuLDs6PyEtX34jXCInJigpW118YFxcL0DCsCs9KiTCo+KCrDw+0JDQkdCS0JPQlNCV0IHQltCX0JjQmdCa0JvQnNCd0J7Qn9Cg0KHQotCj0KTQpdCm0KfQqNCp0KrQq9Cs0K3QrtCv0LDQsdCy0LPQtNC10ZHQttC30LjQudC60LvQvNC90L7Qv9GA0YHRgtGD0YTRhdGG0YfRiNGJ0YrRi9GM0Y3RjtGPIiwiIiwxLDAsMCwwLDAsMCx0cnVlLDAsZmFsc2VdXSxbWzk1NCw2NDAsMCwxMzUsMTIwLDAsMCxbMSwxLDEsMV0sMC41MTg1MTg1MTg1MTg1MTg1LDAuNTI1LDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwzMiwyNCxbM10sW10sW3RydWUsImEiLDQsdHJ1ZV1dLFtbMTE0MSw2NDAsMCwxMzUsMTIwLDAsMCxbMSwxLDEsMV0sMC41MjU5MjU5MjU5MjU5MjU5LDAuNTE2NjY2NjY2NjY2NjY2NywwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMzIsMzMsWzRdLFtdLFt0cnVlLCJhIiw2LHRydWVdXSxbWzMzNSw2NDIsMCwxMzUsMTIwLDAsMCxbMSwxLDEsMV0sMC41MjU5MjU5MjU5MjU5MjU5LDAuNTQxNjY2NjY2NjY2NjY2NiwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMzIsMzQsWzJdLFtdLFt0cnVlLCJhIiwyLHRydWVdXSxbWzE0OSw2MzgsMCwxMzUsMTIwLDAsMCxbMSwxLDEsMV0sMC41MTg1MTg1MTg1MTg1MTg1LDAuNTUsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDMyLDM1LFsxXSxbXSxbdHJ1ZSwiYSIsMCx0cnVlXV0sW1s0OSw1MCwwLDg1LjI1Nzc5ODY4ODc1ODQ2LDg1LjI1Nzc5ODY4ODc1ODQ2LDAsMCxbMSwxLDEsMV0sMC41LDAuNSwwLDAsW1t0cnVlXV0sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMTQsNjgsW10sW1swLDAsMCwwLHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDIsdHJ1ZV1dXSxbXSwwLHRydWUsZmFsc2UsW11dLFsid2luIiwzLDMyMjcwNTQzMjQ0MTc3OSx0cnVlLFs5NCw5NCw5NF0sdHJ1ZSwwLDAsMSxmYWxzZSxmYWxzZSwwLDAsdHJ1ZSxbW1stOCwtMTAsMCwxMzExLDc0OSwwLDAsWzEsMSwxLDAuN10sMCwwLDAsMCxbXSxudWxsLG51bGwsbnVsbCxbIiIsIiJdXSwzMCw0OSxbXSxbWzAsMCwxLDEsdHJ1ZV1dLFt0cnVlLDAsMSwxLDAsMCwxLDEsMCxmYWxzZSwxLDEsMSwwLjEsMC4xXV0sW1s2MzkuNSwyOTUsMCw1NDUsMjIyLDAsMCxbMSwxLDEsMV0sMC40OTcyNDc3MDY0MjIwMTg0LDAuMjk3Mjk3Mjk3Mjk3Mjk3MywwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMzcsNDgsW10sW10sW3RydWUsIkFuaW1hdGlvbiAxIiw1LHRydWVdXSxbWzU0OSw1NzIsMCwxNTcsMTU3LDAsMCxbMSwxLDEsMV0sMC41LDAuNSwwLDAsW1t0cnVlXV0sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMTQsNTAsW10sW1syLDIsMCwwLGZhbHNlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwxLHRydWVdXSxbWzczMSw1NzIsMCwxNTcsMTU3LDAsMCxbMSwxLDEsMV0sMC41LDAuNSwwLDAsW1t0cnVlXV0sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMTQsNTEsW10sW1syLDIsMCwwLGZhbHNlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwwLHRydWVdXV0sW10sMCx0cnVlLGZhbHNlLFtdXV0sW1tudWxsLDAsNDMsW10sW10sWzEwLDEsMV1dXSxbXV0sWyJtYWlubWVudSIsMTI4MCw3MjAsZmFsc2UsZmFsc2UsMC41LDAuNSwiRVZFTlQgbWVudSIsMzIwNjQ3MzQ3ODU1MjY4LFtbImJhY2tncm91bmQiLDAsMzEwMzUxOTUwOTk3NjI0LHRydWUsWzk0LDk0LDk0XSxmYWxzZSwwLDAsMSxmYWxzZSxmYWxzZSwwLDAsdHJ1ZSxbW1swLDAsMCwxMjgwLDcyMCwwLDAsWzEsMSwxLDFdLDAsMCwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMjQsNTQsW10sW1swLDAsMSwxLHRydWVdXSxbdHJ1ZSwwLDEsMSwwLDAsMSwxLDAsZmFsc2UsMSwxLDEsMC4xLDAuMV1dLFtbLTQsNjI5LDAsMTI5MSwxMDAsMCwwLFsxLDEsMSwxXSwwLDAsMCwwLFtdLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDI2LDg4LFtdLFtbMCwxLDEsMCx0cnVlXV0sW3RydWUsMCwxLDEsMCwwLDEsMSwwLGZhbHNlLDEsMSwxLDAuMSwwLjFdXV0sW10sMCx0cnVlLGZhbHNlLFtdXSxbIm1lbnUiLDEsNzA1MDcyNTQxMDI3NzA5LHRydWUsWzk0LDk0LDk0XSx0cnVlLDAsMCwxLGZhbHNlLGZhbHNlLDAsMCx0cnVlLFtbWzYzNSwyMTYsMCw0OTEsMjg2LDAsMCxbMSwxLDEsMV0sMC40NzQ1NDE3NTE1Mjc0OTQ5LDAuNjI5MzcwNjI5MzcwNjI5NCwwLDAsW10sbnVsbCxudWxsLG51bGwsWyIiLCIiXV0sMjMsNTYsW10sW1s2LDAsNSwwLDAsMCw1LDAsdHJ1ZV0sWzUsMCw0LDAsMCwwLDIwLDAsdHJ1ZV1dLFt0cnVlLCJBbmltYXRpb24gMSIsMCx0cnVlXV0sW1s1MjUsNDcyLDAsMTcyLDE3MiwwLDAsWzEsMSwxLDFdLDAuNSwwLjUsMCwwLFtbdHJ1ZV1dLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDI1LDU4LFtdLFtdLFt0cnVlLCJBbmltYXRpb24gMSIsMCx0cnVlXV0sW1s3NTUsNDcyLDAsMTcyLDE3MiwwLDAsWzEsMSwxLDFdLDAuNSwwLjUsMCwwLFtbdHJ1ZV1dLG51bGwsbnVsbCxudWxsLFsiIiwiIl1dLDI1LDU5LFtdLFtdLFt0cnVlLCJBbmltYXRpb24gMSIsMSx0cnVlXV0sW1sxMjMzLDU3LDAsODUuODA0MzIzMDM5MzI3NDEsODUuODA0MzIzMDM5MzI3NDEsMCwwLFsxLDEsMSwxXSwwLjUsMC41LDAsMCxbW3RydWVdXSxudWxsLFsxMjcsW1szMjA2NDczNDc4NTUyNjgsMSw5MywzLDAsMTBdXSw1XSxudWxsLFsiIiwiIl1dLDE0LDY3LFtdLFtbMSwwLDAsMCx0cnVlXV0sW3RydWUsIkFuaW1hdGlvbiAxIiwzLHRydWVdXSxbWzUwLDU0LDAsODUuMjU3Nzk4Njg4NzU4NDYsODUuMjU3Nzk4Njg4NzU4NDYsMCwwLFsxLDEsMSwxXSwwLjUsMC41LDAsMCxbW3RydWVdXSxudWxsLFsxMjcsW1szMjA2NDczNDc4NTUyNjgsMSw5MSwxMjcsMCw5XV0sNl0sbnVsbCxbIiIsIiJdXSwxNCw4NCxbXSxbWzAsMCwwLDAsdHJ1ZV1dLFt0cnVlLCJBbmltYXRpb24gMSIsNix0cnVlXV0sW1sxNDIuNDA0MzMwNTgxNTU2MSwxNTEuNDc0NzcxMzI3NjM0NiwwLDE3Niw4NSwwLDAsWzEsMSwxLDFdLDAuNSwwLjUsMCwwLFtdLG51bGwsWzEyNyxudWxsLDddLG51bGwsWyIiLCIiXV0sNDEsOTIsW10sW10sW3RydWUsIkFuaW1hdGlvbiAxIiwwLGZhbHNlXV0sW1sxMjAuNDI2MDMzMzk0MDA3NDUsMTE3LjE4NDE5NDYyOTE3MjgsMCwxMDcuNTQ1NDU0NTQ1NDUzODIsMTIwLjYzNjM1ODA4NzcxMjg0LDAsMCxbMCwwLDEsMV0sMCwwLDAsMCxbW3RydWUsMV0sW3RydWUsWzAsMCwxXV1dLG51bGwsWzEyNyxudWxsLDhdLG51bGwsWyIiLCIiXV0sNiw5MCxbXSxbWzIsMCwwLDAsdHJ1ZV1dLFsiMCIsdHJ1ZSw2Myw3NCwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkuLDs6PyEtX34jXCInJigpW118YFxcL0DCsCs9KiTCo+KCrDw+0JDQkdCS0JPQlNCV0IHQltCX0JjQmdCa0JvQnNCd0J7Qn9Cg0KHQotCj0KTQpdCm0KfQqNCp0KrQq9Cs0K3QrtCv0LDQsdCy0LPQtNC10ZHQttC30LjQudC60LvQvNC90L7Qv9GA0YHRgtGD0YTRhdGG0YfRiNGJ0YrRi9GM0Y3RjtGPIiwiIiwxLDAsMCwwLDAsMCx0cnVlLDAsZmFsc2VdXSxbWzU0Ljk1MTMxNzUxMDM3NjQ1NSwxNTAuMDk3MzY0OTc5MjQ3MSwwLDk2LjY5MzUwNTU4ODM1NDEzLDYzLjcyOTgxMDUwMTQxNTIyLDAsMCxbMSwxLDEsMV0sMC41LDAuNSwwLDAsW10sbnVsbCxbMTI3LFtbMzIwNjQ3MzQ3ODU1MjY4LDEsOTAsMTI3LDAsOF0sWzMyMDY0NzM0Nzg1NTI2OCwxLDkyLDEyNywwLDddXSw5XSxudWxsLFsiIiwiIl1dLDQwLDkxLFtdLFtdLFt0cnVlLCJBbmltYXRpb24gMSIsMCxmYWxzZV1dLFtbMTE5Ni4yNzE2NDU1MjUyMDYyLDE4MC4wODQ0OTk1NzI3OTI5LDAsMTMyLDg3LDAsMCxbMSwxLDEsMV0sMC41LDAuNSwwLDAsW10sbnVsbCxbMyxudWxsLDEwXSxudWxsLFsiIiwiIl1dLDQyLDkzLFtdLFtbNiwwLDEsMiw1LDMsNyw3LHRydWVdXSxbdHJ1ZSwiQW5pbWF0aW9uIDEiLDAsdHJ1ZV1dXSxbXSwwLHRydWUsZmFsc2UsW11dXSxbXSxbXV1dLFtbIkVWRU5UIGdhbWUiLFtbMiwiRVZFTlQgd2luZG93MSIsZmFsc2VdLFsxLCJpc3BsYXlpbmciLDAsMCxmYWxzZSxmYWxzZSw2MTUwMjc2NTA4NTkyMjAsZmFsc2UsNTldLFsxLCJ3b3JsZGdyYXZpdHkiLDAsMjAsZmFsc2UsZmFsc2UsMTUyNjM1NTI4MjI2ODIxLGZhbHNlLDYwXSxbMyxbdHJ1ZSwiY3JlYXRlc2NlbmUiXSxmYWxzZSxudWxsLDE3MzAyNDIyMzQzNDA0NSwxLFtbLTEsMjAsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDAsZmFsc2UsW1sxLFswXV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw2MDI1MjQ1NzUzMDQxMjAsMixbWy0xLDIxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw4Mjk2NzQ3MTg0NDA4ODEsbnVsbF1dLFtbLTEsMjIsbnVsbCwzMTE5ODMwMjA5NzI4NjEsMCxudWxsLFtbNSxbMV1dLFswLFsyXV1dXSxbMzIsMjMsbnVsbCw3ODk1Mzc0MjE3NDczNjAsMCxudWxsLFtbMywwXSxbMSxbM11dXV0sWzE0LDIzLG51bGwsMjE4MDg0MzMyMjc4MzEyLDAsbnVsbCxbWzMsMF0sWzEsWzNdXV1dLFsxMiwyNCxudWxsLDMwMTQ4MTI0ODMxNTk4MSwwLG51bGxdLFszNiwyNSxudWxsLDE3NzE1ODI4NzQ4NjA2NSwwLG51bGxdLFsyNywyNixudWxsLDMzOTU3OTgyMDQ0NzA0NSwwLG51bGwsW1szLDBdXV0sWzI4LDI2LG51bGwsNDcwNTE4MjU0Nzg3ODQ5LDAsbnVsbCxbWzMsMF1dXSxbMjcsMjcsbnVsbCw4NjAzMjAyMzg0ODk3NDMsMCxudWxsLFtbMCxbNCxbNCwyOF0sWzQsMjldXV1dXSxbMjcsMzAsbnVsbCw4OTA4MjA3NTU4MzYyMzEsMCxudWxsLFtbMCxbNSxbNCwyOF1dXV1dXSxbWzAsMCxmYWxzZSxudWxsLDU4MzU2ODAxNTU3Mzg2NiwzLFtbMjgsMzEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDk2MDU3NDE5NzMwMjA3NCxudWxsLFtbMTAsMF0sWzgsMF0sWzcsWzJdXV1dXSxbWzI4LDI3LG51bGwsNzgxMTYzODYwNzMzMDgyLDAsbnVsbCxbWzAsWzUsWzQsMjldXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzMzU4MzgzOTM1NTM2NzIsNCxbWzI4LDMxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3NTQ2NzA5NjU0MDYxMDUsbnVsbCxbWzEwLDBdLFs4LDBdLFs3LFs2XV1dXV0sW1syOCwyNyxudWxsLDkyNTkxMTE5MjAwNTI0OCwwLG51bGwsW1swLFs1LFs0LDI4XV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTA2NDIzODU0MTAxMTkwLDUsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMzUxNDAwMDYwMDA4MTM4LG51bGwsW1sxMSwxMjAyNDE1NzczNDk0NjJdLFs4LDBdLFs3LFs2XV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCwyMzk4NjU4NjA1ODUwNTksNixbWzMyLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDQxOTI1OTYxMjgzNTAyOCxudWxsLFtbMCxbN11dXV1dLFtbMzIsMzQsbnVsbCwzNDM2Mzk2NjQyODg0ODIsMCxudWxsLFtbMywwXV1dXV0sWzAsMCxmYWxzZSxudWxsLDY2Njc3OTQ2NTA1NTM5OCw3LFtbMzIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTcxMTM5NDUxODczMTE3LG51bGwsW1swLFs4XV1dXV0sW1szMiwzNCxudWxsLDgyNTUzNjU1MTY1MjcyNSwwLG51bGwsW1szLDBdXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzNTY2MzkzNjg1NjUzMzEsOCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2NzM5NjA3MjE5MTg3NjgsbnVsbCxbWzExLDEyMDI0MTU3NzM0OTQ2Ml0sWzgsMF0sWzcsWzJdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDM1NzE3Nzk5MzA3OTg3Myw5LFtbMzIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsODc5Mzg2MzI5OTcyODQwLG51bGwsW1swLFs3XV1dXV0sW1szMiwzNCxudWxsLDE3Mzg2MzIzMzczMTkxOSwwLG51bGwsW1szLDFdXV1dXSxbMCwwLGZhbHNlLG51bGwsNjYyNjcyOTA5NDMwOTYwLDEwLFtbMzIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMzY4OTIwNzkwNTc3MjE2LG51bGwsW1swLFs4XV1dXV0sW1szMiwzNCxudWxsLDExNTkyMDQyMjUxMjQ5NiwwLG51bGwsW1szLDFdXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4MDU3NjEyNzQ1MjM1MzUsMTEsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjMwMTY2NTg1MDM3OTY0LG51bGwsW1sxMSwzNzU2Mzg1NjcwNzgxMDhdLFs4LDBdLFs3LFsyXV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw0MDUxNTMzNTM2MTM2OTIsMTIsW1szNiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw5OTg1ODc2NTE5MDkwMzQsbnVsbCxbWzAsWzldXV1dXSxbWzM2LDM1LG51bGwsOTk2MDI0NTA4Mjg1Njk5LDAsbnVsbCxbWzAsWzJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDk4Nzk3NzA2NDUxMDE4NCwxMyxbWzM2LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDk1MjE1OTY3ODEzOTEzNCxudWxsLFtbMCxbMTBdXV1dXSxbWzM2LDM1LG51bGwsNDg0MTg3MjM4MTYwMzUyLDAsbnVsbCxbWzAsWzExXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDk2MzEyMjc0Nzk1MjA0NSwxNCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2MDE3MzI1MzczNzk3MTIsbnVsbCxbWzExLDM3NTYzODU2NzA3ODEwOF0sWzgsMF0sWzcsWzZdXV1dXSxbWzE3LDM2LG51bGwsMTIyODg3MTA4MjExNzAzLDAsbnVsbCxbWzAsWzEyXV1dXV0sW1swLDAsZmFsc2UsbnVsbCw4MTgwMjI1NzExOTgwMTcsMTUsW1szNiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw2NzM2MjczNjM4MzY0MTMsbnVsbCxbWzAsWzldXV1dXSxbWzM2LDM1LG51bGwsODc1NDYxODg3NzI1ODg5LDAsbnVsbCxbWzAsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDYxOTM2NzI1MzM0MDczNCwxNixbWzM2LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDk4MjQzOTU3OTA5OTEyMSxudWxsLFtbMCxbMTBdXV1dXSxbWzM2LDM1LG51bGwsNjI3NTExODYwNjY2Mzg1LDAsbnVsbCxbWzAsWzldXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTMxOTExMzExNzA1MDY1LDE3LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDYzMDg1MjI1NTg4NjEyMSxudWxsLFtbMTEsMzc1NjM4NTY3MDc4MTA4XSxbOCwwXSxbNyxbMTNdXV1dXSxbWzE3LDM2LG51bGwsMzUwNjczNDE2Nzg4NjY4LDAsbnVsbCxbWzAsWzE0XV1dXV0sW1swLDAsZmFsc2UsbnVsbCw4MTMwNzQ3NjY0ODg5NTAsMTgsW1szNiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw5MDAzMDQzMDk2OTMzNzQsbnVsbCxbWzAsWzldXV1dXSxbWzM2LDM1LG51bGwsMjI2NjYxMzQ5ODExNDkzLDAsbnVsbCxbWzAsWzEzXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzMTQ0MTcwNDU5MzU3OTksMTksW1szNiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwyMDg0NzU4MzA2NDE4MDQsbnVsbCxbWzAsWzEwXV1dXV0sW1szNiwzNSxudWxsLDU5NTI2MDgwNTEzMDA3OSwwLG51bGwsW1swLFsxNV1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxMzA1NTA3NDI5Mjg5NDksMjAsW1s2LDM3LG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDkxMjAyMTU0ODI1NTc5NCxudWxsLFtbMCxbMTVdXV1dXSxbWzYsMzgsbnVsbCw0MzUyNjQzMDA4MjE0MjksMCxudWxsLFtbMCxbMTYsWzQsMjhdLFs0LDI5XV1dLFswLFsxNyxbMSw2LDM5LGZhbHNlXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNDYyNjQ5NDY3MjUwMDE2LDIxLFtbNiwzNyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxNzU1MTM3NDU4MTM4MzQsbnVsbCxbWzAsWzE4XV1dXV0sW1s2LDM4LG51bGwsODE4NDY5NDAyMDA4MDY3LDAsbnVsbCxbWzAsWzE5LFs0LDI4XSxbNCwyOV1dXSxbMCxbMTcsWzEsNiwzOSxmYWxzZV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDM4Mjk2MzM3ODc2ODc4NywyMixbWzYsMzcsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNTcwODYxNTAyOTI4NTIzLG51bGwsW1swLFsyMF1dXV1dLFtbNiwzOCxudWxsLDY4MjcyODU4NTEyMTIyMCwwLG51bGwsW1swLFsyMSxbNCwyOF0sWzQsMjldXV0sWzAsWzE3LFsxLDYsMzksZmFsc2VdXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDI0NDQ3NDg1MzgxODQwMywyNyxbWy0xLDQwLG51bGwsMSxmYWxzZSxmYWxzZSxmYWxzZSw5OTg5MzI5ODkxODE0MTgsbnVsbF1dLFtdXSxbMCwwLGZhbHNlLG51bGwsODEwMjM5OTMxODQ2MTk2LDI4LFtbMjIsNDEsbnVsbCwxLGZhbHNlLGZhbHNlLGZhbHNlLDQ3NDgxNTc1MzM3MjY4NCxudWxsXV0sW1stMSw0MixudWxsLDUwNDc2MzYzODk2NzQyMiwyNTYsbnVsbCxbWzQsNDRdLFs1LFsyMl1dLFswLFsxNyxbMSwyMiw0MyxmYWxzZV1dXSxbMCxbMjMsWzEsMjIsNDQsZmFsc2VdXV0sWzE2LGZhbHNlXSxbMjAsWzI0XV1dXSxbLTEsNDUsbnVsbCwyNDU5MzQyNzYzMjcwMzYsMixudWxsXSxbNDQsNDYsbnVsbCw2NzAyODg0NjA5NDQ5MzksMSxudWxsLFtbNCwxM10sWzMsMV1dXSxbNDQsNDYsbnVsbCw5NjM5ODkyMDA4NTI1MDEsMSxudWxsLFtbNCwzNF0sWzMsMV1dXSxbNDQsNDYsbnVsbCwyNzc5NDE4OTE5MTkxNTQsMSxudWxsLFtbNCwyMl0sWzMsMV1dXSxbNDQsNDcsbnVsbCwzNTk1NTE3MjIxMjI0MDEsMCxudWxsLFtbNSxbMjVdXV1dLFs0NCw0OCxudWxsLDEyNTgxNjgxODM0MTYxNSwwLG51bGwsW1sxMCwwXSxbNyxbMjYsWzIsMjIsZmFsc2UsMF1dXV1dLFs0NCw0OCxudWxsLDM0MDY5NzQxODc4MDEyMSwwLG51bGwsW1sxMCwxXSxbNyxbMjcsWzIsMjIsZmFsc2UsMF1dXV1dLFstMSw0NSxudWxsLDM5MDY5NjMzNjQ2NjkxOSwyLG51bGxdXSxbWzAsMCxmYWxzZSxudWxsLDIyNjkyNTU0NDc2NzEzNSwyOSxbWzMyLDQ5LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0MTk3NzM3OTI0NDM3MzksbnVsbCxbWzEwLDBdLFs4LDBdLFs3LFsyNyxbMiw0NCxmYWxzZSwxXV1dXV1dLFtbNDQsNTAsbnVsbCw0MzU0OTEzNDU5NTE4NjEsMCxudWxsLFtbMCxbMjgsWzEsMzIsNDMsZmFsc2VdXV0sWzAsWzI5LFsxLDMyLDQ0LGZhbHNlXV1dXV0sWzMyLDUxLG51bGwsOTQyNjk1MDE3NTgxNzU1LDAsbnVsbCxbWzQsNDRdLFsxNix0cnVlXSxbMTYsdHJ1ZV0sWzE2LHRydWVdLFsxNix0cnVlXSxbMTYsdHJ1ZV0sWzE2LGZhbHNlXSxbMTYsdHJ1ZV0sWzE2LHRydWVdLFsxNix0cnVlXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNjQxMjUzMzI5OTI4ODIxLDMwLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDMxMzg4MDE2MDE0NTQwOSxudWxsLFtbMTEsNDE4OTA5NDkzMTA1NzY5XSxbOCwwXSxbNyxbNl1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsMzUyOTI4MTUxNTQzMjg3LDMxLFtbLTEsMjEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDI3NDEwOTU4MDUzMzc1MCxudWxsXV0sW1s0NCw1MixudWxsLDUyOTM0MTYwMjc0NzQ4OCwwLG51bGxdXSxbWzAsMCxmYWxzZSxudWxsLDc1NDg1OTgwNTM3ODA5OSwzMixbWy0xLDUzLG51bGwsMCx0cnVlLGZhbHNlLGZhbHNlLDUxMDA4MzQyODc1MjA5NyxudWxsLFtbNCwyMl1dXV0sW1stMSw0MixudWxsLDExMTg4ODE3NjI3OTUwNSwyNTYsbnVsbCxbWzQsNDRdLFs1LFsyMl1dLFswLFsxNyxbMSwyMiw0MyxmYWxzZV1dXSxbMCxbMjMsWzEsMjIsNDQsZmFsc2VdXV0sWzE2LGZhbHNlXSxbMjAsWzI0XV1dXSxbLTEsNDUsbnVsbCw0NDcxMzQ3MTQyMjY1NjAsMixudWxsXSxbNDQsNDYsbnVsbCw2NDIwMjA2MjAyMjQ5MDAsMSxudWxsLFtbNCwxM10sWzMsMV1dXSxbNDQsNDYsbnVsbCwzMTMwNjU4ODkzNzIyOTMsMSxudWxsLFtbNCwzNF0sWzMsMV1dXSxbNDQsNDYsbnVsbCwxMzgyNjYwNTgyOTY5NTQsMSxudWxsLFtbNCwyMl0sWzMsMV1dXSxbNDQsNDcsbnVsbCw0NjMxMTQ1MzMyNzQyMjksMCxudWxsLFtbNSxbMjVdXV1dLFs0NCw0OCxudWxsLDMyNzY5Nzc2NjUxNjQwOSwwLG51bGwsW1sxMCwwXSxbNyxbMjYsWzIsMjIsZmFsc2UsMF1dXV1dLFs0NCw0OCxudWxsLDYxNjY1MjYwNDE2NDEzOCwwLG51bGwsW1sxMCwxXSxbNyxbMjcsWzIsMjIsZmFsc2UsMF1dXV1dLFstMSw0NSxudWxsLDgxMzM3MDc4MjgzMzU2MywyLG51bGxdXSxbWzAsMCxmYWxzZSxudWxsLDIwNTczOTAzMTU3NzczMywzMyxbWzMyLDQ5LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0ODQ3OTk2Njk2MjU2MzcsbnVsbCxbWzEwLDBdLFs4LDBdLFs3LFsyNyxbMiw0NCxmYWxzZSwxXV1dXV1dLFtbNDQsNTAsbnVsbCwxNDI3NTU5NDY1NjM0MDUsMCxudWxsLFtbMCxbMjgsWzEsMzIsNDMsZmFsc2VdXV0sWzAsWzI5LFsxLDMyLDQ0LGZhbHNlXV1dXV0sWzMyLDUxLG51bGwsOTY2Mzk5NjA5NjY5NTk1LDAsbnVsbCxbWzQsNDRdLFsxNix0cnVlXSxbMTYsdHJ1ZV0sWzE2LHRydWVdLFsxNix0cnVlXSxbMTYsdHJ1ZV0sWzE2LGZhbHNlXSxbMTYsdHJ1ZV0sWzE2LHRydWVdLFsxNix0cnVlXV1dXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDk3Njg4NjUzMTIzMzQ3MCwzNCxbWzQ0LDU0LG51bGwsMSxmYWxzZSxmYWxzZSxmYWxzZSw2MTY1ODQ3OTk3NzE4NjgsbnVsbF1dLFtdXSxbMCwwLGZhbHNlLG51bGwsMzQxMjcwMDQ4MDAzMDg4LDM1LFtbNDMsNTUsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDU3NDg3MzY0MzY2NTI0OCxudWxsLFtbMTAsMF0sWzgsMF0sWzcsWzMwXV1dXV0sW1s0Myw1NixudWxsLDMwNDQyOTYxMDEwMjM3NiwwLG51bGwsW1swLFszMSxbNCw1N11dXV1dXV1dXSxbMyxbdHJ1ZSwiZ2FtZSJdLGZhbHNlLG51bGwsNDI1OTIyNTQ5OTU3MDcxLDM2LFtbLTEsMjAsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDAsZmFsc2UsW1sxLFsyMl1dXV1dLFtdLFtbMyxbdHJ1ZSwid2l0aHBjIGJlaGF2aW9yIl0sZmFsc2UsbnVsbCw5MjAwMzIzODgxNTEyMzksMzcsW1stMSwyMCxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMCxmYWxzZSxbWzEsWzMyXV1dXV0sW10sW1sxLCJoaXQiLDAsMCxmYWxzZSxmYWxzZSwzMzQ5NzI2NTM0OTU2MzksZmFsc2UsNjFdLFsxLCJoaXQyIiwwLDAsZmFsc2UsZmFsc2UsMTk2NDc3MDU4NzY0Mzg2LGZhbHNlLDYyXSxbMCwwLGZhbHNlLG51bGwsNTEzODcwNTc3MjQ1MzQxLDM4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDk2NjE1NzcwMjI5Mzc5NCxudWxsLFtbMTEsMTIwMjQxNTc3MzQ5NDYyXSxbOCwwXSxbNyxbNl1dXV0sWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwzNjg2OTExOTQxNDk4OTYsbnVsbCxbWzExLDI4Mjc0NzAwMTEzMjM3N10sWzgsMF0sWzcsWzZdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDc5OTg0OTg4ODE4NDY2NiwzOSxbWy0xLDU4LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3MzE5Mjk4NjM1NzQyNjUsbnVsbCxbWzAsWzZdXV1dXSxbWy0xLDU5LG51bGwsNjIxOTMzMzAwODU4Mjk0LDAsbnVsbCxbWzExLDM5Mzk3OTA1Mzc4Nzk1M10sWzcsWzMzLFs0LDYwXV1dXV0sWy0xLDU5LG51bGwsMTgyNDQxNzgxMTkxMzM0LDAsbnVsbCxbWzExLDcxNTY4MzQ1OTA1NTA0NV0sWzcsWzMzLFs0LDYwXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTIyNDMwNjY1MzM1NjY1LDQwLFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNjY5MzM0MDIwMjM3MTAzLG51bGwsW1swLFszNF1dXV0sWy0xLDYxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1Mjk4Njc4NTAyOTQzMDUsbnVsbCxbWzcsWzM1LFsxLDEzLDQzLGZhbHNlXSxbMSwxMyw0NCxmYWxzZV0sWzEsMTIsNDMsZmFsc2VdLFsxLDEyLDQ0LGZhbHNlXV1dLFs4LDNdLFs3LFszNl1dXV0sWy0xLDU4LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyNjk3MjkyODgxNDMxMTksbnVsbCxbWzAsWzM3XV1dXSxbMTMsNjIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM2MjY5MzI5NDYzMTkwNixudWxsLFtbOCw0XSxbMCxbMzgsWzEsMTgsNjMsZmFsc2VdXV1dXV0sW1stMSw1OSxudWxsLDcwNTA2NDUxMjg5MDgxOCwwLG51bGwsW1sxMSwzMzQ5NzI2NTM0OTU2MzldLFs3LFs2XV1dXSxbMTMsNjQsIlBoeXNpY3MiLDI0MTIzNTE5Mjk4NjUzMSwwLG51bGwsW1swLFszNl1dLFswLFszOCxbMSwxMyw2NSxmYWxzZV1dXSxbNyxbMl1dXV1dLFtbMCwwLGZhbHNlLG51bGwsODE1NzcyNTc1NTAzODcwLDQxLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQ5NjgzMzg4MTE1NjE3OSxudWxsLFtbMTEsNDg4NTk2NjIyNzk0NjM4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMSw2NixudWxsLDM4NzE5NjU3MjE1MTA0OSwwLG51bGwsW1syLFsidHJpYnVuZSIsZmFsc2VdXSxbMywwXSxbMCxbMl1dLFswLFsyXV0sWzEsWzI0XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3MTk0MjQ2MjkzNzQ0MTQsNDIsW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3NzY0MTU0NTQ3ODgyMzksbnVsbCxbWzAsWzM5XV1dXV0sW1szNSw2NCwiUGh5c2ljcyIsMjQ2MTIxMTk0ODc3MDA2LDAsbnVsbCxbWzAsWzM5XV0sWzAsWzQwLFsxLDM1LDY1LGZhbHNlXV1dLFs3LFs2XV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQ0MzY4NjAyOTIxMTEyNCw0MyxbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDIxOTQ5OTM5Mjk1MjgyNyxudWxsLFtbMCxbNDFdXV1dLFstMSw2MSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjUwMTEwODM4NjgyOTkyLG51bGwsW1s3LFszNSxbMSwxMyw0MyxmYWxzZV0sWzEsMTMsNDQsZmFsc2VdLFsxLDEyLDQzLGZhbHNlXSxbMSwxMiw0NCxmYWxzZV1dXSxbOCwzXSxbNyxbMzZdXV1dLFstMSw1OCxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjk1MDcyMDAyODU2NjkxLG51bGwsW1swLFszN11dXV0sWzEzLDYyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5NzY2MjUyMzAwODc2OTYsbnVsbCxbWzgsNF0sWzAsWzM4LFsxLDE4LDYzLGZhbHNlXV1dXV1dLFtbLTEsNTksbnVsbCwzNTQ1OTQ2Mzc5ODk1MTcsMCxudWxsLFtbMTEsMTk2NDc3MDU4NzY0Mzg2XSxbNyxbNl1dXV0sWzEzLDY0LCJQaHlzaWNzIiw2OTQyNzEyMjM1NzQ3MzEsMCxudWxsLFtbMCxbMzZdXSxbMCxbMzgsWzEsMTMsNjUsZmFsc2VdXV0sWzcsWzJdXV1dXSxbWzAsMCxmYWxzZSxudWxsLDE1NzU1NDgzMjk0NzM5Myw0NCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw4NjczMzQ4MTg4MTY1NTAsbnVsbCxbWzExLDQ4ODU5NjYyMjc5NDYzOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzEsNjYsbnVsbCw0OTI4NzQ3NDU3MjUxMjQsMCxudWxsLFtbMixbInRyaWJ1bmUiLGZhbHNlXV0sWzMsMF0sWzAsWzJdXSxbMCxbMl1dLFsxLFsyNF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjU3Nzk2NTAwNTM1MzQ4LDQ1LFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTYzOTcwOTY5NjIwODk0LG51bGwsW1swLFs0Ml1dXV1dLFtbMzUsNjQsIlBoeXNpY3MiLDc4NTAxMjc0MTk2MDMyNSwwLG51bGwsW1swLFszOV1dLFswLFs0MCxbMSwzNSw2NSxmYWxzZV1dXSxbNyxbNl1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5NDQ4MTQ2MjUzMDY2NjUsNDYsW1stMSw1OCxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMzI0NDY1MzExODg0MDM3LG51bGwsW1swLFs0MyxbMywzOTM5NzkwNTM3ODc5NTNdXV1dXSxbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDY3OTQxMDQwMDUzMzgzMCxudWxsLFtbMTEsMzM0OTcyNjUzNDk1NjM5XSxbOCwwXSxbNyxbMl1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsMzU1MTQ4NDY0MzEyNDY1LDQ3LFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNjczODIzNzA5MTM3MTk5LG51bGwsW1swLFszNF1dXV0sWzEzLDYyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwzNjI4NTk4MjQ4MTEyMzYsbnVsbCxbWzgsNF0sWzAsWzM4LFsxLDE4LDYzLGZhbHNlXV1dXV1dLFtbMTMsNjQsIlBoeXNpY3MiLDUzMTMyODU5MzAzMTQwMiwwLG51bGwsW1swLFszNl1dLFswLFszOCxbMSwxMyw2NSxmYWxzZV1dXSxbNyxbMl1dXV1dLFtbMCwwLGZhbHNlLG51bGwsNjk0NjA5Njc4MzY4NDcyLDQ4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDMyNTIxMjM5NDc2NTUwMyxudWxsLFtbMTEsNDg4NTk2NjIyNzk0NjM4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMSw2NixudWxsLDM1NDUyMTI3MjcyNzMwNiwwLG51bGwsW1syLFsidHJpYnVuZSIsZmFsc2VdXSxbMywwXSxbMCxbMl1dLFswLFsyXV0sWzEsWzI0XV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDY0MTUyNzE5OTAwMjU3Niw0OSxbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDI2MzI1MzQ4MTYyMjcwNCxudWxsLFtbMCxbMzldXV1dXSxbWzM1LDY0LCJQaHlzaWNzIiw0NTA4NDQyNjMzMTE1MjEsMCxudWxsLFtbMCxbMzldXSxbMCxbNDAsWzEsMzUsNjUsZmFsc2VdXV0sWzcsWzZdXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODgyMTY1Mjg3OTE3NDQ5LDUwLFtbLTEsNTgsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQzOTc2NzQzMTUyNjg2MixudWxsLFtbMCxbNDMsWzMsNzE1NjgzNDU5MDU1MDQ1XV1dXV0sWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0MzY3NzM1NjYwNjg3NDIsbnVsbCxbWzExLDE5NjQ3NzA1ODc2NDM4Nl0sWzgsMF0sWzcsWzJdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDU1NjI1ODgzNzIzODQxOCw1MSxbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDg4OTU4ODAzOTMwMjQ0MyxudWxsLFtbMCxbNDFdXV1dLFsxMyw2MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsODQ3NTYzNzc1MjU3NzU1LG51bGwsW1s4LDRdLFswLFszOCxbMSwxOCw2MyxmYWxzZV1dXV1dXSxbWzEzLDY0LCJQaHlzaWNzIiw0NjM1OTE4MTU1MjU4NjUsMCxudWxsLFtbMCxbMzZdXSxbMCxbMzgsWzEsMTMsNjUsZmFsc2VdXV0sWzcsWzJdXV1dXSxbWzAsMCxmYWxzZSxudWxsLDM1MTA0MTkxMTQzNjkyMyw1MixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3MDM1NTQ0MTczOTIwMTUsbnVsbCxbWzExLDQ4ODU5NjYyMjc5NDYzOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzEsNjYsbnVsbCw0ODI2MTA4MjM1ODg2MzYsMCxudWxsLFtbMixbInRyaWJ1bmUiLGZhbHNlXV0sWzMsMF0sWzAsWzJdXSxbMCxbMl1dLFsxLFsyNF1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwyMjg4ODY5Nzk4NDE0OTQsNTMsW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw5MTg4NjU2Njc2NTEzMjksbnVsbCxbWzAsWzQyXV1dXV0sW1szNSw2NCwiUGh5c2ljcyIsODYzMzcwNzQyNDkyMzYwLDAsbnVsbCxbWzAsWzM5XV0sWzAsWzQwLFsxLDM1LDY1LGZhbHNlXV1dLFs3LFs2XV1dXV1dXV1dXV1dLFszLFt0cnVlLCJwaHlzaWMiXSxmYWxzZSxudWxsLDE0ODMxMTQ2NTIwMzIzNCw1NCxbWy0xLDIwLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwwLGZhbHNlLFtbMSxbNDRdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDk2NjY3NDgyODMxNzg3NSw1NSxbWzE4LDY3LCJQaHlzaWNzIiwwLGZhbHNlLGZhbHNlLGZhbHNlLDQ2OTk4MjQ5OTIxMTIwMSxudWxsXSxbMTMsNjIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQ1MDc4MDIwMDA3NDk5NyxudWxsLFtbOCw0XSxbMCxbMzgsWzEsMTgsNjMsZmFsc2VdXV1dXV0sW1sxMyw2OCwiUGh5c2ljcyIsOTk4NDkxNDcyNzk1OTgyLDAsbnVsbCxbWzAsWzJdXSxbMCxbNDVdXSxbNyxbMTNdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDI0NDA4MjA4NDc1NzIyMyw1NixbWzE4LDY3LCJQaHlzaWNzIiwwLGZhbHNlLGZhbHNlLGZhbHNlLDU3NTU4OTY1NDYwNjQwMyxudWxsXSxbMTMsNjksbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDY3MTE0MDQ4NDg4NTg3NixudWxsLFtbMCxbNDZdXSxbMCxbMTRdXV1dLFsxMyw2MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjQyNTkxNjk2NTUyNzkzLG51bGwsW1s4LDRdLFswLFszOCxbMSwxOCw2MyxmYWxzZV1dXV1dXSxbWzEzLDcwLCJQaHlzaWNzIiw2NzEzMTc1NjA3MTMzNjAsMCxudWxsLFtbMCxbNDcsWzEsMTMsNjUsZmFsc2VdXV0sWzAsWzE3LFsxLDEzLDY1LGZhbHNlXV1dLFs3LFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1NjE4ODAzMzAzNjQzMTYsNTcsW1sxOCw2NywiUGh5c2ljcyIsMCxmYWxzZSxmYWxzZSxmYWxzZSw3MDI3MzU2NTcwOTQ0ODEsbnVsbF0sWzEzLDY5LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyNjQwOTk4OTY0MzE3MDgsbnVsbCxbWzAsWzQ2XV0sWzAsWzEyXV1dXSxbMTMsNjIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDcyNDYwNTI5ODE3OTk1MCxudWxsLFtbOCw0XSxbMCxbMzgsWzEsMTgsNjMsZmFsc2VdXV1dXV0sW1sxMyw3MCwiUGh5c2ljcyIsMjIxMzgxNjc1NTM0ODkwLDAsbnVsbCxbWzAsWzQ4LFsxLDEzLDY1LGZhbHNlXV1dLFswLFsxNyxbMSwxMyw2NSxmYWxzZV1dXSxbNyxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzI3MDU3MzUwMDY2NjMwLDU4LFtbMTgsNjcsIlBoeXNpY3MiLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzM0ODA4NDQ4OTMxMjc0LG51bGxdLFsxMyw2OSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzIzMjYyMjUwNDk2MjYzLG51bGwsW1swLFszOV1dLFswLFs0OV1dXV0sWzEzLDYyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwzNjM0MjE0NjI3ODYyNjYsbnVsbCxbWzgsNF0sWzAsWzM4LFsxLDE4LDYzLGZhbHNlXV1dXV1dLFtbMTMsNzAsIlBoeXNpY3MiLDI1NTEyNTMwNzIwNzc2NSwwLG51bGwsW1swLFs1MCxbMSwxMyw2NSxmYWxzZV1dXSxbMCxbNDAsWzEsMTMsNjUsZmFsc2VdXV0sWzcsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQzNzM3NjQzNjE3NDc2MSw1OSxbWzE4LDY3LCJQaHlzaWNzIiwwLGZhbHNlLGZhbHNlLGZhbHNlLDYzNDA2OTAzMjM3MDQ2MyxudWxsXSxbMTMsNjksbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDEyODExNTQ4NTQyNDAzNyxudWxsLFtbMCxbNTFdXSxbMCxbNDldXV1dLFsxMyw2MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzE1NzUwMzQzMzE4MTQyLG51bGwsW1s4LDRdLFswLFszOCxbMSwxOCw2MyxmYWxzZV1dXV1dXSxbWzEzLDcwLCJQaHlzaWNzIiwyNTY3NzY4NTkyNDY3OTEsMCxudWxsLFtbMCxbNTIsWzEsMTMsNjUsZmFsc2VdXV0sWzAsWzQwLFsxLDEzLDY1LGZhbHNlXV1dLFs3LFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0NDAwNDUyMTk4MTA1MjEsNjAsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjc0MTU2MzA2Njc1OTEwLG51bGwsW1sxMSwyODI3NDcwMDExMzIzNzddLFs4LDBdLFs3LFs2XV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw2MzYwMDIwODI4ODI2NjcsNjEsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjA2Njk1NDE5MzQ0ODU4LG51bGwsW1sxMSwyODQyMjIzOTEwNDc3ODJdLFs4LDBdLFs3LFsyXV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw5NDcwMDM5OTMxMDM2MDAsNjIsW1s0LDcxLG51bGwsMSxmYWxzZSxmYWxzZSxmYWxzZSwzNTE3NjIwNTk1MDE3OTMsbnVsbCxbWzksNjVdXV0sWzMyLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDM1Njc3MjEyNzYwMDU3OSxudWxsLFtbMCxbNTNdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDkwOTcxMDEzNTAxOTQyMCw2MyxbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDQ0Njc5ODkxMDk1MTA4NSxudWxsLFtbMCxbNTRdXV1dLFsxMyw2MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjUyMzM0NTY5MTAyODgyLG51bGwsW1s4LDRdLFswLFszOCxbMSwxOCw2MyxmYWxzZV1dXV1dXSxbWzEzLDY0LCJQaHlzaWNzIiw5ODExMzAyMTA0MjY3ODMsMCxudWxsLFtbMCxbMzZdXSxbMCxbMzgsWzEsMTMsNjUsZmFsc2VdXV0sWzcsWzJdXV1dXSxbWzAsMCxmYWxzZSxudWxsLDI5MDk2OTAzNzg4OTYyMCw2NCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw4Njc4NTMyMDkyMDMwNTQsbnVsbCxbWzExLDQ4ODU5NjYyMjc5NDYzOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzEsNjYsbnVsbCw3MDg0NTQyMTIwODMzMjUsMCxudWxsLFtbMixbInRyaWJ1bmUiLGZhbHNlXV0sWzMsMF0sWzAsWzJdXSxbMCxbMl1dLFsxLFsyNF1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3NTk2OTUwNzc0MDIwMTcsNjUsW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwzNTI2MTkyNzE0NTQyMDEsbnVsbCxbWzAsWzU1XV1dXV0sW1szNSw2NCwiUGh5c2ljcyIsMjM5MDY3MTYyNTMyMjE0LDAsbnVsbCxbWzAsWzM5XV0sWzAsWzE3LFsxLDM1LDY1LGZhbHNlXV1dLFs3LFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw2NzY3Mzk0MzM5MzYxMTgsNjYsW10sW1szMiwzNSxudWxsLDgzNzUxNjI1NTI1MjA3MCwwLG51bGwsW1swLFs2XV1dXSxbLTEsNzIsbnVsbCwyMjQ4OTc5NDkxNjg4ODQsMixudWxsLFtbMCxbNTZdXV1dLFszMiwzNSxudWxsLDQ1ODE3NjM0NDk5NjM0NCwwLG51bGwsW1swLFsyXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDIwMTE3NjI1NTQzNDcwOCw2NyxbWzQsNzEsbnVsbCwxLGZhbHNlLGZhbHNlLGZhbHNlLDgyNjAzMzU3MTkyMTQ4MCxudWxsLFtbOSw2OF1dXSxbMzIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNzMxMzAzMDkxMTAxNjI5LG51bGwsW1swLFs1N11dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsOTMzNzM2NDk1MjY3MzQwLDY4LFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNjAwNjA0MDIyNDExNTAxLG51bGwsW1swLFs1OF1dXV0sWzEzLDYyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5MTk3Mjk5MDc1MTU4MzAsbnVsbCxbWzgsNF0sWzAsWzM4LFsxLDE4LDYzLGZhbHNlXV1dXV1dLFtbMTMsNjQsIlBoeXNpY3MiLDk2MzkyMzcwMjM5MjQxNCwwLG51bGwsW1swLFszNl1dLFswLFszOCxbMSwxMyw2NSxmYWxzZV1dXSxbNyxbMl1dXV1dLFtbMCwwLGZhbHNlLG51bGwsMTM4NzY3NzAyNDQzOTUyLDY5LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM2ODY1MzM2MjY5MTEwMixudWxsLFtbMTEsNDg4NTk2NjIyNzk0NjM4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMSw2NixudWxsLDIwMDExNTUyNTMyMTA5MCwwLG51bGwsW1syLFsidHJpYnVuZSIsZmFsc2VdXSxbMywwXSxbMCxbMl1dLFswLFsyXV0sWzEsWzI0XV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDYyMjExNTUzNDExNjc0OSw3MCxbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDMwMTEwNDc1MzI0Mzk4NCxudWxsLFtbMCxbNTldXV1dXSxbWzM1LDY0LCJQaHlzaWNzIiw3MjY2MTgzMDY2NTY1NDAsMCxudWxsLFtbMCxbMzldXSxbMCxbMTcsWzEsMzUsNjUsZmFsc2VdXV0sWzcsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDMzODExNTM0MTg5NzA1MSw3MSxbXSxbWzMyLDM1LG51bGwsNzM3MjYzNjM2OTUyMjcwLDAsbnVsbCxbWzAsWzExXV1dXSxbLTEsNzIsbnVsbCw2OTY0MTY5MzIzOTU2MDgsMixudWxsLFtbMCxbNTZdXV1dLFszMiwzNSxudWxsLDg1ODg4NjU0NzA1OTM5MiwwLG51bGwsW1swLFsxM11dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5ODE2MjM5NjYxODYzODAsNzIsW1s0LDcxLG51bGwsMSxmYWxzZSxmYWxzZSxmYWxzZSw3MTA5MTg4NzUzMTI0MjksbnVsbCxbWzksNzRdXV0sWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1Njc0NTkyNTQ4NDQ2MjQsbnVsbCxbWzExLDEyMDI0MTU3NzM0OTQ2Ml0sWzgsMF0sWzcsWzJdXV1dLFszMiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw5MjY4NDI1NzI1MTUyMTYsbnVsbCxbWzAsWzddXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDMxMzU2NDU2NDE4MjY1Miw3MyxbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDc0NTE0NjU3NjcyODU1NCxudWxsLFtbMCxbMzRdXV1dLFsxMyw2MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTIwMDY3OTg5MTk1MDE4LG51bGwsW1s4LDRdLFswLFszOCxbMSwxOCw2MyxmYWxzZV1dXV1dXSxbWzEzLDY0LCJQaHlzaWNzIiw3ODMyMzI1NDM0MzA3OTAsMCxudWxsLFtbMCxbMzZdXSxbMCxbMzgsWzEsMTMsNjUsZmFsc2VdXV0sWzcsWzJdXV1dXSxbWzAsMCxmYWxzZSxudWxsLDY1ODU5MTgxNDUyOTMyNCw3NCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5NTQ2NzcxNjgxODU2ODIsbnVsbCxbWzExLDQ4ODU5NjYyMjc5NDYzOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzEsNjYsbnVsbCw2NjEzMjgxMTg1NDQ1MzAsMCxudWxsLFtbMixbInRyaWJ1bmUiLGZhbHNlXV0sWzMsMF0sWzAsWzJdXSxbMCxbMl1dLFsxLFsyNF1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0MTA4Mzc3OTUwOTIzMTQsNzUsW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw0MDg1MTI4Mjg0MDY1NzIsbnVsbCxbWzAsWzM5XV1dXV0sW1szNSw2NCwiUGh5c2ljcyIsOTMzNzk3MzIwMDc2NzM4LDAsbnVsbCxbWzAsWzM5XV0sWzAsWzQwLFsxLDM1LDY1LGZhbHNlXV1dLFs3LFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4NzAzNTg0MzczMDE5MTYsNzYsW10sW1szMiwzNSxudWxsLDUyNDg1OTcwMTc1NTIyMCwwLG51bGwsW1swLFsxNV1dXV0sWy0xLDcyLG51bGwsNTkyNjAxMTg1NTY1NDIyLDIsbnVsbCxbWzAsWzU2XV1dXSxbMzIsMzUsbnVsbCw3NzgwNDk1OTgwMzA0MzQsMCxudWxsLFtbMCxbOV1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwyMzYwOTEyMTk0Njg5NTUsNzcsW1s0LDcxLG51bGwsMSxmYWxzZSxmYWxzZSxmYWxzZSw4MDAxNjA2NzY5MTE3ODMsbnVsbCxbWzksNzZdXV0sWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5NzUxNDc0Nzg5OTQ4ODMsbnVsbCxbWzExLDEyMDI0MTU3NzM0OTQ2Ml0sWzgsMF0sWzcsWzJdXV1dLFszMiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3MDQ2OTkyNTI1Mjk2ODgsbnVsbCxbWzAsWzhdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDY3NDQ2OTUyMjg4OTY5NSw3OCxbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDEwNTc5OTQ0MTU0Mjc5OSxudWxsLFtbMCxbNDFdXV1dLFsxMyw2MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTU4NzMwNjk1NTEwNjcwLG51bGwsW1s4LDRdLFswLFszOCxbMSwxOCw2MyxmYWxzZV1dXV1dXSxbWzEzLDY0LCJQaHlzaWNzIiw0MDQ3Nzg1MjY2NTg0NjgsMCxudWxsLFtbMCxbMzZdXSxbMCxbMzgsWzEsMTMsNjUsZmFsc2VdXV0sWzcsWzJdXV1dXSxbWzAsMCxmYWxzZSxudWxsLDkxODU2MjkzNzM1MDIzMiw3OSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw4MTUxOTM3NTg3ODU1NDIsbnVsbCxbWzExLDQ4ODU5NjYyMjc5NDYzOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzEsNjYsbnVsbCw5Mjk2NjUzMTg2Mjc3MzMsMCxudWxsLFtbMixbInRyaWJ1bmUiLGZhbHNlXV0sWzMsMF0sWzAsWzJdXSxbMCxbMl1dLFsxLFsyNF1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxMDQxMTU1MDc2OTAyMjEsODAsW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwyNTIwNDE5NzAzODI1MDAsbnVsbCxbWzAsWzQyXV1dXV0sW1szNSw2NCwiUGh5c2ljcyIsNDk5NjYzOTgyNTM4ODExLDAsbnVsbCxbWzAsWzM5XV0sWzAsWzQwLFsxLDM1LDY1LGZhbHNlXV1dLFs3LFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0NTMwNzQzNzQyMTE3MjksODEsW10sW1szMiwzNSxudWxsLDEwODEyNDcyOTkwMDI2OCwwLG51bGwsW1swLFs2MF1dXV0sWy0xLDcyLG51bGwsNTQ3MjIyMTk5MzUwMzc1LDIsbnVsbCxbWzAsWzU2XV1dXSxbMzIsMzUsbnVsbCw2OTMzMjY0OTk3ODIyOTcsMCxudWxsLFtbMCxbMzRdXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTEyODA3MDUwNDY5Njc0LDgyLFtbNCw3MSxudWxsLDEsZmFsc2UsZmFsc2UsZmFsc2UsMzUzOTM1MDM3ODY4NTg0LG51bGwsW1s5LDgyXV1dLFstMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsODM0NzI0MjMxODU1NTQwLG51bGwsW1sxMSw3NTc1ODgwMjEwNzgxNDNdLFs4LDBdLFs3LFsyXV1dXV0sW1stMSw3MyxudWxsLDkxNjQ2OTU5MjM2MTk4OSwwLG51bGxdLFstMSw1OSxudWxsLDUxMTAyNDg0ODQ4NTY3MywwLG51bGwsW1sxMSw2MTUwMjc2NTA4NTkyMjBdLFs3LFsyXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc2MDc2Njk2MjA3MjY2Myw4MyxbWzcsNzQsbnVsbCwxLGZhbHNlLGZhbHNlLGZhbHNlLDIzOTg2MjQyOTY4MzYxMSxudWxsLFtbNCwzMl1dXSxbMzIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTMyMjgwMzEzODcyNjY0LG51bGwsW1swLFs1M11dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNDExMzQyMDc0MzA5OTI2LDg0LFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNzU3MjY5NDIxODEzODc1LG51bGwsW1swLFs1NF1dXV0sWzEzLDYyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw4NDY1MjE4MjU0NDAxNTEsbnVsbCxbWzgsNF0sWzAsWzM4LFsxLDE4LDYzLGZhbHNlXV1dXV1dLFtbMTMsNjQsIlBoeXNpY3MiLDgzNDQzMzc5MzA5OTcxNCwwLG51bGwsW1swLFszNl1dLFswLFszOCxbMSwxMyw2NSxmYWxzZV1dXSxbNyxbMl1dXV1dLFtbMCwwLGZhbHNlLG51bGwsODQxNzk1NDcwMjY2NTg4LDg1LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM1NDMxNDc0OTQ1NzIzNyxudWxsLFtbMTEsNDg4NTk2NjIyNzk0NjM4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMSw2NixudWxsLDY4MTY1MzE0MTMyNTQ5MiwwLG51bGwsW1syLFsidHJpYnVuZSIsZmFsc2VdXSxbMywwXSxbMCxbMl1dLFswLFsyXV0sWzEsWzI0XV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDE2OTczNDI1ODU3NDc3Niw4NixbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDYyNjUxNzI5ODYwODM4MCxudWxsLFtbMCxbNTVdXV1dXSxbWzM1LDY0LCJQaHlzaWNzIiwzNDQwMTgxMDAxMDM2NzMsMCxudWxsLFtbMCxbMzldXSxbMCxbMTcsWzEsMzUsNjUsZmFsc2VdXV0sWzcsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDM5NDIxMDA5NzI1MzczMSw4NyxbXSxbWzMyLDM1LG51bGwsMzY5NjIxNzg5OTc1NjM4LDAsbnVsbCxbWzAsWzZdXV1dLFstMSw3MixudWxsLDQ4MjY3MzM0NTgxMDI2MiwyLG51bGwsW1swLFs1Nl1dXV0sWzMyLDM1LG51bGwsMzI1MzUzNTQwNzkzMzg5LDAsbnVsbCxbWzAsWzJdXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTk2Mzk0NjMyMDAzMzQxLDg4LFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMzA1NjAxNjU3MTgzMjE3LG51bGwsW1swLFs1NV1dXV0sWzM1LDc1LG51bGwsMCxmYWxzZSx0cnVlLGZhbHNlLDg1NTc0Njk3NjQ4OTM1NyxudWxsLFtbMCxbNjFdXSxbMCxbMl1dXV1dLFtbMzUsNzAsIlBoeXNpY3MiLDI4NTUwMTUxNzM3MTU0MCwwLG51bGwsW1swLFs2Ml1dLFswLFs0MCxbMSwzNSw2NSxmYWxzZV1dXSxbNyxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTYxOTg2MjM0MTQ5MDc3LDg5LFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNTcyOTcxNzMwNjc5MTkxLG51bGwsW1swLFs1OV1dXV0sWzM1LDc1LG51bGwsMCxmYWxzZSx0cnVlLGZhbHNlLDg5NTU3NjAyODc1MTM1MixudWxsLFtbMCxbNjFdXSxbMCxbMl1dXV1dLFtbMzUsNzAsIlBoeXNpY3MiLDU2MDM2NzQ0NjExMTkyMywwLG51bGwsW1swLFs2Ml1dLFswLFs0MCxbMSwzNSw2NSxmYWxzZV1dXSxbNyxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNjkwOTgyMzc0MjI2MzI1LDkwLFtbNyw3NCxudWxsLDEsZmFsc2UsZmFsc2UsZmFsc2UsNDAyMzI2OTk2MzYzMzA5LG51bGwsW1s0LDMyXV1dLFszMiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxMzYwMDUwODQ0NDM2MDUsbnVsbCxbWzAsWzU3XV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw3NjkyNzQ3MDAwMzkwNjYsOTEsW1sxMywzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw2Mjg1MTY2MjIzNjQwMTksbnVsbCxbWzAsWzU4XV1dXSxbMTMsNjIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM2NDY5NDkyNzcxMDAyMixudWxsLFtbOCw0XSxbMCxbMzgsWzEsMTgsNjMsZmFsc2VdXV1dXV0sW1sxMyw2NCwiUGh5c2ljcyIsNTQ3NjM1MTE4MDA0NTc5LDAsbnVsbCxbWzAsWzM2XV0sWzAsWzM4LFsxLDEzLDY1LGZhbHNlXV1dLFs3LFsyXV1dXV0sW1swLDAsZmFsc2UsbnVsbCw1NDUxNjQxMDc3NzY4MDMsOTIsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjE1NTA5OTQ4NTE3MTYyLG51bGwsW1sxMSw0ODg1OTY2MjI3OTQ2MzhdLFs4LDBdLFs3LFsyXV1dXV0sW1sxLDY2LG51bGwsNjAxMDEyMjYzNzUwOTQyLDAsbnVsbCxbWzIsWyJ0cmlidW5lIixmYWxzZV1dLFszLDBdLFswLFsyXV0sWzAsWzJdXSxbMSxbMjRdXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTA5OTU2OTI3MDU0Nzk0LDkzLFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNjI5MjExNDk3ODkxMTQ1LG51bGwsW1swLFs1OV1dXV1dLFtbMzUsNjQsIlBoeXNpY3MiLDE1NDQ1NTA4NTM2OTI3MCwwLG51bGwsW1swLFszOV1dLFswLFsxNyxbMSwzNSw2NSxmYWxzZV1dXSxbNyxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjMwNjQ2NjEyOTU4OTYxLDk0LFtdLFtbMzIsMzUsbnVsbCwzODA3MDk0NTkyNzMwNTEsMCxudWxsLFtbMCxbMTFdXV1dLFstMSw3MixudWxsLDc5NTcwMjM1MTU1MDMyNCwyLG51bGwsW1swLFs1Nl1dXV0sWzMyLDM1LG51bGwsMzE5ODMyNzE1NjMyNTk1LDAsbnVsbCxbWzAsWzEzXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDY5NDgxOTgwMzg4MjkyOCw5NSxbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDk2MzIzMDQ3MjMxNzAzMyxudWxsLFtbMCxbMzldXV1dLFszNSw3NSxudWxsLDAsZmFsc2UsdHJ1ZSxmYWxzZSw4OTMwMDQzNTc0NzUxNDIsbnVsbCxbWzAsWzYxXV0sWzAsWzJdXV1dXSxbWzM1LDcwLCJQaHlzaWNzIiw0MjI5MTM0MzAzNjUxODIsMCxudWxsLFtbMCxbNjJdXSxbMCxbMTcsWzEsMzUsNjUsZmFsc2VdXV0sWzcsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDYzNjM3MDQwMDc4MTE2MSw5NixbWzcsNzQsbnVsbCwxLGZhbHNlLGZhbHNlLGZhbHNlLDk1MzQ1MTY4MTY4MjYyOCxudWxsLFtbNCwzMl1dXSxbMzIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsOTU0NDA5NTI2MzYzNDEzLG51bGwsW1swLFs3XV1dXSxbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDE1ODA5ODM5NzA1OTM0NyxudWxsLFtbMTEsMTIwMjQxNTc3MzQ5NDYyXSxbOCwwXSxbNyxbMl1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNDE0OTY1NzU4MjM2MTcyLDk3LFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsOTgyNzYyMDkyNTQzMTA3LG51bGwsW1swLFszNF1dXV0sWzEzLDYyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0MTkyMDk1NjkxOTEwNzksbnVsbCxbWzgsNF0sWzAsWzM4LFsxLDE4LDYzLGZhbHNlXV1dXV1dLFtbMTMsNjQsIlBoeXNpY3MiLDM2NzY5OTUxMzEyMDY0MCwwLG51bGwsW1swLFszNl1dLFswLFszOCxbMSwxMyw2NSxmYWxzZV1dXSxbNyxbMl1dXV1dLFtbMCwwLGZhbHNlLG51bGwsNzY5NzAzMzM2MTk2MjcxLDk4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDI1MTgzNzcyMzMwMTQzNSxudWxsLFtbMTEsNDg4NTk2NjIyNzk0NjM4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMSw2NixudWxsLDU4MTIzNTgyOTE0MzU3MywwLG51bGwsW1syLFsidHJpYnVuZSIsZmFsc2VdXSxbMywwXSxbMCxbMl1dLFswLFsyXV0sWzEsWzI0XV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc4ODY3ODMzMjk3NDE2NSw5OSxbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDUyMzI1NDQ1MzQzMjE1NyxudWxsLFtbMCxbMzldXV1dXSxbWzM1LDY0LCJQaHlzaWNzIiw5MzAyODYzNjAwODU2OTUsMCxudWxsLFtbMCxbMzldXSxbMCxbNDAsWzEsMzUsNjUsZmFsc2VdXV0sWzcsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDE0MTgxODE0OTM1NjI0OCwxMDAsW10sW1szMiwzNSxudWxsLDUxNjQ3ODAyNzY0ODg1MCwwLG51bGwsW1swLFsxNV1dXV0sWy0xLDcyLG51bGwsNTAwNjE4MzE4NDkwNDk3LDIsbnVsbCxbWzAsWzU2XV1dXSxbMzIsMzUsbnVsbCwxMjg3NTk4OTA1NzA4ODUsMCxudWxsLFtbMCxbOV1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxNDg2MDA0MjI5OTI4ODUsMTAxLFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNTEzMjI1MTg2ODEyMjA3LG51bGwsW1swLFs0Ml1dXV0sWzM1LDc1LG51bGwsMCxmYWxzZSx0cnVlLGZhbHNlLDQ3NDU0Mzk5NTU4NjMzOSxudWxsLFtbMCxbNjFdXSxbMCxbMl1dXV1dLFtbMzUsNzAsIlBoeXNpY3MiLDMzNTY4Mzg4MTg2NTkwMSwwLG51bGwsW1swLFs2Ml1dLFswLFsxNyxbMSwzNSw2NSxmYWxzZV1dXSxbNyxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjY1NzA2OTQzNTIwNTQxLDEwMixbWzcsNzQsbnVsbCwxLGZhbHNlLGZhbHNlLGZhbHNlLDQxMDI5MDg0NzUwMjQzMCxudWxsLFtbNCwzMl1dXSxbMzIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsODk5ODE3Njg0NTc1NzY5LG51bGwsW1swLFs4XV1dXSxbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM4OTQzNjY5OTg2NTU5NixudWxsLFtbMTEsMTIwMjQxNTc3MzQ5NDYyXSxbOCwwXSxbNyxbMl1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNDA4NTE5MDkwMDk5MzEwLDEwMyxbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDc2MDc1MDEwMzQ4NDg0MixudWxsLFtbMCxbNDFdXV1dLFsxMyw2MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjMyNzIxMTYwODkyODU1LG51bGwsW1s4LDRdLFswLFszOCxbMSwxOCw2MyxmYWxzZV1dXV1dXSxbWzEzLDY0LCJQaHlzaWNzIiw2MzU2NDU0MjcxNTUwMjMsMCxudWxsLFtbMCxbMzZdXSxbMCxbMzgsWzEsMTMsNjUsZmFsc2VdXV0sWzcsWzJdXV1dXSxbWzAsMCxmYWxzZSxudWxsLDYwMTg0OTkyNzU5OTQzOSwxMDQsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTA1MjgzMTk2MzI3NDM5LG51bGwsW1sxMSw0ODg1OTY2MjI3OTQ2MzhdLFs4LDBdLFs3LFsyXV1dXV0sW1sxLDY2LG51bGwsMzc1NTAyNzMzMzI0ODUzLDAsbnVsbCxbWzIsWyJ0cmlidW5lIixmYWxzZV1dLFszLDBdLFswLFsyXV0sWzAsWzJdXSxbMSxbMjRdXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTc3MTU3MjIyMTM0MTgzLDEwNSxbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDEzODUzMjY4MTQ0NzcxOCxudWxsLFtbMCxbNDJdXV1dXSxbWzM1LDY0LCJQaHlzaWNzIiw1NjE0NDk5MDY2OTYyMzQsMCxudWxsLFtbMCxbMzldXSxbMCxbNDAsWzEsMzUsNjUsZmFsc2VdXV0sWzcsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDI5NTQ5NDk0OTAxNTc2MywxMDYsW10sW1szMiwzNSxudWxsLDU1NjMwODc1MzQ5ODI1NCwwLG51bGwsW1swLFs2MF1dXV0sWy0xLDcyLG51bGwsNTY3ODQ2NjUzOTQxOTkzLDIsbnVsbCxbWzAsWzU2XV1dXSxbMzIsMzUsbnVsbCwzMjc0NjQzMTA5NDc3MTUsMCxudWxsLFtbMCxbMzRdXV1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw2NjEzNzQ5ODQwMjgwODEsMTA3LFtbLTEsMjEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQ1Njg4NTgzODU2MjU4MSxudWxsXV0sW10sW1swLDAsZmFsc2UsbnVsbCw2MjI2NzUwMjUzNzgxNDQsMTA4LFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsODY2OTY0NTQ1MTIyNTA1LG51bGwsW1swLFs1NF1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNDUwODYyMTc1ODU0MTcxLDEwOSxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDYwOTgxNTY2NjA0NDU4NyxudWxsLFtbMCxbNjNdXV1dXSxbWzEzLDc2LCJQaHlzaWNzIiw1NjU2NDMyMjg5NTMzNDUsMCxudWxsLFtbNyxbMTFdXSxbNCwzNF0sWzAsWzJdXSxbMCxbMl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTU1NzA1ODkzMDc1OTMzLDExMCxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDIyMjI4NDc4NDAwODI4NyxudWxsLFtbMCxbNjRdXV1dXSxbWzEzLDc2LCJQaHlzaWNzIiw2Mjk2NDQxNjM4NTczOTIsMCxudWxsLFtbNyxbOV1dLFs0LDM0XSxbMCxbMl1dLFswLFsyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0Njk0MjAxNjk4NDk5MzIsMTExLFtbMjIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNjYzOTM2OTM4MzM5MTEwLG51bGwsW1swLFs2NV1dXV1dLFtbMTMsNzYsIlBoeXNpY3MiLDMyNzAyMTkzNTM1NjI4MSwwLG51bGwsW1s3LFs2XV0sWzQsMjJdLFswLFs2Nl1dLFswLFs5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwyNjgyMTA0NzU0MDAxMTEsMTEyLFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTA4Nzg4MzM5OTU0MzQ1LG51bGwsW1swLFs1NV1dXV1dLFtbMTMsNzYsIlBoeXNpY3MiLDk0NDY5OTMyNDE1MDc3OSwwLG51bGwsW1s3LFsxNV1dLFs0LDM1XSxbMCxbNjddXSxbMCxbNl1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4NzkwMDIxODE5NzUxODYsMTEzLFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMjc5ODk0MzU0NDk2MDg1LG51bGwsW1swLFs1OF1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsMzI0MzgwNDkxNjQwMzkzLDExNCxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDc4MjYwMjczODM0OTI0MCxudWxsLFtbMCxbNjhdXV1dXSxbWzEzLDc2LCJQaHlzaWNzIiw1Nzg4ODUzMDc0OTQ4MjksMCxudWxsLFtbNyxbMTFdXSxbNCwzNF0sWzAsWzY5XV0sWzAsWzM5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw2NTEyMjQ2NDQ2NzA4MTEsMTE1LFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTgwNzk1MDA2NzU0NzEwLG51bGwsW1swLFs3MF1dXV1dLFtbMTMsNzYsIlBoeXNpY3MiLDg3MDQxMzY5MjUzODAwNSwwLG51bGwsW1s3LFs5XV0sWzQsMzRdLFswLFs3MV1dLFswLFszOV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTgxMDU0NTQxMTIxNTg2LDExNixbWzIyLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDcyNDU5ODkxNTgyMjAwMyxudWxsLFtbMCxbNjFdXV1dXSxbWzEzLDc2LCJQaHlzaWNzIiw0NTQ1Nzk5MDgwMDI3MjMsMCxudWxsLFtbNyxbNl1dLFs0LDIyXSxbMCxbNjZdXSxbMCxbOV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNDQ0MjI0NTI3NTQwNzQxLDExNyxbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDg5NDY4MTUzNjQxNzk1NixudWxsLFtbMCxbNTldXV1dXSxbWzEzLDc2LCJQaHlzaWNzIiw4NTkzOTQxMjU0NDE1OTYsMCxudWxsLFtbNyxbMTVdXSxbNCwzNV0sWzAsWzY3XV0sWzAsWzZdXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjUyNjIwNjM3MzE0NDMwLDExOCxbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDk2MjE4NzYzMjIxNjMyNixudWxsLFtbMCxbMzRdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDYzNzYyNjg1MDQwNDE3MiwxMTksW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3MjE1MTM4NDU0NDkyOTcsbnVsbCxbWzAsWzcyXV1dXV0sW1sxMyw3NiwiUGh5c2ljcyIsNjI2NjY3MzUzNjQyMjIyLDAsbnVsbCxbWzcsWzExXV0sWzQsMzRdLFswLFs2OV1dLFswLFszOV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTcyMzAwMzA0MzAzMzc1LDEyMCxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDk3Mjk0NTA3ODkxOTY3MixudWxsLFtbMCxbNzNdXV1dXSxbWzEzLDc2LCJQaHlzaWNzIiwxMTAwMDczOTUxODg3NTksMCxudWxsLFtbNyxbOV1dLFs0LDM0XSxbMCxbNzFdXSxbMCxbMzldXV1dXV0sWzAsMCxmYWxzZSxudWxsLDMyNDY2NzUzMTUwODY4MCwxMjEsW1syMiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw1NDQ0MzQyMDM2MDEzMzEsbnVsbCxbWzAsWzYwXV1dXV0sW1sxMyw3NiwiUGh5c2ljcyIsNDIwNTU3NzQwODk0MjU4LDAsbnVsbCxbWzcsWzZdXSxbNCwyMl0sWzAsWzY2XV0sWzAsWzldXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc4MTQxMzc0NTU1MTQxOSwxMjIsW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw0MTA0OTQ3MjMwNDk3ODEsbnVsbCxbWzAsWzM5XV1dXV0sW1sxMyw3NiwiUGh5c2ljcyIsNjI5NTIyMTA1OTI1MTkwLDAsbnVsbCxbWzcsWzE1XV0sWzQsMzVdLFswLFs3NF1dLFswLFs3NV1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5MTAwNTU2MTgxNzAwMDQsMTIzLFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMzcwNzg2ODE0Mzk2MDQ2LG51bGwsW1swLFs0MV1dXV1dLFtbMTMsNzcsIlBoeXNpY3MiLDIzODAyMTUyNDA2MTc4MiwwLG51bGwsW1swLFs2MV1dXV1dLFtbMCwwLGZhbHNlLG51bGwsNjA0MDgwNDM3NTM2ODIyLDEyNCxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDczMzI4MDMzMTU0Mzc3MyxudWxsLFtbMCxbNzZdXV1dXSxbWzEzLDc2LCJQaHlzaWNzIiwzNjY4NjgwNTI3MzEyNzgsMCxudWxsLFtbNyxbMTFdXSxbNCwzNF0sWzAsWzJdXSxbMCxbMl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjUxMzkwMjY1ODc3Njg0LDEyNSxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDc3NDMwNjYzMjk1MzcyOSxudWxsLFtbMCxbNzddXV1dXSxbWzEzLDc2LCJQaHlzaWNzIiw1NTkxMzcxOTc5NTkyNzMsMCxudWxsLFtbNyxbOV1dLFs0LDM0XSxbMCxbMl1dLFswLFsyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw2NTcwMTk2OTgzMDQ0ODQsMTI2LFtbMjIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNjE4MzMxMzIwOTg2Nzg4LG51bGwsW1swLFs3OF1dXV1dLFtbMTMsNzYsIlBoeXNpY3MiLDUxOTQ4NDcxODI2MDc2NSwwLG51bGwsW1s3LFs2XV0sWzQsMjJdLFswLFs2Nl1dLFswLFs5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwyMjk5MTEyNTk5MjU5MDEsMTI3LFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTUxOTIxNDA4ODMxNDk2LG51bGwsW1swLFs0Ml1dXV1dLFtbMTMsNzYsIlBoeXNpY3MiLDEwNzQ0Mzg1Mjc5MjI0OCwwLG51bGwsW1s3LFsxNV1dLFs0LDM1XSxbMCxbNzRdXSxbMCxbNzVdXV1dXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc0MjgzNjQwMDU3MTA2MCwxMjgsW1sxNiw0OSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsODUyNjU0NjM3NTI0NzYyLG51bGwsW1sxMCwwXSxbOCwwXSxbNyxbMl1dXV0sWzE2LDc4LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3NjcwMDcyMjE3OTA3MzIsbnVsbCxbWzgsNV0sWzAsWzc5LFs0LDI4XV1dXV1dLFtbMTYsNzksbnVsbCwyMjI0ODE0ODIzNDA0NzMsMCxudWxsLFtbMCxbODAsWzQsMjldXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5OTIzNTI0MjQyNDYzMTksMTI5LFtbMTYsNDksbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDgyMDQ5NDU5ODkzNjM0NixudWxsLFtbMTAsMF0sWzgsMF0sWzcsWzgxXV1dXSxbMTYsNzgsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM1MjUyNTU0NjY2OTI0NCxudWxsLFtbOCwzXSxbMCxbODAsWzQsMjldXV1dXV0sW1sxNiw3OSxudWxsLDE0NDE3Njk5OTU2OTI4OSwwLG51bGwsW1swLFs3OSxbNCwyOF1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc4OTY4MjQ1NDMxNTcyMywxMzAsW1syOCwzMSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsODAzNDI3NTE0MTMzNjYzLG51bGwsW1sxMCwxXSxbOCwwXSxbNyxbMl1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsODk4ODI1OTQ4NDM5MzExLDEzMSxbWzI4LDMxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwzODE2MzU2ODk4NDE2MjMsbnVsbCxbWzEwLDJdLFs4LDBdLFs3LFs4Ml1dXV1dLFtbMTIsNzAsIlBoeXNpY3MiLDM1NzAzNDczODQzOTYwOSwwLG51bGwsW1swLFs2XV0sWzAsWzJdXSxbNyxbMl1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1MDAzOTg4NjI5MDg4OTMsMTMzLFtbMjgsMzEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDEwOTk2NzYxNDI0OTA4NixudWxsLFtbMTAsMV0sWzgsMF0sWzcsWzZdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDM5MTA1OTEwMzE4NTAzOSwxMzQsW1syOCwzMSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNDc3MzE4NzU5ODU4NjA2LG51bGwsW1sxMCwyXSxbOCwwXSxbNyxbODJdXV1dXSxbWzEyLDcwLCJQaHlzaWNzIiwyMjMzMjI0ODE5NDY2OTgsMCxudWxsLFtbMCxbNl1dLFswLFs4M11dLFs3LFsyXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDU4MDAyMDQ4MzgzMTY2NCwxMzYsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjAxMDQxNDc5NTQwNjcwLG51bGwsW1sxMSw0MTg5MDk0OTMxMDU3NjldLFs4LDBdLFs3LFsyXV1dXV0sW1stMSwyMixudWxsLDE0NzM1OTA0NDE3ODIxNywwLG51bGwsW1s1LFsxXV0sWzAsWzM2XV1dXV0sW1swLDAsZmFsc2UsbnVsbCw0NTE1MzcxNzM0MTg5MTIsMTM3LFtbMTQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNzk1MDE5NTcwNjE3NTU5LG51bGwsW1swLFs4Ml1dXV1dLFtbMTQsMzQsbnVsbCwyNTYwNDIwMDEzMTc1OTksMCxudWxsLFtbMywwXV1dXV0sWzAsMCxmYWxzZSxudWxsLDk3OTY0OTE2NTM0MzE3MSwxMzgsW1sxNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwzODMzMTc3MDYyMDYzODIsbnVsbCxbWzAsWzg0XV1dXV0sW1sxNCwzNCxudWxsLDQxOTA3NDQwMTA4OTMyOSwwLG51bGwsW1szLDBdXV1dXSxbMCwwLGZhbHNlLG51bGwsNzU1MTMxMDcwNDMwNTg4LDEzOSxbWy0xLDIxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw4NzM5NzA3NzM2MzgxMzksbnVsbF1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNDEwNDEzMzAxMzY3ODkxLDE0MCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwzMzg2MzE3NjE1MDgxOTcsbnVsbCxbWzExLDQ4ODU5NjYyMjc5NDYzOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzEsNjYsbnVsbCwxMDkzNTEyNzIxMjQ3MzgsMCxudWxsLFtbMixbInRpbWVyIixmYWxzZV1dLFszLDBdLFswLFsyXV0sWzAsWzJdXSxbMSxbMjRdXV1dLFstMSw3MixudWxsLDY4MDg1MTAzMDk5OTMxNywyLG51bGwsW1swLFs2XV1dXSxbMSw2NixudWxsLDczMDQ0NjczNzY5MjI3MywwLG51bGwsW1syLFsidGltZXIiLGZhbHNlXV0sWzMsMF0sWzAsWzJdXSxbMCxbMl1dLFsxLFsyNF1dXV0sWy0xLDcyLG51bGwsMTkzOTc4Mjk4MzE1MzkxLDIsbnVsbCxbWzAsWzZdXV1dLFsxLDY2LG51bGwsNTg5NjI3ODkzNTY3MjczLDAsbnVsbCxbWzIsWyJ0aW1lciIsZmFsc2VdXSxbMywwXSxbMCxbMl1dLFswLFsyXV0sWzEsWzI0XV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDkxMjU4NDc4Mzk2ODcxMiwxNDEsW1stMSwyMSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMzUzMDU4NTI3OTk1NTYyLG51bGxdXSxbWzM3LDM1LG51bGwsOTc0MzQ5NTU2MzA1MjM1LDAsbnVsbCxbWzAsWzcyXV1dXSxbLTEsNzIsbnVsbCwyMDkzNjk5NTQzNDU0MzIsMixudWxsLFtbMCxbNl1dXV0sWzM3LDM1LG51bGwsNzE4ODcyNzg5OTg0NTkxLDAsbnVsbCxbWzAsWzYwXV1dXSxbLTEsNzIsbnVsbCw1MDYwNjU5MzcyNjE5NTMsMixudWxsLFtbMCxbNl1dXV0sWzM3LDM1LG51bGwsODg5NzU4OTc2NDIzOTQyLDAsbnVsbCxbWzAsWzM0XV1dXSxbLTEsNzIsbnVsbCw2NDgwNTQ3ODcxMzg1MTAsMixudWxsLFtbMCxbNl1dXV1dLFtbMCwwLGZhbHNlLG51bGwsNTUzMTU5NTEyNjI0NzA4LDE0MixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyMTQxMTA1MDAyNjQyNDYsbnVsbCxbWzExLDQ1MTM2ODY4Mzk0NjY0OF0sWzgsMF0sWzcsWzJdXV1dXSxbWzM3LDM1LG51bGwsODk4MzY5OTg1ODA0ODUzLDAsbnVsbCxbWzAsWzldXV1dXSxbWzAsMCxmYWxzZSxudWxsLDQxODkyNzkwNzMzMzYzMSwxNDMsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjUxNTk4NDE1NDI1NzM3LG51bGwsW1sxMSw0ODg1OTY2MjI3OTQ2MzhdLFs4LDBdLFs3LFsyXV1dXV0sW1sxLDY2LG51bGwsNzM4Nzc5MDA5OTg2NDUwLDAsbnVsbCxbWzIsWyJnbzMiLGZhbHNlXV0sWzMsMF0sWzAsWzJdXSxbMCxbMl1dLFsxLFsyNF1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1OTgxNzI0Mzc4MzI1MzksMTQ0LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQ2NTE4NTEwODkwODI4NSxudWxsLFtbMTEsNDUxMzY4NjgzOTQ2NjQ4XSxbOCwwXSxbNyxbNl1dXV1dLFtbMzcsMzUsbnVsbCwzNDQ2MDUwMzc3NDI4MDMsMCxudWxsLFtbMCxbMTVdXV1dXSxbWzAsMCxmYWxzZSxudWxsLDQzOTMzNjkxNjM1MjI3MywxNDUsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzE5ODQ0NzM1NDM2Nzg5LG51bGwsW1sxMSw0ODg1OTY2MjI3OTQ2MzhdLFs4LDBdLFs3LFsyXV1dXV0sW1sxLDY2LG51bGwsODQ3NjcyMjMwODE1MjkwLDAsbnVsbCxbWzIsWyJnbzMiLGZhbHNlXV0sWzMsMF0sWzAsWzJdXSxbMCxbMl1dLFsxLFsyNF1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxNTk1NTM0Mzk4Nzk5ODgsMTQ2LFtdLFtbLTEsNzIsbnVsbCw4MDIwOTY3MTY3NjE0MzIsMixudWxsLFtbMCxbNl1dXV0sWy0xLDU5LG51bGwsNDgxMDMwMDc2ODE2MjAwLDAsbnVsbCxbWzExLDQxODkwOTQ5MzEwNTc2OV0sWzcsWzZdXV1dLFstMSw1OSxudWxsLDUyMjgwNDIyMjU4NDEzNCwwLG51bGwsW1sxMSwyODI3NDcwMDExMzIzNzddLFs3LFs2XV1dXSxbLTEsMjIsbnVsbCw4MjUyMDgzODk2NDA4MzIsMCxudWxsLFtbNSxbMV1dLFswLFsyXV1dXV0sW1swLDAsZmFsc2UsbnVsbCw4ODcyNTIwNTM3MTU4NTIsMTQ3LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDExNzUzMzY5NTIyMDA4OCxudWxsLFtbMTEsNDg4NTk2NjIyNzk0NjM4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMSw2NixudWxsLDQ3Njk2ODg3MjkyNDA3MSwwLG51bGwsW1syLFsic3BvcnRzIG11c2ljXzAyIixmYWxzZV1dLFszLDFdLFswLFs3MV1dLFswLFsyXV0sWzEsWzg1XV1dXV1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3MDA5MjM5OTg2MTQ1OTIsMTQ4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDY1MTMxMjQ5MjQ1OTA1NSxudWxsLFtbMTEsMTcyMjQxMjQwNzMxMTY2XSxbOCwwXSxbNyxbMTVdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDQzNTA2MzU5Njc3NjczMiwxNDksW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTk4MDgzMTg5Mzk5MzU1LG51bGwsW1sxMSw0NTEzNjg2ODM5NDY2NDhdLFs4LDBdLFs3LFs2XV1dXV0sW1stMSw1OSxudWxsLDQ0NTYzMjQ0NTEwNTUzNSwwLG51bGwsW1sxMSw4NTM4NDc2OTQ2NDAyMjNdLFs3LFs2XV1dXSxbLTEsNzIsbnVsbCwxNzg5NTY0NDUxNDYyNDIsMixudWxsLFtbMCxbMzddXV1dLFstMSw1OSxudWxsLDk5MTEwODk2OTEwOTA1NiwwLG51bGwsW1sxMSwyODI3NDcwMDExMzIzNzddLFs3LFsyXV1dXSxbLTEsMjIsbnVsbCw2NTU2NTE1ODM4NTI5OTUsMCxudWxsLFtbNSxbMV1dLFswLFszNl1dXV0sWzM3LDM1LG51bGwsMTA3ODA1MzY3MTQxMTEzLDAsbnVsbCxbWzAsWzExXV1dXSxbMTQsMzQsbnVsbCwyNzUwOTA2Nzk1OTkxNDQsMCxudWxsLFtbMywxXV1dXV0sWzAsMCxmYWxzZSxudWxsLDY0MzQ1Njk5ODI5MzI1NywxNTAsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzIwNDk1MjIzNzQ0NzUwLG51bGwsW1sxMSw0NTEzNjg2ODM5NDY2NDhdLFs4LDBdLFs3LFsyXV1dXV0sW1stMSw1OSxudWxsLDc4OTM0NzUwMjI3NTQ1OSwwLG51bGwsW1sxMSw4NTM4NDc2OTQ2NDAyMjNdLFs3LFs2XV1dXSxbLTEsNzIsbnVsbCw4ODk3NjQ0NzQzNjg1MzUsMixudWxsLFtbMCxbMzddXV1dLFstMSw1OSxudWxsLDM2NzI1ODI5NDIzMDk3OCwwLG51bGwsW1sxMSwyODI3NDcwMDExMzIzNzddLFs3LFsyXV1dXSxbLTEsMjIsbnVsbCwyNjE5NzUyODg1Mjg1NzksMCxudWxsLFtbNSxbMV1dLFswLFszNl1dXV0sWzM3LDM1LG51bGwsNzcxNzExMDUxNzEyNzkzLDAsbnVsbCxbWzAsWzZdXV1dLFsxNCwzNCxudWxsLDYzMjEwNTE4MTkxMjM0MiwwLG51bGwsW1szLDFdXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzNDk5MTA5MzI0MzMyNjcsMTUxLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDc3OTA3Nzc3MzU5NDk5MCxudWxsLFtbMTEsNzY4MzEyMjE2Njg2MzgxXSxbOCwwXSxbNyxbMTVdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDg5NzE4MTgwNzE4NTU0MywxNTIsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjYwNzEwNjU1MzIxMDI5LG51bGwsW1sxMSw0NTEzNjg2ODM5NDY2NDhdLFs4LDBdLFs3LFs2XV1dXV0sW1stMSw1OSxudWxsLDk5MTMxNDYwNTM4NjkwNCwwLG51bGwsW1sxMSw4NTM4NDc2OTQ2NDAyMjNdLFs3LFs2XV1dXSxbLTEsNzIsbnVsbCwxMDI1NzgxMjAwMDA2OTksMixudWxsLFtbMCxbMzddXV1dLFstMSw1OSxudWxsLDUzMjY3NTc4ODQ5NjE3NCwwLG51bGwsW1sxMSwyODI3NDcwMDExMzIzNzddLFs3LFsyXV1dXSxbLTEsMjIsbnVsbCw1MzMyODcyNjU2NzY2ODEsMCxudWxsLFtbNSxbMV1dLFswLFszNl1dXV0sWzM3LDM1LG51bGwsMjA5OTU1MzI1Mjg3MDMwLDAsbnVsbCxbWzAsWzEzXV1dXSxbMTQsMzQsbnVsbCwzNDk5MTEwNjI4NDY0NjQsMCxudWxsLFtbMywxXV1dXV0sWzAsMCxmYWxzZSxudWxsLDcwNDMxMTE4OTY3NDAzNywxNTMsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMzQ5MDc4NTIyMDcyMDQ5LG51bGwsW1sxMSw0NTEzNjg2ODM5NDY2NDhdLFs4LDBdLFs3LFsyXV1dXV0sW1stMSw1OSxudWxsLDU2MjM3NzA0OTcwNzIwOSwwLG51bGwsW1sxMSw4NTM4NDc2OTQ2NDAyMjNdLFs3LFs2XV1dXSxbLTEsNzIsbnVsbCw2MjY0MzkzMjg0NzA2NTksMixudWxsLFtbMCxbMzddXV1dLFstMSw1OSxudWxsLDU2NTc2Nzc5NDMzNDY5NCwwLG51bGwsW1sxMSwyODI3NDcwMDExMzIzNzddLFs3LFsyXV1dXSxbLTEsMjIsbnVsbCw4MjE0MzU2MTkxMTQwOTAsMCxudWxsLFtbNSxbMV1dLFswLFszNl1dXV0sWzM3LDM1LG51bGwsNjYzOTM4MDExNDgzNDExLDAsbnVsbCxbWzAsWzJdXV1dLFsxNCwzNCxudWxsLDgxMDQyMTg1MTExMjE5MSwwLG51bGwsW1szLDFdXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw2NzMzMDIwNTI3MzMwNjQsMTU0LFtbNyw4MCxudWxsLDEsZmFsc2UsZmFsc2UsZmFsc2UsNDI0NTA0MjUwNjE4MzkyLG51bGxdLFs3LDgxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3NjQ0MzMxOTI4OTIyODcsbnVsbCxbWzQsMTRdXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsOTQ2NTE0ODIwMjkwNDEzLDE1NSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3MTgyNjIwMDA2ODg3NTMsbnVsbCxbWzExLDg1Mzg0NzY5NDY0MDIyM10sWzgsMF0sWzcsWzZdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDI4NzA2MjUwOTY2ODk0NywxNTYsW1sxNCw4MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMzU0NzM3MjgyNjYxODU1LG51bGwsW1s4LDBdLFswLFsyXV1dXV0sW1sxNCwyMyxudWxsLDk0MjU1NzE2ODk4MDY0MCwwLG51bGwsW1szLDFdLFsxLFszXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3MTUwOTA2Mzk2ODk0MTQsMTU3LFtbMTQsODIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQ4ODkxMzExMTg0MDkwMSxudWxsLFtbOCwwXSxbMCxbNl1dXV1dLFtbMTQsMjMsbnVsbCw3NDkyNjIzMDAyNTQ0MjEsMCxudWxsLFtbMywxXSxbMSxbM11dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5MzUzMjUxMzQ2MzA2MjAsMTU4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLHRydWUsZmFsc2UsNTU3MzQ1MzQ2NDg5NTMzLG51bGwsW1sxMSw4NTM4NDc2OTQ2NDAyMjNdLFs4LDBdLFs3LFs2XV1dXSxbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDIyNTY0ODI5NzEwOTc3OSxudWxsLFtbMTEsMjgyNzQ3MDAxMTMyMzc3XSxbOCwwXSxbNyxbNl1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsODkwMDQ5NzUyNjUxODE3LDE1OSxbWzE0LDgyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyNDUyNDIwOTkzNTU5NzgsbnVsbCxbWzgsMF0sWzAsWzEzXV1dXV0sW1sxNCwyMyxudWxsLDc3NzQ1OTg2MjQyOTQ3MywwLG51bGwsW1szLDFdLFsxLFszXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0MjU0Nzg1NzI1MjA3NzIsMTYwLFtbMTQsODIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDUyNjM1NTUzMjY4NTA1OCxudWxsLFtbOCwwXSxbMCxbMl1dXV1dLFtbMTQsMjMsbnVsbCw5Mzc2NjA3NjU2MTQ3NzQsMCxudWxsLFtbMywxXSxbMSxbM11dXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDgxODkwNjM4NjkxNjI1OSwxNjEsW1s3LDgzLG51bGwsMSxmYWxzZSxmYWxzZSxmYWxzZSw1MTA0MDY0ODY2NDcwNTAsbnVsbF0sWzcsODEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDg2NDQzMzM1NTg1MTMzNSxudWxsLFtbNCwxNF1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw2MTkxNTQyMTE5MjQ3OTksMTYyLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQ1ODE3Njc2MjAzMTYzNSxudWxsLFtbMTEsODUzODQ3Njk0NjQwMjIzXSxbOCwwXSxbNyxbNl1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsODQ4OTY2NTkzMTgyNzg4LDE2MyxbWzE0LDgyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwzNTg2MDQ4MDg0MDE5OTcsbnVsbCxbWzgsMF0sWzAsWzZdXV1dXSxbWzMsODQsbnVsbCw2NzYxMzQ4NjczMTczOTEsMSxudWxsXSxbLTEsNzIsbnVsbCw3MTgzOTg2MTQ3MDc0NjksMixudWxsLFtbMCxbNTZdXV1dLFstMiwibmV3Z2FtZSIsbnVsbCw4MjA3MTc3MTAyNTUxNjQsMCxudWxsXV1dLFswLDAsZmFsc2UsbnVsbCw5OTYwMTg0NTM1MTY3NjIsMTY0LFtbMTQsODIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQwODQ5NDQwNTkyMDIwNyxudWxsLFtbOCwwXSxbMCxbMl1dXV1dLFtbMyw4NCxudWxsLDM2OTE4Mzc0ODU5MDgyNywxLG51bGxdLFstMSw3MixudWxsLDU4MjQzMDk1MDU4ODg0NiwyLG51bGwsW1swLFs1Nl1dXV0sWy0xLDg1LG51bGwsMTczOTYzOTM2ODkzNTAxLDAsbnVsbCxbWzYsIm1haW5tZW51Il1dXSxbMSw4NixudWxsLDE4NzEzODY1Mjc0NTkzNCwwLG51bGwsW1sxLFs4NV1dXV0sWy0yLCJuZXdnYW1lIixudWxsLDk3Nzg3NTEzMjM2ODM1NiwwLG51bGxdXV1dXSxbMCwwLGZhbHNlLG51bGwsNTU3NDQ3MTY4ODA2NTAyLDE2NSxbWy0xLDMyLG51bGwsMCxmYWxzZSx0cnVlLGZhbHNlLDk3MzI4MDU5ODU2MTI5MSxudWxsLFtbMTEsODUzODQ3Njk0NjQwMjIzXSxbOCwwXSxbNyxbNl1dXV0sWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3Njk3OTExNjE0NzA5MDQsbnVsbCxbWzExLDI4Mjc0NzAwMTEzMjM3N10sWzgsMF0sWzcsWzZdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDYxODk2MzYyMDg1NDE1NSwxNjYsW1sxNCw4MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMzM3NzU0ODQ5MjMxNTIxLG51bGwsW1s4LDBdLFswLFsxM11dXV1dLFtbLTEsNTksbnVsbCw1MDcxMzQzMzEyNTA0MzQsMCxudWxsLFtbMTEsNjE1MDI3NjUwODU5MjIwXSxbNyxbMl1dXV0sWy0xLDczLG51bGwsMTMyMTE1NzA5MjYwNzIzLDAsbnVsbF1dXSxbMCwwLGZhbHNlLG51bGwsMTM0MTQwNzg2Nzc5MDI5LDE2NyxbWzE0LDgyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3Njk5MDI0MDI3NDA2MTUsbnVsbCxbWzgsMF0sWzAsWzJdXV1dXSxbWy0xLDg1LG51bGwsMzk3MzQ2Nzk2OTYxMTE2LDAsbnVsbCxbWzYsIm1haW5tZW51Il1dXSxbLTIsIm5ld2dhbWUiLG51bGwsMzQ0NTE4MjkxNDcwMzIyLDAsbnVsbF0sWzEsODYsbnVsbCw4NjE2MDMyNzYxMzgzMDEsMCxudWxsLFtbMSxbODVdXV1dLFstMSw1OSxudWxsLDEyNzY1MDI5NjQ2Mjc4NCwwLG51bGwsW1sxMSwyODI3NDcwMDExMzIzNzddLFs3LFsyXV1dXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTE3NTg2NTQxMjEyNjU1LDE2OCxbWzcsODMsbnVsbCwxLGZhbHNlLGZhbHNlLGZhbHNlLDEzNTUyMzYzMjY0ODY3NSxudWxsXV0sW1sxNCwyMyxudWxsLDcyMzU3MzMzNzUyODM3OCwwLG51bGwsW1szLDBdLFsxLFszXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxMDk3Nzc0NzczNjM1MDksMTY5LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDU5ODQ3MTMyODczNTM2OCxudWxsLFtbMTEsMjgyNzQ3MDAxMTMyMzc3XSxbOCwwXSxbNyxbNl1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNDA3MDAxNzA1MDAyNDgwLDE3MCxbWy0xLDIxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1MzU5NTk1ODE1OTA5OTMsbnVsbF1dLFtbLTEsNTksbnVsbCwyMTE0NTA0ODMwMjM0OTAsMCxudWxsLFtbMTEsODc0OTI1NzEzODE0MDc2XSxbNyxbODYsWzQsODddXV1dXSxbLTEsNTksbnVsbCw0NzQzODY2NzMxMTc2MTUsMCxudWxsLFtbMTEsMzc1NjM4NTY3MDc4MTA4XSxbNyxbODcsWzQsODddXV1dXSxbLTEsNTksbnVsbCw1MjAwNDY4NDY1NzY2OTcsMCxudWxsLFtbMTEsNjc3ODMyNjA5MzQzMTgxXSxbNyxbODgsWzQsODddXV1dXSxbLTEsNTksbnVsbCw2ODE5MjU2OTE0MDk4NTMsMCxudWxsLFtbMTEsNzM1Nzc4NjMzNDk0ODYzXSxbNyxbODksWzQsODddXV1dXSxbLTEsNTksbnVsbCw3NDQ3MTQ3NDg4MDEyMjgsMCxudWxsLFtbMTEsNTYxMjUwNzQwNjA2OTk1XSxbNyxbOTAsWzQsODddXV1dXSxbLTEsNTksbnVsbCw0NzY0MTk0NjIzMTg5MjYsMCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbNyxbOTEsWzQsODddXV1dXSxbLTEsNTksbnVsbCwyMTIzNzg3MzYyMTA5MTIsMCxudWxsLFtbMTEsMjg0OTI3OTQ2MzIzMDk1XSxbNyxbODksWzQsODddXV1dXV0sW1swLDAsZmFsc2UsbnVsbCwxMTMwMDUyNTMwNTkwNTIsMTcxLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDIwODcyMDgzNzkyODAyOSxudWxsLFtbMTEsNzM1Nzc4NjMzNDk0ODYzXSxbOCwwXSxbNyxbMl1dXV0sWzMxLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDM2MzExNTA2OTgxNzM1MCxudWxsLFtbMCxbOTJdXV1dXSxbWzMxLDg4LG51bGwsMjcyNjAwMTg5OTcwNDY4LDI1OSxudWxsLFtbNCwxMl0sWzUsWzIyXV0sWzcsWzJdXSxbMTYsZmFsc2VdXV0sWzEyLDg5LG51bGwsODY1ODEyNTE2NzE1NjQ3LDAsbnVsbCxbWzMsMV0sWzQsMzZdXV1dLFtbMCwwLGZhbHNlLG51bGwsMTY2OTE0MTA1NzEyNjM0LDE3MixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyMTMwNDQyMzM2NzM0NDgsbnVsbCxbWzExLDU2MTI1MDc0MDYwNjk5NV0sWzgsMF0sWzcsWzJdXV1dXSxbWzEyLDM1LG51bGwsNjY1ODI3NjQ4NDQ1NTgzLDAsbnVsbCxbWzAsWzJdXV1dLFsxMiw5MCwiUGh5c2ljcyIsNDU1MDE5ODE1MjgzODI1LDAsbnVsbCxbWzAsWzM3XV1dXSxbMTIsOTEsIlBoeXNpY3MiLDU4MDYwMjQzNDE5MTIwMiwwLG51bGwsW1swLFs5M11dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzAxNzI4OTM4OTE5Mjc1LDE3MyxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5Nzk3Mjc5MzM2NzY2NzMsbnVsbCxbWzExLDU2MTI1MDc0MDYwNjk5NV0sWzgsMF0sWzcsWzZdXV1dXSxbWzEyLDM1LG51bGwsNjc5NzExNzkyMjkwNjYwLDAsbnVsbCxbWzAsWzZdXV1dLFsxMiw5MCwiUGh5c2ljcyIsNDYwODYyMTU2NTQzNTMxLDAsbnVsbCxbWzAsWzk0XV1dXSxbMTIsOTEsIlBoeXNpY3MiLDIyNDQ1MjQyMjY0Mzc3NSwwLG51bGwsW1swLFs5NV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjk5MTI5MzA4MTAxNTgxLDE3NCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2MDE3ODQzNTg2MjI3NzAsbnVsbCxbWzExLDU2MTI1MDc0MDYwNjk5NV0sWzgsMF0sWzcsWzEzXV1dXV0sW1sxMiwzNSxudWxsLDM1NTI0MDk2OTUxOTQ3NiwwLG51bGwsW1swLFsxM11dXV0sWzEyLDkwLCJQaHlzaWNzIiwxMjE3MTc3NjAwOTk3MzcsMCxudWxsLFtbMCxbOTZdXV1dLFsxMiw5MSwiUGh5c2ljcyIsMjM0NDk0NDA2MzA4MjcxLDAsbnVsbCxbWzAsWzkzXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzNDI2ODQ3NTM1Njc1NzEsMTc1LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDUxNjE1NzEzMjM5OTA3NCxudWxsLFtbMTEsNTYxMjUwNzQwNjA2OTk1XSxbOCwwXSxbNyxbMTFdXV1dXSxbWzEyLDM1LG51bGwsODE5MjE4ODA1OTI4Nzk5LDAsbnVsbCxbWzAsWzExXV1dXSxbMTIsOTAsIlBoeXNpY3MiLDQ3OTA2MzQ2OTYwNTIwNywwLG51bGwsW1swLFszN11dXV0sWzEyLDkxLCJQaHlzaWNzIiw3MjYyMDU5MDUyOTM0MjksMCxudWxsLFtbMCxbOTddXV1dXV0sWzAsMCxmYWxzZSxudWxsLDM3MDU1NDU2NDY5NDcxNywxNzYsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjk1OTIzNjYzODI3MTc5LG51bGwsW1sxMSw1NjEyNTA3NDA2MDY5OTVdLFs4LDBdLFs3LFs5XV1dXV0sW1sxMiwzNSxudWxsLDY1OTEyODY2MTgxNDI2NSwwLG51bGwsW1swLFs5XV1dXSxbMTIsOTAsIlBoeXNpY3MiLDE2MTA1MjI1NzE2NzMxOSwwLG51bGwsW1swLFszN11dXV0sWzEyLDkxLCJQaHlzaWNzIiwzODM5ODE2MjU5MTQzNTYsMCxudWxsLFtbMCxbOTRdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDYwNDQ4OTcyODU2MzExOSwxNzcsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjIxNzY3OTk4ODg4MTIwLG51bGwsW1sxMSw1NjEyNTA3NDA2MDY5OTVdLFs4LDBdLFs3LFsxNV1dXV1dLFtbMTIsMzUsbnVsbCw3MzgzMjY5Njg0NTkzNjAsMCxudWxsLFtbMCxbMTVdXV1dLFsxMiw5MCwiUGh5c2ljcyIsMjQ4NTc5ODE3Mjg4MzM4LDAsbnVsbCxbWzAsWzk4XV1dXSxbMTIsOTEsIlBoeXNpY3MiLDIzNTM3NTE2NDEyOTA0MSwwLG51bGwsW1swLFs5M11dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxNTU3NTQ5MDU3NjczMTUsMTc4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDc1MTE5MzAzMDY0NjYyNyxudWxsLFtbMTEsNzM1Nzc4NjMzNDk0ODYzXSxbOCwwXSxbNyxbNl1dXV0sWzMxLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDM2Mzc2NTg0Nzc1OTA4MCxudWxsLFtbMCxbOTldXV1dXSxbWzMxLDg4LG51bGwsMTM3ODI5NDM3MTE1NjM3LDI1OSxudWxsLFtbNCwxMl0sWzUsWzIyXV0sWzcsWzJdXSxbMTYsZmFsc2VdXV0sWzEyLDg5LG51bGwsNTEwNDY2ODI2ODEyNzEzLDAsbnVsbCxbWzMsMV0sWzQsMzZdXV1dLFtbMCwwLGZhbHNlLG51bGwsODg4NDMzODE4OTEyMzM1LDE3OSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3NDU5NzQzNDMyMTUxMDIsbnVsbCxbWzExLDU2MTI1MDc0MDYwNjk5NV0sWzgsMF0sWzcsWzJdXV1dXSxbWzEyLDM1LG51bGwsMjgxNjMyNjY1MjE3MjI3LDAsbnVsbCxbWzAsWzJdXV1dLFsxMiw5MCwiUGh5c2ljcyIsNDU0MTc4NDAzMjQzODU0LDAsbnVsbCxbWzAsWzM3XV1dXSxbMTIsOTEsIlBoeXNpY3MiLDgyNTkwMDcwNzQyNDE5OSwwLG51bGwsW1swLFs5M11dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjQ3MDM2OTAxMDM3ODc3LDE4MCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw4NjcyODEzMTU0NzkzNDcsbnVsbCxbWzExLDU2MTI1MDc0MDYwNjk5NV0sWzgsMF0sWzcsWzZdXV1dXSxbWzEyLDM1LG51bGwsODc1NTYwNDcyODUyOTIzLDAsbnVsbCxbWzAsWzZdXV1dLFsxMiw5MCwiUGh5c2ljcyIsOTIxMDI3NDI5Mjk5MjM2LDAsbnVsbCxbWzAsWzk0XV1dXSxbMTIsOTEsIlBoeXNpY3MiLDU1NTk0MTQxNDc0NjU4MiwwLG51bGwsW1swLFs5NV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODc1MzY4NDI0NzQ1NjY2LDE4MSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3NzY4MTMwMTYyNDYzMTQsbnVsbCxbWzExLDU2MTI1MDc0MDYwNjk5NV0sWzgsMF0sWzcsWzEzXV1dXV0sW1sxMiwzNSxudWxsLDk1NDA0MzIxMjI4MTI0NywwLG51bGwsW1swLFsxM11dXV0sWzEyLDkwLCJQaHlzaWNzIiw5MzM0MjEzNDg2MDU2OTAsMCxudWxsLFtbMCxbOTZdXV1dLFsxMiw5MSwiUGh5c2ljcyIsMTA2Mjc4MzM3MzI3NzE1LDAsbnVsbCxbWzAsWzkzXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1NTU3NjYzMTg4Mjk4NzksMTgyLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDU1NzM2MzIyMjM4NjA5MixudWxsLFtbMTEsNTYxMjUwNzQwNjA2OTk1XSxbOCwwXSxbNyxbMTFdXV1dXSxbWzEyLDM1LG51bGwsODQzNzA5OTA4MTE0OTgwLDAsbnVsbCxbWzAsWzExXV1dXSxbMTIsOTAsIlBoeXNpY3MiLDk1MzkyOTY5NjE2MTcxNSwwLG51bGwsW1swLFszN11dXV0sWzEyLDkxLCJQaHlzaWNzIiw3NTM5MDUzMzcwODU5MDAsMCxudWxsLFtbMCxbOTddXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQ4OTQ2NjUwNjA0NDg2MiwxODMsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjc1MzY4NDQwNjIxMjU3LG51bGwsW1sxMSw1NjEyNTA3NDA2MDY5OTVdLFs4LDBdLFs3LFs5XV1dXV0sW1sxMiwzNSxudWxsLDYyNDUyNTMzMTUxNjY1OSwwLG51bGwsW1swLFs5XV1dXSxbMTIsOTAsIlBoeXNpY3MiLDI1NzEzNjQ1NDgxMDE2OSwwLG51bGwsW1swLFszN11dXV0sWzEyLDkxLCJQaHlzaWNzIiwzODIxNTc1NjUwNzQ5ODUsMCxudWxsLFtbMCxbOTRdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDE3OTQxODQ3NjY3MDg3NSwxODQsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNDAwOTA0NDE4NzI4NjcxLG51bGwsW1sxMSw1NjEyNTA3NDA2MDY5OTVdLFs4LDBdLFs3LFsxNV1dXV1dLFtbMTIsMzUsbnVsbCw1MTYxNjAxODQ4OTg1MTgsMCxudWxsLFtbMCxbMTVdXV1dLFsxMiw5MCwiUGh5c2ljcyIsNzIzNTAzMzU1MTQ2OTcyLDAsbnVsbCxbWzAsWzk4XV1dXSxbMTIsOTEsIlBoeXNpY3MiLDY1ODYzMDU1MjcxODAwMiwwLG51bGwsW1swLFs5M11dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzNDM5NTU2NDY2NDQzNzcsMTg1LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQ3OTY3ODg2NTcyMTEzNCxudWxsLFtbMTEsNjc3ODMyNjA5MzQzMTgxXSxbOCwwXSxbNyxbMl1dXV1dLFtbMjksMzQsbnVsbCwyNDk1Nzg5NDUzNzg3MDUsMCxudWxsLFtbMywxXV1dLFsyOSwzNSxudWxsLDc0OTM3NDMyNTUwNzIzOCwwLG51bGwsW1swLFsyXV1dXSxbOCw5MixudWxsLDgyNDY1MDA3NTc3MDkxOCwwLG51bGwsW1szLDFdXV0sWzksOTIsbnVsbCw4OTYzMjc4MjUwMDQ0MDQsMCxudWxsLFtbMywwXV1dLFsxMCw5MixudWxsLDk1NDc0OTMyNjQ5ODQxNSwwLG51bGwsW1szLDBdXV0sWzExLDkyLG51bGwsOTkwNzU5NTc1MjY4NjIzLDAsbnVsbCxbWzMsMF1dXSxbMTgsOTIsbnVsbCw0MjAzMzkwNjcwOTgzMTYsMCxudWxsLFtbMywxXV1dLFsxOCw5MywiUGh5c2ljcyIsMjMzMTMwMTI0MDEzOTczLDAsbnVsbCxbWzAsWzM3XV1dXSxbMTksOTIsbnVsbCwyMzQ1MTg2MDQyNjMyNzUsMCxudWxsLFtbMywwXV1dLFsyMCw5MixudWxsLDM0MzE1NDc0MzI0NjcwMCwwLG51bGwsW1szLDBdXV0sWzIxLDkyLG51bGwsMTA2NDI1OTE5OTgyNjMzLDAsbnVsbCxbWzMsMF1dXSxbMTYsMzQsbnVsbCw4MDgwMTE5ODQwNDkyMjUsMCxudWxsLFtbMywxXV1dLFsxNiw5NCxudWxsLDc4NTM0NTc2NDY3NTM1OSwwLG51bGwsW1sxLFsxMDBdXSxbMywwXV1dLFsxNiw5NSwiQnVsbGV0Iiw0Mzg0MTMzOTQ3Nzg0NTYsMCxudWxsLFtbMCxbMzldXV1dLFsyNywyNixudWxsLDUyNDc4NDk4NjgzMTM4MSwwLG51bGwsW1szLDBdXV0sWzI4LDI2LG51bGwsNjYyMDc4ODI2NjM2MzU1LDAsbnVsbCxbWzMsMF1dXSxbLTEsNTksbnVsbCwxNzUxNTg3NDcwNjgxODQsMCxudWxsLFtbMTEsMTUyNjM1NTI4MjI2ODIxXSxbNyxbNjFdXV1dLFsxMyw3NywiUGh5c2ljcyIsNTMyMjA4Nzg4ODI4MjMxLDAsbnVsbCxbWzAsWzQzLFszLDE1MjYzNTUyODIyNjgyMV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDE2NDczNzM3OTAwMDI1NiwxODYsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNDYzOTA1MzcwNTk5NzIwLG51bGwsW1sxMSw2Nzc4MzI2MDkzNDMxODFdLFs4LDBdLFs3LFs2XV1dXV0sW1syOSwzNCxudWxsLDEyMzE2MDI0OTczMzE2OCwwLG51bGwsW1szLDFdXV0sWzI5LDM1LG51bGwsMjE1MTQxMDUzMDYzMTc5LDAsbnVsbCxbWzAsWzZdXV1dLFs4LDkyLG51bGwsNjc0NDc1NDMzODE3NjEwLDAsbnVsbCxbWzMsMF1dXSxbOSw5MixudWxsLDkyODQ5ODQ4OTE1MjI0OCwwLG51bGwsW1szLDFdXV0sWzEwLDkyLG51bGwsMjQxOTkzMzY1NTA3ODc4LDAsbnVsbCxbWzMsMF1dXSxbMTEsOTIsbnVsbCwzMzIzMTI2ODY4OTM0NjMsMCxudWxsLFtbMywwXV1dLFsxOCw5MixudWxsLDg1NTI1Mjk3MDkyMDI1NCwwLG51bGwsW1szLDBdXV0sWzE4LDkzLCJQaHlzaWNzIiw1OTcxODgzNjA0NjkxNzMsMCxudWxsLFtbMCxbMzddXV1dLFsxOSw5MixudWxsLDE4MzQ2MDAxMjA1MTM3MywwLG51bGwsW1szLDFdXV0sWzIwLDkyLG51bGwsODY0MjM2NDYwOTIyMDU2LDAsbnVsbCxbWzMsMF1dXSxbMjEsOTIsbnVsbCwzMzA1NTg1NDMwNjUxNjAsMCxudWxsLFtbMywwXV1dLFsxNiwzNCxudWxsLDgzOTU5MDM0MTc2NDY4NywwLG51bGwsW1szLDFdXV0sWzE2LDk0LG51bGwsMzkyNjg3OTQ2OTcyMjI2LDAsbnVsbCxbWzEsWzEwMV1dLFszLDBdXV0sWzE2LDk1LCJCdWxsZXQiLDY5MTYzODAzNjQ0MTQzMiwwLG51bGwsW1swLFszOV1dXV0sWzI3LDI2LG51bGwsNTc1NDY3OTMwNjU1ODYzLDAsbnVsbCxbWzMsMF1dXSxbMjgsMjYsbnVsbCwyNzg4NjgzMzIwMjgzOTAsMCxudWxsLFtbMywwXV1dLFstMSw1OSxudWxsLDg4MDQ4Mjc2NDY5MTQ3NiwwLG51bGwsW1sxMSwxNTI2MzU1MjgyMjY4MjFdLFs3LFs2MV1dXV0sWzEzLDc3LCJQaHlzaWNzIiw3ODY3MTUzOTIyODg5NjYsMCxudWxsLFtbMCxbNDMsWzMsMTUyNjM1NTI4MjI2ODIxXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzUwMjAwNDU3MDU2OTgxLDE4NyxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyMDA0MTg5ODk4NDE5OTEsbnVsbCxbWzExLDY3NzgzMjYwOTM0MzE4MV0sWzgsMF0sWzcsWzEzXV1dXV0sW1syOSwzNCxudWxsLDU3ODMwMTY3OTI0NjE5NiwwLG51bGwsW1szLDBdXV0sWzgsOTIsbnVsbCw1MTcyNDYzMDIxODQ2NDUsMCxudWxsLFtbMywwXV1dLFs5LDkyLG51bGwsNzU5MDgzNjg1MDE2MzEzLDAsbnVsbCxbWzMsMF1dXSxbMTAsOTIsbnVsbCw5Mjg0MDI3NTg1OTI0NTQsMCxudWxsLFtbMywxXV1dLFsxMSw5MixudWxsLDQwMTc2NjE5MTkwMzI0NywwLG51bGwsW1szLDBdXV0sWzE4LDkyLG51bGwsODM0MTMwNjUxNjIxMDE4LDAsbnVsbCxbWzMsMF1dXSxbMTgsOTMsIlBoeXNpY3MiLDc0NjE0Nzg0NzM0ODA1MiwwLG51bGwsW1swLFsxMDJdXV1dLFsxOSw5MixudWxsLDc2MTQzNTkzNzQxMjEzNiwwLG51bGwsW1szLDBdXV0sWzIwLDkyLG51bGwsMzcxMDUzOTI3NjYzMjY1LDAsbnVsbCxbWzMsMV1dXSxbMjEsOTIsbnVsbCwyNDAxMTM2OTUzMTY3NzYsMCxudWxsLFtbMywwXV1dLFsxNiwzNCxudWxsLDY3Mzc1NjIxMjI4ODg1NywwLG51bGwsW1szLDBdXV0sWzI3LDI2LG51bGwsMTI4MzQ2NTI4MjM0ODY0LDAsbnVsbCxbWzMsMV1dXSxbMjgsMjYsbnVsbCw4MjYyODg3MjY1ODYzMjQsMCxudWxsLFtbMywwXV1dLFstMSw1OSxudWxsLDUyMDAzMjg2ODU5NTcyOSwwLG51bGwsW1sxMSwxNTI2MzU1MjgyMjY4MjFdLFs3LFs2MV1dXV0sWzEzLDc3LCJQaHlzaWNzIiw4OTk3NjA2NzU2MjgyNjYsMCxudWxsLFtbMCxbNDMsWzMsMTUyNjM1NTI4MjI2ODIxXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNjk2OTAxMjc4NzA0MzAzLDE4OCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5MjExNDk5MTc2NDkwNzcsbnVsbCxbWzExLDY3NzgzMjYwOTM0MzE4MV0sWzgsMF0sWzcsWzExXV1dXV0sW1syOSwzNCxudWxsLDg3NzI2NjM3MjQzMDEyNCwwLG51bGwsW1szLDFdXV0sWzI5LDM1LG51bGwsNzcyNDU2MzA1MzE3OTQwLDAsbnVsbCxbWzAsWzJdXV1dLFs4LDkyLG51bGwsOTI5OTIxMTk4MTA0NTQ1LDAsbnVsbCxbWzMsMV1dXSxbOSw5MixudWxsLDY1OTE5MjcyMjc4MzkwNiwwLG51bGwsW1szLDBdXV0sWzEwLDkyLG51bGwsMzc5NTY1ODIzNDUwMDU1LDAsbnVsbCxbWzMsMF1dXSxbMTEsOTIsbnVsbCw0NDE0NzM3OTk3NjM4MjcsMCxudWxsLFtbMywwXV1dLFsxOCw5MixudWxsLDIxMjY2ODM5MTc0MzA1MiwwLG51bGwsW1szLDFdXV0sWzE4LDkzLCJQaHlzaWNzIiwyNTAwNTUxNDM0NjY3ODMsMCxudWxsLFtbMCxbMzddXV1dLFsxOSw5MixudWxsLDgzMjY5NTMwNTE3OTA3OSwwLG51bGwsW1szLDBdXV0sWzIwLDkyLG51bGwsNjY0MzM3OTUyMzcxODQyLDAsbnVsbCxbWzMsMF1dXSxbMjEsOTIsbnVsbCwxNTE5OTA1NDA4MDE0NTMsMCxudWxsLFtbMywwXV1dLFsxNiwzNCxudWxsLDcwOTA2OTUxNzc3MjY2MSwwLG51bGwsW1szLDFdXV0sWzI3LDI2LG51bGwsNDQzNjExODMxNzA4MzQ0LDAsbnVsbCxbWzMsMF1dXSxbMjgsMjYsbnVsbCw2OTI1ODcyMTYzMTMzOTIsMCxudWxsLFtbMywwXV1dLFsyOCw5NixudWxsLDEzMzM5NTA3MTMyNzQ3NCwwLG51bGwsW1sxMCwxXSxbNyxbNzRdXV1dLFsyOCw5NixudWxsLDI5ODMzODM1MzkxMTI3OCwwLG51bGwsW1sxMCwyXSxbNyxbODJdXV1dLFsyOCw5NixudWxsLDI0MjQxMDk0ODc0NTE3OSwwLG51bGwsW1sxMCwxXSxbNyxbNDMsWzMsMjg0OTI3OTQ2MzIzMDk1XV1dXV0sWy0xLDU5LG51bGwsMjg4MjE4OTA3NTQ2ODcyLDAsbnVsbCxbWzExLDE1MjYzNTUyODIyNjgyMV0sWzcsWzYxXV1dXSxbMTMsNzcsIlBoeXNpY3MiLDM3MDMyMzcxOTg0MzEyNCwwLG51bGwsW1swLFs0MyxbMywxNTI2MzU1MjgyMjY4MjFdXV1dXV0sW1swLDAsZmFsc2UsbnVsbCw2NTY3MjUyMTgwNjMxMDUsMTg5LFtbMjgsMzEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDkyMjc5NDE2MTIxNzg1MSxudWxsLFtbMTAsMV0sWzgsMF0sWzcsWzJdXV1dLFsyOCwzMSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNDk1NjI2NTIzNTY1NzI3LG51bGwsW1sxMCwwXSxbOCwwXSxbNyxbMl1dXV1dLFtbMjgsMjYsbnVsbCw4NjQ3NTcwMjk1NDQxMDYsMCxudWxsLFtbMywxXV1dXSxbWzAsMCxmYWxzZSxudWxsLDU5MDQ4ODI4NTE4NjU3OCwxOTAsW1syOCwzMSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjgzMjgwMTY1NzQyMTE1LG51bGwsW1sxMCwyXSxbOCwwXSxbNyxbODJdXV1dXSxbWzI4LDk3LG51bGwsNjQ5NTk1MDE3NzEzNDQ0LDAsbnVsbCxbWzAsWzEyXV1dXSxbMTYsOTUsIkJ1bGxldCIsODE1MzU1Njk3OTc5ODU4LDAsbnVsbCxbWzAsWzgyXV1dXSxbMTYsOTgsbnVsbCwxODE2NTU0ODM0NTM0MzcsMCxudWxsLFtbMTAsMF0sWzcsWzJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDI4MzAxNzM2Nzc5NTY1OSwxOTEsW1syOCwzMSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzkzMzU1NjM3NzI0MzYzLG51bGwsW1sxMCwyXSxbOCwwXSxbNyxbMzZdXV1dXSxbWzI4LDk3LG51bGwsNjEwNzQzMDA2MTg3MDYwLDAsbnVsbCxbWzAsWzEwM11dXV0sWzE2LDk1LCJCdWxsZXQiLDM1NzY3ODgzMDA3NjE4NiwwLG51bGwsW1swLFszNl1dXV0sWzE2LDk4LG51bGwsNjM1MDI1ODUwMjYyMDc0LDAsbnVsbCxbWzEwLDBdLFs3LFsyXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDM4NDA0MTEyNTkzMDAyOSwxOTIsW1syOCwzMSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMTgyNzc4MjE3NDI2ODM3LG51bGwsW1sxMCwxXSxbOCwwXSxbNyxbNl1dXV0sWzI4LDMxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyNTk0MTkxMzU1NTE0MTAsbnVsbCxbWzEwLDBdLFs4LDBdLFs3LFs2XV1dXV0sW1syOCwyNixudWxsLDQyODMyNDM2MjgyOTIzOSwwLG51bGwsW1szLDFdXV1dLFtbMCwwLGZhbHNlLG51bGwsODI3NzU2NTg5MzA1MTY0LDE5MyxbWzI4LDMxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwxMTI3NjE0ODI2ODU2MjgsbnVsbCxbWzEwLDJdLFs4LDBdLFs3LFs4Ml1dXV1dLFtbMjgsOTcsbnVsbCwyMjc1OTE2NzQxMjAwMDYsMCxudWxsLFtbMCxbMTJdXV1dLFsxNiw5NSwiQnVsbGV0Iiw4OTIwNjMxMjIxMjY1MjQsMCxudWxsLFtbMCxbMTA0XV1dXSxbMTYsOTgsbnVsbCw3MTk5MDc3NTQyMjg3MzQsMCxudWxsLFtbMTAsMF0sWzcsWzgxXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5NDQyNjY3NTEzMDg3NjIsMTk0LFtbMjgsMzEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM1MDQzNTA5NTUzNjgzOCxudWxsLFtbMTAsMl0sWzgsMF0sWzcsWzM2XV1dXV0sW1syOCw5NyxudWxsLDYyMzAyNDQzNDkyNzE0MywwLG51bGwsW1swLFsxMDNdXV1dLFsxNiw5NSwiQnVsbGV0Iiw5NjgzODk2MjE1OTc4MTYsMCxudWxsLFtbMCxbMTA1XV1dXSxbMTYsOTgsbnVsbCwzNzIyNjAxNzkxMDQzNTEsMCxudWxsLFtbMTAsMF0sWzcsWzgxXV1dXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTU1MDQwMjc0MDg2MjUzLDE5NSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwxOTE0NDM0MDY1NDEyMjMsbnVsbCxbWzExLDY3NzgzMjYwOTM0MzE4MV0sWzgsMF0sWzcsWzldXV1dXSxbWzI5LDM0LG51bGwsMzY1ODgzMDMzNTM1NDA4LDAsbnVsbCxbWzMsMV1dXSxbMjksMzUsbnVsbCw5MzEzODE5MjIxNjM2MjIsMCxudWxsLFtbMCxbMTNdXV1dLFs4LDkyLG51bGwsMjM4MjE0NzQ0NzcxMTI3LDAsbnVsbCxbWzMsMF1dXSxbOSw5MixudWxsLDEwMDg3ODU0MTk2MTU2NywwLG51bGwsW1szLDBdXV0sWzEwLDkyLG51bGwsOTk3OTc2ODEyOTMxOTYxLDAsbnVsbCxbWzMsMF1dXSxbMTEsOTIsbnVsbCw2MTQzMTQwOTQyODY4NTUsMCxudWxsLFtbMywxXV1dLFsxOCw5MixudWxsLDIwMzYwMjMwMTQyNjc2OCwwLG51bGwsW1szLDBdXV0sWzE4LDkzLCJQaHlzaWNzIiwxMTA3MjE0MTU1MjkzOTUsMCxudWxsLFtbMCxbMzddXV1dLFsxOSw5MixudWxsLDkyOTcwMTk0NzczMDg0MywwLG51bGwsW1szLDBdXV0sWzIwLDkyLG51bGwsNDk3MzQwNTU0ODYxNTc2LDAsbnVsbCxbWzMsMF1dXSxbMjEsOTIsbnVsbCwxNTUxNzE2OTMyMzM0NzUsMCxudWxsLFtbMywxXV1dLFsxNiwzNCxudWxsLDYzNzUxMTcwODUyMTQ0NCwwLG51bGwsW1szLDBdXV0sWzI3LDI2LG51bGwsNjA4NDMxOTgwOTk5OTYzLDAsbnVsbCxbWzMsMF1dXSxbMjgsMjYsbnVsbCw1Mzg2MDc4NDIyNjA5NTksMCxudWxsLFtbMywwXV1dLFstMSw1OSxudWxsLDcwODYzMzExNTY4MDc0NiwwLG51bGwsW1sxMSwxNTI2MzU1MjgyMjY4MjFdLFs3LFszOV1dXV0sWzEzLDc3LCJQaHlzaWNzIiw3Njc1NDYzNzEwMDY2MDMsMCxudWxsLFtbMCxbNDMsWzMsMTUyNjM1NTI4MjI2ODIxXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODA1MzUwODQ5Nzk4NzM4LDE5NixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyNjg5ODk4MTM1NjMzNTgsbnVsbCxbWzExLDg3NDkyNTcxMzgxNDA3Nl0sWzgsMF0sWzcsWzJdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDcxOTQ3ODY5NTA0MDYwNiwxOTcsW1sxMywzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwyMTg2MDMyNjA0NDE4NDEsbnVsbCxbWzAsWzU0XV1dXV0sW1sxMywzNSxudWxsLDM5Njk3NzIzNTY2NjA1OSwwLG51bGwsW1swLFsxMV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNjI2MzQ0NDYyOTY0NzE2LDE5OCxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDgwOTIxMDgyODY2MDA5OSxudWxsLFtbMCxbNjNdXV1dXSxbWzM0LDM1LG51bGwsNTA2MzM5MDIzMDgzNTY4LDAsbnVsbCxbWzAsWzEwNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTQ3MzE3MTM3NzI5NzU2LDE5OSxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDM2NTA1NTM0NjY5NDI0NixudWxsLFtbMCxbNjRdXV1dXSxbWzM0LDM1LG51bGwsNzI1MDIyNzM2OTUzMTk5LDAsbnVsbCxbWzAsWzYyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzMzIyMTIzMDY1NTY3NTksMjAwLFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNDQ5NzIwMjYzODk3ODQ4LG51bGwsW1swLFs1NV1dXV1dLFtbMzUsMzUsbnVsbCwxNTMxMTY2MjkwODc4MTUsMCxudWxsLFtbMCxbMTFdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDMzNTA2MTU1NjkxMjMxNywyMDEsW1syMiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3NTI1NTczNDI3Mzc5MzQsbnVsbCxbWzAsWzY1XV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw2MjE4NDIyNDIxNzA5MTEsMjAyLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQ3OTczMTU1MDYzNDQ0NixudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMjIsMzUsbnVsbCwyNjgwNDU3ODUxNTM4MjEsMCxudWxsLFtbMCxbMTA3XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5NzYzNzQ1NDk4NDY5NDgsMjAzLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQyMDEzMDMxODYzNTAxOCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbNl1dXV1dLFtbMjIsMzUsbnVsbCw3MzY3MjI0MzkyMTI1NDksMCxudWxsLFtbMCxbNjNdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDg5NDg2MzE4MzIzNTk2OSwyMDQsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMTcyMjI3MTg3ODA3NTk2LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxM11dXV1dLFtbMjIsMzUsbnVsbCw4NDkwODM2MjQ3MjQwOTksMCxudWxsLFtbMCxbNTVdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc2OTQyOTE0NjU4Njk4MywyMDUsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNDYyMTIwMTg5MTA4NzIzLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxMV1dXV1dLFtbMjIsMzUsbnVsbCw0OTYyNDE0MDMwMDA4NzIsMCxudWxsLFtbMCxbN11dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTcyNzM0NTA2MDI3MjY2LDIwNixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5OTE2MzQ5NTM2NTgyMzksbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzldXV1dXSxbWzIyLDM1LG51bGwsNDc5ODQwNjY1MzM2MzA3LDAsbnVsbCxbWzAsWzU0XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3OTk2MzQ0OTI0NTIyODcsMjA3LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDg3ODI1OTM0MTg3NTU4NCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTVdXV1dXSxbWzIyLDM1LG51bGwsMzMyNzM4NTU4Njk4OTM0LDAsbnVsbCxbWzAsWzY1XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5Mjc1MTIzNzIxMjQxMDIsMjA4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDIxODE0ODkxMzc5NzA0OCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMzRdXV1dXSxbWzIyLDM1LG51bGwsOTE1ODI4MTkyOTYxNTE1LDAsbnVsbCxbWzAsWzY4XV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDY0MTMwNTQzMjM5OTMwNSwyMDksW1sxMywzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw5ODgxNTY3NDYxMTM0MDIsbnVsbCxbWzAsWzU4XV1dXV0sW1sxMywzNSxudWxsLDU3OTY4OTE1NDQxNjk0MCwwLG51bGwsW1swLFsxMV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNDQ0MTQwNzgzODAzNjQxLDIxMCxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDg1OTQzOTAzODI3OTA3MixudWxsLFtbMCxbNjhdXV1dXSxbWzM0LDM1LG51bGwsMTg0Nzg3Nzk0NDQ2NDM3LDAsbnVsbCxbWzAsWzEwOF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNzkyNTM0NzA4MzA0NDUxLDIxMSxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDU3MjkyMDUyODk2NzUyNSxudWxsLFtbMCxbNzBdXV1dXSxbWzM0LDM1LG51bGwsNDAyMzU4MzkyOTEwNTkwLDAsbnVsbCxbWzAsWzczXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3NjE5MjI4NDI1OTg1MTcsMjEyLFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNTU5NzUzMDQ3ODU3NDE4LG51bGwsW1swLFs1OV1dXV1dLFtbMzUsMzUsbnVsbCw4NzYzOTA1MTI0Njg4NzgsMCxudWxsLFtbMCxbMTFdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDYyNDUzMzQxOTM1MjIzNiwyMTMsW1syMiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxOTU5NTkyNTQyODU2NDMsbnVsbCxbWzAsWzYxXV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw5OTAzOTIyODc0ODYzMjAsMjE0LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM2OTk4MzA0MTgyOTY5MSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMjIsMzUsbnVsbCwxODc1MjUyODEwMTM3OTcsMCxudWxsLFtbMCxbMTA3XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwyNTkzMTkzOTIxMzcyODAsMjE1LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDk4NjY0MDIxMjkyNTYyMSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbNl1dXV1dLFtbMjIsMzUsbnVsbCw5MzE0Njk2MzgxMzk0NzcsMCxudWxsLFtbMCxbNjNdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDUzMjMzNDM4NDUwNjExMSwyMTYsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTYyNzY2NTQwMTQwNzA0LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxM11dXV1dLFtbMjIsMzUsbnVsbCwzMzE5MTgyMTI1NTk5NzUsMCxudWxsLFtbMCxbNTVdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDkxMzcwMDk3NjM4NDc0OSwyMTcsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMTA3NTM5NzE4NzM1NjgwLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxMV1dXV1dLFtbMjIsMzUsbnVsbCwzODg2ODAwODMyOTU3MjEsMCxudWxsLFtbMCxbN11dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTU5MTY2NjgxMTUxNjM3LDIxOCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwzNDU0OTk3OTkyMjAxNjcsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzldXV1dXSxbWzIyLDM1LG51bGwsODAwMDgxODIzNDkwMTM0LDAsbnVsbCxbWzAsWzU0XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1NzY2NjQyNzQyOTcwMzAsMjE5LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDU3OTE1NDc3NzU5MDczMCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTVdXV1dXSxbWzIyLDM1LG51bGwsNjAwMjY1Mjk1MzYyMTM1LDAsbnVsbCxbWzAsWzY1XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5OTgxNTI1ODIzMjY2MDQsMjIwLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDc4MzA0NTQ0MDQ1NTgzNixudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMzRdXV1dXSxbWzIyLDM1LG51bGwsOTk1Mzg3MjI5MDA0MzAxLDAsbnVsbCxbWzAsWzY4XV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDg0MjY2MDgwNjgzOTc3OCwyMjEsW1sxMywzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3NDczOTU0NTEzMjA1MDEsbnVsbCxbWzAsWzM0XV1dXV0sW1sxMywzNSxudWxsLDczNzcwNzE0NDI2Mjk5NSwwLG51bGwsW1swLFsxM11dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTc0Nzg3MzEyNzk1NjI5LDIyMixbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDkwMDk2MzI5NzEzOTkwMixudWxsLFtbMCxbNzJdXV1dXSxbWzM0LDM1LG51bGwsNDI4NDE4NTM0NDU4MzQyLDAsbnVsbCxbWzAsWzM5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5NzQ4MzMyODQ1OTYyNDYsMjIzLFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTI2NzEyODA2NDc0NTcwLG51bGwsW1swLFs3M11dXV1dLFtbMzQsMzUsbnVsbCw4MjQ0OTM0NTA4MjYzNDgsMCxudWxsLFtbMCxbNzJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDExMzIyNzk5NDA4NzU2NSwyMjQsW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxMDcxOTM3MDQ2MjEyNjQsbnVsbCxbWzAsWzM5XV1dXV0sW1szNSwzNSxudWxsLDc1MTE2ODQ1OTc1MzA4MCwwLG51bGwsW1swLFsxM11dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTcwNjM1NDIyODM5OTY1LDIyNSxbWzIyLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDk0NzY1OTQyMjQyODQ1OCxudWxsLFtbMCxbNjBdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDk4OTE3MDUzNzU5Mjk5OSwyMjYsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTc3MzQ4OTg0ODM2OTEyLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsyXV1dXV0sW1syMiwzNSxudWxsLDY5ODM1NDY2MDY0ODE2NSwwLG51bGwsW1swLFsxMDZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc4ODIyMjg3MTY3ODcxOSwyMjcsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjUwMjg5MDAxMzU2MDc5LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFs2XV1dXV0sW1syMiwzNSxudWxsLDIwNjIwNzM1NDExMDMzNCwwLG51bGwsW1swLFs2Ml1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzkyNjUxMTM3MDg1MzkxLDIyOCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5Mzg0MTg5MDM5Nzk4MjUsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzEzXV1dXV0sW1syMiwzNSxudWxsLDUzNDcwODk4Mzk5NjMxMiwwLG51bGwsW1swLFs3MF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNDE3MTI2NjcyMzY5NDczLDIyOSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwzODk0NjI3NzYwODAwMTMsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzExXV1dXV0sW1syMiwzNSxudWxsLDgzMzU0Njc0OTkzNTQwOCwwLG51bGwsW1swLFs1OV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODk2OTY3ODM2NTQyNTQ1LDIzMCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwxMTIzNDUzNDQ0NjA3NDksbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzldXV1dXSxbWzIyLDM1LG51bGwsNTI4NjgyODQ1NzA1ODg1LDAsbnVsbCxbWzAsWzc3XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1OTU4NjIxMDkxNzkyNTksMjMxLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDE0ODE1NDc2NDQzMTA1MSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTVdXV1dXSxbWzIyLDM1LG51bGwsNTMwMjIyOTcwNjA1NDc5LDAsbnVsbCxbWzAsWzU4XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0NzI2MTU0MzAxMjI5MzMsMjMyLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDUwMzA5NDc3OTgxMTg4MCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMzRdXV1dXSxbWzIyLDM1LG51bGwsMTYxNDExNzA3MTc2NTQ2LDAsbnVsbCxbWzAsWzYxXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDIxNzE0MTM5MDU4NTA1MiwyMzMsW1sxMywzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwyMzA2ODM4MDk2OTQxODQsbnVsbCxbWzAsWzQxXV1dXV0sW1sxMywzNSxudWxsLDcyNTkwMDAwMTE3NDUxMiwwLG51bGwsW1swLFsxM11dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjcxMjE4OTA5MjI5OTE1LDIzNCxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDUyNDkzODQ5OTY5OTEyOSxudWxsLFtbMCxbNzZdXV1dXSxbWzM0LDM1LG51bGwsMzc1NzU1MDQ4MDIxNTA5LDAsbnVsbCxbWzAsWzEwOV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjUyMDg2MDk3ODQ0NDExLDIzNSxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDQ2NTI3MDE0MzEyODE2NCxudWxsLFtbMCxbNzddXV1dXSxbWzM0LDM1LG51bGwsODIyOTY2MTE2OTY2NzI2LDAsbnVsbCxbWzAsWzEwXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxNzQzNDQxNjY3NjYyNzcsMjM2LFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsOTIwMDQzODI3NTk3OTk5LG51bGwsW1swLFs0Ml1dXV1dLFtbMzUsMzUsbnVsbCw3ODU2NDU4NjA1MjczMjUsMCxudWxsLFtbMCxbMTNdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDM0NTcxNjY3MjIxMDk1MiwyMzcsW1syMiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxMzYxNzI4Mzk2ODg0OTcsbnVsbCxbWzAsWzc4XV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCwyNjg5NTA5NTAyMDI4MTIsMjM4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM2OTA0NDAxNjgzMTk5MSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMjIsMzUsbnVsbCw5NjA2NTk4NTAwMDk3ODYsMCxudWxsLFtbMCxbMTA2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4MDg2NDA3NDk0NDQyMzUsMjM5LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDgzODc5Mzc0OTc3OTM2NixudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbNl1dXV1dLFtbMjIsMzUsbnVsbCw1ODEzNjA3OTYxMTYyOTEsMCxudWxsLFtbMCxbNjJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQyNTg2NDcxOTYyMTI0MSwyNDAsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTUwNjEzMTA5NDQyODcyLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxM11dXV1dLFtbMjIsMzUsbnVsbCw1NzIyNTE2Nzc4ODE4MjUsMCxudWxsLFtbMCxbNzBdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDYxNjEwODA5Njg1MDkwNCwyNDEsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzc4OTEyNTQzNjA2MTk2LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxMV1dXV1dLFtbMjIsMzUsbnVsbCwyMjg2NzQ2ODYxNDIwMzksMCxudWxsLFtbMCxbNTldXV1dXV0sWzAsMCxmYWxzZSxudWxsLDczMTU5NDgwODExNDgxNiwyNDIsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsODQ0ODc2MDEwNTgyNTE5LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFs5XV1dXV0sW1syMiwzNSxudWxsLDEzOTM0NDQ0MTgwNjMxNywwLG51bGwsW1swLFs3N11dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTgyMTU1MDE3NzQ4ODQ2LDI0MyxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3MjEyNjEzOTk4MDM4NjMsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzE1XV1dXV0sW1syMiwzNSxudWxsLDExNDk3OTczODE2NzMzMSwwLG51bGwsW1swLFs1OF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNDYxNzIyOTI4OTMyNTE3LDI0NCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2NjgzNjgwNjAzNjM4MzAsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzM0XV1dXV0sW1syMiwzNSxudWxsLDU3Mjg5NzMwODUwNDI1MCwwLG51bGwsW1swLFs2MV1dXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQ0NTI3NjM1MTY4MDg5MiwyNDUsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjIzNTc0NTUyMjM4MzcxLG51bGwsW1sxMSw4NzQ5MjU3MTM4MTQwNzZdLFs4LDBdLFs3LFs2XV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw4MzQ1ODc2Nzg5ODcyMjQsMjQ2LFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNjA0MzA2MjM1MTA1NzQ4LG51bGwsW1swLFs2NV1dXV1dLFtbMTMsMzUsbnVsbCw4ODcyMDk1MjQ5MDk1MjYsMCxudWxsLFtbMCxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODU0ODUxMzE2Mzg5NzM2LDI0NyxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDE0NDE1NjIzMzU3NTA5MyxudWxsLFtbMCxbNjNdXV1dXSxbWzM0LDM1LG51bGwsMTEyMjMyNTI4MTkyMzE1LDAsbnVsbCxbWzAsWzM0XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzMDQ5MzM0NTEwODQzNzcsMjQ4LFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMjY5MDQ4OTkyOTU4MjA2LG51bGwsW1swLFs2NF1dXV1dLFtbMzQsMzUsbnVsbCw1MTYxMTgzNTg2MTIwNTksMCxudWxsLFtbMCxbNjBdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDg4NzEzODExNjQ3Njk1MCwyNDksW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxMzgwMDEyNTk2ODg1NDEsbnVsbCxbWzAsWzU1XV1dXV0sW1szNSwzNSxudWxsLDU3OTkwMjg5MTEwMTgyMSwwLG51bGwsW1swLFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzNTQ2Mjc2OTM2NjEwMDEsMjUwLFtbMjIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsOTQ0NDQwNzk2MjAyOTQwLG51bGwsW1swLFs2NV1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsOTI2NzA1MzUyMDY3NTYxLDI1MSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2Nzg3OTgyOTY5ODk4NzIsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzIyLDM1LG51bGwsMzc0NjUzOTY3MDUwMzAwLDAsbnVsbCxbWzAsWzYwXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxNzY1Njg5OTE1MjkyNzgsMjUyLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM5Njg4OTMxNDE4NjMxNyxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbNl1dXV1dLFtbMjIsMzUsbnVsbCw2NTExMzc0NTY4MTUzNDMsMCxudWxsLFtbMCxbNzJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDkwNjQ5NTU3ODQ1MTE4OSwyNTMsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNTc3NTgwOTI5OTM1NzM3LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxM11dXV1dLFtbMjIsMzUsbnVsbCw1NTU4MTg5MzM3MTU5MzAsMCxudWxsLFtbMCxbNzNdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDMzODA3Mjg0ODE3NjQyMCwyNTQsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNDY1NTQyMjg0ODY4NTU0LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxMV1dXV1dLFtbMjIsMzUsbnVsbCw1MzA4OTk4Nzc1Mzc5NjcsMCxudWxsLFtbMCxbMzldXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc3NDY4NjE5MDgyODYxNywyNTUsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjY5MjcxNjUxMzEzNzgyLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFs5XV1dXV0sW1syMiwzNSxudWxsLDgyMTA5MTk0NDU1MTIyMiwwLG51bGwsW1swLFsxMDhdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDU0MTYxNjI4OTUzODU0MywyNTYsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTcxOTExNTA3NDIyMTMyLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxNV1dXV1dLFtbMjIsMzUsbnVsbCw2MjQ3OTMyMTY2MTcyNTksMCxudWxsLFtbMCxbMTA5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1NjA1ODgxNDYzNjY5NDksMjU3LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDgxMDIzMzY0ODUwMjI2NSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMzRdXV1dXSxbWzIyLDM1LG51bGwsMTYyNjIxNjMzMzAxNDk4LDAsbnVsbCxbWzAsWzEwXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQ5MjM4ODI0NTM1NDIzMSwyNTgsW1sxMywzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3MjQxNDc0NTE5NjkyOTYsbnVsbCxbWzAsWzU4XV1dXV0sW1sxMywzNSxudWxsLDQ4MzA5OTk2OTczMTk2OCwwLG51bGwsW1swLFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1MTk5MTUwMzQyMDc0MTUsMjU5LFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsOTk1NzI3NTIxMDQ3NjM4LG51bGwsW1swLFs2OF1dXV1dLFtbMzQsMzUsbnVsbCw5Mjc1NDMzMzQ5OTMyNTIsMCxudWxsLFtbMCxbMTFdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDU4MjgwNTIzNjg3MjgyMCwyNjAsW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxMjMxNTM4NjgzNzM4OTMsbnVsbCxbWzAsWzcwXV1dXV0sW1szNCwzNSxudWxsLDE5ODg4NjcyMTQ5ODc4MiwwLG51bGwsW1swLFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwyMDIwMzA0MTMxMTczOTUsMjYxLFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMjgxOTY5NDA2NzU3MzMyLG51bGwsW1swLFs1OV1dXV1dLFtbMzUsMzUsbnVsbCw0OTc1NDg4NTQ0NjcyMDMsMCxudWxsLFtbMCxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjk2MjYzOTgzMDYwNjI5LDI2MixbWzIyLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDg2NzQyMjQxODkzMDkyNyxudWxsLFtbMCxbNjFdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDYzMDgwOTU4MjU5ODQ4NCwyNjMsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzI5MDcyMTE2MjA1NTUwLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsyXV1dXV0sW1syMiwzNSxudWxsLDg2NDUwMDM3NTc4NTk4MywwLG51bGwsW1swLFs2MF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzU5NDE1MzgzNTkyOTYzLDI2NCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2MjcyMTUwNzU3MzEyOTcsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzZdXV1dXSxbWzIyLDM1LG51bGwsODkxNjQzMTMyOTA0MjI4LDAsbnVsbCxbWzAsWzcyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5MzI4NjExNTgyNjQ2NjMsMjY1LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDg4NzkyOTYzNjAzMzU5MixudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTNdXV1dXSxbWzIyLDM1LG51bGwsOTcwMzQ1MDEwNzk1NzYzLDAsbnVsbCxbWzAsWzczXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4Mzc5NTAxNzg1NzUwMzgsMjY2LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDk1NDEzMTczMjQ1MDY5MSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTFdXV1dXSxbWzIyLDM1LG51bGwsOTgyNzU3NjU3NDQ0NDYyLDAsbnVsbCxbWzAsWzM5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzNjE4MTU1OTExNTY0NTAsMjY3LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDkxODYyMzkzMTkzNTI1NixudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbOV1dXV1dLFtbMjIsMzUsbnVsbCw0OTE1NzA2MTEyMDg0MjIsMCxudWxsLFtbMCxbMTA4XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzMDk3OTIwMzcyNDU1ODcsMjY4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDEzMDcyOTEwNzU4MjAxMSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTVdXV1dXSxbWzIyLDM1LG51bGwsNzU2MDEzMTgzMDI1MDY3LDAsbnVsbCxbWzAsWzEwOV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNzkyNjg3OTA1OTQyNjg4LDI2OSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwxODQ4NjQ5NjAzOTg4MzcsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzM0XV1dXV0sW1syMiwzNSxudWxsLDI4NjM4MjA2NjcxODY4MiwwLG51bGwsW1swLFsxMF1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5ODg2MTg3MjQ1ODU1ODAsMjcwLFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTkyNzUyNTA0NDEzOTU4LG51bGwsW1swLFszNF1dXV1dLFtbMTMsMzUsbnVsbCwyNzM5ODI0MDgyMjM0NTUsMCxudWxsLFtbMCxbMl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTI5OTg0OTE0Nzg4MjQzLDI3MSxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDgyNjIzMzY3MTA0OTg5NSxudWxsLFtbMCxbNzJdXV1dXSxbWzM0LDM1LG51bGwsMjU2OTY4Mzg1MzI3ODQzLDAsbnVsbCxbWzAsWzEzXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxMDQ1Nzc1OTI2NzQwMzYsMjcyLFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNzY4NTYzNTkyODMxMDUxLG51bGwsW1swLFs3M11dXV1dLFtbMzQsMzUsbnVsbCw2NzM3NjkxNDkwMjAxOTQsMCxudWxsLFtbMCxbMl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODQyOTUyMDExOTMzODUxLDI3MyxbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDkwOTYzNzY5MzA3OTgyNyxudWxsLFtbMCxbMzldXV1dXSxbWzM1LDM1LG51bGwsOTAwNjYwODA0MzE1NjA3LDAsbnVsbCxbWzAsWzJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDkzNDY0ODMxMDIyNjkxOCwyNzQsW1syMiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxMzQ2NTMzMDAwNzE5NTgsbnVsbCxbWzAsWzYwXV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCwyODY2NDQ2NzM3MjY5NDQsMjc1LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDUzNTI3NzgxNzc0NjcwNCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMjIsMzUsbnVsbCwyNzY3NTI4MzA1NjUxMzAsMCxudWxsLFtbMCxbMl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTQzNDEwNjkxMTYzMzEyLDI3NixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3MDE1Njk4Mzc2ODc0MTEsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzZdXV1dXSxbWzIyLDM1LG51bGwsODMxMjUyMTcxMTU2ODc1LDAsbnVsbCxbWzAsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc3Mzg2MzA3OTE5Nzk3NiwyNzcsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsODg4NDYxMzM0NDM4NzcxLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxM11dXV1dLFtbMjIsMzUsbnVsbCw4OTI3OTAyMjQ1Nzc4NTgsMCxudWxsLFtbMCxbMTNdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDgyMDYyMjg0NDA5NTU1NSwyNzgsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjM1MTk4ODAzNjQ0NzMwLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxMV1dXV1dLFtbMjIsMzUsbnVsbCw4Njk5ODQwMzM4NzAxMDUsMCxudWxsLFtbMCxbMTFdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQzNzM4Njc5NjMwMzY3MSwyNzksW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMzM4NDcwOTEyNTc4Nzk2LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFs5XV1dXV0sW1syMiwzNSxudWxsLDg4MDQ0Nzk0NjIzOTE3NSwwLG51bGwsW1swLFs5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3NjQwNzY3MDcwNjU0MjQsMjgwLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQwNDY2MjU0NzgzOTg2OSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTVdXV1dXSxbWzIyLDM1LG51bGwsNjkzOTMxODcxNDMxMDQ2LDAsbnVsbCxbWzAsWzE1XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwyMTA5NDM4ODI5NzcxNDEsMjgxLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDMzOTYzNDkwMzk4NDQ0MSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMzRdXV1dXSxbWzIyLDM1LG51bGwsODg2NDUxOTY2MTAwNDQ0LDAsbnVsbCxbWzAsWzM0XV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDY2MTIzNTYzMzg1ODc3NiwyODIsW1sxMywzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw0MTU1MDk0MTc2NDIwMzIsbnVsbCxbWzAsWzQxXV1dXV0sW1sxMywzNSxudWxsLDc5NzAyNjk1MjYwMTIzOCwwLG51bGwsW1swLFsyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzOTY2MzM0NTUyNjUyNjEsMjgzLFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTU2ODUyNTAzNTg2NTY1LG51bGwsW1swLFs3Nl1dXV1dLFtbMzQsMzUsbnVsbCw2MzY3NTA4MjM4MjU5NTIsMCxudWxsLFtbMCxbOV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzA4OTc5OTQ5MTQ1MzQ3LDI4NCxbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDc1MzExMjI1MTM5MjYwMixudWxsLFtbMCxbNzddXV1dXSxbWzM0LDM1LG51bGwsNzM3NDQyOTE1NDk1MjY5LDAsbnVsbCxbWzAsWzE1XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwyNjU3NTA4MDIyNjQ1NzcsMjg1LFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNDAzMzY4ODM4MjEwNTYyLG51bGwsW1swLFs0Ml1dXV1dLFtbMzUsMzUsbnVsbCw2MjUwNTg1NTY1MjgwMDksMCxudWxsLFtbMCxbMl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjczMjgxODY1MzcxMzEwLDI4NixbWzIyLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDcyOTkxNjkxODc5OTM2MSxudWxsLFtbMCxbNzhdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDg2NzI4NDg4NzgxNjk2NywyODcsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsODYyNDk3OTUwMDE2NzU3LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsyXV1dXV0sW1syMiwzNSxudWxsLDU3NjM4NjI1MDYzNDc0MywwLG51bGwsW1swLFsyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0ODM4MDcyNzAwODYwNDUsMjg4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDY0NjIwOTc3MzcyNjU3OCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbNl1dXV1dLFtbMjIsMzUsbnVsbCw5NTcxMjE2MDgxNjUzMzEsMCxudWxsLFtbMCxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNDg2MjAxNjg2NDMzNzA0LDI4OSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0NDA0NDkxNTc4MDU1MzUsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzEzXV1dXV0sW1syMiwzNSxudWxsLDQxODkwNDYzMjQzMzk5MCwwLG51bGwsW1swLFsxM11dXV1dXSxbMCwwLGZhbHNlLG51bGwsODY4Njk3NjE1MzIzNDU2LDI5MCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5MjQ0NTAxMzg0NTc1MTgsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzExXV1dXV0sW1syMiwzNSxudWxsLDgwNDQwNjA5NzAyMTU4MSwwLG51bGwsW1swLFsxMV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTY0NzUwNzM2NDAxMDE1LDI5MSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5NTA2MDM2MTk4NDgyOTcsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzldXV1dXSxbWzIyLDM1LG51bGwsNTMzNDY0NzQ0MTIyNjQ1LDAsbnVsbCxbWzAsWzldXV1dXV0sWzAsMCxmYWxzZSxudWxsLDk0MDc4MzY2MTI0MDkzMSwyOTIsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzEwNjUxNzM1NTU1ODU0LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxNV1dXV1dLFtbMjIsMzUsbnVsbCw1MzExMDIwNDc2OTc3OTUsMCxudWxsLFtbMCxbMTVdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDk4NjU2MzYyNjM0MzkzNCwyOTMsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTc4OTQ3OTgyMDE1NjYyLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFszNF1dXV1dLFtbMjIsMzUsbnVsbCw2MzExNzQ1MTQ4ODY3ODcsMCxudWxsLFtbMCxbMzRdXV1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3MDE0MjE0NTYzNTg2NDIsMjk0LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDIyOTQ4MDI2Njk4MDU2MixudWxsLFtbMTEsODc0OTI1NzEzODE0MDc2XSxbOCwwXSxbNyxbMTNdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDM5MTAzODM5MTc4MDg3MiwyOTUsW1sxMywzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw0OTc5MDQ4MzExNzk3MDQsbnVsbCxbWzAsWzM0XV1dXV0sW1sxMywzNSxudWxsLDM5MDE5MDU5ODc1NTYwMSwwLG51bGwsW1swLFsyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw2NjIzNTc0MzYwNjQ1MzcsMjk2LFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNDQyMDA0NDU5ODcwODgzLG51bGwsW1swLFs3Ml1dXV1dLFtbMzQsMzUsbnVsbCw1MzA5ODM0MjUzMzQwMDQsMCxudWxsLFtbMCxbMTNdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc0NDIwMTE5NTA5NzcxMywyOTcsW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwyODI1NzI5NjU5MjU2ODcsbnVsbCxbWzAsWzczXV1dXV0sW1szNCwzNSxudWxsLDEzODYyMjM2NDczMDQ5OSwwLG51bGwsW1swLFsyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxOTUwMDc5OTU1MDM0NDAsMjk4LFtbMzUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTU0NTk3MTMxNDE2NDcyLG51bGwsW1swLFszOV1dXV1dLFtbMzUsMzUsbnVsbCw4MTAwMTg5NTMwNjY2NDQsMCxudWxsLFtbMCxbMl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTAxOTIzNzU2NjkzMDc2LDI5OSxbWzIyLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDU5NDUzNjE1NTIzNzc2MyxudWxsLFtbMCxbNjBdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDQxMjU4MzczOTkwMDI4MywzMDAsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjQyNTk1Nzk0MTY2Nzc2LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsyXV1dXV0sW1syMiwzNSxudWxsLDg1NjM1MzE3OTEwMDI0MCwwLG51bGwsW1swLFsyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0OTA1ODg0MzU2NzE0MjQsMzAxLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDU5NDYwODU2MjY0MDkzNSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbNl1dXV1dLFtbMjIsMzUsbnVsbCwyNjAwNjAzNDI4MjMzNDQsMCxudWxsLFtbMCxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNzc5NTU3NDU2NjEyNjExLDMwMixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1NDE1Nzc0NTYwMjE5MjMsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzEzXV1dXV0sW1syMiwzNSxudWxsLDc1NjE2NzUxNTE2MDA4MSwwLG51bGwsW1swLFsxM11dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzM2MzQ0MzQyMTkzMjUyLDMwMyxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1MjQ2MjY5NjcyNTA3ODQsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzExXV1dXV0sW1syMiwzNSxudWxsLDg5NzkzMjYzNDk2NTY1MiwwLG51bGwsW1swLFsxMV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODE0MTc3ODAwOTExMDU3LDMwNCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1Nzk5MDQ4OTU5MTU5NzMsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzldXV1dXSxbWzIyLDM1LG51bGwsNjMyNjUxNjMyMjkyODE2LDAsbnVsbCxbWzAsWzldXV1dXV0sWzAsMCxmYWxzZSxudWxsLDk4NDM2MjA2NzQ0MDI2OCwzMDUsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNTM0MDA0MTQ3OTgzNTIwLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxNV1dXV1dLFtbMjIsMzUsbnVsbCw1NDEyMzA2NDk5OTk0MzcsMCxudWxsLFtbMCxbMTVdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDg3OTEyODc5ODk3Mzk3MSwzMDYsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMTQ5ODI1ODEzNTk1NTEzLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFszNF1dXV1dLFtbMjIsMzUsbnVsbCw5MTQ3NDI4MjMxMTQzMjAsMCxudWxsLFtbMCxbMzRdXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNzIzNjQyNDAyNDY0NDcyLDMwNyxbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDIyMDAzNjc1NjE4ODAzOCxudWxsLFtbMCxbNDFdXV1dXSxbWzEzLDM1LG51bGwsODU2MzIwMDIzMzYxNTM5LDAsbnVsbCxbWzAsWzJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDI5MzUxMTc1MDM5MTcwOSwzMDgsW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3NjU5OTYxNDg4OTM5ODYsbnVsbCxbWzAsWzc2XV1dXV0sW1szNCwzNSxudWxsLDc4Nzg4MTY1Mzk1NDkxOSwwLG51bGwsW1swLFs5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzODQ2MjU2MDM5NTg3MTgsMzA5LFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNzg1NjU2NzY2MjQxNDM4LG51bGwsW1swLFs3N11dXV1dLFtbMzQsMzUsbnVsbCw4NTg0MTA0OTE0NzE4NDQsMCxudWxsLFtbMCxbMTVdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDIxMjI5MjkzOTQ3ODEyOCwzMTAsW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxNzE5NjgzNTQ0NTQzNzgsbnVsbCxbWzAsWzQyXV1dXV0sW1szNSwzNSxudWxsLDc4NTQwMzA5MTY3MDQzNywwLG51bGwsW1swLFsyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzNjg4MDQzNDk1NDI0OTAsMzExLFtbMjIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTExNzYwMDY2MTc2OTk1LG51bGwsW1swLFs3OF1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNTA3MzQ3MDE3MjQ0NDE0LDMxMixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3NTMzMDY0NDU0MzI2MzgsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzIyLDM1LG51bGwsOTk0MzU4OTUwMzE3OTk1LDAsbnVsbCxbWzAsWzJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDE5MjQ4NTUwMzM4MDMwNCwzMTMsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTIwNDA0OTM4NzQ0Mzc5LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFs2XV1dXV0sW1syMiwzNSxudWxsLDc1NDkwMjE5ODkxODcwMywwLG51bGwsW1swLFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4NTk5OTg0MjAzNzkwNDEsMzE0LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM2NjI3MDIwMjExNjgzMSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTNdXV1dXSxbWzIyLDM1LG51bGwsNTgyMDcwNTQzNTk3NDIxLDAsbnVsbCxbWzAsWzEzXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw2NTE5MjIzNDQ2MDk1NjAsMzE1LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDY1MjQzMzgxMzU0ODQxNSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTFdXV1dXSxbWzIyLDM1LG51bGwsMTQ3MjI4OTIxMzY2OTY4LDAsbnVsbCxbWzAsWzExXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw2NTQ4OTE2OTM0OTI2MTQsMzE2LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDIxOTA5NDQ4NDUyODczNixudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbOV1dXV1dLFtbMjIsMzUsbnVsbCw5NDQxOTEwNjc4OTU3ODAsMCxudWxsLFtbMCxbOV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTMxNTYzMzg3MTk0MzEyLDMxNyxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5MzM5NDUzNTQyNjU5MzcsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzE1XV1dXV0sW1syMiwzNSxudWxsLDM2MTM2MjY5MjQzODE5MCwwLG51bGwsW1swLFsxNV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTU1NzgxODQ2MTYxOTMzLDMxOCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwxNDQ3MDkzNTAxMjQxNjMsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzM0XV1dXV0sW1syMiwzNSxudWxsLDE0NTU2OTE0MDU2OTQ0MywwLG51bGwsW1swLFszNF1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1ODE2OTc1MTA4NjUyNTQsMzE5LFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTk4NDMyNjM0MTQ4MTIzLG51bGwsW1swLFs1NF1dXV1dLFtbMTMsMzUsbnVsbCwzMzM1Mzc4MDg4NzE4NDgsMCxudWxsLFtbMCxbMTFdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDcwOTAxOTEzMjQxNDY5MiwzMjAsW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw0NTY3NDE3OTU2NTEzMTMsbnVsbCxbWzAsWzYzXV1dXV0sW1szNCwzNSxudWxsLDUxMDM5MDc0OTQ2Njc4NywwLG51bGwsW1swLFsxMDZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDU1MDQ5NTA4NDEyMTU4NywzMjEsW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxNzM4NjUwMTU2NTgwMjcsbnVsbCxbWzAsWzY0XV1dXV0sW1szNCwzNSxudWxsLDczNTI3OTY4ODE1OTg1MywwLG51bGwsW1swLFs2Ml1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjEwNDYwMDkxMTg1ODUzLDMyMixbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDU5MTI2MTk1MTc1NTA5NyxudWxsLFtbMCxbNTVdXV1dXSxbWzM1LDM1LG51bGwsNjYwMTk4Mzk1OTk0NDE3LDAsbnVsbCxbWzAsWzExXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4ODAzNzk0MDczNTkxNDUsMzIzLFtbMjIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNDE3MzUwNzY5ODk2NDcwLG51bGwsW1swLFs2NV1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsOTMxMzU1MTgyNjAyOTI5LDMyNCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwxMDkzODc0NTcyNDIwMjIsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzIyLDM1LG51bGwsMzI4NDg2Nzc5OTg3Mjk1LDAsbnVsbCxbWzAsWzEwN11dXV1dXSxbMCwwLGZhbHNlLG51bGwsNDE1MzE4NzY4OTE5OTk3LDMyNSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0ODk1Njk2NDMyMTUwNDEsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzZdXV1dXSxbWzIyLDM1LG51bGwsMjk4MDAwNDc4NDcyMzQwLDAsbnVsbCxbWzAsWzYzXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw2NzMxNjM5MTEyMTk1NTMsMzI2LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDI2MTc5Mjc0NjcyMTAxNSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTNdXV1dXSxbWzIyLDM1LG51bGwsNTUzMDk1NjI5NzI5NzM5LDAsbnVsbCxbWzAsWzU1XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3NTAwNTYyMDgyMTU1OTUsMzI3LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDE0NTYzMTcxMzI2NDk0MCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTFdXV1dXSxbWzIyLDM1LG51bGwsOTgxNzI2Nzc4NDc1MTk3LDAsbnVsbCxbWzAsWzddXV1dXV0sWzAsMCxmYWxzZSxudWxsLDcyMTYyNzYyNDEzMjc5OSwzMjgsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjg0MTc3NTcwMTMzMDM0LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFs5XV1dXV0sW1syMiwzNSxudWxsLDE4MzE0MTA0NDUzNTIzNiwwLG51bGwsW1swLFs1NF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTc4OTY2MTg5NjYyNDkzLDMyOSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwxNTc5NDMwODIyMzY1NzYsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzE1XV1dXV0sW1syMiwzNSxudWxsLDQ5NzM4MDM1NDY1ODY4MiwwLG51bGwsW1swLFs2NV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzM5MzEwMDYzMTUyMTIzLDMzMCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwxMTU3ODM2NTg1MDAxODAsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzM0XV1dXV0sW1syMiwzNSxudWxsLDUwMTAyNTQ2NjQxMzQ0NSwwLG51bGwsW1swLFs2OF1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3MDY0NTM5NzMxNzIyNzIsMzMxLFtbMTMsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMjEzOTI4MTc3NzI4OTUyLG51bGwsW1swLFs1OF1dXV1dLFtbMTMsMzUsbnVsbCw4OTM3MjM3ODg0Mzg2NTIsMCxudWxsLFtbMCxbMTFdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDIwNDA5NjQ1Mzk5ODYxNiwzMzIsW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw4ODg3OTA1MTAzMjg1NzIsbnVsbCxbWzAsWzY4XV1dXV0sW1szNCwzNSxudWxsLDMyNDg2NzEyMDI3NTk2NywwLG51bGwsW1swLFsxMDhdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQwMDMzMDMxNDU1NTg0MiwzMzMsW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwyMTcyOTM5ODk3NjYzOTAsbnVsbCxbWzAsWzcwXV1dXV0sW1szNCwzNSxudWxsLDQxNjA5MTc3MzU3ODg0NywwLG51bGwsW1swLFs3M11dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjQ5ODY0NjI3MDIwMTk4LDMzNCxbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDk4ODA3NjY1MjczMzQ0OSxudWxsLFtbMCxbNTldXV1dXSxbWzM1LDM1LG51bGwsOTcyMzQ2NTc3NTQ2MjcxLDAsbnVsbCxbWzAsWzExXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4MDg3MDY3NTU3MDQ4MjksMzM1LFtbMjIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsOTM1OTcwODYyMjI1OTE2LG51bGwsW1swLFs2MV1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsMTA5ODI3NjEwNjU0MjE3LDMzNixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2MzU4NjUyNjI5NjMwMzUsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzIyLDM1LG51bGwsODE2MDAzOTQ5NTA1MTA3LDAsbnVsbCxbWzAsWzEwN11dXV1dXSxbMCwwLGZhbHNlLG51bGwsNDI5Njg3NzQxMDkxMzgzLDMzNyxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0MDAyNjU5NTk1MzgxNDIsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzZdXV1dXSxbWzIyLDM1LG51bGwsMzkzNjMwNTkwNjQ0MzU5LDAsbnVsbCxbWzAsWzYzXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1NjA5NTIzMDU5OTc2MDEsMzM4LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDk1MTgyMTI4MDM4OTU3NyxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTNdXV1dXSxbWzIyLDM1LG51bGwsMjYwNTEyMjk5NjEwMzY1LDAsbnVsbCxbWzAsWzU1XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzNzM1NjA5NzAwNzk4MzQsMzM5LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDkzMjY1NzE0NDc0NTk1MyxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTFdXV1dXSxbWzIyLDM1LG51bGwsOTUyMDc0NDI2NDc2NjI0LDAsbnVsbCxbWzAsWzddXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc3Mjg4MzU1OTc1OTc5MywzNDAsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzcyNTE2NDYxNzE1Njk1LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFs5XV1dXV0sW1syMiwzNSxudWxsLDUwMTY4NDg2MjA0NzIyMCwwLG51bGwsW1swLFs1NF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNDg1MjgzMjY0MTAxMTAwLDM0MSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2NDc3MjA5MTYyNTQ0NjcsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzE1XV1dXV0sW1syMiwzNSxudWxsLDIxNjk1Njk2MjI5MzQxNSwwLG51bGwsW1swLFs2NV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTE0MDQxODA4MTE5MzY1LDM0MixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3MzIwNDI1MjIzNTU4MTIsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzM0XV1dXV0sW1syMiwzNSxudWxsLDcyODM0NzAxOTgwMzU2NywwLG51bGwsW1swLFs2OF1dXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDMxMDI5OTg5OTYxMzc0MCwzNDMsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNTUwNTYxMjYzODA1Nzg1LG51bGwsW1sxMSw4NzQ5MjU3MTM4MTQwNzZdLFs4LDBdLFs3LFsxMV1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsODY2MzM2NDc5NzI4OTk5LDM0NCxbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDQ5OTkyODczNTI5ODQ2MixudWxsLFtbMCxbMzRdXV1dXSxbWzEzLDM1LG51bGwsMTMxODg4MzQzMzAxMzQzLDAsbnVsbCxbWzAsWzEzXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4NTk5MzM0NDE4NjA2NzUsMzQ1LFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMjE3MDkyMjkwMDUyMzQyLG51bGwsW1swLFs3Ml1dXV1dLFtbMzQsMzUsbnVsbCwzNTUxMTEyNzMyNTg2MzUsMCxudWxsLFtbMCxbMzldXV1dXV0sWzAsMCxmYWxzZSxudWxsLDE4MzYwNTEwNTA1Mjg5MCwzNDYsW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw4MTAyMzQ0NDA1ODk1ODYsbnVsbCxbWzAsWzczXV1dXV0sW1szNCwzNSxudWxsLDI5MDgwMjA5NTU2NTc1MCwwLG51bGwsW1swLFs3Ml1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNzg0NDIwOTkxMTcwOTgxLDM0NyxbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDkwNzI1OTg1OTU4NDA4NixudWxsLFtbMCxbMzldXV1dXSxbWzM1LDM1LG51bGwsMTg0NTU2NTIyNDM0MDIyLDAsbnVsbCxbWzAsWzEzXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0MDEyMTg2MjExODkzOTMsMzQ4LFtbMjIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNzI0OTM5MTAwMDk2NTY0LG51bGwsW1swLFs2MF1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsMzYzNjY5MzM4NjQ5ODUwLDM0OSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3MDU4NDU5NzY1MDk4MjksbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzIyLDM1LG51bGwsNDgwNDM3Nzc3MTk2NzU2LDAsbnVsbCxbWzAsWzEwNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTcwMjI5NjU5Mjk4NjU4LDM1MCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwzNzI3NDI4ODM1NTc2NDQsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzZdXV1dXSxbWzIyLDM1LG51bGwsMzU1MjkwNjQ2MjM4ODk0LDAsbnVsbCxbWzAsWzYyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzMzQzMTQzNzU0MjUyMDUsMzUxLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDMwNTcxODM5ODg3NzM5OCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTNdXV1dXSxbWzIyLDM1LG51bGwsMTI5NDUwNjA3Mjk0MjUxLDAsbnVsbCxbWzAsWzcwXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzNTU3ODgyNjY4MjQ0ODYsMzUyLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQzNzkwODgxMzg3NjQ4NixudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTFdXV1dXSxbWzIyLDM1LG51bGwsMjkwMTY5Mjk3NzI5NjY5LDAsbnVsbCxbWzAsWzU5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0OTYxODQ1NTQzMTY0NTAsMzUzLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDY3ODU2MTM0OTQyMTg4OSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbOV1dXV1dLFtbMjIsMzUsbnVsbCwzNjYwMzg1Nzc0MjQ0NDcsMCxudWxsLFtbMCxbNzddXV1dXV0sWzAsMCxmYWxzZSxudWxsLDg0NTYxNzkyNzM4NjQ3MywzNTQsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMTkwMzQ4MDI3ODEzODc4LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxNV1dXV1dLFtbMjIsMzUsbnVsbCwzNTQ2NTQyNjU1OTk2MDgsMCxudWxsLFtbMCxbNThdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDkwNTc5MDg3NDk0MTg5MywzNTUsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjE4MjM0ODk2NTYwNjk3LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFszNF1dXV1dLFtbMjIsMzUsbnVsbCw2NzUxOTgxMDM4MTgyNzIsMCxudWxsLFtbMCxbNjFdXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzc1MTE1MjQxMTYyNzEzLDM1NixbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDM1NDExMDQ5ODgwMjI2NixudWxsLFtbMCxbNDFdXV1dXSxbWzEzLDM1LG51bGwsODQyMDU2MDkxMzI5NzEyLDAsbnVsbCxbWzAsWzEzXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0NzUzMzExNDQ3NTg3MTksMzU3LFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMjI2NDA1MzkzMzcyNTA4LG51bGwsW1swLFs3Nl1dXV1dLFtbMzQsMzUsbnVsbCwyNjQ3MDQxMzU4MzE0NzYsMCxudWxsLFtbMCxbMTA5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3NTMzOTgxMzY0NTg1NjksMzU4LFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsOTMyMzU1MDQ2NTUxNjUwLG51bGwsW1swLFs3N11dXV1dLFtbMzQsMzUsbnVsbCw1MTI1MTMwNjk3MzgyMDQsMCxudWxsLFtbMCxbMTBdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDIyMzAzOTY1MjU3NTcxOCwzNTksW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3MjMwNjQyNzI1NDAyNjIsbnVsbCxbWzAsWzQyXV1dXV0sW1szNSwzNSxudWxsLDQ5NjQ3NTI5MTg2MTgxNiwwLG51bGwsW1swLFsxM11dXV1dXSxbMCwwLGZhbHNlLG51bGwsNjkxNDQ2OTUxMjM3NDQ5LDM2MCxbWzIyLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDkwNDUzNDY0NTk0MDc2OCxudWxsLFtbMCxbNzhdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDMyNjg3NjMzNTI0MTIxOSwzNjEsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzM4MTQ2NTA1NTQxNjY3LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsyXV1dXV0sW1syMiwzNSxudWxsLDQ5MzI4OTE2MDM0NDA0MiwwLG51bGwsW1swLFsxMDZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDE1NjEzOTA0ODIyNTQyMCwzNjIsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsODI3MTg5OTE1MTAyNjgyLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFs2XV1dXV0sW1syMiwzNSxudWxsLDIxMDUyNzg2NzU3NzU2NSwwLG51bGwsW1swLFs2Ml1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTc5Njc4Nzk5NjgzMzU0LDM2MyxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3MTg4MDQ3Nzk5MzQzOTcsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzEzXV1dXV0sW1syMiwzNSxudWxsLDIyMjY1NjMzOTkyMzg4NywwLG51bGwsW1swLFs3MF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTI0NjM4NTY5NzMxNTAyLDM2NCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw4NzQyNzY1Njc0OTEzOTcsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzExXV1dXV0sW1syMiwzNSxudWxsLDM2ODM2MDA1NDE1NjM2MywwLG51bGwsW1swLFs1OV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODU4MDc5MjE2NTQ5OTI4LDM2NSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyMjcwNjc1ODY2MTk0NjEsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzldXV1dXSxbWzIyLDM1LG51bGwsNDE2MDMxNTk5ODc3NTM3LDAsbnVsbCxbWzAsWzc3XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0NzA4NDQ4MjE0ODk1ODUsMzY2LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDU1MTUwMDU3ODI2MTg4NyxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMTVdXV1dXSxbWzIyLDM1LG51bGwsNzU5MTE1MjI2MTU1NTM1LDAsbnVsbCxbWzAsWzU4XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5NTYyNDI4MDYwMDM5MDcsMzY3LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDE0OTk5NDU2NDk3MDM1NSxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMzRdXV1dXSxbWzIyLDM1LG51bGwsMjczMDA3MDI5OTY4NjQ0LDAsbnVsbCxbWzAsWzYxXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDEzMDIyNDQ3OTIyMjgyNCwzNjgsW1sxMywzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3MjAzOTk4ODgzODAyODYsbnVsbCxbWzAsWzY1XV1dXV0sW1sxMywzNSxudWxsLDE4NDQ4NzgzOTcwNDI1MSwwLG51bGwsW1swLFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4OTcyODczMTYxMTk0NzYsMzY5LFtbMzQsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsMTA0NjUzNjAyMzg4NTkyLG51bGwsW1swLFs2M11dXV1dLFtbMzQsMzUsbnVsbCw5OTM0ODYzNjU5NTA1NjAsMCxudWxsLFtbMCxbMzRdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDIxMzA1ODkxNDM0NDcwOCwzNzAsW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw0NDQ2NjQ1MDIyMDg4ODcsbnVsbCxbWzAsWzY0XV1dXV0sW1szNCwzNSxudWxsLDg1NTM5NjUwODAwNjEyMSwwLG51bGwsW1swLFs2MF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTUxMTA4MzAxOTAyMTk1LDM3MSxbWzM1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDM1MDU1NzU1OTQ4MzM2NixudWxsLFtbMCxbNTVdXV1dXSxbWzM1LDM1LG51bGwsNjc4NzQ5OTM4MTE1NjEwLDAsbnVsbCxbWzAsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQ5OTM0ODg2MTQ1MzMzOSwzNzIsW1syMiwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxNDU4MTA2MTUxOTA0MTcsbnVsbCxbWzAsWzY1XV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw2OTMxNjkzMTQ2OTM3NjgsMzczLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDEzODE5MjYxNDUyNjM2NyxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMjIsMzUsbnVsbCwzMDkwNjg4MjYxOTExNDEsMCxudWxsLFtbMCxbNjBdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDM5MzYwMTgxOTA3Mjk0NiwzNzQsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTkyNTg3MDg1ODU4NTI3LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFs2XV1dXV0sW1syMiwzNSxudWxsLDk3MDgwMDY3MDY0NjE4NywwLG51bGwsW1swLFs3Ml1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODgzNDYyNjcwMzA1MzY4LDM3NSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyNjAxMTk1NjU3OTc5NzcsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzEzXV1dXV0sW1syMiwzNSxudWxsLDgwODQyNjg4NDYzNTA1NSwwLG51bGwsW1swLFs3M11dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjY2ODQ1NDA5MjgxNjkwLDM3NixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0NTA4MzQyNjgwODI1NDIsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzExXV1dXV0sW1syMiwzNSxudWxsLDQ5NDQ4OTQ4MDUyNTQ5MCwwLG51bGwsW1swLFszOV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTgxMjU1MjY2OTkyODEyLDM3NyxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw4NTM3MTU3Njg3NjkxNzUsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzldXV1dXSxbWzIyLDM1LG51bGwsMTY5NTE3Njg4NzEyMzEwLDAsbnVsbCxbWzAsWzEwOF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzczNjM4MTc5NDk4NDA1LDM3OCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2NTgwNjgzNTg2MzQ0MTksbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzE1XV1dXV0sW1syMiwzNSxudWxsLDk3MzUxNTI3MDcyMzg3NiwwLG51bGwsW1swLFsxMDldXV1dXV0sWzAsMCxmYWxzZSxudWxsLDUyNTY0MjMxMzUzODEwOSwzNzksW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjA0MjUxMTQ3NjAyNzk1LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFszNF1dXV1dLFtbMjIsMzUsbnVsbCwxMzY5Mzg1NTIzOTcyMjcsMCxudWxsLFtbMCxbMTBdXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTk0Mzk2MzYxMDk2MzE3LDM4MCxbWzEzLDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDc1NzM5NDMxNDk4NjQzNSxudWxsLFtbMCxbNThdXV1dXSxbWzEzLDM1LG51bGwsMjcwMzg2ODAwOTQ0NTU3LDAsbnVsbCxbWzAsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQ0NjIxNDE0NTgwMzAxMSwzODEsW1szNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw4MTg3OTM0Mzc2MjY1ODYsbnVsbCxbWzAsWzY4XV1dXV0sW1szNCwzNSxudWxsLDcwMzU4OTMwMTMzMjg4MCwwLG51bGwsW1swLFsxMV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjQ4MDM5OTc0NjMxMzA2LDM4MixbWzM0LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDQwMDA4OTkwODI1OTM0MCxudWxsLFtbMCxbNzBdXV1dXSxbWzM0LDM1LG51bGwsMzcwMTA2NjA3Mjg1NjUzLDAsbnVsbCxbWzAsWzZdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDc5OTcwODk1NzIzMzk1MiwzODMsW1szNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwxMzAyMjg4MjQyMjE4NDUsbnVsbCxbWzAsWzU5XV1dXV0sW1szNSwzNSxudWxsLDQ0MjM1MTU5Njg3Mjc2NSwwLG51bGwsW1swLFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw1MjAyMjM1ODI5MDAzOTEsMzg0LFtbMjIsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNjAzNTQ0Nzk2ODMxNDcwLG51bGwsW1swLFs2MV1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNTE5MDI0OTQ2NzA3MzMwLDM4NSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2NDAwNzMzNDg5MjA5ODYsbnVsbCxbWzExLDQ0NzI5OTEzNjQ2NDAxOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzIyLDM1LG51bGwsMTI2NjYzODcxNzY4MTIyLDAsbnVsbCxbWzAsWzYwXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4MzE1NzE2NDQ0NjgzMjAsMzg2LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDk5NTg0NjYzMjE4NDkyMCxudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbNl1dXV1dLFtbMjIsMzUsbnVsbCw2MDY4Njk1MjE0Nzc1MjEsMCxudWxsLFtbMCxbNzJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDQ3Mjg2MDU4MTI4Mjk5NCwzODcsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjE2NDk5MTA3NzQyNjMxLG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxM11dXV1dLFtbMjIsMzUsbnVsbCw5MzMzMzIwMzk3MzM4NzMsMCxudWxsLFtbMCxbNzNdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDEyMzQyMjU4OTg1MDMyMSwzODgsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzcyNTgzOTYzNjcyMDk1LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxMV1dXV1dLFtbMjIsMzUsbnVsbCw2ODMwOTAxODk4NjIxMTIsMCxudWxsLFtbMCxbMzldXV1dXV0sWzAsMCxmYWxzZSxudWxsLDYwMDkyMzI3MzE4NjQ5OSwzODksW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTg0OTU1MTE3NjI0NDY1LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFs5XV1dXV0sW1syMiwzNSxudWxsLDIwMTY2NDUyNzMzOTcwNywwLG51bGwsW1swLFsxMDhdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDM3NjUyNTQwMDE0ODg4OCwzOTAsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNTcxNzkyODcxODcwMDM5LG51bGwsW1sxMSw0NDcyOTkxMzY0NjQwMThdLFs4LDBdLFs3LFsxNV1dXV1dLFtbMjIsMzUsbnVsbCw2NTgzMTkxNjA4ODMwOTMsMCxudWxsLFtbMCxbMTA5XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxODY0OTMxMDkzNDQ5NjYsMzkxLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDk1NzQ1NzEwOTk0NzU1MixudWxsLFtbMTEsNDQ3Mjk5MTM2NDY0MDE4XSxbOCwwXSxbNyxbMzRdXV1dXSxbWzIyLDM1LG51bGwsODEwMDAxNzQ1ODUwODk2LDAsbnVsbCxbWzAsWzEwXV1dXV1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxMjM0MDU4NjQ0NjEyMDksMzkyLFtbNiwzNyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3ODU1NzU0MDYwNjczOTAsbnVsbCxbWzAsWzE1XV1dXV0sW1s2LDk5LG51bGwsNzg4MDY0ODk1Nzg2NzUwLDAsbnVsbCxbWzcsWzQzLFszLDE3MjI0MTI0MDczMTE2Nl1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDcwNTAyODk5MzQxODY2OCwzOTMsW1s2LDM3LG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDgyMDc3Mjk2OTkzNjY1NixudWxsLFtbMCxbMjBdXV1dXSxbWzYsOTksbnVsbCw1NjkxMjU0MDQzMDA0NTksMCxudWxsLFtbNyxbNDMsWzMsNzY4MzEyMjE2Njg2MzgxXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTA1MjIxMzExODEzMzY0LDM5NCxbWzE1LDEwMCwiVGltZXIiLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTYxMTg5MjIyNDYwMTIzLG51bGwsW1sxLFsxMTBdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDYzNzUxMDEyMTA4MzkwMCwzOTUsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMzY4Nzk4MDg3ODE3ODcwLG51bGwsW1sxMSw0NjY0NDUxNTE5OTcxMTFdLFs4LDBdLFs3LFsyXV1dXV0sW1szLDg0LG51bGwsMzI1ODMwNTQxOTQ3NDE4LDEsbnVsbF1dXV1dLFswLDAsZmFsc2UsbnVsbCw5OTc3NjQ3NDUzMjc3NzEsMzk2LFtbMTIsMTAxLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDMwNzI2NjkxNjY4NjE4MixudWxsLFtbNCwxN11dXSxbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQxMzc0MzU1MzAxNDAzNyxudWxsLFtbMTEsMTEzNTU0ODUwMjIyODU4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMTUsMTAyLCJUaW1lciIsNDczNDY5MzAxODg3MTY5LDAsbnVsbCxbWzEsWzExMF1dXV0sWzE1LDEwMywiVGltZXIiLDUyOTg1NTQ1MTQyOTYwMywwLG51bGwsW1swLFs2XV0sWzMsMF0sWzEsWzExMF1dXV0sWy0xLDEwNCxudWxsLDM1MTAxNjY0NjQ0NzY4MiwwLG51bGwsW1s0LDEyXV1dLFstMSw1OSxudWxsLDc2NDIxOTA2MDYwMzY4MywwLG51bGwsW1sxMSw3NTc1ODgwMjEwNzgxNDNdLFs3LFs2XV1dXSxbMTcsMTA1LG51bGwsNjg0NzAxODg1MjI0MDc3LDAsbnVsbCxbWzMsMF1dXSxbLTEsMTA2LG51bGwsNDI0NzYxMDUzNTU4NTY5LDAsbnVsbCxbWzAsWzM3XV1dXSxbLTEsMTA3LG51bGwsMTQ1NjkwNTI1MzI3NjY5LDAsbnVsbCxbWzQsMTVdLFswLFs2XV1dXV0sW1swLDAsZmFsc2UsbnVsbCwyMzMxNTc2NDQxMzE2MjQsMzk3LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDEyODIwOTQ0MDE1MzAzNSxudWxsLFtbMTEsNDg4NTk2NjIyNzk0NjM4XSxbOCwwXSxbNyxbMl1dXV1dLFtbMSw2NixudWxsLDQ0MjY0Nzk5NTEyOTQ2OSwwLG51bGwsW1syLFsiZmFucyIsZmFsc2VdXSxbMywwXSxbMCxbMl1dLFswLFsyXV0sWzEsWzI0XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw2Nzc4MjgxNzc2ODg4MjcsMzk4LFtbMTcsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNDk1OTg4MzI4MDYxNzA5LG51bGwsW1swLFs2Ml1dXV1dLFtbLTEsMTA4LG51bGwsNTQ1OTMxOTc1MTgzOTA4LDAsbnVsbCxbWzExLDc2ODMxMjIxNjY4NjM4MV0sWzcsWzZdXV1dLFstMSw1OSxudWxsLDU0MTYxNDEzMDQ2NTEzMiwwLG51bGwsW1sxMSw3MzU3Nzg2MzM0OTQ4NjNdLFs3LFsyXV1dXV0sW1swLDAsZmFsc2UsbnVsbCw3MDMzMDc5MTA5MzQ5MjYsMzk5LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDY4MDQyNTMyMjI4NjIzMCxudWxsLFtbMTEsNzY4MzEyMjE2Njg2MzgxXSxbOCwxXSxbNyxbMTVdXV1dXSxbWy0xLDU5LG51bGwsNTM2NjAwNzU3MjMxOTE1LDAsbnVsbCxbWzExLDExMzU1NDg1MDIyMjg1OF0sWzcsWzZdXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODQ5MDYwMjc5OTQ4Njc1LDQwMCxbWzE3LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDYwMTYzNDIzNzk3NjIzNSxudWxsLFtbMCxbMTFdXV1dXSxbWy0xLDEwOCxudWxsLDIyNjU4MTcxOTExMzA1MywwLG51bGwsW1sxMSwxNzIyNDEyNDA3MzExNjZdLFs3LFs2XV1dXSxbLTEsNTksbnVsbCwxMjkxNDQ2MTc3ODU0NDksMCxudWxsLFtbMTEsNzM1Nzc4NjMzNDk0ODYzXSxbNyxbNl1dXV1dLFtbMCwwLGZhbHNlLG51bGwsNTc0NzMzMTYzMjAxMDc3LDQwMSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1MDQxMDA4NTA0OTEzNjQsbnVsbCxbWzExLDE3MjI0MTI0MDczMTE2Nl0sWzgsMV0sWzcsWzE1XV1dXV0sW1stMSw1OSxudWxsLDE4MjM5Nzg2MzQ4MjMyMywwLG51bGwsW1sxMSwxMTM1NTQ4NTAyMjI4NThdLFs3LFs2XV1dXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTE2NTM4Mzg5NjEzOTAyLDQwMixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2NDY3ODE1ODU4MjA4MDIsbnVsbCxbWzExLDExMzU1NDg1MDIyMjg1OF0sWzgsMF0sWzcsWzZdXV1dLFstMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjY4MDEzODI1MDM1OTE3LG51bGwsW1sxMSw4NTM4NDc2OTQ2NDAyMjNdLFs4LDBdLFs3LFsyXV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw1NzU3MjAwNjIzMjkzOTQsNDAzLFtbLTEsMjEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDEwNTY3MzgzMjk3MTYxOCxudWxsXV0sW1stMSw3MixudWxsLDYwNDk2MDc0MDM5MjcxOSwyLG51bGwsW1swLFs2XV1dXSxbLTEsNTksbnVsbCwxNTk5NjU0OTE2NDMwOTYsMCxudWxsLFtbMTEsNzU3NTg4MDIxMDc4MTQzXSxbNyxbMl1dXV0sWzE3LDEwNSxudWxsLDMxMjMzMzQ2MDE0NjAyNywwLG51bGwsW1szLDFdXV0sWy0xLDEwNixudWxsLDc2OTE4MDE1NjM3Nzc0MSwwLG51bGwsW1swLFs2XV1dXSxbLTEsMTA5LG51bGwsNzIxODQzOTUyOTUzMDMwLDAsbnVsbCxbWzAsWzZdXV1dLFstMSw1OSxudWxsLDgyNDc1OTc0NTM3MTM5MywwLG51bGwsW1sxMSwxMTM1NTQ4NTAyMjI4NThdLFs3LFsyXV1dXSxbLTEsNTksbnVsbCwyMjEzMTMzNDcwNzMxMjYsMCxudWxsLFtbMTEsNjE1MDI3NjUwODU5MjIwXSxbNyxbMl1dXV0sWy0xLDczLG51bGwsODM3MzE0NzU1NDk1MjU3LDAsbnVsbF1dXV1dLFswLDAsZmFsc2UsbnVsbCw2NTgyNzUxMDEwODg3NTAsNDA0LFtbLTEsMTEwLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1NjM5NTczMDY4NDg3ODksbnVsbF0sWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwxMDQ2MDMxMjA4MTk5NTUsbnVsbCxbWzExLDc1NzU4ODAyMTA3ODE0M10sWzgsMF0sWzcsWzZdXV1dXSxbWzE1LDExMSxudWxsLDE3ODY5NDA4Njc5NDYyNSwwLG51bGwsW1swLFsxMTEsWzEsMTUsNDMsZmFsc2VdLFsxLDEyLDQzLGZhbHNlXV1dLFswLFsxMTEsWzEsMTUsNDQsZmFsc2VdLFsxLDEyLDQ0LGZhbHNlXV1dXV0sWy0xLDEwOSxudWxsLDc1NTEwMzM5OTg2ODY4MCwwLG51bGwsW1swLFsxMTIsWzQsMTEyXV1dXV1dXV1dLFswLDAsdHJ1ZSxudWxsLDM5ODMwODk0ODY1MjI1OCw0MDUsW1sxMiw3OCxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNTE2MzI2MzkzMTI5NzU4LG51bGwsW1s4LDJdLFswLFsyXV1dXSxbMTIsNzgsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDExOTE1ODQ2OTI0MzQ0MyxudWxsLFtbOCw0XSxbMCxbMzEsWzQsMjhdXV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw0ODE0MjI5NDk3NTAwNjcsNDA2LFtbLTEsMjEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDY4NTIxODQ1NjQwODU3MCxudWxsXV0sW1stMSw3MixudWxsLDk5NDAwMjkzOTg0OTcwMiwyLG51bGwsW1swLFs2XV1dXSxbLTEsNTksbnVsbCw5NjM4MzY0ODkyOTk4OTUsMCxudWxsLFtbMTEsNjE1MDI3NjUwODU5MjIwXSxbNyxbMl1dXV0sWy0xLDczLG51bGwsNjQ1ODQ1Njg2MDQxMDk5LDAsbnVsbF1dXV1dLFswLDAsZmFsc2UsbnVsbCw2ODUwOTgyMzU4OTgzNzEsNDA3LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQzMTg0MDE3MDcxMDgxMCxudWxsLFtbMTEsMTEzNTU0ODUwMjIyODU4XSxbOCwwXSxbNyxbMl1dXV0sWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1NTkwMDM2NTI0NTU5MDIsbnVsbCxbWzExLDg1Mzg0NzY5NDY0MDIyM10sWzgsMF0sWzcsWzJdXV1dXSxbXSxbWzAsMCx0cnVlLG51bGwsMjAyNjU1NjIyNDI4MDc4LDQwOCxbWzEzLDc4LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2MDUyNTkzMjI2ODQzMzQsbnVsbCxbWzgsMl0sWzAsWzEwNF1dXV0sWzEzLDc4LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1MTk5MTg5Mjc2NDM1MDAsbnVsbCxbWzgsNF0sWzAsWzExMyxbNCwyOF1dXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDY0NzQ2MDE3ODEwNzA0OSw0MDksW1sxMywxMTMsbnVsbCwwLGZhbHNlLHRydWUsZmFsc2UsNzEyMjkyNzcyMTUzMjg5LG51bGxdXSxbWzEzLDI0LG51bGwsNDY4ODEyMjA3MzE0MzQ2LDAsbnVsbF1dXV1dLFswLDAsdHJ1ZSxudWxsLDIyMjIyODM5Mzg5MDE2MSw0MTAsW1syMiw3OCxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjMwNTIxOTIyODMyNzU0LG51bGwsW1s4LDJdLFswLFsxMDRdXV1dLFsyMiw3OCxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMTc1MDcyMDY2Mzk2NjgwLG51bGwsW1s4LDRdLFswLFsxMTMsWzQsMjhdXV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw0MjA5NTQ0NzY4MzY2OTgsNDExLFtbMTMsMTEzLG51bGwsMCxmYWxzZSx0cnVlLGZhbHNlLDIxMTY4NDEzMjgyODU4NCxudWxsXV0sW1syMiwyNCxudWxsLDI5MDI2ODQxNDQ4MDgxOSwwLG51bGxdXV1dXSxbMCwwLHRydWUsbnVsbCw4MTU5NDIzMjY1NjY3NjcsNDEyLFtbMzUsNzgsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDEyMzMxNTgxNjgzMDQ5MixudWxsLFtbOCwyXSxbMCxbMTA0XV1dXSxbMzUsNzgsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDU3MTUwNDA4NTk4NDcyMSxudWxsLFtbOCw0XSxbMCxbMTEzLFs0LDI4XV1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNDUyODI0OTIxODgyNTY2LDQxMyxbWzEzLDExMyxudWxsLDAsZmFsc2UsdHJ1ZSxmYWxzZSw2MjkyMDE0NjI0NDQ1MjcsbnVsbF1dLFtbMzUsMjQsbnVsbCw2NTI2NDE2NTgyMjk4OTEsMCxudWxsXV1dXV0sWzAsMCx0cnVlLG51bGwsMzg5MTUyMTU4NDQyNzI2LDQxNCxbWzM0LDc4LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3NTMzOTU0MDEzODAxNDQsbnVsbCxbWzgsMl0sWzAsWzEwNF1dXV0sWzM0LDc4LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0NTgwMDgyMTEzMjY1MzYsbnVsbCxbWzgsNF0sWzAsWzExMyxbNCwyOF1dXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDg5NzE5MzkxNjYzMjcwOSw0MTUsW1sxMywxMTMsbnVsbCwwLGZhbHNlLHRydWUsZmFsc2UsODI5Nzc2NTk2NzY1MTM0LG51bGxdXSxbWzM0LDI0LG51bGwsMzU3OTMzNjUyODIwMDQ1LDAsbnVsbF1dXV1dXV0sWzAsMCx0cnVlLG51bGwsMTIxNzc5MjA2ODIwMTg1LDQxNixbWzM1LDEwMSxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw3NDE5NjAyNzQwNDIzMTEsbnVsbCxbWzQsMTJdXV0sWzEyLDEwMSxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw2NjY2ODAzNjEwMjYwNzcsbnVsbCxbWzQsMjJdXV0sWzEyLDEwMSxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw0NzMxNzM0MDMyMjcwMTEsbnVsbCxbWzQsMTNdXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsMTU1MTI5MTA0MTQ1NjMwLDQxNyxbWzEyLDExNCwiUGh5c2ljcyIsMCxmYWxzZSxmYWxzZSxmYWxzZSw0NTMwMjU5Njg5OTQxMjMsbnVsbCxbWzMsMF0sWzgsNF0sWzAsWzc1XV1dXSxbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDIxMTAyMjYzNjA4NDIwNyxudWxsLFtbMTEsNjE1MDI3NjUwODU5MjIwXSxbOCwwXSxbNyxbMl1dXV1dLFtbLTEsNTksbnVsbCw2Mjk3NTM5MDE0MTk2OTYsMCxudWxsLFtbMTEsNjE1MDI3NjUwODU5MjIwXSxbNyxbNl1dXV1dLFtbMCwwLGZhbHNlLG51bGwsNjIxMTM2MzEyNzA3NjQwLDQxOCxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5MTM1MTIyNTU1NDgyNjgsbnVsbCxbWzExLDQ4ODU5NjYyMjc5NDYzOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzEsNjYsbnVsbCw3NTg2NDUyNjkzMjE5NDgsMCxudWxsLFtbMixbImJsb3dfMDEiLGZhbHNlXV0sWzMsMF0sWzAsWzJdXSxbMCxbMl1dLFsxLFsyNF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNDIyNzkwOTg0OTkwNDQ4LDQxOSxbXSxbWy0xLDcyLG51bGwsODI2ODMyNzI5OTczOTg0LDIsbnVsbCxbWzAsWzU2XV1dXSxbLTEsNTksbnVsbCwyODA1MjM1NDk0MTgxNjcsMCxudWxsLFtbMTEsNjE1MDI3NjUwODU5MjIwXSxbNyxbMl1dXV1dXV1dXV0sWzAsMCx0cnVlLG51bGwsODUwNjUxNDkzMzM0NjQzLDQyMCxbWzM1LDEwMSxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw1MzU5MjMyNzQwNzUyNDksbnVsbCxbWzQsMTJdXV0sWzEyLDEwMSxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwyODMwNzYzMzg3NjIyOTIsbnVsbCxbWzQsMjJdXV0sWzEyLDEwMSxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwyMDAxODIwNTk1MzI3NjgsbnVsbCxbWzQsMTNdXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsMjU1NDg2ODkyMTQ2OTQyLDQyMSxbWzEyLDExNCwiUGh5c2ljcyIsMCxmYWxzZSxmYWxzZSxmYWxzZSw2ODgzNDE1NTQxMzMzNDgsbnVsbCxbWzMsMF0sWzgsMl0sWzAsWzY3XV1dXSxbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM5MTMzMjY0ODIzNTE3OCxudWxsLFtbMTEsNjE1MDI3NjUwODU5MjIwXSxbOCwwXSxbNyxbMl1dXV1dLFtbLTEsNTksbnVsbCw5ODk0MjY4NDA0MTM1MjcsMCxudWxsLFtbMTEsNjE1MDI3NjUwODU5MjIwXSxbNyxbNl1dXV1dLFtbMCwwLGZhbHNlLG51bGwsNDUxNDE4NjQ3NTQ2OTkzLDQyMixbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1NDE1NTc4Mzc0Mjk1NjEsbnVsbCxbWzExLDQ4ODU5NjYyMjc5NDYzOF0sWzgsMF0sWzcsWzJdXV1dXSxbWzEsNjYsbnVsbCw2NjIzOTYzMTE2MjIwNjYsMCxudWxsLFtbMixbImJsb3dfMDEiLGZhbHNlXV0sWzMsMF0sWzAsWzJdXSxbMCxbMl1dLFsxLFsyNF1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNjk5NjI3NzE5MDYyODA2LDQyMyxbXSxbWy0xLDcyLG51bGwsMjQzMTIyMzc1ODk0MDQzLDIsbnVsbCxbWzAsWzU2XV1dXSxbLTEsNTksbnVsbCwzNzE0MTM4NjMyMjYzMzQsMCxudWxsLFtbMTEsNjE1MDI3NjUwODU5MjIwXSxbNyxbMl1dXV1dXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTU4MDkzNzY1NjY2MjE2LDQyNCxbWy0xLDExNSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjY0MTc3Nzk2OTc0NTEzLG51bGwsW1s1LFsxXV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCwyMjQ4NzAwMDM0MzM1MjMsNDI1LFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDQ1ODIyNzUwNjAwNzc5NSxudWxsLFtbMTEsODUzODQ3Njk0NjQwMjIzXSxbOCwwXSxbNyxbNl1dXV0sWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw5OTE2ODI2NzQ3MjQyMDMsbnVsbCxbWzExLDEyMDI0MTU3NzM0OTQ2Ml0sWzgsMF0sWzcsWzZdXV1dLFstMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNDkxMDA0NjgxOTc4NTY5LG51bGwsW1sxMSwxNzIyNDEyNDA3MzExNjZdLFs4LDBdLFs3LFsxNV1dXV1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNDE4Nzk0NTgzMTg4NTU4LDQyNixbWy0xLDIxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwxNzgwMzI3MzEyMDg3MjEsbnVsbF1dLFtbLTEsMTA4LG51bGwsMzEzOTEwNjczODg2NDMwLDAsbnVsbCxbWzExLDczMTk2MzQxMzAwNjIyMV0sWzcsWzZdXV1dLFszLDExNixudWxsLDk5MDE2MjU0NTQyMjk3OCwwLG51bGwsW1swLFs0MyxbMyw3MzE5NjM0MTMwMDYyMjFdXV1dXSxbMywxMTcsbnVsbCw3ODMwOTcyNTkwNDk4ODcsMSxudWxsLFtbMTYsZmFsc2VdXV1dXV1dXV0sWzQsWyJuZXdnYW1lIiwwLFtdLHRydWUsZmFsc2UsZmFsc2VdLGZhbHNlLG51bGwsNzM4Mjc4ODY4MzIwMzkwLDQyNyxbXSxbWzEsMTE4LG51bGwsODcwMjg4MTA3OTYyNjgwLDAsbnVsbF0sWy0xLDU5LG51bGwsODM4ODU4NzMzOTcwNzI2LDAsbnVsbCxbWzExLDg1Mzg0NzY5NDY0MDIyM10sWzcsWzJdXV1dLFstMSw1OSxudWxsLDI4OTgxMzMyMzA3MDI5MywwLG51bGwsW1sxMSwxNzIyNDEyNDA3MzExNjZdLFs3LFsyXV1dXSxbLTEsNTksbnVsbCw0NTI0MTk4NjQwODkyOTQsMCxudWxsLFtbMTEsNzY4MzEyMjE2Njg2MzgxXSxbNyxbMl1dXV0sWy0xLDU5LG51bGwsNTM3MTM4MjkxMDEwMjAyLDAsbnVsbCxbWzExLDQxODkwOTQ5MzEwNTc2OV0sWzcsWzJdXV1dLFstMSwxMDYsbnVsbCw2NzEyMzA1ODQ1OTg1OTMsMCxudWxsLFtbMCxbNl1dXV0sWy0xLDEwOSxudWxsLDM1ODg1MjgyMDEwMDc0MywwLG51bGwsW1swLFs2XV1dXSxbLTEsNTksbnVsbCw4MTI2ODc1MjY5MDEzODMsMCxudWxsLFtbMTEsNzU3NTg4MDIxMDc4MTQzXSxbNyxbMl1dXV0sWy0xLDU5LG51bGwsNDExNjEyNDk5OTM3NTIwLDAsbnVsbCxbWzExLDExMzU1NDg1MDIyMjg1OF0sWzcsWzJdXV1dLFstMSw1OSxudWxsLDY1ODIyNzY3MDI5ODU4OCwwLG51bGwsW1sxMSw2MTUwMjc2NTA4NTkyMjBdLFs3LFsyXV1dXSxbLTEsNzMsbnVsbCw0Mjc4NjIxNzIxMzEzNTgsMCxudWxsXV1dXV0sWyJFVkVOVCBtZW51IixbWzIsIkVWRU5UIHdpbmRvdzEiLGZhbHNlXSxbMSwiZ2FtZSIsMCwwLGZhbHNlLGZhbHNlLDI4Mjc0NzAwMTEzMjM3NyxmYWxzZSw2M10sWzEsIm1haW5tZW51IiwwLDAsZmFsc2UsZmFsc2UsMTI0NTA3NTUzODA2NzYwLGZhbHNlLDY0XSxbMSwic2NvcmVibHVlIiwwLDAsZmFsc2UsZmFsc2UsMTcyMjQxMjQwNzMxMTY2LGZhbHNlLDY1XSxbMSwic2NvcmVyZWQiLDAsMCxmYWxzZSxmYWxzZSw3NjgzMTIyMTY2ODYzODEsZmFsc2UsNjZdLFsxLCJyYW5kb21iYWxsIiwwLDAsZmFsc2UsZmFsc2UsNzM1Nzc4NjMzNDk0ODYzLGZhbHNlLDY3XSxbMSwicmFuZG9tY2V0Y2EiLDAsMCxmYWxzZSxmYWxzZSwzNzU2Mzg1NjcwNzgxMDgsZmFsc2UsNjhdLFsxLCJyYW5kb21ucGMiLDAsMCxmYWxzZSxmYWxzZSw4NzQ5MjU3MTM4MTQwNzYsZmFsc2UsNjldLFsxLCJyYW5kb21iYWNrZ3JvdW5kIiwwLDAsZmFsc2UsZmFsc2UsNjc3ODMyNjA5MzQzMTgxLGZhbHNlLDcwXSxbMSwic2Nyb2xsIiwwLDAsZmFsc2UsZmFsc2UsNzU3NTg4MDIxMDc4MTQzLGZhbHNlLDcxXSxbMSwic3RhcnQxIiwwLDAsZmFsc2UsZmFsc2UsNDE4OTA5NDkzMTA1NzY5LGZhbHNlLDcyXSxbMSwid2luIiwwLDAsZmFsc2UsZmFsc2UsODUzODQ3Njk0NjQwMjIzLGZhbHNlLDczXSxbMSwiZ2FsIiwwLDAsZmFsc2UsZmFsc2UsMTEzNTU0ODUwMjIyODU4LGZhbHNlLDc0XSxbMSwicmFuZG9tYmFsbHZpcyIsMCwwLGZhbHNlLGZhbHNlLDU2MTI1MDc0MDYwNjk5NSxmYWxzZSw3NV0sWzEsInNldHRvdWNoIiwwLDAsZmFsc2UsZmFsc2UsNTgzNTM3NzY5NTQ5MTcyLGZhbHNlLDc2XSxbMSwid2l0aHBjIiwwLDAsZmFsc2UsZmFsc2UsMTIwMjQxNTc3MzQ5NDYyLGZhbHNlLDc3XSxbMSwiYmVoYXZpb3IiLDAsMCxmYWxzZSxmYWxzZSwzOTM5NzkwNTM3ODc5NTMsZmFsc2UsNzhdLFsxLCJiZWhhdmlvcjIiLDAsMCxmYWxzZSxmYWxzZSw3MTU2ODM0NTkwNTUwNDUsZmFsc2UsNzldLFsxLCJzb3VuZG1haW4iLDAsMCxmYWxzZSxmYWxzZSw0ODg1OTY2MjI3OTQ2MzgsZmFsc2UsODBdLFsxLCJyYW5kb21oZWFkIiwwLDAsZmFsc2UsZmFsc2UsNDQ3Mjk5MTM2NDY0MDE4LGZhbHNlLDgxXSxbMSwicmFuZG9td2luZCIsMCwwLGZhbHNlLGZhbHNlLDI4NDkyNzk0NjMyMzA5NSxmYWxzZSw4Ml0sWzEsImZpcnN0dGltZSIsMCwwLGZhbHNlLGZhbHNlLDg2ODQ1NjY4NTc3MzgwMyxmYWxzZSw4M10sWzEsImxhbmd1YWdlMiIsMCwwLGZhbHNlLGZhbHNlLDQ1MTM2ODY4Mzk0NjY0OCxmYWxzZSw4NF0sWzEsIkFEUyIsMCwtMSxmYWxzZSxmYWxzZSw0NjY0NDUxNTE5OTcxMTEsZmFsc2UsODVdLFsxLCJtb2JpbGUiLDAsMCxmYWxzZSxmYWxzZSwyODQyMjIzOTEwNDc3ODIsZmFsc2UsODZdLFswLDAsZmFsc2UsbnVsbCwxNzY0Mzk5NTI1NTAyMzEsMSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0Mzc2MjE3MjU5ODYwMDEsbnVsbCxbWzExLDg2ODQ1NjY4NTc3MzgwM10sWzgsMF0sWzcsWzJdXV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDkxNDU1NjQ2MDYzMDIyMywyLFtbLTEsNjEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDU0NTUzMjQ1ODgyNjE4OCxudWxsLFtbNyxbMTE0LFs0LDExOV0sWzEsMiwxMjAsdHJ1ZV0sWzQsMTE5XSxbMSwyLDEyMCx0cnVlXSxbNCwxMTldLFsxLDIsMTIwLHRydWVdLFs0LDExOV0sWzEsMiwxMjAsdHJ1ZV1dXSxbOCwwXSxbNyxbNl1dXV1dLFtbLTEsNTksbnVsbCwzOTUxNTAxNTQ5Mjc3NTMsMCxudWxsLFtbMTEsNDUxMzY4NjgzOTQ2NjQ4XSxbNyxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTQzMDc2ODUzMDUzNTA3LDMsW1stMSw2MSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNzU1MjM5MzEzODQzMzEzLG51bGwsW1s3LFsxMTUsWzQsMTE5XSxbMSwyLDEyMCx0cnVlXSxbNCwxMTldLFsxLDIsMTIwLHRydWVdLFs0LDExOV0sWzEsMiwxMjAsdHJ1ZV0sWzQsMTE5XSxbMSwyLDEyMCx0cnVlXV1dLFs4LDBdLFs3LFs2XV1dXV0sW1stMSw1OSxudWxsLDI2NjY2NzgyMjgwNTk4OSwwLG51bGwsW1sxMSw0NTEzNjg2ODM5NDY2NDhdLFs3LFsyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwyOTcwMDQ3NjIyMzgxMTIsNCxbWzUsMTIxLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2MzQ2NDQxNDU5ODQ2ODQsbnVsbF1dLFtbLTEsNTksbnVsbCwzODc3NTk5ODUzNTkzNDgsMCxudWxsLFtbMTEsMjg0MjIyMzkxMDQ3NzgyXSxbNyxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTc0OTU5NTc1NTc3MjE3LDUsW10sW1stMiwic2VsZWN0bGFuZ3VhZ2UiLG51bGwsNzk2ODM2NjM3MTYzMDc5LDAsbnVsbF0sWzMsODQsbnVsbCw2MjU4NDQ5NjY5NTU0MTIsMSxudWxsXSxbLTEsNTksbnVsbCw2ODU0MDA0ODkxMjQ1MDAsMCxudWxsLFtbMTEsODY4NDU2Njg1NzczODAzXSxbNyxbNl1dXV1dXV1dLFsxLCJzY29yZSIsMCwwLGZhbHNlLGZhbHNlLDczMTk2MzQxMzAwNjIyMSxmYWxzZSw4N10sWzEsImxvYWQiLDAsMCxmYWxzZSxmYWxzZSw0ODM3NTkzNDk1NTMwNjAsZmFsc2UsODhdLFswLDAsZmFsc2UsbnVsbCw1OTc3ODI3MTc1NDQ5OTAsNixbWy0xLDQwLG51bGwsMSxmYWxzZSxmYWxzZSxmYWxzZSwyNDUzNzE4NDI2NjQ0MDcsbnVsbF1dLFtbMjUsMjMsbnVsbCw3Njc3Nzc5NzMxNDUzNDUsMCxudWxsLFtbMywwXSxbMSxbM11dXV0sWzE0LDIzLG51bGwsMjkyNjk0OTU4NzI3MjkwLDAsbnVsbCxbWzMsMF0sWzEsWzNdXV1dLFstMiwic2VsZWN0bGFuZ3VhZ2UiLG51bGwsMjU0MTA5MjQ0OTAyNTQyLDAsbnVsbF1dLFtbMCwwLGZhbHNlLG51bGwsMzI2MTgzMDg4MTI5NTc2LDcsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNTQ3Nzk3ODk0NDM3MzQzLG51bGwsW1sxMSw0NjY0NDUxNTE5OTcxMTFdLFs4LDBdLFs3LFs3NF1dXV1dLFtbLTEsNTksbnVsbCw1NzY4NjYzMjEyNjI3MTQsMCxudWxsLFtbMTEsNDY2NDQ1MTUxOTk3MTExXSxbNyxbMTE2LFsxLDMsMTIyLGZhbHNlXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTQ1Njg2MTU4NzYyNzYxLDgsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMjkzMDY1NjI3OTcwNzMzLG51bGwsW1sxMSw0ODg1OTY2MjI3OTQ2MzhdLFs4LDBdLFs3LFsyXV1dXV0sW1sxLDY2LG51bGwsMTI4NzQwNzgxNzg3NjE4LDAsbnVsbCxbWzIsWyJzcG9ydHMgKGZvciBzaW11bGF0b3JzKSIsZmFsc2VdXSxbMywxXSxbMCxbMTE3XV0sWzAsWzJdXSxbMSxbMTE4XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0NzY2NzIxNzc4MTAxMzYsOSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw0MjYzNTQ1MjEwNDIzMzIsbnVsbCxbWzExLDQ4Mzc1OTM0OTU1MzA2MF0sWzgsMF0sWzcsWzJdXV1dXSxbWy0xLDU5LG51bGwsODMxMTgxNjczOTgxMTE3LDAsbnVsbCxbWzExLDczMTk2MzQxMzAwNjIyMV0sWzcsWzExOSxbMSwzLDEyMyxmYWxzZV1dXV1dLFs2LDk5LG51bGwsMjI0MzQ4MzYyNTY1MDI5LDAsbnVsbCxbWzcsWzQzLFszLDczMTk2MzQxMzAwNjIyMV1dXV1dLFstMSw1OSxudWxsLDIzNzEzNjU3MzUyMzU0NCwwLG51bGwsW1sxMSw0ODM3NTkzNDk1NTMwNjBdLFs3LFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCwxNTM5MjYzNTk2OTIyNzksMTAsW10sW1s2LDk5LG51bGwsMzM3NzY0OTM0Mjc3OTU4LDAsbnVsbCxbWzcsWzQzLFszLDczMTk2MzQxMzAwNjIyMV1dXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsOTM4ODA3NDE2NTU1NjIxLDExLFtbNyw4MCxudWxsLDEsZmFsc2UsZmFsc2UsZmFsc2UsNzQ4MzcyMjAyODMyOTU5LG51bGxdXSxbXSxbWzAsMCxmYWxzZSxudWxsLDYzMjY5NTc0NDk3ODQ1OSwxMixbWzcsODEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDU4MDg2MzAwMzk5ODA4NCxudWxsLFtbNCwxNF1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw4OTM5OTQ5OTUwODkwNjYsMTMsW1sxNCw4MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsMTkxNTAyNzg4NzU0Nzg1LG51bGwsW1s4LDBdLFswLFsxMV1dXV1dLFtbMTQsMjMsbnVsbCwxNDAwNTQzNzk5MjI5NzcsMCxudWxsLFtbMywxXSxbMSxbM11dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzQ2ODUxNDIxMjMyNzIyLDE0LFtbMTQsODIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDc3NzE0MTIyODQyMjA1NixudWxsLFtbOCwwXSxbMCxbOV1dXV1dLFtbMTQsMjMsbnVsbCwyNDAzMDkzMjY1MjgyNTQsMCxudWxsLFtbMywxXSxbMSxbM11dXV1dXSxbMCwwLGZhbHNlLG51bGwsMTc1NzA2MTIwODA1NDMwLDE1LFtbMTQsODIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDY4MDAxMzU4MTAxMDYyMCxudWxsLFtbOCwwXSxbMCxbMTVdXV1dXSxbWzE0LDIzLG51bGwsOTk2MzY4MjE2NjU0MjQ0LDAsbnVsbCxbWzMsMV0sWzEsWzNdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDU5ODE5OTI1OTY3NzMwMSwxNixbWzE0LDgyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3NDQxMDI3NDQ0NTg5OTUsbnVsbCxbWzgsMF0sWzAsWzM0XV1dXV0sW1sxNCwyMyxudWxsLDc4MzE5NTUwNjI1MDAzNiwwLG51bGwsW1szLDFdLFsxLFszXV1dXV1dXV0sWzAsMCxmYWxzZSxudWxsLDMyODYzOTYzNDQyMTY1NSwxNyxbWzcsODEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM0NDUyMzc4NDE4OTkyOSxudWxsLFtbNCwyNV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCw4NjEwNjYwMzQzODk0MDcsMTgsW1syNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw2ODU4NDExMDA2ODQxOTYsbnVsbCxbWzAsWzEyMF1dXV1dLFtbMjUsMjMsbnVsbCw4NDQ0NTU0NDM5MDc0NDIsMCxudWxsLFtbMywxXSxbMSxbM11dXV1dXSxbMCwwLGZhbHNlLG51bGwsNjQ3MzcwMTk0MzMzOTIwLDE5LFtbMjUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNTU5NjkyMzI5Nzc4MTcyLG51bGwsW1swLFsxMjFdXV1dXSxbWzI1LDIzLG51bGwsNTc0MzY5NDg2NTk1MjAzLDAsbnVsbCxbWzMsMV0sWzEsWzNdXV1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw5Njk5MzA3NTA4OTQzNTksMjAsW1s3LDgzLG51bGwsMSxmYWxzZSxmYWxzZSxmYWxzZSwzMzIyODQxNzkxNzk5MjksbnVsbF1dLFtdLFtbMCwwLGZhbHNlLG51bGwsNzQyNzUyNDc0MTQ4NTY2LDIxLFtbNyw4MSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNTQxNzMzMDUyNzAwNjkyLG51bGwsW1s0LDE0XV1dXSxbXSxbWzAsMCxmYWxzZSxudWxsLDYyMDM2NzE4MjM5Nzk4OSwyMixbWzE0LDgyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3Njk5NjMzOTgzMTI1MjgsbnVsbCxbWzgsMF0sWzAsWzExXV1dXV0sW1sxLDEyNCxudWxsLDM4NzgxMjM4MzEyNTEwMCwwLG51bGwsW1szLDBdXV0sWzEsODYsbnVsbCw5NDEzOTI5Mzg4NjM5MDAsMCxudWxsLFtbMSxbMTE4XV1dXSxbLTEsNzIsbnVsbCw3NjIyNjQ5NDA5MTQ0NjUsMixudWxsLFtbMCxbNTZdXV1dLFstMSw1OSxudWxsLDQyNjM3OTU0NDMwNjgzNiwwLG51bGwsW1sxMSw0ODg1OTY2MjI3OTQ2MzhdLFs3LFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3ODI0MTA4Nzc4NTkxNTksMjMsW1sxNCw4MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTU0ODc5Njc4MDA4MTgwLG51bGwsW1s4LDBdLFswLFs5XV1dXV0sW1sxLDEyNCxudWxsLDY1MTcyMTM1MzQ4ODMxNCwwLG51bGwsW1szLDFdXV0sWzEsNjYsbnVsbCwxMzQzMzcyODY2MDgyMjksMCxudWxsLFtbMixbInNwb3J0cyAoZm9yIHNpbXVsYXRvcnMpIixmYWxzZV1dLFszLDFdLFswLFsxMTddXSxbMCxbMl1dLFsxLFsxMThdXV1dLFstMSw3MixudWxsLDIzODUyMzQ2NjEyMTk2MiwyLG51bGwsW1swLFs1Nl1dXV0sWy0xLDU5LG51bGwsMzUwNTY2NDI2MzY1NDk0LDAsbnVsbCxbWzExLDQ4ODU5NjYyMjc5NDYzOF0sWzcsWzJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDg5NDU5NzIwNzk5MDM0NSwyNCxbWzE0LDgyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1MTMyODIxMzUzOTA1ODEsbnVsbCxbWzgsMF0sWzAsWzE1XV1dXV0sW1stMSw3MixudWxsLDEyOTU0MjEwMzk2OTEyNiwyLG51bGwsW1swLFs1Nl1dXV0sWy0xLDU5LG51bGwsODkxMTM2MDM1MjI4MDE0LDAsbnVsbCxbWzExLDQ1MTM2ODY4Mzk0NjY0OF0sWzcsWzJdXV1dLFstMiwic2VsZWN0bGFuZ3VhZ2UiLG51bGwsNjQ5NjExNDMyMDA2NDM2LDAsbnVsbF1dXSxbMCwwLGZhbHNlLG51bGwsNjIwNjM4NzI1MjgwMzYxLDI1LFtbMTQsODIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDM4MzA5MzU1MjczNDk4MixudWxsLFtbOCwwXSxbMCxbMzRdXV1dXSxbWy0xLDcyLG51bGwsNTU5MzkwNTAzMDc4Njk3LDIsbnVsbCxbWzAsWzU2XV1dXSxbLTEsNTksbnVsbCwyODczMzEwMDIyMDkzODYsMCxudWxsLFtbMTEsNDUxMzY4NjgzOTQ2NjQ4XSxbNyxbNl1dXV0sWy0yLCJzZWxlY3RsYW5ndWFnZSIsbnVsbCw5OTY1MjI2NzM4MDc0MDQsMCxudWxsXV1dXV0sWzAsMCxmYWxzZSxudWxsLDkyMTY3MzIyNTUyMzMyNSwyNixbWzcsODEsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDIyNjAyMDQyMDIzNDE4NSxudWxsLFtbNCwyNV1dXV0sW10sW1swLDAsZmFsc2UsbnVsbCwxMjU4NzE0NTY4Njk0MDksMjcsW1syNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw4MDg0NzYxOTI0MDcxMDIsbnVsbCxbWzAsWzEyMF1dXV1dLFtbMjUsMjMsbnVsbCw1NzcyNTg1MDMyMzcyODksMCxudWxsLFtbMywwXSxbMSxbM11dXV0sWy0xLDcyLG51bGwsNDc2NTMzMzMwMTY3NDMwLDIsbnVsbCxbWzAsWzU2XV1dXSxbMSw4NixudWxsLDU2NzA5Mjk0NDQ3NTA0OCwwLG51bGwsW1sxLFsxMThdXV1dLFstMSw1OSxudWxsLDYwMzYwMzE5NjI4NjUwMywwLG51bGwsW1sxMSwxMjAyNDE1NzczNDk0NjJdLFs3LFsyXV1dXSxbLTEsODUsbnVsbCw4NjQ3Njg0NTU3MDUyODEsMCxudWxsLFtbNiwiZ2FtZSJdXV1dXSxbMCwwLGZhbHNlLG51bGwsNzA3NDk4MjAxMjA4NDM4LDI4LFtbMjUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsOTY4NTA3MDcwMTU4MzMzLG51bGwsW1swLFsxMjFdXV1dXSxbWzI1LDIzLG51bGwsNzYzNjQzNjMzMDUwMzU2LDAsbnVsbCxbWzMsMF0sWzEsWzNdXV1dLFstMSw3MixudWxsLDUwNTkwNTU5NjM0MTU0NSwyLG51bGwsW1swLFs1Nl1dXV0sWzEsODYsbnVsbCwyOTMzMTM4MjA3Mzg5MTIsMCxudWxsLFtbMSxbMTE4XV1dXSxbLTEsNTksbnVsbCwzNzk1MDEyODc4NjcyOTcsMCxudWxsLFtbMTEsMTIwMjQxNTc3MzQ5NDYyXSxbNyxbNl1dXV0sWy0xLDg1LG51bGwsNTAwMjY0MzY2ODkyNTIxLDAsbnVsbCxbWzYsImdhbWUiXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNTUzMDUyNTQ2OTgwMDg2LDI5LFtbNyw4MSxudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjUyODg3MDg2NTkzODg5LG51bGwsW1s0LDQyXV1dXSxbWzMsMTI1LG51bGwsMTA3ODUwNDU1NjQ4OTM1LDAsbnVsbCxbWzEsWzEyMl1dLFszLDBdLFs3LFszNl1dLFszLDBdLFsxLFsyNF1dLFsxLFsyNF1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw0NjQwMjM3ODA3MTYwODEsMzAsW1s3LDgzLG51bGwsMSxmYWxzZSxmYWxzZSxmYWxzZSwyNzU5NDAzMDkyOTA1NjMsbnVsbF1dLFtbMTQsMjMsbnVsbCwxMTAyMzczNjA1MjcyNTcsMCxudWxsLFtbMywwXSxbMSxbM11dXV0sWzI1LDIzLG51bGwsNjQzMjY2NDAzNjU5NDM0LDAsbnVsbCxbWzMsMF0sWzEsWzNdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDI5NjgwNTQzMjkwODkyMCwzMSxbWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw4MzU1MDUzODUzODY1NjIsbnVsbCxbWzExLDQ4ODU5NjYyMjc5NDYzOF0sWzgsMF0sWzcsWzZdXV1dLFsxNCw4MixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsOTE5NDAwNTI5MTI2OTQ1LG51bGwsW1s4LDBdLFswLFsxMV1dXV1dLFtbMTQsMzUsbnVsbCwxMjE2NTMwNjA0NzA5ODYsMCxudWxsLFtbMCxbOV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsNzAxMzQzODc2ODUyNTgyLDMyLFtbLTEsMzIsbnVsbCwwLGZhbHNlLGZhbHNlLGZhbHNlLDEwNzQyNDYyNjU5ODQwNixudWxsLFtbMTEsNDg4NTk2NjIyNzk0NjM4XSxbOCwwXSxbNyxbMl1dXV0sWzE0LDgyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw3MDI3NDA1MjUyMjEzMjUsbnVsbCxbWzgsMF0sWzAsWzldXV1dXSxbWzE0LDM1LG51bGwsOTA3MjMxODY5OTc0NzY3LDAsbnVsbCxbWzAsWzExXV1dXV1dLFs0LFsic2VsZWN0bGFuZ3VhZ2UiLDAsW10sdHJ1ZSxmYWxzZSxmYWxzZV0sZmFsc2UsbnVsbCw4NzMwNTc4OTgzMTAxNDYsMzMsW10sW10sW1swLDAsZmFsc2UsbnVsbCw0ODY0NjE4MTcyMDIyMzksMzQsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNjg1ODcxNjU2MDE2MjQwLG51bGwsW1sxMSw0NTEzNjg2ODM5NDY2NDhdLFs4LDBdLFs3LFsyXV1dXV0sW1syMywzNSxudWxsLDc2MzAxMDE0NTI0ODQwMiwwLG51bGwsW1swLFsyXV1dXV0sW1swLDAsZmFsc2UsbnVsbCw2Mjg3NTU4Mjc1MjU3NzMsMzUsW1sxNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw0NjM3NzA1NTYzNjA4MjQsbnVsbCxbWzAsWzEyM11dXV1dLFtbMTQsMzUsbnVsbCw4OTE4OTg4NTk1NzgxOTgsMCxudWxsLFtbMCxbMzRdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDYxNzk2NTg2Mzc1MTcwNCwzNixbWzI1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDY1Nzc0NDQ2NzU4MDc5MCxudWxsLFtbMCxbMTIwXV1dXV0sW1syNSwzNSxudWxsLDI2ODU1NDI4MTQ3MzIzNCwwLG51bGwsW1swLFsyXV1dXV1dLFswLDAsZmFsc2UsbnVsbCwzNjcxMDg2NTgxMjczNzMsMzcsW1syNSwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSw0ODY3NDQ2MzY0MTQ1MTQsbnVsbCxbWzAsWzEyMV1dXV1dLFtbMjUsMzUsbnVsbCw3MzQ3MzYxNTAwNjMwMDAsMCxudWxsLFtbMCxbNl1dXV1dXV1dLFswLDAsZmFsc2UsbnVsbCw3MzIwOTY3NzEzOTMzMzYsMzgsW1stMSwzMixudWxsLDAsZmFsc2UsZmFsc2UsZmFsc2UsNTcwNzg2NTMzMzY0NzM0LG51bGwsW1sxMSw0NTEzNjg2ODM5NDY2NDhdLFs4LDBdLFs3LFs2XV1dXV0sW1syMywzNSxudWxsLDQ1NzU3NjUxODYxMTc1OSwwLG51bGwsW1swLFs2XV1dXV0sW1swLDAsZmFsc2UsbnVsbCw5ODQwMjk1Mzg3OTgyODIsMzksW1sxNCwzMyxudWxsLDAsZmFsc2UsZmFsc2UsdHJ1ZSwzNjA2MTM5MTQ4ODczMzYsbnVsbCxbWzAsWzEyM11dXV1dLFtbMTQsMzUsbnVsbCwzMzYyOTAwNjAzMDI3NDMsMCxudWxsLFtbMCxbMTVdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDgxODI0MjM2OTYzNzUyOSw0MCxbWzI1LDMzLG51bGwsMCxmYWxzZSxmYWxzZSx0cnVlLDUzNTYwNDI1NTUwMTczNSxudWxsLFtbMCxbMTIwXV1dXV0sW1syNSwzNSxudWxsLDQ0NTI2MDkwMDQ2Mzk0NSwwLG51bGwsW1swLFsxM11dXV1dXSxbMCwwLGZhbHNlLG51bGwsMzgxODM1NzU3NTg1MDY2LDQxLFtbMjUsMzMsbnVsbCwwLGZhbHNlLGZhbHNlLHRydWUsNTUyNTY1MDQyNTE1MzU0LG51bGwsW1swLFsxMjFdXV1dXSxbWzI1LDM1LG51bGwsOTY5MzcyNjU2MzE1NDM2LDAsbnVsbCxbWzAsWzExXV1dXV1dXV1dXV1dLFsiRVZFTlQgd2luZG93MSIsW1sxLCJzdGFydCIsMCwwLGZhbHNlLGZhbHNlLDE3OTYyODEwOTI1OTk3MCxmYWxzZSw4OV0sWzAsMCxmYWxzZSxudWxsLDE2NTIyNTUyNjc1MDEyNSwxLFtbNiwxMjYsbnVsbCwxLGZhbHNlLGZhbHNlLGZhbHNlLDYyNzA1NDEwNDY1NTU3NCxudWxsXV0sW1swLDEyNyxudWxsLDU1NjY1NTkxMzE4NjQxMCwwLG51bGwsW1sxLFsxMjRdXV1dLFs2LDEyOCxudWxsLDgwNTYwMzMyNDkyODAzMywwLG51bGwsW1sxLFsxMjVdXSxbMCxbNzBdXV1dXSxbWzAsMCxmYWxzZSxudWxsLDIxMjQwMDU1MDQ4OTI2OCwyLFtbLTEsMTI5LG51bGwsMCx0cnVlLGZhbHNlLGZhbHNlLDI4NjQzNTA2NDkyNzIxMyxudWxsLFtbMSxbMjRdXSxbMCxbMl1dLFswLFsxNyxbMSwwLDEzMCxmYWxzZV1dXV1dXSxbWzYsMTI4LG51bGwsNjAxNTEyNjc1MDkwNzA4LDAsbnVsbCxbWzEsWzEyNixbMSwwLDEzMSxmYWxzZV0sWzQsMTMyXV1dLFswLFsxMjcsWzEsMCwxMzEsZmFsc2VdLFs0LDEzMl1dXV1dXV1dXSxbMCwwLGZhbHNlLG51bGwsODU3NTg5MzkzOTE3ODI2LDMsW1szLDEzMyxudWxsLDEsZmFsc2UsZmFsc2UsZmFsc2UsMzE5OTg2NTY0ODkwOTY0LG51bGxdXSxbWzEsMTI0LG51bGwsNjc3MDA1ODMxNjM2MTY1LDAsbnVsbCxbWzMsMF1dXSxbLTEsMTA2LG51bGwsMjQ4MzAyNDI4ODc5NzU4LDAsbnVsbCxbWzAsWzJdXV1dXV0sWzAsMCxmYWxzZSxudWxsLDI0ODU4MDEzNDM5MzU1NCw0LFtbMywxMzQsbnVsbCwxLGZhbHNlLGZhbHNlLGZhbHNlLDk0NDkzMTkyNjg1MzI5NyxudWxsXV0sW1sxLDEyNCxudWxsLDQ0NTMwNzkwOTU3MDcwMSwwLG51bGwsW1szLDFdXV0sWy0xLDEwNixudWxsLDgwODc4NjYxNjAzMDkxOSwwLG51bGwsW1swLFs2XV1dXV1dLFswLDAsZmFsc2UsbnVsbCw4MjUzNTMzMzkwMDQ1NjgsNSxbWzIsMTM1LG51bGwsMSxmYWxzZSxmYWxzZSxmYWxzZSwzNDg1MjgxOTMwMTAxNjAsbnVsbF0sWzIsMTM2LG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw1NjIzMDk2NTQ5MDQ3MDUsbnVsbF0sWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSwyOTczMDYwMTQwNTE4NDcsbnVsbCxbWzExLDE3OTYyODEwOTI1OTk3MF0sWzgsMF0sWzcsWzJdXV1dXSxbWy0xLDcyLG51bGwsMTk4ODQyMDkxNjQ3ODM5LDIsbnVsbCxbWzAsWzU2XV1dXSxbMiwxMzcsbnVsbCw3NzY2NDUxODYwMzU0MjEsMCxudWxsXSxbLTEsNTksbnVsbCw1MTEwNjIzNzQ5NzgzMzcsMCxudWxsLFtbMTEsMTc5NjI4MTA5MjU5OTcwXSxbNyxbNl1dXV1dXSxbMCwwLGZhbHNlLG51bGwsMjE4MjAyMDExNDUwMDk0LDYsW1syLDEzNSxudWxsLDEsZmFsc2UsZmFsc2UsZmFsc2UsNDI2NjMyMTkxNjYwMzIyLG51bGxdLFsyLDEzNixudWxsLDAsZmFsc2UsdHJ1ZSxmYWxzZSwzODc5NDQ2NjU5OTA4MTksbnVsbF0sWy0xLDMyLG51bGwsMCxmYWxzZSxmYWxzZSxmYWxzZSw2NDEwMjgyNTE0NzM3MTYsbnVsbCxbWzExLDE3OTYyODEwOTI1OTk3MF0sWzgsMF0sWzcsWzJdXV1dXSxbWy0xLDcyLG51bGwsNDcxMDcyNDgxNTgxNDQ4LDIsbnVsbCxbWzAsWzU2XV1dXSxbMiwxMzgsbnVsbCw4MTM4NTUyMTY2Nzc0MTgsMCxudWxsLFtbMywyXSxbMywwXV1dLFstMSw1OSxudWxsLDc0MjYyNTUwMjU1NTU2MCwwLG51bGwsW1sxMSwxNzk2MjgxMDkyNTk5NzBdLFs3LFs2XV1dXV1dXV1dLFtbImJsb3dfMDEiLFtbImF1ZGlvL3dlYm07IGNvZGVjcz1vcHVzIiwiLndlYm0iLDQzNzJdXSxmYWxzZV0sWyJnbzMiLFtbImF1ZGlvL3dlYm07IGNvZGVjcz1vcHVzIiwiLndlYm0iLDcwNDFdXSxmYWxzZV0sWyJmYW5zIixbWyJhdWRpby93ZWJtOyBjb2RlY3M9b3B1cyIsIi53ZWJtIiwyMDU3M11dLGZhbHNlXSxbInRyaWJ1bmUiLFtbImF1ZGlvL3dlYm07IGNvZGVjcz1vcHVzIiwiLndlYm0iLDYwMjBdXSxmYWxzZV0sWyJzcG9ydHMgbXVzaWNfMDIiLFtbImF1ZGlvL3dlYm07IGNvZGVjcz1vcHVzIiwiLndlYm0iLDIzMTUxNjZdXSxmYWxzZV0sWyJzcG9ydHMgKGZvciBzaW11bGF0b3JzKSIsW1siYXVkaW8vd2VibTsgY29kZWNzPW9wdXMiLCIud2VibSIsMjM0MTczMF1dLGZhbHNlXSxbInNwb3J0cyBtdXNpY18wMSIsW1siYXVkaW8vd2VibTsgY29kZWNzPW9wdXMiLCIud2VibSIsMjMxNTE2Nl1dLGZhbHNlXSxbInRpbWVyIixbWyJhdWRpby93ZWJtOyBjb2RlY3M9b3B1cyIsIi53ZWJtIiwzNTI5XV0sZmFsc2VdXSwibWVkaWEvIixmYWxzZSwxMjgwLDcyMCwzLGZhbHNlLCJ0cmlsaW5lYXIiLHRydWUsIjEuMC4wLjMiLGZhbHNlLGZhbHNlLDAsMiw5OCxmYWxzZSx0cnVlLDEsdHJ1ZSwwLjc4NTM5ODE2MzM5NzQ0ODMsW10sImljb25zLyIsW10sIm5vcm1hbGl6ZWQiLCI3bXN2eTdmM3ltNiIsImZvbnRzLyIsW10sImhpZ2gtcGVyZm9ybWFuY2UiLFtdLCJzdGFuZGFyZCIsInZzeW5jIiwiIiwibG9hZGluZy1sb2dvLnBuZyIsZmFsc2UsNCxmYWxzZSxudWxsLFtdLCJmbGF0IiwxLDEwMDAwLGZhbHNlXX0=", init).then(response => {
            C3.ThrowIfNotOk(response);
            return response
        })
    };
    C3.FetchText = function FetchText(url) {
        return C3.FetchOk(url).then(response => response.text())
    };
    C3.FetchJson = function FetchJson(url) {
        return C3.FetchOk(url).then(response => response.json())
    };
    C3.FetchBlob = function FetchBlob(url) {
        return C3.FetchOk(url).then(response => response.blob())
    };
    C3.FetchArrayBuffer = function FetchArrayBuffer(url) {
        return C3.FetchOk(url).then(response => response.arrayBuffer())
    };
    C3.FetchImage = function FetchImage(url) {
        return new Promise((resolve, reject) => {
            const img = new Image;
            img.onload = () => resolve(img);
            img.onerror = err => reject(err);
            img.src = url
        })
    };
    C3.BlobToArrayBuffer = function BlobToArrayBuffer(blob) {
        if (typeof blob["arrayBuffer"] === "function") return blob["arrayBuffer"]();
        else return new Promise((resolve, reject) => {
            const fileReader = new FileReader;
            fileReader.onload = () => resolve(fileReader.result);
            fileReader.onerror = () => reject(fileReader.error);
            fileReader.readAsArrayBuffer(blob)
        })
    };
    C3.BlobToString = function BlobToString(blob) {
        if (typeof blob["text"] === "function") return blob["text"]();
        else return new Promise((resolve, reject) => {
            const fileReader = new FileReader;
            fileReader.onload = () => resolve(fileReader.result);
            fileReader.onerror = () => reject(fileReader.error);
            fileReader.readAsText(blob)
        })
    };
    C3.BlobToJson = function BlobToJson(blob) {
        return C3.BlobToString(blob).then(text => JSON.parse(text))
    };
    C3.BlobToImage = async function BlobToImage(blob, decodeImage) {
        let blobUrl = URL.createObjectURL(blob);
        try {
            const img = await C3.FetchImage(blobUrl);
            URL.revokeObjectURL(blobUrl);
            blobUrl = "";
            if (decodeImage && typeof img["decode"] === "function") await img["decode"]();
            return img
        } finally {
            if (blobUrl) URL.revokeObjectURL(blobUrl)
        }
    };
    C3.CreateCanvas = function CreateCanvas(width, height) {
        if (typeof document !== "undefined" && typeof document.createElement === "function") {
            const canvas = document.createElement("canvas");
            canvas.width = width;
            canvas.height = height;
            return canvas
        } else return new OffscreenCanvas(width, height)
    };
    C3.CanvasToBlob = function CanvasToBlob(canvas, type, quality) {
        if (typeof quality !== "number") quality = 1;
        type = type || "image/png";
        quality = C3.clamp(quality, 0, 1);
        if (canvas.toBlob) return new Promise(resolve => canvas.toBlob(resolve, type, quality));
        else if (canvas["convertToBlob"]) return canvas["convertToBlob"]({
            "type": type,
            "quality": quality
        });
        else throw new Error("could not convert canvas to blob");
    };
    C3.DrawableToBlob = function DrawableToBlob(drawable, type, quality) {
        const canvas = C3.CreateCanvas(drawable.width, drawable.height);
        const ctx = canvas.getContext("2d");
        ctx.drawImage(drawable, 0, 0);
        return C3.CanvasToBlob(canvas, type, quality)
    };
    C3.ImageDataToBlob = function ImageDataToBlob(imageData, type, quality) {
        if (C3.Supports.ImageBitmapOptions) return createImageBitmap(imageData, {
            "premultiplyAlpha": "none"
        }).then(imageBitmap => C3.DrawableToBlob(imageBitmap, type, quality));
        else if (C3.Supports.ImageBitmap) return createImageBitmap(imageData).then(imageBitmap => C3.DrawableToBlob(imageBitmap, type, quality));
        else {
            const canvas = C3.CreateCanvas(imageData.width, imageData.height);
            const ctx = canvas.getContext("2d");
            ctx.putImageData(imageData, 0, 0);
            return C3.CanvasToBlob(canvas,
                type, quality)
        }
    };
    C3.CopySet = function CopySet(dest, src) {
        dest.clear();
        for (const x of src) dest.add(x)
    };
    C3.MapToObject = function MapToObject(map) {
        const ret = Object.create(null);
        for (const [k, v] of map.entries()) ret[k] = v;
        return ret
    };
    C3.ObjectToMap = function ObjectToMap(o, map) {
        map.clear();
        for (const [k, v] of Object.entries(o)) map.set(k, v)
    };
    C3.ToSuperJSON = function ToSuperJSON(v) {
        if (typeof v === "object" && v !== null)
            if (v instanceof Set) return {
                "_c3type_": "set",
                "data": [...v].map(o => ToSuperJSON(o))
            };
            else if (v instanceof Map) return {
            "_c3type_": "map",
            "data": [...v].map(pair => [pair[0], ToSuperJSON(pair[1])])
        };
        else {
            const ret = Object.create(null);
            for (const [key, value] of Object.entries(v)) ret[key] = ToSuperJSON(value);
            return ret
        }
        return v
    };
    C3.FromSuperJSON = function FromSuperJSON(v) {
        if (typeof v === "object" & v !== null)
            if (v["_c3type_"] === "set") return new Set(v["data"].map(o => FromSuperJSON(o)));
            else if (v["_c3type_"] === "map") return new Map(v["data"].map(pair => [pair[0], FromSuperJSON(pair[1])]));
        else {
            const ret = Object.create(null);
            for (const [key, value] of Object.entries(v)) ret[key] = FromSuperJSON(value);
            return ret
        }
        return v
    };
    C3.CSSToCamelCase = function(str) {
        if (str.startsWith("--")) return str;
        let ret = "";
        let isAfterHyphen = false;
        for (const ch of str)
            if (ch === "-") isAfterHyphen = true;
            else if (isAfterHyphen) {
            ret += ch.toUpperCase();
            isAfterHyphen = false
        } else ret += ch;
        return ret
    };
    C3.IsIterator = function(o) {
        return typeof o === "object" && typeof o.next === "function"
    };
    C3.MakeFilledArray = function MakeFilledArray(len, data) {
        const ret = [];
        if (typeof data === "function")
            for (let i = 0; i < len; ++i) ret.push(data());
        else
            for (let i = 0; i < len; ++i) ret.push(data);
        return ret
    };

}

// ../lib/misc/color.js
{
    'use strict';
    const C3 = self.C3;
    const HSL_TEST = /([0-9.]+),([0-9.]+)%?,([0-9.]+)%?/i;
    const HSLA_TEST = /([0-9.]+),([0-9.]+)%?,([0-9.]+)%?,([0-9.])/i;

    function padTwoDigits(str) {
        if (str.length === 0) return "00";
        else if (str.length === 1) return "0" + str;
        else return str
    }

    function hueToRGB(p, q, t) {
        if (t < 0) t += 1;
        if (t > 1) t -= 1;
        if (t < 1 / 6) return p + (q - p) * 6 * t;
        if (t < 1 / 2) return q;
        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
        return p
    }
    C3.Color = class Color {
        constructor(r, g, b, a) {
            this._r = NaN;
            this._g = NaN;
            this._b = NaN;
            this._a = NaN;
            this._r = 0;
            this._g = 0;
            this._b = 0;
            this._a = 0;
            if (r instanceof C3.Color) this.set(r);
            else this.setRgba(r || 0, g || 0, b || 0, a || 0)
        }
        setRgb(r, g, b) {
            this._r = +r;
            this._g = +g;
            this._b = +b;
            this.clamp();
            return this
        }
        setRgba(r, g, b, a) {
            this._r = +r;
            this._g = +g;
            this._b = +b;
            this._a = +a;
            this.clamp();
            return this
        }
        set(c) {
            this._r = c._r;
            this._g = c._g;
            this._b = c._b;
            this._a = c._a;
            return this
        }
        copy(c) {
            return this.set(c)
        }
        add(c) {
            this._r += c._r;
            this._g += c._g;
            this._b +=
                c._b;
            this._a += c._a;
            this.clamp()
        }
        addRgb(r, g, b, a = 0) {
            this._r += +r;
            this._g += +g;
            this._b += +b;
            this._a += +a;
            this.clamp()
        }
        diff(c) {
            this.setR(Math.max(this._r, c._r) - Math.min(this._r, c._r));
            this.setG(Math.max(this._g, c._g) - Math.min(this._g, c._g));
            this.setB(Math.max(this._b, c._b) - Math.min(this._b, c._b));
            this.setA(Math.max(this._a, c._a) - Math.min(this._a, c._a));
            this.clamp()
        }
        copyRgb(c) {
            this._r = c._r;
            this._g = c._g;
            this._b = c._b
        }
        setR(r) {
            this._r = C3.clamp(+r, 0, 1)
        }
        getR() {
            return this._r
        }
        setG(g) {
            this._g = C3.clamp(+g, 0, 1)
        }
        getG() {
            return this._g
        }
        setB(b) {
            this._b =
                C3.clamp(+b, 0, 1)
        }
        getB() {
            return this._b
        }
        setA(a) {
            this._a = C3.clamp(+a, 0, 1)
        }
        getA() {
            return this._a
        }
        clone() {
            return C3.New(C3.Color, this._r, this._g, this._b, this._a)
        }
        toArray() {
            return [this._r, this._g, this._b, this._a]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(ta, i) {
            ta[i++] = this._r;
            ta[i++] = this._g;
            ta[i++] = this._b;
            ta[i] = this._a
        }
        writeRGBToTypedArray(ta, i) {
            ta[i++] = this._r;
            ta[i++] = this._g;
            ta[i] = this._b
        }
        equals(c) {
            return this._r === c._r && this._g === c._g && this._b === c._b && this._a === c._a
        }
        equalsIgnoringAlpha(c) {
            return this._r ===
                c._r && this._g === c._g && this._b === c._b
        }
        equalsRgb(r, g, b) {
            return this._r === r && this._g === g && this._b === b
        }
        equalsRgba(r, g, b, a) {
            return this._r === r && this._g === g && this._b === b && this._a === a
        }
        equalsF32Array(arr, offset) {
            return arr[offset] === Math.fround(this._r) && arr[offset + 1] === Math.fround(this._g) && arr[offset + 2] === Math.fround(this._b) && arr[offset + 3] === Math.fround(this._a)
        }
        equalsRGBF32Array(arr, offset) {
            return arr[offset] === Math.fround(this._r) && arr[offset + 1] === Math.fround(this._g) && arr[offset + 2] === Math.fround(this._b)
        }
        multiply(c) {
            this._r *=
                c._r;
            this._g *= c._g;
            this._b *= c._b;
            this._a *= c._a
        }
        multiplyAlpha(a) {
            this._r *= a;
            this._g *= a;
            this._b *= a;
            this._a *= a
        }
        premultiply() {
            this._r *= this._a;
            this._g *= this._a;
            this._b *= this._a;
            return this
        }
        unpremultiply() {
            this._r /= this._a;
            this._g /= this._a;
            this._b /= this._a;
            return this
        }
        clamp() {
            this._r = C3.clamp(this._r, 0, 1);
            this._g = C3.clamp(this._g, 0, 1);
            this._b = C3.clamp(this._b, 0, 1);
            this._a = C3.clamp(this._a, 0, 1);
            return this
        }
        setFromRgbValue(rgb) {
            this._r = C3.GetRValue(rgb);
            this._g = C3.GetGValue(rgb);
            this._b = C3.GetBValue(rgb);
            this._a = C3.GetAValue(rgb)
        }
        getCssRgb(_r, _g, _b) {
            const r = C3.IsFiniteNumber(_r) ? _r : this.getR();
            const g = C3.IsFiniteNumber(_g) ? _g : this.getG();
            const b = C3.IsFiniteNumber(_b) ? _b : this.getB();
            return `rgb(${r*100}%, ${g*100}%, ${b*100}%)`
        }
        getCssRgba(_r, _g, _b, _a) {
            const r = C3.IsFiniteNumber(_r) ? _r : this.getR();
            const g = C3.IsFiniteNumber(_g) ? _g : this.getG();
            const b = C3.IsFiniteNumber(_b) ? _b : this.getB();
            const a = C3.IsFiniteNumber(_a) ? _a : this.getA();
            return `rgba(${r*100}%, ${g*100}%, ${b*100}%, ${a})`
        }
        toHexString() {
            const rh =
                Math.round(this.getR() * 255);
            const gh = Math.round(this.getG() * 255);
            const bh = Math.round(this.getB() * 255);
            return "#" + padTwoDigits(rh.toString(16)) + padTwoDigits(gh.toString(16)) + padTwoDigits(bh.toString(16))
        }
        parseHexString(str) {
            if (typeof str !== "string") return false;
            str = str.trim();
            if (str.charAt(0) === "#") str = str.substr(1);
            let rv;
            let gv;
            let bv;
            if (str.length === 3) {
                rv = parseInt(str[0], 16) / 15;
                gv = parseInt(str[1], 16) / 15;
                bv = parseInt(str[2], 16) / 15
            } else if (str.length === 6) {
                rv = parseInt(str.substr(0, 2), 16) / 255;
                gv = parseInt(str.substr(2,
                    2), 16) / 255;
                bv = parseInt(str.substr(4, 2), 16) / 255
            } else return false;
            if (isFinite(rv)) this.setR(rv);
            if (isFinite(gv)) this.setG(gv);
            if (isFinite(bv)) this.setB(bv);
            this.setA(1);
            return true
        }
        toCommaSeparatedRgb() {
            const rv = Math.round(this.getR() * 255);
            const gv = Math.round(this.getG() * 255);
            const bv = Math.round(this.getB() * 255);
            return `${rv}, ${gv}, ${bv}`
        }
        toRgbArray() {
            const rv = Math.round(this.getR() * 255);
            const gv = Math.round(this.getG() * 255);
            const bv = Math.round(this.getB() * 255);
            return [rv, gv, bv]
        }
        parseCommaSeparatedRgb(str) {
            if (typeof str !==
                "string") return false;
            str = str.replace(/^rgb\(|\)|%/, "");
            const arr = str.split(",");
            if (arr.length < 3) return false;
            const rv = parseInt(arr[0].trim(), 10) / 255;
            const gv = parseInt(arr[1].trim(), 10) / 255;
            const bv = parseInt(arr[2].trim(), 10) / 255;
            if (isFinite(rv)) this.setR(rv);
            if (isFinite(gv)) this.setG(gv);
            if (isFinite(bv)) this.setB(bv);
            this.setA(1);
            return true
        }
        parseCommaSeparatedPercentageRgb(str) {
            if (typeof str !== "string") return false;
            str = str.replace(/^rgb\(|\)|%/, "");
            const arr = str.split(",");
            if (arr.length < 3) return false;
            const rv = parseInt(arr[0].trim(), 10) / 100;
            const gv = parseInt(arr[1].trim(), 10) / 100;
            const bv = parseInt(arr[2].trim(), 10) / 100;
            if (isFinite(rv)) this.setR(rv);
            if (isFinite(gv)) this.setG(gv);
            if (isFinite(bv)) this.setB(bv);
            this.setA(1);
            return true
        }
        parseCommaSeparatedRgba(str) {
            if (typeof str !== "string") return false;
            str = str.replace(/^rgba\(|\)|%/, "");
            const arr = str.split(",");
            if (arr.length < 4) return false;
            const rv = parseInt(arr[0].trim(), 10) / 255;
            const gv = parseInt(arr[1].trim(), 10) / 255;
            const bv = parseInt(arr[2].trim(),
                10) / 255;
            const av = parseFloat(arr[3].trim());
            if (isFinite(rv)) this.setR(rv);
            if (isFinite(gv)) this.setG(gv);
            if (isFinite(bv)) this.setB(bv);
            if (isFinite(av)) this.setA(av);
            return true
        }
        parseCommaSeparatedPercentageRgba(str) {
            if (typeof str !== "string") return false;
            str = str.replace(/^rgba\(|\)|%/, "");
            const arr = str.split(",");
            if (arr.length < 4) return false;
            const rv = parseInt(arr[0].trim(), 10) / 100;
            const gv = parseInt(arr[1].trim(), 10) / 100;
            const bv = parseInt(arr[2].trim(), 10) / 100;
            const av = parseFloat(arr[3].trim());
            if (isFinite(rv)) this.setR(rv);
            if (isFinite(gv)) this.setG(gv);
            if (isFinite(bv)) this.setB(bv);
            if (isFinite(av)) this.setA(av);
            return true
        }
        parseString(str) {
            if (typeof str !== "string") return false;
            str = str.replace(/\s+/, "");
            if (str.includes(","))
                if (str.startsWith("rgb("))
                    if (str.includes("%")) return this.parseCommaSeparatedPercentageRgb(str);
                    else return this.parseCommaSeparatedRgb(str);
            else if (str.startsWith("rgba("))
                if (str.includes("%")) return this.parseCommaSeparatedPercentageRgba(str);
                else return this.parseCommaSeparatedRgba(str);
            else if (str.startsWith("hsl(") ||
                str.startsWith("hsla(")) return this.parseHSLString(str);
            else {
                const components = str.split(",");
                if (str.includes("%")) {
                    if (components.length === 3) return this.parseCommaSeparatedPercentageRgb(str);
                    else if (components.length === 4) return this.parseCommaSeparatedPercentageRgba(str);
                    return false
                } else {
                    if (components.length === 3) return this.parseCommaSeparatedRgb(str);
                    else if (components.length === 4) return this.parseCommaSeparatedRgba(str);
                    return false
                }
            } else return this.parseHexString(str)
        }
        toJSON() {
            return [this._r, this._g,
                this._b, this._a
            ]
        }
        setFromHSLA(h, s, l, a) {
            let r;
            let g;
            let b;
            h %= 360;
            s = C3.clamp(s, 0, 100);
            l = C3.clamp(l, 0, 100);
            a = C3.clamp(a, 0, 1);
            h /= 360;
            s /= 100;
            l /= 100;
            if (s === 0) r = g = b = l;
            else {
                const q = l < .5 ? l * (1 + s) : l + s - l * s;
                const p = 2 * l - q;
                r = hueToRGB(p, q, h + 1 / 3);
                g = hueToRGB(p, q, h);
                b = hueToRGB(p, q, h - 1 / 3)
            }
            this.setR(r);
            this.setG(g);
            this.setB(b);
            this.setA(a);
            return this
        }
        parseHSLString(str) {
            const cleanString = str.replace(/ |hsl|hsla|\(|\)|;/gi, "");
            const hsl = HSL_TEST.exec(cleanString);
            const hsla = HSLA_TEST.exec(cleanString);
            if (hsl && hsl.length ===
                4) {
                this.setFromHSLA(+hsl[1], +hsl[2], +hsl[3], 1);
                return true
            } else if (hsla && hsla.length === 5) {
                this.setFromHSLA(+hsl[1], +hsl[2], +hsl[3], +hsl[4]);
                return true
            }
            return false
        }
        toHSLAString() {
            const r = this._r;
            const g = this._g;
            const b = this._b;
            const a = this._a;
            const h = C3.Color.GetHue(r, g, b);
            const s = C3.Color.GetSaturation(r, g, b);
            const l = C3.Color.GetLuminosity(r, g, b);
            return `hsla(${h}, ${s}%, ${l}%, ${a})`
        }
        toHSLAArray() {
            const r = this._r;
            const g = this._g;
            const b = this._b;
            return [C3.Color.GetHue(r, g, b), C3.Color.GetSaturation(r,
                g, b), C3.Color.GetLuminosity(r, g, b), this._a]
        }
        setFromJSON(arr) {
            if (!Array.isArray(arr)) return;
            if (arr.length < 3) return;
            this._r = arr[0];
            this._g = arr[1];
            this._b = arr[2];
            if (arr.length >= 4) this._a = arr[3];
            else this._a = 1
        }
        set r(r) {
            this.setR(r)
        }
        get r() {
            return this.getR()
        }
        set g(g) {
            this.setG(g)
        }
        get g() {
            return this.getG()
        }
        set b(b) {
            this.setB(b)
        }
        get b() {
            return this.getB()
        }
        set a(a) {
            this.setA(a)
        }
        get a() {
            return this.getA()
        }
        setAtIndex(i, v) {
            switch (i) {
                case 0:
                    this.setR(v);
                    break;
                case 1:
                    this.setG(v);
                    break;
                case 2:
                    this.setB(v);
                    break;
                case 3:
                    this.setA(v);
                    break;
                default:
                    throw new RangeError("invalid color index");
            }
        }
        getAtIndex(i) {
            switch (i) {
                case 0:
                    return this.getR();
                case 1:
                    return this.getG();
                case 2:
                    return this.getB();
                case 3:
                    return this.getA();
                default:
                    throw new RangeError("invalid color index");
            }
        }
        static Equals(color_or_json_1, color_or_json_2) {
            let c1;
            let c2;
            if (Array.isArray(color_or_json_1)) {
                c1 = new C3.Color;
                c1.setFromJSON(color_or_json_1)
            } else if (color_or_json_1 instanceof C3.Color) c1 = color_or_json_1;
            else throw new Error("unexpected type");
            if (Array.isArray(color_or_json_2)) {
                c2 = new C3.Color;
                c2.setFromJSON(color_or_json_2)
            } else if (color_or_json_2 instanceof C3.Color) c2 = color_or_json_2;
            else throw new Error("unexpected type");
            return c1.equals(c2)
        }
        static DiffChannel(channel1, channel2) {
            return C3.clamp(Math.max(channel1, channel2) - Math.min(channel1, channel2), 0, 1)
        }
        static Diff(c1, c2) {
            const ret = new C3.Color;
            ret.setR(Math.max(c1._r, c2._r) - Math.min(c1._r, c2._r));
            ret.setG(Math.max(c1._g, c2._g) - Math.min(c1._g, c2._g));
            ret.setB(Math.max(c1._b, c2._b) -
                Math.min(c1._b, c2._b));
            ret.setA(Math.max(c1._a, c2._a) - Math.min(c1._a, c2._a));
            return ret
        }
        static DiffNoAlpha(c1, c2) {
            const ret = new C3.Color(0, 0, 0, 1);
            ret.setR(Math.max(c1._r, c2._r) - Math.min(c1._r, c2._r));
            ret.setG(Math.max(c1._g, c2._g) - Math.min(c1._g, c2._g));
            ret.setB(Math.max(c1._b, c2._b) - Math.min(c1._b, c2._b));
            return ret
        }
        static GetHue(r, g, b) {
            const max = Math.max(r, g, b);
            const min = Math.min(r, g, b);
            if (max === min) return 0;
            let h = 0;
            switch (max) {
                case r:
                    h = (g - b) / (max - min) + (g < b ? 6 : 0);
                    break;
                case g:
                    h = (b - r) / (max - min) + 2;
                    break;
                case b:
                    h = (r - g) / (max - min) + 4;
                    break
            }
            return Math.round(h / 6 * 360)
        }
        static GetSaturation(r, g, b) {
            const max = Math.max(r, g, b);
            const min = Math.min(r, g, b);
            if (max === min) return 0;
            const l = (max + min) / 2;
            const d = max - min;
            const s = l > .5 ? d / (2 - max - min) : d / (max + min);
            return Math.round(s * 100)
        }
        static GetLuminosity(r, g, b) {
            const max = Math.max(r, g, b);
            const min = Math.min(r, g, b);
            const l = (max + min) / 2;
            if (!max) return 0;
            return Math.round(l * 100)
        }
    };
    C3.Color.White = Object.freeze(C3.New(C3.Color, 1, 1, 1, 1));
    C3.Color.Black = Object.freeze(C3.New(C3.Color, 0, 0, 0, 1));
    C3.Color.TransparentBlack = Object.freeze(C3.New(C3.Color, 0, 0, 0, 0));

}

// ../lib/misc/vector2.js
{
    'use strict';
    const C3 = self.C3;
    C3.Vector2 = class Vector2 {
        constructor(x, y) {
            this._x = 0;
            this._y = 0;
            if (x instanceof C3.Vector2) this.copy(x);
            else this.set(x || 0, y || 0)
        }
        set(x, y) {
            this._x = +x;
            this._y = +y
        }
        copy(v) {
            this._x = v._x;
            this._y = v._y
        }
        equals(v) {
            return this._x === v._x && this._y === v._y
        }
        equalsValues(x, y) {
            return this._x === x && this._y === y
        }
        equalsF32Array(arr, offset) {
            return arr[offset] === Math.fround(this._x) && arr[offset + 1] === Math.fround(this._y)
        }
        setX(x) {
            this._x = +x
        }
        getX() {
            return this._x
        }
        setY(y) {
            this._y = +y
        }
        getY() {
            return this._y
        }
        toArray() {
            return [this._x, this._y]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(ta,
            i) {
            ta[i++] = this._x;
            ta[i] = this._y
        }
        offset(x, y) {
            this._x += +x;
            this._y += +y
        }
        scale(x, y) {
            this._x *= x;
            this._y *= y
        }
        divide(x, y) {
            this._x /= x;
            this._y /= y
        }
        round() {
            this._x = Math.round(this._x);
            this._y = Math.round(this._y)
        }
        floor() {
            this._x = Math.floor(this._x);
            this._y = Math.floor(this._y)
        }
        ceil() {
            this._x = Math.ceil(this._x);
            this._y = Math.ceil(this._y)
        }
        angle() {
            return C3.angleTo(0, 0, this._x, this._y)
        }
        lengthSquared() {
            return this._x * this._x + this._y * this._y
        }
        length() {
            return Math.hypot(this._x, this._y)
        }
        rotatePrecalc(sin_a, cos_a) {
            const temp =
                this._x * cos_a - this._y * sin_a;
            this._y = this._y * cos_a + this._x * sin_a;
            this._x = temp
        }
        rotate(a) {
            if (a === 0) return;
            this.rotatePrecalc(Math.sin(a), Math.cos(a))
        }
        rotateAbout(a, x, y) {
            if (a === 0 || x === this._x && y === this._y) return;
            this._x -= x;
            this._y -= y;
            this.rotatePrecalc(Math.sin(a), Math.cos(a));
            this._x += +x;
            this._y += +y
        }
        move(a, dist) {
            if (dist === 0) return;
            this._x += Math.cos(a) * dist;
            this._y += Math.sin(a) * dist
        }
        normalize() {
            const m = this.length();
            if (m !== 0 && m !== 1) {
                this._x /= m;
                this._y /= m
            }
        }
        clamp(lower, upper) {
            this._x = C3.clamp(this._x, lower,
                upper);
            this._y = C3.clamp(this._y, lower, upper)
        }
    };

}

// ../lib/misc/rect.js
{
    'use strict';
    const C3 = self.C3;
    C3.Rect = class Rect {
        constructor(left, top, right, bottom) {
            this._left = NaN;
            this._top = NaN;
            this._right = NaN;
            this._bottom = NaN;
            this._left = 0;
            this._top = 0;
            this._right = 0;
            this._bottom = 0;
            if (left instanceof C3.Rect) this.copy(left);
            else this.set(left || 0, top || 0, right || 0, bottom || 0)
        }
        set(left, top, right, bottom) {
            this._left = +left;
            this._top = +top;
            this._right = +right;
            this._bottom = +bottom
        }
        setWH(left, top, width, height) {
            left = +left;
            top = +top;
            this._left = left;
            this._top = top;
            this._right = left + +width;
            this._bottom = top + +height
        }
        copy(rect) {
            this._left = +rect._left;
            this._top = +rect._top;
            this._right = +rect._right;
            this._bottom = +rect._bottom
        }
        clone() {
            return new C3.Rect(this._left, this._top, this._right, this._bottom)
        }
        static Merge(first, second) {
            const ret = new C3.Rect;
            ret.setLeft(Math.min(first._left, second._left));
            ret.setTop(Math.min(first._top, second._top));
            ret.setRight(Math.max(first._right, second._right));
            ret.setBottom(Math.max(first._bottom, second._bottom));
            return ret
        }
        static FromObject(o) {
            return new C3.Rect(o.left, o.top, o.right, o.bottom)
        }
        equals(rect) {
            return this._left ===
                rect._left && this._top === rect._top && this._right === rect._right && this._bottom === rect._bottom
        }
        equalsWH(x, y, w, h) {
            return this._left === x && this._top === y && this.width() === w && this.height() === h
        }
        equalsF32Array(arr, offset) {
            return arr[offset] === Math.fround(this._left) && arr[offset + 1] === Math.fround(this._top) && arr[offset + 2] === Math.fround(this._right) && arr[offset + 3] === Math.fround(this._bottom)
        }
        setLeft(l) {
            this._left = +l
        }
        getLeft() {
            return this._left
        }
        setTop(t) {
            this._top = +t
        }
        getTop() {
            return this._top
        }
        setRight(r) {
            this._right = +r
        }
        getRight() {
            return this._right
        }
        setBottom(b) {
            this._bottom = +b
        }
        getBottom() {
            return this._bottom
        }
        toArray() {
            return [this._left, this._top, this._right, this._bottom]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        toDOMRect() {
            return new DOMRect(this._left, this._top, this.width(), this.height())
        }
        writeToTypedArray(ta, i) {
            ta[i++] = this._left;
            ta[i++] = this._top;
            ta[i++] = this._right;
            ta[i] = this._bottom
        }
        writeAsQuadToTypedArray(ta, i) {
            ta[i++] = this._left;
            ta[i++] = this._top;
            ta[i++] = this._right;
            ta[i++] = this._top;
            ta[i++] =
                this._right;
            ta[i++] = this._bottom;
            ta[i++] = this._left;
            ta[i] = this._bottom
        }
        writeAsQuadToTypedArray3D(ta, i, z) {
            ta[i++] = this._left;
            ta[i++] = this._top;
            ta[i++] = z;
            ta[i++] = this._right;
            ta[i++] = this._top;
            ta[i++] = z;
            ta[i++] = this._right;
            ta[i++] = this._bottom;
            ta[i++] = z;
            ta[i++] = this._left;
            ta[i++] = this._bottom;
            ta[i] = z
        }
        width() {
            return this._right - this._left
        }
        height() {
            return this._bottom - this._top
        }
        midX() {
            return (this._left + this._right) / 2
        }
        midY() {
            return (this._top + this._bottom) / 2
        }
        offset(x, y) {
            x = +x;
            y = +y;
            this._left += x;
            this._top +=
                y;
            this._right += x;
            this._bottom += y
        }
        offsetLeft(x) {
            this._left += +x
        }
        offsetTop(y) {
            this._top += +y
        }
        offsetRight(x) {
            this._right += +x
        }
        offsetBottom(y) {
            this._bottom += +y
        }
        toSquare(axis) {
            if (axis !== "x") throw new Error("invalid axis, only 'x' supported");
            if (this._top < this._bottom)
                if (this._left < this._right) this._bottom = this._top + this.width();
                else this._bottom = this._top - this.width();
            else if (this._left < this._right) this._bottom = this._top - this.width();
            else this._bottom = this._top + this.width()
        }
        inflate(x, y) {
            x = +x;
            y = +y;
            this._left -=
                x;
            this._top -= y;
            this._right += x;
            this._bottom += y
        }
        deflate(x, y) {
            x = +x;
            y = +y;
            this._left += x;
            this._top += y;
            this._right -= x;
            this._bottom -= y
        }
        multiply(x, y) {
            this._left *= x;
            this._top *= y;
            this._right *= x;
            this._bottom *= y
        }
        divide(x, y) {
            this._left /= x;
            this._top /= y;
            this._right /= x;
            this._bottom /= y
        }
        mirrorAround(origin) {
            this._left = +origin - this._left;
            this._right = +origin - this._right
        }
        flipAround(origin) {
            this._top = +origin - this._top;
            this._bottom = +origin - this._bottom
        }
        rotate90DegreesAround(normalizedX, normalizedY) {
            const w = this.width();
            const h = this.height();
            const cx = this.getLeft() + w * normalizedX;
            const cy = this.getTop() + h * normalizedY;
            this.setWH(cx - h * normalizedY, cy - w * normalizedX, h, w)
        }
        swapLeftRight() {
            const temp = this._left;
            this._left = this._right;
            this._right = temp
        }
        swapTopBottom() {
            const temp = this._top;
            this._top = this._bottom;
            this._bottom = temp
        }
        shuntY(h) {
            const top = this._top;
            this._top = +h - this._bottom;
            this._bottom = +h - top
        }
        round() {
            this._left = Math.round(this._left);
            this._top = Math.round(this._top);
            this._right = Math.round(this._right);
            this._bottom =
                Math.round(this._bottom)
        }
        roundInner() {
            this._left = Math.ceil(this._left);
            this._top = Math.ceil(this._top);
            this._right = Math.floor(this._right);
            this._bottom = Math.floor(this._bottom)
        }
        roundOuter() {
            this._left = Math.floor(this._left);
            this._top = Math.floor(this._top);
            this._right = Math.ceil(this._right);
            this._bottom = Math.ceil(this._bottom)
        }
        floor() {
            this._left = Math.floor(this._left);
            this._top = Math.floor(this._top);
            this._right = Math.floor(this._right);
            this._bottom = Math.floor(this._bottom)
        }
        ceil() {
            this._left = Math.ceil(this._left);
            this._top = Math.ceil(this._top);
            this._right = Math.ceil(this._right);
            this._bottom = Math.ceil(this._bottom)
        }
        clamp(l, t, r, b) {
            if (this._left < l) this._left = +l;
            if (this._top < t) this._top = +t;
            if (this._right > r) this._right = +r;
            if (this._bottom > b) this._bottom = +b
        }
        clampFlipped(l, t, r, b) {
            if (this._left < l) this._left = +l;
            if (this._top > t) this._top = +t;
            if (this._right > r) this._right = +r;
            if (this._bottom < b) this._bottom = +b
        }
        normalize() {
            if (this._left > this._right) this.swapLeftRight();
            if (this._top > this._bottom) this.swapTopBottom()
        }
        intersectsRect(rect) {
            return !(rect._right <
                this._left || rect._bottom < this._top || rect._left > this._right || rect._top > this._bottom)
        }
        intersectsRectOffset(rect, x, y) {
            return !(rect._right + x < this._left || rect._bottom + y < this._top || rect._left + x > this._right || rect._top + y > this._bottom)
        }
        containsPoint(x, y) {
            return x >= this._left && x <= this._right && y >= this._top && y <= this._bottom
        }
        containsRect(rect) {
            return rect._left >= this._left && rect._top >= this._top && rect._right <= this._right && rect._bottom <= this._bottom
        }
        expandToContain(rect) {
            if (rect._left < this._left) this._left = +rect._left;
            if (rect._top < this._top) this._top = +rect._top;
            if (rect._right > this._right) this._right = +rect._right;
            if (rect._bottom > this._bottom) this._bottom = +rect._bottom
        }
        lerpInto(rect) {
            this._left = C3.lerp(rect._left, rect._right, this._left);
            this._top = C3.lerp(rect._top, rect._bottom, this._top);
            this._right = C3.lerp(rect._left, rect._right, this._right);
            this._bottom = C3.lerp(rect._top, rect._bottom, this._bottom)
        }
    };

}

// ../lib/misc/quad.js
{
    'use strict';
    const C3 = self.C3;
    C3.Quad = class Quad {
        constructor(tlx, tly, trx, try_, brx, bry, blx, bly) {
            this._tlx = NaN;
            this._tly = NaN;
            this._trx = NaN;
            this._try = NaN;
            this._brx = NaN;
            this._bry = NaN;
            this._blx = NaN;
            this._bly = NaN;
            this._tlx = 0;
            this._tly = 0;
            this._trx = 0;
            this._try = 0;
            this._brx = 0;
            this._bry = 0;
            this._blx = 0;
            this._bly = 0;
            if (tlx instanceof C3.Quad) this.copy(tlx);
            else this.set(tlx || 0, tly || 0, trx || 0, try_ || 0, brx || 0, bry || 0, blx || 0, bly || 0)
        }
        set(tlx, tly, trx, try_, brx, bry, blx, bly) {
            this._tlx = +tlx;
            this._tly = +tly;
            this._trx = +trx;
            this._try = +try_;
            this._brx = +brx;
            this._bry = +bry;
            this._blx = +blx;
            this._bly = +bly
        }
        setRect(left, top, right, bottom) {
            this.set(left, top, right, top, right, bottom, left, bottom)
        }
        copy(q) {
            this._tlx = q._tlx;
            this._tly = q._tly;
            this._trx = q._trx;
            this._try = q._try;
            this._brx = q._brx;
            this._bry = q._bry;
            this._blx = q._blx;
            this._bly = q._bly
        }
        equals(q) {
            return this._tlx === q._tlx && this._tly === q._tly && this._trx === q._trx && this._try === q._try && this._brx === q._brx && this._bry === q._bry && this._blx === q._blx && this._bly === q._bly
        }
        setTlx(v) {
            this._tlx = +v
        }
        getTlx() {
            return this._tlx
        }
        setTly(v) {
            this._tly = +v
        }
        getTly() {
            return this._tly
        }
        setTrx(v) {
            this._trx = +v
        }
        getTrx() {
            return this._trx
        }
        setTry(v) {
            this._try = +v
        }
        getTry() {
            return this._try
        }
        setBrx(v) {
            this._brx = +v
        }
        getBrx() {
            return this._brx
        }
        setBry(v) {
            this._bry = +v
        }
        getBry() {
            return this._bry
        }
        setBlx(v) {
            this._blx = +v
        }
        getBlx() {
            return this._blx
        }
        setBly(v) {
            this._bly = +v
        }
        getBly() {
            return this._bly
        }
        toDOMQuad() {
            return new DOMQuad(new DOMPoint(this._tlx, this._tly), new DOMPoint(this._trx, this._try), new DOMPoint(this._brx, this._bry), new DOMPoint(this._blx, this._bly))
        }
        toArray() {
            return [this._tlx,
                this._tly, this._trx, this._try, this._brx, this._bry, this._blx, this._bly
            ]
        }
        toTypedArray() {
            return new Float64Array(this.toArray())
        }
        writeToTypedArray(ta, i) {
            ta[i++] = this._tlx;
            ta[i++] = this._tly;
            ta[i++] = this._trx;
            ta[i++] = this._try;
            ta[i++] = this._brx;
            ta[i++] = this._bry;
            ta[i++] = this._blx;
            ta[i] = this._bly
        }
        writeToTypedArray3D(ta, i, z) {
            ta[i++] = this._tlx;
            ta[i++] = this._tly;
            ta[i++] = z;
            ta[i++] = this._trx;
            ta[i++] = this._try;
            ta[i++] = z;
            ta[i++] = this._brx;
            ta[i++] = this._bry;
            ta[i++] = z;
            ta[i++] = this._blx;
            ta[i++] = this._bly;
            ta[i] = z
        }
        offset(x,
            y) {
            x = +x;
            y = +y;
            this._tlx += x;
            this._tly += y;
            this._trx += x;
            this._try += y;
            this._brx += x;
            this._bry += y;
            this._blx += x;
            this._bly += y
        }
        round() {
            this._tlx = Math.round(this._tlx);
            this._tly = Math.round(this._tly);
            this._trx = Math.round(this._trx);
            this._try = Math.round(this._try);
            this._brx = Math.round(this._brx);
            this._bry = Math.round(this._bry);
            this._blx = Math.round(this._blx);
            this._bly = Math.round(this._bly)
        }
        floor() {
            this._tlx = Math.floor(this._tlx);
            this._tly = Math.floor(this._tly);
            this._trx = Math.floor(this._trx);
            this._try = Math.floor(this._try);
            this._brx = Math.floor(this._brx);
            this._bry = Math.floor(this._bry);
            this._blx = Math.floor(this._blx);
            this._bly = Math.floor(this._bly)
        }
        ceil() {
            this._tlx = Math.ceil(this._tlx);
            this._tly = Math.ceil(this._tly);
            this._trx = Math.ceil(this._trx);
            this._try = Math.ceil(this._try);
            this._brx = Math.ceil(this._brx);
            this._bry = Math.ceil(this._bry);
            this._blx = Math.ceil(this._blx);
            this._bly = Math.ceil(this._bly)
        }
        setFromRect(rect) {
            this._tlx = rect._left;
            this._tly = rect._top;
            this._trx = rect._right;
            this._try = rect._top;
            this._brx = rect._right;
            this._bry = rect._bottom;
            this._blx = rect._left;
            this._bly = rect._bottom
        }
        setFromRotatedRect(rect, a) {
            if (a === 0) this.setFromRect(rect);
            else this.setFromRotatedRectPrecalc(rect, Math.sin(a), Math.cos(a))
        }
        setFromRotatedRectPrecalc(rect, sin_a, cos_a) {
            const left_sin_a = rect._left * sin_a;
            const top_sin_a = rect._top * sin_a;
            const right_sin_a = rect._right * sin_a;
            const bottom_sin_a = rect._bottom * sin_a;
            const left_cos_a = rect._left * cos_a;
            const top_cos_a = rect._top * cos_a;
            const right_cos_a = rect._right * cos_a;
            const bottom_cos_a = rect._bottom *
                cos_a;
            this._tlx = left_cos_a - top_sin_a;
            this._tly = top_cos_a + left_sin_a;
            this._trx = right_cos_a - top_sin_a;
            this._try = top_cos_a + right_sin_a;
            this._brx = right_cos_a - bottom_sin_a;
            this._bry = bottom_cos_a + right_sin_a;
            this._blx = left_cos_a - bottom_sin_a;
            this._bly = bottom_cos_a + left_sin_a
        }
        getBoundingBox(rect) {
            rect.set(Math.min(this._tlx, this._trx, this._brx, this._blx), Math.min(this._tly, this._try, this._bry, this._bly), Math.max(this._tlx, this._trx, this._brx, this._blx), Math.max(this._tly, this._try, this._bry, this._bly))
        }
        containsPoint(x,
            y) {
            let v0x = this._trx - this._tlx;
            let v0y = this._try - this._tly;
            const v1x = this._brx - this._tlx;
            const v1y = this._bry - this._tly;
            const v2x = x - this._tlx;
            const v2y = y - this._tly;
            let dot00 = v0x * v0x + v0y * v0y;
            let dot01 = v0x * v1x + v0y * v1y;
            let dot02 = v0x * v2x + v0y * v2y;
            const dot11 = v1x * v1x + v1y * v1y;
            const dot12 = v1x * v2x + v1y * v2y;
            let invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
            let u = (dot11 * dot02 - dot01 * dot12) * invDenom;
            let v = (dot00 * dot12 - dot01 * dot02) * invDenom;
            if (u >= 0 && v > 0 && u + v < 1) return true;
            v0x = this._blx - this._tlx;
            v0y = this._bly - this._tly;
            dot00 =
                v0x * v0x + v0y * v0y;
            dot01 = v0x * v1x + v0y * v1y;
            dot02 = v0x * v2x + v0y * v2y;
            invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
            u = (dot11 * dot02 - dot01 * dot12) * invDenom;
            v = (dot00 * dot12 - dot01 * dot02) * invDenom;
            return u >= 0 && v > 0 && u + v < 1
        }
        midX() {
            return (this._tlx + this._trx + this._brx + this._blx) / 4
        }
        midY() {
            return (this._tly + this._try + this._bry + this._bly) / 4
        }
        intersectsSegment(x1, y1, x2, y2) {
            if (this.containsPoint(x1, y1) || this.containsPoint(x2, y2)) return true;
            return C3.segmentIntersectsQuad(x1, y1, x2, y2, this)
        }
        intersectsQuad(rhs) {
            let midX = rhs.midX();
            let midY =
                rhs.midY();
            if (this.containsPoint(midX, midY)) return true;
            midX = this.midX();
            midY = this.midY();
            if (rhs.containsPoint(midX, midY)) return true;
            const tlx = this._tlx,
                tly = this._tly,
                trx = this._trx,
                try_ = this._try,
                brx = this._brx,
                bry = this._bry,
                blx = this._blx,
                bly = this._bly;
            return C3.segmentIntersectsQuad(tlx, tly, trx, try_, rhs) || C3.segmentIntersectsQuad(trx, try_, brx, bry, rhs) || C3.segmentIntersectsQuad(brx, bry, blx, bly, rhs) || C3.segmentIntersectsQuad(blx, bly, tlx, tly, rhs)
        }
        rotatePointsAnticlockwise() {
            const tlx = this._tlx;
            const tly =
                this._tly;
            this._tlx = this._trx;
            this._tly = this._try;
            this._trx = this._brx;
            this._try = this._bry;
            this._brx = this._blx;
            this._bry = this._bly;
            this._blx = tlx;
            this._bly = tly
        }
        mirror() {
            this._swap(0, 2);
            this._swap(1, 3);
            this._swap(6, 4);
            this._swap(7, 5)
        }
        flip() {
            this._swap(0, 6);
            this._swap(1, 7);
            this._swap(2, 4);
            this._swap(3, 5)
        }
        diag() {
            this._swap(2, 6);
            this._swap(3, 7)
        }
        _swap(i, j) {
            const tmp = this._getAtIndex(i);
            this._setAtIndex(i, this._getAtIndex(j));
            this._setAtIndex(j, tmp)
        }
        _getAtIndex(i) {
            switch (i) {
                case 0:
                    return this._tlx;
                case 1:
                    return this._tly;
                case 2:
                    return this._trx;
                case 3:
                    return this._try;
                case 4:
                    return this._brx;
                case 5:
                    return this._bry;
                case 6:
                    return this._blx;
                case 7:
                    return this._bly;
                default:
                    throw new RangeError("invalid quad point index");
            }
        }
        _setAtIndex(i, v) {
            v = +v;
            switch (i) {
                case 0:
                    this._tlx = v;
                    break;
                case 1:
                    this._tly = v;
                    break;
                case 2:
                    this._trx = v;
                    break;
                case 3:
                    this._try = v;
                    break;
                case 4:
                    this._brx = v;
                    break;
                case 5:
                    this._bry = v;
                    break;
                case 6:
                    this._blx = v;
                    break;
                case 7:
                    this._bly = v;
                    break;
                default:
                    throw new RangeError("invalid quad point index");
            }
        }
    };

}

// lib/misc/collisionPoly.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;
    const DEFAULT_POLY_POINTS = [0, 0, 1, 0, 1, 1, 0, 1];
    const tempQuad = C3.New(C3.Quad);
    C3.CollisionPoly = class CollisionPoly extends C3.DefendedBase {
        constructor(pointsArr, enabled = true) {
            super();
            if (!pointsArr) pointsArr = DEFAULT_POLY_POINTS;
            this._ptsArr = Float64Array.from(pointsArr);
            this._bbox = new C3.Rect;
            this._isBboxChanged = true;
            this._enabled = enabled
        }
        Release() {}
        pointsArr() {
            return this._ptsArr
        }
        pointCount() {
            return this._ptsArr.length / 2
        }
        setPoints(pointsArr) {
            if (this._ptsArr.length === pointsArr.length) this._ptsArr.set(pointsArr);
            else this._ptsArr = Float64Array.from(pointsArr);
            this._isBboxChanged =
                true
        }
        setDefaultPoints() {
            this.setPoints(DEFAULT_POLY_POINTS)
        }
        copy(poly) {
            this.setPoints(poly._ptsArr)
        }
        setBboxChanged() {
            this._isBboxChanged = true
        }
        _updateBbox() {
            if (!this._isBboxChanged) return;
            const ptsArr = this._ptsArr;
            let left = ptsArr[0];
            let top = ptsArr[1];
            let right = left;
            let bottom = top;
            for (let i = 0, len = ptsArr.length; i < len; i += 2) {
                const x = ptsArr[i];
                const y = ptsArr[i + 1];
                if (x < left) left = x;
                if (x > right) right = x;
                if (y < top) top = y;
                if (y > bottom) bottom = y
            }
            this._bbox.set(left, top, right, bottom);
            this._isBboxChanged = false
        }
        setFromRect(rc,
            offX, offY) {
            let ptsArr = this._ptsArr;
            if (ptsArr.length !== 8) {
                ptsArr = new Float64Array(8);
                this._ptsArr = ptsArr
            }
            ptsArr[0] = rc.getLeft() - offX;
            ptsArr[1] = rc.getTop() - offY;
            ptsArr[2] = rc.getRight() - offX;
            ptsArr[3] = rc.getTop() - offY;
            ptsArr[4] = rc.getRight() - offX;
            ptsArr[5] = rc.getBottom() - offY;
            ptsArr[6] = rc.getLeft() - offX;
            ptsArr[7] = rc.getBottom() - offY;
            this._bbox.copy(rc);
            if (offX !== 0 || offY !== 0) this._bbox.offset(-offX, -offY);
            this._isBboxChanged = false
        }
        setFromQuad(q, offX, offY) {
            tempQuad.copy(q);
            tempQuad.offset(offX, offY);
            this.setPoints(tempQuad.toArray());
            this._isBboxChanged = true
        }
        transform(w, h, a) {
            let sina = 0;
            let cosa = 1;
            if (a !== 0) {
                sina = Math.sin(a);
                cosa = Math.cos(a)
            }
            this.transformPrecalc(w, h, sina, cosa)
        }
        transformPrecalc(w, h, sina, cosa) {
            const ptsArr = this._ptsArr;
            for (let i = 0, len = ptsArr.length; i < len; i += 2) {
                const j = i + 1;
                const x = ptsArr[i] * w;
                const y = ptsArr[j] * h;
                ptsArr[i] = x * cosa - y * sina;
                ptsArr[j] = y * cosa + x * sina
            }
            this._isBboxChanged = true
        }
        offset(x, y) {
            const ptsArr = this._ptsArr;
            for (let i = 0, len = ptsArr.length; i < len; i += 2) {
                ptsArr[i] += x;
                ptsArr[i + 1] += y
            }
        }
        containsPoint(a2x, a2y) {
            const ptsArr =
                this._ptsArr;
            if (a2x === ptsArr[0] && a2y === ptsArr[1]) return true;
            this._updateBbox();
            const bbox = this._bbox;
            const a1x = bbox.getLeft() - 110;
            const a1y = bbox.getTop() - 101;
            const a3x = bbox.getRight() + 131;
            const a3y = bbox.getBottom() + 120;
            let minAx12 = 0;
            let minAy12 = 0;
            let maxAx12 = 0;
            let maxAy12 = 0;
            let minAx32 = 0;
            let minAy32 = 0;
            let maxAx32 = 0;
            let maxAy32 = 0;
            if (a1x < a2x) {
                minAx12 = a1x;
                maxAx12 = a2x
            } else {
                minAx12 = a2x;
                maxAx12 = a1x
            }
            if (a1y < a2y) {
                minAy12 = a1y;
                maxAy12 = a2y
            } else {
                minAy12 = a2y;
                maxAy12 = a1y
            }
            if (a3x < a2x) {
                minAx32 = a3x;
                maxAx32 = a2x
            } else {
                minAx32 =
                    a2x;
                maxAx32 = a3x
            }
            if (a3y < a2y) {
                minAy32 = a3y;
                maxAy32 = a2y
            } else {
                minAy32 = a2y;
                maxAy32 = a3y
            }
            let count1 = 0;
            let count2 = 0;
            for (let i = 0, len = ptsArr.length; i < len; i += 2) {
                const j = (i + 2) % len;
                const b1x = ptsArr[i];
                const b1y = ptsArr[i + 1];
                const b2x = ptsArr[j];
                const b2y = ptsArr[j + 1];
                if (C3.segmentsIntersectPreCalc(a1x, a1y, a2x, a2y, minAx12, maxAx12, minAy12, maxAy12, b1x, b1y, b2x, b2y)) ++count1;
                if (C3.segmentsIntersectPreCalc(a3x, a3y, a2x, a2y, minAx32, maxAx32, minAy32, maxAy32, b1x, b1y, b2x, b2y)) ++count2
            }
            return count1 % 2 === 1 || count2 % 2 === 1
        }
        intersectsPoly(poly,
            offX, offY) {
            const rPts = poly._ptsArr;
            const lPts = this._ptsArr;
            if (this.containsPoint(rPts[0] + offX, rPts[1] + offY)) return true;
            if (poly.containsPoint(lPts[0] - offX, lPts[1] - offY)) return true;
            for (let i = 0, leni = lPts.length; i < leni; i += 2) {
                const j = (i + 2) % leni;
                const a1x = lPts[i];
                const a1y = lPts[i + 1];
                const a2x = lPts[j];
                const a2y = lPts[j + 1];
                let minAx = 0;
                let minAy = 0;
                let maxAx = 0;
                let maxAy = 0;
                if (a1x < a2x) {
                    minAx = a1x;
                    maxAx = a2x
                } else {
                    minAx = a2x;
                    maxAx = a1x
                }
                if (a1y < a2y) {
                    minAy = a1y;
                    maxAy = a2y
                } else {
                    minAy = a2y;
                    maxAy = a1y
                }
                for (let k = 0, lenk = rPts.length; k <
                    lenk; k += 2) {
                    const l = (k + 2) % lenk;
                    const b1x = rPts[k] + offX;
                    const b1y = rPts[k + 1] + offY;
                    const b2x = rPts[l] + offX;
                    const b2y = rPts[l + 1] + offY;
                    if (C3.segmentsIntersectPreCalc(a1x, a1y, a2x, a2y, minAx, maxAx, minAy, maxAy, b1x, b1y, b2x, b2y)) return true
                }
            }
            return false
        }
        intersectsSegment(offX, offY, a1x, a1y, a2x, a2y) {
            if (this.containsPoint(a1x - offX, a1y - offY)) return true;
            if (this.containsPoint(a2x - offX, a2y - offY)) return true;
            let minAx = 0;
            let minAy = 0;
            let maxAx = 0;
            let maxAy = 0;
            if (a1x < a2x) {
                minAx = a1x;
                maxAx = a2x
            } else {
                minAx = a2x;
                maxAx = a1x
            }
            if (a1y <
                a2y) {
                minAy = a1y;
                maxAy = a2y
            } else {
                minAy = a2y;
                maxAy = a1y
            }
            const ptsArr = this._ptsArr;
            for (let i = 0, len = ptsArr.length; i < len; i += 2) {
                const j = (i + 2) % len;
                const b1x = ptsArr[i] + offX;
                const b1y = ptsArr[i + 1] + offY;
                const b2x = ptsArr[j] + offX;
                const b2y = ptsArr[j + 1] + offY;
                if (C3.segmentsIntersectPreCalc(a1x, a1y, a2x, a2y, minAx, maxAx, minAy, maxAy, b1x, b1y, b2x, b2y)) return true
            }
            return false
        }
        mirror(px) {
            const ptsArr = this._ptsArr;
            for (let i = 0, len = ptsArr.length; i < len; i += 2) ptsArr[i] = px * 2 - ptsArr[i];
            this._isBboxChanged = true
        }
        flip(py) {
            const ptsArr =
                this._ptsArr;
            for (let i = 0, len = ptsArr.length; i < len; i += 2) {
                const j = i + 1;
                ptsArr[j] = py * 2 - ptsArr[j]
            }
            this._isBboxChanged = true
        }
        diag() {
            const ptsArr = this._ptsArr;
            for (let i = 0, len = ptsArr.length; i < len; i += 2) {
                const j = i + 1;
                const temp = ptsArr[i];
                ptsArr[i] = ptsArr[j];
                ptsArr[j] = temp
            }
            this._isBboxChanged = true
        }
        GetMidX() {
            const ptsArr = this._ptsArr;
            let ret = 0;
            for (let i = 0, len = ptsArr.length; i < len; i += 2) ret += ptsArr[i];
            return ret / this.pointCount()
        }
        GetMidY() {
            const ptsArr = this._ptsArr;
            let ret = 0;
            for (let i = 0, len = ptsArr.length; i < len; i +=
                2) ret += ptsArr[i + 1];
            return ret / this.pointCount()
        }
        GetPointsArray() {
            return this._ptsArr
        }
        GetPointCount() {
            return this.pointCount()
        }
        IsEnabled() {
            return this._enabled
        }
    };

}

// lib/misc/pairMap.js
{
    'use strict';
    const C3 = self.C3;
    C3.PairMap = class PairMap extends C3.DefendedBase {
        constructor(iterable) {
            super();
            this._firstMap = new Map;
            if (iterable)
                for (const [x, y, value] of iterable) this.Set(x, y, value)
        }
        Release() {
            this.Clear();
            this._firstMap = null
        }
        Clear() {
            const firstMap = this._firstMap;
            for (const secondMap of firstMap.values()) secondMap.clear();
            firstMap.clear()
        }
        Set(x, y, value) {
            const firstMap = this._firstMap;
            let secondMap = firstMap.get(x);
            if (!secondMap) {
                secondMap = new Map;
                firstMap.set(x, secondMap)
            }
            secondMap.set(y, value)
        }
        Get(x, y) {
            const secondMap =
                this._firstMap.get(x);
            if (!secondMap) return secondMap;
            return secondMap.get(y)
        }
        Has(x, y) {
            const secondMap = this._firstMap.get(x);
            if (!secondMap) return false;
            return secondMap.has(y)
        }
        Delete(x, y) {
            const firstMap = this._firstMap;
            const secondMap = firstMap.get(x);
            if (!secondMap) return false;
            const ret = secondMap.delete(y);
            if (ret && secondMap.size === 0) firstMap.delete(x);
            return ret
        }
        DeleteEither(k) {
            const firstMap = this._firstMap;
            const secondMap = firstMap.get(k);
            if (secondMap) {
                secondMap.clear();
                firstMap.delete(k)
            }
            for (const [x,
                    secondMap
                ] of firstMap.entries())
                if (secondMap.delete(k) && secondMap.size === 0) firstMap.delete(x)
        }
        GetSize() {
            let ret = 0;
            for (const secondMap of this._firstMap.values()) ret += secondMap.size;
            return ret
        }* values() {
            for (const secondMap of this._firstMap.values()) yield* secondMap.values()
        }* keyPairs() {
            for (const [x, secondMap] of this._firstMap.entries())
                for (const y of secondMap.keys()) yield [x, y]
        }* entries() {
            for (const [x, secondMap] of this._firstMap.entries())
                for (const [y, value] of secondMap.entries()) yield [x, y, value]
        }
    };

}

// lib/misc/arraySet.js
{
    'use strict';
    const C3 = self.C3;
    C3.ArraySet = class ArraySet extends C3.DefendedBase {
        constructor() {
            super();
            this._set = new Set;
            this._arr = [];
            this._needToRebuildArray = false
        }
        Release() {
            this.Clear()
        }
        Clear() {
            this._set.clear();
            C3.clearArray(this._arr);
            this._needToRebuildArray = false
        }
        Add(v) {
            if (this._set.has(v)) return;
            this._set.add(v);
            if (!this._needToRebuildArray) this._arr.push(v)
        }
        Has(v) {
            return this._set.has(v)
        }
        Delete(v) {
            if (this._set.delete(v)) this._needToRebuildArray = true
        }
        GetSize() {
            return this._set.size
        }
        IsEmpty() {
            return this._set.size === 0
        }
        GetArray() {
            if (this._needToRebuildArray) {
                this._RebuildArray();
                this._needToRebuildArray = false
            }
            return this._arr
        }
        _RebuildArray() {
            const arr = this._arr;
            C3.clearArray(arr);
            for (const v of this._set) arr.push(v)
        }
    };

}

// ../lib/misc/ease.js
{
    'use strict';
    const C3 = self.C3;
    const EASE_MAP = new Map;
    const PREDEFINED_EASE_MAP = new Map;
    const CUSTOM_EASE_EDITOR_MAP = new Map;
    const CUSTOM_EASE_RUNTIME_MAP = new Map;
    const PRIVATE_EASE_MAP = new Map;
    const BUILT_IN_TRANSITION_MAP = new Map;
    const ALIAS_MAP = new Map;
    ALIAS_MAP.set("linear", "noease");
    ALIAS_MAP.set("default", "noease");
    const EASE_TRANSLATION_KEYS = ["default", "noease", "easeinquad", "easeoutquad", "easeinoutquad", "easeincubic", "easeoutcubic", "easeinoutcubic", "easeinquart", "easeoutquart", "easeinoutquart", "easeinquint", "easeoutquint", "easeinoutquint", "easeinsine", "easeoutsine", "easeinoutsine", "easeinexpo", "easeoutexpo", "easeinoutexpo", "easeincirc", "easeoutcirc", "easeinoutcirc", "easeinelastic", "easeoutelastic", "easeinoutelastic", "easeinback", "easeoutback", "easeinoutback", "easeinbounce", "easeoutbounce", "easeinoutbounce"];
    const SHORT_EASE_TRANSLATION_KEYS = ["default", "noease", "quad", "cubic", "quart", "quint", "sine", "expo", "circ", "elastic", "back", "bounce"];
    const EASE_API2INTERNAL_NAMES = new Map([
        ["linear", "noease"],
        ["in-sine", "easeinsine"],
        ["out-sine", "easeoutsine"],
        ["in-out-sine", "easeinoutsine"],
        ["in-elastic", "easeinelastic"],
        ["out-elastic", "easeoutelastic"],
        ["in-out-elastic", "easeinoutelastic"],
        ["in-back", "easeinback"],
        ["out-back", "easeoutback"],
        ["in-out-back", "easeinoutback"],
        ["in-bounce", "easeinbounce"],
        ["out-bounce", "easeoutbounce"],
        ["in-out-bounce", "easeinoutbounce"],
        ["in-cubic", "easeincubic"],
        ["out-cubic", "easeoutcubic"],
        ["in-out-cubic", "easeinoutcubic"],
        ["in-quadratic", "easeinquad"],
        ["out-quadratic", "easeoutquad"],
        ["in-out-quadratic", "easeinoutquad"],
        ["in-quartic", "easeinquart"],
        ["out-quartic", "easeoutquart"],
        ["in-out-quartic", "easeinoutquart"],
        ["in-quintic", "easeinquint"],
        ["out-quintic", "easeoutquint"],
        ["in-out-quintic", "easeinoutquint"],
        ["in-circular", "easeincirc"],
        ["out-circular", "easeoutcirc"],
        ["in-out-circular", "easeinoutcirc"],
        ["in-exponential", "easeinexpo"],
        ["out-exponential", "easeoutexpo"],
        ["in-out-exponential", "easeinoutexpo"]
    ]);
    self.Ease = class Ease {
        constructor() {}
        static InheritEase() {
            return "default"
        }
        static DefaultEase() {
            return "noease"
        }
        static ToInternal(ease) {
            return EASE_API2INTERNAL_NAMES.get(ease)
        }
        static GetEditorEaseNames(project, ...filter) {
            this._CreateEaseMap();
            let customEaseMap;
            if (project) {
                if (!CUSTOM_EASE_EDITOR_MAP.has(project)) CUSTOM_EASE_EDITOR_MAP.set(project, new Map);
                customEaseMap = CUSTOM_EASE_EDITOR_MAP.get(project)
            } else customEaseMap = CUSTOM_EASE_RUNTIME_MAP;
            const sortedCustomEases = [...customEaseMap.keys()];
            sortedCustomEases.sort();
            return [...PREDEFINED_EASE_MAP.keys()].concat(sortedCustomEases).filter(ease => !filter.includes(ease))
        }
        static GetRuntimeEaseNames() {
            this._CreateEaseMap();
            const sortedCustomEases = [...CUSTOM_EASE_RUNTIME_MAP.keys()];
            sortedCustomEases.sort();
            return [...PREDEFINED_EASE_MAP.keys()].concat(sortedCustomEases)
        }
        static GetCustomRuntimeEaseNames() {
            this._CreateEaseMap();
            const sortedCustomEases = [...CUSTOM_EASE_RUNTIME_MAP.keys()];
            sortedCustomEases.sort();
            return sortedCustomEases
        }
        static IsPredefinedTranslatedName(easeName) {
            for (const k of EASE_TRANSLATION_KEYS) {
                const translatedName =
                    self.lang(`ui.bars.timeline.eases.${k}`);
                if (translatedName === easeName) return true
            }
            for (const k of SHORT_EASE_TRANSLATION_KEYS) {
                const translatedName = self.lang(`ui.bars.timeline.short-eases.${k}`);
                if (translatedName === easeName) return true
            }
        }
        static IsNamePredefined(easeName) {
            this._CreateEaseMap();
            return [...PREDEFINED_EASE_MAP.keys()].includes(easeName)
        }
        static _GetEase(easeName) {
            const realEaseName = ALIAS_MAP.get(easeName);
            if (realEaseName) return EASE_MAP.get(realEaseName);
            if (Ease.IsNamePredefined(easeName)) return EASE_MAP.get(easeName);
            if (PRIVATE_EASE_MAP.has(easeName)) return PRIVATE_EASE_MAP.get(easeName)
        }
        static GetBuiltInTransition(builtInTransitionName) {
            this._CreateEaseMap();
            return BUILT_IN_TRANSITION_MAP.get(builtInTransitionName)
        }
        static GetEditorEase(easeName, project) {
            this._CreateEaseMap();
            const ease = Ease._GetEase(easeName);
            if (ease) return ease;
            if (!project) throw new Error("missing ease function");
            return CUSTOM_EASE_EDITOR_MAP.get(project).get(easeName)
        }
        static HasEditorEase(easeName, project) {
            this._CreateEaseMap();
            const ease =
                Ease._GetEase(easeName);
            if (ease) return true;
            return !!CUSTOM_EASE_EDITOR_MAP.get(project).get(easeName)
        }
        static GetRuntimeEase(easeName) {
            this._CreateEaseMap();
            const ease = Ease._GetEase(easeName);
            if (ease) return ease;
            return CUSTOM_EASE_RUNTIME_MAP.get(easeName)
        }
        static GetEaseFromIndex(index) {
            this._CreateEaseMap();
            const names = this.GetRuntimeEaseNames();
            return names[index]
        }
        static GetIndexForEase(name, project) {
            this._CreateEaseMap();
            const names = this.GetEditorEaseNames(project);
            return names.indexOf(name)
        }
        static GetIndexForEaseAtRuntime(name) {
            return this.GetIndexForEase(name)
        }
        static _CreateEaseMap() {
            if (EASE_MAP.size !==
                0) return;
            this._AddPredifinedEase("default", () => {});
            this._AddPredifinedEase("noease", [{
                "x": 0,
                "y": 0,
                "sax": .336,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.336,
                "eay": 0,
                "se": false,
                "ee": true
            }], true);
            this._AddPredifinedEase("easeinsine", [{
                "x": 0,
                "y": 0,
                "sax": .485,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.038,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeoutsine", [{
                "x": 0,
                "y": 0,
                "sax": .038,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.485,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinoutsine", [{
                "x": 0,
                "y": 0,
                "sax": .336,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.336,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinelastic", [{
                "x": 0,
                "y": 0,
                "sax": .018,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": .116,
                "y": .002,
                "sax": .025,
                "say": 0,
                "eax": -.025,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .266,
                "y": -.005,
                "sax": .024,
                "say": 0,
                "eax": -.021,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .416,
                "y": .016,
                "sax": .024,
                "say": 0,
                "eax": -.026,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .566,
                "y": -.045,
                "sax": .061,
                "say": 0,
                "eax": -.025,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .716,
                "y": .132,
                "sax": .072,
                "say": -.004,
                "eax": -.045,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .866,
                "y": -.373,
                "sax": .06,
                "say": 0,
                "eax": -.049,
                "eay": -.002,
                "se": true,
                "ee": true
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.038,
                "eay": -.263,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeoutelastic", [{
                "x": 0,
                "y": 0,
                "sax": .038,
                "say": .263,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": .136,
                "y": 1.373,
                "sax": .049,
                "say": .002,
                "eax": -.06,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .286,
                "y": .868,
                "sax": .045,
                "say": 0,
                "eax": -.072,
                "eay": .004,
                "se": true,
                "ee": true
            }, {
                "x": .436,
                "y": 1.045,
                "sax": .025,
                "say": 0,
                "eax": -.061,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .586,
                "y": .984,
                "sax": .026,
                "say": 0,
                "eax": -.024,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .736,
                "y": 1.005,
                "sax": .021,
                "say": 0,
                "eax": -.024,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .886,
                "y": .998,
                "sax": .025,
                "say": 0,
                "eax": -.025,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.018,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinoutelastic", [{
                "x": 0,
                "y": 0,
                "sax": .025,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": .067,
                "y": .001,
                "sax": .025,
                "say": 0,
                "eax": -.025,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .18,
                "y": -.005,
                "sax": .025,
                "say": 0,
                "eax": -.025,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .292,
                "y": .025,
                "sax": .053,
                "say": 0,
                "eax": -.025,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .405,
                "y": -.118,
                "sax": .069,
                "say": 0,
                "eax": -.027,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .597,
                "y": 1.118,
                "sax": .027,
                "say": 0,
                "eax": -.069,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .71,
                "y": .975,
                "sax": .025,
                "say": 0,
                "eax": -.053,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .822,
                "y": 1.005,
                "sax": .025,
                "say": 0,
                "eax": -.025,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .935,
                "y": .999,
                "sax": .025,
                "say": 0,
                "eax": -.025,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.025,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinback", [{
                "x": 0,
                "y": 0,
                "sax": .35,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.34,
                "eay": -1.579,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeoutback", [{
                "x": 0,
                "y": 0,
                "sax": .34,
                "say": 1.579,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.35,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinoutback", [{
                "x": 0,
                "y": 0,
                "sax": .035,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": .242,
                "y": -.1,
                "sax": .258,
                "say": 0,
                "eax": -.025,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": .76,
                "y": 1.1,
                "sax": .025,
                "say": 0,
                "eax": -.26,
                "eay": 0,
                "se": true,
                "ee": true
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.035,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinbounce", [{
                "x": 0,
                "y": 0,
                "sax": .033,
                "say": .025,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": .092,
                "y": 0,
                "sax": .026,
                "say": .078,
                "eax": -.033,
                "eay": .025,
                "se": true,
                "ee": true
            }, {
                "x": .274,
                "y": 0,
                "sax": .097,
                "say": .319,
                "eax": -.026,
                "eay": .078,
                "se": true,
                "ee": true
            }, {
                "x": .637,
                "y": 0,
                "sax": .105,
                "say": .625,
                "eax": -.097,
                "eay": .319,
                "se": true,
                "ee": true
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.125,
                "eay": -.004,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeoutbounce", [{
                "x": 0,
                "y": 0,
                "sax": .125,
                "say": .004,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": .365,
                "y": 1,
                "sax": .097,
                "say": -.319,
                "eax": -.105,
                "eay": -.625,
                "se": true,
                "ee": true
            }, {
                "x": .728,
                "y": 1,
                "sax": .026,
                "say": -.078,
                "eax": -.097,
                "eay": -.319,
                "se": true,
                "ee": true
            }, {
                "x": .91,
                "y": 1,
                "sax": .033,
                "say": -.025,
                "eax": -.026,
                "eay": -.078,
                "se": true,
                "ee": true
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.033,
                "eay": -.025,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinoutbounce", [{
                "x": 0,
                "y": 0,
                "sax": .01,
                "say": .006,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": .046,
                "y": 0,
                "sax": .021,
                "say": .038,
                "eax": -.01,
                "eay": .006,
                "se": true,
                "ee": true
            }, {
                "x": .137,
                "y": 0,
                "sax": .059,
                "say": .158,
                "eax": -.021,
                "eay": .038,
                "se": true,
                "ee": true
            }, {
                "x": .319,
                "y": 0,
                "sax": .117,
                "say": .744,
                "eax": -.059,
                "eay": .158,
                "se": true,
                "ee": true
            }, {
                "x": .683,
                "y": 1,
                "sax": .059,
                "say": -.158,
                "eax": -.117,
                "eay": -.744,
                "se": true,
                "ee": true
            }, {
                "x": .865,
                "y": 1,
                "sax": .021,
                "say": -.038,
                "eax": -.059,
                "eay": -.158,
                "se": true,
                "ee": true
            }, {
                "x": .956,
                "y": 1,
                "sax": .01,
                "say": -.006,
                "eax": -.021,
                "eay": -.038,
                "se": true,
                "ee": true
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.01,
                "eay": -.006,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeincubic", [{
                "x": 0,
                "y": 0,
                "sax": .75,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.138,
                "eay": -.321,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeoutcubic", [{
                "x": 0,
                "y": 0,
                "sax": .138,
                "say": .321,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.75,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinoutcubic", [{
                "x": 0,
                "y": 0,
                "sax": .285,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": .5,
                "y": .5,
                "sax": .081,
                "say": .272,
                "eax": -.081,
                "eay": -.272,
                "se": true,
                "ee": true
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.285,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinquad", [{
                "x": 0,
                "y": 0,
                "sax": .4,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.178,
                "eay": -.392,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeoutquad", [{
                "x": 0,
                "y": 0,
                "sax": .178,
                "say": .392,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.4,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinoutquad", [{
                "x": 0,
                "y": 0,
                "sax": .25,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": .5,
                "y": .5,
                "sax": .03,
                "say": .065,
                "eax": -.03,
                "eay": -.065,
                "se": true,
                "ee": true
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.25,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinquart", [{
                    "x": 0,
                    "y": 0,
                    "sax": .264,
                    "say": .079,
                    "eax": 0,
                    "eay": 0,
                    "se": true,
                    "ee": false
                },
                {
                    "x": 1,
                    "y": 1,
                    "sax": 0,
                    "say": 0,
                    "eax": -.329,
                    "eay": -1.287,
                    "se": false,
                    "ee": true
                }
            ]);
            this._AddPredifinedEase("easeoutquart", [{
                "x": 0,
                "y": 0,
                "sax": .329,
                "say": 1.287,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.264,
                "eay": -.079,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinoutquart", [{
                "x": 0,
                "y": 0,
                "sax": .765,
                "say": .03,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.765,
                "eay": -.03,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinquint", [{
                "x": 0,
                "y": 0,
                "sax": .6,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.2,
                "eay": -1,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeoutquint", [{
                "x": 0,
                "y": 0,
                "sax": .2,
                "say": 1,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.6,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinoutquint", [{
                "eax": 0,
                "eay": 0,
                "ee": false,
                "sax": .84,
                "say": 0,
                "se": true,
                "x": 0,
                "y": 0
            }, {
                "eax": -.84,
                "eay": 0,
                "ee": true,
                "sax": 0,
                "say": 0,
                "se": false,
                "x": 1,
                "y": 1
            }]);
            this._AddPredifinedEase("easeincirc", [{
                "x": 0,
                "y": 0,
                "sax": .25,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.024,
                "eay": -.808,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeoutcirc", [{
                "x": 0,
                "y": 0,
                "sax": .024,
                "say": .808,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.25,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinoutcirc", [{
                "x": 0,
                "y": 0,
                "sax": .125,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": .5,
                "y": .5,
                "sax": .02,
                "say": .428,
                "eax": -.02,
                "eay": -.428,
                "se": true,
                "ee": true
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.125,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinexpo", [{
                "x": 0,
                "y": 0,
                "sax": .66,
                "say": 0,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.14,
                "eay": -1,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeoutexpo", [{
                "x": 0,
                "y": 0,
                "sax": .14,
                "say": 1,
                "eax": 0,
                "eay": 0,
                "se": true,
                "ee": false
            }, {
                "x": 1,
                "y": 1,
                "sax": 0,
                "say": 0,
                "eax": -.66,
                "eay": 0,
                "se": false,
                "ee": true
            }]);
            this._AddPredifinedEase("easeinoutexpo", [{
                "eax": 0,
                "eay": 0,
                "ee": false,
                "sax": .345,
                "say": 0,
                "se": true,
                "x": 0,
                "y": 0
            }, {
                "eax": -.06,
                "eay": -.5,
                "ee": true,
                "sax": .06,
                "say": .5,
                "se": true,
                "x": .5,
                "y": .5
            }, {
                "eax": -.335,
                "eay": 0,
                "ee": true,
                "sax": 0,
                "say": 0,
                "se": false,
                "x": 1,
                "y": 1
            }]);
            this._AddPrivateCustomEase("cubicbezier", this.EaseCubicBezier);
            this._AddPrivateCustomEase("spline", this.EaseSpline)
        }
        static _AddPredifinedEase(name, dataArray_or_function, linear = false) {
            if (typeof dataArray_or_function === "function") Ease._AddEase(name, dataArray_or_function, "predefined");
            else if (C3.IsArray(dataArray_or_function))
                if (self.BuiltInTransition) {
                    const builtInTransition =
                        C3.New(self.BuiltInTransition, name, linear);
                    builtInTransition.SetFromJson(dataArray_or_function);
                    Ease._AddEase(name, (t, sv, dv, tt) => builtInTransition.Interpolate(t, sv, dv, tt), "predefined");
                    BUILT_IN_TRANSITION_MAP.set(name, builtInTransition)
                } else {
                    const builtInTransition = C3.New(C3.Transition, [name, dataArray_or_function.map(data => {
                        return [data["x"], data["y"], data["sax"], data["say"], data["eax"], data["eay"], data["se"], data["ee"]]
                    })], false);
                    builtInTransition.MakeLinear(linear);
                    Ease._AddEase(name, (t, sv, dv, tt) =>
                        builtInTransition.Interpolate(t, sv, dv, tt), "predefined")
                }
            else throw new Error("unexpected arguments");
        }
        static _AddPrivateCustomEase(name, func) {
            Ease._AddEase(name, func, "private")
        }
        static AddCustomEase(name, func, project) {
            this._CreateEaseMap();
            Ease._AddEase(name, func, "custom", project)
        }
        static RemoveCustomEase(name, project) {
            if (this.IsNamePredefined(name)) return;
            if ([...PRIVATE_EASE_MAP.keys()].includes(name)) return;
            const customEaseMap = CUSTOM_EASE_EDITOR_MAP.get(project);
            if (customEaseMap) customEaseMap.delete(name)
        }
        static _AddEase(name,
            func, mode, project) {
            switch (mode) {
                case "predefined":
                    {
                        EASE_MAP.set(name, func);PREDEFINED_EASE_MAP.set(name, func);
                        break
                    }
                case "custom":
                    {
                        if (project) {
                            if (!CUSTOM_EASE_EDITOR_MAP.has(project)) CUSTOM_EASE_EDITOR_MAP.set(project, new Map);
                            const customEaseMap = CUSTOM_EASE_EDITOR_MAP.get(project);
                            customEaseMap.set(name, func)
                        } else CUSTOM_EASE_RUNTIME_MAP.set(name, func);
                        break
                    }
                case "private":
                    {
                        EASE_MAP.set(name, func);PRIVATE_EASE_MAP.set(name, func);
                        break
                    }
                default:
                    throw new Error("unexpected ease mode");
            }
        }
        static NoEase(t,
            b, c, d) {
            return c * t / d + b
        }
        static EaseInQuad(t, b, c, d) {
            return c * (t /= d) * t + b
        }
        static EaseOutQuad(t, b, c, d) {
            return -c * (t /= d) * (t - 2) + b
        }
        static EaseInOutQuad(t, b, c, d) {
            if ((t /= d / 2) < 1) return c / 2 * t * t + b;
            return -c / 2 * (--t * (t - 2) - 1) + b
        }
        static EaseInCubic(t, b, c, d) {
            return c * (t /= d) * t * t + b
        }
        static EaseOutCubic(t, b, c, d) {
            return c * ((t = t / d - 1) * t * t + 1) + b
        }
        static EaseInOutCubic(t, b, c, d) {
            if ((t /= d / 2) < 1) return c / 2 * t * t * t + b;
            return c / 2 * ((t -= 2) * t * t + 2) + b
        }
        static EaseInQuart(t, b, c, d) {
            return c * (t /= d) * t * t * t + b
        }
        static EaseOutQuart(t, b, c, d) {
            return -c * ((t =
                t / d - 1) * t * t * t - 1) + b
        }
        static EaseInOutQuart(t, b, c, d) {
            if ((t /= d / 2) < 1) return c / 2 * t * t * t * t + b;
            return -c / 2 * ((t -= 2) * t * t * t - 2) + b
        }
        static EaseInQuint(t, b, c, d) {
            return c * (t /= d) * t * t * t * t + b
        }
        static EaseOutQuint(t, b, c, d) {
            return c * ((t = t / d - 1) * t * t * t * t + 1) + b
        }
        static EaseInOutQuint(t, b, c, d) {
            if ((t /= d / 2) < 1) return c / 2 * t * t * t * t * t + b;
            return c / 2 * ((t -= 2) * t * t * t * t + 2) + b
        }
        static EaseInSine(t, b, c, d) {
            return -c * Math.cos(t / d * (Math.PI / 2)) + c + b
        }
        static EaseOutSine(t, b, c, d) {
            return c * Math.sin(t / d * (Math.PI / 2)) + b
        }
        static EaseInOutSine(t, b, c, d) {
            return -c / 2 *
                (Math.cos(Math.PI * t / d) - 1) + b
        }
        static EaseInExpo(t, b, c, d) {
            return t === 0 ? b : c * Math.pow(2, 10 * (t / d - 1)) + b
        }
        static EaseOutExpo(t, b, c, d) {
            return t === d ? b + c : c * (-Math.pow(2, -10 * t / d) + 1) + b
        }
        static EaseInOutExpo(t, b, c, d) {
            if (t === 0) return b;
            if (t === d) return b + c;
            if ((t /= d / 2) < 1) return c / 2 * Math.pow(2, 10 * (t - 1)) + b;
            return c / 2 * (-Math.pow(2, -10 * --t) + 2) + b
        }
        static EaseInCirc(t, b, c, d) {
            return -c * (Math.sqrt(1 - (t /= d) * t) - 1) + b
        }
        static EaseOutCirc(t, b, c, d) {
            return c * Math.sqrt(1 - (t = t / d - 1) * t) + b
        }
        static EaseInOutCirc(t, b, c, d) {
            if ((t /= d / 2) < 1) return -c /
                2 * (Math.sqrt(1 - t * t) - 1) + b;
            return c / 2 * (Math.sqrt(1 - (t -= 2) * t) + 1) + b
        }
        static EaseInElastic(t, b, c, d) {
            let s = 1.70158;
            let p = 0;
            let a = c;
            if (t === 0) return b;
            if ((t /= d) === 1) return b + c;
            if (!p) p = d * .3;
            if (a < Math.abs(c)) {
                a = c;
                s = p / 4
            } else s = p / (2 * Math.PI) * Math.asin(c / a);
            return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b
        }
        static EaseOutElastic(t, b, c, d) {
            let s = 1.70158;
            let p = 0;
            let a = c;
            if (t === 0) return b;
            if ((t /= d) === 1) return b + c;
            if (!p) p = d * .3;
            if (a < Math.abs(c)) {
                a = c;
                s = p / 4
            } else s = p / (2 * Math.PI) * Math.asin(c / a);
            return a *
                Math.pow(2, -10 * t) * Math.sin((t * d - s) * (2 * Math.PI) / p) + c + b
        }
        static EaseInOutElastic(t, b, c, d) {
            let s = 1.70158;
            let p = 0;
            let a = c;
            if (t === 0) return b;
            if ((t /= d / 2) === 2) return b + c;
            if (!p) p = d * (.3 * 1.5);
            if (a < Math.abs(c)) {
                a = c;
                s = p / 4
            } else s = p / (2 * Math.PI) * Math.asin(c / a);
            if (t < 1) return -.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p)) + b;
            return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t * d - s) * (2 * Math.PI) / p) * .5 + c + b
        }
        static EaseInBack(t, b, c, d, s) {
            if (s === undefined) s = 1.70158;
            return c * (t /= d) * t * ((s + 1) * t - s) + b
        }
        static EaseOutBack(t,
            b, c, d, s) {
            if (s === undefined) s = 1.70158;
            return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b
        }
        static EaseInOutBack(t, b, c, d, s) {
            if (s === undefined) s = 1.70158;
            if ((t /= d / 2) < 1) return c / 2 * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
            return c / 2 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b
        }
        static EaseInBounce(t, b, c, d) {
            return c - Ease.EaseOutBounce(d - t, 0, c, d) + b
        }
        static EaseOutBounce(t, b, c, d) {
            if ((t /= d) < 1 / 2.75) return c * (7.5625 * t * t) + b;
            else if (t < 2 / 2.75) return c * (7.5625 * (t -= 1.5 / 2.75) * t + .75) + b;
            else if (t < 2.5 / 2.75) return c * (7.5625 * (t -= 2.25 / 2.75) * t + .9375) + b;
            else return c *
                (7.5625 * (t -= 2.625 / 2.75) * t + .984375) + b
        }
        static EaseInOutBounce(t, b, c, d) {
            if (t < d / 2) return Ease.EaseInBounce(t * 2, 0, c, d) * .5 + b;
            return Ease.EaseOutBounce(t * 2 - d, 0, c, d) * .5 + c * .5 + b
        }
        static EaseCubicBezier(t, p0, p1, p2, p3) {
            const _0 = p0;
            const _1 = 3 * t * (p1 - p0);
            const _2 = 3 * t ** 2 * (p0 + p2 - 2 * p1);
            const _3 = t ** 3 * (p3 - p0 + 3 * p1 - 3 * p2);
            return _0 + _1 + _2 + _3
        }
        static EaseSpline(t, sx, sy, x1, y1, x2, y2, ex, ey, samples) {
            if (x1 === y1 && x2 === y2) return t;
            const tx = get_t_for_x(t, sx, x1, x2, ex, samples);
            const va = a(sy, y1, y2, ey);
            const vb = b(sy, y1, y2, ey);
            const vc =
                c(sy, y1, y2, ey);
            return calc_bezier(tx, va, vb, vc)
        }
        static GetBezierSamples(startx, a1x, a2x, endx) {
            const ret = [];
            const va = a(startx, a1x, a2x, endx);
            const vb = b(startx, a1x, a2x, endx);
            const vc = c(startx, a1x, a2x, endx);
            for (let i = 0; i < SAMPLE_COUNT; ++i) {
                const sample = calc_bezier(i * SAMPLE_STEP, va, vb, vc);
                ret.push(sample)
            }
            return ret
        }
    };
    const SAMPLE_COUNT = 11;
    const SAMPLE_STEP = 1 / (SAMPLE_COUNT - 1);
    const NEWTON_RAPHSON_ITERATIONS = 4;
    const NEWTON_RAPHSON_MIN_SLOPE = .01;
    const SUBDIVISION_PRECISION = 1E-7;
    const SUBDIVISION_MAX_ITERATIONS = 10;
    const a = (p0, p1, p2, p3) => {
        return p3 - 3 * p2 + 3 * p1 - p0
    };
    const b = (p0, p1, p2, p3) => {
        return 3 * p2 - 6 * p1 + 3 * p0
    };
    const c = (p0, p1, p2, p3) => {
        return 3 * (p1 - p0)
    };
    const calc_bezier = (aT, a, b, c) => {
        return ((a * aT + b) * aT + c) * aT
    };
    const get_slope = (aT, a, b, c) => {
        return 3 * a * aT * aT + 2 * b * aT + c
    };
    const get_t_for_x = (aX, p0, p1, p2, p3, samples) => {
        if (aX == 1) return 1;
        let intervalStart = 0;
        let currentSampleIndex = 1;
        let currentSampleValue = samples[currentSampleIndex];
        let lastSampleIndex = SAMPLE_COUNT - 1;
        let lastSampleValue = samples[SAMPLE_COUNT - 1];
        while (currentSampleIndex != lastSampleIndex && currentSampleValue <= aX) {
            currentSampleIndex++;
            currentSampleValue = samples[currentSampleIndex];
            intervalStart += SAMPLE_STEP
        }
        currentSampleIndex--;
        currentSampleValue = samples[currentSampleIndex];
        const dist = (aX - currentSampleValue) /
            (samples[currentSampleIndex + 1] - currentSampleValue);
        let guess = intervalStart + dist * SAMPLE_STEP;
        const va = a(p0, p1, p2, p3);
        const vb = b(p0, p1, p2, p3);
        const vc = c(p0, p1, p2, p3);
        const initSlope = get_slope(guess, va, vb, vc);
        if (initSlope === 0) return guess;
        else if (initSlope >= NEWTON_RAPHSON_MIN_SLOPE) {
            for (let i = 0; i < NEWTON_RAPHSON_ITERATIONS; ++i) {
                const x = calc_bezier(guess, va, vb, vc) - aX;
                const slope = get_slope(guess, va, vb, vc);
                guess -= x / slope
            }
            return guess
        } else {
            let aA = intervalStart;
            let aB = intervalStart + SAMPLE_STEP;
            let i = 0;
            let precissionLimit;
            let maxIterations;
            do {
                guess = aA + (aB - aA) / 2;
                let x = calc_bezier(guess, va, vb, vc) - aX;
                if (x > 0) aB = guess;
                else aA = guess;
                precissionLimit = Math.abs(x) > SUBDIVISION_PRECISION;
                maxIterations = ++i < SUBDIVISION_MAX_ITERATIONS
            } while (precissionLimit && maxIterations);
            return guess
        }
    };

}

// ../lib/misc/probability.js
{
    'use strict';
    const C3 = self.C3;

    function RequireStringOrNumber(value) {
        if (!C3.IsString(value));
    }
    C3.ProbabilityTable = class ProbabilityTable {
        constructor(name) {
            this._items = [];
            this._name = name || "";
            this._totalWeight = 0
        }
        Release() {
            this.Clear();
            this._items = null
        }
        GetName() {
            return this._name
        }
        Clear() {
            C3.clear2DArray(this._items);
            this._totalWeight = 0
        }
        GetTotalWeight() {
            return this._totalWeight
        }
        Sample(t = Math.random() * this.GetTotalWeight()) {
            let sumWeight = 0;
            for (const [weight, value] of this._items) {
                sumWeight += weight;
                if (t < sumWeight) return value
            }
            return 0
        }
        AddItem(weight, value) {
            RequireStringOrNumber(value);
            this._totalWeight +=
                weight;
            this._items.push([weight, value])
        }
        RemoveItem(weight, value) {
            RequireStringOrNumber(value);
            const ignoreWeight = weight === 0;
            for (let i = 0; i < this._items.length; i++) {
                const item = this._items[i];
                const doesWeightMatch = ignoreWeight || item[0] === weight;
                const doesValueMatch = item[1] === value;
                if (doesWeightMatch && doesValueMatch) {
                    this._items.splice(i, 1);
                    this._totalWeight -= item[0];
                    break
                }
            }
        }
        asJSON() {
            return JSON.stringify(this._items)
        }
        static fromJSON(str) {
            const table = new C3.ProbabilityTable;
            const items = JSON.parse(str);
            for (const item of items) {
                const weight = item[0];
                const value = item[1];
                table.AddItem(weight, value)
            }
            return table
        }
    };

}

// lib/misc/screenReaderText.js
{
    'use strict';
    const C3 = self.C3;
    let nextId = 0;
    C3.ScreenReaderText = class ScreenReaderText {
        constructor(runtime, text) {
            this._runtime = runtime;
            this._text = text;
            this._id = nextId++;
            this._runtime.PostComponentMessageToDOM("runtime", "screen-reader-text", {
                "type": "create",
                "id": this._id,
                "text": this._text
            })
        }
        Release() {
            this._runtime.PostComponentMessageToDOM("runtime", "screen-reader-text", {
                "type": "release",
                "id": this._id
            });
            this._runtime = null;
            this._text = "";
            this._id = -1
        }
        SetText(text) {
            if (this._text === text) return;
            this._text = text;
            this._runtime.PostComponentMessageToDOM("runtime",
                "screen-reader-text", {
                    "type": "update",
                    "id": this._id,
                    "text": this._text
                })
        }
    };

}

// ../lib/events/event.js
{
    'use strict';
    const C3 = self.C3;
    C3.Event = class Event {
        constructor(type, cancelable) {
            this.type = type;
            this.cancelable = !!cancelable;
            this.defaultPrevented = false;
            this.propagationStopped = false;
            this.isAsync = false
        }
        preventDefault() {
            if (!this.cancelable) throw new Error(`event '${this.type}' is not cancelable`);
            this.defaultPrevented = true
        }
        stopPropagation() {
            if (!this.cancelable) throw new Error(`event '${this.type}' cannot be stopped`);
            if (this.isAsync) throw new Error(`cannot stop async event '${this.type}' propagation`);
            this.propagationStopped = true
        }
    };

}

// ../lib/events/handler.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;
    C3.Event.Handler = class EventHandler extends C3.DefendedBase {
        constructor(type) {
            super();
            this._type = type;
            this._captureListeners = [];
            this._captureListenersSet = new Set;
            this._listeners = [];
            this._listenersSet = new Set;
            this._fireDepth = 0;
            this._queueModifyListeners = []
        }
        Release() {
            if (this._fireDepth > 0) return;
            C3.clearArray(this._captureListeners);
            this._captureListenersSet.clear();
            C3.clearArray(this._listeners);
            this._listenersSet.clear();
            C3.clearArray(this._queueModifyListeners);
            C3.Release(this)
        }
        _AddListener(func,
            capture) {
            if (this._IsFiring()) {
                this._queueModifyListeners.push({
                    op: "add",
                    func,
                    capture
                });
                return
            }
            if (capture) {
                if (this._captureListenersSet.has(func)) return;
                this._captureListeners.push(func);
                this._captureListenersSet.add(func)
            } else {
                if (this._listenersSet.has(func)) return;
                this._listeners.push(func);
                this._listenersSet.add(func)
            }
        }
        _RemoveListener(func, capture) {
            if (this._IsFiring()) {
                this._queueModifyListeners.push({
                    op: "remove",
                    func,
                    capture
                });
                return
            }
            if (capture) {
                if (this._captureListenersSet.has(func)) {
                    this._captureListenersSet.delete(func);
                    C3.arrayFindRemove(this._captureListeners, func)
                }
            } else if (this._listenersSet.has(func)) {
                this._listenersSet.delete(func);
                C3.arrayFindRemove(this._listeners, func)
            }
        }
        _IsEmpty() {
            return !this._captureListeners.length && !this._listeners.length
        }
        _IsFiring() {
            return this._fireDepth > 0
        }
        _ProcessQueuedListeners() {
            const removeListenersSet = new Set;
            const removeCaptureListenersSet = new Set;
            for (const q of this._queueModifyListeners)
                if (q.op === "add") {
                    this._AddListener(q.func, q.capture);
                    if (q.capture) removeCaptureListenersSet.delete(q.func);
                    else removeListenersSet.delete(q.func)
                } else if (q.op === "remove")
                if (q.capture) {
                    this._captureListenersSet.delete(q.func);
                    removeCaptureListenersSet.add(q.func)
                } else {
                    this._listenersSet.delete(q.func);
                    removeListenersSet.add(q.func)
                }
            else throw new Error("invalid op");
            C3.arrayRemoveAllInSet(this._listeners, removeListenersSet);
            C3.arrayRemoveAllInSet(this._captureListeners, removeCaptureListenersSet);
            C3.clearArray(this._queueModifyListeners)
        }
        _FireCancellable(event) {
            this._IncreaseFireDepth();
            let isStopped = false;
            for (let i = 0, len = this._captureListeners.length; i < len; ++i) {
                this._captureListeners[i](event);
                if (event.propagationStopped) {
                    isStopped = true;
                    break
                }
            }
            if (!isStopped)
                for (let i = 0, len = this._listeners.length; i < len; ++i) {
                    this._listeners[i](event);
                    if (event.propagationStopped) break
                }
            this._DecreaseFireDepth();
            return !event.defaultPrevented
        }
        _FireNonCancellable(event) {
            this._IncreaseFireDepth();
            for (let i = 0, len = this._captureListeners.length; i < len; ++i) this._captureListeners[i](event);
            for (let i = 0, len = this._listeners.length; i <
                len; ++i) this._listeners[i](event);
            this._DecreaseFireDepth();
            return true
        }
        _IncreaseFireDepth() {
            this._fireDepth++
        }
        _DecreaseFireDepth() {
            this._fireDepth--;
            if (this._fireDepth === 0 && this._queueModifyListeners.length > 0) this._ProcessQueuedListeners()
        }
        SetDelayRemoveEventsEnabled(e) {
            if (e) this._IncreaseFireDepth();
            else this._DecreaseFireDepth()
        }
        _FireAsync(event) {
            let callbackPromises = [];
            for (let i = 0, len = this._captureListeners.length; i < len; ++i) {
                let func = this._captureListeners[i];
                callbackPromises.push(C3.Asyncify(() =>
                    func(event)))
            }
            for (let i = 0, len = this._listeners.length; i < len; ++i) {
                let func = this._listeners[i];
                callbackPromises.push(C3.Asyncify(() => func(event)))
            }
            return Promise.all(callbackPromises).then(() => !event.defaultPrevented)
        }
        _FireAndWait_AsyncOptional(event) {
            const results = [];
            this._IncreaseFireDepth();
            for (let i = 0, len = this._captureListeners.length; i < len; ++i) {
                const ret = this._captureListeners[i](event);
                if (ret instanceof Promise) results.push(ret)
            }
            for (let i = 0, len = this._listeners.length; i < len; ++i) {
                const ret = this._listeners[i](event);
                if (ret instanceof Promise) results.push(ret)
            }
            this._DecreaseFireDepth();
            if (results.length) return Promise.all(results).then(() => !event.defaultPrevented);
            else return !event.defaultPrevented
        }
        async _FireAndWaitAsync(event) {
            return await this._FireAndWait_AsyncOptional(event)
        }
        async _FireAndWaitAsyncSequential(event) {
            this._IncreaseFireDepth();
            for (let i = 0, len = this._captureListeners.length; i < len; ++i) {
                const ret = this._captureListeners[i](event);
                if (ret instanceof Promise) await ret
            }
            for (let i = 0, len = this._listeners.length; i <
                len; ++i) {
                const ret = this._listeners[i](event);
                if (ret instanceof Promise) await ret
            }
            this._DecreaseFireDepth();
            return !event.defaultPrevented
        }* _FireAsGenerator(event) {
            this._IncreaseFireDepth();
            for (let i = 0, len = this._captureListeners.length; i < len; ++i) {
                const ret = this._captureListeners[i](event);
                if (C3.IsIterator(ret)) yield* ret
            }
            for (let i = 0, len = this._listeners.length; i < len; ++i) {
                const ret = this._listeners[i](event);
                if (C3.IsIterator(ret)) yield* ret
            }
            this._DecreaseFireDepth()
        }
    };

}

// ../lib/events/dispatcher.js
{
    'use strict';
    const C3 = self.C3;
    C3.Event.Dispatcher = class EventDispatcher extends C3.DefendedBase {
        constructor() {
            super();
            this._eventHandlers = new Map;
            this._dispatcherWasReleased = false
        }
        Release() {
            if (this._dispatcherWasReleased) throw new Error("already released");
            this.ClearEvents();
            this._dispatcherWasReleased = true;
            C3.Release(this)
        }
        WasReleased() {
            return this._dispatcherWasReleased
        }
        ClearEvents() {
            for (let handler of this._eventHandlers.values()) handler.Release();
            this._eventHandlers.clear()
        }
        _GetHandlerByType(type, create_if_missing) {
            let handler =
                this._eventHandlers.get(type);
            if (handler) return handler;
            if (create_if_missing) {
                handler = C3.New(C3.Event.Handler, type);
                this._eventHandlers.set(type, handler);
                return handler
            }
            return null
        }
        HasAnyHandlerFor(type) {
            return this._eventHandlers.has(type)
        }
        addEventListener(type, func, capture) {
            let handler = this._GetHandlerByType(type, true);
            handler._AddListener(func, !!capture)
        }
        removeEventListener(type, func, capture) {
            let handler = this._GetHandlerByType(type, false);
            if (!handler) return;
            handler._RemoveListener(func, !!capture);
            if (handler._IsEmpty()) this._eventHandlers.delete(type)
        }
        dispatchEvent(event) {
            const handler = this._GetHandlerByType(event.type, false);
            if (!handler) return true;
            if (event.cancelable) return handler._FireCancellable(event);
            else return handler._FireNonCancellable(event)
        }
        dispatchEventAsync(event) {
            const handler = this._GetHandlerByType(event.type, false);
            if (!handler) return Promise.resolve(true);
            event.isAsync = true;
            return handler._FireAsync(event)
        }
        async dispatchEventAndClearAsync(event) {
            const handler = this._GetHandlerByType(event.type,
                false);
            if (!handler) return true;
            this._eventHandlers.delete(event.type);
            event.isAsync = true;
            const ret = await handler._FireAsync(event);
            handler.Release();
            return ret
        }
        async dispatchEventAndWaitAsync(event) {
            const handler = this._GetHandlerByType(event.type, false);
            if (!handler) return true;
            return await handler._FireAndWaitAsync(event)
        }
        dispatchEventAndWait_AsyncOptional(event) {
            const handler = this._GetHandlerByType(event.type, false);
            if (!handler) return true;
            return handler._FireAndWait_AsyncOptional(event)
        }
        async dispatchEventAndWaitAsyncSequential(event) {
            const handler =
                this._GetHandlerByType(event.type, false);
            if (!handler) return true;
            return await handler._FireAndWaitAsyncSequential(event)
        }
        dispatchGeneratorEvent(event) {
            const handler = this._GetHandlerByType(event.type, false);
            if (!handler) return null;
            if (event.cancelable) throw new Error("not supported");
            else return handler._FireAsGenerator(event)
        }
        SetDelayRemoveEventsEnabled(e) {
            for (const handler of this._eventHandlers.values()) handler.SetDelayRemoveEventsEnabled(e)
        }
    };

}

// ../lib/util/asyncify.js
{
    'use strict';
    const C3 = self.C3;
    const SETTIMEOUT_WORK_DURATION = 12;
    const SETTIMEOUT_INTERVAL = 16;
    const IDLECALLBACK_TIMEOUT = 35;
    const SUPPORTS_RIC = typeof requestIdleCallback !== "undefined";
    let workQueue = [];
    let callbackId = -1;
    let highThroughputMode = 0;

    function SetNewCallback(timerTimeout) {
        if (SUPPORTS_RIC && highThroughputMode === 0) callbackId = requestIdleCallback(DoAsyncifiedWork, {
            timeout: IDLECALLBACK_TIMEOUT
        });
        else callbackId = setTimeout(DoAsyncifiedWork, highThroughputMode > 0 ? 1 : timerTimeout)
    }

    function DoAsyncifiedWork(deadline) {
        callbackId = -1;
        if (!workQueue.length) return;
        let startTime = performance.now();
        let curTime = startTime;
        let jobCount = 0;
        let estimatedNextJobDuration = 0;
        do {
            DoNextAsyncifiedJob(workQueue.shift());
            curTime = performance.now();
            ++jobCount;
            estimatedNextJobDuration = (curTime - startTime) / jobCount * 1.1
        } while (workQueue.length && (SUPPORTS_RIC && highThroughputMode === 0 && typeof deadline !== "undefined" ? estimatedNextJobDuration < deadline["timeRemaining"]() : curTime - startTime + estimatedNextJobDuration <
                SETTIMEOUT_WORK_DURATION));
        if (callbackId === -1 && workQueue.length) {
            let workDuration = curTime - startTime;
            let timeout = Math.max(SETTIMEOUT_INTERVAL - workDuration, 4);
            SetNewCallback(timeout)
        }
    }

    function DoNextAsyncifiedJob(w) {
        let ret;
        try {
            ret = w.func()
        } catch (e) {
            w.reject(e);
            return
        }
        w.resolve(ret)
    }
    let asyncifyDisabled = C3.QueryString.Has("disable-asyncify");
    if (asyncifyDisabled) console.warn("[Asyncify] Asyncify has been disabled due to disable-asyncify in the query string. Some work will now be done synchronously.");
    C3.Asyncify = function Asyncify(func) {
        let stack = null;
        if (C3.isDebug) stack = C3.GetCallStack();
        return new Promise((resolve, reject) => {
            workQueue.push({
                func: func,
                resolve: resolve,
                reject: reject,
                stack: stack
            });
            if (asyncifyDisabled) {
                DoNextAsyncifiedJob(workQueue.pop());
                return
            }
            if (callbackId === -1) SetNewCallback(SETTIMEOUT_INTERVAL)
        })
    };
    C3.Asyncify.SetHighThroughputMode = function SetHighThroughputMode(m) {
        if (m) ++highThroughputMode;
        else {
            --highThroughputMode;
            if (highThroughputMode < 0) throw new Error("already turned off high throughput mode");
        }
    };

}

// ../lib/util/idleTimeout.js
{
    'use strict';
    const C3 = self.C3;
    const IDLE_CHECK_MIN_INTERVAL = 1E3;
    const IDLE_CHECK_TIMER_OVERSHOOT = 100;
    let cachedNowTime = -1;

    function ClearTimeCache() {
        cachedNowTime = -1
    }
    C3.FastGetDateNow = function FastGetDateNow() {
        if (cachedNowTime === -1) {
            cachedNowTime = Date.now();
            self.setTimeout(ClearTimeCache, 16)
        }
        return cachedNowTime
    };
    let timerId = -1;
    let nextDeadline = -1;
    let activeIdleTimeouts = new Set;

    function CheckActiveIdleTimeouts() {
        timerId = -1;
        nextDeadline = -1;
        let nowTime = Date.now();
        for (let i of activeIdleTimeouts)
            if (i._CheckTimeout(nowTime)) {
                let deadline = i._GetDeadline();
                if (nextDeadline === -1 || deadline < nextDeadline) nextDeadline = deadline
            } else activeIdleTimeouts.delete(i);
        if (nextDeadline !== -1) {
            let duration = Math.max(nextDeadline - nowTime + IDLE_CHECK_TIMER_OVERSHOOT, IDLE_CHECK_MIN_INTERVAL);
            timerId = self.setTimeout(CheckActiveIdleTimeouts, duration)
        }
    }
    C3.IdleTimeout = class IdleTimeout {
        constructor(callback, timeoutInSeconds) {
            this._callback = callback;
            this._timeout = timeoutInSeconds * 1E3;
            this._deadline = 0;
            this._isActive = false
        }
        Reset() {
            let nowTime = C3.FastGetDateNow();
            this._deadline = nowTime + this._timeout;
            if (!this._isActive) {
                activeIdleTimeouts.add(this);
                this._isActive = true
            }
            if (timerId === -1) {
                nextDeadline = this._deadline;
                timerId = self.setTimeout(CheckActiveIdleTimeouts, this._timeout + IDLE_CHECK_TIMER_OVERSHOOT)
            } else if (this._deadline < nextDeadline && nextDeadline > nowTime +
                IDLE_CHECK_MIN_INTERVAL) {
                self.clearTimeout(timerId);
                nextDeadline = this._deadline;
                timerId = self.setTimeout(CheckActiveIdleTimeouts, this._timeout + IDLE_CHECK_TIMER_OVERSHOOT)
            }
        }
        _CheckTimeout(nowTime) {
            if (nowTime >= this._deadline) {
                if (this._callback()) {
                    this._deadline = nowTime + this._timeout;
                    return true
                }
                this._isActive = false;
                return false
            }
            return true
        }
        _GetDeadline() {
            return this._deadline
        }
        Cancel() {
            if (this._isActive) {
                activeIdleTimeouts.delete(this);
                this._isActive = false;
                if (activeIdleTimeouts.size === 0 && timerId !== -1) {
                    self.clearTimeout(timerId);
                    timerId = -1;
                    nextDeadline = -1
                }
            }
        }
        Release() {
            this.Cancel();
            this._callback = null
        }
    };

}

// ../lib/util/disposable.js
{
    'use strict';
    const C3 = self.C3;
    C3.Disposable = class Disposable {
        constructor(disposeAction) {
            this._disposed = false;
            this._disposeAction = disposeAction
        }
        Dispose() {
            if (this._disposed) return;
            this._disposed = true;
            if (this._disposeAction) {
                this._disposeAction();
                this._disposeAction = null
            }
        }
        IsDisposed() {
            return this._disposed
        }
        Release() {
            this.Dispose()
        }
        static Release(instance) {
            return new Disposable(() => instance.Release())
        }
        static From(eventDispatcher, eventNames, eventHandler, opts, scope) {
            if (typeof opts === "undefined" || opts === null) opts = false;
            else if (typeof opts !==
                "boolean" && typeof opts !== "object") throw new TypeError("invalid event listener options");
            if (scope) eventHandler = eventHandler.bind(scope);
            if (eventNames.includes(" ")) {
                eventNames = eventNames.split(" ");
                const disposable = new C3.CompositeDisposable;
                for (let eventName of eventNames) {
                    eventDispatcher.addEventListener(eventName, eventHandler, opts);
                    disposable.Add(C3.New(C3.Disposable, () => eventDispatcher.removeEventListener(eventName, eventHandler, opts)))
                }
                return disposable
            } else {
                eventDispatcher.addEventListener(eventNames,
                    eventHandler, opts);
                return C3.New(C3.Disposable, () => eventDispatcher.removeEventListener(eventNames, eventHandler, opts))
            }
        }
    };
    C3.StubDisposable = class StubDisposable extends C3.Disposable {
        SetAction(disposeAction) {
            this._disposeAction = disposeAction
        }
    };
    C3.CompositeDisposable = class CompositeDisposable extends C3.Disposable {
        constructor(...disposables) {
            super();
            this._disposables = new Set;
            for (let disposable of disposables) this.Add(disposable)
        }
        Add(...disposables) {
            if (this._disposed) throw new Error("already disposed");
            for (let disposable of disposables) this._disposables.add(disposable)
        }
        Remove(disposable) {
            if (this._disposed) throw new Error("already disposed");
            this._disposables.delete(disposable)
        }
        RemoveAll() {
            if (this._disposed) throw new Error("already disposed");
            if (!this._disposables) return;
            for (let disposable of this._disposables) disposable.Dispose();
            this._disposables.clear()
        }
        IsDisposed() {
            return this._disposed
        }
        Dispose() {
            if (this._disposed) throw new Error("already disposed");
            this._disposed = true;
            for (let disposable of this._disposables) disposable.Dispose();
            this._disposables.clear();
            this._disposables = null
        }
        Release() {
            this.Dispose()
        }
    };

}

// lib/util/kahanSum.js
{
    'use strict';
    const C3 = self.C3;
    C3.KahanSum = class KahanSum extends C3.DefendedBase {
        constructor() {
            super();
            this._c = 0;
            this._y = 0;
            this._t = 0;
            this._sum = 0
        }
        Add(v) {
            v = +v;
            this._y = v - this._c;
            this._t = this._sum + this._y;
            this._c = this._t - this._sum - this._y;
            this._sum = this._t
        }
        Subtract(v) {
            this._sum -= +v
        }
        Get() {
            return this._sum
        }
        Reset() {
            this._c = 0;
            this._y = 0;
            this._t = 0;
            this._sum = 0
        }
        Set(s) {
            this._c = 0;
            this._y = 0;
            this._t = 0;
            this._sum = +s
        }
        Copy(ks) {
            this._c = ks._c;
            this._y = ks._y;
            this._t = ks._t;
            this._sum = ks._sum
        }
        Release() {}
    };

}

// lib/util/redblackset.js
{
    'use strict';
    const C3 = self.C3;
    const js_cols = {};
    const RED = true;
    const BLACK = false;
    js_cols.RBnode = function(tree) {
        this.tree = tree;
        this.right = this.tree.sentinel;
        this.left = this.tree.sentinel;
        this.parent = null;
        this.color = false;
        this.key = null
    };
    js_cols.RedBlackSet = function(compare_func) {
        this.size = 0;
        this.sentinel = new js_cols.RBnode(this);
        this.sentinel.color = BLACK;
        this.root = this.sentinel;
        this.root.parent = this.sentinel;
        this.compare = compare_func || this.default_compare
    };
    js_cols.RedBlackSet.prototype.default_compare = function(a, b) {
        if (a < b) return -1;
        else if (b < a) return 1;
        else return 0
    };
    js_cols.RedBlackSet.prototype.clone = function() {
        var rv = new js_cols.RedBlackSet(this.compare);
        rv.insertAll(this);
        return rv
    };
    js_cols.RedBlackSet.prototype.clear = function() {
        this.size = 0;
        this.sentinel = new js_cols.RBnode(this);
        this.sentinel.color = BLACK;
        this.root = this.sentinel;
        this.root.parent = this.sentinel
    };
    js_cols.RedBlackSet.prototype.leftRotate = function(x) {
        var y = x.right;
        x.right = y.left;
        if (y.left != this.sentinel) y.left.parent = x;
        y.parent = x.parent;
        if (x.parent == this.sentinel) this.root = y;
        else if (x == x.parent.left) x.parent.left = y;
        else x.parent.right = y;
        y.left = x;
        x.parent = y
    };
    js_cols.RedBlackSet.prototype.rightRotate = function(x) {
        var y = x.left;
        x.left = y.right;
        if (y.right != this.sentinel) y.right.parent = x;
        y.parent = x.parent;
        if (x.parent == this.sentinel) this.root = y;
        else if (x == x.parent.right) x.parent.right = y;
        else x.parent.left = y;
        y.right = x;
        x.parent = y
    };
    js_cols.RedBlackSet.prototype.insert = function(key) {
        if (!this.contains(key)) {
            var z = new js_cols.RBnode(this);
            z.key = key;
            var y = this.sentinel;
            var x = this.root;
            while (x != this.sentinel) {
                y = x;
                if (this.compare(z.key, x.key) < 0) x = x.left;
                else x = x.right
            }
            z.parent = y;
            if (y == this.sentinel) this.root = z;
            else if (this.compare(z.key, y.key) < 0) y.left = z;
            else y.right = z;
            z.left = this.sentinel;
            z.right = this.sentinel;
            z.color = RED;
            this.insertFixup(z);
            this.size++
        } else {
            var node = this.get_(key);
            node.key = key
        }
    };
    js_cols.RedBlackSet.prototype.insertFixup = function(z) {
        while (z != this.sentinel && z != this.root && z.parent.color == RED)
            if (z.parent == z.parent.parent.left) {
                var y = z.parent.parent.right;
                if (y.color == RED) {
                    z.parent.color = BLACK;
                    y.color = BLACK;
                    z.parent.parent.color = RED;
                    z = z.parent.parent
                } else {
                    if (z == z.parent.right) {
                        z = z.parent;
                        this.leftRotate(z)
                    }
                    z.parent.color = BLACK;
                    z.parent.parent.color = RED;
                    if (z.parent.parent != this.sentinel) this.rightRotate(z.parent.parent)
                }
            } else {
                var y = z.parent.parent.left;
                if (y.color == RED) {
                    z.parent.color =
                        BLACK;
                    y.color = BLACK;
                    z.parent.parent.color = RED;
                    z = z.parent.parent
                } else {
                    if (z == z.parent.left) {
                        z = z.parent;
                        this.rightRotate(z)
                    }
                    z.parent.color = BLACK;
                    z.parent.parent.color = RED;
                    if (z.parent.parent != this.sentinel) this.leftRotate(z.parent.parent)
                }
            }
        this.root.color = BLACK
    };
    js_cols.RedBlackSet.prototype.delete_ = function(z) {
        var y;
        var x;
        if (z.left == this.sentinel || z.right == this.sentinel) y = z;
        else y = this.successor_(z);
        if (y.left != this.sentinel) x = y.left;
        else x = y.right;
        x.parent = y.parent;
        if (y.parent == this.sentinel) this.root = x;
        else if (y == y.parent.left) y.parent.left = x;
        else y.parent.right = x;
        if (y != z) z.key = y.key;
        if (y.color == BLACK) this.deleteFixup(x);
        this.size--
    };
    js_cols.RedBlackSet.prototype.deleteFixup = function(x) {
        while (x != this.root && x.color == BLACK)
            if (x == x.parent.left) {
                var w = x.parent.right;
                if (w.color == RED) {
                    w.color = BLACK;
                    x.parent.color = RED;
                    this.leftRotate(x.parent);
                    w = x.parent.right
                }
                if (w.left.color == BLACK && w.right.color == BLACK) {
                    w.color = RED;
                    x = x.parent
                } else {
                    if (w.right.color == BLACK) {
                        w.left.color = BLACK;
                        w.color = RED;
                        this.rightRotate(w);
                        w = x.parent.right
                    }
                    w.color = x.parent.color;
                    x.parent.color = BLACK;
                    w.right.color = BLACK;
                    this.leftRotate(x.parent);
                    x = this.root
                }
            } else {
                var w =
                    x.parent.left;
                if (w.color == RED) {
                    w.color = BLACK;
                    x.parent.color = RED;
                    this.rightRotate(x.parent);
                    w = x.parent.left
                }
                if (w.right.color == BLACK && w.left.color == BLACK) {
                    w.color = RED;
                    x = x.parent
                } else {
                    if (w.left.color == BLACK) {
                        w.right.color = BLACK;
                        w.color = RED;
                        this.leftRotate(w);
                        w = x.parent.left
                    }
                    w.color = x.parent.color;
                    x.parent.color = BLACK;
                    w.left.color = BLACK;
                    this.rightRotate(x.parent);
                    x = this.root
                }
            }
        x.color = BLACK
    };
    js_cols.RedBlackSet.prototype.remove = function(key) {
        var x = this.get_(key);
        if (x != this.sentinel) {
            var retval = x.key;
            this.delete_(x);
            return retval
        } else return null
    };
    js_cols.RedBlackSet.prototype.removeSwapped = function(value, key) {
        this.remove(key)
    };
    js_cols.RedBlackSet.prototype.min = function(x) {
        while (x.left != this.sentinel) x = x.left;
        return x
    };
    js_cols.RedBlackSet.prototype.max = function(x) {
        while (x.right != this.sentinel) x = x.right;
        return x
    };
    js_cols.RedBlackSet.prototype.successor_ = function(x) {
        if (x.right != this.sentinel) return this.min(x.right);
        var y = x.parent;
        while (y != this.sentinel && x == y.right) {
            x = y;
            y = y.parent
        }
        return y
    };
    js_cols.RedBlackSet.prototype.predeccessor_ = function(x) {
        if (x.left != this.sentinel) return this.max(x.left);
        var y = x.parent;
        while (y != this.sentinel && x == y.left) {
            x = y;
            y = y.parent
        }
        return y
    };
    js_cols.RedBlackSet.prototype.successor = function(key) {
        if (this.size > 0) {
            var x = this.get_(key);
            if (x == this.sentinel) return null;
            if (x.right != this.sentinel) return this.min(x.right).key;
            var y = x.parent;
            while (y != this.sentinel && x == y.right) {
                x = y;
                y = y.parent
            }
            if (y != this.sentinel) return y.key;
            else return null
        } else return null
    };
    js_cols.RedBlackSet.prototype.predecessor = function(key) {
        if (this.size > 0) {
            var x = this.get_(key);
            if (x == this.sentinel) return null;
            if (x.left != this.sentinel) return this.max(x.left).key;
            var y = x.parent;
            while (y != this.sentinel && x == y.left) {
                x = y;
                y = y.parent
            }
            if (y != this.sentinel) return y.key;
            else return null
        } else return null
    };
    js_cols.RedBlackSet.prototype.getMin = function() {
        return this.min(this.root).key
    };
    js_cols.RedBlackSet.prototype.getMax = function() {
        return this.max(this.root).key
    };
    js_cols.RedBlackSet.prototype.get_ = function(key) {
        var x = this.root;
        while (x != this.sentinel && this.compare(x.key, key) != 0)
            if (this.compare(key, x.key) < 0) x = x.left;
            else x = x.right;
        return x
    };
    js_cols.RedBlackSet.prototype.contains = function(key) {
        return this.get_(key).key != null
    };
    js_cols.RedBlackSet.prototype.getValues = function() {
        var ret = [];
        this.forEach(function(x) {
            ret.push(x)
        });
        return ret
    };
    js_cols.RedBlackSet.prototype.insertAll = function(col) {
        if (js_cols.typeOf(col) == "array")
            for (var i = 0; i < col.length; i++) this.insert(col[i]);
        else if (js_cols.typeOf(col.forEach) == "function") col.forEach(this.insert, this);
        else if (js_cols.typeOf(col.getValues) == "function") {
            var arr = col.getValues();
            for (var i = 0; i < arr.length; i++) this.insert(arr[i])
        } else if (js_cols.typeOf(col) == "object")
            for (var key in col) this.insert(col[key])
    };
    js_cols.RedBlackSet.prototype.removeAll = function(col) {
        if (js_cols.typeOf(col) == "array")
            for (var i = 0; i < col.length; i++) this.remove(col[i]);
        else if (js_cols.typeOf(col.forEach) == "function") col.forEach(this.removeSwapped, this);
        else if (js_cols.typeOf(col.getValues) == "function") {
            var arr = col.getValues();
            for (var i = 0; i < arr.length; i++) this.remove(arr[i])
        } else if (js_cols.typeOf(col) == "object")
            for (var key in col) this.remove(col[key])
    };
    js_cols.RedBlackSet.prototype.containsAll = function(col) {
        if (js_cols.typeOf(col) == "array") {
            for (var i = 0; i < col.length; i++)
                if (!this.contains(col[i])) return false;
            return true
        } else if (js_cols.typeOf(col.forEach) == "function") return col.every(this.contains, this);
        else if (js_cols.typeOf(col.getValues) == "function") {
            var arr = col.getValues();
            for (var i = 0; i < arr.length; i++)
                if (!this.contains(arr[i])) return false;
            return true
        } else if (js_cols.typeOf(col) == "object") {
            for (var key in col)
                if (!this.contains(col[key])) return false;
            return true
        }
    };
    js_cols.RedBlackSet.prototype.range = function(from, to) {
        var retArray = [];
        this.traverseFromTo(function(x) {
            retArray.push(x)
        }, from, to);
        return retArray
    };
    js_cols.RedBlackSet.prototype.traverse = function(f, opt_obj) {
        if (this.isEmpty()) return;
        var node = this.min(this.root);
        while (node != this.sentinel) {
            if (f.call(opt_obj, node.key, this)) return;
            node = this.successor_(node)
        }
    };
    js_cols.RedBlackSet.prototype.traverseFrom = function(f, fromKey, opt_obj) {
        if (this.isEmpty()) return;
        var node = this.get_(fromKey);
        while (node != this.sentinel) {
            if (f.call(opt_obj, node.key, this)) return;
            node = this.successor_(node)
        }
    };
    js_cols.RedBlackSet.prototype.traverseTo = function(f, toKey, opt_obj) {
        if (this.isEmpty()) return;
        var node = this.min(this.root);
        var toNode = this.get_(toKey);
        while (node != toNode) {
            if (f.call(opt_obj, node.key, this)) return;
            node = this.successor_(node)
        }
    };
    js_cols.RedBlackSet.prototype.traverseFromTo = function(f, fromKey, toKey, opt_obj) {
        if (this.isEmpty()) return;
        var node = this.get_(fromKey);
        var toNode = this.get_(toKey);
        while (node != toNode) {
            if (f.call(opt_obj, node.key, this)) return;
            node = this.successor_(node)
        }
    };
    js_cols.RedBlackSet.prototype.traverseBackwards = function(f, opt_obj) {
        if (this.isEmpty()) return;
        var node = this.max(this.root);
        while (node != this.sentinel) {
            if (f.call(opt_obj, node.key, this)) return;
            node = this.predeccessor_(node)
        }
    };
    js_cols.RedBlackSet.prototype.forEach = function(f, opt_obj) {
        if (this.isEmpty()) return;
        for (var n = this.min(this.root); n != this.sentinel; n = this.successor_(n)) f.call(opt_obj, n.key, n.key, this)
    };
    js_cols.RedBlackSet.prototype.some = function(f, opt_obj) {
        if (this.isEmpty()) return false;
        for (var n = this.min(this.root); n != this.sentinel; n = this.successor_(n))
            if (f.call(opt_obj, n.key, n.key, this)) return true;
        return false
    };
    js_cols.RedBlackSet.prototype.every = function(f, opt_obj) {
        if (this.isEmpty()) return false;
        for (var n = this.min(this.root); n != this.sentinel; n = this.successor_(n))
            if (!f.call(opt_obj, n.key, n.key, this)) return false;
        return true
    };
    js_cols.RedBlackSet.prototype.map = function(f, opt_obj) {
        var rv = [];
        if (this.isEmpty()) return rv;
        for (var n = this.min(this.root); n != this.sentinel; n = this.successor_(n)) rv.push(f.call(opt_obj, n.key, n.key, this));
        return rv
    };
    js_cols.RedBlackSet.prototype.filter = function(f, opt_obj) {
        var rv = [];
        if (this.isEmpty()) return rv;
        for (var n = this.min(this.root); n != this.sentinel; n = this.successor_(n))
            if (f.call(opt_obj, n.key, n.key, this)) rv.push(n.key);
        return rv
    };
    js_cols.RedBlackSet.prototype.getCount = function() {
        return this.size
    };
    js_cols.RedBlackSet.prototype.isEmpty = function() {
        return this.size == 0
    };
    js_cols.RedBlackSet.prototype.isSubsetOf = function(col) {
        var colCount = js_cols.getCount(col);
        if (this.getCount() > colCount) return false;
        var i = 0;
        if (this.isEmpty()) return true;
        for (var n = this.min(this.root); n != this.sentinel; n = this.successor_(n))
            if (js_cols.contains.call(col, col, n.key)) i++;
        return i == this.getCount()
    };
    js_cols.RedBlackSet.prototype.intersection = function(col) {
        var result = new js_cols.RedBlackSet(this.compare);
        if (this.isEmpty()) return result;
        for (var n = this.min(this.root); n != this.sentinel; n = this.successor_(n))
            if (col.contains.call(col, n.key, n.key, this)) result.insert(n.key);
        return result
    };
    C3.RedBlackSet = class RedBlackSet extends C3.DefendedBase {
        constructor(sortFunc) {
            super();
            this._rbSet = new js_cols.RedBlackSet(sortFunc);
            this._enableQueue = false;
            this._queueInsert = new Set;
            this._queueRemove = new Set
        }
        Add(item) {
            if (this._enableQueue)
                if (this._rbSet.contains(item)) this._queueRemove.delete(item);
                else this._queueInsert.add(item);
            else this._rbSet.insert(item)
        }
        Remove(item) {
            if (this._enableQueue)
                if (this._rbSet.contains(item)) this._queueRemove.add(item);
                else this._queueInsert.delete(item);
            else this._rbSet.remove(item)
        }
        Has(item) {
            if (this._enableQueue) {
                if (this._queueInsert.has(item)) return true;
                return !this._queueRemove.has(item) && this._rbSet.contains(item)
            } else return this._rbSet.contains(item)
        }
        Clear() {
            this._rbSet.clear();
            this._queueInsert.clear();
            this._queueRemove.clear()
        }
        toArray() {
            if (this._enableQueue) throw new Error("cannot be used in queueing mode");
            return this._rbSet.getValues()
        }
        GetSize() {
            return this._rbSet.getCount() + this._queueInsert.size - this._queueRemove.size
        }
        IsEmpty() {
            return this.GetSize() === 0
        }
        Front() {
            if (this.IsEmpty()) throw new Error("empty set");
            if (this._enableQueue) throw new Error("cannot be used in queueing mode");
            const rbSet = this._rbSet;
            const n = rbSet.min(rbSet.root);
            return n.key
        }
        Shift() {
            if (this.IsEmpty()) throw new Error("empty set");
            if (this._enableQueue) throw new Error("cannot be used in queueing mode");
            const item = this.Front();
            this.Remove(item);
            return item
        }
        SetQueueingEnabled(q) {
            q = !!q;
            if (this._enableQueue === q) return;
            this._enableQueue = q;
            if (!q) {
                for (const item of this._queueRemove) this._rbSet.remove(item);
                this._queueRemove.clear();
                for (const item of this._queueInsert) this._rbSet.insert(item);
                this._queueInsert.clear()
            }
        }
        ForEach(func) {
            this._rbSet.forEach(func)
        }* values() {
            if (this.IsEmpty()) return;
            const rbSet = this._rbSet;
            for (let n = rbSet.min(rbSet.root); n != rbSet.sentinel; n = rbSet.successor_(n)) yield n.key
        }[Symbol.iterator]() {
            return this.values()
        }
    };

}

// ../lib/util/promiseThrottle.js
{
    'use strict';
    const C3 = self.C3;
    C3.PromiseThrottle = class PromiseThrottle {
        constructor(maxParallel = C3.hardwareConcurrency) {
            this._maxParallel = maxParallel;
            this._queue = [];
            this._activeCount = 0
        }
        Add(func) {
            return new Promise((resolve, reject) => {
                this._queue.push({
                    func,
                    resolve,
                    reject
                });
                this._MaybeStartNext()
            })
        }
        _FindInQueue(func) {
            for (let i = 0, len = this._queue.length; i < len; ++i)
                if (this._queue[i].func === func) return i;
            return -1
        }
        RemoveAndResolve(func, value) {
            const i = this._FindInQueue(func);
            if (i === -1) throw new Error("cannot find promise to resolve");
            this._queue[i].resolve(value);
            this._queue.splice(i, 1)
        }
        RemoveAndReject(func, value) {
            const i = this._FindInQueue(func);
            if (i === -1) throw new Error("cannot find promise to reject");
            this._queue[i].reject(value);
            this._queue.splice(i, 1)
        }
        async _MaybeStartNext() {
            if (!this._queue.length) return;
            if (this._activeCount >= this._maxParallel) return;
            this._activeCount++;
            const job = this._queue.shift();
            try {
                const result = await job.func();
                job.resolve(result)
            } catch (err) {
                job.reject(err)
            }
            this._activeCount--;
            this._MaybeStartNext()
        }
        static async Batch(concurrency,
            methods) {
            const results = [];
            let failed = false;
            const execute = async _ => {
                let fn;
                while (fn = methods.pop()) {
                    if (failed) return;
                    try {
                        results.push(await fn())
                    } catch (e) {
                        failed = true;
                        throw e;
                    }
                }
            };
            const promises = [];
            while (concurrency--) promises.push(execute());
            await Promise.all(promises);
            return results
        }
    };

}

// ../lib/util/rateLimiter.js
{
    'use strict';
    const C3 = self.C3;
    C3.RateLimiter = class RateLimiter {
        constructor(callback, interval, intervalOnBattery) {
            this._callback = callback;
            this._interval = interval;
            this._intervalOnBattery = intervalOnBattery || interval * 2;
            this._timerId = -1;
            this._lastCallTime = -Infinity;
            this._timerCallFunc = () => this._OnTimer();
            this._ignoreReset = false;
            this._canRunImmediate = false;
            this._callbackArguments = null
        }
        SetCanRunImmediate(c) {
            this._canRunImmediate = !!c
        }
        _GetInterval() {
            if (typeof C3.Battery !== "undefined" && C3.Battery.IsOnBatteryPower()) return this._intervalOnBattery;
            else return this._interval
        }
        Call(...args) {
            if (this._timerId !==
                -1) return;
            this._callbackArguments = args;
            let nowTime = C3.FastGetDateNow();
            let timeSinceLastCall = nowTime - this._lastCallTime;
            let interval = this._GetInterval();
            if (timeSinceLastCall >= interval && this._canRunImmediate) {
                this._lastCallTime = nowTime;
                this._RunCallback()
            } else this._timerId = self.setTimeout(this._timerCallFunc, Math.max(interval - timeSinceLastCall, 4))
        }
        _RunCallback() {
            this._ignoreReset = true;
            const args = this._callbackArguments;
            this._callbackArguments = null;
            if (args) this._callback(...args);
            else this._callback();
            this._ignoreReset = false
        }
        Reset() {
            if (this._ignoreReset) return;
            this._CancelTimer();
            this._callbackArguments = null;
            this._lastCallTime = C3.FastGetDateNow()
        }
        _OnTimer() {
            this._timerId = -1;
            this._lastCallTime = C3.FastGetDateNow();
            this._RunCallback()
        }
        _CancelTimer() {
            if (this._timerId !== -1) {
                self.clearTimeout(this._timerId);
                this._timerId = -1
            }
        }
        Release() {
            this._CancelTimer();
            this._callback = null;
            this._callbackArguments = null;
            this._timerCallFunc = null
        }
    };

}

// ../lib/util/svgRaster/svgRasterManager.js
{
    'use strict';
    const C3 = self.C3;
    C3.SVGRasterManager = class SVGRasterManager {
        constructor() {
            this._images = new Map;
            this._allowNpotSurfaces = false;
            this._getBaseSizeCallback = null;
            this._rasterAtSizeCallback = null;
            this._releaseResultCallback = null;
            this._redrawCallback = null
        }
        SetNpotSurfaceAllowed(a) {
            this._allowNpotSurfaces = !!a
        }
        IsNpotSurfaceAllowed() {
            return this._allowNpotSurfaces
        }
        SetGetBaseSizeCallback(f) {
            this._getBaseSizeCallback = f
        }
        GetBaseSize(dataSource) {
            if (!this._getBaseSizeCallback) throw new Error("no get base size callback set");
            return this._getBaseSizeCallback(dataSource)
        }
        SetRasterAtSizeCallback(f) {
            this._rasterAtSizeCallback =
                f
        }
        RasterAtSize(dataSource, context, surfaceWidth, surfaceHeight, imageWidth, imageHeight) {
            if (!this._rasterAtSizeCallback) throw new Error("no raster at size callback set");
            return this._rasterAtSizeCallback(dataSource, context, surfaceWidth, surfaceHeight, imageWidth, imageHeight)
        }
        SetReleaseResultCallback(f) {
            this._releaseResultCallback = f
        }
        ReleaseResult(rasterizedResult) {
            if (!this._releaseResultCallback) throw new Error("no release result callback set");
            this._releaseResultCallback(rasterizedResult)
        }
        SetRedrawCallback(f) {
            this._redrawCallback =
                f
        }
        Redraw() {
            if (!this._redrawCallback) throw new Error("no redraw callback set");
            this._redrawCallback()
        }
        AddImage(dataSource) {
            let ret = this._images.get(dataSource);
            if (!ret) {
                ret = C3.New(C3.SVGRasterImage, this, dataSource);
                this._images.set(dataSource, ret)
            }
            ret.IncReference();
            return ret
        }
        _RemoveImage(ri) {
            this._images.delete(ri.GetDataSource())
        }
        OnTexturesChanged() {
            for (const ri of this._images.values()) {
                ri.ReleaseRasterizedResult();
                ri.ForceRasterAgain()
            }
        }
    };

}

// ../lib/util/svgRaster/svgRasterImage.js
{
    'use strict';
    const C3 = self.C3;
    const MAX_SURFACE_SIZE = 4096;
    C3.SVGRasterImage = class SVGRasterImage {
        constructor(manager, dataSource) {
            this._manager = manager;
            this._dataSource = dataSource;
            this._refCount = 0;
            this._baseWidth = 0;
            this._baseHeight = 0;
            this._getBaseSizePromise = this._manager.GetBaseSize(dataSource).then(baseSize => {
                if (!this._manager) return;
                this._baseWidth = baseSize[0];
                this._baseHeight = baseSize[1];
                this._manager.Redraw()
            }).catch(err => {
                console.error("[SVG] Error loading SVG: ", err);
                this._hadError = true;
                if (this._manager) this._manager.Redraw()
            });
            this._rasterSurfaceWidth =
                0;
            this._rasterSurfaceHeight = 0;
            this._rasterImageWidth = 0;
            this._rasterImageHeight = 0;
            this._isRasterizing = false;
            this._rasterizedResult = null;
            this._forceRaster = false;
            this._hadError = false
        }
        Release() {
            if (this._refCount <= 0) throw new Error("already released");
            this._refCount--;
            if (this._refCount === 0) this._Release()
        }
        ReleaseRasterizedResult() {
            if (this._rasterizedResult) {
                this._manager.ReleaseResult(this._rasterizedResult);
                this._rasterizedResult = null
            }
        }
        _Release() {
            this.ReleaseRasterizedResult();
            this._manager._RemoveImage(this);
            this._manager = null
        }
        GetDataSource() {
            return this._dataSource
        }
        IncReference() {
            this._refCount++
        }
        HasReferences() {
            return this._refCount > 0
        }
        GetRasterizedResult() {
            return this._rasterizedResult
        }
        ForceRasterAgain() {
            this._forceRaster = true
        }
        async StartRasterForSize(context, width, height) {
            if (width === 0 || height === 0 || this._hadError) return;
            if (this._isRasterizing) return;
            let rasterSurfaceWidth = C3.nextHighestPowerOfTwo(Math.ceil(width));
            let rasterSurfaceHeight = C3.nextHighestPowerOfTwo(Math.ceil(height));
            const maxDim = Math.max(rasterSurfaceWidth,
                rasterSurfaceHeight);
            if (maxDim > MAX_SURFACE_SIZE) {
                const scale = MAX_SURFACE_SIZE / maxDim;
                width *= scale;
                height *= scale;
                rasterSurfaceWidth = Math.min(Math.ceil(rasterSurfaceWidth * scale), MAX_SURFACE_SIZE);
                rasterSurfaceHeight = Math.min(Math.ceil(rasterSurfaceHeight * scale), MAX_SURFACE_SIZE)
            }
            if (width < rasterSurfaceWidth && height < rasterSurfaceHeight) {
                const imageAspectRatio = width / height;
                const surfaceAspectRatio = rasterSurfaceWidth / rasterSurfaceHeight;
                if (surfaceAspectRatio > imageAspectRatio) {
                    width = rasterSurfaceHeight *
                        imageAspectRatio;
                    height = rasterSurfaceHeight
                } else {
                    width = rasterSurfaceWidth;
                    height = rasterSurfaceWidth / imageAspectRatio
                }
            }
            if (this._manager.IsNpotSurfaceAllowed()) {
                rasterSurfaceWidth = Math.ceil(width);
                rasterSurfaceHeight = Math.ceil(height)
            }
            if (rasterSurfaceWidth <= this._rasterSurfaceWidth && rasterSurfaceHeight <= this._rasterSurfaceHeight && !this._forceRaster) return;
            this._isRasterizing = true;
            this._rasterSurfaceWidth = rasterSurfaceWidth;
            this._rasterSurfaceHeight = rasterSurfaceHeight;
            const newRasterizedResult = await this._manager.RasterAtSize(this._dataSource,
                context, this._rasterSurfaceWidth, this._rasterSurfaceHeight, width, height);
            if (!this._manager) return;
            this.ReleaseRasterizedResult();
            this._rasterizedResult = newRasterizedResult;
            this._rasterImageWidth = width;
            this._rasterImageHeight = height;
            this._isRasterizing = false;
            this._forceRaster = false;
            this._manager.Redraw()
        }
        WhenBaseSizeReady() {
            return this._getBaseSizePromise
        }
        GetBaseWidth() {
            return this._baseWidth
        }
        GetBaseHeight() {
            return this._baseHeight
        }
        GetRasterWidth() {
            return this._rasterImageWidth
        }
        GetRasterHeight() {
            return this._rasterImageHeight
        }
        HadError() {
            return this._hadError
        }
    };

}

// ../lib/str/str.js
{
    'use strict';
    const C3 = self.C3;
    C3.UTF8_BOM = "\ufeff";
    const NUMERIC_CHARS = new Set([..."0123456789"]);
    C3.IsNumericChar = function IsNumericChar(c) {
        return NUMERIC_CHARS.has(c)
    };
    const WHITESPACE_CHARS = new Set([..." \t\n\r\u00a0\u0085\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u202f\u205f\u3000"]);
    C3.IsWhitespaceChar = function IsWhitespaceChar(c) {
        return WHITESPACE_CHARS.has(c)
    };
    C3.FilterWhitespace = function FilterWhitespace(str) {
        return [...str].filter(ch => !C3.IsWhitespaceChar(ch)).join("")
    };
    C3.IsStringAllWhitespace = function IsStringAllWhitespace(str) {
        for (const ch of str)
            if (!C3.IsWhitespaceChar(ch)) return false;
        return true
    };
    C3.IsCharArrayAllWhitespace = function IsStringAllWhitespace(chArr) {
        for (const ch of chArr)
            if (!C3.IsWhitespaceChar(ch)) return false;
        return true
    };
    C3.IsUnprintableChar = function IsUnprintableChar(c) {
        return c.length === 1 && c.charCodeAt(0) < 32
    };
    C3.FilterUnprintableChars = function FilterUnprintableChars(str) {
        return [...str].filter(ch => !C3.IsUnprintableChar(ch)).join("")
    };
    const NUMERIC_STRING_CHARS = new Set([..."0123456789.+-e"]);
    C3.IsStringNumber = function IsStringNumber(str) {
        str = str.trim();
        if (!str.length) return false;
        let firstChar = str.charAt(0);
        if (firstChar !== "-" && !NUMERIC_CHARS.has(firstChar)) return false;
        for (let ch of str)
            if (!NUMERIC_STRING_CHARS.has(ch)) return false;
        return true
    };
    C3.RemoveTrailingDigits = function RemoveTrailingDigits(str) {
        let i = str.length;
        while (i > 0) {
            let prev_ch = str.charAt(i - 1);
            if (!C3.IsNumericChar(prev_ch)) break;
            --i
        }
        return str.substr(0, i)
    };
    C3.IncrementNumberAtEndOf = function IncrementNumberAtEndOf(str) {
        let baseStr = C3.RemoveTrailingDigits(str);
        let numberStr = str.substr(baseStr.length);
        if (numberStr) numberStr = (parseInt(numberStr, 10) + 1).toString();
        else numberStr = "2";
        return baseStr + numberStr
    };
    const HTML_ENTITY_MAP = new Map([
        ["&", "&amp;"],
        ["<", "&lt;"],
        [">", "&gt;"],
        ['"', "&quot;"],
        ["'", "&#39;"]
    ]);

    function lookupHtmlEntity(s) {
        return HTML_ENTITY_MAP.get(s)
    }
    const HTML_ENTITY_REGEX = /[&<>"']/g;
    C3.EscapeHTML = function EscapeHTML(str) {
        return str.replace(HTML_ENTITY_REGEX, lookupHtmlEntity)
    };
    C3.EscapeJS = function EscapeJS(str) {
        let ret = C3.ReplaceAll(str, "\\", "\\\\");
        ret = C3.ReplaceAll(ret, '"', '\\"');
        ret = C3.ReplaceAll(ret, "\t", "\\t");
        ret = C3.ReplaceAll(ret, "\r", "");
        return C3.ReplaceAll(ret, "\n", "\\n")
    };
    C3.EscapeXML = function EscapeXML(str) {
        let ret = C3.ReplaceAll(str, "&", "&amp;");
        ret = C3.ReplaceAll(ret, "<", "&lt;");
        ret = C3.ReplaceAll(ret, ">", "&gt;");
        return C3.ReplaceAll(ret, '"', "&quot;")
    };
    const ESCAPE_REGEX = /[-[\]{}()*+?.,\\^$|#\s]/g;
    C3.EscapeRegex = function EscapeRegex(str) {
        return str.replace(ESCAPE_REGEX, "\\$&")
    };
    C3.CountCharsInString = function CountCharsInString(str, ch) {
        let count = 0;
        for (const c of str)
            if (c === ch) ++count;
        return count
    };
    C3.FindAll = function FindAll(str, find, matchCase = false) {
        if (!find) return [];
        if (!matchCase) {
            str = str.toLowerCase();
            find = find.toLowerCase()
        }
        const findLen = find.length;
        let startIndex = 0;
        let index = 0;
        let ret = [];
        while ((index = str.indexOf(find, startIndex)) > -1) {
            ret.push(index);
            startIndex = index + findLen
        }
        return ret
    };
    C3.ReplaceAll = function ReplaceAll(str, find, replace) {
        return str.replaceAll(find, () => replace)
    };
    C3.ReplaceAllCaseInsensitive = function ReplaceAll(str, find, replace) {
        return str.replace(new RegExp(C3.EscapeRegex(find), "gi"), () => replace)
    };
    C3.SetElementContent = function SetElementContent(elem, stringlike) {
        if (typeof stringlike === "string") elem.textContent = stringlike;
        else if (stringlike.isPlainText()) elem.textContent = stringlike.toString();
        else {
            elem.innerHTML = stringlike.toHTML();
            if (stringlike instanceof C3.BBString) stringlike.attachLinkHandlers(elem)
        }
    };
    C3.StringLikeEquals = function StringLikeEquals(a, b) {
        if (a instanceof C3.HtmlString || a instanceof C3.BBString) return a.equals(b);
        else if (b instanceof C3.HtmlString || b instanceof C3.BBString) return b.equals(a);
        else return a === b
    };
    C3.StringSubstitute = function StringSubstitute(str, ...arr) {
        let ret = str;
        for (let i = 0, len = arr.length; i < len; ++i) {
            const sub = `{${i}}`;
            if (!str.includes(sub)) throw new Error(`missing placeholder '${sub}' in string substitution`);
            ret = ret.replace(sub, arr[i].toString())
        }
        return ret
    };
    C3.StringSubstituteAllowMissing = function StringSubstituteAllowMissing(str, ...arr) {
        let ret = str;
        let lowestMissingIndex = -1;
        let highestUsedIndex = -1;
        for (let i = 0, len = arr.length; i < len; ++i) {
            const sub = `{${i}}`;
            if (str.includes(sub)) {
                highestUsedIndex = i;
                ret = ret.replace(sub, arr[i].toString())
            } else if (lowestMissingIndex === -1) lowestMissingIndex = i
        }
        if (lowestMissingIndex >= 0 && highestUsedIndex >= 0 && lowestMissingIndex < highestUsedIndex) throw new Error(`missing placeholder '${lowestMissingIndex}' in string substitution`);
        return ret
    };
    C3.StringSubstituteMap = function StringSubstituteMap(str, o) {
        let ret = str;
        for (let [placeholder, substitution] of Object.entries(o)) ret = ret.replaceAll(placeholder, substitution.toString());
        return ret
    };
    C3.SortAZ = function SortAZ(a, b) {
        if (a > b) return 1;
        else if (a < b) return -1;
        else return 0
    };
    C3.SortAZCaseInsensitive = function SortAZCaseInsensitive(a, b) {
        let lowerA = a.toLowerCase();
        let lowerB = b.toLowerCase();
        if (lowerA > lowerB) return 1;
        else if (lowerA < lowerB) return -1;
        else return 0
    };
    let intlSegmenter = null;
    let graphemeSplitter = null;
    if (self["Intl"] && self["Intl"]["Segmenter"]) intlSegmenter = new self["Intl"]["Segmenter"];
    else graphemeSplitter = new self.GraphemeSplitter;
    C3.SplitGraphemes = function SplitGraphemes(str) {
        if (intlSegmenter) {
            const ret = [];
            for (const s of intlSegmenter["segment"](str)) ret.push(s["segment"]);
            return ret
        } else return graphemeSplitter.splitGraphemes(str)
    };
    C3.IterateGraphemes = function* IterateGraphemes(str) {
        if (intlSegmenter)
            for (const s of intlSegmenter["segment"](str)) yield s["segment"];
        else yield* graphemeSplitter.iterateGraphemes(str)
    };
    C3.CountGraphemes = function CountGraphemes(str) {
        if (intlSegmenter) {
            let ret = 0;
            for (const s of intlSegmenter["segment"](str)) ++ret;
            return ret
        } else return graphemeSplitter.countGraphemes(str)
    };
    const KILOBYTE = 1024;
    const MEGABYTE = KILOBYTE * 1024;
    const GIGABYTE = MEGABYTE * 1024;
    const TERABYTE = GIGABYTE * 1024;
    C3.FormatDataSize = function FormatDataSize(sizeInBytes, asRate) {
        let rootKey = "common." + (asRate ? "dataRates" : "dataSizes") + ".";
        const langSub = self.langSub;
        if (sizeInBytes < KILOBYTE) return langSub(rootKey + "bytes", sizeInBytes);
        else if (sizeInBytes < MEGABYTE) {
            let kb = sizeInBytes / KILOBYTE;
            if (kb < 10) kb = Math.round(kb * 10) / 10;
            else kb = Math.round(kb);
            return langSub(rootKey + "kilobytes", kb)
        } else if (sizeInBytes < GIGABYTE) {
            let mb = sizeInBytes / MEGABYTE;
            if (mb < 10) mb = Math.round(mb * 10) / 10;
            else mb = Math.round(mb);
            return langSub(rootKey +
                "megabytes", mb)
        } else if (sizeInBytes < TERABYTE) {
            let gb = sizeInBytes / GIGABYTE;
            if (gb < 10) gb = Math.round(gb * 10) / 10;
            else gb = Math.round(gb);
            return langSub(rootKey + "gigabytes", gb)
        } else {
            let tb = sizeInBytes / TERABYTE;
            if (tb < 10) tb = Math.round(tb * 10) / 10;
            else tb = Math.round(tb);
            return langSub(rootKey + "terabytes", tb)
        }
    };
    const DEFAULT_FORMATTIME_OPTS = {
        approximate: false,
        days: true,
        hours: true,
        minutes: true,
        seconds: true
    };
    C3.FormatTime = function FormatTime(secondsTotal, opts) {
        opts = Object.assign({}, DEFAULT_FORMATTIME_OPTS, opts);
        C3.Lang.PushContext("common.time");
        const parts = [];
        const lang = self.lang;
        const langPluralSub = self.langPluralSub;
        if (opts.days) {
            const days = Math.floor(secondsTotal / (24 * 3600));
            if (days > 0) {
                secondsTotal -= days * 24 * 3600;
                parts.push(langPluralSub(".days", null, days))
            }
        }
        if (opts.hours) {
            const hours = Math.floor(secondsTotal / 3600);
            if (hours > 0 || parts.length) {
                secondsTotal -= hours * 3600;
                parts.push(langPluralSub(".hours",
                    null, hours))
            }
        }
        if (opts.minutes) {
            const minutes = Math.floor(secondsTotal / 60);
            if (minutes > 0 || parts.length || !opts.seconds) {
                secondsTotal -= minutes * 60;
                parts.push(langPluralSub(".minutes", null, minutes))
            }
        }
        if (opts.seconds) {
            const seconds = Math.floor(secondsTotal % 60);
            parts.push(langPluralSub(".seconds", null, seconds))
        }
        const ret = (opts.approximate ? lang(".approx-prefix") : "") + parts.join(lang(".separator"));
        C3.Lang.PopContext();
        return ret
    };
    C3.ZeroPad = function(n, d) {
        let s = n < 0 ? "-" : "";
        n = Math.abs(n);
        let nStr = n.toString();
        let zeroes = d - nStr.length;
        for (let i = 0; i < zeroes; ++i) s += "0";
        return s + nStr
    };
    C3.StringToTitleCase = function StringToTitleCase(str) {
        return str.toLowerCase().replace(/\b\w/g, t => t.toUpperCase())
    };
    C3.CompareVersionStrings = function CompareVersionStrings(v1, v2) {
        let a1 = v1.split(".").map(s => s.trim());
        let a2 = v2.split(".").map(s => s.trim());
        C3.resizeArray(a1, 4, "0");
        C3.resizeArray(a2, 4, "0");
        a1 = a1.map(s => parseInt(s, 10));
        a2 = a2.map(s => parseInt(s, 10));
        for (let i = 0; i < 4; ++i) {
            const diff = a1[i] - a2[i];
            if (diff !== 0) return diff < 0 ? -1 : 1
        }
        return 0
    };
    C3.CreateGUID = function CreateGUID() {
        return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, c => {
            const r = Math.floor(Math.random() * 16);
            const v = c === "x" ? r : r & 3 | 8;
            return v.toString(16)
        })
    };
    C3.StringHammingDistance = function StringHammingDistance(a, b) {
        if (a.length !== b.length) throw new Error("strings must be same length");
        let ret = 0;
        for (let i = 0, len = a.length; i < len; ++i)
            if (a.charAt(i) !== b.charAt(i)) ++ret;
        return ret
    };
    C3.StringLevenshteinDistance = function StringLevenshteinDistance(a, b) {
        if (a.length === 0) return b.length;
        if (b.length === 0) return a.length;
        let tmp, i, j, prev, val, row;
        if (a.length > b.length) {
            tmp = a;
            a = b;
            b = tmp
        }
        row = Array(a.length + 1);
        for (i = 0; i <= a.length; i++) row[i] = i;
        for (i = 1; i <= b.length; i++) {
            prev = i;
            for (j = 1; j <= a.length; j++) {
                if (b[i - 1] === a[j - 1]) val = row[j - 1];
                else val = Math.min(row[j - 1] + 1, Math.min(prev + 1, row[j] + 1));
                row[j - 1] = prev;
                prev = val
            }
            row[a.length] = prev
        }
        return row[a.length]
    };

}

// ../lib/str/bbstring.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;
    const BB_CODE_MAP = new Map([
        ["b", "strong"],
        ["i", "em"],
        ["s", "s"],
        ["u", "u"],
        ["sub", "sub"],
        ["sup", "sup"],
        ["small", "small"],
        ["mark", "mark"],
        ["code", "code"],
        ["a1", "a"],
        ["a2", "a"],
        ["a3", "a"],
        ["a4", "a"],
        ["a5", "a"],
        ["a6", "a"],
        ["a7", "a"],
        ["a8", "a"],
        ["a9", "a"],
        ["tip1", "abbr"],
        ["tip2", "abbr"],
        ["tip3", "abbr"],
        ["tip4", "abbr"],
        ["tip5", "abbr"],
        ["tip6", "abbr"],
        ["tip7", "abbr"],
        ["tip8", "abbr"],
        ["tip9", "abbr"],
        ["bad", ["span", "bbCodeBad"]],
        ["good", ["span", "bbCodeGood"]],
        ["info", ["span", "bbCodeInfo"]],
        ["h1", ["span", "bbCodeH1"]],
        ["h2", ["span", "bbCodeH2"]],
        ["h3", ["span", "bbCodeH3"]],
        ["h4", ["span", "bbCodeH4"]],
        ["item", ["span", "bbCodeItem"]]
    ]);
    const BBREGEX = /\[(\/?)([a-zA-Z0-9]+)\]/g;
    const CUSTOM_BBREGEX = /\[(\/?)([^\[\n]*?)\]/g;
    let linkActions = null;
    let tipList = null;
    let classIndex = 0;

    function bbToHtmlReplacerFunc(match, closeSlash, tagName) {
        const entry = BB_CODE_MAP.get(tagName);
        if (entry)
            if (typeof entry === "string") {
                if (entry === "a" && linkActions.length === 0 || entry === "abbr" && tipList.length === 0) return match;
                if (entry === "a" && !closeSlash) {
                    const index = parseInt(tagName.substring(1), 10) - 1;
                    if (index < 0 || index >= linkActions.length) throw new Error("invalid bbcode link substitution");
                    const linkAction = linkActions[index];
                    if (typeof linkAction === "string") return `<a href="${linkActions[index]}">`;
                    else if (typeof linkAction ===
                        "function") return `<a class="bblink${index}">`;
                    else throw new TypeError("invalid bbcode link action");
                } else if (entry === "abbr" && !closeSlash) {
                    const index = parseInt(tagName.substring(3), 10) - 1;
                    if (index < 0 || index >= tipList.length) throw new Error("invalid bbcode tip substitution");
                    const tip = tipList[index];
                    let tipStr = "";
                    if (typeof tip === "string") tipStr = tip;
                    else if (typeof tip === "function") tipStr = tip();
                    if (typeof tipStr !== "string") throw new TypeError("invalid bbcode tip");
                    return `<abbr title="${C3.ReplaceAll(tipStr,
'"',"&quot;")}">`
                } else return "<" + closeSlash + entry + ">"
            } else if (Array.isArray(entry)) {
            let tag = entry[0];
            let className = entry[1];
            if (closeSlash) return "</" + tag + ">";
            else return `<${tag} class="${className}">`
        } else;
        else if (tagName === "class")
            if (closeSlash) return "</span>";
            else return `<span class="bbclass${classIndex++}">`;
        else return match
    }
    const LINEBREAK_REGEX = /\n/g;
    C3.BBString = class BBString {
        constructor(str, opts) {
            this._bbstr = opts && opts.noEscape ? str : C3.EscapeHTML(str);
            this._htmlstr = "";
            this._convertLineBreaks = false;
            this._linkActions = [];
            this._tipList = [];
            if (opts) {
                this._convertLineBreaks = !!opts.convertLineBreaks;
                if (opts.links) {
                    if (opts.links.length > 9) throw new Error("too many links");
                    this._linkActions = opts.links
                }
                if (opts.tips) {
                    if (opts.tips.length > 9) throw new Error("too many tips");
                    this._tipList = opts.tips
                }
            }
            this._hasAnyBBtags = this._bbstr.includes("[");
            this._needsLineBreakConversion =
                this._convertLineBreaks && this._bbstr.includes("\n");
            this._isPlain = !this._hasAnyBBtags && !this._needsLineBreakConversion && !this._bbstr.includes("&");
            this._hasParsedFragments = false;
            this._fragments = []
        }
        toString() {
            return this._bbstr
        }
        valueOf() {
            return this._bbstr
        }
        isPlainText() {
            return this._isPlain
        }
        toPlainText() {
            if (this._hasAnyBBtags) return this._bbstr.replace(BBREGEX, "");
            else return this._bbstr
        }
        toHTML() {
            if (this._isPlain) return this._bbstr;
            if (!this._htmlstr && this._bbstr) {
                let str = this._bbstr;
                if (this._hasAnyBBtags) {
                    classIndex =
                        0;
                    linkActions = this._linkActions;
                    tipList = this._tipList;
                    str = str.replace(BBREGEX, bbToHtmlReplacerFunc);
                    linkActions = null;
                    tipList = null
                }
                if (this._needsLineBreakConversion) str = str.replace(LINEBREAK_REGEX, "<br>");
                this._htmlstr = str
            }
            return this._htmlstr
        }
        attachLinkHandlers(parentElem) {
            if (!this._linkActions.length) return;
            for (let i = 0, len = this._linkActions.length; i < len; ++i) {
                const linkAction = this._linkActions[i];
                if (typeof linkAction !== "function") continue;
                const linkElem = parentElem.querySelector(".bblink" + i);
                if (!linkElem) throw new Error("unable to attach BBString link handler");
                linkElem.onclick = linkAction
            }
        }
        equals(s) {
            if (s instanceof C3.HtmlString) return this.toHTML() === s.toHTML();
            else if (s instanceof C3.BBString) return this._bbstr === s._bbstr;
            else return this._bbstr === s
        }
        toFragmentList() {
            if (this._hasParsedFragments) return this._fragments;
            const bbStr = this._bbstr;
            const styleStack = [];
            CUSTOM_BBREGEX.lastIndex = 0;
            let prevIndex = 0;
            let result = null;
            while ((result = CUSTOM_BBREGEX.exec(bbStr)) !== null) {
                const index = result.index;
                if (index > 0 && bbStr.charAt(index - 1) === "\\") continue;
                const matchStr =
                    result[0];
                const closeSlash = result[1];
                const tagName = result[2];
                const strFrag = bbStr.substring(prevIndex, index);
                prevIndex = index + matchStr.length;
                if (strFrag) this._fragments.push({
                    text: strFrag,
                    styles: styleStack.slice(0)
                });
                if (!tagName) continue;
                if (closeSlash) {
                    const lowerTagName = tagName.toLowerCase();
                    for (let i = styleStack.length - 1; i >= 0; --i)
                        if (styleStack[i].tag === lowerTagName) {
                            styleStack.splice(i, 1);
                            break
                        }
                } else {
                    let tag = tagName;
                    let param = null;
                    const eq = tagName.indexOf("=");
                    if (eq !== -1) {
                        tag = tagName.substring(0, eq).toLowerCase();
                        param = tagName.substring(eq + 1)
                    } else tag = tag.toLowerCase();
                    styleStack.push({
                        tag,
                        param
                    })
                }
            }
            if (prevIndex < bbStr.length) this._fragments.push({
                text: bbStr.substring(prevIndex),
                styles: styleStack.slice(0)
            });
            for (const frag of this._fragments) frag.text = this._ProcessBBCodeEscapeSequences(frag.text);
            this._hasParsedFragments = true;
            return this._fragments
        }
        _ProcessBBCodeEscapeSequences(text) {
            text = C3.ReplaceAll(text, "\\[", "[");
            return C3.ReplaceAll(text, "\\\\", "\\")
        }
        static StripTags(str) {
            return C3.New(C3.BBString, str, {
                noEscape: true
            }).toPlainText()
        }
        static StripAnyTags(str) {
            return str.replace(CUSTOM_BBREGEX, "")
        }
    };

}

// ../lib/str/wordWrap.js
{
    'use strict';
    const C3 = self.C3;

    function IsWordBreakWhiteSpace(ch) {
        if (ch === "\u00a0" || ch === "\u202f") return false;
        else return C3.IsWhitespaceChar(ch)
    }

    function WordBreakTrimEnd(chArr) {
        while (chArr.length > 0 && IsWordBreakWhiteSpace(chArr.at(-1))) chArr.pop()
    }

    function IsNewline(ch) {
        return ch === "\n" || ch === "\r\n"
    }
    C3.WordWrap = class WordWrap {
        constructor() {
            this._lines = []
        }
        GetLines() {
            return this._lines
        }
        GetLineCount() {
            return this._lines.length
        }
        _MeasureLine(line, measureFunc) {
            let width = 0;
            let height = 0;
            let fbbAscent = 0;
            let fbbDescent = 0;
            let topToAlphabeticDistance = 0;
            for (const frag of line) {
                if (frag.width === -1) {
                    const m = measureFunc(frag.chArr, frag.styles);
                    frag.width = m.width;
                    frag.height = m.height;
                    frag.fontBoundingBoxAscent = m.fontBoundingBoxAscent || 0;
                    frag.fontBoundingBoxDescent = m.fontBoundingBoxDescent || 0;
                    frag.topToAlphabeticDistance =
                        m.topToAlphabeticDistance || 0
                }
                width += frag.width;
                height = Math.max(height, frag.height);
                fbbAscent = Math.max(fbbAscent, frag.fontBoundingBoxAscent);
                fbbDescent = Math.max(fbbDescent, frag.fontBoundingBoxDescent);
                topToAlphabeticDistance = Math.max(topToAlphabeticDistance, frag.topToAlphabeticDistance)
            }
            return {
                width,
                height,
                fontBoundingBoxAscent: fbbAscent,
                fontBoundingBoxDescent: fbbDescent,
                topToAlphabeticDistance
            }
        }
        _AddLine(fragments, width, height, fbbAscent, fbbDescent, topToAlphabeticDistance) {
            this._lines.push({
                fragments,
                width,
                height,
                fontBoundingBoxAscent: fbbAscent,
                fontBoundingBoxDescent: fbbDescent,
                topToAlphabeticDistance
            })
        }
        WordWrap(fragmentArr, measureFunc, wrapWidth, wrapMode, endOfLineMargin) {
            if (typeof fragmentArr === "string") fragmentArr = [{
                text: fragmentArr,
                styles: []
            }];
            C3.clearArray(this._lines);
            if (!fragmentArr.length || fragmentArr.length === 1 && !fragmentArr[0].text.length || wrapWidth < 2) return;
            fragmentArr = fragmentArr.map(frag => ({
                chArr: C3.SplitGraphemes(frag.text),
                styles: frag.styles
            }));
            if (fragmentArr.length === 1) {
                const frag =
                    fragmentArr[0];
                const chArr = frag.chArr;
                const styles = frag.styles;
                if (chArr.length <= 100 && !chArr.includes("\n")) {
                    let {
                        width,
                        height,
                        fontBoundingBoxAscent,
                        fontBoundingBoxDescent,
                        topToAlphabeticDistance
                    } = measureFunc(chArr, styles);
                    width += endOfLineMargin;
                    fontBoundingBoxAscent = fontBoundingBoxAscent || 0;
                    fontBoundingBoxDescent = fontBoundingBoxDescent || 0;
                    topToAlphabeticDistance = topToAlphabeticDistance || 0;
                    if (width <= wrapWidth) {
                        this._AddLine([{
                                chArr,
                                styles,
                                width,
                                height,
                                fontBoundingBoxAscent,
                                fontBoundingBoxDescent,
                                topToAlphabeticDistance
                            }],
                            width, height, fontBoundingBoxAscent, fontBoundingBoxDescent, topToAlphabeticDistance);
                        return
                    }
                }
            }
            let tokenisedFragments;
            if (wrapMode === "word") tokenisedFragments = this._TokeniseWords(fragmentArr);
            else {
                tokenisedFragments = [];
                for (const frag of fragmentArr) C3.appendArray(tokenisedFragments, frag.chArr.map(ch => [{
                    chArr: [ch],
                    styles: frag.styles
                }]))
            }
            this._WrapText(tokenisedFragments, measureFunc, wrapWidth, endOfLineMargin)
        }
        _TokeniseWords(fragmentArr) {
            const ret = [];
            let curWord = [];
            let isCurWhitespace = false;
            for (const frag of fragmentArr) {
                const chArr =
                    frag.chArr;
                const styles = frag.styles;
                for (const ch of chArr)
                    if (IsNewline(ch)) {
                        if (curWord.length > 0) ret.push(curWord);
                        ret.push([{
                            chArr: ["\n"],
                            styles
                        }]);
                        curWord = []
                    } else if (curWord.length === 0) {
                    curWord.push({
                        chArr: [ch],
                        styles
                    });
                    isCurWhitespace = IsWordBreakWhiteSpace(ch)
                } else {
                    const isWhitespace = IsWordBreakWhiteSpace(ch);
                    if (isWhitespace === isCurWhitespace) {
                        const curFrag = curWord.at(-1);
                        if (curFrag.styles === styles) curFrag.chArr.push(ch);
                        else curWord.push({
                            chArr: [ch],
                            styles
                        })
                    } else {
                        ret.push(curWord);
                        curWord = [];
                        curWord.push({
                            chArr: [ch],
                            styles
                        });
                        isCurWhitespace = isWhitespace
                    }
                }
            }
            if (curWord.length > 0) ret.push(curWord);
            return ret
        }
        _CopyLine(line) {
            return line.map(f => ({
                chArr: f.chArr.slice(0),
                styles: f.styles,
                width: f.width,
                height: f.height,
                fontBoundingBoxAscent: f.fontBoundingBoxAscent,
                fontBoundingBoxDescent: f.fontBoundingBoxDescent,
                topToAlphabeticDistance: f.topToAlphabeticDistance
            }))
        }
        _AddWordToLine(currentLine, curWord) {
            const lastFrag = currentLine.length ? currentLine.at(-1) : null;
            let i = 0;
            if (lastFrag && curWord[0].styles === lastFrag.styles) {
                C3.appendArray(lastFrag.chArr,
                    curWord[0].chArr);
                lastFrag.width = -1;
                lastFrag.height = -1;
                lastFrag.fontBoundingBoxAscent = -1;
                lastFrag.fontBoundingBoxDescent = -1;
                lastFrag.topToAlphabeticDistance = -1;
                i = 1
            }
            for (let len = curWord.length; i < len; ++i) {
                const f = curWord[i];
                currentLine.push({
                    chArr: f.chArr.slice(0),
                    styles: f.styles,
                    width: -1,
                    height: -1,
                    fontBoundingBoxAscent: -1,
                    fontBoundingBoxDescent: -1,
                    topToAlphabeticDistance: -1
                })
            }
        }
        _WrapText(tokenisedFragments, measureFunc, wrapWidth, endOfLineMargin) {
            let currentLine = [];
            let currentLineWidth = 0;
            let currentLineHeight =
                0;
            let currentLineFbbAscent = 0;
            let currentLineFbbDescent = 0;
            let currentLineTopToAlphabetic = 0;
            for (const curWord of tokenisedFragments) {
                if (curWord.length === 1 && curWord[0].chArr.length === 1 && IsNewline(curWord[0].chArr[0])) {
                    if (currentLineHeight === 0) {
                        const m = measureFunc([" "], curWord[0].styles);
                        currentLineHeight = m.height;
                        currentLineFbbAscent = m.fontBoundingBoxAscent || 0;
                        currentLineFbbDescent = m.fontBoundingBoxDescent || 0;
                        currentLineTopToAlphabetic = m.topToAlphabeticDistance || 0
                    }
                    this._AddLine(currentLine, currentLineWidth,
                        currentLineHeight, currentLineFbbAscent, currentLineFbbDescent, currentLineTopToAlphabetic);
                    currentLine = [];
                    currentLineWidth = 0;
                    currentLineHeight = 0;
                    currentLineFbbAscent = 0;
                    currentLineFbbDescent = 0;
                    currentLineTopToAlphabetic = 0;
                    continue
                }
                const tryLine = this._CopyLine(currentLine);
                this._AddWordToLine(tryLine, curWord);
                const tryMetrics = this._MeasureLine(tryLine, measureFunc);
                const tryLineWidth = tryMetrics.width;
                if (tryLineWidth >= wrapWidth) {
                    if (currentLine.length > 0) this._AddLine(currentLine, currentLineWidth, currentLineHeight,
                        currentLineFbbAscent, currentLineFbbDescent, currentLineTopToAlphabetic);
                    currentLine = [];
                    if (C3.IsCharArrayAllWhitespace(curWord[0].chArr)) {
                        currentLineWidth = 0;
                        currentLineHeight = 0;
                        currentLineFbbAscent = 0;
                        currentLineFbbDescent = 0;
                        currentLineTopToAlphabetic = 0
                    } else {
                        this._AddWordToLine(currentLine, curWord);
                        const metrics = this._MeasureLine(currentLine, measureFunc);
                        currentLineWidth = metrics.width;
                        currentLineHeight = metrics.height;
                        currentLineFbbAscent = metrics.fontBoundingBoxAscent;
                        currentLineFbbDescent = metrics.fontBoundingBoxDescent;
                        currentLineTopToAlphabetic = metrics.topToAlphabeticDistance
                    }
                } else {
                    currentLine = tryLine;
                    currentLineWidth = tryLineWidth;
                    currentLineHeight = tryMetrics.height;
                    currentLineFbbAscent = tryMetrics.fontBoundingBoxAscent;
                    currentLineFbbDescent = tryMetrics.fontBoundingBoxDescent;
                    currentLineTopToAlphabetic = tryMetrics.topToAlphabeticDistance
                }
            }
            if (currentLine.length > 0) this._AddLine(currentLine, currentLineWidth, currentLineHeight, currentLineFbbAscent, currentLineFbbDescent, currentLineTopToAlphabetic);
            this._TrimLinesTrailingWhitespace(measureFunc,
                endOfLineMargin)
        }
        _TrimLinesTrailingWhitespace(measureFunc, endOfLineMargin) {
            for (const line of this._lines) {
                const fragments = line.fragments;
                if (!fragments.length) continue;
                let lastFrag = fragments.at(-1);
                const chArr = lastFrag.chArr;
                const trimmedArr = chArr.slice(0);
                WordBreakTrimEnd(trimmedArr);
                if (trimmedArr.length === 0) {
                    line.width -= lastFrag.width;
                    fragments.pop()
                } else if (trimmedArr.length < chArr.length) {
                    const trimmedWidth = measureFunc(trimmedArr, lastFrag.styles).width;
                    const diff = lastFrag.width - trimmedWidth;
                    lastFrag.width =
                        trimmedWidth;
                    lastFrag.chArr = trimmedArr;
                    line.width -= diff
                }
                if (endOfLineMargin !== 0 && fragments.length > 0) {
                    lastFrag = fragments.at(-1);
                    lastFrag.width += endOfLineMargin;
                    line.width += endOfLineMargin
                }
            }
        }
        Clear() {
            C3.clearArray(this._lines)
        }
        GetMaxLineWidth() {
            return this._lines.reduce((a, v) => Math.max(a, v.width), 0)
        }
        GetTotalLineHeight() {
            return this._lines.reduce((a, v) => a + v.height, 0)
        }
    };

}

// ../lib/gfx/gfx.js
{
    'use strict';
    const C3 = self.C3;
    const glMatrix = self.glMatrix;
    const vec3 = glMatrix.vec3;
    const vec4 = glMatrix.vec4;
    const mat4 = glMatrix.mat4;
    const tempVec3a = vec3.create();
    const tempVec3b = vec3.create();
    const tempVec3c = vec3.create();
    const tempVec4 = vec4.create();
    const tempMat4 = mat4.create();
    const neartl = vec3.create();
    const neartr = vec3.create();
    const nearbl = vec3.create();
    const nearbr = vec3.create();
    const fartl = vec3.create();
    const fartr = vec3.create();
    const farbl = vec3.create();
    const farbr = vec3.create();
    const unitViewport = vec4.fromValues(0, 0, 1, 1);
    C3.Gfx = {
        Project(objx, objy, objz, mv, proj, viewport, windowCoordinate) {
            const fTemp0 = mv[0] * objx + mv[4] * objy + mv[8] * objz + mv[12];
            const fTemp1 = mv[1] * objx + mv[5] * objy + mv[9] * objz + mv[13];
            const fTemp2 = mv[2] * objx + mv[6] * objy + mv[10] * objz + mv[14];
            const fTemp3 = mv[3] * objx + mv[7] * objy + mv[11] * objz + mv[15];
            let fTemp4 = proj[0] * fTemp0 + proj[4] * fTemp1 + proj[8] * fTemp2 + proj[12] * fTemp3;
            let fTemp5 = proj[1] * fTemp0 + proj[5] * fTemp1 + proj[9] * fTemp2 + proj[13] * fTemp3;
            let fTemp6 = proj[2] * fTemp0 + proj[6] * fTemp1 + proj[10] * fTemp2 + proj[14] * fTemp3;
            let fTemp7 =
                proj[3] * fTemp0 + proj[7] * fTemp1 + proj[11] * fTemp2 + proj[15] * fTemp3;
            if (fTemp7 === 0) return false;
            fTemp7 = 1 / fTemp7;
            fTemp4 *= fTemp7;
            fTemp5 *= fTemp7;
            fTemp6 *= fTemp7;
            windowCoordinate[0] = (fTemp4 * .5 + .5) * viewport[2] + viewport[0];
            windowCoordinate[1] = (fTemp5 * .5 + .5) * viewport[3] + viewport[1];
            windowCoordinate[2] = (1 + fTemp6) * .5;
            return true
        },
        Unproject(winx, winy, winz, mv, proj, viewport, objectCoordinate) {
            const A = tempMat4;
            const vec = tempVec4;
            mat4.multiply(A, proj, mv);
            if (mat4.invert(A, A) === null) return false;
            vec[0] = (winx - viewport[0]) /
                viewport[2] * 2 - 1;
            vec[1] = (winy - viewport[1]) / viewport[3] * 2 - 1;
            vec[2] = 2 * winz - 1;
            vec[3] = 1;
            vec4.transformMat4(vec, vec, A);
            if (vec[3] === 0) return false;
            vec[3] = 1 / vec[3];
            objectCoordinate[0] = vec[0] * vec[3];
            objectCoordinate[1] = vec[1] * vec[3];
            objectCoordinate[2] = vec[2] * vec[3];
            return true
        },
        UnprojectScreenToWorldZ(winx, winy, worldZ, mv, proj, viewport, objectCoordinate) {
            const nearPt = tempVec3a;
            const farPt = tempVec3b;
            if (!C3.Gfx.Unproject(winx, winy, 0, mv, proj, viewport, nearPt)) return false;
            if (!C3.Gfx.Unproject(winx, winy, 1, mv, proj,
                    viewport, farPt)) return false;
            const dirVec = tempVec3b;
            vec3.subtract(dirVec, farPt, nearPt);
            const planeNormal = tempVec3c;
            vec3.set(planeNormal, 0, 0, 1);
            const planeConstant = -worldZ;
            const denominator = vec3.dot(planeNormal, dirVec);
            let distance = 0;
            if (denominator === 0) {
                const planeDistToPt = vec3.dot(planeNormal, nearPt) + planeConstant;
                if (planeDistToPt !== 0) return false
            } else {
                distance = -(vec3.dot(nearPt, planeNormal) + planeConstant) / denominator;
                if (distance < 0) return false
            }
            vec3.scaleAndAdd(objectCoordinate, nearPt, dirVec, distance);
            return true
        }
    };

    function PlaneFromPoints(ptA, ptB, ptC, plane) {
        const normal = tempVec3c;
        vec3.subtract(tempVec3a, ptC, ptB);
        vec3.subtract(tempVec3b, ptA, ptB);
        vec3.cross(normal, tempVec3a, tempVec3b);
        vec3.normalize(normal, normal);
        plane.set(normal[0], normal[1], normal[2], vec3.dot(ptA, normal))
    }

    function IsInFrontOfPlane(minX, minY, minZ, maxX, maxY, maxZ, plane) {
        const nx = plane.x;
        const ny = plane.y;
        const nz = plane.z;
        const d = plane.w;
        const nxT = plane.xF;
        const nyT = plane.yF;
        const nzT = plane.zF;
        const nxF = 1 - nxT;
        const nyF = 1 - nyT;
        const nzF = 1 - nzT;
        const minD = nx * minX * nxT + nx * maxX * nxF + ny * minY * nyT + ny * maxY * nyF + nz * minZ * nzT + nz * maxZ * nzF;
        if (minD >= d) return true;
        const maxD = nx * maxX * nxT + nx * minX * nxF + ny * maxY * nyT + ny * minY * nyF + nz * maxZ * nzT + nz * minZ * nzF;
        return maxD > d
    }

    function IsPointInFrontOfPlane(x, y, z, plane) {
        const nx = plane.x;
        const ny = plane.y;
        const nz = plane.z;
        const d = plane.w;
        const minD = nx * x + ny * y + nz * z;
        return minD >= d
    }
    class Plane {
        constructor() {
            this.x = NaN;
            this.y = NaN;
            this.z = NaN;
            this.w = NaN;
            this.xF = NaN;
            this.yF = NaN;
            this.zF = NaN
        }
        set(x, y, z, w) {
            this.x = x;
            this.y = y;
            this.z = z;
            this.w = w;
            this.xF = x > 0 ? 1 : 0;
            this.yF = y > 0 ? 1 : 0;
            this.zF = z > 0 ? 1 : 0
        }
    }
    C3.Gfx.ViewFrustum = class ViewFrustum {
        constructor() {
            this._leftP = new Plane;
            this._topP = new Plane;
            this._rightP = new Plane;
            this._bottomP = new Plane;
            this._nearP = new Plane;
            this._farP = new Plane
        }
        CalculatePlanes(mv, proj) {
            const vp = unitViewport;
            C3.Gfx.Unproject(0, 1, 0, mv, proj, vp, neartl);
            C3.Gfx.Unproject(1, 1, 0, mv, proj, vp, neartr);
            C3.Gfx.Unproject(0, 0, 0, mv, proj, vp, nearbl);
            C3.Gfx.Unproject(1, 0, 0, mv, proj, vp, nearbr);
            C3.Gfx.Unproject(0, 1, 1, mv, proj, vp, fartl);
            C3.Gfx.Unproject(1, 1, 1, mv, proj, vp, fartr);
            C3.Gfx.Unproject(0, 0,
                1, mv, proj, vp, farbl);
            C3.Gfx.Unproject(1, 0, 1, mv, proj, vp, farbr);
            PlaneFromPoints(nearbl, neartl, fartl, this._leftP);
            PlaneFromPoints(neartl, neartr, fartr, this._topP);
            PlaneFromPoints(neartr, nearbr, farbr, this._rightP);
            PlaneFromPoints(nearbr, nearbl, farbl, this._bottomP);
            PlaneFromPoints(farbl, fartl, fartr, this._farP);
            PlaneFromPoints(nearbr, neartr, neartl, this._nearP)
        }
        ContainsAABB(minX, minY, minZ, maxX, maxY, maxZ) {
            return IsInFrontOfPlane(minX, minY, minZ, maxX, maxY, maxZ, this._leftP) && IsInFrontOfPlane(minX, minY, minZ, maxX,
                maxY, maxZ, this._topP) && IsInFrontOfPlane(minX, minY, minZ, maxX, maxY, maxZ, this._rightP) && IsInFrontOfPlane(minX, minY, minZ, maxX, maxY, maxZ, this._bottomP) && IsInFrontOfPlane(minX, minY, minZ, maxX, maxY, maxZ, this._nearP) && IsInFrontOfPlane(minX, minY, minZ, maxX, maxY, maxZ, this._farP)
        }
        IsBehindNearPlane(x, y, z) {
            return !IsPointInFrontOfPlane(x, y, z, this._nearP)
        }
    };

}

// ../lib/gfx/rendererBase.js
{
    'use strict';
    const C3 = self.C3;
    const glMatrix = self.glMatrix;
    const vec3 = glMatrix.vec3;
    const vec4 = glMatrix.vec4;
    const mat4 = glMatrix.mat4;
    const tempMat4 = mat4.create();
    const tmpVec3a = vec3.fromValues(0, 0, 0);
    const tmpVec3b = vec3.fromValues(0, 0, 0);
    const tmpVec3c = vec3.fromValues(0, 0, 0);
    const defaultUpVector = vec3.fromValues(0, 1, 0);
    const tmpVec4 = vec4.fromValues(0, 0, 0, 0);
    const tmpQuad = new C3.Quad;
    const tmpRect = new C3.Rect;
    const defaultTexCoordsQuad = new C3.Quad(0, 0, 1, 0, 1, 1, 0, 1);
    const DEFAULT_RENDERERBASE_OPTS = {
        nearZ: 1,
        farZ: 1E4
    };
    C3.Gfx.RendererBase = class RendererBase {
        constructor(opts) {
            opts = Object.assign({}, DEFAULT_RENDERERBASE_OPTS, opts);
            this._width = 0;
            this._height = 0;
            this._fovY = C3.toRadians(45);
            this._tan_fovY_2 = Math.tan(this._fovY / 2);
            this._matP = mat4.create();
            this._matMV = mat4.create();
            this._zAxisScale = false;
            this._nearZ = opts.nearZ;
            this._farZ = opts.farZ;
            this._allShaderPrograms = [];
            this._shaderProgramsByName = new Map;
            this._spTextureFill = null;
            this._spPoints = null;
            this._spTilemapFill = null;
            this._spTileRandomization = null;
            this._spColorFill =
                null;
            this._spLinearGradientFill = null;
            this._spPenumbraFill = null;
            this._spHardEllipseFill = null;
            this._spHardEllipseOutline = null;
            this._spSmoothEllipseFill = null;
            this._spSmoothEllipseOutline = null;
            this._spSmoothLineFill = null;
            this._stateGroups = new Map;
            this._currentStateGroup = null;
            this._blendModeTable = [];
            this._namedBlendModeMap = new Map;
            this._baseZ = 0;
            this._currentZ = 0;
            this._lineWidth = 1;
            this._lineWidthStack = [this._lineWidth];
            this._lineCap = 1;
            this._lineCapStack = [this._lineCap];
            this._lineOffset = .5;
            this._lineOffsetStack = [this._lineOffset];
            this._frameNumber = 0;
            this._enableMipmaps = true;
            this._hasMajorPerformanceCaveat = false
        }
        FillIndexBufferData(indexData) {
            let i = 0,
                len = indexData.length,
                fv = 0;
            while (i < len) {
                indexData[i++] = fv;
                indexData[i++] = fv + 1;
                indexData[i++] = fv + 2;
                indexData[i++] = fv;
                indexData[i++] = fv + 2;
                indexData[i++] = fv + 3;
                fv += 4
            }
        }
        _ClearState() {
            this._baseZ = 0;
            this._currentZ = 0;
            this._spTextureFill = null;
            this._spPoints = null;
            this._spTilemapFill = null;
            this._spTileRandomization = null;
            this._spColorFill = null;
            this._spLinearGradientFill = null;
            this._spPenumbraFill = null;
            this._spHardEllipseFill = null;
            this._spHardEllipseOutline = null;
            this._spSmoothEllipseFill = null;
            this._spSmoothEllipseOutline = null;
            this._spSmoothLineFill = null;
            this._ClearAllShaderPrograms()
        }
        InitState() {
            this._ClearState();
            this._currentStateGroup = null
        }
        OnDeviceOrContextLost() {
            for (const s of this._allShaderPrograms) s.Release();
            this._ClearState()
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetDefaultCameraZ(viewH) {
            if (this.IsZAxisScaleNormalized()) return 100;
            else return viewH /
                (2 * this._GetTanFovYDiv2())
        }
        GetZAxisScaleFactor(viewH) {
            if (this.IsZAxisScaleNormalized()) {
                const realZunits = viewH / (2 * this._GetTanFovYDiv2());
                return realZunits / this.GetDefaultCameraZ(viewH)
            } else return 1
        }
        SetNearZ(z) {
            this._nearZ = z
        }
        GetNearZ() {
            return this._nearZ
        }
        SetFarZ(z) {
            this._farZ = z
        }
        GetFarZ() {
            return this._farZ
        }
        SetFovY(f) {
            this._fovY = f;
            this._tan_fovY_2 = Math.tan(this._fovY / 2)
        }
        GetFovY() {
            return this._fovY
        }
        _GetTanFovYDiv2() {
            return this._tan_fovY_2
        }
        SetZAxisScaleNormalized() {
            this._zAxisScale = false
        }
        SetZAxisScaleRegular() {
            this._zAxisScale =
                true
        }
        IsZAxisScaleNormalized() {
            return !this._zAxisScale
        }
        IsZAxisScaleRegular() {
            return this._zAxisScale
        }
        CalculatePerspectiveMatrix(outMat, aspect, vpX = .5, vpY = .5) {
            const zNear = this.GetNearZ();
            const zFar = this.GetFarZ();
            const fovY = this.GetFovY();
            if (vpX === .5 && vpY === .5)
                if (this.IsWebGPU()) mat4.perspectiveZO(outMat, fovY, aspect, zNear, zFar);
                else mat4.perspective(outMat, fovY, aspect, zNear, zFar);
            else {
                vpX = 1 - vpX;
                const fLeft = vpX * 2 - 2;
                const fRight = vpX * 2;
                const fBottom = vpY * 2 - 2;
                const fTop = vpY * 2;
                const fH = this._GetTanFovYDiv2() *
                    zNear;
                const fW = fH * aspect;
                mat4.frustum(outMat, fLeft * fW, fRight * fW, fBottom * fH, fTop * fH, zNear, zFar)
            }
        }
        CalculateOrthographicMatrix(outMat, width, height, scale = 1) {
            const dpr = self.devicePixelRatio;
            const worldScale = this.GetDefaultCameraZ(height) * 2 * dpr * this._GetTanFovYDiv2() / height;
            const hScaleX = width * worldScale / (2 * dpr * scale);
            const hScaleY = height * worldScale / (2 * dpr * scale);
            const left = -hScaleX;
            const right = hScaleX;
            const bottom = -hScaleY;
            const top = hScaleY;
            if (this.IsWebGPU()) mat4.orthoZO(outMat, left, right, bottom, top,
                this.GetNearZ(), this.GetFarZ());
            else mat4.ortho(outMat, left, right, bottom, top, this.GetNearZ(), this.GetFarZ())
        }
        CalculateLookAtModelView(outMat, cam, look, up, viewH, zScale = 1) {
            let worldScale = 1;
            if (this.IsZAxisScaleNormalized()) worldScale = 200 * this._GetTanFovYDiv2() / viewH;
            const worldScaleVec3 = tmpVec3c;
            vec3.set(worldScaleVec3, worldScale, -worldScale, 1);
            const tmpCam = tmpVec3a;
            const tmpLook = tmpVec3b;
            vec3.multiply(tmpCam, cam, worldScaleVec3);
            vec3.multiply(tmpLook, look, worldScaleVec3);
            mat4.lookAt(outMat, tmpCam, tmpLook,
                up || defaultUpVector);
            worldScaleVec3[2] = zScale;
            mat4.scale(outMat, outMat, worldScaleVec3)
        }
        CalculateLookAtModelView2(camX, camY, camZ, lookX, lookY, lookZ, viewH, zScale) {
            vec3.set(tmpVec3a, camX, camY, camZ);
            vec3.set(tmpVec3b, lookX, lookY, lookZ);
            this.CalculateLookAtModelView(tempMat4, tmpVec3a, tmpVec3b, defaultUpVector, viewH, zScale);
            return tempMat4
        }
        _AddShaderProgram(sp) {
            this._allShaderPrograms.push(sp);
            this._shaderProgramsByName.set(sp.GetName(), sp)
        }
        _RemoveShaderProgram(sp) {
            const i = this._allShaderPrograms.indexOf(sp);
            if (i !== -1) this._allShaderPrograms.splice(i, 1);
            this._shaderProgramsByName.delete(sp.GetName())
        }
        _ClearAllShaderPrograms() {
            C3.clearArray(this._allShaderPrograms);
            this._shaderProgramsByName.clear()
        }
        GetShaderProgramByName(name) {
            return this._shaderProgramsByName.get(name) || null
        }
        GetTextureFillShaderProgram() {
            return this._spTextureFill
        }
        SetTextureFillMode() {
            this.SetProgram(this._spTextureFill)
        }
        GetPointsRenderingProgram() {
            return this._spPoints
        }
        SetPointsRenderingProgram() {
            this.SetProgram(this._spPoints)
        }
        SetTilemapFillMode() {
            this.SetProgram(this._spTilemapFill)
        }
        SetTileRandomizationMode() {
            this.SetProgram(this._spTileRandomization)
        }
        SetColorFillMode() {
            this.SetProgram(this._spColorFill)
        }
        SetLinearGradientFillMode() {
            this.SetProgram(this._spLinearGradientFill)
        }
        SetPenumbraFillMode() {
            this.SetProgram(this._spPenumbraFill)
        }
        SetHardEllipseFillMode() {
            this.SetProgram(this._spHardEllipseFill)
        }
        SetHardEllipseOutlineMode() {
            this.SetProgram(this._spHardEllipseOutline)
        }
        SetSmoothEllipseFillMode() {
            this.SetProgram(this._spSmoothEllipseFill)
        }
        SetSmoothEllipseOutlineMode() {
            this.SetProgram(this._spSmoothEllipseOutline)
        }
        SetSmoothLineFillMode() {
            this.SetProgram(this._spSmoothLineFill)
        }
        _SetCurrentStateGroup(sg) {
            this._currentStateGroup =
                sg
        }
        GetCurrentStateGroup() {
            return this._currentStateGroup
        }
        AcquireStateGroup(shaderProgram_or_name, blendMode, color, zElevation) {
            const key = C3.Gfx.StateGroup.MakeKey(shaderProgram_or_name, blendMode, color, zElevation);
            let stateGroup = this._stateGroups.get(key);
            if (!stateGroup) {
                stateGroup = C3.New(C3.Gfx.StateGroup, this, shaderProgram_or_name, blendMode, color, zElevation);
                this._stateGroups.set(key, stateGroup)
            }
            stateGroup.AddRef();
            return stateGroup
        }
        ReleaseStateGroup(stateGroup) {
            stateGroup.DecRef();
            if (stateGroup._GetRefCount() ===
                0) {
                if (this._currentStateGroup === stateGroup) this._currentStateGroup = null;
                this._stateGroups.delete(stateGroup.GetKey());
                stateGroup.Release()
            }
        }
        _InitBlendModeData(blendModeData) {
            C3.clearArray(this._blendModeTable);
            this._namedBlendModeMap.clear();
            let number = 0;
            for (const bmd of blendModeData) {
                const name = bmd[0];
                const srcBlend = bmd[1];
                const destBlend = bmd[2];
                this._blendModeTable.push([srcBlend, destBlend]);
                this._namedBlendModeMap.set(name, {
                    number,
                    srcBlend,
                    destBlend
                });
                number++
            }
        }
        _GetBlendByIndex(blendIndex) {
            return this._blendModeTable[blendIndex]
        }
        GetSrcBlendByIndex(blendIndex) {
            return this._GetBlendByIndex(blendIndex)[0]
        }
        GetDestBlendByIndex(blendIndex) {
            return this._GetBlendByIndex(blendIndex)[1]
        }
        GetNamedBlend(blendName) {
            const ret =
                this._namedBlendModeMap.get(blendName);
            if (typeof ret === "undefined") throw new Error("invalid blend name");
            return ret
        }
        NamedBlendToNumber(blendName) {
            const ret = this._namedBlendModeMap.get(blendName);
            if (typeof ret === "undefined") throw new Error("invalid blend name");
            return ret.number
        }
        SetBaseZ(z) {
            this._baseZ = z
        }
        GetBaseZ() {
            return this._baseZ
        }
        SetCurrentZ(z) {
            this._currentZ = z;
            this._currentStateGroup = null
        }
        GetCurrentZ() {
            return this._currentZ
        }
        Line(x1, y1, x2, y2) {
            const a = C3.angleTo(x1, y1, x2, y2);
            const sin_a = Math.sin(a);
            const cos_a = Math.cos(a);
            const halfLineWidth = this._lineWidth * .5;
            const sin_a_hlw = sin_a * halfLineWidth;
            const cos_a_hlw = cos_a * halfLineWidth;
            const lineCap = this._lineCap;
            if (lineCap === 2) this.LinePreCalc_LineCap2(x1, y1, 0, x2, y2, 0, sin_a_hlw, cos_a_hlw);
            else if (lineCap === 1) this.LinePreCalc_LineCap1(x1, y1, 0, x2, y2, 0, sin_a_hlw, cos_a_hlw);
            else this.LinePreCalc_LineCap0(x1, y1, 0, x2, y2, 0, sin_a_hlw, cos_a_hlw)
        }
        Line3D(x1, y1, z1, x2, y2, z2) {
            const a = C3.angleTo(x1, y1, x2, y2);
            const sin_a = Math.sin(a);
            const cos_a = Math.cos(a);
            const halfLineWidth =
                this._lineWidth * .5;
            const sin_a_hlw = sin_a * halfLineWidth;
            const cos_a_hlw = cos_a * halfLineWidth;
            const lineCap = this._lineCap;
            if (lineCap === 2) this.LinePreCalc_LineCap2(x1, y1, z1, x2, y2, z2, sin_a_hlw, cos_a_hlw);
            else if (lineCap === 1) this.LinePreCalc_LineCap1(x1, y1, z1, x2, y2, z2, sin_a_hlw, cos_a_hlw);
            else this.LinePreCalc_LineCap0(x1, y1, z1, x2, y2, z2, sin_a_hlw, cos_a_hlw)
        }
        LinePreCalc_LineCap2(x1, y1, z1, x2, y2, z2, sin_a_hlw, cos_a_hlw) {
            const lineOffset = this._lineOffset;
            const startX = x1 + lineOffset - cos_a_hlw;
            const startY = y1 +
                lineOffset - sin_a_hlw;
            const endX = x2 + lineOffset + cos_a_hlw;
            const endY = y2 + lineOffset + sin_a_hlw;
            const cos_a_lw = cos_a_hlw * 2;
            const sin_a_lw = sin_a_hlw * 2;
            const tlx = startX + sin_a_hlw;
            const tly = startY - cos_a_hlw;
            const blx = startX - sin_a_hlw + cos_a_lw;
            const bly = startY + cos_a_hlw + sin_a_lw;
            const trx = endX + sin_a_hlw;
            const try_ = endY - cos_a_hlw;
            const brx = endX - sin_a_hlw - cos_a_lw;
            const bry = endY + cos_a_hlw - sin_a_lw;
            this.Quad3D2(tlx, tly, z1, trx, try_, z2, brx, bry, z2, blx, bly, z1, defaultTexCoordsQuad)
        }
        LinePreCalc_LineCap1(x1, y1, z1, x2,
            y2, z2, sin_a_hlw, cos_a_hlw) {
            const lineOffset = this._lineOffset;
            const startX = x1 + lineOffset - cos_a_hlw;
            const startY = y1 + lineOffset - sin_a_hlw;
            const endX = x2 + lineOffset + cos_a_hlw;
            const endY = y2 + lineOffset + sin_a_hlw;
            const tlx = startX + sin_a_hlw;
            const tly = startY - cos_a_hlw;
            const blx = startX - sin_a_hlw;
            const bly = startY + cos_a_hlw;
            const trx = endX + sin_a_hlw;
            const try_ = endY - cos_a_hlw;
            const brx = endX - sin_a_hlw;
            const bry = endY + cos_a_hlw;
            this.Quad3D2(tlx, tly, z1, trx, try_, z2, brx, bry, z2, blx, bly, z1, defaultTexCoordsQuad)
        }
        LinePreCalc_LineCap0(x1,
            y1, z1, x2, y2, z2, sin_a_hlw, cos_a_hlw) {
            const lineOffset = this._lineOffset;
            const startX = x1 + lineOffset;
            const startY = y1 + lineOffset;
            const endX = x2 + lineOffset;
            const endY = y2 + lineOffset;
            const tlx = startX + sin_a_hlw;
            const tly = startY - cos_a_hlw;
            const blx = startX - sin_a_hlw;
            const bly = startY + cos_a_hlw;
            const trx = endX + sin_a_hlw;
            const try_ = endY - cos_a_hlw;
            const brx = endX - sin_a_hlw;
            const bry = endY + cos_a_hlw;
            this.Quad3D2(tlx, tly, z1, trx, try_, z2, brx, bry, z2, blx, bly, z1, defaultTexCoordsQuad)
        }
        TexturedLine(x1, y1, x2, y2, u, v) {
            const a =
                C3.angleTo(x1, y1, x2, y2);
            const sin_a = Math.sin(a);
            const cos_a = Math.cos(a);
            const halfLineWidth = this._lineWidth * .5;
            const sin_a_hlw = sin_a * halfLineWidth;
            const cos_a_hlw = cos_a * halfLineWidth;
            const lineCap = this._lineCap;
            if (lineCap === 2) this.TexturedLinePreCalc_LineCap2(x1, y1, x2, y2, sin_a_hlw, cos_a_hlw, u, v);
            else if (lineCap === 1) this.TexturedLinePreCalc_LineCap1(x1, y1, x2, y2, sin_a_hlw, cos_a_hlw, u, v);
            else this.TexturedLinePreCalc_LineCap0(x1, y1, x2, y2, sin_a_hlw, cos_a_hlw, u, v)
        }
        TexturedLinePreCalc_LineCap2(x1, y1, x2,
            y2, sin_a_hlw, cos_a_hlw, u, v) {
            const lineOffset = this._lineOffset;
            const startX = x1 + lineOffset - cos_a_hlw;
            const startY = y1 + lineOffset - sin_a_hlw;
            const endX = x2 + lineOffset + cos_a_hlw;
            const endY = y2 + lineOffset + sin_a_hlw;
            const cos_a_lw = cos_a_hlw * 2;
            const sin_a_lw = sin_a_hlw * 2;
            const tlx = startX + sin_a_hlw;
            const tly = startY - cos_a_hlw;
            const blx = startX - sin_a_hlw + cos_a_lw;
            const bly = startY + cos_a_hlw + sin_a_lw;
            const trx = endX + sin_a_hlw;
            const try_ = endY - cos_a_hlw;
            const brx = endX - sin_a_hlw - cos_a_lw;
            const bry = endY + cos_a_hlw - sin_a_lw;
            tmpQuad.set(tlx, tly, trx, try_, brx, bry, blx, bly);
            tmpRect.set(u, 0, v, 0);
            this.Quad3(tmpQuad, tmpRect)
        }
        TexturedLinePreCalc_LineCap1(x1, y1, x2, y2, sin_a_hlw, cos_a_hlw, u, v) {
            const lineOffset = this._lineOffset;
            const startX = x1 + lineOffset - cos_a_hlw;
            const startY = y1 + lineOffset - sin_a_hlw;
            const endX = x2 + lineOffset + cos_a_hlw;
            const endY = y2 + lineOffset + sin_a_hlw;
            const tlx = startX + sin_a_hlw;
            const tly = startY - cos_a_hlw;
            const blx = startX - sin_a_hlw;
            const bly = startY + cos_a_hlw;
            const trx = endX + sin_a_hlw;
            const try_ = endY - cos_a_hlw;
            const brx =
                endX - sin_a_hlw;
            const bry = endY + cos_a_hlw;
            tmpQuad.set(tlx, tly, trx, try_, brx, bry, blx, bly);
            tmpRect.set(u, 0, v, 0);
            this.Quad3(tmpQuad, tmpRect)
        }
        TexturedLinePreCalc_LineCap0(x1, y1, x2, y2, sin_a_hlw, cos_a_hlw, u, v) {
            const lineOffset = this._lineOffset;
            const startX = x1 + lineOffset;
            const startY = y1 + lineOffset;
            const endX = x2 + lineOffset;
            const endY = y2 + lineOffset;
            const tlx = startX + sin_a_hlw;
            const tly = startY - cos_a_hlw;
            const blx = startX - sin_a_hlw;
            const bly = startY + cos_a_hlw;
            const trx = endX + sin_a_hlw;
            const try_ = endY - cos_a_hlw;
            const brx =
                endX - sin_a_hlw;
            const bry = endY + cos_a_hlw;
            tmpQuad.set(tlx, tly, trx, try_, brx, bry, blx, bly);
            tmpRect.set(u, 0, v, 0);
            this.Quad3(tmpQuad, tmpRect)
        }
        LineRect(left, top, right, bottom) {
            const halfLineWidth = this._lineWidth * .5;
            const lineCap = this._lineCap;
            if (lineCap === 2) this._LineRectPreCalc_LineCap2(left, top, right, bottom, halfLineWidth);
            else if (lineCap === 1) this._LineRectPreCalc_LineCap1(left, top, right, bottom, halfLineWidth);
            else this._LineRectPreCalc_LineCap0(left, top, right, bottom, halfLineWidth)
        }
        _LineRectPreCalc_LineCap2(left,
            top, right, bottom, halfLineWidth) {
            this.LinePreCalc_LineCap2(left, top, 0, right, top, 0, 0, halfLineWidth);
            this.LinePreCalc_LineCap2(right, top, 0, right, bottom, 0, halfLineWidth, 0);
            this.LinePreCalc_LineCap2(right, bottom, 0, left, bottom, 0, 0, -halfLineWidth);
            this.LinePreCalc_LineCap2(left, bottom, 0, left, top, 0, -halfLineWidth, 0)
        }
        _LineRectPreCalc_LineCap1(left, top, right, bottom, halfLineWidth) {
            this.LinePreCalc_LineCap1(left, top, 0, right, top, 0, 0, halfLineWidth);
            this.LinePreCalc_LineCap1(right, top, 0, right, bottom, 0, halfLineWidth,
                0);
            this.LinePreCalc_LineCap1(right, bottom, 0, left, bottom, 0, 0, -halfLineWidth);
            this.LinePreCalc_LineCap1(left, bottom, 0, left, top, 0, -halfLineWidth, 0)
        }
        _LineRectPreCalc_LineCap0(left, top, right, bottom, halfLineWidth) {
            this.LinePreCalc_LineCap0(left, top, 0, right, top, 0, 0, halfLineWidth);
            this.LinePreCalc_LineCap0(right, top, 0, right, bottom, 0, halfLineWidth, 0);
            this.LinePreCalc_LineCap0(right, bottom, 0, left, bottom, 0, 0, -halfLineWidth);
            this.LinePreCalc_LineCap0(left, bottom, 0, left, top, 0, -halfLineWidth, 0)
        }
        LineRect2(r) {
            this.LineRect(r.getLeft(),
                r.getTop(), r.getRight(), r.getBottom())
        }
        LineQuad(q) {
            const a = C3.angleTo(q.getTlx(), q.getTly(), q.getTrx(), q.getTry());
            const sin_a = Math.sin(a);
            const cos_a = Math.cos(a);
            const halfLineWidth = this._lineWidth * .5;
            const sin_a_hlw = sin_a * halfLineWidth;
            const cos_a_hlw = cos_a * halfLineWidth;
            const lineCap = this._lineCap;
            if (lineCap === 2) this._LineQuadPreCalc_LineCap2(q, sin_a_hlw, cos_a_hlw);
            else if (lineCap === 1) this._LineQuadPreCalc_LineCap1(q, sin_a_hlw, cos_a_hlw);
            else this._LineQuadPreCalc_LineCap0(q, sin_a_hlw, cos_a_hlw)
        }
        _LineQuadPreCalc_LineCap2(q,
            sin_a_hlw, cos_a_hlw) {
            this.LinePreCalc_LineCap2(q.getTlx(), q.getTly(), 0, q.getTrx(), q.getTry(), 0, sin_a_hlw, cos_a_hlw);
            this.LinePreCalc_LineCap2(q.getTrx(), q.getTry(), 0, q.getBrx(), q.getBry(), 0, cos_a_hlw, -sin_a_hlw);
            this.LinePreCalc_LineCap2(q.getBrx(), q.getBry(), 0, q.getBlx(), q.getBly(), 0, -sin_a_hlw, -cos_a_hlw);
            this.LinePreCalc_LineCap2(q.getBlx(), q.getBly(), 0, q.getTlx(), q.getTly(), 0, -cos_a_hlw, sin_a_hlw)
        }
        _LineQuadPreCalc_LineCap1(q, sin_a_hlw, cos_a_hlw) {
            this.LinePreCalc_LineCap1(q.getTlx(), q.getTly(),
                0, q.getTrx(), q.getTry(), 0, sin_a_hlw, cos_a_hlw);
            this.LinePreCalc_LineCap1(q.getTrx(), q.getTry(), 0, q.getBrx(), q.getBry(), 0, cos_a_hlw, -sin_a_hlw);
            this.LinePreCalc_LineCap1(q.getBrx(), q.getBry(), 0, q.getBlx(), q.getBly(), 0, -sin_a_hlw, -cos_a_hlw);
            this.LinePreCalc_LineCap1(q.getBlx(), q.getBly(), 0, q.getTlx(), q.getTly(), 0, -cos_a_hlw, sin_a_hlw)
        }
        _LineQuadPreCalc_LineCap0(q, sin_a_hlw, cos_a_hlw) {
            this.LinePreCalc_LineCap0(q.getTlx(), q.getTly(), 0, q.getTrx(), q.getTry(), 0, sin_a_hlw, cos_a_hlw);
            this.LinePreCalc_LineCap0(q.getTrx(),
                q.getTry(), 0, q.getBrx(), q.getBry(), 0, cos_a_hlw, -sin_a_hlw);
            this.LinePreCalc_LineCap0(q.getBrx(), q.getBry(), 0, q.getBlx(), q.getBly(), 0, -sin_a_hlw, -cos_a_hlw);
            this.LinePreCalc_LineCap0(q.getBlx(), q.getBly(), 0, q.getTlx(), q.getTly(), 0, -cos_a_hlw, sin_a_hlw)
        }
        SetLineWidth(n) {
            this._lineWidth = n;
            this._lineWidthStack[this._lineWidthStack.length - 1] = n
        }
        GetLineWidth() {
            return this._lineWidth
        }
        PushLineWidth(n) {
            if (this._lineWidthStack.length >= 100) throw new Error("pushed too many line widths - check push/pop pairs");
            this._lineWidthStack.push(n);
            this._lineWidth = n
        }
        PopLineWidth() {
            if (this._lineWidthStack.length <= 1) throw new Error("cannot pop last line width - check push/pop pairs");
            this._lineWidthStack.pop();
            this._lineWidth = this._lineWidthStack.at(-1)
        }
        SetLineCapButt() {
            this._lineCap = 0;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        SetLineCapSquare() {
            this._lineCap = 1;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        SetLineCapZag() {
            this._lineCap = 2;
            this._lineCapStack[this._lineCapStack.length - 1] = 0
        }
        PushLineCap(type) {
            if (type ===
                "butt") this.PushLineCapButt();
            else if (type === "square") this.PushLineCapSquare();
            else if (type === "zag") this.PushLineCapZag();
            else throw new Error("invalid line cap");
        }
        PushLineCapButt() {
            if (this._lineCapStack.length >= 100) throw new Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(0);
            this._lineCap = 0
        }
        PushLineCapSquare() {
            if (this._lineCapStack.length >= 100) throw new Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(1);
            this._lineCap = 1
        }
        PushLineCapZag() {
            if (this._lineCapStack.length >=
                100) throw new Error("pushed too many line caps - check push/pop pairs");
            this._lineCapStack.push(2);
            this._lineCap = 2
        }
        PopLineCap() {
            if (this._lineCapStack.length <= 1) throw new Error("cannot pop last line cap - check push/pop pairs");
            this._lineCapStack.pop();
            this._lineCap = this._lineCapStack.at(-1)
        }
        SetLineOffset(n) {
            this._lineOffset = n;
            this._lineOffsetStack[this._lineOffsetStack.length - 1] = n
        }
        GetLineOffset() {
            return this._lineOffset
        }
        PushLineOffset(n) {
            if (this._lineOffsetStack.length >= 100) throw new Error("pushed too many line offsets - check push/pop pairs");
            this._lineOffsetStack.push(n);
            this._lineOffset = n
        }
        PopLineOffset() {
            if (this._lineOffsetStack.length <= 1) throw new Error("cannot pop last line offset - check push/pop pairs");
            this._lineOffsetStack.pop();
            this._lineOffset = this._lineOffsetStack.at(-1)
        }
        ConvexPoly(pts) {
            const pts_count = pts.length / 2;
            if (pts_count < 3) throw new Error("need at least 3 points");
            const tris = pts_count - 2;
            const last_tri = tris - 1;
            const p0x = pts[0];
            const p0y = pts[1];
            for (let i = 0; i < tris; i += 2) {
                const i2 = i * 2;
                const p1x = pts[i2 + 2];
                const p1y = pts[i2 + 3];
                const p2x = pts[i2 + 4];
                const p2y = pts[i2 + 5];
                if (i === last_tri) this.Quad2(p0x, p0y, p1x, p1y, p2x, p2y, p2x, p2y);
                else {
                    const p3x = pts[i2 + 6];
                    const p3y = pts[i2 + 7];
                    this.Quad2(p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y)
                }
            }
        }
        GetNumVertexComponents() {
            return 3
        }
        Finish() {
            this.EndBatch(true);
            this._frameNumber++
        }
        GetFrameNumber() {
            return this._frameNumber
        }
        IncrementFrameNumber() {
            this._frameNumber++
        }
        SetMipmapsEnabled(e) {
            this._enableMipmaps = !!e
        }
        AreMipmapsEnabled() {
            return this._enableMipmaps
        }
        SetHasMajorPerformanceCaveat(c) {
            this._hasMajorPerformanceCaveat = !!c
        }
        HasMajorPerformanceCaveat() {
            return this._hasMajorPerformanceCaveat
        }
        IsWebGL() {
            return false
        }
        IsWebGPU() {
            return false
        }
    };

}

// ../lib/gfx/shaderProgramBase.js
{
    'use strict';
    const C3 = self.C3;
    C3.Gfx.ShaderProgramBase = class ShaderProgramBase {
        constructor(renderer, shaderInfo) {
            this._name = shaderInfo.name;
            this._renderer = renderer;
            this._extendBoxHorizontal = shaderInfo.extendBoxHorizontal || 0;
            this._extendBoxVertical = shaderInfo.extendBoxVertical || 0;
            this._crossSampling = !!shaderInfo.crossSampling;
            this._mustPreDraw = !!shaderInfo.mustPreDraw;
            this._preservesOpaqueness = !!shaderInfo.preservesOpaqueness;
            this._animated = !!shaderInfo.animated;
            this._blendsBackground = !!shaderInfo.blendsBackground;
            this._usesDepth = !!shaderInfo.usesDepth;
            this._usesAnySrcRectOrPixelSize = false;
            this._needsPostDrawOrExtendBox = this._crossSampling || this._blendsBackground || this._extendBoxHorizontal !== 0 || this._extendBoxVertical !== 0
        }
        Release() {
            this._renderer = null
        }
        GetRenderer() {
            return this._renderer
        }
        GetName() {
            return this._name
        }
        ExtendsBox() {
            return this._extendBoxHorizontal !== 0 || this._extendBoxVertical !== 0
        }
        GetBoxExtendHorizontal() {
            return this._extendBoxHorizontal
        }
        GetBoxExtendVertical() {
            return this._extendBoxVertical
        }
        UsesCrossSampling() {
            return this._crossSampling
        }
        MustPreDraw() {
            return this._mustPreDraw
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        IsAnimated() {
            return this._animated
        }
        BlendsBackground() {
            return this._blendsBackground
        }
        UsesDepth() {
            return this._usesDepth
        }
        UsesAnySrcRectOrPixelSize() {
            return this._usesAnySrcRectOrPixelSize
        }
        NeedsPostDrawOrExtendsBox() {
            return this._needsPostDrawOrExtendBox
        }
        UsesIsSrcTexRotated() {
            return false
        }
    };

}

// ../lib/gfx/stateGroup.js
{
    'use strict';
    const C3 = self.C3;
    C3.Gfx.StateGroup = class StateGroup {
        constructor(renderer, shaderProgram_or_name, blendMode, color, zElevation) {
            this._renderer = renderer;
            this._refCount = 0;
            this._shaderProgram = null;
            this._shaderProgramName = "";
            this._blendMode = blendMode;
            this._color = C3.New(C3.Color);
            this._color.set(color);
            this._zElevation = zElevation;
            if (typeof shaderProgram_or_name === "string") this._shaderProgramName = shaderProgram_or_name;
            else {
                this._shaderProgram = shaderProgram_or_name;
                this._shaderProgramName = this._shaderProgram.GetName()
            }
        }
        Release() {
            if (this._refCount > 0) throw new Error("releasing state group still in use");
            this._renderer = null;
            this._shaderProgram = null;
            this._shaderProgramName = ""
        }
        Apply() {
            const renderer = this._renderer;
            renderer.SetProgram(this._shaderProgram);
            renderer.SetBlendMode(this._blendMode);
            renderer.SetColor(this._color);
            renderer.SetCurrentZ(this._zElevation);
            renderer._SetCurrentStateGroup(this)
        }
        GetKey() {
            return C3.Gfx.StateGroup.MakeKey(this._shaderProgramName, this._blendMode, this._color, this._zElevation)
        }
        AddRef() {
            ++this._refCount
        }
        DecRef() {
            --this._refCount
        }
        _GetRefCount() {
            return this._refCount
        }
        OnContextLost() {
            this._shaderProgram =
                null
        }
        OnContextRestored(renderer) {
            this._shaderProgram = renderer.GetShaderProgramByName(this._shaderProgramName);
            if (!this._shaderProgram) throw new Error("failed to restore shader program");
        }
        static MakeKey(shaderProgram_or_name, blendMode, c, zElevation) {
            const shaderProgramName = typeof shaderProgram_or_name === "string" ? shaderProgram_or_name : shaderProgram_or_name.GetName();
            return shaderProgramName + "," + blendMode + "," + c.getR() + "," + c.getG() + "," + c.getB() + "," + c.getA() + "," + zElevation
        }
    };

}

// ../lib/gfx/mesh.js
{
    'use strict';
    const C3 = self.C3;
    const tempQuadTex = C3.New(C3.Quad);

    function interpolateQuad(srcX, srcY, quad) {
        const qtlx = quad.getTlx();
        const qtly = quad.getTly();
        const qtrx = quad.getTrx() - qtlx;
        const qtry = quad.getTry() - qtly;
        const qblx = quad.getBlx() - qtlx;
        const qbly = quad.getBly() - qtly;
        const xix = qtrx * srcX;
        const xiy = qtry * srcX;
        const yix = qblx * srcY;
        const yiy = qbly * srcY;
        return [qtlx + xix + yix, qtly + xiy + yiy]
    }
    C3.Gfx.MeshPoint = class MeshPoint {
        constructor(mesh, col, row) {
            this._mesh = mesh;
            this._col = col;
            this._row = row;
            this._x = NaN;
            this._y = NaN;
            this._zElevation = NaN;
            this._u = NaN;
            this._v = NaN;
            this._x = 0;
            this._y = 0;
            this._zElevation = 0;
            this._u = 0;
            this._v = 0
        }
        _Init(x, y, u, v) {
            this._x = x;
            this._y = y;
            this._u = u;
            this._v = v
        }
        GetX() {
            return this._x
        }
        SetX(x) {
            if (this._x === x) return;
            this._x = x;
            this._mesh._SetPointsChanged()
        }
        GetY() {
            return this._y
        }
        SetY(y) {
            if (this._y === y) return;
            this._y = y;
            this._mesh._SetPointsChanged()
        }
        GetZElevation() {
            return this._zElevation
        }
        SetZElevation(z) {
            if (this._zElevation ===
                z) return;
            this._zElevation = Math.max(z, 0);
            this._mesh._SetPointsChanged()
        }
        GetU() {
            return this._u
        }
        SetU(u) {
            this._u = u
        }
        GetV() {
            return this._v
        }
        SetV(v) {
            this._v = v
        }
        _Interpolate_TexRect(srcPoint, quadPos, rcTex) {
            [this._x, this._y] = interpolateQuad(srcPoint._x, srcPoint._y, quadPos);
            this._zElevation = srcPoint._zElevation;
            this._u = C3.lerp(rcTex.getLeft(), rcTex.getRight(), srcPoint._u);
            this._v = C3.lerp(rcTex.getTop(), rcTex.getBottom(), srcPoint._v)
        }
        _Interpolate_TexQuad(srcPoint, quadPos, quadTex) {
            [this._x, this._y] = interpolateQuad(srcPoint._x,
                srcPoint._y, quadPos);
            this._zElevation = srcPoint._zElevation;
            [this._u, this._v] = interpolateQuad(srcPoint._u, srcPoint._v, quadTex)
        }
        SaveToJson() {
            return {
                "x": this.GetX(),
                "y": this.GetY(),
                "z": this.GetZElevation(),
                "u": this.GetU(),
                "v": this.GetV()
            }
        }
        LoadFromJson(o) {
            this.SetX(o["x"]);
            this.SetY(o["y"]);
            if (o.hasOwnProperty("z")) this.SetZElevation(o["z"]);
            this.SetU(o["u"]);
            this.SetV(o["v"])
        }
        GetMesh() {
            return this._mesh
        }
        GetColumn() {
            return this._col
        }
        GetRow() {
            return this._row
        }
    };
    C3.Gfx.Mesh = class Mesh {
        constructor(hsize, vsize, owner) {
            if (hsize < 2 || vsize < 2) throw new Error("invalid mesh size");
            this._hsize = hsize;
            this._vsize = vsize;
            this._owner = owner || null;
            this._pts = [];
            this._minX = 0;
            this._minY = 0;
            this._maxX = 1;
            this._maxY = 1;
            this._maxZ = 0;
            this._pointsChanged = false;
            const lastX = hsize - 1;
            const lastY = vsize - 1;
            for (let y = 0; y < vsize; ++y) {
                const row = [];
                for (let x = 0; x < hsize; ++x) {
                    const meshPoint = C3.New(C3.Gfx.MeshPoint, this, x, y);
                    const xf = x / lastX;
                    const yf = y / lastY;
                    meshPoint._Init(xf, yf, xf, yf);
                    row.push(meshPoint)
                }
                this._pts.push(row)
            }
        }
        Release() {
            C3.clearArray(this._pts)
        }
        GetHSize() {
            return this._hsize
        }
        GetVSize() {
            return this._vsize
        }
        GetOwner() {
            return this._owner
        }
        _GetPoints() {
            return this._pts
        }
        _SetPointsChanged() {
            this._pointsChanged =
                true
        }
        _MaybeComputeBounds() {
            if (!this._pointsChanged) return;
            let minX = Infinity;
            let minY = Infinity;
            let maxX = -Infinity;
            let maxY = -Infinity;
            let maxZ = 0;
            for (const row of this._pts)
                for (const meshPoint of row) {
                    const x = meshPoint.GetX();
                    const y = meshPoint.GetY();
                    minX = Math.min(minX, x);
                    minY = Math.min(minY, y);
                    maxX = Math.max(maxX, x);
                    maxY = Math.max(maxY, y);
                    maxZ = Math.max(maxZ, meshPoint.GetZElevation())
                }
            this._minX = minX;
            this._minY = minY;
            this._maxX = maxX;
            this._maxY = maxY;
            this._maxZ = maxZ;
            this._pointsChanged = false
        }
        GetMinX() {
            this._MaybeComputeBounds();
            return this._minX
        }
        GetMinY() {
            this._MaybeComputeBounds();
            return this._minY
        }
        GetMaxX() {
            this._MaybeComputeBounds();
            return this._maxX
        }
        GetMaxY() {
            this._MaybeComputeBounds();
            return this._maxY
        }
        GetMaxZ() {
            this._MaybeComputeBounds();
            return this._maxZ
        }
        HasAnyZElevation() {
            return this.GetMaxZ() > 0
        }
        GetMeshPointAt(x, y) {
            x = Math.floor(x);
            y = Math.floor(y);
            if (x < 0 || x >= this._hsize || y < 0 || y >= this._vsize) return null;
            return this._pts[y][x]
        }
        CalculateTransformedMesh(srcMesh, quadPos, rcTex_or_quad) {
            const isTexRect = rcTex_or_quad instanceof
            C3.Rect;
            if (srcMesh.GetHSize() !== this.GetHSize() || srcMesh.GetVSize() !== this.GetVSize()) throw new Error("source mesh wrong size");
            const srcPts = srcMesh._pts;
            const destPts = this._pts;
            for (let y = 0, lenY = destPts.length; y < lenY; ++y) {
                const srcRow = srcPts[y];
                const destRow = destPts[y];
                for (let x = 0, lenX = destRow.length; x < lenX; ++x) {
                    const srcPoint = srcRow[x];
                    const destPoint = destRow[x];
                    if (isTexRect) destPoint._Interpolate_TexRect(srcPoint, quadPos, rcTex_or_quad);
                    else destPoint._Interpolate_TexQuad(srcPoint, quadPos, rcTex_or_quad)
                }
            }
        }
        Draw(renderer) {
            const pts =
                this._pts;
            let prevRow = pts[0];
            for (let y = 1, lenY = pts.length; y < lenY; ++y) {
                const row = pts[y];
                let tl = prevRow[0];
                let bl = row[0];
                for (let x = 1, lenX = row.length; x < lenX; ++x) {
                    const tr = prevRow[x];
                    const br = row[x];
                    tempQuadTex.set(tl.GetU(), tl.GetV(), tr.GetU(), tr.GetV(), br.GetU(), br.GetV(), bl.GetU(), bl.GetV());
                    renderer.Quad3D2(tl.GetX(), tl.GetY(), tl.GetZElevation(), tr.GetX(), tr.GetY(), tr.GetZElevation(), br.GetX(), br.GetY(), br.GetZElevation(), bl.GetX(), bl.GetY(), bl.GetZElevation(), tempQuadTex);
                    tl = tr;
                    bl = br
                }
                prevRow = row
            }
        }
        Outline(renderer,
            transformFunc) {
            if (!transformFunc) transformFunc = (x, y, z) => [x, y, z];
            const pts = this._pts;
            let prevRow = pts[0];
            for (let y = 1, lenY = pts.length; y < lenY; ++y) {
                const row = pts[y];
                let tl = prevRow[0];
                let bl = row[0];
                for (let x = 1, lenX = row.length; x < lenX; ++x) {
                    const tr = prevRow[x];
                    const br = row[x];
                    const [tlx, tly, tlz] = transformFunc(tl.GetX(), tl.GetY(), tl.GetZElevation());
                    const [trx, try_, trz] = transformFunc(tr.GetX(), tr.GetY(), tr.GetZElevation());
                    const [brx, bry, brz] = transformFunc(br.GetX(), br.GetY(), br.GetZElevation());
                    const [blx,
                        bly, blz
                    ] = transformFunc(bl.GetX(), bl.GetY(), bl.GetZElevation());
                    renderer.Line3D(tlx, tly, tlz, trx, try_, trz);
                    renderer.Line3D(tlx, tly, tlz, brx, bry, brz);
                    renderer.Line3D(tlx, tly, tlz, blx, bly, blz);
                    if (x === lenX - 1) renderer.Line3D(trx, try_, trz, brx, bry, brz);
                    if (y === lenY - 1) renderer.Line3D(blx, bly, blz, brx, bry, brz);
                    tl = tr;
                    bl = br
                }
                prevRow = row
            }
        }
        InsertPolyMeshVertices(srcPoly) {
            const RAY_EXT_DIST = .001;
            const MIN_RAY_DIST = 0;
            const MAX_RAY_DIST = .99999999;
            const inPts = srcPoly.pointsArr();
            const outPts = [];
            const colCount = this.GetHSize() -
                1;
            const rowCount = this.GetVSize() - 1;
            const colWidthNorm = 1 / colCount;
            const rowHeightNorm = 1 / rowCount;
            const lastCol = colCount - 1;
            const lastRow = rowCount - 1;
            let curX = inPts[0];
            let curY = inPts[1];
            let curCol = C3.clamp(Math.floor(curX * colCount), 0, lastCol);
            let curRow = C3.clamp(Math.floor(curY * rowCount), 0, lastRow);
            let isUpper = true;
            let nextX = 0;
            let nextY = 0;
            let rayHit = 0;
            const NOTHING_DISABLED = -1;
            const DISABLE_DIAGONAL = 0;
            const DISABLE_LEFT_EDGE = 1;
            const DISABLE_TOP_EDGE = 2;
            const DISABLE_RIGHT_EDGE = 3;
            const DISABLE_BOTTOM_EDGE =
                4;
            let disableCheck = NOTHING_DISABLED;
            const addVertexAtRayHit = () => {
                curX = C3.clamp(C3.lerp(curX, nextX, rayHit), 0, 1);
                curY = C3.clamp(C3.lerp(curY, nextY, rayHit), 0, 1);
                outPts.push(curX, curY)
            };
            for (let i = 0, len = inPts.length; i < len; i += 2) {
                curX = inPts[i];
                curY = inPts[i + 1];
                outPts.push(curX, curY);
                curCol = C3.clamp(Math.floor(curX * colCount), 0, lastCol);
                curRow = C3.clamp(Math.floor(curY * rowCount), 0, lastRow);
                const j = (i + 2) % len;
                nextX = inPts[j];
                nextY = inPts[j + 1];
                disableCheck = NOTHING_DISABLED;
                while (true) {
                    if (outPts.length > 1E6) throw new Error("Too many mesh poly points");
                    const srcTlx = curCol * colWidthNorm;
                    const srcTly = curRow * rowHeightNorm;
                    const srcBrx = (curCol + 1) * colWidthNorm;
                    const srcBry = (curRow + 1) * rowHeightNorm;
                    isUpper = C3.isPointInTriangleInclusive(curX, curY, srcTlx, srcTly, srcBrx, srcTly, srcBrx, srcBry);
                    if (disableCheck !== DISABLE_DIAGONAL) {
                        rayHit = C3.rayIntersectExtended(curX, curY, nextX, nextY, srcTlx, srcTly, srcBrx, srcBry, -RAY_EXT_DIST);
                        if (rayHit >= MIN_RAY_DIST && rayHit <= MAX_RAY_DIST) {
                            addVertexAtRayHit();
                            isUpper = !isUpper;
                            disableCheck = DISABLE_DIAGONAL;
                            continue
                        }
                    }
                    if (curRow > 0 &&
                        disableCheck !== DISABLE_TOP_EDGE) {
                        rayHit = C3.rayIntersectExtended(curX, curY, nextX, nextY, srcTlx, srcTly, srcBrx, srcTly, RAY_EXT_DIST);
                        if (rayHit >= MIN_RAY_DIST && rayHit <= MAX_RAY_DIST) {
                            addVertexAtRayHit();
                            curRow--;
                            isUpper = false;
                            disableCheck = DISABLE_BOTTOM_EDGE;
                            continue
                        }
                    }
                    if (curCol < lastCol && disableCheck !== DISABLE_RIGHT_EDGE) {
                        rayHit = C3.rayIntersectExtended(curX, curY, nextX, nextY, srcBrx, srcTly, srcBrx, srcBry, RAY_EXT_DIST);
                        if (rayHit >= MIN_RAY_DIST && rayHit <= MAX_RAY_DIST) {
                            addVertexAtRayHit();
                            curCol++;
                            isUpper = false;
                            disableCheck =
                                DISABLE_LEFT_EDGE;
                            continue
                        }
                    }
                    if (curCol > 0 && disableCheck !== DISABLE_LEFT_EDGE) {
                        rayHit = C3.rayIntersectExtended(curX, curY, nextX, nextY, srcTlx, srcTly, srcTlx, srcBry, RAY_EXT_DIST);
                        if (rayHit >= MIN_RAY_DIST && rayHit <= MAX_RAY_DIST) {
                            addVertexAtRayHit();
                            curCol--;
                            isUpper = true;
                            disableCheck = DISABLE_RIGHT_EDGE;
                            continue
                        }
                    }
                    if (curRow < lastRow && disableCheck !== DISABLE_BOTTOM_EDGE) {
                        rayHit = C3.rayIntersectExtended(curX, curY, nextX, nextY, srcTlx, srcBry, srcBrx, srcBry, RAY_EXT_DIST);
                        if (rayHit >= MIN_RAY_DIST && rayHit <= MAX_RAY_DIST) {
                            addVertexAtRayHit();
                            curRow++;
                            isUpper = true;
                            disableCheck = DISABLE_TOP_EDGE;
                            continue
                        }
                    }
                    break
                }
            }
            return C3.New(C3.CollisionPoly, outPts)
        }
        TransformCollisionPoly(srcPoly, destPoly) {
            const ptsArr = this._TransformPolyPoints(srcPoly);
            this._SimplifyPoly(ptsArr);
            destPoly.setPoints(ptsArr)
        }
        _TransformPolyPoints(srcPoly) {
            const outPts = [];
            const ptsArr = srcPoly.pointsArr();
            for (let i = 0, len = ptsArr.length; i < len; i += 2) {
                const srcX = ptsArr[i];
                const srcY = ptsArr[i + 1];
                const [destX, destY] = this.TransformPoint(srcX, srcY);
                outPts.push(destX, destY)
            }
            return outPts
        }
        TransformPoint(srcX,
            srcY) {
            const lastCol = this.GetHSize() - 1;
            const lastRow = this.GetVSize() - 1;
            const colWidthNorm = 1 / lastCol;
            const rowHeightNorm = 1 / lastRow;
            const srcCol = C3.clamp(Math.floor(srcX * lastCol), 0, lastCol - 1);
            const srcRow = C3.clamp(Math.floor(srcY * lastRow), 0, lastRow - 1);
            const srcTlx = srcCol * colWidthNorm;
            const srcTly = srcRow * rowHeightNorm;
            const srcBrx = (srcCol + 1) * colWidthNorm;
            const srcBry = (srcRow + 1) * rowHeightNorm;
            const destTl = this.GetMeshPointAt(srcCol, srcRow);
            const destBr = this.GetMeshPointAt(srcCol + 1, srcRow + 1);
            const isUpper =
                C3.isPointInTriangleInclusive(srcX, srcY, srcTlx, srcTly, srcBrx, srcTly, srcBrx, srcBry);
            const srcAltX = isUpper ? srcTlx + colWidthNorm : srcTlx;
            const srcAltY = isUpper ? srcTly : srcTly + rowHeightNorm;
            const destAlt = this.GetMeshPointAt(srcCol + (isUpper ? 1 : 0), srcRow + (isUpper ? 0 : 1));
            const [u, v, w] = C3.triangleCartesianToBarycentric(srcX, srcY, srcTlx, srcTly, srcAltX, srcAltY, srcBrx, srcBry);
            return C3.triangleBarycentricToCartesian3d(u, v, w, destTl.GetX(), destTl.GetY(), destTl.GetZElevation(), destAlt.GetX(), destAlt.GetY(), destAlt.GetZElevation(),
                destBr.GetX(), destBr.GetY(), destBr.GetZElevation())
        }
        _SimplifyPoly(ptsArr) {
            const outPts = [];
            const NZ_EPSILON = 1E-7;
            const R_EPSILON = .001;
            let curX = ptsArr[0];
            let curY = ptsArr[1];
            let lastDx = curX - ptsArr.at(-2);
            let lastDy = curY - ptsArr.at(-1);
            for (let i = 0, len = ptsArr.length; i < len; i += 2) {
                const j = (i + 2) % len;
                const nextX = ptsArr[j];
                const nextY = ptsArr[j + 1];
                const dx = nextX - curX;
                const dy = nextY - curY;
                const bothXNearZero = Math.abs(dx) < NZ_EPSILON && Math.abs(lastDx) < NZ_EPSILON && Math.sign(dy) === Math.sign(lastDy);
                const bothYNearZero =
                    Math.abs(dy) < NZ_EPSILON && Math.abs(lastDy) < NZ_EPSILON && Math.sign(dx) === Math.sign(lastDx);
                if (!bothXNearZero && !bothYNearZero && Math.abs(dx / lastDx - dy / lastDy) > R_EPSILON || dx == 0 && dy === 0) outPts.push(curX, curY);
                curX = nextX;
                curY = nextY;
                lastDx = dx;
                lastDy = dy
            }
            if (outPts.length >= 6 && outPts.length < ptsArr.length) C3.shallowAssignArray(ptsArr, outPts)
        }
        SaveToJson() {
            return {
                "cols": this.GetHSize(),
                "rows": this.GetVSize(),
                "points": this._pts.map(row => row.map(pt => pt.SaveToJson()))
            }
        }
        LoadFromJson(o) {
            const cols = this.GetHSize();
            const rows =
                this.GetVSize();
            if (o["cols"] !== cols || o["rows"] !== rows) throw new Error("mesh data wrong size");
            const meshRows = o["points"];
            for (let y = 0; y < rows; ++y) {
                const rowData = meshRows[y];
                for (let x = 0; x < cols; ++x) {
                    const pt = this.GetMeshPointAt(x, y);
                    pt.LoadFromJson(rowData[x])
                }
            }
        }
    };

}

// ../lib/gfx/webgl/texture.js
{
    'use strict';
    const C3 = self.C3;
    const VALID_PIXEL_FORMATS = new Set(["rgba8", "rgb8", "rgba4", "rgb5_a1", "rgb565"]);
    const VALID_SAMPLINGS = new Set(["nearest", "bilinear", "trilinear"]);
    const VALID_MIPMAP_QUALITIES = new Set(["default", "low", "high"]);
    const VALID_WRAP_MODES = new Set(["clamp-to-edge", "repeat", "mirror-repeat"]);

    function GetFormatSpecifiers(pixelFormat, gl) {
        let sizedinternalformat;
        let internalformat;
        let format;
        let type;
        switch (pixelFormat) {
            case "rgba8":
                sizedinternalformat = gl.RGBA8;
                internalformat = gl.RGBA;
                format = gl.RGBA;
                type = gl.UNSIGNED_BYTE;
                break;
            case "rgb8":
                sizedinternalformat = gl.RGB8;
                internalformat = gl.RGB;
                format = gl.RGB;
                type = gl.UNSIGNED_BYTE;
                break;
            case "rgba4":
                sizedinternalformat = gl.RGBA4;
                internalformat = gl.RGBA;
                format = gl.RGBA;
                type = gl.UNSIGNED_SHORT_4_4_4_4;
                break;
            case "rgb5_a1":
                sizedinternalformat = gl.RGB5_A1;
                internalformat = gl.RGBA;
                format = gl.RGBA;
                type = gl.UNSIGNED_SHORT_5_5_5_1;
                break;
            case "rgb565":
                sizedinternalformat = gl.RGB565;
                internalformat = gl.RGB;
                format = gl.RGB;
                type = gl.UNSIGNED_SHORT_5_6_5;
                break;
            default:
                throw new Error("invalid pixel format");
        }
        return {
            sizedinternalformat,
            internalformat,
            format,
            type
        }
    }
    const CREATEFROM_DEFAULT_OPTIONS = {
        wrapX: "clamp-to-edge",
        wrapY: "clamp-to-edge",
        sampling: "trilinear",
        anisotropy: 0,
        pixelFormat: "rgba8",
        mipMap: true,
        mipMapQuality: "default",
        premultiplyAlpha: true,
        isSvg: false,
        width: -1,
        height: -1
    };
    const UPDATE_DEFAULT_OPTIONS = {
        premultiplyAlpha: true,
        flipY: false
    };
    const allTextures = new Set;
    C3.Gfx.WebGLRendererTexture = class WebGLRendererTexture {
        constructor(renderer) {
            this._renderer = renderer;
            this._texture = null;
            this._width = 0;
            this._height = 0;
            this._isStatic = true;
            this._wrapX = "clamp-to-edge";
            this._wrapY = "clamp-to-edge";
            this._sampling = "trilinear";
            this._anisotropy = 0;
            this._pixelFormat = "rgba8";
            this._isMipMapped = false;
            this._mipMapQuality = "default";
            this._refCount = 0
        }
        _CreateStatic(data, opts) {
            if ((typeof HTMLImageElement === "undefined" || !(data instanceof HTMLImageElement)) && (typeof HTMLCanvasElement ===
                    "undefined" || !(data instanceof HTMLCanvasElement)) && (typeof ImageBitmap === "undefined" || !(data instanceof ImageBitmap)) && (typeof OffscreenCanvas === "undefined" || !(data instanceof OffscreenCanvas)) && !(data instanceof ImageData) && !(data instanceof ArrayBuffer) && data !== null) throw new Error("invalid texture source");
            opts = Object.assign({}, CREATEFROM_DEFAULT_OPTIONS, opts);
            if (this._texture) throw new Error("already created texture");
            this._wrapX = opts.wrapX;
            this._wrapY = opts.wrapY;
            this._sampling = opts.sampling;
            this._anisotropy = opts.anisotropy;
            this._pixelFormat = opts.pixelFormat;
            this._isMipMapped = !!opts.mipMap && this._renderer.AreMipmapsEnabled();
            this._mipMapQuality = opts.mipMapQuality;
            if (!VALID_WRAP_MODES.has(this._wrapX) || !VALID_WRAP_MODES.has(this._wrapY)) throw new Error("invalid wrap mode");
            if (!VALID_SAMPLINGS.has(this._sampling)) throw new Error("invalid sampling");
            if (!VALID_PIXEL_FORMATS.has(this._pixelFormat)) throw new Error("invalid pixel format");
            if (!VALID_MIPMAP_QUALITIES.has(this._mipMapQuality)) throw new Error("invalid mipmap quality");
            this._isStatic = true;
            if (data instanceof ArrayBuffer || data === null || opts.isSvg) {
                this._width = opts.width;
                this._height = opts.height;
                if (data instanceof ArrayBuffer && data.byteLength !== this._width * this._height * 4) throw new Error("ArrayBuffer wrong size");
            } else {
                this._width = data.width;
                this._height = data.height
            }
            if (this._width <= 0 || this._height <= 0) throw new Error("invalid texture data size");
            if (opts.isSvg) {
                const canvas = C3.CreateCanvas(this._width, this._height);
                const ctx = canvas.getContext("2d");
                ctx.drawImage(data,
                    0, 0, this._width, this._height);
                data = canvas
            }
            const isPOT = C3.isPOT(this._width) && C3.isPOT(this._height);
            const maxTextureSize = this._renderer.GetMaxTextureSize();
            if (this._width > maxTextureSize || this._height > maxTextureSize) throw new Error("texture data exceeds maximum texture size");
            const gl = this._renderer.GetContext();
            const webglVersion = this._renderer.GetWebGLVersionNumber();
            this._texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, this._texture);
            gl.pixelStorei(gl["UNPACK_PREMULTIPLY_ALPHA_WEBGL"], opts.premultiplyAlpha);
            gl.pixelStorei(gl["UNPACK_FLIP_Y_WEBGL"], false);
            const formatspec = GetFormatSpecifiers(this._pixelFormat, gl);
            if (!this._renderer.SupportsNPOTTextures() && !isPOT && this._IsTiled()) {
                if (data === null) throw new Error("cannot pass null data when creating a NPOT tiled texture without NPOT support");
                if (data instanceof ArrayBuffer) data = new ImageData(new Uint8ClampedArray(data), this._width, this._height);
                if (data instanceof ImageData) {
                    const tmpCanvas = C3.CreateCanvas(this._width, this._height);
                    const tmpCtx = tmpCanvas.getContext("2d");
                    tmpCtx.putImageData(data, 0, 0);
                    data = tmpCanvas
                }
                const canvas = C3.CreateCanvas(C3.nextHighestPowerOfTwo(this._width), C3.nextHighestPowerOfTwo(this._height));
                const ctx = canvas.getContext("2d");
                ctx.imageSmoothingEnabled = this._sampling !== "nearest";
                ctx.drawImage(data, 0, 0, this._width, this._height, 0, 0, canvas.width, canvas.height);
                gl.texImage2D(gl.TEXTURE_2D, 0, formatspec.internalformat, formatspec.format, formatspec.type, canvas)
            } else if (webglVersion >= 2) {
                let levels;
                if (this._isMipMapped) levels = Math.floor(Math.log2(Math.max(this._width,
                    this._height)) + 1);
                else levels = 1;
                gl.texStorage2D(gl.TEXTURE_2D, levels, formatspec.sizedinternalformat, this._width, this._height);
                if (data instanceof ArrayBuffer) gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, this._width, this._height, formatspec.format, formatspec.type, new Uint8Array(data));
                else if (data !== null) gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, formatspec.format, formatspec.type, data)
            } else if (data instanceof ArrayBuffer) gl.texImage2D(gl.TEXTURE_2D, 0, formatspec.internalformat, this._width, this._height, 0, formatspec.format,
                formatspec.type, new Uint8Array(data));
            else if (data === null) gl.texImage2D(gl.TEXTURE_2D, 0, formatspec.internalformat, this._width, this._height, 0, formatspec.format, formatspec.type, null);
            else gl.texImage2D(gl.TEXTURE_2D, 0, formatspec.internalformat, formatspec.format, formatspec.type, data);
            if (data !== null) this._SetTextureParameters(gl);
            gl.bindTexture(gl.TEXTURE_2D, null);
            this._renderer._ResetLastTexture();
            this._refCount = 1;
            allTextures.add(this)
        }
        _CreateDynamic(width, height, opts) {
            opts = Object.assign({}, CREATEFROM_DEFAULT_OPTIONS,
                opts);
            if (this._texture) throw new Error("already created texture");
            this._wrapX = opts.wrapX;
            this._wrapY = opts.wrapY;
            this._sampling = opts.sampling;
            this._pixelFormat = opts.pixelFormat;
            this._isMipMapped = !!opts.mipMap && this._renderer.AreMipmapsEnabled();
            this._mipMapQuality = opts.mipMapQuality;
            if (!VALID_WRAP_MODES.has(this._wrapX) || !VALID_WRAP_MODES.has(this._wrapY)) throw new Error("invalid wrap mode");
            if (!VALID_SAMPLINGS.has(this._sampling)) throw new Error("invalid sampling");
            if (!VALID_PIXEL_FORMATS.has(this._pixelFormat)) throw new Error("invalid pixel format");
            if (!VALID_MIPMAP_QUALITIES.has(this._mipMapQuality)) throw new Error("invalid mipmap quality");
            this._isStatic = false;
            this._width = Math.floor(width);
            this._height = Math.floor(height);
            const isPOT = C3.isPOT(this._width) && C3.isPOT(this._height);
            const maxTextureSize = this._renderer.GetMaxTextureSize();
            if (this._width <= 0 || this._height <= 0) throw new Error("invalid texture size");
            if (this._width > maxTextureSize || this._height > maxTextureSize) throw new Error("texture exceeds maximum texture size");
            if (!this._renderer.SupportsNPOTTextures() &&
                this._IsTiled() && !isPOT) throw new Error("non-power-of-two tiled textures not supported");
            const gl = this._renderer.GetContext();
            const webglVersion = this._renderer.GetWebGLVersionNumber();
            this._texture = gl.createTexture();
            gl.bindTexture(gl.TEXTURE_2D, this._texture);
            gl.pixelStorei(gl["UNPACK_PREMULTIPLY_ALPHA_WEBGL"], opts.premultiplyAlpha);
            gl.pixelStorei(gl["UNPACK_FLIP_Y_WEBGL"], false);
            const formatspec = GetFormatSpecifiers(this._pixelFormat, gl);
            const internalformat = webglVersion >= 2 ? formatspec.sizedinternalformat :
                formatspec.internalformat;
            gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, this._width, this._height, 0, formatspec.format, formatspec.type, null);
            this._SetTextureParameters(gl);
            gl.bindTexture(gl.TEXTURE_2D, null);
            this._renderer._ResetLastTexture();
            this._refCount = 1;
            allTextures.add(this)
        }
        _GetMipMapHint(gl) {
            if (this._mipMapQuality === "default") return this._isStatic ? gl.NICEST : gl.FASTEST;
            else if (this._mipMapQuality === "low") return gl.FASTEST;
            else if (this._mipMapQuality === "high") return gl.NICEST;
            else throw new Error("invalid mipmap quality");
        }
        _IsTiled() {
            return this._wrapX !== "clamp-to-edge" || this._wrapY !== "clamp-to-edge"
        }
        _GetTextureWrapMode(gl, wrapMode) {
            if (wrapMode === "clamp-to-edge") return gl.CLAMP_TO_EDGE;
            else if (wrapMode === "repeat") return gl.REPEAT;
            else if (wrapMode === "mirror-repeat") return gl.MIRRORED_REPEAT;
            else throw new Error("invalid wrap mode");
        }
        _SetTextureParameters(gl) {
            const isPOT = C3.isPOT(this._width) && C3.isPOT(this._height);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, this._GetTextureWrapMode(gl, this._wrapX));
            gl.texParameteri(gl.TEXTURE_2D,
                gl.TEXTURE_WRAP_T, this._GetTextureWrapMode(gl, this._wrapY));
            if (this._sampling === "nearest") {
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                this._isMipMapped = false
            } else {
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
                if ((isPOT || this._renderer.SupportsNPOTTextures()) && this._isMipMapped) {
                    gl.hint(gl.GENERATE_MIPMAP_HINT, this._GetMipMapHint(gl));
                    gl.generateMipmap(gl.TEXTURE_2D);
                    const useTrilinear = this._sampling ===
                        "trilinear" && !this._renderer.HasMajorPerformanceCaveat();
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, useTrilinear ? gl.LINEAR_MIPMAP_LINEAR : gl.LINEAR_MIPMAP_NEAREST)
                } else {
                    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
                    this._isMipMapped = false
                }
            }
            const anisotropicExt = this._renderer._GetAnisotropicExtension();
            if (anisotropicExt && this._anisotropy > 0 && this._sampling !== "nearest") gl.texParameterf(gl.TEXTURE_2D, anisotropicExt["TEXTURE_MAX_ANISOTROPY_EXT"], Math.min(this._anisotropy, this._renderer._GetMaxAnisotropy()))
        }
        _Update(data,
            opts) {
            if ((typeof HTMLImageElement === "undefined" || !(data instanceof HTMLImageElement)) && (typeof HTMLVideoElement === "undefined" || !(data instanceof HTMLVideoElement)) && (typeof HTMLCanvasElement === "undefined" || !(data instanceof HTMLCanvasElement)) && (typeof ImageBitmap === "undefined" || !(data instanceof ImageBitmap)) && (typeof OffscreenCanvas === "undefined" || !(data instanceof OffscreenCanvas)) && !(data instanceof ImageData)) throw new Error("invalid texture source");
            if (!this._texture || this._refCount <= 0) throw new Error("texture not created");
            if (this._isStatic) throw new Error("cannot update static texture");
            opts = Object.assign({}, UPDATE_DEFAULT_OPTIONS, opts);
            const dataWidth = data.width || data.videoWidth;
            const dataHeight = data.height || data.videoHeight;
            const webglVersion = this._renderer.GetWebGLVersionNumber();
            const gl = this._renderer.GetContext();
            gl.bindTexture(gl.TEXTURE_2D, this._texture);
            gl.pixelStorei(gl["UNPACK_PREMULTIPLY_ALPHA_WEBGL"], opts.premultiplyAlpha);
            gl.pixelStorei(gl["UNPACK_FLIP_Y_WEBGL"], !!opts.flipY);
            const formatspec = GetFormatSpecifiers(this._pixelFormat,
                gl);
            const internalformat = webglVersion >= 2 ? formatspec.sizedinternalformat : formatspec.internalformat;
            try {
                if (this._width === dataWidth && this._height === dataHeight) {
                    const isPOT = C3.isPOT(this._width) && C3.isPOT(this._height);
                    gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, formatspec.format, formatspec.type, data);
                    if ((isPOT || this._renderer.SupportsNPOTTextures()) && this._isMipMapped) {
                        gl.hint(gl.GENERATE_MIPMAP_HINT, this._GetMipMapHint(gl));
                        gl.generateMipmap(gl.TEXTURE_2D)
                    }
                } else {
                    this._width = dataWidth;
                    this._height = dataHeight;
                    const isPOT = C3.isPOT(this._width) && C3.isPOT(this._height);
                    if (!this._renderer.SupportsNPOTTextures() && this._IsTiled() && !isPOT) throw new Error("non-power-of-two tiled textures not supported");
                    gl.texImage2D(gl.TEXTURE_2D, 0, internalformat, formatspec.format, formatspec.type, data);
                    if ((isPOT || this._renderer.SupportsNPOTTextures()) && this._isMipMapped) {
                        gl.hint(gl.GENERATE_MIPMAP_HINT, this._GetMipMapHint(gl));
                        gl.generateMipmap(gl.TEXTURE_2D)
                    }
                }
            } catch (e) {
                console.error("Error updating WebGL texture: ", e)
            }
            gl.bindTexture(gl.TEXTURE_2D,
                null);
            this._renderer._ResetLastTexture()
        }
        _Delete() {
            if (this._refCount > 0) throw new Error("texture still has references");
            if (!this._texture) throw new Error("already deleted texture");
            allTextures.delete(this);
            const gl = this._renderer.GetContext();
            gl.deleteTexture(this._texture);
            this._texture = null
        }
        IsValid() {
            return !!this._texture
        }
        _GetTexture() {
            return this._texture
        }
        GetRenderer() {
            return this._renderer
        }
        AddReference() {
            this._refCount++
        }
        SubtractReference() {
            if (this._refCount <= 0) throw new Error("no more references");
            this._refCount--
        }
        GetReferenceCount() {
            return this._refCount
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        IsStatic() {
            return this._isStatic
        }
        GetEstimatedMemoryUsage() {
            let size = this._width * this._height;
            switch (this._pixelFormat) {
                case "rgba8":
                    size *= 4;
                    break;
                case "rgb8":
                    size *= 3;
                    break;
                case "rgba4":
                case "rgb5_a1":
                case "rgb565":
                    size *= 2;
                    break
            }
            if (this._isMipMapped) size += Math.floor(size / 3);
            return size
        }
        static OnContextLost() {
            allTextures.clear()
        }
        static allTextures() {
            return allTextures.values()
        }
    };

}

// ../lib/gfx/webgl/renderTarget.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;
    const glMatrix = self.glMatrix;
    const vec3 = glMatrix.vec3;
    const mat4 = glMatrix.mat4;
    const VALID_SAMPLINGS = new Set(["nearest", "bilinear", "trilinear"]);
    const DEFAULT_RENDERTARGET_OPTIONS = {
        sampling: "trilinear",
        alpha: true,
        depth: false,
        isSampled: true,
        isDefaultSize: true,
        multisampling: 0
    };
    const allRenderTargets = new Set;
    C3.Gfx.WebGLRenderTarget = class WebGLRenderTarget {
        constructor(renderer) {
            this._renderer = renderer;
            this._frameBuffer = null;
            this._frameBufferNoDepth = null;
            this._texture = null;
            this._renderBuffer = null;
            this._width = 0;
            this._height = 0;
            this._isDefaultSize = true;
            this._sampling = "trilinear";
            this._alpha = true;
            this._depth = false;
            this._isSampled = true;
            this._multisampling = 0;
            this._projectionMatrix = mat4.create();
            this._lastFov = 0;
            this._lastNearZ = 0;
            this._lastFarZ = 0
        }
        _Create(width, height, opts) {
            opts = Object.assign({}, DEFAULT_RENDERTARGET_OPTIONS,
                opts);
            const webGLVersion = this._renderer.GetWebGLVersionNumber();
            if (this._texture || this._renderBuffer) throw new Error("already created render target");
            this._sampling = opts.sampling;
            this._alpha = !!opts.alpha;
            this._depth = !!opts.depth;
            this._isSampled = !!opts.isSampled;
            this._isDefaultSize = !!opts.isDefaultSize;
            this._multisampling = opts.multisampling;
            if (!VALID_SAMPLINGS.has(this._sampling)) throw new Error("invalid sampling");
            if (this._multisampling > 0 && (webGLVersion < 2 || this._isSampled)) throw new Error("invalid use of multisampling");
            if (webGLVersion < 2) this._isSampled = true;
            this._width = width;
            this._height = height;
            if (this._width <= 0 || this._height <= 0) throw new Error("invalid render target size");
            this._CalculateProjection();
            const gl = this._renderer.GetContext();
            this._frameBuffer = gl.createFramebuffer();
            if (this._depth) this._frameBufferNoDepth = gl.createFramebuffer();
            if (this._isSampled) {
                this._texture = this._renderer.CreateDynamicTexture(this._width, this._height, {
                    sampling: this._sampling,
                    pixelFormat: this._alpha ? "rgba8" : "rgb8",
                    mipMap: false
                });
                const tex = this._texture._GetTexture();
                gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
                if (this._depth) {
                    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBufferNoDepth);
                    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0)
                }
            } else {
                this._renderBuffer = gl.createRenderbuffer();
                gl.bindRenderbuffer(gl.RENDERBUFFER, this._renderBuffer);
                const internalFormat = this._alpha ? gl.RGBA8 : gl.RGB8;
                if (this._multisampling >
                    0) {
                    const formatSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, internalFormat, gl.SAMPLES);
                    if (formatSamples && formatSamples[0]) {
                        const maxSamples = formatSamples[0];
                        if (this._multisampling > maxSamples) this._multisampling = maxSamples
                    } else this._multisampling = 0
                }
                if (this._multisampling === 0) gl.renderbufferStorage(gl.RENDERBUFFER, internalFormat, this._width, this._height);
                else gl.renderbufferStorageMultisample(gl.RENDERBUFFER, this._multisampling, internalFormat, this._width, this._height);
                gl.bindFramebuffer(gl.FRAMEBUFFER,
                    this._frameBuffer);
                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this._renderBuffer);
                if (this._depth) {
                    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBufferNoDepth);
                    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, this._renderBuffer)
                }
                gl.bindRenderbuffer(gl.RENDERBUFFER, null)
            }
            const rendererDepthBuffer = this._renderer._GetDepthBuffer();
            if (this._depth && rendererDepthBuffer) {
                gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
                if (this._renderer._CanSampleDepth()) gl.framebufferTexture2D(gl.FRAMEBUFFER,
                    gl.DEPTH_STENCIL_ATTACHMENT, gl.TEXTURE_2D, rendererDepthBuffer, 0);
                else gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, rendererDepthBuffer)
            }
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            allRenderTargets.add(this)
        }
        _Resize(width, height) {
            if (this._width === width && this._height === height) return;
            this._width = width;
            this._height = height;
            this._CalculateProjection();
            const gl = this._renderer.GetContext();
            gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
            if (this._texture) this._texture._Update(new ImageData(this._width,
                this._height));
            else {
                gl.bindRenderbuffer(gl.RENDERBUFFER, this._renderBuffer);
                gl.renderbufferStorage(gl.RENDERBUFFER, this._alpha ? gl.RGBA8 : gl.RGB8, this._width, this._height);
                gl.bindRenderbuffer(gl.RENDERBUFFER, null)
            }
            const rendererDepthBuffer = this._renderer._GetDepthBuffer();
            if (this._depth && rendererDepthBuffer)
                if (this._renderer._CanSampleDepth()) gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.TEXTURE_2D, rendererDepthBuffer, 0);
                else gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT,
                    gl.RENDERBUFFER, rendererDepthBuffer);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null)
        }
        _Delete() {
            if (!this._texture && !this._renderBuffer) throw new Error("already deleted render target");
            allRenderTargets.delete(this);
            const gl = this._renderer.GetContext();
            if (this._texture) {
                gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0);
                if (this._depth) {
                    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBufferNoDepth);
                    gl.framebufferTexture2D(gl.FRAMEBUFFER,
                        gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, null, 0)
                }
                this._renderer.DeleteTexture(this._texture);
                this._texture = null
            } else if (this._renderBuffer) {
                gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBuffer);
                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null);
                if (this._depth) {
                    gl.bindFramebuffer(gl.FRAMEBUFFER, this._frameBufferNoDepth);
                    gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, null)
                }
                gl.deleteRenderbuffer(this._renderBuffer);
                this._renderBuffer = null
            }
            gl.bindFramebuffer(gl.FRAMEBUFFER,
                null);
            if (this._renderer.GetWebGLVersionNumber() >= 2) {
                gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
                gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null)
            }
            gl.deleteFramebuffer(this._frameBuffer);
            if (this._depth) gl.deleteFramebuffer(this._frameBufferNoDepth);
            const batchState = this._renderer.GetBatchState();
            batchState.currentFramebuffer = null;
            batchState.currentFramebufferNoDepth = null;
            this._frameBuffer = null
        }
        _CalculateProjection() {
            this._renderer.CalculatePerspectiveMatrix(this._projectionMatrix, this._width / this._height);
            this._lastFov = this._renderer.GetFovY();
            this._lastNearZ = this._renderer.GetNearZ();
            this._lastFarZ = this._renderer.GetFarZ()
        }
        _GetFramebuffer() {
            return this._frameBuffer
        }
        _GetFramebufferNoDepth() {
            return this._frameBufferNoDepth
        }
        GetRenderer() {
            return this._renderer
        }
        GetTexture() {
            return this._texture
        }
        GetProjectionMatrix() {
            if (this._renderer.GetFovY() !== this._lastFov || this._renderer.GetNearZ() !== this._lastNearZ || this._renderer.GetFarZ() !== this._lastFarZ) this._CalculateProjection();
            return this._projectionMatrix
        }
        IsLinearSampling() {
            return this._sampling !==
                "nearest"
        }
        HasAlpha() {
            return this._alpha
        }
        IsSampled() {
            return this._isSampled
        }
        HasDepthBuffer() {
            return this._depth
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        IsDefaultSize() {
            return this._isDefaultSize
        }
        GetMultisampling() {
            return this._multisampling
        }
        GetOptions() {
            const ret = {
                sampling: this._sampling,
                alpha: this._alpha,
                isSampled: this._isSampled
            };
            if (!this._isDefaultSize) {
                ret.width = this._width;
                ret.height = this._height
            }
            return ret
        }
        IsCompatibleWithOptions(opts) {
            opts = Object.assign({}, DEFAULT_RENDERTARGET_OPTIONS,
                opts);
            if (opts.sampling !== "nearest" !== this.IsLinearSampling()) return false;
            if (!!opts.alpha !== this.HasAlpha()) return false;
            if (!!opts.depth !== this.HasDepthBuffer()) return false;
            if (this._renderer.GetWebGLVersionNumber() >= 2)
                if (!!opts.isSampled !== this.IsSampled()) return false;
            if (typeof opts.width === "number" || typeof opts.height === "number") return !this.IsDefaultSize() && this.GetWidth() === opts.width && this.GetHeight() === opts.height;
            else return this.IsDefaultSize()
        }
        _GetWebGLTexture() {
            if (!this._texture) return null;
            return this._texture._GetTexture()
        }
        GetEstimatedMemoryUsage() {
            if (this._texture) return this._texture.GetEstimatedMemoryUsage();
            return this._width * this._height * (this._alpha ? 4 : 3)
        }
        static async DebugReadPixelsToBlob(renderer, renderTarget) {
            const imageData = await renderer.ReadBackRenderTargetToImageData(renderTarget, true);
            return await C3.ImageDataToBlob(imageData)
        }
        static OnContextLost() {
            allRenderTargets.clear()
        }
        static allRenderTargets() {
            return allRenderTargets.values()
        }
        static ResizeAll(width, height) {
            for (const rt of allRenderTargets)
                if (rt.IsDefaultSize()) rt._Resize(width,
                    height)
        }
    };

}

// ../lib/gfx/webgl/shaderProgram.js
{
    'use strict';
    const C3 = self.C3;
    const glMatrix = self.glMatrix;
    const vec3 = glMatrix.vec3;
    const mat4 = glMatrix.mat4;
    const RESERVED_UNIFORM_NAMES = new Set(["aPos", "aTex", "aPoints", "matP", "matMV", "samplerFront", "samplerBack", "samplerDepth", "destStart", "destEnd", "srcStart", "srcEnd", "srcOriginStart", "srcOriginEnd", "pixelSize", "seconds", "devicePixelRatio", "layerScale", "layerAngle", "layoutStart", "layoutEnd", "color", "color2_", "pointTexStart", "pointTexEnd", "zElevation", "tileSize", "tileSpacing", "outlineThickness", "zNear", "zFar"]);
    C3.Gfx.WebGLShaderProgram = class WebGLShaderProgram extends C3.Gfx.ShaderProgramBase {
        static async Compile(renderer, shaderInfo) {
            const gl = renderer.GetContext();
            const fragSrc = shaderInfo.src;
            const vertexSrc = shaderInfo.vertexSrc;
            const name = shaderInfo.name;
            const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
            gl.shaderSource(fragmentShader, fragSrc);
            gl.compileShader(fragmentShader);
            const vertexShader = gl.createShader(gl.VERTEX_SHADER);
            gl.shaderSource(vertexShader, vertexSrc);
            gl.compileShader(vertexShader);
            const shaderProgram = gl.createProgram();
            gl.attachShader(shaderProgram, fragmentShader);
            gl.attachShader(shaderProgram, vertexShader);
            gl.bindAttribLocation(shaderProgram, 0, "aPos");
            gl.bindAttribLocation(shaderProgram, 1, "aTex");
            gl.bindAttribLocation(shaderProgram, 2, "aPoints");
            gl.linkProgram(shaderProgram);
            const parallelShaderCompileExt = renderer._GetParallelShaderCompileExtension();
            if (parallelShaderCompileExt) await renderer._WaitForObjectReady(() => gl.getProgramParameter(shaderProgram, parallelShaderCompileExt["COMPLETION_STATUS_KHR"]));
            else await C3.Wait(5);
            if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {
                const log = gl.getShaderInfoLog(fragmentShader);
                gl.deleteShader(fragmentShader);
                gl.deleteShader(vertexShader);
                gl.deleteProgram(shaderProgram);
                throw new Error("Error compiling fragment shader: " + log);
            }
            if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {
                const log = gl.getShaderInfoLog(vertexShader);
                gl.deleteShader(fragmentShader);
                gl.deleteShader(vertexShader);
                gl.deleteProgram(shaderProgram);
                throw new Error("Error compiling vertex shader: " +
                    log);
            }
            if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {
                const log = gl.getProgramInfoLog(shaderProgram);
                gl.deleteShader(fragmentShader);
                gl.deleteShader(vertexShader);
                gl.deleteProgram(shaderProgram);
                throw new Error("Error linking shader program: " + log);
            }
            const infoLog = C3.FilterUnprintableChars(gl.getProgramInfoLog(shaderProgram) || "").trim();
            if (infoLog && !C3.IsStringAllWhitespace(infoLog)) console.info(`[WebGL] Shader program '${name}' compilation log: `, infoLog);
            gl.deleteShader(fragmentShader);
            gl.deleteShader(vertexShader);
            return shaderProgram
        }
        static async Create(renderer, shaderInfo) {
            const shaderProgram = await C3.Gfx.WebGLShaderProgram.Compile(renderer, shaderInfo);
            return new C3.Gfx.WebGLShaderProgram(renderer, shaderProgram, shaderInfo)
        }
        constructor(renderer, shaderProgram, shaderInfo) {
            super(renderer, shaderInfo);
            const gl = renderer.GetContext();
            const batchState = renderer.GetBatchState();
            renderer.EndBatch();
            gl.useProgram(shaderProgram);
            this._gl = gl;
            this._shaderProgram = shaderProgram;
            this._isDeviceTransform =
                shaderInfo.name === "<default-device-transform>";
            const locAPos = gl.getAttribLocation(shaderProgram, "aPos");
            const locATex = gl.getAttribLocation(shaderProgram, "aTex");
            this._locAPoints = gl.getAttribLocation(shaderProgram, "aPoints");
            if (locAPos !== -1) {
                gl.bindBuffer(gl.ARRAY_BUFFER, renderer._vertexBuffer);
                gl.vertexAttribPointer(locAPos, renderer.GetNumVertexComponents(), gl.FLOAT, false, 0, 0);
                gl.enableVertexAttribArray(locAPos)
            }
            if (locATex !== -1) {
                gl.bindBuffer(gl.ARRAY_BUFFER, renderer._texcoordBuffer);
                gl.vertexAttribPointer(locATex,
                    2, gl.FLOAT, false, 0, 0);
                gl.enableVertexAttribArray(locATex)
            }
            if (this._locAPoints !== -1) {
                gl.bindBuffer(gl.ARRAY_BUFFER, renderer._pointBuffer);
                gl.vertexAttribPointer(this._locAPoints, 4, gl.FLOAT, false, 0, 0);
                gl.enableVertexAttribArray(this._locAPoints)
            }
            gl.bindBuffer(gl.ARRAY_BUFFER, null);
            this._uMatP = new C3.Gfx.WebGLShaderUniform(this, "matP", "mat4");
            this._uMatMV = new C3.Gfx.WebGLShaderUniform(this, "matMV", "mat4");
            this._uColor = new C3.Gfx.WebGLShaderUniform(this, "color", "vec4");
            this._uSamplerFront = new C3.Gfx.WebGLShaderUniform(this,
                "samplerFront", "sampler");
            this._uPointTexStart = new C3.Gfx.WebGLShaderUniform(this, "pointTexStart", "vec2");
            this._uPointTexEnd = new C3.Gfx.WebGLShaderUniform(this, "pointTexEnd", "vec2");
            this._uZElevation = new C3.Gfx.WebGLShaderUniform(this, "zElevation", "float");
            this._uTileSize = new C3.Gfx.WebGLShaderUniform(this, "tileSize", "vec2");
            this._uTileSpacing = new C3.Gfx.WebGLShaderUniform(this, "tileSpacing", "vec2");
            this._uColor2 = new C3.Gfx.WebGLShaderUniform(this, "color2_", "vec4");
            this._uOutlineThickness = new C3.Gfx.WebGLShaderUniform(this,
                "outlineThickness", "float");
            this._uSamplerBack = new C3.Gfx.WebGLShaderUniform(this, "samplerBack", "sampler");
            this._uSamplerDepth = new C3.Gfx.WebGLShaderUniform(this, "samplerDepth", "sampler");
            this._uDestStart = new C3.Gfx.WebGLShaderUniform(this, "destStart", "vec2");
            this._uDestEnd = new C3.Gfx.WebGLShaderUniform(this, "destEnd", "vec2");
            this._uSrcStart = new C3.Gfx.WebGLShaderUniform(this, "srcStart", "vec2");
            this._uSrcEnd = new C3.Gfx.WebGLShaderUniform(this, "srcEnd", "vec2");
            this._uSrcOriginStart = new C3.Gfx.WebGLShaderUniform(this,
                "srcOriginStart", "vec2");
            this._uSrcOriginEnd = new C3.Gfx.WebGLShaderUniform(this, "srcOriginEnd", "vec2");
            this._uPixelSize = new C3.Gfx.WebGLShaderUniform(this, "pixelSize", "vec2");
            this._uSeconds = new C3.Gfx.WebGLShaderUniform(this, "seconds", "float");
            this._uDevicePixelRatio = new C3.Gfx.WebGLShaderUniform(this, "devicePixelRatio", "float");
            this._uLayerScale = new C3.Gfx.WebGLShaderUniform(this, "layerScale", "float");
            this._uLayerAngle = new C3.Gfx.WebGLShaderUniform(this, "layerAngle", "float");
            this._uLayoutStart = new C3.Gfx.WebGLShaderUniform(this,
                "layoutStart", "vec2");
            this._uLayoutEnd = new C3.Gfx.WebGLShaderUniform(this, "layoutEnd", "vec2");
            this._uZNear = new C3.Gfx.WebGLShaderUniform(this, "zNear", "float");
            this._uZFar = new C3.Gfx.WebGLShaderUniform(this, "zFar", "float");
            this._hasAnyOptionalUniforms = !!(this._uPixelSize.IsUsed() || this._uSeconds.IsUsed() || this._uSamplerBack.IsUsed() || this._uDestStart.IsUsed() || this._uDestEnd.IsUsed() || this._uSrcStart.IsUsed() || this._uSrcEnd.IsUsed() || this._uSrcOriginStart.IsUsed() || this._uSrcOriginEnd.IsUsed() || this._uDevicePixelRatio.IsUsed() ||
                this._uLayerScale.IsUsed() || this._uLayerAngle.IsUsed() || this._uLayoutStart.IsUsed() || this._uLayoutEnd.IsUsed());
            const customParameterDefs = shaderInfo.parameters || [];
            this._uCustomParameters = [];
            this._usesAnySrcRectOrPixelSize = this._uPixelSize.IsUsed() || this._uSrcStart.IsUsed() || this._uSrcEnd.IsUsed() || this._uSrcOriginStart.IsUsed() || this._uSrcOriginEnd.IsUsed();
            this._hasCurrentMatP = false;
            this._hasCurrentMatMV = false;
            this._uColor.Init4f(1, 1, 1, 1);
            this._uColor2.Init4f(1, 1, 1, 1);
            this._uSamplerFront.Init1i(0);
            this._uSamplerBack.Init1i(1);
            this._uSamplerDepth.Init1i(2);
            this._uPointTexStart.Init2f(0, 0);
            this._uPointTexEnd.Init2f(1, 1);
            this._uZElevation.Init1f(0);
            this._uTileSize.Init2f(0, 0);
            this._uTileSpacing.Init2f(0, 0);
            this._uDestStart.Init2f(0, 0);
            this._uDestEnd.Init2f(1, 1);
            this._uSrcStart.Init2f(0, 0);
            this._uSrcEnd.Init2f(0, 0);
            this._uSrcOriginStart.Init2f(0, 0);
            this._uSrcOriginEnd.Init2f(0, 0);
            this._uPixelSize.Init2f(0, 0);
            this._uDevicePixelRatio.Init1f(1);
            this._uZNear.Init1f(renderer.GetNearZ());
            this._uZFar.Init1f(renderer.GetFarZ());
            this._uLayerScale.Init1f(1);
            this._uLayerAngle.Init1f(0);
            this._uSeconds.Init1f(0);
            this._uLayoutStart.Init2f(0, 0);
            this._uLayoutEnd.Init2f(0, 0);
            this._uOutlineThickness.Init1f(1);
            for (const p of customParameterDefs) {
                const uniformName = p[0];
                const paramType = p[2];
                const shaderUniform = new C3.Gfx.WebGLShaderUniform(this, uniformName, paramType);
                if (paramType === "color") shaderUniform.Init3f(0, 0, 0);
                else shaderUniform.Init1f(0);
                this._uCustomParameters.push(shaderUniform)
            }
            if (this._isDeviceTransform) this._UpdateDeviceTransformUniforms(batchState.currentMatP);
            else {
                this.UpdateMatP(batchState.currentMatP, true);
                this.UpdateMatMV(batchState.currentMV, true)
            }
            const currentShader = batchState.currentShader;
            gl.useProgram(currentShader ? currentShader._shaderProgram : null)
        }
        Release() {
            this._gl.deleteProgram(this._shaderProgram);
            this._shaderProgram = null;
            this._renderer._RemoveShaderProgram(this);
            this._gl = null;
            super.Release()
        }
        GetWebGLContext() {
            return this._gl
        }
        GetShaderProgram() {
            return this._shaderProgram
        }
        GetParameterCount() {
            return this._uCustomParameters.length
        }
        GetParameterType(paramIndex) {
            if (paramIndex <
                0 || paramIndex >= this._uCustomParameters.length) return null;
            return this._uCustomParameters[paramIndex].GetType()
        }
        AreCustomParametersAlreadySetInBatch(params) {
            for (let i = 0, len = params.length; i < len; ++i)
                if (!this._uCustomParameters[i].IsSetToCustomInBatch(params[i])) return false;
            return true
        }
        SetCustomParametersInBatch(params) {
            for (let i = 0, len = params.length; i < len; ++i) this._uCustomParameters[i].SetBatchValueCustom(params[i])
        }
        AreOptionalUniformsAlreadySetInBatch(destRect, srcRect, srcOriginRect, layoutRect, pixelWidth,
            pixelHeight, dpr, layerScale, layerAngle, time) {
            if (this._uSamplerBack.IsUsed()) return false;
            if (this._uPixelSize.IsUsed() && !this._uPixelSize.IsSetTo2InBatch(pixelWidth, pixelHeight)) return false;
            if (this._uDestStart.IsUsed() && !this._uDestStart.IsSetTo2InBatch(destRect.getLeft(), destRect.getTop())) return false;
            if (this._uDestEnd.IsUsed() && !this._uDestEnd.IsSetTo2InBatch(destRect.getRight(), destRect.getBottom())) return false;
            if (this._uDevicePixelRatio.IsUsed() && !this._uDevicePixelRatio.IsSetTo1InBatch(dpr)) return false;
            if (this._uLayerScale.IsUsed() && !this._uLayerScale.IsSetTo1InBatch(layerScale)) return false;
            if (this._uLayerAngle.IsUsed() && !this._uLayerAngle.IsSetTo1InBatch(layerAngle)) return false;
            if (this._uSrcStart.IsUsed() && !this._uSrcStart.IsSetTo2InBatch(srcRect.getLeft(), srcRect.getTop())) return false;
            if (this._uSrcEnd.IsUsed() && !this._uSrcEnd.IsSetTo2InBatch(srcRect.getRight(), srcRect.getBottom())) return false;
            if (this._uSrcOriginStart.IsUsed() && !this._uSrcOriginStart.IsSetTo2InBatch(srcOriginRect.getLeft(),
                    srcOriginRect.getTop())) return false;
            if (this._uSrcOriginEnd.IsUsed() && !this._uSrcOriginEnd.IsSetTo2InBatch(srcOriginRect.getRight(), srcOriginRect.getBottom())) return false;
            if (this._uLayoutStart.IsUsed() && !this._uLayoutStart.IsSetTo2InBatch(layoutRect.getLeft(), layoutRect.getTop())) return false;
            if (this._uLayoutEnd.IsUsed() && !this._uLayoutEnd.IsSetTo2InBatch(layoutRect.getTop(), layoutRect.getBottom())) return false;
            if (this._uSeconds.IsUsed() && !this._uSeconds.IsSetTo1InBatch(time)) return false;
            return true
        }
        SetOptionalUniformsInBatch(destRect,
            srcRect, srcOriginRect, layoutRect, pixelWidth, pixelHeight, dpr, layerScale, layerAngle, time) {
            if (this._uSamplerBack.IsUsed()) return;
            if (this._uPixelSize.IsUsed()) this._uPixelSize.SetBatch2(pixelWidth, pixelHeight);
            if (this._uDestStart.IsUsed()) this._uDestStart.SetBatch2(destRect.getLeft(), destRect.getTop());
            if (this._uDestEnd.IsUsed()) this._uDestEnd.SetBatch2(destRect.getRight(), destRect.getBottom());
            if (this._uDevicePixelRatio.IsUsed()) this._uDevicePixelRatio.SetBatch1(dpr);
            if (this._uLayerScale.IsUsed()) this._uLayerScale.SetBatch1(layerScale);
            if (this._uLayerAngle.IsUsed()) this._uLayerAngle.SetBatch1(layerAngle);
            if (this._uSrcStart.IsUsed()) this._uSrcStart.SetBatch2(srcRect.getLeft(), srcRect.getTop());
            if (this._uSrcEnd.IsUsed()) this._uSrcEnd.SetBatch2(srcRect.getRight(), srcRect.getBottom());
            if (this._uSrcOriginStart.IsUsed()) this._uSrcOriginStart.SetBatch2(srcOriginRect.getLeft(), srcOriginRect.getTop());
            if (this._uSrcOriginEnd.IsUsed()) this._uSrcOriginEnd.SetBatch2(srcOriginRect.getRight(), srcOriginRect.getBottom());
            if (this._uLayoutStart.IsUsed()) this._uLayoutStart.SetBatch2(layoutRect.getLeft(),
                layoutRect.getTop());
            if (this._uLayoutEnd.IsUsed()) this._uLayoutEnd.SetBatch2(layoutRect.getTop(), layoutRect.getBottom());
            if (this._uSeconds.IsUsed()) this._uSeconds.SetBatch1(time)
        }
        UpdateMatP(matP, force) {
            if (this._hasCurrentMatP && !force) return;
            if (this._isDeviceTransform) return;
            if (this._uMatP.IsUsed()) this._uMatP.UpdateMatrix4fv(matP);
            this._hasCurrentMatP = true
        }
        SetMatPStale() {
            this._hasCurrentMatP = false
        }
        UpdateMatMV(matMV, force) {
            if (this._hasCurrentMatMV && !force) return;
            if (this._isDeviceTransform) return;
            if (this._uMatMV.IsUsed()) this._uMatMV.UpdateMatrix4fv(matMV);
            this._hasCurrentMatMV = true
        }
        SetMatMVStale() {
            this._hasCurrentMatMV = false
        }
        _UpdateDeviceTransformUniforms(matP) {
            if (!this._isDeviceTransform) throw new Error("not device transform shader");
            this._uMatP.UpdateMatrix4fv(matP);
            const renderer = this._renderer;
            const scrollX = renderer.GetWidth() / 2;
            const scrollY = renderer.GetHeight() / 2;
            const tempMat4 = renderer.CalculateLookAtModelView2(scrollX, scrollY, renderer.GetDefaultCameraZ(renderer.GetHeight()), scrollX, scrollY, 0, renderer.GetHeight());
            this._uMatMV.UpdateMatrix4fv(tempMat4)
        }
        UpdateColor(c) {
            if (this._uColor.IsUsed()) this._uColor.Update4f(c[0],
                c[1], c[2], c[3])
        }
        static GetReservedUniformNames() {
            return RESERVED_UNIFORM_NAMES
        }
        static GetDefaultVertexShaderSource(useHighP) {
            const texPrecision = useHighP ? "highmedp" : "mediump";
            return [`#ifdef GL_FRAGMENT_PRECISION_HIGH`, `#define highmedp highp`, `#else`, `#define highmedp mediump`, `#endif`, `attribute highp vec3 aPos;`, `attribute ${texPrecision} vec2 aTex;`, `varying ${texPrecision} vec2 vTex;`, `uniform highp mat4 matP;`, `uniform highp mat4 matMV;`, `void main(void) {`, `	gl_Position = matP * matMV * vec4(aPos, 1.0);`,
                `	vTex = aTex;`, `}`
            ].join("\n")
        }
        static GetDefaultVertexShaderSource_WebGL2(useHighP) {
            const texPrecision = useHighP ? "highp" : "mediump";
            return [`#version 300 es`, `in highp vec3 aPos;`, `in ${texPrecision} vec2 aTex;`, `out ${texPrecision} vec2 vTex;`, `uniform highp mat4 matP;`, `uniform highp mat4 matMV;`, `void main(void) {`, `	gl_Position = matP * matMV * vec4(aPos, 1.0);`, `	vTex = aTex;`, `}`].join("\n")
        }
        static GetTextureFillFragmentShaderSource_WebGL1_NoFragDepth() {
            return ["varying mediump vec2 vTex;", "uniform lowp vec4 color;",
                "uniform lowp sampler2D samplerFront;", "void main(void) {", "\tgl_FragColor = texture2D(samplerFront, vTex) * color;", "}"
            ].join("\n")
        }
        static GetTextureFillFragmentShaderSource_WebGL1_FragDepthEXT() {
            return ["#extension GL_EXT_frag_depth : enable", "varying mediump vec2 vTex;", "uniform lowp vec4 color;", "uniform lowp sampler2D samplerFront;", "void main(void) {", "\tgl_FragColor = texture2D(samplerFront, vTex) * color;", "\tgl_FragDepthEXT = (gl_FragColor.a == 0.0 ? 1.0 : gl_FragCoord.z);", "}"].join("\n")
        }
        static GetTextureFillFragmentShaderSource_WebGL2() {
            return ["#version 300 es",
                "in mediump vec2 vTex;", "out lowp vec4 outColor;", "uniform lowp vec4 color;", "uniform lowp sampler2D samplerFront;", "void main(void) {", "\toutColor = texture(samplerFront, vTex) * color;", "\tgl_FragDepth = (outColor.a == 0.0 ? 1.0 : gl_FragCoord.z);", "}"
            ].join("\n")
        }
        static GetTilemapFragmentShaderSource_WebGL1_NoFragDepth() {
            return ["#ifdef GL_FRAGMENT_PRECISION_HIGH", "#define highmedp highp", "#else", "#define highmedp mediump", "#endif", "varying highmedp vec2 vTex;", "uniform lowp vec4 color;", "uniform lowp sampler2D samplerFront;",
                "uniform highmedp vec2 srcStart;", "uniform highmedp vec2 pixelSize;", "uniform highmedp vec2 tileSize;", "uniform highmedp vec2 tileSpacing;", "void main(void) {", "\thighmedp vec2 tile = floor(vTex);", "\thighmedp vec2 tex = fract(vTex);", "\thighmedp vec2 tileOrigin = srcStart + tile * (tileSize + tileSpacing);", "\thighmedp vec2 lowerBound = tileOrigin + pixelSize / 2.0;", "\thighmedp vec2 upperBound = tileOrigin + tileSize - pixelSize / 2.0;", "\tgl_FragColor = texture2D(samplerFront, clamp(tex, lowerBound, upperBound), -16.0) * color;",
                "}"
            ].join("\n")
        }
        static GetTilemapFragmentShaderSource_WebGL1_FragDepthEXT() {
            return ["#extension GL_EXT_frag_depth : enable", "#ifdef GL_FRAGMENT_PRECISION_HIGH", "#define highmedp highp", "#else", "#define highmedp mediump", "#endif", "varying highmedp vec2 vTex;", "uniform lowp vec4 color;", "uniform lowp sampler2D samplerFront;", "uniform highmedp vec2 srcStart;", "uniform highmedp vec2 pixelSize;", "uniform highmedp vec2 tileSize;", "uniform highmedp vec2 tileSpacing;", "void main(void) {", "\thighmedp vec2 tile = floor(vTex);",
                "\thighmedp vec2 tex = fract(vTex);", "\thighmedp vec2 tileOrigin = srcStart + tile * (tileSize + tileSpacing);", "\thighmedp vec2 lowerBound = tileOrigin + pixelSize / 2.0;", "\thighmedp vec2 upperBound = tileOrigin + tileSize - pixelSize / 2.0;", "\tgl_FragColor = texture2D(samplerFront, clamp(tex, lowerBound, upperBound), -16.0) * color;", "\tgl_FragDepthEXT = (gl_FragColor.a == 0.0 ? 1.0 : gl_FragCoord.z);", "}"
            ].join("\n")
        }
        static GetTilemapFragmentShaderSource_WebGL2() {
            return ["#version 300 es", "in highp vec2 vTex;",
                "out lowp vec4 outColor;", "uniform lowp vec4 color;", "uniform lowp sampler2D samplerFront;", "uniform highp vec2 srcStart;", "uniform highp vec2 pixelSize;", "uniform highp vec2 tileSize;", "uniform highp vec2 tileSpacing;", "void main(void) {", "\thighp vec2 tile = floor(vTex);", "\thighp vec2 tex = fract(vTex);", "\thighp vec2 tileOrigin = srcStart + tile * (tileSize + tileSpacing);", "\thighp vec2 lowerBound = tileOrigin + pixelSize / 2.0;", "\thighp vec2 upperBound = tileOrigin + tileSize - pixelSize / 2.0;",
                "\toutColor = texture(samplerFront, clamp(tex, lowerBound, upperBound), -16.0) * color;", "\tgl_FragDepth = (outColor.a == 0.0 ? 1.0 : gl_FragCoord.z);", "}"
            ].join("\n")
        }
        static GetTileRandomizationFragmentShaderSource(webGLVer, hasFragDepthExt, useDerivatives) {
            let prefix = "";
            if (webGLVer >= 2) prefix = "#version 300 es\n";
            else {
                if (hasFragDepthExt) prefix = "#extension GL_EXT_frag_depth : enable\n";
                if (useDerivatives) {
                    prefix += "#extension GL_EXT_shader_texture_lod : enable\n";
                    prefix += "#extension GL_OES_standard_derivatives : enable\n"
                }
            }
            return prefix +
                `
#ifdef GL_FRAGMENT_PRECISION_HIGH
#define highmedp highp
#else
#define highmedp mediump
#endif
precision highmedp float;
${webGLVer>=2?"in":"varying"} vec2 vTex;
${webGLVer>=2?"out lowp vec4 outColor;":""}
uniform lowp vec4 color;
uniform lowp sampler2D samplerFront;
uniform vec2 pixelSize;

uniform vec2 tileSize;
uniform vec2 tileSpacing;
uniform float outlineThickness;

const float PI = 3.1415926;

lowp vec4 cospVec4(lowp vec4 a, lowp vec4 b, float x)
{
	return (a + b + (a - b) * cos(x * PI)) / 2.0;
}

vec3 randVec3(vec2 seed)
{
	return vec3(fract(sin(dot(seed.xy + vec2(0.1, 0.1), vec2(12.9898,78.233))) * 43758.5453),
				fract(sin(dot(seed.yx + vec2(0.1, 0.1), vec2(12.9898,-78.233))) * 43758.5453),
				fract(sin(dot(seed.xy + vec2(0.1, 0.1), vec2(-12.9898,-78.233))) * 43758.5453));
}

lowp vec4 sampleTile(vec2 tile, vec2 uv, vec2 ddx, vec2 ddy)
{
	vec2 posRandom = tileSize;
	float angleRandom = outlineThickness;
	
	vec3 rand = (randVec3(floor(tile + 0.5)) - 0.5) * 2.0;
	
	float angle = angleRandom * rand.z * PI;
	float sin_a = sin(angle);
	float cos_a = cos(angle);
	float aspect = pixelSize.x / pixelSize.y;

	vec2 mid = tile + vec2(0.5, 0.5);
	vec2 dp = uv - mid;
	dp.x /= aspect;
	vec2 r = vec2(dp.x * cos_a - dp.y * sin_a,
				  dp.y * cos_a + dp.x * sin_a);
	r.x *= aspect;

	vec2 p = mid + r + (posRandom * rand.xy / 2.0);
	
	${webGLVer>=2?"return textureGrad(samplerFront, p, ddx, ddy);":""}
	${webGLVer<2&&useDerivatives?"return texture2DGradEXT(samplerFront, p, ddx, ddy);":""}
	${webGLVer<2&&!useDerivatives?"return texture2D(samplerFront, p);":""}
}

void main(void) {
	
	${webGLVer<2?"lowp vec4 outColor;":""}
	
	float blendMarginX = tileSpacing.x;
	float blendMarginY = tileSpacing.y;
	
	vec2 tile = floor(vTex);
	vec2 tex = fract(vTex);
	vec2 ddx = ${webGLVer>=2||useDerivatives?"dFdx(vTex)":"vec2(0.0, 0.0)"};
	vec2 ddy = ${webGLVer>=2||useDerivatives?"dFdy(vTex)":"vec2(0.0, 0.0)"};
	
	vec4 curTile = sampleTile(tile, vTex, ddx, ddy);
	
	bool inLeftMargin = (tex.x < blendMarginX);
	bool inRightMargin = (tex.x > 1.0 - blendMarginX);
	bool inTopMargin = (tex.y < blendMarginY);
	bool inBottomMargin = (tex.y > 1.0 - blendMarginY);
	
	if (inLeftMargin)
	{
		lowp vec4 leftTile = sampleTile(tile + vec2(-1.0, 0.0), vTex, ddx, ddy);
		float leftMix = (tex.x / (blendMarginX * 2.0)) + 0.5;
		lowp vec4 leftMixedTile = cospVec4(leftTile, curTile, leftMix);
		
		if (inTopMargin)
		{
			lowp vec4 topTile =     sampleTile(tile + vec2(0.0,  -1.0), vTex, ddx, ddy);
			lowp vec4 topLeftTile = sampleTile(tile + vec2(-1.0, -1.0), vTex, ddx, ddy);
			lowp vec4 topLeftMixedTile = cospVec4(topLeftTile, topTile, leftMix);
			
			outColor = cospVec4(topLeftMixedTile, leftMixedTile, (tex.y / (blendMarginY * 2.0)) + 0.5);
		}
		else if (inBottomMargin)
		{
			lowp vec4 bottomTile =     sampleTile(tile + vec2(0.0,  1.0), vTex, ddx, ddy);
			lowp vec4 bottomLeftTile = sampleTile(tile + vec2(-1.0, 1.0), vTex, ddx, ddy);
			lowp vec4 bottomLeftMixedTile = cospVec4(bottomLeftTile, bottomTile, leftMix);
			
			outColor = cospVec4(leftMixedTile, bottomLeftMixedTile, (tex.y - (1.0 - blendMarginY)) / (blendMarginY * 2.0));
		}
		else
		{
			outColor = leftMixedTile;
		}
	}
	else if (inRightMargin)
	{
		lowp vec4 rightTile = sampleTile(tile + vec2(1.0, 0.0), vTex, ddx, ddy);
		float rightMix = (tex.x - (1.0 - blendMarginX)) / (blendMarginX * 2.0);
		lowp vec4 rightMixedTile = cospVec4(curTile, rightTile, rightMix);
		
		if (inTopMargin)
		{
			lowp vec4 topTile =      sampleTile(tile + vec2(0.0, -1.0), vTex, ddx, ddy);
			lowp vec4 topRightTile = sampleTile(tile + vec2(1.0, -1.0), vTex, ddx, ddy);
			lowp vec4 topRightMixedTile = cospVec4(topTile, topRightTile, rightMix);
			
			outColor = cospVec4(topRightMixedTile, rightMixedTile, (tex.y / (blendMarginY * 2.0)) + 0.5);
		}
		else if (inBottomMargin)
		{
			lowp vec4 bottomTile =      sampleTile(tile + vec2(0.0, 1.0), vTex, ddx, ddy);
			lowp vec4 bottomRightTile = sampleTile(tile + vec2(1.0, 1.0), vTex, ddx, ddy);
			lowp vec4 bottomRightMixedTile = cospVec4(bottomTile, bottomRightTile, rightMix);
			
			outColor = cospVec4(rightMixedTile, bottomRightMixedTile, (tex.y - (1.0 - blendMarginY)) / (blendMarginY * 2.0));
		}
		else
		{
			outColor = rightMixedTile;
		}
	}
	else if (inTopMargin)
	{
		lowp vec4 topTile = sampleTile(tile + vec2(0.0, -1.0), vTex, ddx, ddy);
		outColor = cospVec4(topTile, curTile, (tex.y / (blendMarginY * 2.0)) + 0.5);
	}
	else if (inBottomMargin)
	{
		lowp vec4 bottomTile = sampleTile(tile + vec2(0.0, 1.0), vTex, ddx, ddy);
		outColor = cospVec4(curTile, bottomTile, (tex.y - (1.0 - blendMarginY)) / (blendMarginY * 2.0));
	}
	else
	{
		outColor = curTile;
	}
	
	outColor *= color;
	${webGLVer<2?"gl_FragColor = outColor;":""}
	${webGLVer>=2?"gl_FragDepth = (outColor.a == 0.0 ? 1.0 : gl_FragCoord.z);":""}
	${webGLVer<2&&hasFragDepthExt?"gl_FragDepthEXT = (outColor.a == 0.0 ? 1.0 : gl_FragCoord.z);":""}
}
`
        }
        static GetPointVertexShaderSource_WebGL1() {
            return ["attribute vec4 aPoints;", "varying float pointOpacity;", "uniform float zElevation;", "uniform mat4 matP;", "uniform mat4 matMV;", "void main(void) {", "\tgl_Position = matP * matMV * vec4(aPoints.xy, zElevation, 1.0);", "\tgl_PointSize = aPoints.z;", "\tpointOpacity = aPoints.w;", "}"].join("\n")
        }
        static GetPointVertexShaderSource_WebGL2() {
            return ["#version 300 es", "in vec4 aPoints;", "out float pointOpacity;", "uniform float zElevation;", "uniform mat4 matP;",
                "uniform mat4 matMV;", "void main(void) {", "\tgl_Position = matP * matMV * vec4(aPoints.xy, zElevation, 1.0);", "\tgl_PointSize = aPoints.z;", "\tpointOpacity = aPoints.w;", "}"
            ].join("\n")
        }
        static GetPointFragmentShaderSource_WebGL1_NoFragDepth() {
            return ["uniform lowp sampler2D samplerFront;", "varying lowp float pointOpacity;", "uniform mediump vec2 pointTexStart;", "uniform mediump vec2 pointTexEnd;", "uniform lowp vec4 color;", "void main(void) {", "\tmediump vec2 pointTexMin = min(pointTexStart, pointTexEnd);",
                "\tmediump vec2 pointTexMax = max(pointTexStart, pointTexEnd);", "\tmediump vec2 pointCoord = (pointTexEnd.x > pointTexStart.x ? gl_PointCoord : vec2(1.0 - gl_PointCoord.y, gl_PointCoord.x));", "\tgl_FragColor = texture2D(samplerFront, mix(pointTexMin, pointTexMax, pointCoord)) * color * pointOpacity;", "}"
            ].join("\n")
        }
        static GetPointFragmentShaderSource_WebGL1_FragDepthEXT() {
            return ["#extension GL_EXT_frag_depth : enable", "uniform lowp sampler2D samplerFront;", "varying lowp float pointOpacity;", "uniform mediump vec2 pointTexStart;",
                "uniform mediump vec2 pointTexEnd;", "uniform lowp vec4 color;", "void main(void) {", "\tmediump vec2 pointTexMin = min(pointTexStart, pointTexEnd);", "\tmediump vec2 pointTexMax = max(pointTexStart, pointTexEnd);", "\tmediump vec2 pointCoord = (pointTexEnd.x > pointTexStart.x ? gl_PointCoord : vec2(1.0 - gl_PointCoord.y, gl_PointCoord.x));", "\tgl_FragColor = texture2D(samplerFront, mix(pointTexMin, pointTexMax, pointCoord)) * color * pointOpacity;", "\tgl_FragDepthEXT = (gl_FragColor.a == 0.0 ? 1.0 : gl_FragCoord.z);",
                "}"
            ].join("\n")
        }
        static GetPointFragmentShaderSource_WebGL2() {
            return ["#version 300 es", "uniform lowp sampler2D samplerFront;", "in lowp float pointOpacity;", "uniform mediump vec2 pointTexStart;", "uniform mediump vec2 pointTexEnd;", "uniform lowp vec4 color;", "out lowp vec4 outColor;", "void main(void) {", "\tmediump vec2 pointTexMin = min(pointTexStart, pointTexEnd);", "\tmediump vec2 pointTexMax = max(pointTexStart, pointTexEnd);", "\tmediump vec2 pointCoord = (pointTexEnd.x > pointTexStart.x ? gl_PointCoord : vec2(1.0 - gl_PointCoord.y, gl_PointCoord.x));",
                "\toutColor = texture(samplerFront, mix(pointTexMin, pointTexMax, pointCoord)) * color * pointOpacity;", "\tgl_FragDepth = (outColor.a == 0.0 ? 1.0 : gl_FragCoord.z);", "}"
            ].join("\n")
        }
        static GetColorFillFragmentShaderSource() {
            return ["uniform lowp vec4 color;", "void main(void) {", "\tgl_FragColor = color;", "}"].join("\n")
        }
        static GetLinearGradientFillFragmentShaderSource() {
            return ["precision lowp float;", "varying mediump vec2 vTex;", "uniform vec4 color;", "uniform vec4 color2_;", "vec3 fromLinear(vec3 linearRGB)",
                "{", "\tbvec3 cutoff = lessThan(linearRGB, vec3(0.0031308));", "\tvec3 higher = vec3(1.055) * pow(abs(linearRGB), vec3(1.0/2.4)) - vec3(0.055);", "\tvec3 lower = linearRGB * vec3(12.92);", "\treturn mix(higher, lower, vec3(cutoff));", "}", "vec3 toLinear(vec3 sRGB)", "{", "\tbvec3 cutoff = lessThan(sRGB, vec3(0.04045));", "\tvec3 higher = pow(abs((sRGB + vec3(0.055))/vec3(1.055)), vec3(2.4));", "\tvec3 lower = sRGB/vec3(12.92);", "\treturn mix(higher, lower, vec3(cutoff));", "}", "void main(void) {", "\tvec3 linearGrad = mix(toLinear(color.rgb), toLinear(color2_.rgb), vTex.x);",
                "\tfloat a = mix(color.a, color2_.a, vTex.x);", "\tgl_FragColor = vec4(fromLinear(linearGrad) * a, a);", "}"
            ].join("\n")
        }
        static GetPenumbraFillFragmentShaderSource() {
            return [`#ifdef GL_FRAGMENT_PRECISION_HIGH`, `#define highmedp highp`, `#else`, `#define highmedp mediump`, `#endif`, `precision lowp float;`, `varying highmedp vec2 vTex;`, `uniform vec4 color;`, `void main(void) {`, `	highmedp float grad = vTex.x / (1.0 - vTex.y);`, `	gl_FragColor = color * (1.0 - (cos(grad * 3.141592653589793) + 1.0) / 2.0);`,
                `}`
            ].join("\n")
        }
        static GetSmoothLineFillFragmentShaderSource() {
            return ["varying mediump vec2 vTex;", "uniform lowp vec4 color;", "void main(void) {", "\tlowp float f = 1.0 - abs(vTex.y - 0.5) * 2.0;", "\tgl_FragColor = color * f;", "}"].join("\n")
        }
        static GetHardEllipseFillFragmentShaderSource() {
            return ["varying mediump vec2 vTex;", "uniform lowp vec4 color;", "void main(void) {", "\tmediump vec2 diff = vTex - vec2(0.5, 0.5);", "\tmediump vec2 diffSq = diff * diff;", "\tmediump float f = step(diffSq.x + diffSq.y, 0.25);",
                "\tgl_FragColor = color * f;", "}"
            ].join("\n")
        }
        static GetHardEllipseOutlineFragmentShaderSource() {
            return ["varying mediump vec2 vTex;", "uniform lowp vec4 color;", "uniform mediump vec2 pixelSize;", "uniform mediump float outlineThickness;", "void main(void) {", "\tmediump vec2 diff = vTex - vec2(0.5, 0.5);", "\tmediump vec2 diffSq = diff * diff;", "\tmediump float distSq = diffSq.x + diffSq.y;", "\tmediump vec2 norm = normalize(diff);", "\tmediump vec2 halfNorm = norm * 0.5;", "\tmediump float innerF = step(distSq, 0.25);",
                "\tmediump vec2 innerEdge = halfNorm - pixelSize * norm * outlineThickness;", "\tmediump vec2 innerEdgeSq = innerEdge * innerEdge;", "\tmediump float outerF = step(innerEdgeSq.x + innerEdgeSq.y, distSq);", "\tgl_FragColor = color * innerF * outerF;", "}"
            ].join("\n")
        }
        static GetSmoothEllipseFillFragmentShaderSource() {
            return ["varying mediump vec2 vTex;", "uniform lowp vec4 color;", "uniform mediump vec2 pixelSize;", "void main(void) {", "\tmediump vec2 diff = vTex - vec2(0.5, 0.5);", "\tmediump vec2 diffSq = diff * diff;",
                "\tmediump vec2 norm = normalize(diff);", "\tmediump vec2 halfNorm = norm * 0.5;", "\tmediump vec2 halfNormSq = halfNorm * halfNorm;", "\tmediump vec2 innerEdge = halfNorm - pixelSize * norm;", "\tmediump vec2 innerEdgeSq = innerEdge * innerEdge;", "\tmediump float f = smoothstep(halfNormSq.x + halfNormSq.y, innerEdgeSq.x + innerEdgeSq.y, diffSq.x + diffSq.y);", "\tgl_FragColor = color * f;", "}"
            ].join("\n")
        }
        static GetSmoothEllipseOutlineFragmentShaderSource() {
            return ["varying mediump vec2 vTex;", "uniform lowp vec4 color;",
                "uniform mediump vec2 pixelSize;", "uniform mediump float outlineThickness;", "void main(void) {", "\tmediump vec2 diff = vTex - vec2(0.5, 0.5);", "\tmediump vec2 diffSq = diff * diff;", "\tmediump float distSq = diffSq.x + diffSq.y;", "\tmediump vec2 norm = normalize(diff);", "\tmediump vec2 halfNorm = norm * 0.5;", "\tmediump vec2 halfNormSq = halfNorm * halfNorm;", "\tmediump vec2 pxNorm = pixelSize * norm;", "\tmediump vec2 innerEdge1 = halfNorm - pxNorm;", "\tmediump vec2 innerEdge1Sq = innerEdge1 * innerEdge1;",
                "\tmediump float innerF = smoothstep(halfNormSq.x + halfNormSq.y, innerEdge1Sq.x + innerEdge1Sq.y, distSq);", "\tmediump vec2 innerEdge2 = halfNorm - pxNorm * outlineThickness;", "\tmediump vec2 innerEdge2Sq = innerEdge2 * innerEdge2;", "\tmediump vec2 innerEdge3 = halfNorm - pxNorm * (outlineThickness + 1.0);", "\tmediump vec2 innerEdge3Sq = innerEdge3 * innerEdge3;", "\tmediump float outerF = smoothstep(innerEdge3Sq.x + innerEdge3Sq.y, innerEdge2Sq.x + innerEdge2Sq.y, distSq);", "\tgl_FragColor = color * innerF * outerF;",
                "}"
            ].join("\n")
        }
    };

}

// ../lib/gfx/webgl/shaderUniform.js
{
    'use strict';
    const C3 = self.C3;
    const glMatrix = self.glMatrix;
    const mat4 = glMatrix.mat4;
    const TYPE_SIZES = new Map([
        ["float", 1],
        ["percent", 1],
        ["sampler", 1],
        ["vec2", 2],
        ["vec3", 3],
        ["color", 3],
        ["vec4", 4],
        ["mat4", 16]
    ]);
    C3.Gfx.WebGLShaderUniform = class WebGLShaderUniform {
        constructor(owner, name, type) {
            if (!TYPE_SIZES.has(type)) throw new Error("invalid uniform type");
            this._owner = owner;
            this._gl = this._owner.GetWebGLContext();
            this._name = name;
            this._type = type;
            this._isColorType = this._type === "color";
            this._location = this._gl.getUniformLocation(this._owner.GetShaderProgram(), name);
            this._isUsed = !!this._location;
            const typeSize = TYPE_SIZES.get(type);
            this._lastValue = new Float32Array(typeSize);
            this._lastBatchValue = new Float32Array(typeSize)
        }
        Release() {
            this._owner =
                null;
            this._gl = null;
            this._location = null
        }
        IsUsed() {
            return this._isUsed
        }
        GetType() {
            return this._type
        }
        IsColorType() {
            return this._isColorType
        }
        Init1f(v0) {
            if (!this.IsUsed()) return;
            this._lastValue[0] = v0;
            this._lastBatchValue.set(this._lastValue);
            this._gl.uniform1f(this._location, v0)
        }
        Init1i(v0) {
            if (!this.IsUsed()) return;
            this._lastValue[0] = v0;
            this._lastBatchValue.set(this._lastValue);
            this._gl.uniform1i(this._location, v0)
        }
        Init2f(v0, v1) {
            if (!this.IsUsed()) return;
            this._lastValue[0] = v0;
            this._lastValue[1] = v1;
            this._lastBatchValue.set(this._lastValue);
            this._gl.uniform2f(this._location, v0, v1)
        }
        Init3f(v0, v1, v2) {
            if (!this.IsUsed()) return;
            this._lastValue[0] = v0;
            this._lastValue[1] = v1;
            this._lastValue[2] = v2;
            this._lastBatchValue.set(this._lastValue);
            this._gl.uniform3f(this._location, v0, v1, v2)
        }
        Init4f(v0, v1, v2, v3) {
            if (!this.IsUsed()) return;
            this._lastValue[0] = v0;
            this._lastValue[1] = v1;
            this._lastValue[2] = v2;
            this._lastValue[3] = v3;
            this._lastBatchValue.set(this._lastValue);
            this._gl.uniform4f(this._location, v0, v1, v2, v3)
        }
        Update1f(v0) {
            v0 = Math.fround(v0);
            const lastValue =
                this._lastValue;
            if (lastValue[0] === v0) return;
            lastValue[0] = v0;
            this._gl.uniform1f(this._location, v0)
        }
        Update1i(v0) {
            const lastValue = this._lastValue;
            if (lastValue[0] === v0) return;
            lastValue[0] = v0;
            this._gl.uniform1i(this._location, v0)
        }
        Update2f(v0, v1) {
            v0 = Math.fround(v0);
            v1 = Math.fround(v1);
            const lastValue = this._lastValue;
            if (lastValue[0] === v0 && lastValue[1] === v1) return;
            lastValue[0] = v0;
            lastValue[1] = v1;
            this._gl.uniform2f(this._location, v0, v1)
        }
        Update3f(v0, v1, v2) {
            v0 = Math.fround(v0);
            v1 = Math.fround(v1);
            v2 = Math.fround(v2);
            const lastValue = this._lastValue;
            if (lastValue[0] === v0 && lastValue[1] === v1 && lastValue[2] === v2) return;
            lastValue[0] = v0;
            lastValue[1] = v1;
            lastValue[2] = v2;
            this._gl.uniform3f(this._location, v0, v1, v2)
        }
        Update4f(v0, v1, v2, v3) {
            v0 = Math.fround(v0);
            v1 = Math.fround(v1);
            v2 = Math.fround(v2);
            v3 = Math.fround(v3);
            const lastValue = this._lastValue;
            if (lastValue[0] === v0 && lastValue[1] === v1 && lastValue[2] === v2 && lastValue[3] === v3) return;
            lastValue[0] = v0;
            lastValue[1] = v1;
            lastValue[2] = v2;
            lastValue[3] = v3;
            this._gl.uniform4f(this._location,
                v0, v1, v2, v3)
        }
        UpdateMatrix4fv(m) {
            const lastValue = this._lastValue;
            if (mat4.exactEquals(lastValue, m)) return;
            C3.typedArraySet16(lastValue, m, 0);
            this._gl.uniformMatrix4fv(this._location, false, m)
        }
        IsSetToCustomInBatch(p) {
            const batchValue = this._lastBatchValue;
            if (this.IsColorType()) return batchValue[0] === Math.fround(p.getR()) && batchValue[1] === Math.fround(p.getG()) && batchValue[2] === Math.fround(p.getB());
            else return batchValue[0] === Math.fround(p)
        }
        SetBatchValueCustom(p) {
            const batchValue = this._lastBatchValue;
            if (this.IsColorType()) {
                batchValue[0] =
                    p.getR();
                batchValue[1] = p.getG();
                batchValue[2] = p.getB()
            } else batchValue[0] = p
        }
        IsSetTo1InBatch(x) {
            return this._lastBatchValue[0] === Math.fround(x)
        }
        IsSetTo2InBatch(x, y) {
            const batchValue = this._lastBatchValue;
            return batchValue[0] === Math.fround(x) && batchValue[1] === Math.fround(y)
        }
        SetBatch1(x) {
            this._lastBatchValue[0] = x
        }
        SetBatch2(x, y) {
            const batchValue = this._lastBatchValue;
            batchValue[0] = x;
            batchValue[1] = y
        }
    };

}

// ../lib/gfx/webgl/batchJob.js
{
    'use strict';
    const C3 = self.C3;
    const glMatrix = self.glMatrix;
    const vec4 = glMatrix.vec4;
    const mat4 = glMatrix.mat4;
    const BATCH_NULL = 0;
    const BATCH_QUAD = 1;
    const BATCH_SETTEXTURE = 2;
    const BATCH_SETCOLOR = 3;
    const BATCH_SETBLEND = 4;
    const BATCH_SETVIEWPORT = 5;
    const BATCH_SETPROJECTION = 6;
    const BATCH_SETMODELVIEW = 7;
    const BATCH_SETRENDERTARGET = 8;
    const BATCH_CLEARSURFACE = 9;
    const BATCH_POINTS = 10;
    const BATCH_SETPROGRAM = 11;
    const BATCH_SETPROGRAMPARAMETERS = 12;
    const BATCH_SETPROGRAMCUSTOMPARAMETERS = 13;
    const BATCH_INVALIDATEFRAMEBUFFER = 14;
    const BATCH_SETPOINTTEXCOORDS = 15;
    const BATCH_SETTILEMAPINFO = 16;
    const BATCH_BLITFRAMEBUFFER = 17;
    const BATCH_STARTQUERY = 18;
    const BATCH_ENDQUERY = 19;
    const BATCH_SETELLIPSEPARAMS = 20;
    const BATCH_SETGRADIENTCOLOR = 21;
    const BATCH_CLEARDEPTH = 22;
    const BATCH_SETDEPTHENABLED = 23;
    const BATCH_SETDEPTHSAMPLINGENABLED = 24;
    const BATCH_COPLANAR_STARTSTENCILPASS = 25;
    const BATCH_COPLANAR_STARTCOLORPASS = 26;
    const BATCH_COPLANAR_RESTORE = 27;
    const BATCH_SET_SCISSOR = 28;
    const BATCH_SETTILERANDOMIZATIONINFO = 29;
    C3.Gfx.BatchState = class BatchState {
        constructor(renderer) {
            this.renderer = renderer;
            this.currentMV = mat4.create();
            this.currentMatP = mat4.create();
            this.currentFramebuffer = null;
            this.currentFramebufferNoDepth = null;
            this.isDepthSamplingEnabled = false;
            this.currentColor = vec4.fromValues(1, 1, 1, 1);
            this.currentShader = null;
            this.pointTexCoords = new C3.Rect;
            this.clearColor = C3.New(C3.Color, 0, 0, 0, 0)
        }
    };
    C3.Gfx.WebGLBatchJob = class WebGLBatchJob {
        constructor(batchState) {
            const arrayBuffer = new ArrayBuffer(96);
            this._type = 0;
            this._batchState = batchState;
            this._gl = batchState.renderer.GetContext();
            this._startIndex = 0;
            this._indexCount = 0;
            this._texParam = null;
            this._mat4param = new Float32Array(arrayBuffer, 0, 16);
            this._colorParam = new Float32Array(arrayBuffer, 64, 4);
            this._srcOriginRect = new Float32Array(arrayBuffer, 80, 4);
            this._shaderParams = []
        }
        InitQuad(startIndex, indexCount) {
            this._type = BATCH_QUAD;
            this._startIndex = startIndex;
            this._indexCount = indexCount
        }
        DoQuad() {
            const gl = this._gl;
            gl.drawElements(gl.TRIANGLES, this._indexCount, gl.UNSIGNED_SHORT, this._startIndex)
        }
        InitSetTexture(rendererTex) {
            this._type = BATCH_SETTEXTURE;
            this._texParam = rendererTex
        }
        DoSetTexture() {
            const gl = this._gl;
            const texParam = this._texParam;
            gl.bindTexture(gl.TEXTURE_2D, texParam ? texParam._GetTexture() : null)
        }
        InitSetColor(c) {
            this._type = BATCH_SETCOLOR;
            c.writeToTypedArray(this._colorParam, 0)
        }
        DoSetColor() {
            const c = this._colorParam;
            const batchState = this._batchState;
            vec4.copy(batchState.currentColor, c);
            batchState.currentShader.UpdateColor(c)
        }
        InitSetGradientColor(c) {
            this._type = BATCH_SETGRADIENTCOLOR;
            c.writeToTypedArray(this._colorParam, 0)
        }
        DoSetGradientColor() {
            const c = this._colorParam;
            const s = this._batchState.currentShader;
            if (s._uColor2.IsUsed()) s._uColor2.Update4f(c[0], c[1], c[2], c[3])
        }
        InitSetBlend(s, d) {
            this._type = BATCH_SETBLEND;
            this._startIndex = s;
            this._indexCount = d
        }
        DoSetBlend() {
            this._gl.blendFunc(this._startIndex, this._indexCount)
        }
        InitSetViewport(x, y, w, h) {
            this._type =
                BATCH_SETVIEWPORT;
            const colorParam = this._colorParam;
            colorParam[0] = x;
            colorParam[1] = y;
            colorParam[2] = w;
            colorParam[3] = h
        }
        DoSetViewport() {
            const colorParam = this._colorParam;
            this._gl.viewport(colorParam[0], colorParam[1], colorParam[2], colorParam[3])
        }
        InitSetProjection(m) {
            this._type = BATCH_SETPROJECTION;
            mat4.copy(this._mat4param, m)
        }
        DoSetProjection() {
            const batchState = this._batchState;
            const allShaderPrograms = batchState.renderer._allShaderPrograms;
            const currentShader = batchState.currentShader;
            const mat4param = this._mat4param;
            for (let i = 0, len = allShaderPrograms.length; i < len; ++i) {
                const s = allShaderPrograms[i];
                if (s === currentShader) s.UpdateMatP(mat4param, true);
                else s.SetMatPStale()
            }
            mat4.copy(batchState.currentMatP, mat4param)
        }
        InitSetModelView(m) {
            this._type = BATCH_SETMODELVIEW;
            mat4.copy(this._mat4param, m)
        }
        DoSetModelView() {
            const batchState = this._batchState;
            const allShaderPrograms = batchState.renderer._allShaderPrograms;
            const currentShader = batchState.currentShader;
            const mat4param = this._mat4param;
            for (let i = 0, len = allShaderPrograms.length; i <
                len; ++i) {
                const s = allShaderPrograms[i];
                if (s === currentShader) s.UpdateMatMV(mat4param, true);
                else s.SetMatMVStale()
            }
            mat4.copy(batchState.currentMV, mat4param)
        }
        InitSetRenderTarget(renderTarget) {
            this._type = BATCH_SETRENDERTARGET;
            this._texParam = renderTarget
        }
        DoSetRenderTarget() {
            const gl = this._gl;
            const renderTarget = this._texParam;
            const batchState = this._batchState;
            if (renderTarget) {
                batchState.currentFramebuffer = renderTarget._GetFramebuffer();
                batchState.currentFramebufferNoDepth = renderTarget._GetFramebufferNoDepth();
                if (batchState.isDepthSamplingEnabled && batchState.currentFramebufferNoDepth) gl.bindFramebuffer(gl.FRAMEBUFFER, batchState.currentFramebufferNoDepth);
                else gl.bindFramebuffer(gl.FRAMEBUFFER, batchState.currentFramebuffer)
            } else {
                batchState.currentFramebuffer = null;
                batchState.currentFramebufferNoDepth = null;
                gl.bindFramebuffer(gl.FRAMEBUFFER, null)
            }
        }
        InitClearSurface(c) {
            this._type = BATCH_CLEARSURFACE;
            c.writeToTypedArray(this._mat4param, 0)
        }
        InitClearSurface2(r, g, b, a) {
            this._type = BATCH_CLEARSURFACE;
            const c = this._mat4param;
            c[0] = r;
            c[1] = g;
            c[2] = b;
            c[3] = a
        }
        DoClearSurface() {
            const gl = this._gl;
            const mat4param = this._mat4param;
            const batchState = this._batchState;
            const lastClearColor = batchState.clearColor;
            const r = mat4param[0];
            const g = mat4param[1];
            const b = mat4param[2];
            const a = mat4param[3];
            if (!lastClearColor.equalsRgba(r, g, b, a)) {
                gl.clearColor(r, g, b, a);
                lastClearColor.setRgba(r, g, b, a)
            }
            gl.clear(gl.COLOR_BUFFER_BIT)
        }
        InitSetPointTexCoords(rect) {
            this._type = BATCH_SETPOINTTEXCOORDS;
            rect.writeToTypedArray(this._mat4param, 0)
        }
        DoSetPointTextureCoords() {
            const mat4param =
                this._mat4param;
            this._batchState.pointTexCoords.set(mat4param[0], mat4param[1], mat4param[2], mat4param[3])
        }
        InitPoints(startIndex, z) {
            this._type = BATCH_POINTS;
            this._startIndex = startIndex;
            this._indexCount = 1;
            this._mat4param[0] = z
        }
        DoPoints() {
            const gl = this._gl;
            const batchState = this._batchState;
            const renderer = batchState.renderer;
            const s = renderer._spPoints;
            gl.useProgram(s._shaderProgram);
            s.UpdateMatP(batchState.currentMatP, false);
            s.UpdateMatMV(batchState.currentMV, false);
            const ptc = batchState.pointTexCoords;
            if (s._uPointTexStart.IsUsed()) s._uPointTexStart.Update2f(ptc.getLeft(),
                ptc.getTop());
            if (s._uPointTexEnd.IsUsed()) s._uPointTexEnd.Update2f(ptc.getRight(), ptc.getBottom());
            const z = this._mat4param[0];
            if (s._uZElevation.IsUsed()) s._uZElevation.Update1f(z);
            if (s._uColor.IsUsed()) {
                const c = batchState.currentColor;
                s._uColor.Update4f(c[0], c[1], c[2], c[3])
            }
            gl.drawArrays(gl.POINTS, this._startIndex / 4, this._indexCount);
            gl.useProgram(batchState.currentShader._shaderProgram)
        }
        InitSetProgram(program) {
            this._type = BATCH_SETPROGRAM;
            this._texParam = program
        }
        DoSetProgram() {
            const gl = this._gl;
            const batchState =
                this._batchState;
            const s = this._texParam;
            batchState.currentShader = s;
            gl.useProgram(s._shaderProgram);
            s.UpdateMatP(batchState.currentMatP, false);
            s.UpdateMatMV(batchState.currentMV, false);
            if (s._uColor.IsUsed()) {
                const c = batchState.currentColor;
                s._uColor.Update4f(c[0], c[1], c[2], c[3])
            }
        }
        InitSetProgramParameters() {
            this._type = BATCH_SETPROGRAMPARAMETERS
        }
        DoSetProgramParameters() {
            const s = this._batchState.currentShader;
            const gl = this._gl;
            const mat4param = this._mat4param;
            const colorParam = this._colorParam;
            const srcOriginRect =
                this._srcOriginRect;
            if (s._uSamplerBack.IsUsed()) {
                const renderer = this._batchState.renderer;
                const texParam = this._texParam;
                if (renderer._lastTexture1 !== texParam) {
                    gl.activeTexture(gl.TEXTURE1);
                    gl.bindTexture(gl.TEXTURE_2D, texParam ? texParam._GetTexture() : null);
                    renderer._lastTexture1 = texParam;
                    gl.activeTexture(gl.TEXTURE0)
                }
            }
            if (s._uPixelSize.IsUsed()) s._uPixelSize.Update2f(mat4param[0], mat4param[1]);
            if (s._uDestStart.IsUsed()) s._uDestStart.Update2f(mat4param[2], mat4param[3]);
            if (s._uDestEnd.IsUsed()) s._uDestEnd.Update2f(mat4param[4],
                mat4param[5]);
            if (s._uDevicePixelRatio.IsUsed()) s._uDevicePixelRatio.Update1f(this._indexCount);
            if (s._uLayerScale.IsUsed()) s._uLayerScale.Update1f(mat4param[6]);
            if (s._uLayerAngle.IsUsed()) s._uLayerAngle.Update1f(mat4param[7]);
            if (s._uSrcStart.IsUsed()) s._uSrcStart.Update2f(mat4param[12], mat4param[13]);
            if (s._uSrcEnd.IsUsed()) s._uSrcEnd.Update2f(mat4param[14], mat4param[15]);
            if (s._uSrcOriginStart.IsUsed()) s._uSrcOriginStart.Update2f(srcOriginRect[0], srcOriginRect[1]);
            if (s._uSrcOriginEnd.IsUsed()) s._uSrcOriginEnd.Update2f(srcOriginRect[2],
                srcOriginRect[3]);
            if (s._uLayoutStart.IsUsed()) s._uLayoutStart.Update2f(colorParam[0], colorParam[1]);
            if (s._uLayoutEnd.IsUsed()) s._uLayoutEnd.Update2f(colorParam[2], colorParam[3]);
            if (s._uSeconds.IsUsed()) s._uSeconds.Update1f(this._startIndex)
        }
        InitSetProgramCustomParameters() {
            this._type = BATCH_SETPROGRAMCUSTOMPARAMETERS
        }
        DoSetProgramCustomParameters() {
            const s = this._batchState.currentShader;
            const uCustomParameters = s._uCustomParameters;
            const shaderParams = this._shaderParams;
            for (let i = 0, len = uCustomParameters.length; i <
                len; ++i) {
                const shaderUniform = uCustomParameters[i];
                const paramValue = shaderParams[i];
                if (shaderUniform.IsColorType()) shaderUniform.Update3f(paramValue.getR(), paramValue.getG(), paramValue.getB());
                else shaderUniform.Update1f(paramValue)
            }
        }
        InitInvalidateFramebuffer(fbo) {
            this._type = BATCH_INVALIDATEFRAMEBUFFER;
            this._texParam = fbo
        }
        DoInvalidateFramebuffer() {
            const gl = this._gl;
            const fbo = this._texParam;
            const lastBoundFbo = this._batchState.currentFramebuffer;
            if (fbo !== lastBoundFbo) gl.bindFramebuffer(gl.FRAMEBUFFER,
                fbo);
            gl.invalidateFramebuffer(gl.FRAMEBUFFER, [gl.COLOR_ATTACHMENT0]);
            if (fbo !== lastBoundFbo) gl.bindFramebuffer(gl.FRAMEBUFFER, lastBoundFbo)
        }
        InitBlitFramebuffer(sourceRenderTarget, destRenderTarget, mode) {
            this._type = BATCH_BLITFRAMEBUFFER;
            const mat4param = this._mat4param;
            const renderer = this._batchState.renderer;
            mat4param[0] = sourceRenderTarget.GetWidth();
            mat4param[1] = sourceRenderTarget.GetHeight();
            mat4param[2] = destRenderTarget ? destRenderTarget.GetWidth() : renderer.GetWidth();
            mat4param[3] = destRenderTarget ?
                destRenderTarget.GetHeight() : renderer.GetHeight();
            mat4param[4] = sourceRenderTarget.IsLinearSampling() ? 1 : 0;
            mat4param[5] = mode === "stretch";
            const shaderParams = this._shaderParams;
            C3.clearArray(shaderParams);
            shaderParams.push(sourceRenderTarget._GetFramebuffer());
            shaderParams.push(destRenderTarget ? destRenderTarget._GetFramebuffer() : null)
        }
        DoBlitFramebuffer() {
            const mat4param = this._mat4param;
            const shaderParams = this._shaderParams;
            const gl = this._gl;
            const srcWidth = mat4param[0];
            const srcHeight = mat4param[1];
            const destWidth =
                mat4param[2];
            const destHeight = mat4param[3];
            const isLinearSampling = mat4param[4] !== 0;
            const isStretch = mat4param[5] !== 0;
            const srcFbo = shaderParams[0];
            const destFbo = shaderParams[1];
            gl.bindFramebuffer(gl.READ_FRAMEBUFFER, srcFbo);
            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, destFbo);
            if (isStretch) gl.blitFramebuffer(0, 0, srcWidth, srcHeight, 0, 0, destWidth, destHeight, gl.COLOR_BUFFER_BIT, isLinearSampling ? gl.LINEAR : gl.NEAREST);
            else {
                const w = Math.min(srcWidth, destWidth);
                const h = Math.min(srcHeight, destHeight);
                const srcOffY =
                    Math.max(srcHeight - destHeight, 0);
                const destOffY = Math.max(destHeight - srcHeight, 0);
                gl.blitFramebuffer(0, srcOffY, w, h + srcOffY, 0, destOffY, w, h + destOffY, gl.COLOR_BUFFER_BIT, gl.NEAREST)
            }
        }
        InitStartQuery(query) {
            this._type = BATCH_STARTQUERY;
            this._texParam = query
        }
        DoStartQuery() {
            this._texParam.BeginTimeElapsed();
            this._texParam = null
        }
        InitEndQuery(query) {
            this._type = BATCH_ENDQUERY;
            this._texParam = query
        }
        DoEndQuery() {
            this._texParam.EndTimeElapsed();
            this._texParam = null
        }
        InitSetEllipseParams(pixelW, pixelH, outlineThickness) {
            this._type =
                BATCH_SETELLIPSEPARAMS;
            const mat4param = this._mat4param;
            mat4param[0] = pixelW;
            mat4param[1] = pixelH;
            mat4param[2] = outlineThickness
        }
        DoSetEllipseParams() {
            const s = this._batchState.currentShader;
            const mat4param = this._mat4param;
            if (s._uPixelSize.IsUsed()) s._uPixelSize.Update2f(mat4param[0], mat4param[1]);
            if (s._uOutlineThickness.IsUsed()) s._uOutlineThickness.Update1f(mat4param[2])
        }
        InitSetTilemapInfo(srcRect, textureWidth, textureHeight, tileWidth, tileHeight, tileSpacingX, tileSpacingY) {
            this._type = BATCH_SETTILEMAPINFO;
            const mat4param = this._mat4param;
            srcRect.writeToTypedArray(mat4param, 0);
            mat4param[4] = 1 / textureWidth;
            mat4param[5] = 1 / textureHeight;
            mat4param[6] = tileWidth / textureWidth;
            mat4param[7] = tileHeight / textureHeight;
            mat4param[8] = tileSpacingX / textureWidth;
            mat4param[9] = tileSpacingY / textureHeight
        }
        DoSetTilemapInfo() {
            const s = this._batchState.currentShader;
            const mat4param = this._mat4param;
            if (s._uSrcStart.IsUsed()) s._uSrcStart.Update2f(mat4param[0], mat4param[1]);
            if (s._uPixelSize.IsUsed()) s._uPixelSize.Update2f(mat4param[4],
                mat4param[5]);
            if (s._uTileSize.IsUsed()) s._uTileSize.Update2f(mat4param[6], mat4param[7]);
            if (s._uTileSpacing.IsUsed()) s._uTileSpacing.Update2f(mat4param[8], mat4param[9])
        }
        InitSetTileRandomizationInfo(textureWidth, textureHeight, xRandom, yRandom, angleRandom, blendMarginX, blendMarginY) {
            this._type = BATCH_SETTILERANDOMIZATIONINFO;
            const mat4param = this._mat4param;
            mat4param[0] = 1 / textureWidth;
            mat4param[1] = 1 / textureHeight;
            mat4param[2] = xRandom;
            mat4param[3] = yRandom;
            mat4param[4] = angleRandom;
            mat4param[5] = blendMarginX;
            mat4param[6] = blendMarginY
        }
        DoSetTileRandomizationInfo() {
            const s = this._batchState.currentShader;
            const mat4param = this._mat4param;
            if (s._uPixelSize.IsUsed()) s._uPixelSize.Update2f(mat4param[0], mat4param[1]);
            if (s._uTileSize.IsUsed()) s._uTileSize.Update2f(mat4param[2], mat4param[3]);
            if (s._uOutlineThickness.IsUsed()) s._uOutlineThickness.Update1f(mat4param[4]);
            if (s._uTileSpacing.IsUsed()) s._uTileSpacing.Update2f(mat4param[5], mat4param[6])
        }
        InitClearDepth(isDepthEnabled) {
            this._type = BATCH_CLEARDEPTH;
            this._startIndex =
                isDepthEnabled ? 1 : 0
        }
        DoClearDepth() {
            const gl = this._gl;
            const isDepthEnabled = this._startIndex !== 0;
            if (!isDepthEnabled) gl.depthMask(true);
            gl.clear(gl.DEPTH_BUFFER_BIT);
            if (!isDepthEnabled) gl.depthMask(false)
        }
        InitSetDepthEnabled(e) {
            this._type = BATCH_SETDEPTHENABLED;
            this._startIndex = e ? 1 : 0
        }
        DoSetDepthEnabled() {
            const gl = this._gl;
            if (this._startIndex === 0) {
                gl.disable(gl.DEPTH_TEST);
                gl.depthMask(false)
            } else {
                gl.enable(gl.DEPTH_TEST);
                gl.depthMask(true)
            }
        }
        InitSetDepthSamplingEnabled(e) {
            this._type = BATCH_SETDEPTHSAMPLINGENABLED;
            this._startIndex = e ? 1 : 0
        }
        DoSetDepthSamplingEnabled() {
            const gl = this._gl;
            const batchState = this._batchState;
            const renderer = batchState.renderer;
            const isDepthSamplingEnabled = this._startIndex !== 0;
            batchState.isDepthSamplingEnabled = isDepthSamplingEnabled;
            gl.activeTexture(gl.TEXTURE2);
            if (isDepthSamplingEnabled) {
                if (batchState.currentFramebufferNoDepth) gl.bindFramebuffer(gl.FRAMEBUFFER, batchState.currentFramebufferNoDepth);
                gl.bindTexture(gl.TEXTURE_2D, renderer._GetDepthBuffer())
            } else {
                gl.bindTexture(gl.TEXTURE_2D,
                    null);
                if (batchState.currentFramebufferNoDepth) gl.bindFramebuffer(gl.FRAMEBUFFER, batchState.currentFramebuffer)
            }
            gl.activeTexture(gl.TEXTURE0)
        }
        InitCoplanarStartStencilPass() {
            this._type = BATCH_COPLANAR_STARTSTENCILPASS
        }
        DoCoplanarStartStencilPass() {
            const gl = this._gl;
            gl.clear(gl.STENCIL_BUFFER_BIT);
            gl.enable(gl.STENCIL_TEST);
            gl.stencilFunc(gl.ALWAYS, 1, 1);
            gl.stencilOp(gl.KEEP, gl.KEEP, gl.REPLACE);
            gl.colorMask(false, false, false, false)
        }
        InitCoplanarStartColorPass() {
            this._type = BATCH_COPLANAR_STARTCOLORPASS
        }
        DoCoplanarStartColorPass() {
            const gl =
                this._gl;
            gl.colorMask(true, true, true, true);
            gl.stencilFunc(gl.EQUAL, 1, 1);
            gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP)
        }
        InitCoplanarRestore() {
            this._type = BATCH_COPLANAR_RESTORE
        }
        DoCoplanarRestore() {
            const gl = this._gl;
            gl.disable(gl.STENCIL_TEST)
        }
        InitSetScissor(enable, x, y, w, h) {
            this._type = BATCH_SET_SCISSOR;
            this._startIndex = enable ? 1 : 0;
            const mat4param = this._mat4param;
            mat4param[0] = x;
            mat4param[1] = y;
            mat4param[2] = w;
            mat4param[3] = h
        }
        DoSetScissor() {
            const gl = this._gl;
            const mat4param = this._mat4param;
            if (this._startIndex === 1) {
                gl.enable(gl.SCISSOR_TEST);
                gl.scissor(mat4param[0], mat4param[1], mat4param[2], mat4param[3])
            } else gl.disable(gl.SCISSOR_TEST)
        }
        Run() {
            switch (this._type) {
                case 1:
                    this.DoQuad();
                    return;
                case 2:
                    this.DoSetTexture();
                    return;
                case 3:
                    this.DoSetColor();
                    return;
                case 4:
                    this.DoSetBlend();
                    return;
                case 5:
                    this.DoSetViewport();
                    return;
                case 6:
                    this.DoSetProjection();
                    return;
                case 7:
                    this.DoSetModelView();
                    return;
                case 8:
                    this.DoSetRenderTarget();
                    return;
                case 9:
                    this.DoClearSurface();
                    return;
                case 10:
                    this.DoPoints();
                    return;
                case 11:
                    this.DoSetProgram();
                    return;
                case 12:
                    this.DoSetProgramParameters();
                    return;
                case 13:
                    this.DoSetProgramCustomParameters();
                    return;
                case 14:
                    this.DoInvalidateFramebuffer();
                    return;
                case 15:
                    this.DoSetPointTextureCoords();
                    return;
                case 16:
                    this.DoSetTilemapInfo();
                    return;
                case 17:
                    this.DoBlitFramebuffer();
                    return;
                case 18:
                    this.DoStartQuery();
                    return;
                case 19:
                    this.DoEndQuery();
                    return;
                case 20:
                    this.DoSetEllipseParams();
                    return;
                case 21:
                    this.DoSetGradientColor();
                    return;
                case 22:
                    this.DoClearDepth();
                    return;
                case 23:
                    this.DoSetDepthEnabled();
                    return;
                case 24:
                    this.DoSetDepthSamplingEnabled();
                    return;
                case 25:
                    this.DoCoplanarStartStencilPass();
                    return;
                case 26:
                    this.DoCoplanarStartColorPass();
                    return;
                case 27:
                    this.DoCoplanarRestore();
                    return;
                case 28:
                    this.DoSetScissor();
                    return;
                case 29:
                    this.DoSetTileRandomizationInfo();
                    return
            }
        }
    };

}

// ../lib/gfx/text.js
{
    'use strict';
    const C3 = self.C3;
    const MAX_TEXTURE_SIZE = 4096;
    const EXTRA_LINE_HEIGHT = 4;
    const GENERIC_FONT_FAMILIES = new Set(["serif", "sans-serif", "monospace", "cursive", "fantasy", "system-ui", "ui-serif", "ui-sans-serif", "ui-monospace", "ui-rounded", "math", "emoji", "fangsong"]);
    const DEFAULT_OPTS = {
        timeout: 60
    };
    const tempColor = new C3.Color(0, 0, 0, 1);
    const VALID_HORIZ_ALIGNMENTS = new Set(["left", "center", "right"]);
    const VALID_VERT_ALIGNMENTS = new Set(["top", "center", "bottom"]);
    const VALID_WORD_WRAP_MODES = new Set(["word", "character"]);
    const allRendererTexts = new Set;
    if (C3.FontManager) C3.FontManager.addEventListener("fontload", e => {
        const fontName = e.font.GetName();
        for (const f of allRendererTexts)
            if (f.IsBBCodeEnabled() || C3.equalsNoCase(f.GetFontName(), fontName)) f._SetTextChanged()
    });

    function fillOrStrokeText(ctx, isStroke, text, x, y, maxWidth) {
        if (isStroke)
            if (C3.Platform.BrowserEngine === "Gecko") ctx.strokeText(text, x, y, maxWidth);
            else ctx.strokeText(text, x, y);
        else if (C3.Platform.BrowserEngine === "Gecko") ctx.fillText(text, x, y, maxWidth);
        else ctx.fillText(text, x, y)
    }

    function fillOrStrokeRect(ctx, isStroke, x, y, w, h) {
        if (isStroke) ctx.strokeRect(x, y, w, h);
        else ctx.fillRect(x, y, w, h)
    }

    function ptToPx(pt) {
        return pt * (4 / 3)
    }
    let didCheckFoundBoundingBoxSupport = false;
    let supportsFontBoundingBoxMeasurements = false;
    C3.Gfx.RendererText = class RendererText {
        constructor(renderer, opts) {
            opts = Object.assign({}, DEFAULT_OPTS, opts);
            this._renderer = renderer;
            this._fontName = "Arial";
            this._fontSize = 16;
            this._fontSizeScale = 1;
            this._lineHeight = 0;
            this._isBold = false;
            this._isItalic = false;
            this._colorStr = "black";
            this._isBBcodeEnabled = false;
            this.onloadfont = null;
            this._alreadyLoadedFonts = new Set;
            this._horizontalAlign = "left";
            this._verticalAlign = "top";
            this._text = "";
            this._bbString = null;
            this._wrappedText = C3.New(C3.WordWrap);
            this._wrapMode = "word";
            this._textChanged = false;
            this._drawMaxCharCount = -1;
            this._drawCharCount = 0;
            this._cssWidth = 0;
            this._cssHeight = 0;
            this._width = 0;
            this._height = 0;
            this._zoom = 1;
            this._changed = false;
            this._textCanvas = null;
            this._textContext = null;
            this._measureContext = null;
            this._measureContextTop = null;
            this._lastCanvasWidth = -1;
            this._lastCanvasHeight = -1;
            this._lastTextCanvasFont = "";
            this._lastMeasureCanvasFont = "";
            this._lastTextCanvasFillStyle = "";
            this._lastTextCanvasOpacity = 1;
            this._lastTextCanvasLineWidth = 1;
            this._measureTextCallback = (chArr,
                styles) => this._MeasureText(chArr, styles);
            this._texture = null;
            this._rcTex = new C3.Rect;
            this._scaleFactor = 1;
            this._textureTimeout = new C3.IdleTimeout(() => {
                this.ReleaseTexture();
                this._SetTextCanvasSize(8, 8)
            }, opts.timeout);
            this.ontextureupdate = null;
            this._wasReleased = false;
            allRendererTexts.add(this)
        }
        Release() {
            this.onloadfont = null;
            this._alreadyLoadedFonts.clear();
            this._bbString = null;
            this._textCanvas = null;
            this._textContext = null;
            this._measureContext = null;
            this._measureContextTop = null;
            this._measureTextCallback =
                null;
            this._textureTimeout.Release();
            this.ontextureupdate = null;
            this.ReleaseTexture();
            this._wrappedText.Clear();
            this._wrappedText = null;
            this._renderer = null;
            this._wasReleased = true;
            allRendererTexts.delete(this)
        }
        _SetChanged() {
            this._changed = true
        }
        _SetTextChanged() {
            this._SetChanged();
            this._wrappedText.Clear();
            this._textChanged = true
        }
        SetBBCodeEnabled(e) {
            e = !!e;
            if (this._isBBcodeEnabled === e) return;
            this._isBBcodeEnabled = e;
            const textBaseline = this._isBBcodeEnabled ? "alphabetic" : "top";
            if (this._textContext) this._textContext.textBaseline =
                textBaseline;
            if (this._measureContext) this._measureContext.textBaseline = textBaseline;
            this._SetTextChanged()
        }
        IsBBCodeEnabled() {
            return this._isBBcodeEnabled
        }
        SetFontName(fontName) {
            if (!fontName) fontName = "serif";
            if (this._fontName === fontName) return;
            this._fontName = fontName;
            this._SetTextChanged()
        }
        GetFontName() {
            return this._fontName
        }
        SetFontSize(fontSize) {
            if (fontSize < .1) fontSize = .1;
            if (this._fontSize === fontSize) return;
            this._fontSize = fontSize;
            this._SetTextChanged()
        }
        SetFontSizeScale(s) {
            if (this._fontSizeScale ===
                s) return;
            this._fontSizeScale = s;
            this._SetTextChanged()
        }
        SetLineHeight(h) {
            if (this._lineHeight === h) return;
            this._lineHeight = h;
            this._SetChanged()
        }
        SetBold(bold) {
            bold = !!bold;
            if (this._isBold === bold) return;
            this._isBold = bold;
            this._SetTextChanged()
        }
        SetItalic(italic) {
            italic = !!italic;
            if (this._isItalic === italic) return;
            this._isItalic = italic;
            this._SetTextChanged()
        }
        SetDrawMaxCharacterCount(n) {
            n = Math.floor(n);
            if (this._drawMaxCharCount === n) return;
            this._drawMaxCharCount = n;
            this._SetChanged()
        }
        GetDrawMaxCharacterCount() {
            return this._drawMaxCharCount
        }
        _GetStyleTag(styles,
            tag) {
            for (let i = styles.length - 1; i >= 0; --i) {
                const s = styles[i];
                if (s.tag === tag) return s
            }
            return null
        }
        _HasStyleTag(styles, tag) {
            return !!this._GetStyleTag(styles, tag)
        }
        _GetFontString(useCssUnits, styles) {
            let ret = [];
            if (this._isBold || this._HasStyleTag(styles, "b")) ret.push("bold");
            if (this._isItalic || this._HasStyleTag(styles, "i")) ret.push("italic");
            const sizeStyle = this._GetStyleTag(styles, "size");
            const fontSize = (sizeStyle ? parseFloat(sizeStyle.param) : this._fontSize) * this._fontSizeScale;
            if (useCssUnits) ret.push(fontSize +
                "pt");
            else ret.push(fontSize * this.GetDrawScale() + "pt");
            let fontName = this._fontName;
            const fontStyle = this._GetStyleTag(styles, "font");
            if (fontStyle && fontStyle.param) {
                fontName = fontStyle.param;
                if (this.onloadfont && !this._alreadyLoadedFonts.has(fontName)) {
                    this.onloadfont(fontName);
                    this._alreadyLoadedFonts.add(fontName)
                }
            }
            if (fontName)
                if (GENERIC_FONT_FAMILIES.has(fontName)) ret.push(fontName);
                else ret.push('"' + fontName + '"');
            return ret.join(" ")
        }
        SetColor(c) {
            if (c instanceof C3.Color) c = c.getCssRgb();
            if (this._colorStr ===
                c) return;
            this._colorStr = c;
            this._SetChanged()
        }
        SetColorRgb(r, g, b) {
            tempColor.setRgb(r, g, b);
            this.SetColor(tempColor)
        }
        SetHorizontalAlignment(h) {
            if (!VALID_HORIZ_ALIGNMENTS.has(h)) throw new Error("invalid horizontal alignment");
            if (this._horizontalAlign === h) return;
            this._horizontalAlign = h;
            this._SetChanged()
        }
        SetVerticalAlignment(v) {
            if (!VALID_VERT_ALIGNMENTS.has(v)) throw new Error("invalid vertical alignment");
            if (this._verticalAlign === v) return;
            this._verticalAlign = v;
            this._SetChanged()
        }
        SetWordWrapMode(m) {
            if (!VALID_WORD_WRAP_MODES.has(m)) throw new Error("invalid word wrap mode");
            if (this._wrapMode === m) return;
            this._wrapMode = m;
            this._SetTextChanged()
        }
        SetText(text) {
            if (this._text === text) return;
            this._text = text;
            this._SetTextChanged()
        }
        GetDrawScale() {
            return this._scaleFactor * this._zoom * self.devicePixelRatio
        }
        SetSize(cssWidth, cssHeight, zoom) {
            if (typeof zoom === "undefined") zoom = 1;
            if (cssWidth <= 0 || cssWidth <= 0) return;
            if (this._cssWidth === cssWidth && this._cssHeight === cssHeight && this._zoom === zoom) return;
            const oldCssWidth = this._cssWidth;
            this._cssWidth = cssWidth;
            this._cssHeight = cssHeight;
            this._zoom =
                zoom;
            const dpr = self.devicePixelRatio;
            this._width = this._cssWidth * this._zoom * dpr;
            this._height = this._cssHeight * this._zoom * dpr;
            const maxDim = Math.max(this._width, this._height);
            const maxTextureSize = Math.min(this._renderer.GetMaxTextureSize(), MAX_TEXTURE_SIZE);
            let scale = 1;
            if (maxDim > maxTextureSize) {
                scale = maxTextureSize / maxDim;
                this._width = Math.min(this._width * scale, maxTextureSize);
                this._height = Math.min(this._height * scale, maxTextureSize)
            }
            this._scaleFactor = scale;
            if (this._cssWidth !== oldCssWidth) this._SetTextChanged();
            else this._SetChanged()
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetZoom() {
            return this._zoom
        }
        GetTextWidth() {
            this._MaybeWrapText();
            return this._wrappedText.GetMaxLineWidth()
        }
        GetTextHeight() {
            this._MaybeWrapText();
            return this._wrappedText.GetTotalLineHeight() + this._wrappedText.GetLineCount() * (this._lineHeight + EXTRA_LINE_HEIGHT) - this._lineHeight
        }
        GetTexture() {
            this._textureTimeout.Reset();
            this._MaybeUpdate();
            return this._texture
        }
        HitTestFragment(x, y) {
            this._MaybeUpdate();
            const scale =
                this.GetDrawScale();
            const lines = this._wrappedText.GetLines();
            for (const line of lines) {
                const yOff = line.fontBoundingBoxDescent * scale;
                if (y >= line.penY - line.height * scale + yOff && y < line.penY + yOff)
                    for (const frag of line.fragments)
                        if (x >= frag.penX && x < frag.penX + frag.width * scale) return frag
            }
            return null
        }* fragmentsWithTag(tag) {
            this._MaybeUpdate();
            const lines = this._wrappedText.GetLines();
            for (const line of lines)
                for (const frag of line.fragments) {
                    const tagStyle = this._GetStyleTag(frag.styles, "tag");
                    if (tagStyle && C3.equalsNoCase(tagStyle.param,
                            tag)) yield frag
                }
        }
        FindFragmentWithTag(tag, index) {
            for (const frag of this.fragmentsWithTag(tag))
                if (index === 0) return frag;
                else --index;
            return null
        }
        CountFragmentsWithTag(tag) {
            let count = 0;
            for (const frag of this.fragmentsWithTag(tag)) ++count;
            return count
        }
        _MaybeUpdate() {
            if (this._texture && !this._changed && !this._textChanged) return;
            if (this._wasReleased) return;
            if (this._width <= 0 || this._height <= 0) return;
            this._changed = false;
            this._DoUpdate()
        }
        _DoUpdate() {
            if (this._wasReleased) return;
            this._SetTextCanvasSize(Math.max(C3.nextHighestPowerOfTwo(Math.ceil(this._width)),
                128), Math.max(C3.nextHighestPowerOfTwo(Math.ceil(this._height)), 64));
            this._MaybeWrapText();
            this._DrawTextToCanvas();
            this._UpdateTexture();
            this._textureTimeout.Reset()
        }
        _SetTextCanvasSize(w, h) {
            if (!this._textCanvas) this._textCanvas = C3.CreateCanvas(16, 16);
            let wasReset = false;
            if (this._lastCanvasWidth !== w || this._lastCanvasHeight !== h) {
                this._lastCanvasWidth = w;
                this._lastCanvasHeight = h;
                this._textCanvas.width = w;
                this._textCanvas.height = h;
                wasReset = true
            }
            if (!this._textContext) {
                this._textContext = this._textCanvas.getContext("2d");
                wasReset = true
            }
            if (wasReset) {
                this._textContext.textBaseline = this._isBBcodeEnabled ? "alphabetic" : "top";
                this._textContext.font = this._lastTextCanvasFont;
                this._textContext.fillStyle = this._lastTextCanvasFillStyle;
                this._textContext.strokeStyle = this._lastTextCanvasFillStyle;
                this._textContext.globalAlpha = this._lastTextCanvasOpacity;
                this._textContext.lineWidth = this._lastTextCanvasLineWidth
            } else this._textContext.clearRect(0, 0, w, h)
        }
        _MaybeCreateMeasureContext() {
            if (this._measureContext) return;
            this._measureContext =
                C3.CreateCanvas(16, 16).getContext("2d");
            this._measureContextTop = C3.CreateCanvas(16, 16).getContext("2d");
            this._measureContext.textBaseline = this._isBBcodeEnabled ? "alphabetic" : "top";
            this._measureContextTop.textBaseline = "top"
        }
        _SetMeasureFontString(fontString) {
            if (this._lastMeasureCanvasFont === fontString) return;
            this._lastMeasureCanvasFont = fontString;
            this._measureContext.font = fontString;
            this._measureContextTop.font = fontString
        }
        _SupportsFontBoundingBoxMeasurements() {
            if (!didCheckFoundBoundingBoxSupport) {
                didCheckFoundBoundingBoxSupport =
                    true;
                this._MaybeCreateMeasureContext();
                const textMetrics = this._measureContext.measureText("test");
                supportsFontBoundingBoxMeasurements = typeof textMetrics["fontBoundingBoxAscent"] === "number" && typeof textMetrics["fontBoundingBoxDescent"] === "number"
            }
            return supportsFontBoundingBoxMeasurements
        }
        _MaybeWrapText() {
            if (!this._textChanged) return;
            this._MaybeCreateMeasureContext();
            if (this._isBBcodeEnabled && (!this._bbString || this._bbString.toString() !== this._text)) this._bbString = new C3.BBString(this._text, {
                noEscape: true
            });
            this._wrappedText.WordWrap(this._isBBcodeEnabled ? this._bbString.toFragmentList() : this._text, this._measureTextCallback, this._cssWidth, this._wrapMode, 0);
            this._textChanged = false
        }
        _MeasureText(chArr, styles) {
            const text = chArr.join("");
            this._SetMeasureFontString(this._GetFontString(true, styles));
            const sizeStyle = this._GetStyleTag(styles, "size");
            const fontSize = (sizeStyle ? parseFloat(sizeStyle.param) : this._fontSize) * this._fontSizeScale;
            const textMetrics = this._measureContext.measureText(text);
            let topToAlphabeticDistance =
                0;
            if (this._isBBcodeEnabled && this._SupportsFontBoundingBoxMeasurements()) {
                const textMetricsTop = this._measureContextTop.measureText(text);
                topToAlphabeticDistance = textMetrics["fontBoundingBoxAscent"] - textMetricsTop["fontBoundingBoxAscent"]
            }
            return {
                width: textMetrics.width,
                height: ptToPx(fontSize),
                fontBoundingBoxAscent: textMetrics["fontBoundingBoxAscent"] || 0,
                fontBoundingBoxDescent: textMetrics["fontBoundingBoxDescent"] || 0,
                topToAlphabeticDistance
            }
        }
        _SetDrawFontString(fontString) {
            if (this._lastTextCanvasFont ===
                fontString) return;
            this._lastTextCanvasFont = fontString;
            this._textContext.font = fontString
        }
        _SetDrawCanvasColor(styleStr) {
            if (this._lastTextCanvasFillStyle === styleStr) return;
            this._lastTextCanvasFillStyle = styleStr;
            this._textContext.fillStyle = styleStr;
            this._textContext.strokeStyle = styleStr
        }
        _SetDrawCanvasOpacity(o) {
            if (this._lastTextCanvasOpacity === o) return;
            this._lastTextCanvasOpacity = o;
            this._textContext.globalAlpha = o
        }
        _SetDrawCanvasLineWith(w) {
            if (this._lastTextCanvasLineWidth === w) return;
            this._lastTextCanvasLineWidth =
                w;
            this._textContext.lineWidth = w
        }
        _DrawTextToCanvas() {
            this._drawCharCount = 0;
            const scale = this.GetDrawScale();
            const lineSpaceHeight = (EXTRA_LINE_HEIGHT + this._lineHeight) * scale;
            let penY = 0;
            const lines = this._wrappedText.GetLines();
            if (lines.length === 0) return;
            const useFontBoundingBoxMeasurements = this._isBBcodeEnabled && this._SupportsFontBoundingBoxMeasurements();
            let firstLineTextHeight = lines[0].height * scale;
            if (this._verticalAlign === "center") {
                const linesTotalHeight = lines.reduce((a, v) => a + v.height * scale + lineSpaceHeight,
                    0) - lineSpaceHeight;
                penY = Math.max(this._height / 2 - linesTotalHeight / 2, 0);
                if (useFontBoundingBoxMeasurements) firstLineTextHeight = lines[0].topToAlphabeticDistance * scale
            } else if (this._verticalAlign === "bottom") {
                const linesTotalHeight = lines.reduce((a, v) => a + v.height * scale + lineSpaceHeight, 0) - this._lineHeight * scale;
                const lastLineDescentHeight = useFontBoundingBoxMeasurements ? lines.at(-1).fontBoundingBoxDescent * scale : 0;
                penY = this._height - linesTotalHeight - lastLineDescentHeight - 2
            }
            for (let i = 0, len = lines.length; i < len; ++i) {
                const line =
                    lines[i];
                const curLineTextHeight = line.height * scale;
                const startPenY = penY;
                if (this._isBBcodeEnabled) {
                    penY += i === 0 ? firstLineTextHeight : curLineTextHeight;
                    if (i > 0 && penY > this._height - EXTRA_LINE_HEIGHT * scale) break
                } else if (i > 0 && penY >= this._height - curLineTextHeight) break;
                if (startPenY >= 0) this._DrawTextLine(line, penY, scale);
                if (!this._isBBcodeEnabled) penY += curLineTextHeight;
                penY += lineSpaceHeight
            }
        }
        _DrawTextLine(line, penY, scale) {
            let penX = 0;
            if (this._horizontalAlign === "center") penX = (this._width - line.width * scale) / 2;
            else if (this._horizontalAlign === "right") penX = this._width - line.width * scale;
            line.penX = penX;
            line.penY = penY;
            for (const frag of line.fragments) {
                this._DrawTextFragment(frag, penX, penY, scale, line.height);
                penX += frag.width * scale
            }
        }
        _DrawTextFragment(frag, penX, penY, scale, lineHeight) {
            frag.penX = penX;
            frag.penY = penY;
            const textContext = this._textContext;
            const lineFontScale = lineHeight / 16;
            let fragWidth = frag.width * scale;
            const fragHeight = frag.height * scale;
            const fragFontScale = frag.height / 16;
            const lineSpaceHeight = (EXTRA_LINE_HEIGHT +
                this._lineHeight) * scale;
            const styles = frag.styles;
            let chArr = frag.chArr;
            if (this._drawMaxCharCount !== -1) {
                if (this._drawCharCount >= this._drawMaxCharCount) return;
                if (this._drawCharCount + chArr.length > this._drawMaxCharCount) {
                    chArr = chArr.slice(0, this._drawMaxCharCount - this._drawCharCount);
                    fragWidth = this._MeasureText(chArr, styles).width * scale
                }
                this._drawCharCount += chArr.length
            }
            const backgroundStyle = this._GetStyleTag(styles, "background");
            const hasUnderline = this._HasStyleTag(styles, "u");
            const hasStrikethrough =
                this._HasStyleTag(styles, "s");
            if (C3.IsCharArrayAllWhitespace(chArr) && !backgroundStyle && !hasUnderline && !hasStrikethrough || this._HasStyleTag(styles, "hide")) return;
            const text = chArr.join("");
            const offsetXStyle = this._GetStyleTag(styles, "offsetx");
            penX += offsetXStyle ? parseFloat(offsetXStyle.param) * scale : 0;
            const offsetYStyle = this._GetStyleTag(styles, "offsety");
            penY += offsetYStyle ? parseFloat(offsetYStyle.param) * scale : 0;
            if (backgroundStyle) {
                this._SetDrawCanvasColor(backgroundStyle.param);
                textContext.fillRect(penX,
                    penY - fragHeight, fragWidth, fragHeight + lineSpaceHeight)
            }
            const colorStyle = this._GetStyleTag(styles, "color");
            this._SetDrawCanvasColor(colorStyle ? colorStyle.param : this._colorStr);
            const opacityStyle = this._GetStyleTag(styles, "opacity");
            this._SetDrawCanvasOpacity(opacityStyle ? parseFloat(opacityStyle.param) / 100 : 1);
            const lineThicknessStyle = this._GetStyleTag(styles, "linethickness");
            const lineThicknessScale = lineThicknessStyle ? parseFloat(lineThicknessStyle.param) : 1;
            const isStroke = this._HasStyleTag(styles, "stroke");
            if (isStroke) this._SetDrawCanvasLineWith(fragFontScale * .5 * lineThicknessScale * this.GetDrawScale());
            this._SetDrawFontString(this._GetFontString(false, styles));
            fillOrStrokeText(textContext, isStroke, text, penX, penY, fragWidth);
            if (!isStroke) {
                this._SetDrawCanvasLineWith(fragFontScale * .5 * lineThicknessScale * this.GetDrawScale());
                const outlineStyle = this._GetStyleTag(styles, "outline");
                if (outlineStyle) {
                    this._SetDrawCanvasColor(outlineStyle.param);
                    fillOrStrokeText(textContext, true, text, penX, penY, fragWidth)
                }
            }
            this._SetDrawCanvasColor(colorStyle ?
                colorStyle.param : this._colorStr);
            if (hasUnderline) fillOrStrokeRect(textContext, isStroke, penX, penY + scale * lineFontScale, fragWidth, scale * lineFontScale * lineThicknessScale);
            if (hasStrikethrough) {
                const defaultStrikeY = penY - fragHeight / 4;
                const defaultStrikeHeight = scale * fragFontScale;
                const strikeYMid = defaultStrikeY + defaultStrikeHeight / 2;
                textContext.fillRect(penX, strikeYMid - defaultStrikeHeight * lineThicknessScale / 2, fragWidth, defaultStrikeHeight * lineThicknessScale)
            }
        }
        _UpdateTexture() {
            if (this._renderer.IsContextLost()) return;
            if (!this._texture) this._texture = this._renderer.CreateDynamicTexture(this._textCanvas.width, this._textCanvas.height, {
                mipMap: true,
                mipMapQuality: "high"
            });
            this._renderer.UpdateTexture(this._textCanvas, this._texture);
            this._rcTex.set(0, 0, this._width / this._texture.GetWidth(), this._height / this._texture.GetHeight());
            if (this.ontextureupdate) this.ontextureupdate()
        }
        GetTexRect() {
            return this._rcTex
        }
        ReleaseTexture() {
            if (this._texture) {
                if (!this._renderer.IsContextLost()) this._renderer.DeleteTexture(this._texture);
                this._texture = null
            }
        }
        static OnContextLost() {
            for (const rendererText of allRendererTexts) rendererText.ReleaseTexture()
        }
        static GetAll() {
            return allRendererTexts.values()
        }
    };

}

// ../lib/gfx/webgl/query.js
{
    'use strict';
    const C3 = self.C3;
    class WebGLRealTimeElapsedQuery {
        constructor(renderer) {
            this._gl = renderer.GetContext();
            this._version = renderer.GetWebGLVersionNumber();
            this._timerExt = renderer._GetDisjointTimerQueryExtension();
            this._query = null;
            this._isActive = false;
            this._hasResult = false;
            this._result = 0;
            if (this._version === 1) this._query = this._timerExt["createQueryEXT"]();
            else this._query = this._gl["createQuery"]()
        }
        Release() {
            this._DeleteQueryObject();
            this._gl = null;
            this._timerExt = null;
            this._hasResult = false
        }
        _DeleteQueryObject() {
            if (!this._query) return;
            if (this._version ===
                1) this._timerExt["deleteQueryEXT"](this._query);
            else this._gl["deleteQuery"](this._query);
            this._query = null
        }
        BeginTimeElapsed() {
            if (this._isActive) throw new Error("query already active");
            if (this._version === 1) this._timerExt["beginQueryEXT"](this._timerExt["TIME_ELAPSED_EXT"], this._query);
            else this._gl["beginQuery"](this._timerExt["TIME_ELAPSED_EXT"], this._query);
            this._isActive = true
        }
        EndTimeElapsed() {
            if (!this._isActive) throw new Error("query not active");
            if (this._version === 1) this._timerExt["endQueryEXT"](this._timerExt["TIME_ELAPSED_EXT"]);
            else this._gl["endQuery"](this._timerExt["TIME_ELAPSED_EXT"]);
            this._isActive = false
        }
        CheckForResult() {
            if (!this._query || this._hasResult || this._isActive) return;
            let available = false;
            if (this._version === 1) available = this._timerExt["getQueryObjectEXT"](this._query, this._timerExt["QUERY_RESULT_AVAILABLE_EXT"]);
            else available = this._gl["getQueryParameter"](this._query, this._gl["QUERY_RESULT_AVAILABLE"]);
            const disjoint = this._gl.getParameter(this._timerExt["GPU_DISJOINT_EXT"]);
            if (available && !disjoint) {
                if (this._version ===
                    1) this._result = this._timerExt["getQueryObjectEXT"](this._query, this._timerExt["QUERY_RESULT_EXT"]);
                else this._result = this._gl["getQueryParameter"](this._query, this._gl["QUERY_RESULT"]);
                this._result /= 1E9;
                this._hasResult = true
            }
            if (available || disjoint) this._DeleteQueryObject()
        }
        HasResult() {
            return this._hasResult
        }
        GetResult() {
            if (!this._hasResult) throw new Error("no result available");
            return this._result
        }
    }
    C3.Gfx.WebGLTimeElapsedQuery = class WebGLTimeElapsedQuery {
        constructor(renderer) {
            this._renderer = renderer;
            this._frameNumber = renderer.GetFrameNumber();
            this._isActive = false;
            this._parentQuery = null;
            this._isNested = false;
            this._realQuery = null;
            this._queries = []
        }
        Release() {
            for (const q of this._queries)
                if (q instanceof WebGLRealTimeElapsedQuery) q.Release();
            C3.clearArray(this._queries);
            this._parentQuery = null;
            this._realQuery = null;
            this._renderer = null
        }
        BeginTimeElapsed() {
            if (this._isActive) throw new Error("query already active");
            const stack = this._renderer._GetTimeQueryStack();
            if (stack.length > 0) {
                this._isNested = true;
                this._parentQuery = stack.at(-1);
                this._parentQuery._EndReal();
                this._parentQuery._queries.push(this)
            } else {
                this._isNested = false;
                this._parentQuery = null
            }
            this._isActive = true;
            stack.push(this);
            this._StartReal()
        }
        EndTimeElapsed() {
            if (!this._isActive) throw new Error("query not active");
            const top = this._renderer._GetTimeQueryStack().pop();
            if (top !== this) throw new Error("can only end most nested query");
            this._isActive = false;
            this._EndReal();
            if (this._parentQuery) {
                this._parentQuery._StartReal();
                this._parentQuery = null
            }
        }
        _StartReal() {
            this._realQuery = C3.New(WebGLRealTimeElapsedQuery, this._renderer);
            this._queries.push(this._realQuery);
            this._realQuery.BeginTimeElapsed()
        }
        _EndReal() {
            this._realQuery.EndTimeElapsed();
            this._realQuery = null
        }
        CheckForResult() {
            for (const q of this._queries) q.CheckForResult()
        }
        IsNested() {
            return this._isNested
        }
        HasResult() {
            return this._queries.every(q => q.HasResult())
        }
        GetResult() {
            return this._queries.reduce((a, v) => a + v.GetResult(),
                0)
        }
        GetFrameNumber() {
            return this._frameNumber
        }
    };

}

// ../lib/gfx/webgl/queryResultBuffer.js
{
    'use strict';
    const C3 = self.C3;
    C3.Gfx.WebGLQueryResultBuffer = class WebGLQueryResultBuffer {
        constructor(renderer, maxQueries = 1E3) {
            this._renderer = renderer;
            this._maxQueries = maxQueries;
            this._buffer = [];
            this._renderer._AddQueryResultBuffer(this)
        }
        Release() {
            this.Clear();
            this._renderer._RemoveQueryResultBuffer(this);
            this._renderer = null
        }
        Clear() {
            for (const q of this._buffer) q.Release();
            C3.clearArray(this._buffer)
        }
        AddTimeElapsedQuery() {
            const ret = new C3.Gfx.WebGLTimeElapsedQuery(this._renderer);
            this._buffer.push(ret);
            if (this._buffer.length > this._maxQueries) {
                const oldest =
                    this._buffer.shift();
                oldest.Release()
            }
            return ret
        }
        CheckForResults(toFrameNumber) {
            for (const q of this._buffer) {
                if (q.GetFrameNumber() >= toFrameNumber) return;
                if (q.IsNested()) return;
                q.CheckForResult()
            }
        }
        GetFrameRangeResultSum(startFrame, endFrame) {
            if (endFrame <= startFrame) return NaN;
            let sum = 0;
            for (const q of this._buffer) {
                if (q.GetFrameNumber() >= endFrame) break;
                if (q.GetFrameNumber() < startFrame) continue;
                if (q.HasResult()) sum += q.GetResult();
                else return NaN
            }
            return sum
        }
        DeleteAllBeforeFrameNumber(frameNumber) {
            for (let i =
                    0, len = this._buffer.length; i < len; ++i) {
                const q = this._buffer[i];
                if (q.GetFrameNumber() < frameNumber) q.Release();
                else {
                    if (i > 0) this._buffer.splice(0, i);
                    return
                }
            }
        }
    };

}

// ../lib/gfx/webgl/webglRenderer.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;
    const glMatrix = self.glMatrix;
    const vec3 = glMatrix.vec3;
    const vec4 = glMatrix.vec4;
    const mat4 = glMatrix.mat4;
    const DEFAULT_WEBGLRENDERER_OPTS = {
        powerPreference: "default",
        enableGpuProfiling: true,
        alpha: false,
        lowLatency: false,
        depth: false,
        canSampleDepth: false,
        maxWebGLVersion: 2,
        failIfMajorPerformanceCaveat: false
    };
    const VALID_POWER_PREFERENCES = new Set(["default", "low-power", "high-performance"]);
    const MAX_VERTICES = 8E3;
    const MAX_INDICES = MAX_VERTICES / 2 * 3;
    const MAX_POINTS = 8E3;
    const LAST_POINT = MAX_POINTS - 4;
    const PARTIAL_TEXTURE_UPLOAD_CHUNK_SIZE = 256 * 1024;
    const defaultTexCoordsQuad = new C3.Quad(0, 0, 1, 0, 1, 1, 0, 1);
    const tmpProjection = mat4.create();
    const tmpModelView = mat4.create();
    const tmpQuad = new C3.Quad;
    const tmpRect = new C3.Rect;
    let loseContextExtension = null;
    if (C3.isDebug) {
        self.debug_lose_webgl_context = function() {
            if (!loseContextExtension) {
                console.warn("WEBGL_lose_context not supported");
                return
            }
            loseContextExtension.loseContext()
        };
        self.debug_restore_webgl_context = function() {
            if (!loseContextExtension) {
                console.warn("WEBGL_lose_context not supported");
                return
            }
            loseContextExtension.restoreContext()
        }
    }
    const pendingPolls = new Set;
    let pollRafId = -1;

    function CheckPendingPolls() {
        pollRafId = -1;
        for (const info of pendingPolls)
            if (info.checkFunc()) {
                info.resolve();
                pendingPolls.delete(info)
            }
        if (pendingPolls.size > 0) pollRafId = self.requestAnimationFrame(CheckPendingPolls)
    }
    C3.Gfx.WebGLRenderer = class WebGLRenderer extends C3.Gfx.RendererBase {
        constructor(canvas, opts) {
            super(opts);
            opts = Object.assign({}, DEFAULT_WEBGLRENDERER_OPTS, opts);
            if (!VALID_POWER_PREFERENCES.has(opts.powerPreference)) throw new Error("invalid power preference");
            const attribs = {
                "alpha": !!opts.alpha,
                "depth": false,
                "antialias": false,
                "powerPreference": opts.powerPreference,
                "failIfMajorPerformanceCaveat": !!opts.failIfMajorPerformanceCaveat
            };
            if (opts.lowLatency) {
                attribs["desynchronized"] = true;
                attribs["preserveDrawingBuffer"] =
                    true
            }
            let gl = null;
            let version = 0;
            if (opts.maxWebGLVersion >= 2) {
                gl = canvas.getContext("webgl2", attribs);
                version = 2
            }
            if (!gl) {
                gl = canvas.getContext("webgl", attribs);
                version = 1
            }
            if (!gl) throw new Error("renderer-unavailable (could not get WebGL context)");
            this._gl = gl;
            this._attribs = gl.getContextAttributes();
            if (opts.lowLatency && !this._attribs["desynchronized"]) console.info("[WebGLRenderer] Low-latency mode specified but is not supported here");
            this._versionString = gl.getParameter(gl.VERSION);
            this._version = version;
            this._viewport = vec4.create();
            this._didChangeTransform = false;
            this._bbProjectionMatrix = mat4.create();
            this._usesDepthBuffer = !!opts.depth;
            this._canSampleDepth = !!(opts.depth && opts.canSampleDepth);
            this._isDepthEnabled = this._usesDepthBuffer;
            this._isDepthSamplingEnabled = false;
            this._depthBuffer = null;
            this._isAutoSizeDepthBuffer = true;
            this._depthBufferWidth = 0;
            this._depthBufferHeight = 0;
            this._vertexBuffer = null;
            this._texcoordBuffer = null;
            this._indexBuffer = null;
            this._pointBuffer = null;
            this._vertexData = new Float32Array(MAX_VERTICES *
                this.GetNumVertexComponents());
            this._indexData = new Uint16Array(MAX_INDICES);
            this._texcoordData = new Float32Array(MAX_VERTICES * 2);
            this._pointData = new Float32Array(MAX_POINTS * 4);
            this._vertexPtr = 0;
            this._texPtr = 0;
            this._pointPtr = 0;
            this._lastVertexPtr = 0;
            this._lastProgram = null;
            this._spDeviceTransformTextureFill = null;
            this._batch = [];
            this._batchPtr = 0;
            this._topOfBatch = 0;
            this._currentRenderTarget = null;
            this._lastPointZ = 0;
            this._batchState = C3.New(C3.Gfx.BatchState, this);
            this._lastColor = C3.New(C3.Color, 1, 1, 1, 1);
            this._lastTexture0 =
                null;
            this._lastTexture1 = null;
            this._lastSrcBlend = 0;
            this._lastDestBlend = 0;
            this._lastPointTexCoords = new C3.Rect;
            this._lastScissorRect = C3.New(C3.Rect, 0, 0, -1, -1);
            this._maxTextureSize = -1;
            this._minPointSize = 0;
            this._maxPointSize = 0;
            this._highpPrecision = 0;
            this._unmaskedVendor = "(unavailable)";
            this._unmaskedRenderer = "(unavailable)";
            this._extensions = [];
            this._isInitialisingAfterContextRestored = false;
            this._parallelShaderCompileExt = null;
            this._anisotropicExt = null;
            this._depthTextureExt = null;
            this._fragDepthExt = null;
            this._stdDerivativesExt = null;
            this._textureLodExt = null;
            this._maxAnisotropy = 0;
            this._isGpuProfilingEnabled = !!opts.enableGpuProfiling;
            this._timerExt = null;
            this._allQueryResultBuffers = new Set;
            this._timeQueryStack = [];
            this.FillIndexBufferData(this._indexData)
        }
        IsWebGL() {
            return true
        }
        async InitState() {
            super.InitState();
            const gl = this._gl;
            const numVertexComponents = this.GetNumVertexComponents();
            this._lastColor.setRgba(1, 1, 1, 1);
            this._lastTexture0 = null;
            this._lastTexture1 = null;
            this._vertexPtr = 0;
            this._pointPtr = 0;
            this._lastVertexPtr =
                MAX_VERTICES * numVertexComponents - 4 * numVertexComponents;
            C3.clearArray(this._batch);
            this._batchPtr = 0;
            this._topOfBatch = 0;
            this._lastProgram = null;
            this._currentRenderTarget = null;
            this._lastPointTexCoords.set(0, 0, 1, 1);
            this._lastPointZ = 0;
            const batchState = this._batchState;
            batchState.currentShader = null;
            batchState.currentFramebuffer = null;
            batchState.currentFramebufferNoDepth = null;
            vec4.set(batchState.currentColor, 1, 1, 1, 1);
            batchState.clearColor.setRgba(0, 0, 0, 0);
            batchState.pointTexCoords.set(0, 0, 1, 1);
            gl.clearColor(0,
                0, 0, 0);
            gl.clear(gl.COLOR_BUFFER_BIT);
            gl.enable(gl.BLEND);
            gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
            this._lastSrcBlend = gl.ONE;
            this._lastDestBlend = gl.ONE_MINUS_SRC_ALPHA;
            this._InitBlendModes(gl);
            gl.disable(gl.CULL_FACE);
            gl.disable(gl.STENCIL_TEST);
            gl.disable(gl.DITHER);
            if (this._usesDepthBuffer) {
                gl.enable(gl.DEPTH_TEST);
                gl.depthMask(true);
                gl.depthFunc(gl.LEQUAL)
            } else {
                gl.disable(gl.DEPTH_TEST);
                gl.depthMask(false)
            }
            this._isDepthEnabled = this._usesDepthBuffer;
            this._isDepthSamplingEnabled = false;
            this._pointBuffer =
                gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, this._pointBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, this._pointData.byteLength, gl.DYNAMIC_DRAW);
            this._vertexBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, this._vertexData.byteLength, gl.DYNAMIC_DRAW);
            this._texcoordBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ARRAY_BUFFER, this._texcoordBuffer);
            gl.bufferData(gl.ARRAY_BUFFER, this._texcoordData.byteLength, gl.DYNAMIC_DRAW);
            this._indexBuffer = gl.createBuffer();
            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._indexBuffer);
            gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._indexData, gl.STATIC_DRAW);
            gl.activeTexture(gl.TEXTURE0);
            gl.bindTexture(gl.TEXTURE_2D, null);
            this._maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
            const pointsizes = gl.getParameter(gl.ALIASED_POINT_SIZE_RANGE);
            this._minPointSize = pointsizes[0];
            this._maxPointSize = pointsizes[1];
            const highpVertex = gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT);
            const highpFrag = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER,
                gl.HIGH_FLOAT);
            if (highpVertex && highpFrag) this._highpPrecision = Math.min(highpVertex["precision"], highpFrag["precision"]);
            else this._highpPrecision = 0;
            if (this._maxPointSize > 2048) this._maxPointSize = 2048;
            this._extensions = gl.getSupportedExtensions();
            const debug_ext = gl.getExtension("WEBGL_debug_renderer_info");
            if (debug_ext) {
                this._unmaskedVendor = gl.getParameter(debug_ext["UNMASKED_VENDOR_WEBGL"]);
                this._unmaskedRenderer = gl.getParameter(debug_ext["UNMASKED_RENDERER_WEBGL"])
            }
            this._parallelShaderCompileExt = gl.getExtension("KHR_parallel_shader_compile");
            if (C3.isDebug) loseContextExtension = gl.getExtension("WEBGL_lose_context");
            if (this._isGpuProfilingEnabled)
                if (this.GetWebGLVersionNumber() === 1) {
                    if (C3.Platform.BrowserEngine !== "Chromium" || C3.Platform.BrowserVersionNumber >= 81 || typeof document !== "undefined") this._timerExt = gl.getExtension("EXT_disjoint_timer_query")
                } else this._timerExt = gl.getExtension("EXT_disjoint_timer_query_webgl2") || gl.getExtension("EXT_disjoint_timer_query");
            this._anisotropicExt = gl.getExtension("EXT_texture_filter_anisotropic");
            if (this._anisotropicExt) this._maxAnisotropy =
                gl.getParameter(this._anisotropicExt["MAX_TEXTURE_MAX_ANISOTROPY_EXT"]);
            else this._maxAnisotropy = 0;
            if (this.GetWebGLVersionNumber() < 2 && this._usesDepthBuffer && this._canSampleDepth) {
                this._depthTextureExt = gl.getExtension("WEBGL_depth_texture");
                if (!this._depthTextureExt) throw new Error("no depth texture support");
            }
            if (this.GetWebGLVersionNumber() < 2) {
                this._fragDepthExt = gl.getExtension("EXT_frag_depth");
                this._stdDerivativesExt = gl.getExtension("OES_standard_derivatives");
                this._textureLodExt = gl.getExtension("EXT_shader_texture_lod")
            }
            const WebGLShaderProgram =
                C3.Gfx.WebGLShaderProgram;
            const vsSource = WebGLShaderProgram.GetDefaultVertexShaderSource(false);
            let textureFillFragmentSrc = WebGLShaderProgram.GetTextureFillFragmentShaderSource_WebGL1_NoFragDepth();
            let textureFillVertexSrc = vsSource;
            let pointFragmentSrc = WebGLShaderProgram.GetPointFragmentShaderSource_WebGL1_NoFragDepth();
            let pointVertexSrc = WebGLShaderProgram.GetPointVertexShaderSource_WebGL1();
            let tilemapFragmentSrc = WebGLShaderProgram.GetTilemapFragmentShaderSource_WebGL1_NoFragDepth();
            let tilemapVertexSrc =
                WebGLShaderProgram.GetDefaultVertexShaderSource(true);
            let useFragDepthExt = false;
            if (this._usesDepthBuffer && (C3.Platform.Browser !== "Safari" || C3.Platform.BrowserVersionNumber >= 15.5))
                if (this.GetWebGLVersionNumber() < 2) {
                    if (this._fragDepthExt) {
                        textureFillFragmentSrc = WebGLShaderProgram.GetTextureFillFragmentShaderSource_WebGL1_FragDepthEXT();
                        pointFragmentSrc = WebGLShaderProgram.GetPointFragmentShaderSource_WebGL1_FragDepthEXT();
                        tilemapFragmentSrc = WebGLShaderProgram.GetTilemapFragmentShaderSource_WebGL1_FragDepthEXT();
                        useFragDepthExt = true
                    }
                } else {
                    textureFillVertexSrc = WebGLShaderProgram.GetDefaultVertexShaderSource_WebGL2();
                    textureFillFragmentSrc = WebGLShaderProgram.GetTextureFillFragmentShaderSource_WebGL2();
                    pointFragmentSrc = WebGLShaderProgram.GetPointFragmentShaderSource_WebGL2();
                    pointVertexSrc = WebGLShaderProgram.GetPointVertexShaderSource_WebGL2();
                    tilemapFragmentSrc = WebGLShaderProgram.GetTilemapFragmentShaderSource_WebGL2();
                    tilemapVertexSrc = WebGLShaderProgram.GetDefaultVertexShaderSource_WebGL2(true)
                }
            const tileRandomizationFragmentSrc =
                WebGLShaderProgram.GetTileRandomizationFragmentShaderSource(this.GetWebGLVersionNumber(), useFragDepthExt, this._stdDerivativesExt && this._textureLodExt);
            const tileRandomizationVertexSrc = this.GetWebGLVersionNumber() >= 2 ? WebGLShaderProgram.GetDefaultVertexShaderSource_WebGL2() : vsSource;
            const DEFAULT_SHADER_PROGRAMS = [
                [textureFillFragmentSrc, textureFillVertexSrc, "<default>"],
                [textureFillFragmentSrc, textureFillVertexSrc, "<default-device-transform>"],
                [pointFragmentSrc, pointVertexSrc, "<point>"],
                [WebGLShaderProgram.GetColorFillFragmentShaderSource(),
                    vsSource, "<fill>"
                ],
                [WebGLShaderProgram.GetLinearGradientFillFragmentShaderSource(), vsSource, "<lineargradient>"],
                [WebGLShaderProgram.GetPenumbraFillFragmentShaderSource(), vsSource, "<penumbra>"],
                [WebGLShaderProgram.GetHardEllipseFillFragmentShaderSource(), vsSource, "<hardellipse>"],
                [WebGLShaderProgram.GetHardEllipseOutlineFragmentShaderSource(), vsSource, "<hardellipseoutline>"],
                [WebGLShaderProgram.GetSmoothEllipseFillFragmentShaderSource(), vsSource, "<smoothellipse>"],
                [WebGLShaderProgram.GetSmoothEllipseOutlineFragmentShaderSource(),
                    vsSource, "<smoothellipseoutline>"
                ],
                [WebGLShaderProgram.GetSmoothLineFillFragmentShaderSource(), vsSource, "<smoothline>"],
                [tilemapFragmentSrc, tilemapVertexSrc, "<tilemap>"],
                [tileRandomizationFragmentSrc, tileRandomizationVertexSrc, "<tilerandomization>"]
            ];
            const defaultShaders = await Promise.all(DEFAULT_SHADER_PROGRAMS.map(i => this.CreateShaderProgram({
                src: i[0],
                vertexSrc: i[1],
                name: i[2]
            })));
            this._spTextureFill = defaultShaders[0];
            this._spDeviceTransformTextureFill = defaultShaders[1];
            this._spPoints = defaultShaders[2];
            this._spColorFill = defaultShaders[3];
            this._spLinearGradientFill = defaultShaders[4];
            this._spPenumbraFill = defaultShaders[5];
            this._spHardEllipseFill = defaultShaders[6];
            this._spHardEllipseOutline = defaultShaders[7];
            this._spSmoothEllipseFill = defaultShaders[8];
            this._spSmoothEllipseOutline = defaultShaders[9];
            this._spSmoothLineFill = defaultShaders[10];
            this._spTilemapFill = defaultShaders[11];
            this._spTileRandomization = defaultShaders[12];
            this.SetTextureFillMode()
        }
        async CreateShaderProgram(shaderInfo) {
            const ret = await C3.Gfx.WebGLShaderProgram.Create(this,
                shaderInfo);
            this._AddShaderProgram(ret);
            return ret
        }
        ResetLastProgram() {
            this._lastProgram = null
        }
        SetSize(w, h, force) {
            if (this._width === w && this._height === h && !force) return;
            this.EndBatch();
            const gl = this._gl;
            const batchState = this._batchState;
            this._width = w;
            this._height = h;
            this._SetViewport(0, 0, w, h);
            this.CalculatePerspectiveMatrix(this._bbProjectionMatrix, w / h);
            this.SetProjectionMatrix(this._bbProjectionMatrix);
            if (this._spDeviceTransformTextureFill) {
                gl.useProgram(this._spDeviceTransformTextureFill.GetShaderProgram());
                this._spDeviceTransformTextureFill._UpdateDeviceTransformUniforms(this._matP);
                this._lastProgram = this._spDeviceTransformTextureFill;
                this._batchState.currentShader = this._spDeviceTransformTextureFill
            }
            gl.bindTexture(gl.TEXTURE_2D, null);
            gl.activeTexture(gl.TEXTURE1);
            gl.bindTexture(gl.TEXTURE_2D, null);
            gl.activeTexture(gl.TEXTURE0);
            this._lastTexture0 = null;
            this._lastTexture1 = null;
            if (this._usesDepthBuffer && this._isAutoSizeDepthBuffer) this._SetDepthBufferSize(this._width, this._height);
            if (this._currentRenderTarget) this._currentRenderTarget._Resize(this._width,
                this._height);
            gl.bindFramebuffer(gl.FRAMEBUFFER, null);
            this._currentRenderTarget = null;
            batchState.currentFramebuffer = null;
            batchState.currentFramebufferNoDepth = null
        }
        _SetDepthBufferSize(width, height) {
            const gl = this._gl;
            if (this._depthBuffer && this._depthBufferWidth === width && this._depthBufferHeight === height) return;
            if (this._canSampleDepth) {
                if (this._depthBuffer) gl.deleteTexture(this._depthBuffer);
                this._depthBuffer = gl.createTexture();
                gl.bindTexture(gl.TEXTURE_2D, this._depthBuffer);
                gl.texParameteri(gl.TEXTURE_2D,
                    gl.TEXTURE_MAG_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
                gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
                if (this.GetWebGLVersionNumber() >= 2) gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH24_STENCIL8, width, height, 0, gl.DEPTH_STENCIL, gl.UNSIGNED_INT_24_8, null);
                else if (this._depthTextureExt) gl.texImage2D(gl.TEXTURE_2D, 0, gl.DEPTH_STENCIL, width, height, 0, gl.DEPTH_STENCIL, this._depthTextureExt["UNSIGNED_INT_24_8_WEBGL"],
                    null);
                else;
                gl.bindTexture(gl.TEXTURE_2D, null)
            } else {
                if (this._depthBuffer) gl.deleteRenderbuffer(this._depthBuffer);
                this._depthBuffer = gl.createRenderbuffer();
                gl.bindRenderbuffer(gl.RENDERBUFFER, this._depthBuffer);
                gl.renderbufferStorage(gl.RENDERBUFFER, this._version >= 2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL, width, height);
                gl.bindRenderbuffer(gl.RENDERBUFFER, null)
            }
            this._depthBufferWidth = width;
            this._depthBufferHeight = height
        }
        SetFixedSizeDepthBuffer(width, height) {
            if (!this._usesDepthBuffer) return;
            this._isAutoSizeDepthBuffer =
                false;
            this._SetDepthBufferSize(width, height)
        }
        SetAutoSizeDepthBuffer() {
            if (!this._usesDepthBuffer) return;
            this._isAutoSizeDepthBuffer = true;
            this._SetDepthBufferSize(this._width, this._height)
        }
        _SetViewport(x, y, w, h) {
            const viewport = this._viewport;
            if (viewport[0] === x && viewport[1] === y && viewport[2] === w && viewport[3] === h) return;
            const b = this.PushBatch();
            b.InitSetViewport(x, y, w, h);
            vec4.set(viewport, x, y, w, h);
            this._topOfBatch = 0
        }
        SetFovY(f) {
            super.SetFovY(f);
            this.CalculatePerspectiveMatrix(this._bbProjectionMatrix, this._width /
                this._height)
        }
        SetNearZ(z) {
            super.SetNearZ(z);
            this.CalculatePerspectiveMatrix(this._bbProjectionMatrix, this._width / this._height)
        }
        SetFarZ(z) {
            super.SetFarZ(z);
            this.CalculatePerspectiveMatrix(this._bbProjectionMatrix, this._width / this._height)
        }
        SetProjectionMatrix(matP) {
            if (mat4.exactEquals(this._matP, matP)) return;
            const b = this.PushBatch();
            b.InitSetProjection(matP);
            mat4.copy(this._matP, matP);
            this._topOfBatch = 0;
            this._didChangeTransform = true
        }
        SetDefaultRenderTargetProjectionState() {
            let projectionMatrix;
            let viewportWidth,
                viewportHeight;
            const currentRenderTarget = this._currentRenderTarget;
            if (currentRenderTarget === null) {
                projectionMatrix = this._bbProjectionMatrix;
                viewportWidth = this.GetWidth();
                viewportHeight = this.GetHeight()
            } else {
                projectionMatrix = currentRenderTarget.GetProjectionMatrix();
                viewportWidth = currentRenderTarget.GetWidth();
                viewportHeight = currentRenderTarget.GetHeight()
            }
            this.SetProjectionMatrix(projectionMatrix);
            this._SetViewport(0, 0, viewportWidth, viewportHeight)
        }
        SetModelViewMatrix(matMV) {
            if (mat4.exactEquals(this._matMV,
                    matMV)) return;
            const b = this.PushBatch();
            b.InitSetModelView(matMV);
            mat4.copy(this._matMV, matMV);
            this._topOfBatch = 0;
            this._didChangeTransform = true
        }
        ResetDidChangeTransformFlag() {
            this._didChangeTransform = false
        }
        DidChangeTransform() {
            return this._didChangeTransform
        }
        GetBatchState() {
            return this._batchState
        }
        PushBatch() {
            const batch = this._batch;
            if (this._batchPtr === batch.length) batch.push(new C3.Gfx.WebGLBatchJob(this._batchState));
            return batch[this._batchPtr++]
        }
        EndBatch() {
            if (this._batchPtr === 0) return;
            if (this.IsContextLost()) return;
            this._WriteBuffers();
            this._ExecuteBatch();
            this._batchPtr = 0;
            this._vertexPtr = 0;
            this._texPtr = 0;
            this._pointPtr = 0;
            this._topOfBatch = 0
        }
        _WriteBuffers() {
            const gl = this._gl;
            if (this._pointPtr > 0) {
                gl.bindBuffer(gl.ARRAY_BUFFER, this._pointBuffer);
                gl.bufferSubData(gl.ARRAY_BUFFER, 0, this._pointData.subarray(0, this._pointPtr))
            }
            if (this._vertexPtr > 0) {
                gl.bindBuffer(gl.ARRAY_BUFFER, this._vertexBuffer);
                gl.bufferSubData(gl.ARRAY_BUFFER, 0, this._vertexData.subarray(0, this._vertexPtr));
                gl.bindBuffer(gl.ARRAY_BUFFER, this._texcoordBuffer);
                gl.bufferSubData(gl.ARRAY_BUFFER, 0, this._texcoordData.subarray(0, this._texPtr))
            }
        }
        _ExecuteBatch() {
            const batch = this._batch;
            for (let i = 0, len = this._batchPtr; i < len; ++i) batch[i].Run()
        }
        GetOpacity() {
            return this._lastColor.getA()
        }
        SetColorRgba(r, g, b, a) {
            const lastColor = this._lastColor;
            if (lastColor.equalsRgba(r, g, b, a)) return;
            lastColor.setRgba(r, g, b, a);
            const batch = this.PushBatch();
            batch.InitSetColor(lastColor);
            this._topOfBatch = 0;
            this._currentStateGroup = null
        }
        SetOpacity(a) {
            const lastColor = this._lastColor;
            if (lastColor.getA() ===
                a) return;
            lastColor.setA(a);
            const batch = this.PushBatch();
            batch.InitSetColor(lastColor);
            this._topOfBatch = 0;
            this._currentStateGroup = null
        }
        SetColor(c) {
            const lastColor = this._lastColor;
            if (lastColor.equals(c)) return;
            lastColor.set(c);
            const batch = this.PushBatch();
            batch.InitSetColor(lastColor);
            this._topOfBatch = 0;
            this._currentStateGroup = null
        }
        ResetColor() {
            this.SetColorRgba(1, 1, 1, 1)
        }
        GetColor() {
            return this._lastColor
        }
        SetTexture(rendererTex) {
            if (rendererTex === this._lastTexture0) return;
            const b = this.PushBatch();
            b.InitSetTexture(rendererTex);
            this._lastTexture0 = rendererTex;
            this._topOfBatch = 0
        }
        _ResetLastTexture() {
            this._lastTexture0 = null
        }
        SetBlendMode(bm) {
            const arr = this._GetBlendByIndex(bm);
            this._SetBlend(arr[0], arr[1])
        }
        SetNamedBlendMode(bm) {
            const o = this.GetNamedBlend(bm);
            this._SetBlend(o.srcBlend, o.destBlend)
        }
        _SetBlend(s, d) {
            if (s === this._lastSrcBlend && d === this._lastDestBlend) return;
            const b = this.PushBatch();
            b.InitSetBlend(s, d);
            this._lastSrcBlend = s;
            this._lastDestBlend = d;
            this._topOfBatch = 0;
            this._currentStateGroup = null
        }
        IsPremultipliedAlphaBlend() {
            return this._lastSrcBlend ===
                this._gl.ONE && this._lastDestBlend === this._gl.ONE_MINUS_SRC_ALPHA
        }
        SetAlphaBlend() {
            this._SetBlend(this._gl.ONE, this._gl.ONE_MINUS_SRC_ALPHA)
        }
        SetNoPremultiplyAlphaBlend() {
            this._SetBlend(this._gl.SRC_ALPHA, this._gl.ONE_MINUS_SRC_ALPHA)
        }
        SetCopyBlend() {
            this._SetBlend(this._gl.ONE, this._gl.ZERO)
        }
        Rect(r) {
            this.Rect2(r.getLeft(), r.getTop(), r.getRight(), r.getBottom())
        }
        Rect2(left, top, right, bottom) {
            this.Quad2(left, top, right, top, right, bottom, left, bottom)
        }
        _ExtendQuadBatch() {
            let v = this._vertexPtr;
            if (v >= this._lastVertexPtr) {
                this.EndBatch();
                v = 0
            }
            if (this._topOfBatch === 1) this._batch[this._batchPtr - 1]._indexCount += 6;
            else {
                const b = this.PushBatch();
                b.InitQuad(v, 6);
                this._topOfBatch = 1
            }
        }
        _WriteQuadToVertexBuffer(quad) {
            quad.writeToTypedArray3D(this._vertexData, this._vertexPtr, this._baseZ + this._currentZ);
            this._vertexPtr += 12
        }
        Quad(quad) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(quad);
            defaultTexCoordsQuad.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad2(tlx, tly, trx, try_, brx, bry, blx, bly) {
            this._ExtendQuadBatch();
            const vd =
                this._vertexData;
            let v = this._vertexPtr;
            const z = this._baseZ + this._currentZ;
            vd[v++] = tlx;
            vd[v++] = tly;
            vd[v++] = z;
            vd[v++] = trx;
            vd[v++] = try_;
            vd[v++] = z;
            vd[v++] = brx;
            vd[v++] = bry;
            vd[v++] = z;
            vd[v++] = blx;
            vd[v++] = bly;
            vd[v++] = z;
            this._vertexPtr = v;
            defaultTexCoordsQuad.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3(quad, rcTex) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(quad);
            rcTex.writeAsQuadToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad4(quad, uv) {
            this._ExtendQuadBatch();
            this._WriteQuadToVertexBuffer(quad);
            uv.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3D(tlx, tly, tlz, trx, try_, trz, brx, bry, brz, blx, bly, blz, rcTex) {
            this._ExtendQuadBatch();
            const vd = this._vertexData;
            let v = this._vertexPtr;
            const z = this._baseZ + this._currentZ;
            vd[v++] = tlx;
            vd[v++] = tly;
            vd[v++] = z + tlz;
            vd[v++] = trx;
            vd[v++] = try_;
            vd[v++] = z + trz;
            vd[v++] = brx;
            vd[v++] = bry;
            vd[v++] = z + brz;
            vd[v++] = blx;
            vd[v++] = bly;
            vd[v++] = z + blz;
            this._vertexPtr = v;
            rcTex.writeAsQuadToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        Quad3D2(tlx, tly, tlz, trx, try_, trz, brx, bry, brz, blx, bly, blz, uv) {
            this._ExtendQuadBatch();
            const vd = this._vertexData;
            let v = this._vertexPtr;
            const z = this._baseZ + this._currentZ;
            vd[v++] = tlx;
            vd[v++] = tly;
            vd[v++] = z + tlz;
            vd[v++] = trx;
            vd[v++] = try_;
            vd[v++] = z + trz;
            vd[v++] = brx;
            vd[v++] = bry;
            vd[v++] = z + brz;
            vd[v++] = blx;
            vd[v++] = bly;
            vd[v++] = z + blz;
            this._vertexPtr = v;
            uv.writeToTypedArray(this._texcoordData, this._texPtr);
            this._texPtr += 8
        }
        FullscreenQuad(mode, curTex) {
            mat4.copy(tmpProjection, this._matP);
            mat4.copy(tmpModelView,
                this._matMV);
            this.SetDefaultRenderTargetProjectionState();
            const [width, height] = this.GetRenderTargetSize(this._currentRenderTarget);
            const tempMat4b = this.CalculateLookAtModelView2(0, 0, this.GetDefaultCameraZ(height), 0, 0, 0, height);
            this.SetModelViewMatrix(tempMat4b);
            if (mode === "crop" && this._currentRenderTarget && curTex) {
                const left = this._width / 2;
                const top = this._height / 2;
                const srcW = curTex.GetWidth();
                const srcH = curTex.GetHeight();
                const destW = this._currentRenderTarget.GetWidth();
                const destH = this._currentRenderTarget.GetHeight();
                const copyW = Math.min(destW, srcW);
                const copyH = Math.min(destH, srcH);
                const srcOffY = Math.max(srcH - destH, 0);
                const destOffY = Math.max(destH - srcH, 0);
                tmpRect.set(-left, top - destOffY, -left + copyW, top - copyH - destOffY);
                tmpQuad.setFromRect(tmpRect);
                tmpRect.set(0, srcOffY, copyW, copyH + srcOffY);
                tmpRect.divide(srcW, srcH);
                this.Quad3(tmpQuad, tmpRect)
            } else {
                const halfW = width / 2;
                const halfH = height / 2;
                this.Rect2(-halfW, halfH, halfW, -halfH)
            }
            this.SetProjectionMatrix(tmpProjection);
            this.SetModelViewMatrix(tmpModelView)
        }
        StartRenderingPoints(rect) {
            if (this._lastPointTexCoords.equals(rect)) return;
            this._lastPointTexCoords.copy(rect);
            const b = this.PushBatch();
            b.InitSetPointTexCoords(rect);
            this._topOfBatch = 0
        }
        FinishRenderingPoints() {}
        Point(x_, y_, size_, opacity_) {
            if (this._pointPtr >= LAST_POINT) this.EndBatch();
            let p = this._pointPtr;
            const z = this._baseZ + this._currentZ;
            if (this._topOfBatch === 2 && this._lastPointZ === z) this._batch[this._batchPtr - 1]._indexCount++;
            else {
                const b = this.PushBatch();
                b.InitPoints(p, z);
                this._topOfBatch = 2;
                this._lastPointZ = z
            }
            const pd = this._pointData;
            pd[p++] = x_;
            pd[p++] = y_;
            pd[p++] = size_;
            pd[p++] = opacity_;
            this._pointPtr = p
        }
        SetProgram(program) {
            if (this._lastProgram === program) return;
            const b = this.PushBatch();
            b.InitSetProgram(program);
            this._lastProgram = program;
            this._topOfBatch = 0;
            this._currentStateGroup = null
        }
        SetDeviceTransformTextureFillMode() {
            this.SetProgram(this._spDeviceTransformTextureFill)
        }
        SetGradientColor(c) {
            const b = this.PushBatch();
            b.InitSetGradientColor(c);
            this._topOfBatch = 0
        }
        SetEllipseParams(pixelW, pixelH, outlineThickness = 1) {
            const b = this.PushBatch();
            b.InitSetEllipseParams(pixelW,
                pixelH, outlineThickness);
            this._topOfBatch = 0
        }
        SetTilemapInfo(srcRect, textureWidth, textureHeight, tileWidth, tileHeight, tileSpacingX, tileSpacingY) {
            if (this._lastProgram !== this._spTilemapFill) throw new Error("must set tilemap fill mode first");
            const b = this.PushBatch();
            b.InitSetTilemapInfo(srcRect, textureWidth, textureHeight, tileWidth, tileHeight, tileSpacingX, tileSpacingY);
            this._topOfBatch = 0
        }
        SetTileRandomizationInfo(textureWidth, textureHeight, xRandom, yRandom, angleRandom, blendMarginX, blendMarginY) {
            if (this._lastProgram !==
                this._spTileRandomization) throw new Error("must set tile randomization mode first");
            const b = this.PushBatch();
            b.InitSetTileRandomizationInfo(textureWidth, textureHeight, xRandom, yRandom, angleRandom, blendMarginX, blendMarginY);
            this._topOfBatch = 0
        }
        SetProgramParameters(backTex, destRect, srcRect, srcOriginRect, layoutRect, pixelWidth, pixelHeight, dpr, layerScale, layerAngle, time) {
            const s = this._lastProgram;
            time = time % 10800;
            if (!s._hasAnyOptionalUniforms || s.AreOptionalUniformsAlreadySetInBatch(destRect, srcRect, srcOriginRect,
                    layoutRect, pixelWidth, pixelHeight, dpr, layerScale, layerAngle, time)) return;
            const b = this.PushBatch();
            b.InitSetProgramParameters();
            s.SetOptionalUniformsInBatch(destRect, srcRect, srcOriginRect, layoutRect, pixelWidth, pixelHeight, dpr, layerScale, layerAngle, time);
            const mat4param = b._mat4param;
            mat4param[0] = pixelWidth;
            mat4param[1] = pixelHeight;
            destRect.writeToTypedArray(mat4param, 2);
            mat4param[6] = layerScale;
            mat4param[7] = layerAngle;
            srcRect.writeToTypedArray(mat4param, 12);
            const colorParam = b._colorParam;
            layoutRect.writeToTypedArray(colorParam,
                0);
            const tmp = colorParam[1];
            colorParam[1] = colorParam[3];
            colorParam[3] = tmp;
            srcOriginRect.writeToTypedArray(b._srcOriginRect, 0);
            b._startIndex = time;
            b._indexCount = dpr;
            if (s._uSamplerBack.IsUsed()) b._texParam = backTex ? backTex.GetTexture() : null;
            else b._texParam = null;
            this._topOfBatch = 0
        }
        SetProgramCustomParameters(params) {
            const s = this._lastProgram;
            if (params.length === 0 || s.AreCustomParametersAlreadySetInBatch(params)) return;
            const b = this.PushBatch();
            b.InitSetProgramCustomParameters();
            s.SetCustomParametersInBatch(params);
            C3.shallowAssignArray(b._shaderParams, params);
            this._topOfBatch = 0
        }
        ClearRgba(r, g, b_, a) {
            const b = this.PushBatch();
            b.InitClearSurface2(r, g, b_, a);
            this._topOfBatch = 0
        }
        Clear(c) {
            const b = this.PushBatch();
            b.InitClearSurface(c);
            this._topOfBatch = 0
        }
        Start() {}
        Finish() {
            super.Finish();
            this._gl.flush()
        }
        ClearDepth() {
            if (!this._usesDepthBuffer || !this._currentRenderTarget || !this._currentRenderTarget.HasDepthBuffer()) return;
            const batch = this.PushBatch();
            batch.InitClearDepth(this._isDepthEnabled);
            this._topOfBatch = 0
        }
        SetDepthEnabled(e) {
            e = !!e;
            if (this._isDepthEnabled === e) return;
            if (!this._usesDepthBuffer) return;
            this._isDepthEnabled = e;
            const batch = this.PushBatch();
            batch.InitSetDepthEnabled(e);
            this._topOfBatch = 0
        }
        IsDepthEnabled() {
            return this._isDepthEnabled
        }
        _GetDepthBuffer() {
            return this._depthBuffer
        }
        _CanSampleDepth() {
            return this._canSampleDepth
        }
        SetDepthSamplingEnabled(e) {
            e = !!e;
            if (!this._canSampleDepth) return;
            if (this._isDepthSamplingEnabled === e) return;
            if (e && this.IsDepthEnabled()) throw new Error("depth still enabled");
            this._isDepthSamplingEnabled =
                e;
            const batch = this.PushBatch();
            batch.InitSetDepthSamplingEnabled(e);
            this._topOfBatch = 0
        }
        SetScissorRect(x, y, w, h, rtHeight_ = 0) {
            x = Math.floor(x);
            y = Math.floor(y);
            w = Math.floor(w);
            h = Math.floor(h);
            if (this._lastScissorRect.equalsWH(x, y, w, h)) return;
            this._lastScissorRect.setWH(x, y, w, h);
            const rtHeight = rtHeight_ || this.GetRenderTargetSize(this.GetRenderTarget())[1];
            y = rtHeight - y - h;
            const batch = this.PushBatch();
            batch.InitSetScissor(true, x, y, w, h);
            this._topOfBatch = 0
        }
        RemoveScissorRect() {
            if (this._lastScissorRect.getRight() ===
                -1) return;
            this._lastScissorRect.set(0, 0, -1, -1);
            const batch = this.PushBatch();
            batch.InitSetScissor(false, 0, 0, 0, 0);
            this._topOfBatch = 0
        }
        CheckForQueryResults() {
            for (const qrb of this._allQueryResultBuffers) qrb.CheckForResults(this._frameNumber)
        }
        IsContextLost() {
            return !this._gl || this._gl.isContextLost() || this._isInitialisingAfterContextRestored
        }
        OnContextLost() {
            super.OnDeviceOrContextLost();
            C3.Gfx.WebGLRendererTexture.OnContextLost();
            C3.Gfx.WebGLRenderTarget.OnContextLost();
            C3.Gfx.RendererText.OnContextLost();
            for (const qrb of this._allQueryResultBuffers) qrb.Clear();
            this._extensions = [];
            this._timerExt = null;
            this._parallelShaderCompileExt = null;
            this._anisotropicExt = null;
            this._depthTextureExt = null;
            this._fragDepthExt = null;
            this._stdDerivativesExt = null;
            this._textureLodExt = null;
            this._maxAnisotropy = 0;
            this._unmaskedVendor = "(unavailable)";
            this._unmaskedRenderer = "(unavailable)";
            this._lastProgram = null;
            this._spDeviceTransformTextureFill = null;
            this._depthBuffer = null;
            for (const stateGroup of this._stateGroups.values()) stateGroup.OnContextLost()
        }
        async OnContextRestored() {
            this._isInitialisingAfterContextRestored =
                true;
            await this.InitState();
            this._isInitialisingAfterContextRestored = false;
            for (const stateGroup of this._stateGroups.values()) stateGroup.OnContextRestored(this);
            this.SetSize(this._width, this._height, true)
        }
        CreateStaticTexture(data, opts) {
            if (this.IsContextLost()) throw new Error("context lost");
            this.EndBatch();
            const rendererTex = C3.New(C3.Gfx.WebGLRendererTexture, this);
            rendererTex._CreateStatic(data, opts);
            return rendererTex
        }
        async CreateStaticTextureAsync(data, opts) {
            if (this.IsContextLost()) throw new Error("context lost");
            opts = Object.assign({}, opts);
            if (C3.Supports.ImageBitmapOptions && (C3.Platform.Browser !== "Safari" || !(data instanceof ImageData) || typeof Image === "undefined")) {
                let imageBitmap = await createImageBitmap(data, {
                    "premultiplyAlpha": "premultiply"
                });
                const isTiled = opts.wrapX && opts.wrapX !== "clamp-to-edge" || opts.wrapY && opts.wrapY !== "clamp-to-edge";
                const isPOT = C3.isPOT(imageBitmap.width) && C3.isPOT(imageBitmap.height);
                if (!this.SupportsNPOTTextures() && !isPOT && isTiled)
                    if (C3.Supports.ImageBitmapOptionsResize) {
                        imageBitmap =
                            await createImageBitmap(data, {
                                "premultiplyAlpha": "premultiply",
                                "resizeWidth": C3.nextHighestPowerOfTwo(imageBitmap.width),
                                "resizeHeight": C3.nextHighestPowerOfTwo(imageBitmap.height)
                            });
                        opts.premultiplyAlpha = false
                    } else imageBitmap = await createImageBitmap(data, {
                        "premultiplyAlpha": "none"
                    });
                else opts.premultiplyAlpha = false;
                return await C3.Asyncify(() => this.CreateStaticTexture(imageBitmap, opts))
            } else {
                if (data instanceof Blob) {
                    if (typeof Image === "undefined") throw new Error("texture upload variant not supported in worker");
                    const img = await C3.BlobToImage(data);
                    data = img
                }
                return await C3.Asyncify(() => this.CreateStaticTexture(data, opts))
            }
        }
        CreateDynamicTexture(width, height, opts) {
            this.EndBatch();
            const rendererTex = C3.New(C3.Gfx.WebGLRendererTexture, this);
            rendererTex._CreateDynamic(width, height, opts);
            return rendererTex
        }
        UpdateTexture(data, rendererTex, opts) {
            this.EndBatch();
            rendererTex._Update(data, opts)
        }
        DeleteTexture(rendererTex) {
            if (!rendererTex) return;
            rendererTex.SubtractReference();
            if (rendererTex.GetReferenceCount() > 0) return;
            this.EndBatch();
            if (rendererTex === this._lastTexture0) {
                this._gl.bindTexture(this._gl.TEXTURE_2D, null);
                this._lastTexture0 = null
            }
            if (rendererTex === this._lastTexture1) {
                this._gl.activeTexture(this._gl.TEXTURE1);
                this._gl.bindTexture(this._gl.TEXTURE_2D, null);
                this._gl.activeTexture(this._gl.TEXTURE0);
                this._lastTexture1 = null
            }
            rendererTex._Delete()
        }
        CreateRenderTarget(opts) {
            let width = this._width;
            let height = this._height;
            let isDefaultSize = true;
            if (opts) {
                if (typeof opts.width === "number") {
                    width = opts.width;
                    isDefaultSize =
                        false
                }
                if (typeof opts.height === "number") {
                    height = opts.height;
                    isDefaultSize = false
                }
            }
            if (width <= 0 || height <= 0) throw new Error("invalid size");
            this.EndBatch();
            const renderTarget = C3.New(C3.Gfx.WebGLRenderTarget, this);
            renderTarget._Create(width, height, Object.assign({
                isDefaultSize
            }, opts));
            this._currentRenderTarget = null;
            this._batchState.currentFramebuffer = null;
            this._batchState.currentFramebufferNoDepth = null;
            return renderTarget
        }
        SetRenderTarget(renderTarget, updateProjection = true) {
            if (renderTarget === this._currentRenderTarget) return;
            if (renderTarget && renderTarget.IsDefaultSize()) renderTarget._Resize(this._width, this._height);
            const b = this.PushBatch();
            b.InitSetRenderTarget(renderTarget);
            this._currentRenderTarget = renderTarget;
            this._topOfBatch = 0;
            if (updateProjection) this.SetDefaultRenderTargetProjectionState()
        }
        GetRenderTarget() {
            return this._currentRenderTarget
        }
        GetRenderTargetSize(renderTarget) {
            if (renderTarget) return [renderTarget.GetWidth(), renderTarget.GetHeight()];
            else return [this._width, this._height]
        }
        CopyRenderTarget(renderTarget,
            mode = "stretch") {
            if (this._version < 2 || this._currentRenderTarget && this._currentRenderTarget.GetMultisampling() > 0) {
                this.SetCopyBlend();
                this.ResetColor();
                this.DrawRenderTarget(renderTarget, mode)
            } else {
                const b = this.PushBatch();
                b.InitBlitFramebuffer(renderTarget, this._currentRenderTarget, mode);
                this._topOfBatch = 0
            }
        }
        DrawRenderTarget(renderTarget, mode = "stretch") {
            const tex = renderTarget.GetTexture();
            if (!tex) throw new Error("not a texture-backed render target");
            this.SetTexture(tex);
            this.FullscreenQuad(mode, tex)
        }
        InvalidateRenderTarget(renderTarget) {
            if (this._version <
                2) return;
            const b = this.PushBatch();
            b.InitInvalidateFramebuffer(renderTarget._GetFramebuffer());
            this._topOfBatch = 0
        }
        DeleteRenderTarget(renderTarget) {
            this.SetRenderTarget(null);
            this.EndBatch();
            const renderTex = renderTarget.GetTexture();
            if (renderTex === this._lastTexture0) {
                this._gl.bindTexture(this._gl.TEXTURE_2D, null);
                this._lastTexture0 = null
            }
            if (renderTex === this._lastTexture1) {
                this._gl.activeTexture(this._gl.TEXTURE1);
                this._gl.bindTexture(this._gl.TEXTURE_2D, null);
                this._gl.activeTexture(this._gl.TEXTURE0);
                this._lastTexture1 = null
            }
            renderTarget._Delete()
        }
        async ReadBackRenderTargetToImageData(renderTarget, forceSynchronous, areaRect) {
            this.EndBatch();
            const oldRenderTarget = this._currentRenderTarget;
            let width, height, framebuffer;
            if (renderTarget) {
                width = renderTarget.GetWidth();
                height = renderTarget.GetHeight();
                framebuffer = renderTarget._GetFramebuffer()
            } else {
                width = this.GetWidth();
                height = this.GetHeight();
                framebuffer = null
            }
            let x = 0;
            let y = 0;
            let areaWidth = width;
            let areaHeight = height;
            if (areaRect) {
                x = C3.clamp(Math.floor(areaRect.getLeft()),
                    0, width - 1);
                y = C3.clamp(Math.floor(areaRect.getTop()), 0, height - 1);
                let w = areaRect.width();
                if (w === 0) w = width - x;
                else w = C3.clamp(Math.floor(w), 0, width - x);
                let h = areaRect.height();
                if (h === 0) h = height - y;
                else h = C3.clamp(Math.floor(h), 0, height - y);
                areaWidth = w;
                areaHeight = h;
                y = height - (y + areaHeight)
            }
            const gl = this._gl;
            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);
            const restorePreviousRenderTarget = () => {
                gl.bindFramebuffer(gl.FRAMEBUFFER, null);
                this._currentRenderTarget = null;
                this._batchState.currentFramebuffer = null;
                this._batchState.currentFramebufferNoDepth =
                    null;
                this.SetRenderTarget(oldRenderTarget)
            };
            let imageData;
            if (!forceSynchronous && this.GetWebGLVersionNumber() >= 2) {
                gl.bindFramebuffer(gl.READ_FRAMEBUFFER, framebuffer);
                const pixelBuffer = gl.createBuffer();
                const bufferSize = areaWidth * areaHeight * 4;
                const PIXEL_PACK_BUFFER = gl["PIXEL_PACK_BUFFER"];
                gl.bindBuffer(PIXEL_PACK_BUFFER, pixelBuffer);
                gl.bufferData(PIXEL_PACK_BUFFER, bufferSize, gl["STREAM_READ"]);
                gl.readPixels(x, y, areaWidth, areaHeight, gl.RGBA, gl.UNSIGNED_BYTE, 0);
                gl.bindFramebuffer(gl.READ_FRAMEBUFFER,
                    null);
                gl.bindBuffer(PIXEL_PACK_BUFFER, null);
                restorePreviousRenderTarget();
                const sync = gl["fenceSync"](gl["SYNC_GPU_COMMANDS_COMPLETE"], 0);
                await this._WaitForObjectReady(() => gl["getSyncParameter"](sync, gl["SYNC_STATUS"]) === gl["SIGNALED"]);
                gl["deleteSync"](sync);
                imageData = new ImageData(areaWidth, areaHeight);
                gl.bindBuffer(PIXEL_PACK_BUFFER, pixelBuffer);
                gl["getBufferSubData"](PIXEL_PACK_BUFFER, 0, new Uint8Array(imageData.data.buffer), 0, bufferSize);
                gl.bindBuffer(PIXEL_PACK_BUFFER, null);
                gl.deleteBuffer(pixelBuffer)
            } else {
                imageData =
                    new ImageData(areaWidth, areaHeight);
                gl.readPixels(x, y, areaWidth, areaHeight, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(imageData.data.buffer));
                restorePreviousRenderTarget()
            }
            return imageData
        }
        CoplanarStartStencilPass() {
            this.SetDepthEnabled(true);
            const batch = this.PushBatch();
            batch.InitCoplanarStartStencilPass();
            this._topOfBatch = 0
        }
        CoplanarStartColorPass() {
            this.SetDepthEnabled(false);
            const batch = this.PushBatch();
            batch.InitCoplanarStartColorPass();
            this._topOfBatch = 0
        }
        CoplanarRestoreStandardRendering() {
            this.SetDepthEnabled(true);
            const batch = this.PushBatch();
            batch.InitCoplanarRestore();
            this._topOfBatch = 0
        }
        StartQuery(query) {
            if (!this.SupportsGPUProfiling()) return;
            const b = this.PushBatch();
            b.InitStartQuery(query);
            this._topOfBatch = 0
        }
        EndQuery(query) {
            if (!this.SupportsGPUProfiling()) return;
            const b = this.PushBatch();
            b.InitEndQuery(query);
            this._topOfBatch = 0
        }
        _WaitForObjectReady(checkFunc) {
            const ret = new Promise(resolve => pendingPolls.add({
                resolve,
                checkFunc
            }));
            if (pollRafId === -1) pollRafId = self.requestAnimationFrame(CheckPendingPolls);
            return ret
        }
        IsDesynchronized() {
            return !!this._attribs["desynchronized"]
        }
        GetEstimatedBackBufferMemoryUsage() {
            return this._width *
                this._height * (this._attribs["alpha"] ? 4 : 3)
        }
        GetEstimatedRenderBufferMemoryUsage() {
            let ret = 0;
            for (const t of C3.Gfx.WebGLRenderTarget.allRenderTargets()) {
                if (t.GetTexture()) continue;
                ret += t.GetEstimatedMemoryUsage()
            }
            return ret
        }
        GetEstimatedTextureMemoryUsage() {
            let ret = 0;
            for (const t of C3.Gfx.WebGLRendererTexture.allTextures()) ret += t.GetEstimatedMemoryUsage();
            return ret
        }
        GetEstimatedTotalMemoryUsage() {
            return this.GetEstimatedBackBufferMemoryUsage() + this.GetEstimatedRenderBufferMemoryUsage() + this.GetEstimatedTextureMemoryUsage()
        }
        GetWebGLVersionString() {
            return this._versionString
        }
        GetWebGLVersionNumber() {
            return this._version
        }
        GetDisplayName() {
            return "webgl" +
                this.GetWebGLVersionNumber()
        }
        SupportsNPOTTextures() {
            return this.GetWebGLVersionNumber() >= 2
        }
        GetMaxTextureSize() {
            return this._maxTextureSize
        }
        GetMinPointSize() {
            return this._minPointSize
        }
        GetMaxPointSize() {
            return this._maxPointSize
        }
        SupportsHighP() {
            return this._highpPrecision !== 0
        }
        GetHighPPrecision() {
            return this._highpPrecision
        }
        GetUnmaskedVendor() {
            return this._unmaskedVendor
        }
        GetUnmaskedRenderer() {
            return this._unmaskedRenderer
        }
        GetWebGLExtensionsAnalyticsString() {
            if (this.GetWebGLVersionNumber() >= 2) return "webgl2";
            else {
                const exts = [];
                if (this._fragDepthExt) exts.push("EXT_frag_depth");
                if (this._stdDerivativesExt) exts.push("OES_standard_derivatives");
                if (this._textureLodExt) exts.push("EXT_shader_texture_lod");
                if (exts.length > 0) return "webgl1:" + exts.join(",");
                else return "webgl1:none"
            }
        }
        GetExtensions() {
            return this._extensions
        }
        SupportsGPUProfiling() {
            return !!this._timerExt
        }
        _GetDisjointTimerQueryExtension() {
            return this._timerExt
        }
        _GetParallelShaderCompileExtension() {
            return this._parallelShaderCompileExt
        }
        _GetAnisotropicExtension() {
            return this._anisotropicExt
        }
        _GetMaxAnisotropy() {
            return this._maxAnisotropy
        }
        _AddQueryResultBuffer(qrb) {
            this._allQueryResultBuffers.add(qrb)
        }
        _RemoveQueryResultBuffer(qrb) {
            this._allQueryResultBuffers.delete(qrb)
        }
        _GetTimeQueryStack() {
            return this._timeQueryStack
        }
        GetContext() {
            return this._gl
        }
        _InitBlendModes(gl) {
            this._InitBlendModeData([
                ["normal",
                    gl.ONE, gl.ONE_MINUS_SRC_ALPHA
                ],
                ["additive", gl.ONE, gl.ONE],
                ["xor", gl.ONE, gl.ONE_MINUS_SRC_ALPHA],
                ["copy", gl.ONE, gl.ZERO],
                ["destination-over", gl.ONE_MINUS_DST_ALPHA, gl.ONE],
                ["source-in", gl.DST_ALPHA, gl.ZERO],
                ["destination-in", gl.ZERO, gl.SRC_ALPHA],
                ["source-out", gl.ONE_MINUS_DST_ALPHA, gl.ZERO],
                ["destination-out", gl.ZERO, gl.ONE_MINUS_SRC_ALPHA],
                ["source-atop", gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA],
                ["destination-atop", gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA]
            ])
        }
        CreateRendererText() {
            return C3.New(C3.Gfx.RendererText,
                this)
        }
        CreateWebGLText() {
            return this.CreateRendererText()
        }
    };

}

// ../lib/gfx/effectCompositor/effectChainManager.js
{
    'use strict';
    const C3 = self.C3;
    const DEFAULT_CTOR_OPTS = {
        getDrawSize: null,
        getRenderTarget: null,
        releaseRenderTarget: null,
        getTime: null,
        redraw: null
    };
    C3.Gfx.EffectChainManager = class EffectChainManager {
        constructor(opts) {
            opts = Object.assign({}, DEFAULT_CTOR_OPTS, opts);
            this._cbGetDrawSize = opts.getDrawSize;
            this._cbGetRenderTarget = opts.getRenderTarget;
            this._cbReleaseRenderTarget = opts.releaseRenderTarget;
            this._cbGetTime = opts.getTime;
            this._cbRedraw = opts.redraw;
            this._webgpuBackTexture = null;
            this._allEffectChains = new Set
        }
        _AddEffectChain(ec) {
            this._allEffectChains.add(ec)
        }
        _RemoveEffectChain(ec) {
            this._allEffectChains.delete(ec)
        }
        OnContextLost() {
            this._webgpuBackTexture =
                null;
            for (const ec of this._allEffectChains) ec.OnContextLost()
        }
        GetDrawSize(renderer) {
            if (this._cbGetDrawSize) return this._cbGetDrawSize(renderer);
            else return [renderer.GetWidth(), renderer.GetHeight()]
        }
        GetRenderTarget(effectChain) {
            return this._cbGetRenderTarget(effectChain)
        }
        ReleaseRenderTarget(rt, effectChain) {
            this._cbReleaseRenderTarget(rt, effectChain)
        }
        GetTime() {
            return this._cbGetTime()
        }
        Redraw(effectChain) {
            this._cbRedraw(effectChain)
        }
        _GetWebGPUBackTexture(renderer, width, height) {
            if (this._webgpuBackTexture &&
                (this._webgpuBackTexture.GetWidth() !== width || this._webgpuBackTexture.GetHeight() !== height)) {
                renderer.DeleteTexture(this._webgpuBackTexture);
                this._webgpuBackTexture = null
            }
            if (this._webgpuBackTexture === null) this._webgpuBackTexture = renderer.CreateStaticTexture(null, {
                width,
                height,
                sampling: "nearest",
                mipMap: false
            });
            return this._webgpuBackTexture
        }
    };

}

// ../lib/gfx/effectCompositor/effectChain.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;
    const glMatrix = self.glMatrix;
    const mat4 = glMatrix.mat4;
    const tempRect = C3.New(C3.Rect);
    const tempRect2 = C3.New(C3.Rect);
    const tempRect3 = C3.New(C3.Rect);
    const tempRect4 = C3.New(C3.Rect);
    const tempMat4a = mat4.create();
    const tempMat4b = mat4.create();
    const DEFAULT_CTOR_OPTS = {
        drawContent: null,
        getSourceTextureInfo: null,
        getShaderParameters: null,
        invalidateRenderTargets: false
    };
    const DEFAULT_BUILDSTEPS_OPTS = {
        indexMap: null,
        forcePreDraw: false,
        forcePostDraw: false,
        is3D: false,
        isSourceTextureRotated: false,
        isRotatedOrNegativeSizeInstance: false,
        useFullSurface: false
    };
    C3.Gfx.EffectChain = class EffectChain {
        constructor(manager, opts) {
            opts = Object.assign({}, DEFAULT_CTOR_OPTS, opts);
            this._manager = manager;
            this._cbDrawContent = opts.drawContent;
            this._cbGetSourceTextureInfo = opts.getSourceTextureInfo;
            this._cbGetShaderParameters = opts.getShaderParameters;
            this._cbDrawContentHook = null;
            this._shaderProgramList = [];
            this._shaderProgramIndices = [];
            this._steps = [];
            this._needsRebuild = false;
            this._blendMode = 0;
            this._isAnyShaderAnimated = false;
            this._isAnyShaderDepthSampling = false;
            this._isAnyShaderBackgroundBlending =
                false;
            this._isAnyShaderCrossSampling = false;
            this._isAnyIsSrcTexRotated = false;
            this._useCopyTextureBackgroundSampling = false;
            this._didChangeTransform = false;
            this._depthEnabledAtStart = false;
            this._canUseFastPath = false;
            this._useFullSurface = false;
            this._isSourceTextureRotated = false;
            this._numTempSurfacesRequired = 0;
            this._renderTargets = [null, null, null];
            this._invalidateRenderTargets = !!opts.invalidateRenderTargets;
            this._boxExtendHorizontal = 0;
            this._boxExtendVertical = 0;
            this._drawWidth = 0;
            this._drawHeight = 0;
            this._contentObject =
                null;
            this._contextObject = null;
            this._layoutRect = C3.New(C3.Rect);
            this._drawSurfaceRect = C3.New(C3.Rect);
            this._rcTexOriginal = C3.New(C3.Rect);
            this._rcTexBounce = C3.New(C3.Rect);
            this._rcTexDest = C3.New(C3.Rect);
            this._devicePixelRatio = 1;
            this._layerScale = 1;
            this._layerAngle = 0;
            this._time = 0;
            this._destRenderTarget = null;
            this._backTex = null;
            this._compositOffX = 0;
            this._compositOffY = 0;
            this._updateOwnProjection = false;
            this._projectionMatrix = mat4.create();
            this._modelViewMatrix = mat4.create();
            this._manager._AddEffectChain(this)
        }
        Release() {
            this._manager._RemoveEffectChain(this);
            C3.clearArray(this._steps);
            C3.clearArray(this._shaderProgramList);
            C3.clearArray(this._shaderProgramIndices);
            this._contentObject = null;
            this._contextObject = null;
            this._cbDrawContent = null;
            this._cbGetSourceTextureInfo = null;
            this._cbGetShaderParameters = null
        }
        OnContextLost() {
            this._needsRebuild = true;
            C3.clearArray(this._steps);
            C3.clearArray(this._shaderProgramList);
            C3.clearArray(this._shaderProgramIndices)
        }
        NeedsRebuild() {
            return this._needsRebuild
        }
        BuildSteps(shaderProgramList, opts) {
            opts = Object.assign({}, DEFAULT_BUILDSTEPS_OPTS,
                opts);
            C3.clearArray(this._steps);
            this._boxExtendHorizontal = 0;
            this._boxExtendVertical = 0;
            this._isAnyShaderAnimated = false;
            this._isAnyShaderDepthSampling = false;
            this._isAnyShaderBackgroundBlending = false;
            this._isAnyShaderCrossSampling = false;
            this._isAnyIsSrcTexRotated = false;
            this._useCopyTextureBackgroundSampling = false;
            this._numTempSurfacesRequired = 0;
            this._isSourceTextureRotated = !!opts.isSourceTextureRotated;
            this._useFullSurface = !!opts.useFullSurface;
            this._needsRebuild = false;
            C3.shallowAssignArray(this._shaderProgramList,
                shaderProgramList);
            if (shaderProgramList.length === 0) return;
            if (opts.indexMap) {
                if (opts.indexMap.length !== shaderProgramList.length) throw new Error("incorrect indexMap length");
                C3.shallowAssignArray(this._shaderProgramIndices, opts.indexMap)
            } else {
                C3.clearArray(this._shaderProgramIndices);
                for (let i = 0, len = shaderProgramList.length; i < len; ++i) this._shaderProgramIndices.push(i)
            }
            for (const s of shaderProgramList) {
                this._boxExtendHorizontal += s.GetBoxExtendHorizontal();
                this._boxExtendVertical += s.GetBoxExtendVertical();
                if (s.IsAnimated()) this._isAnyShaderAnimated = true;
                if (s.UsesDepth()) this._isAnyShaderDepthSampling = true;
                if (s.BlendsBackground()) this._isAnyShaderBackgroundBlending = true;
                if (s.UsesCrossSampling()) this._isAnyShaderCrossSampling = true;
                if (s.UsesIsSrcTexRotated()) this._isAnyIsSrcTexRotated = true
            }
            this._useCopyTextureBackgroundSampling = this._ShouldUseCopyTextureBackgroundSampling(shaderProgramList[0].GetRenderer());
            const doPreDraw = this._ShouldPreDraw(shaderProgramList[0], opts);
            const doPostDraw = this._ShouldPostDraw(shaderProgramList.at(-1),
                opts);
            if (shaderProgramList.length === 1 && !doPreDraw && !doPostDraw) {
                this._canUseFastPath = true;
                return
            }
            this._canUseFastPath = false;
            let lastTargetId = 0;
            if (doPreDraw) {
                this._numTempSurfacesRequired = 1;
                this._steps.push(C3.New(C3.Gfx.EffectChain.Step.PreDraw, this, -1, 1));
                lastTargetId = 1
            }
            for (let i = 0, len = shaderProgramList.length; i < len; ++i)
                if (i === 0 && !doPreDraw) {
                    this._numTempSurfacesRequired = 1;
                    this._steps.push(C3.New(C3.Gfx.EffectChain.Step.FirstBounce, this, -1, 1, i));
                    lastTargetId = 1
                } else {
                    let nextTargetId = lastTargetId ===
                        1 ? 2 : 1;
                    if (i === len - 1 && !doPostDraw) nextTargetId = 0;
                    this._numTempSurfacesRequired = Math.max(this._numTempSurfacesRequired, nextTargetId);
                    this._steps.push(C3.New(C3.Gfx.EffectChain.Step.Bounce, this, lastTargetId, nextTargetId, i));
                    lastTargetId = nextTargetId
                }
            if (doPostDraw) this._steps.push(C3.New(C3.Gfx.EffectChain.Step.PostDraw, this, lastTargetId, 0))
        }
        _ShouldPreDraw(firstShaderProgram, opts) {
            if (opts.forcePreDraw || firstShaderProgram.MustPreDraw() || opts.is3D || firstShaderProgram.UsesDepth() && !this._useFullSurface ||
                (this._boxExtendHorizontal !== 0 || this._boxExtendVertical !== 0)) return true;
            if (firstShaderProgram.GetRenderer().IsWebGL()) return firstShaderProgram.BlendsBackground() && (opts.isRotatedOrNegativeSizeInstance || opts.isSourceTextureRotated) || firstShaderProgram.UsesAnySrcRectOrPixelSize() && opts.isSourceTextureRotated;
            else return false
        }
        _ShouldPostDraw(lastShaderProgram, opts) {
            if (opts.forcePostDraw) return true;
            if (lastShaderProgram.GetRenderer().IsWebGL()) return lastShaderProgram.BlendsBackground() || lastShaderProgram.UsesCrossSampling();
            else return (lastShaderProgram.BlendsBackground() || lastShaderProgram.UsesCrossSampling()) && this._UseRenderTargetBackgroundSampling()
        }
        _ShouldUseCopyTextureBackgroundSampling(renderer) {
            return renderer.IsWebGPU() && this._isAnyShaderBackgroundBlending && !this._isAnyShaderCrossSampling
        }
        Render(renderer, destRenderTarget, opts) {
            if (renderer.IsWebGPU() && destRenderTarget === null) destRenderTarget = renderer.GetBackbufferRenderTarget();
            this._destRenderTarget = destRenderTarget;
            this._contentObject = opts.contentObject || null;
            this._contextObject = opts.contextObject || null;
            this._blendMode = opts.blendMode || 0;
            this._devicePixelRatio = opts.devicePixelRatio || 1;
            this._layerScale = opts.layerScale || 1;
            this._layerAngle = opts.layerAngle || 0;
            this._time = typeof opts.time === "number" ? opts.time : this._manager.GetTime();
            this._didChangeTransform = false;
            renderer.ResetDidChangeTransformFlag();
            if (this._isAnyShaderAnimated) this._Redraw();
            let didCalcDrawSizeAndRects = false;
            if (this._UseCopyTextureBackgroundSampling()) {
                this._CalculateDrawSizeAndRectangles(renderer,
                    opts);
                didCalcDrawSizeAndRects = true;
                this._backTex = this._manager._GetWebGPUBackTexture(renderer, this._drawWidth, this._drawHeight);
                tempRect.copy(this._drawSurfaceRect);
                tempRect.roundOuter();
                renderer.CopyTextureToTexture(this._destRenderTarget.GetTexture(), this._backTex, tempRect.getLeft(), tempRect.getTop(), tempRect.width(), tempRect.height())
            }
            if (this._canUseFastPath) {
                this._Render_FastPath(renderer, opts);
                return
            }
            if (!didCalcDrawSizeAndRects) this._CalculateDrawSizeAndRectangles(renderer, opts);
            renderer.ResetColor();
            renderer.SetBaseZ(0);
            renderer.SetCurrentZ(0);
            this._cbDrawContentHook = opts.drawContentHook || null;
            this._compositOffX = opts.compositOffX || 0;
            this._compositOffY = opts.compositOffY || 0;
            this._updateOwnProjection = !!opts.updateOwnProjection;
            this._OnBeforeStartEffectChain(renderer);
            this._renderTargets[0] = destRenderTarget;
            this._renderTargets[1] = this._numTempSurfacesRequired >= 1 ? this._GetRenderTarget() : null;
            this._renderTargets[2] = this._numTempSurfacesRequired === 2 ? this._GetRenderTarget() : null;
            for (const step of this._steps) {
                const srcTarget =
                    this._GetRenderTargetForId(step.GetSrcTargetId());
                const destTarget = this._GetRenderTargetForId(step.GetDestTargetId());
                if (renderer.IsWebGPU()) step.Run_WebGPU(renderer, srcTarget, destTarget);
                else step.Run_WebGL(renderer, srcTarget, destTarget)
            }
            if (this._renderTargets[1]) this._ReleaseRenderTarget(this._renderTargets[1]);
            if (this._renderTargets[2]) this._ReleaseRenderTarget(this._renderTargets[2]);
            this._renderTargets.fill(null);
            this._OnAfterEndEffectChain(renderer);
            this._destRenderTarget = null;
            this._backTex =
                null;
            this._contentObject = null;
            this._contextObject = null;
            this._cbDrawContentHook = null
        }
        _CalculateDrawSizeAndRectangles(renderer, opts) {
            const [drawWidth, drawHeight] = this._manager.GetDrawSize(renderer);
            this._SetDrawSize(renderer, drawWidth, drawHeight);
            this._CalculateRectangles(opts)
        }
        _SetDrawSize(renderer, drawWidth, drawHeight) {
            if (drawWidth <= 0 || drawHeight <= 0) throw new Error("invalid draw size");
            if (this._drawWidth !== drawWidth || this._drawHeight !== drawHeight) this._CalculateDeviceTransformMatrices(renderer, drawWidth,
                drawHeight, 0, 0, this._projectionMatrix, this._modelViewMatrix);
            this._drawWidth = drawWidth;
            this._drawHeight = drawHeight
        }
        _CalculateDeviceTransformMatrices(renderer, width, height, offX, offY, projMat, mvMat) {
            const scrollX = width / 2 + offX;
            const scrollY = height / 2 + offY;
            renderer.CalculatePerspectiveMatrix(projMat, width / height);
            const tempMat4 = renderer.CalculateLookAtModelView2(scrollX, scrollY, renderer.GetDefaultCameraZ(height), scrollX, scrollY, 0, height);
            mat4.copy(mvMat, tempMat4)
        }
        _CalculateRectangles(opts) {
            this._layoutRect.copy(opts.layoutRect);
            if (opts.drawSurfaceRect) this._drawSurfaceRect.copy(opts.drawSurfaceRect);
            else this._drawSurfaceRect.set(0, 0, this._drawWidth, this._drawHeight);
            this._rcTexOriginal.copy(this._drawSurfaceRect);
            this._rcTexOriginal.divide(this._drawWidth, this._drawHeight);
            const boxScale = this._layerScale * this._devicePixelRatio;
            this._drawSurfaceRect.inflate(this._boxExtendHorizontal * boxScale, this._boxExtendVertical * boxScale);
            this._rcTexDest.copy(this._drawSurfaceRect);
            this._rcTexDest.divide(this._drawWidth, this._drawHeight);
            this._drawSurfaceRect.clamp(0, 0, this._drawWidth, this._drawHeight);
            this._rcTexBounce.copy(this._drawSurfaceRect);
            this._rcTexBounce.divide(this._drawWidth, this._drawHeight)
        }
        _OnBeforeStartEffectChain(renderer) {
            this._depthEnabledAtStart = renderer.IsDepthEnabled();
            if (this._useFullSurface) {
                renderer.SetDepthEnabled(false);
                if (this._isAnyShaderDepthSampling) renderer.SetDepthSamplingEnabled(true)
            } else {
                tempRect.copy(this._drawSurfaceRect);
                if (renderer.IsWebGL()) {
                    const boxScale = this._layerScale * this._devicePixelRatio;
                    tempRect.inflate(Math.max(this._boxExtendHorizontal, 1) * boxScale, Math.max(this._boxExtendVertical, 1) * boxScale);
                    tempRect.roundOuter();
                    tempRect.clamp(0, 0, this._drawWidth, this._drawHeight)
                } else tempRect.roundOuter();
                renderer.SetScissorRect(tempRect.getLeft(), tempRect.getTop(), tempRect.width(), tempRect.height(), this._drawHeight)
            }
        }
        _OnAfterEffectChainDrawContent(renderer) {
            renderer.ResetColor();
            if (!this._useFullSurface) {
                renderer.SetDepthEnabled(false);
                if (this._isAnyShaderDepthSampling) renderer.SetDepthSamplingEnabled(true)
            }
            if (renderer.IsWebGPU()) renderer.SetNormalizedCoordsProgramVariant(true)
        }
        _OnAfterEndEffectChain(renderer) {
            renderer.SetDepthSamplingEnabled(false);
            renderer.SetDepthEnabled(this._depthEnabledAtStart);
            if (!this._useFullSurface) renderer.RemoveScissorRect();
            if (renderer.IsWebGPU()) renderer.SetNormalizedCoordsProgramVariant(false);
            this._didChangeTransform = renderer.DidChangeTransform()
        }
        _ClampRcTexDest() {
            this._rcTexDest.clamp(0, 0, 1, 1)
        }
        _GetRenderTargetForId(id) {
            return id < 0 ? null : this._renderTargets[id]
        }
        _GetRenderTarget() {
            return this._manager.GetRenderTarget(this)
        }
        _GetDestRenderTarget() {
            return this._destRenderTarget
        }
        _ReleaseRenderTarget(rt) {
            this._manager.ReleaseRenderTarget(rt,
                this)
        }
        _GetShaderProgramAt(i) {
            return this._shaderProgramList[i]
        }
        _DrawContent(renderer) {
            if (this._cbDrawContentHook) this._cbDrawContentHook(this, renderer, () => this._cbDrawContent(renderer, this));
            else this._cbDrawContent(renderer, this);
            if (!this._canUseFastPath) this._OnAfterEffectChainDrawContent(renderer)
        }
        _IsRenderTargetSameSizeAndOffset(renderer) {
            if (this._useFullSurface) return true;
            if (this._compositOffX !== 0 || this._compositOffY !== 0) return false;
            const [rtWidth, rtHeight] = renderer.GetRenderTargetSize(renderer.GetRenderTarget());
            if (rtWidth !== this._drawWidth || rtHeight !== this._drawHeight) return false;
            return true
        }
        _SetDeviceTransform(renderer, isLast) {
            let projMat = this._projectionMatrix;
            let mvMat = this._modelViewMatrix;
            if (isLast && !this._IsRenderTargetSameSizeAndOffset(renderer)) {
                projMat = tempMat4a;
                mvMat = tempMat4b;
                const [rtWidth, rtHeight] = renderer.GetRenderTargetSize(renderer.GetRenderTarget());
                this._CalculateDeviceTransformMatrices(renderer, rtWidth, rtHeight, this._compositOffX, this._compositOffY, projMat, mvMat);
                if (!this._useFullSurface) renderer.RemoveScissorRect()
            }
            renderer.SetProjectionMatrix(projMat);
            renderer.SetModelViewMatrix(mvMat)
        }
        _Redraw() {
            this._manager.Redraw(this)
        }
        _GetShaderParameters(index, renderer) {
            return this._cbGetShaderParameters(this._shaderProgramIndices[index], renderer)
        }
        _SetProgramParameters(renderer, index) {
            let rcTexDest = this._rcTexDest;
            let srcRect = this._rcTexBounce;
            let srcOriginRect = this._rcTexOriginal;
            if (renderer.IsWebGL()) {
                tempRect2.copy(rcTexDest);
                tempRect2.flipAround(1);
                rcTexDest = tempRect2;
                tempRect3.copy(srcRect);
                tempRect3.flipAround(1);
                srcRect = tempRect3;
                tempRect4.copy(srcOriginRect);
                tempRect4.flipAround(1);
                srcOriginRect = tempRect4
            }
            this._DoSetProgramParameters(renderer, index, srcRect, srcOriginRect, rcTexDest, 1 / this._drawWidth, 1 / this._drawHeight)
        }
        _SetFirstBounceProgramParameters(renderer, index) {
            let srcRect = this._rcTexBounce;
            let srcOriginRect = this._rcTexOriginal;
            let pixelWidth = 1 / this._drawWidth;
            let pixelHeight = 1 / this._drawHeight;
            if (this._cbGetSourceTextureInfo) {
                let {
                    srcTexRect,
                    srcWidth,
                    srcHeight
                } = this._cbGetSourceTextureInfo(this._contentObject);
                if (!srcTexRect) {
                    tempRect.set(0, 0, 0,
                        0);
                    srcTexRect = tempRect
                }
                if (!srcWidth) srcWidth = this._drawWidth;
                if (!srcHeight) srcHeight = this._drawHeight;
                srcRect = srcTexRect;
                srcOriginRect = srcTexRect;
                pixelWidth = 1 / srcWidth;
                pixelHeight = 1 / srcHeight
            } else if (renderer.IsWebGL()) {
                tempRect3.copy(srcRect);
                tempRect3.flipAround(1);
                srcRect = tempRect3;
                tempRect4.copy(srcOriginRect);
                tempRect4.flipAround(1);
                srcOriginRect = tempRect4
            }
            let rcTexDest = this._rcTexDest;
            if (renderer.IsWebGL()) {
                rcTexDest = tempRect2;
                rcTexDest.copy(this._rcTexDest);
                rcTexDest.flipAround(1)
            }
            this._DoSetProgramParameters(renderer,
                index, srcRect, srcOriginRect, rcTexDest, pixelWidth, pixelHeight);
            if (renderer.IsWebGPU() && this._isAnyIsSrcTexRotated) renderer.SetProgramParameter_IsSrcTexRotated(this._isSourceTextureRotated)
        }
        _GetBackTex(renderer) {
            if (this._isAnyShaderBackgroundBlending)
                if (renderer.IsWebGPU())
                    if (this._UseCopyTextureBackgroundSampling()) return this._backTex;
                    else return this._destRenderTarget.GetTexture();
            else return this._destRenderTarget;
            else return null
        }
        _DoSetProgramParameters(renderer, index, srcRect, srcOriginRect, rcTexDest,
            pixelWidth, pixelHeight) {
            renderer.SetProgramParameters(this._GetBackTex(renderer), rcTexDest, srcRect, srcOriginRect, this._layoutRect, pixelWidth, pixelHeight, this._devicePixelRatio, this._layerScale, this._layerAngle, this._time);
            renderer.SetProgramCustomParameters(this._GetShaderParameters(index, renderer))
        }
        _Render_FastPath(renderer, opts) {
            const shaderProgram = this._shaderProgramList[0];
            const wasDepthEnabled = renderer.IsDepthEnabled();
            const usesDepth = shaderProgram.UsesDepth();
            if (usesDepth) {
                renderer.SetDepthEnabled(false);
                renderer.SetDepthSamplingEnabled(true);
                this._rcTexDest.set(0, 0, 1, 1);
                this._rcTexOriginal.set(0, 0, 1, 1)
            }
            renderer.SetProgram(shaderProgram);
            renderer.SetBlendMode(this._blendMode);
            renderer.SetRenderTarget(this._destRenderTarget);
            let pixelWidth = 0;
            let pixelHeight = 1;
            this._rcTexOriginal.set(0, 0, 1, 1);
            if (shaderProgram.UsesAnySrcRectOrPixelSize() && this._cbGetSourceTextureInfo) {
                const {
                    srcTexRect,
                    srcWidth,
                    srcHeight
                } = this._cbGetSourceTextureInfo(this._contentObject);
                if (srcTexRect) this._rcTexOriginal.copy(srcTexRect);
                pixelWidth = Number.isFinite(srcWidth) ? 1 / srcWidth : 0;
                pixelHeight = Number.isFinite(srcHeight) ? 1 / srcHeight : 0
            } else {
                const [drawWidth, drawHeight] = this._manager.GetDrawSize(renderer);
                pixelWidth = 1 / drawWidth;
                pixelHeight = 1 / drawHeight
            }
            if (opts.layoutRect) this._layoutRect.copy(opts.layoutRect);
            else this._layoutRect.set(0, 0, 0, 0);
            renderer.SetProgramParameters(this._GetBackTex(renderer), this._rcTexDest, this._rcTexOriginal, this._rcTexOriginal, this._layoutRect, pixelWidth, pixelHeight, this._devicePixelRatio, this._layerScale,
                this._layerAngle, this._time);
            renderer.SetProgramCustomParameters(this._GetShaderParameters(0, renderer));
            if (renderer.IsWebGPU() && this._isAnyIsSrcTexRotated) renderer.SetProgramParameter_IsSrcTexRotated(this._isSourceTextureRotated);
            renderer.SetBaseZ(0);
            this._DrawContent(renderer);
            if (usesDepth) {
                renderer.SetDepthSamplingEnabled(false);
                renderer.SetDepthEnabled(wasDepthEnabled)
            }
        }
        _UseCopyTextureBackgroundSampling() {
            return this._useCopyTextureBackgroundSampling
        }
        _UseRenderTargetBackgroundSampling() {
            return !this._useCopyTextureBackgroundSampling
        }
        IsAnyShaderBackgroundBlending() {
            return this._isAnyShaderBackgroundBlending
        }
        CanSkipCalculatingDrawSurfaceRect() {
            if (!this._canUseFastPath) return false;
            if (this._UseCopyTextureBackgroundSampling()) return false;
            return true
        }
        UseFullSurface() {
            return this._useFullSurface
        }
        GetContentObject() {
            return this._contentObject
        }
        GetContextObject() {
            return this._contextObject
        }
        _GetBlendMode() {
            return this._blendMode
        }
        _UpdateOwnProjection() {
            return this._updateOwnProjection
        }
        DidChangeTransform() {
            return this._didChangeTransform
        }
        _GetDrawSurfaceRect() {
            return this._drawSurfaceRect
        }
        _GetRcTexBounce() {
            return this._rcTexBounce
        }
        _ShouldInvalidateRenderTargets() {
            return this._invalidateRenderTargets
        }
        async DebugLogRenderTargetContents(msg,
            renderer, renderTarget) {}
    };

}

// ../lib/gfx/effectCompositor/step.js
{
    'use strict';
    const C3 = self.C3;
    C3.Gfx.EffectChain.Step = class EffectChainStep {
        constructor(effectChain, srcTargetId, destTargetId, index = -1) {
            this._effectChain = effectChain;
            this._srcTargetId = srcTargetId;
            this._destTargetId = destTargetId;
            this._index = index
        }
        GetEffectChain() {
            return this._effectChain
        }
        GetSrcTargetId() {
            return this._srcTargetId
        }
        GetDestTargetId() {
            return this._destTargetId
        }
        GetIndex() {
            return this._index
        }
        GetShaderProgram() {
            return this.GetEffectChain()._GetShaderProgramAt(this.GetIndex())
        }
        Run_WebGL(renderer, srcRenderTarget, destRenderTarget) {}
        Run_WebGPU(renderer,
            srcRenderTarget, destRenderTarget) {}
    };

}

// ../lib/gfx/effectCompositor/preDrawStep.js
{
    'use strict';
    const C3 = self.C3;
    C3.Gfx.EffectChain.Step.PreDraw = class PreDrawStep extends C3.Gfx.EffectChain.Step {
        constructor(effectChain, srcTargetId, destTargetId, index) {
            super(effectChain, srcTargetId, destTargetId, index)
        }
        Run_WebGL(renderer, srcRenderTarget, destRenderTarget) {
            const effectChain = this.GetEffectChain();
            renderer.SetAlphaBlend();
            renderer.SetTextureFillMode();
            renderer.SetRenderTarget(destRenderTarget, effectChain._UpdateOwnProjection());
            renderer.ClearRgba(0, 0, 0, 0);
            effectChain._DrawContent(renderer);
            effectChain._ClampRcTexDest()
        }
        Run_WebGPU(renderer,
            srcRenderTarget, destRenderTarget) {
            const effectChain = this.GetEffectChain();
            renderer.SetAlphaBlend();
            renderer.SetTextureFillMode();
            renderer.SetRenderTarget(destRenderTarget, false);
            renderer.ClearRgba(0, 0, 0, 0);
            effectChain._DrawContent(renderer);
            effectChain._ClampRcTexDest()
        }
    };

}

// ../lib/gfx/effectCompositor/postDrawStep.js
{
    'use strict';
    const C3 = self.C3;
    const tempRect = C3.New(C3.Rect);
    const tempQuad = C3.New(C3.Quad);
    C3.Gfx.EffectChain.Step.PostDraw = class PostDrawStep extends C3.Gfx.EffectChain.Step {
        constructor(effectChain, srcTargetId, destTargetId, index) {
            super(effectChain, srcTargetId, destTargetId, index)
        }
        Run_WebGL(renderer, srcRenderTarget, destRenderTarget) {
            const effectChain = this.GetEffectChain();
            renderer.SetTextureFillMode();
            renderer.SetRenderTarget(destRenderTarget);
            effectChain._SetDeviceTransform(renderer, true);
            renderer.SetBlendMode(effectChain._GetBlendMode());
            renderer.SetTexture(srcRenderTarget.GetTexture());
            tempQuad.setFromRect(effectChain._GetDrawSurfaceRect());
            tempRect.copy(effectChain._GetRcTexBounce());
            tempRect.flipAround(1);
            renderer.Quad3(tempQuad, tempRect);
            if (effectChain._ShouldInvalidateRenderTargets()) renderer.InvalidateRenderTarget(srcRenderTarget)
        }
        Run_WebGPU(renderer, srcRenderTarget, destRenderTarget) {
            const effectChain = this.GetEffectChain();
            renderer.SetTextureFillMode();
            renderer.SetRenderTarget(destRenderTarget, false);
            if (effectChain._IsRenderTargetSameSizeAndOffset(renderer)) tempQuad.setFromRect(effectChain._GetRcTexBounce());
            else {
                renderer.SetNormalizedCoordsProgramVariant(false);
                effectChain._SetDeviceTransform(renderer, true);
                tempQuad.setFromRect(effectChain._GetDrawSurfaceRect())
            }
            renderer.SetBackTexture(null);
            renderer.SetBlendMode(effectChain._GetBlendMode());
            renderer.SetTexture(srcRenderTarget.GetTexture());
            if (effectChain.UseFullSurface()) renderer.FullscreenQuad();
            else renderer.Quad3(tempQuad, effectChain._GetRcTexBounce())
        }
    };

}

// ../lib/gfx/effectCompositor/firstBounceStep.js
{
    'use strict';
    const C3 = self.C3;
    C3.Gfx.EffectChain.Step.FirstBounce = class FirstBounceStep extends C3.Gfx.EffectChain.Step {
        constructor(effectChain, srcTargetId, destTargetId, index) {
            super(effectChain, srcTargetId, destTargetId, index)
        }
        Run_WebGL(renderer, srcRenderTarget, destRenderTarget) {
            const effectChain = this.GetEffectChain();
            renderer.SetRenderTarget(destRenderTarget, effectChain._UpdateOwnProjection());
            renderer.ClearRgba(0, 0, 0, 0);
            renderer.SetCopyBlend();
            renderer.SetProgram(this.GetShaderProgram());
            effectChain._SetFirstBounceProgramParameters(renderer, this.GetIndex());
            effectChain._DrawContent(renderer);
            effectChain._ClampRcTexDest()
        }
        Run_WebGPU(renderer, srcRenderTarget, destRenderTarget) {
            const effectChain = this.GetEffectChain();
            renderer.SetRenderTarget(destRenderTarget, false);
            renderer.ClearRgba(0, 0, 0, 0);
            renderer.SetCopyBlend();
            renderer.SetProgram(this.GetShaderProgram());
            effectChain._SetFirstBounceProgramParameters(renderer, this.GetIndex());
            effectChain._DrawContent(renderer);
            effectChain._ClampRcTexDest()
        }
    };

}

// ../lib/gfx/effectCompositor/bounceStep.js
{
    'use strict';
    const C3 = self.C3;
    const tempRect = C3.New(C3.Rect);
    const tempQuad = C3.New(C3.Quad);
    C3.Gfx.EffectChain.Step.Bounce = class BounceStep extends C3.Gfx.EffectChain.Step {
        constructor(effectChain, srcTargetId, destTargetId, index) {
            super(effectChain, srcTargetId, destTargetId, index)
        }
        Run_WebGL(renderer, srcRenderTarget, destRenderTarget) {
            const effectChain = this.GetEffectChain();
            renderer.SetRenderTarget(destRenderTarget);
            const isLast = this.GetDestTargetId() === 0;
            if (isLast) renderer.SetBlendMode(effectChain._GetBlendMode());
            else {
                renderer.ClearRgba(0, 0, 0, 0);
                renderer.SetCopyBlend()
            }
            renderer.SetProgram(this.GetShaderProgram());
            effectChain._SetProgramParameters(renderer, this.GetIndex());
            renderer.SetTexture(srcRenderTarget.GetTexture());
            effectChain._SetDeviceTransform(renderer, isLast);
            tempQuad.setFromRect(effectChain._GetDrawSurfaceRect());
            tempRect.copy(effectChain._GetRcTexBounce());
            tempRect.flipAround(1);
            renderer.Quad3(tempQuad, tempRect);
            if (effectChain._ShouldInvalidateRenderTargets()) renderer.InvalidateRenderTarget(srcRenderTarget)
        }
        Run_WebGPU(renderer, srcRenderTarget, destRenderTarget) {
            const effectChain = this.GetEffectChain();
            renderer.SetRenderTarget(destRenderTarget, false);
            const isLast = this.GetDestTargetId() === 0;
            if (isLast) {
                renderer.SetBlendMode(effectChain._GetBlendMode());
                renderer.SetBackTexture(null);
                if (effectChain._IsRenderTargetSameSizeAndOffset(renderer)) tempQuad.setFromRect(effectChain._GetRcTexBounce());
                else {
                    renderer.SetNormalizedCoordsProgramVariant(false);
                    effectChain._SetDeviceTransform(renderer, true);
                    tempQuad.setFromRect(effectChain._GetDrawSurfaceRect())
                }
            } else {
                renderer.ClearRgba(0, 0, 0, 0);
                renderer.SetCopyBlend();
                tempQuad.setFromRect(effectChain._GetRcTexBounce())
            }
            renderer.SetProgram(this.GetShaderProgram());
            effectChain._SetProgramParameters(renderer, this.GetIndex());
            renderer.SetTexture(srcRenderTarget.GetTexture());
            if (effectChain.UseFullSurface()) renderer.FullscreenQuad();
            else renderer.Quad3(tempQuad, effectChain._GetRcTexBounce())
        }
    };

}

// interfaces/IRuntime.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    let runtime = null;
    const keysDownByKey = new Set;

    function SortZOrderList(a, b) {
        const layerA = a[0];
        const layerB = b[0];
        const diff = layerA - layerB;
        if (diff !== 0) return diff;
        const indexA = a[1];
        const indexB = b[1];
        return indexA - indexB
    }
    const tempZOrderList = [];
    const tempInstances = [];
    let didWarnInAlertPolyfill = false;
    self.IRuntime = class IRuntime {
        constructor(runtime_, objects) {
            runtime = runtime_;
            Object.defineProperties(this, {
                assets: {
                    value: runtime.GetAssetManager().GetIAssetManager(),
                    writable: false
                },
                objects: {
                    value: objects,
                    writable: false
                },
                globalVars: {
                    value: {},
                    writable: false
                },
                projectName: {
                    value: runtime.GetProjectName(),
                    writable: false
                },
                projectVersion: {
                    value: runtime.GetProjectVersion(),
                    writable: false
                },
                storage: {
                    value: new self.IStorage(runtime),
                    writable: false
                },
                isInWorker: {
                    value: runtime.IsInWorker(),
                    writable: false
                },
                viewportWidth: {
                    value: runtime.GetOriginalViewportWidth(),
                    writable: false
                },
                viewportHeight: {
                    value: runtime.GetOriginalViewportHeight(),
                    writable: false
                }
            });
            runtime.UserScriptDispatcher().addEventListener("keydown", e => {
                if (keysDownByKey.has(e["key"])) {
                    e.stopPropagation();
                    return
                }
                keysDownByKey.add(e["key"])
            });
            runtime.UserScriptDispatcher().addEventListener("keyup", e => keysDownByKey.delete(e["key"]));
            runtime.Dispatcher().addEventListener("window-blur", () => keysDownByKey.clear());
            if (runtime.IsInWorker()) self["alert"] = message => {
                if (!didWarnInAlertPolyfill) {
                    didWarnInAlertPolyfill =
                        true;
                    console.warn("[Construct] alert() was called from a Web Worker, because the project 'Use worker' setting is enabled. This method is not normally available in a Web Worker. Construct has implemented the alert for you, but note that other features may be missing in worker mode. You may wish to disable 'Use worker', or use a more convenient function like console.log(). For more information please refer to the scripting section of the manual.")
                }
                return this.alert(message)
            }
        }
        _InitGlobalVars(globalVarDescriptors) {
            Object.defineProperties(this.globalVars,
                globalVarDescriptors)
        }
        addEventListener(name, func) {
            runtime.UserScriptDispatcher().addEventListener(name, func)
        }
        removeEventListener(name, func) {
            runtime.UserScriptDispatcher().removeEventListener(name, func)
        }
        callFunction(name, ...params) {
            C3X.RequireString(name);
            const eventSheetManager = runtime.GetEventSheetManager();
            const functionBlock = eventSheetManager.GetFunctionBlockByName(name);
            if (!functionBlock) throw new Error(`cannot find function name '${name}'`);
            if (!functionBlock.IsEnabled()) return functionBlock.GetDefaultReturnValue();
            if (params.length < functionBlock.GetFunctionParameterCount()) throw new Error(`not enough function parameters passed for '${name}' (${params.length} passed, ${functionBlock.GetFunctionParameterCount()} expected)`);
            const callEventBlock = functionBlock.GetEventBlock();
            let allSolModifiers = callEventBlock.GetSolModifiersIncludingParents();
            const currentEvent = eventSheetManager.GetCurrentEvent();
            if (currentEvent) {
                allSolModifiers = allSolModifiers.slice(0);
                const allSolModifiersSet = new Set(allSolModifiers);
                for (const objectClass of currentEvent.GetSolModifiersIncludingParents())
                    if (!allSolModifiersSet.has(objectClass)) {
                        allSolModifiers.push(objectClass);
                        allSolModifiersSet.add(objectClass)
                    }
                for (const objectClass of eventSheetManager.GetDynamicSolModifiersSet())
                    if (!allSolModifiersSet.has(objectClass)) {
                        allSolModifiers.push(objectClass);
                        allSolModifiersSet.add(objectClass)
                    }
            }
            const ret = callEventBlock.RunAsExpressionFunctionCall(allSolModifiers, functionBlock.IsCopyPicked(), functionBlock.GetReturnType(), functionBlock.GetDefaultReturnValue(), ...params);
            return ret
        }
        setReturnValue(v) {
            const frame = runtime.GetEventStack().GetCurrentExpFuncStackFrame();
            if (!frame) throw new Error("not in a function which returns a value");
            switch (frame.GetFunctionReturnType()) {
                case 1:
                    if (typeof v === "number") frame.SetFunctionReturnValue(v);
                    break;
                case 2:
                    if (typeof v === "string") frame.SetFunctionReturnValue(v);
                    break;
                case 3:
                    if (typeof v === "number" || typeof v === "string") frame.SetFunctionReturnValue(v);
                    break
            }
        }
        getViewportSize() {
            return [runtime.GetOriginalViewportWidth(), runtime.GetOriginalViewportHeight()]
        }
        get dt() {
            return runtime.GetDt()
        }
        get dtRaw() {
            return runtime.GetDtRaw()
        }
        get gameTime() {
            return runtime.GetGameTime()
        }
        get wallTime() {
            return runtime.GetWallTime()
        }
        get timeScale() {
            return runtime.GetTimeScale()
        }
        set timeScale(t) {
            C3X.RequireFiniteNumber(t);
            runtime.SetTimeScale(t)
        }
        get fps() {
            return runtime.GetFPS()
        }
        get cpuUtilisation() {
            return runtime.GetMainThreadTime()
        }
        get gpuUtilisation() {
            return runtime.GetGPUUtilisation()
        }
        random() {
            return runtime.Random()
        }
        get layout() {
            return runtime.GetMainRunningLayout().GetILayout()
        }
        getLayout(nameOrIndex) {
            const layoutManager = runtime.GetLayoutManager();
            let layout = null;
            if (typeof nameOrIndex === "number" || typeof nameOrIndex === "string") layout = layoutManager.GetLayout(nameOrIndex);
            else throw new TypeError("expected string or number");
            if (!layout) throw new Error("invalid layout");
            return layout.GetILayout()
        }
        getAllLayouts() {
            return runtime.GetLayoutManager().GetAllLayouts().map(layout => layout.GetILayout())
        }
        goToLayout(nameOrIndex) {
            const layoutManager = runtime.GetLayoutManager();
            let layout = null;
            if (typeof nameOrIndex === "number" || typeof nameOrIndex === "string") layout = layoutManager.GetLayout(nameOrIndex);
            else throw new TypeError("expected string or number");
            if (!layout) throw new Error("invalid layout");
            if (layoutManager.IsPendingChangeMainLayout()) return;
            layoutManager.ChangeMainLayout(layout)
        }
        get keyboard() {
            const ret = runtime._GetCommonScriptInterfaces().keyboard;
            if (!ret) throw new Error("runtime.keyboard used but Keyboard object missing - add it to your project first");
            return ret
        }
        get mouse() {
            const ret = runtime._GetCommonScriptInterfaces().mouse;
            if (!ret) throw new Error("runtime.mouse used but Mouse object missing - add it to your project first");
            return ret
        }
        get touch() {
            const ret = runtime._GetCommonScriptInterfaces().touch;
            if (!ret) throw new Error("runtime.touch used but Touch object missing - add it to your project first");
            return ret
        }
        invokeDownload(url, filename) {
            C3X.RequireString(url);
            C3X.RequireString(filename);
            runtime.InvokeDownload(url, filename)
        }
        getInstanceByUid(uid) {
            C3X.RequireFiniteNumber(uid);
            const ret = runtime.GetInstanceByUID(uid);
            return ret ? ret.GetInterfaceClass() : null
        }
        sortZOrder(iterable, callback) {
            C3X.RequireFunction(callback);
            const layout = runtime.GetCurrentLayout();
            for (const iinst of iterable) {
                const inst = runtime._UnwrapIWorldInstance(iinst);
                const wi = inst.GetWorldInfo();
                tempZOrderList.push([wi.GetLayer().GetIndex(),
                    wi.GetZIndex()
                ]);
                tempInstances.push(inst)
            }
            if (tempZOrderList.length === 0) return;
            tempZOrderList.sort(SortZOrderList);
            tempInstances.sort((a, b) => callback(a.GetInterfaceClass(), b.GetInterfaceClass()));
            let anyChanged = false;
            for (let i = 0, len = tempZOrderList.length; i < len; ++i) {
                const inst = tempInstances[i];
                const layer = layout.GetLayerByIndex(tempZOrderList[i][0]);
                const toZ = tempZOrderList[i][1];
                const layerInstances = layer._GetInstances();
                if (layerInstances[toZ] !== inst) {
                    layerInstances[toZ] = inst;
                    inst.GetWorldInfo()._SetLayer(layer,
                        true);
                    layer.SetZIndicesChanged();
                    anyChanged = true
                }
            }
            if (anyChanged) runtime.UpdateRender();
            C3.clearArray(tempZOrderList);
            C3.clearArray(tempInstances)
        }
        async createWorker(url, opts) {
            const messageChannel = new MessageChannel;
            const port1 = messageChannel.port1;
            const port2 = messageChannel.port2;
            await runtime.PostComponentMessageToDOMAsync("runtime", "script-create-worker", {
                "url": url,
                "opts": opts,
                "port2": port2
            }, [port2]);
            return port1
        }
        alert(message) {
            return runtime.PostComponentMessageToDOMAsync("runtime", "alert", {
                "message": message +
                    (runtime.IsInWorker() ? " [via Web Worker]" : "")
            })
        }
    };

}

// interfaces/IAssetManager.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    let assetManager = null;
    self.IAssetManager = class IAssetManager {
        constructor(assetManager_) {
            assetManager = assetManager_;
            Object.defineProperties(this, {
                isWebMOpusSupported: {
                    value: assetManager.IsAudioFormatSupported("audio/webm; codecs=opus"),
                    writable: false
                }
            })
        }
        fetchText(url) {
            return assetManager.FetchText(url)
        }
        fetchJson(url) {
            return assetManager.FetchJson(url)
        }
        fetchBlob(url) {
            return assetManager.FetchBlob(url)
        }
        fetchArrayBuffer(url) {
            return assetManager.FetchArrayBuffer(url)
        }
        getProjectFileUrl(url) {
            return assetManager.GetProjectFileUrl(url)
        }
        getMediaFileUrl(url) {
            if (assetManager.GetFileStructure() === "flat" &&
                C3.IsRelativeURL(url)) url = url.toLowerCase();
            return assetManager.GetMediaFileUrl(url)
        }
        get mediaFolder() {
            return assetManager.GetMediaSubfolder()
        }
        async decodeWebMOpus(audioContext, arrayBuffer) {
            if (this.isWebMOpusSupported) throw new Error("decodeWebMOpus(): not supported because WebM Opus is supported by the platform");
            const decodedArrayBuffer = await assetManager.GetRuntime()._WasmDecodeWebMOpus(arrayBuffer);
            const decodedFloats = new Float32Array(decodedArrayBuffer);
            const audioBuffer = audioContext["createBuffer"](1,
                decodedFloats.length, 48E3);
            const channelBuffer = audioBuffer["getChannelData"](0);
            channelBuffer.set(decodedFloats);
            return audioBuffer
        }
        loadScripts(...urls) {
            return assetManager.LoadScripts(...urls)
        }
        compileWebAssembly(url) {
            return assetManager.CompileWebAssembly(url)
        }
        loadStyleSheet(url) {
            return assetManager.LoadStyleSheet(url)
        }
    };

}

// interfaces/IStorage.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    self.IStorage = class IStorage {
        constructor(runtime) {
            this._storage = runtime._GetProjectStorage()
        }
        getItem(key) {
            C3X.RequireString(key);
            return this._storage.getItem(key)
        }
        setItem(key, value) {
            C3X.RequireString(key);
            return this._storage.setItem(key, value)
        }
        removeItem(key) {
            C3X.RequireString(key);
            return this._storage.removeItem(key)
        }
        clear() {
            return this._storage.clear()
        }
        keys() {
            return this._storage.keys()
        }
    };

}

// interfaces/IObjectClass.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    self.IObjectClass = class IObjectClass {
        constructor(objectClass) {
            map.set(this, objectClass);
            Object.defineProperties(this, {
                name: {
                    value: objectClass.GetName(),
                    writable: false
                }
            });
            objectClass.GetRuntime()._MapScriptInterface(this, objectClass)
        }
        addEventListener(type, func) {
            C3X.RequireString(type);
            C3X.RequireFunction(func);
            map.get(this).UserScriptDispatcher().addEventListener(type, func)
        }
        removeEventListener(type, func) {
            C3X.RequireString(type);
            C3X.RequireFunction(func);
            map.get(this).UserScriptDispatcher().removeEventListener(type,
                func)
        }
        getAllInstances() {
            return [...this.instances()]
        }
        getFirstInstance() {
            return C3.first(this.instances())
        }
        getPickedInstances() {
            return [...this.pickedInstances()]
        }
        getFirstPickedInstance() {
            return C3.first(this.pickedInstances())
        }* instances() {
            for (const inst of map.get(this).instancesIncludingPendingCreate()) yield inst.GetInterfaceClass()
        }* pickedInstances() {
            for (const inst of map.get(this).GetCurrentSol().GetInstances()) yield inst.GetInterfaceClass()
        }
        setInstanceClass(Class) {
            C3X.RequireFunction(Class);
            const objectClass =
                map.get(this);
            if (objectClass.GetInstanceCount() > 0) throw new Error("setInstanceClass() called too late, because instances have already been created - call in runOnStartup");
            map.get(this)._SetUserScriptInstanceClass(Class)
        }
        createInstance(layerNameOrIndex, x, y, createHierarchy, template) {
            C3X.RequireNumber(x);
            C3X.RequireNumber(y);
            if (typeof layerNameOrIndex !== "number" && typeof layerNameOrIndex !== "string") throw new TypeError("invalid layer parameter");
            const objectClass = map.get(this);
            const runtime = objectClass.GetRuntime();
            const layer = runtime.GetMainRunningLayout().GetLayer(layerNameOrIndex);
            if (!layer) throw new Error("invalid layer");
            const inst = runtime.CreateInstance(objectClass, layer, x, y, createHierarchy, template);
            if (createHierarchy) layer.SortAndAddInstancesByZIndex(inst);
            const eventSheetManager = runtime.GetEventSheetManager();
            eventSheetManager.BlockFlushingInstances(true);
            inst._TriggerOnCreatedOnSelfAndRelated();
            eventSheetManager.BlockFlushingInstances(false);
            if (!eventSheetManager.IsInEventEngine() && !runtime.GetLayoutManager().IsEndingLayout()) runtime.FlushPendingInstances();
            return inst.GetInterfaceClass()
        }
    };

}

// interfaces/ILayout.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    self.ILayout = class ILayout {
        constructor(layout) {
            map.set(this, layout);
            const effectInstanceArr = [];
            const effectList = layout.GetEffectList();
            const effectCount = effectList.GetAllEffectTypes().length;
            for (let i = 0; i < effectCount; ++i) effectInstanceArr.push(new self.IEffectInstance(effectList, i));
            Object.defineProperties(this, {
                name: {
                    value: layout.GetName(),
                    writable: false
                },
                index: {
                    value: layout.GetIndex(),
                    writable: false
                },
                effects: {
                    value: effectInstanceArr,
                    writable: false
                }
            })
        }
        addEventListener(type, func) {
            C3X.RequireString(type);
            C3X.RequireFunction(func);
            map.get(this).UserScriptDispatcher().addEventListener(type, func)
        }
        removeEventListener(type, func) {
            C3X.RequireString(type);
            C3X.RequireFunction(func);
            map.get(this).UserScriptDispatcher().removeEventListener(type, func)
        }
        get width() {
            return map.get(this).GetWidth()
        }
        set width(w) {
            C3X.RequireFiniteNumber(w);
            map.get(this).SetWidth(w)
        }
        get height() {
            return map.get(this).GetHeight()
        }
        set height(h) {
            C3X.RequireFiniteNumber(h);
            map.get(this).SetHeight(h)
        }
        setSize(w, h) {
            C3X.RequireFiniteNumber(w);
            C3X.RequireFiniteNumber(h);
            const layout = map.get(this);
            layout.SetWidth(w);
            layout.SetHeight(h)
        }
        getSize() {
            const layout = map.get(this);
            return [layout.GetWidth(), layout.GetHeight()]
        }
        set scale(s) {
            C3X.RequireFiniteNumber(s);
            map.get(this).SetScale(s)
        }
        get scale() {
            return map.get(this).GetScale()
        }
        set angle(a) {
            C3X.RequireFiniteNumber(a);
            map.get(this).SetAngle(a)
        }
        get angle() {
            return map.get(this).GetAngle()
        }
        set scrollX(x) {
            C3X.RequireNumber(x);
            map.get(this).SetScrollX(x)
        }
        get scrollX() {
            return map.get(this).GetScrollX()
        }
        set scrollY(y) {
            C3X.RequireNumber(y);
            map.get(this).SetScrollY(y)
        }
        get scrollY() {
            return map.get(this).GetScrollY()
        }
        scrollTo(x, y) {
            C3X.RequireNumber(x);
            C3X.RequireNumber(y);
            const layout = map.get(this);
            layout.SetScrollX(x);
            layout.SetScrollY(y)
        }
        getScrollPosition() {
            const layout = map.get(this);
            return [layout.GetScrollX(), layout.GetScrollY()]
        }
        getLayer(nameOrIndex) {
            const layout = map.get(this);
            let layer = null;
            if (typeof nameOrIndex === "number" || typeof nameOrIndex === "string") layer = layout.GetLayer(nameOrIndex);
            else throw new TypeError("expected string or number");
            if (!layer) return null;
            return layer.GetILayer()
        }
        getAllLayers() {
            return map.get(this).GetLayers().map(layer => layer.GetILayer())
        }* allLayers() {
            for (const layer of map.get(this).allLayers()) yield layer.GetILayer()
        }
        setVanishingPoint(vpX, vpY) {
            C3X.RequireFiniteNumber(vpX);
            C3X.RequireFiniteNumber(vpY);
            map.get(this).SetVanishingPointXY(vpX, vpY)
        }
        getVanishingPoint() {
            return map.get(this)._GetVanishingPoint()
        }
        set projection(p) {
            C3X.RequireString(p);
            const layout = map.get(this);
            if (p === "perspective") layout.SetPerspectiveProjection();
            else if (p === "orthographic") layout.SetOrthographicProjection();
            else throw new Error("invalid projection");
        }
        get projection() {
            if (map.get(this).IsOrthographicProjection()) return "orthographic";
            else return "perspective"
        }
    };

}

// interfaces/ILayer.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    const BLEND_MODE_TO_INDEX = new Map([
        ["normal", 0],
        ["additive", 1],
        ["copy", 3],
        ["destination-over", 4],
        ["source-in", 5],
        ["destination-in", 6],
        ["source-out", 7],
        ["destination-out", 8],
        ["source-atop", 9],
        ["destination-atop", 10]
    ]);
    const INDEX_TO_BLEND_MODE = new Map([...BLEND_MODE_TO_INDEX.entries()].map(a => [a[1], a[0]]));
    const tempColor = C3.New(C3.Color);
    self.ILayer = class ILayer {
        constructor(layer) {
            map.set(this, layer);
            const effectInstanceArr = [];
            const effectList = layer.GetEffectList();
            const effectCount = effectList.GetAllEffectTypes().length;
            for (let i = 0; i < effectCount; ++i) effectInstanceArr.push(new self.IEffectInstance(effectList, i));
            Object.defineProperties(this, {
                name: {
                    value: layer.GetName(),
                    writable: false
                },
                index: {
                    value: layer.GetIndex(),
                    writable: false
                },
                layout: {
                    value: layer.GetLayout().GetILayout(),
                    writable: false
                },
                effects: {
                    value: effectInstanceArr,
                    writable: false
                }
            })
        }
        static _Unwrap(ilayer) {
            return map.get(ilayer)
        }
        get parentLayer() {
            const parent =
                map.get(this).GetParentLayer();
            return parent ? parent.GetILayer() : null
        }* parentLayers() {
            for (const parent of map.get(this).parentLayers()) yield parent.GetILayer()
        }* subLayers() {
            for (const layer of map.get(this).GetSubLayers()) yield layer.GetILayer()
        }* allSubLayers() {
            for (const subLayer of map.get(this).GetSubLayers())
                for (const layer of subLayer.selfAndAllSubLayers()) yield layer.GetILayer()
        }
        get isVisible() {
            return map.get(this)._IsVisibleFlagSet()
        }
        set isVisible(v) {
            map.get(this).SetVisible(v)
        }
        get isSelfAndParentsVisible() {
            return map.get(this).IsVisible()
        }
        get isInteractive() {
            return map.get(this).IsInteractive()
        }
        set isInteractive(i) {
            map.get(this).SetInteractive(i)
        }
        get isSelfAndParentsInteractive() {
            return map.get(this).IsSelfAndParentsInteractive()
        }
        get opacity() {
            return map.get(this).GetOpacity()
        }
        set opacity(o) {
            o =
                C3.clamp(+o, 0, 1);
            if (isNaN(o)) return;
            map.get(this).SetOpacity(o)
        }
        set scale(s) {
            C3X.RequireFiniteNumber(s);
            map.get(this).SetOwnScale(s)
        }
        get scale() {
            return map.get(this).GetOwnScale()
        }
        set scaleRate(r) {
            C3X.RequireFiniteNumber(r);
            map.get(this).SetScaleRate(r)
        }
        get scaleRate() {
            return map.get(this).GetScaleRate()
        }
        set angle(a) {
            C3X.RequireFiniteNumber(a);
            map.get(this).SetAngle(a)
        }
        get angle() {
            return map.get(this).GetOwnAngle()
        }
        set parallaxX(p) {
            C3X.RequireFiniteNumber(p);
            map.get(this).SetParallaxX(p)
        }
        get parallaxX() {
            return map.get(this).GetParallaxX()
        }
        set parallaxY(p) {
            C3X.RequireFiniteNumber(p);
            map.get(this).SetParallaxY(p)
        }
        get parallaxY() {
            return map.get(this).GetParallaxY()
        }
        set zElevation(z) {
            C3X.RequireFiniteNumber(z);
            map.get(this).SetZElevation(z)
        }
        get zElevation() {
            return map.get(this).GetZElevation()
        }
        set isTransparent(t) {
            map.get(this).SetTransparent(t)
        }
        get isTransparent() {
            return map.get(this).IsTransparent()
        }
        set isForceOwnTexture(f) {
            map.get(this).SetForceOwnTexture(f)
        }
        get isForceOwnTexture() {
            return map.get(this).IsForceOwnTexture()
        }
        set blendMode(bm) {
            C3X.RequireString(bm);
            const index = BLEND_MODE_TO_INDEX.get(bm);
            if (typeof index !== "number") throw new Error("invalid blend mode");
            map.get(this).SetBlendMode(index)
        }
        get blendMode() {
            return INDEX_TO_BLEND_MODE.get(map.get(this).GetBlendMode())
        }
        set backgroundColor(arr) {
            C3X.RequireArray(arr);
            if (arr.length < 3) throw new Error("expected 3 elements");
            tempColor.setRgb(arr[0], arr[1], arr[2]);
            const layer = map.get(this);
            const bgColor = layer.GetBackgroundColor();
            if (bgColor.equalsIgnoringAlpha(tempColor)) return;
            bgColor.copyRgb(tempColor);
            layer.GetRuntime().UpdateRender()
        }
        get backgroundColor() {
            const c =
                map.get(this).GetBackgroundColor();
            return [c.getR(), c.getG(), c.getB()]
        }
        set scrollX(x) {
            C3X.RequireNumber(x);
            const layer = map.get(this);
            layer.SetOwnScrollPositionEnabled(true);
            layer.SetScrollX(x)
        }
        get scrollX() {
            return map.get(this).GetScrollX()
        }
        set scrollY(y) {
            C3X.RequireNumber(y);
            const layer = map.get(this);
            layer.SetOwnScrollPositionEnabled(true);
            layer.SetScrollY(y)
        }
        get scrollY() {
            return map.get(this).GetScrollY()
        }
        scrollTo(x, y) {
            C3X.RequireNumber(x);
            C3X.RequireNumber(y);
            const layer = map.get(this);
            layer.SetOwnScrollPositionEnabled(true);
            layer.SetScrollX(x);
            layer.SetScrollY(y)
        }
        getScrollPosition() {
            const layer = map.get(this);
            return [layer.GetScrollX(), layer.GetScrollY()]
        }
        restoreScrollPosition() {
            map.get(this).SetOwnScrollPositionEnabled(false)
        }
        getViewport() {
            return map.get(this).GetViewport().toDOMRect()
        }
        cssPxToLayer(clientX, clientY, z = 0) {
            C3X.RequireNumber(clientX);
            C3X.RequireNumber(clientY);
            C3X.RequireNumber(z);
            const layer = map.get(this);
            const runtime = layer.GetRuntime();
            return layer.CanvasCssToLayer(clientX - runtime.GetCanvasClientX(), clientY -
                runtime.GetCanvasClientY(), z)
        }
        layerToCssPx(layerX, layerY, z = 0) {
            C3X.RequireNumber(layerX);
            C3X.RequireNumber(layerY);
            C3X.RequireNumber(z);
            const layer = map.get(this);
            const runtime = layer.GetRuntime();
            const [clientX, clientY] = layer.LayerToCanvasCss(layerX, layerY, z);
            return [clientX + runtime.GetCanvasClientX(), clientY + runtime.GetCanvasClientY()]
        }
    };

}

// interfaces/IInstance.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    const dispatchers = new WeakMap;

    function GetDispatcher(iinst) {
        let dispatcher = dispatchers.get(iinst);
        if (dispatcher) return dispatcher;
        dispatcher = C3.New(C3.Event.Dispatcher);
        dispatchers.set(iinst, dispatcher);
        return dispatcher
    }
    let initInst = null;
    self.IInstance = class IInstance {
        constructor() {
            map.set(this, initInst);
            const descriptors = {
                runtime: {
                    value: initInst.GetRuntime().GetIRuntime(),
                    writable: false
                },
                objectType: {
                    value: initInst.GetObjectClass().GetIObjectClass(),
                    writable: false
                },
                uid: {
                    value: initInst.GetUID(),
                    writable: false
                }
            };
            initInst._GetInstVarsScriptDescriptor(descriptors);
            initInst._GetBehaviorsScriptDescriptor(descriptors);
            Object.defineProperties(this, descriptors);
            initInst.GetRuntime()._MapScriptInterface(this, initInst)
        }
        static _Init(inst) {
            initInst =
                inst
        }
        static _GetInitInst() {
            return initInst
        }
        _Release() {
            const dispatcher = dispatchers.get(this);
            if (dispatcher) {
                dispatcher.Release();
                dispatchers.delete(this)
            }
            map.delete(this)
        }
        addEventListener(type, func, capture) {
            C3X.RequireString(type);
            C3X.RequireFunction(func);
            GetDispatcher(this).addEventListener(type, func, capture)
        }
        removeEventListener(type, func, capture) {
            C3X.RequireString(type);
            C3X.RequireFunction(func);
            GetDispatcher(this).removeEventListener(type, func, capture)
        }
        dispatchEvent(e) {
            GetDispatcher(this).dispatchEvent(e)
        }
        destroy() {
            const inst =
                map.get(this);
            const runtime = inst.GetRuntime();
            runtime.DestroyInstance(inst);
            if (!runtime.GetEventSheetManager().IsInEventEngine() && !runtime.GetLayoutManager().IsEndingLayout()) runtime.FlushPendingInstances()
        }
        getOtherContainerInstances() {
            const siblings = map.get(this).GetSiblings();
            return siblings ? siblings.map(s => s.GetInterfaceClass()) : []
        }* otherContainerInstances() {
            const inst = map.get(this);
            if (!inst.IsInContainer()) return;
            for (const s of inst.siblings()) yield s.GetInterfaceClass()
        }
        get templateName() {
            return map.get(this).GetTemplateName()
        }
        set timeScale(t) {
            C3X.RequireFiniteNumber(t);
            map.get(this).SetTimeScale(t)
        }
        get timeScale() {
            return map.get(this).GetActiveTimeScale()
        }
        restoreTimeScale() {
            map.get(this).RestoreTimeScale()
        }
    };

}

// interfaces/IWorldInstance.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const IInstance = self.IInstance;
    const ILayer = self.ILayer;
    const map = new WeakMap;
    const BLEND_MODE_TO_INDEX = new Map([
        ["normal", 0],
        ["additive", 1],
        ["copy", 3],
        ["destination-over", 4],
        ["source-in", 5],
        ["destination-in", 6],
        ["source-out", 7],
        ["destination-out", 8],
        ["source-atop", 9],
        ["destination-atop", 10]
    ]);
    const INDEX_TO_BLEND_MODE = new Map([...BLEND_MODE_TO_INDEX.entries()].map(a => [a[1], a[0]]));
    const tempColor = C3.New(C3.Color);
    self.IWorldInstance = class IWorldInstance extends IInstance {
        constructor() {
            super();
            const inst = IInstance._GetInitInst();
            map.set(this, inst);
            const effectInstanceArr = [];
            const wi = inst.GetWorldInfo();
            const instanceEffectList = wi.GetInstanceEffectList();
            if (instanceEffectList) {
                const effectCount = wi.GetObjectClass().GetEffectList().GetAllEffectTypes().length;
                for (let i = 0; i < effectCount; ++i) effectInstanceArr.push(new self.IEffectInstance(instanceEffectList, i))
            }
            const descriptors = {
                effects: {
                    value: effectInstanceArr,
                    writable: false
                }
            };
            Object.defineProperties(this, descriptors)
        }
        get layout() {
            return map.get(this).GetWorldInfo().GetLayout().GetILayout()
        }
        get layer() {
            return map.get(this).GetWorldInfo().GetLayer().GetILayer()
        }
        get x() {
            return map.get(this).GetWorldInfo().GetX()
        }
        set x(v) {
            v = +v;
            const wi = map.get(this).GetWorldInfo();
            if (isNaN(v) || wi.GetX() === v) return;
            wi.SetX(v);
            wi.SetBboxChanged()
        }
        get y() {
            return map.get(this).GetWorldInfo().GetY()
        }
        set y(v) {
            v = +v;
            const wi = map.get(this).GetWorldInfo();
            if (isNaN(v) || wi.GetY() === v) return;
            wi.SetY(v);
            wi.SetBboxChanged()
        }
        setPosition(x, y) {
            x = +x;
            y = +y;
            const wi = map.get(this).GetWorldInfo();
            if (isNaN(x) || isNaN(y) || wi.GetX() === x && wi.GetY() === y) return;
            wi.SetXY(x, y);
            wi.SetBboxChanged()
        }
        getPosition() {
            const wi = map.get(this).GetWorldInfo();
            return [wi.GetX(), wi.GetY()]
        }
        offsetPosition(dx, dy) {
            dx = +dx;
            dy = +dy;
            if (isNaN(dx) || isNaN(dy) || dx === 0 && dy === 0) return;
            const wi = map.get(this).GetWorldInfo();
            wi.OffsetXY(dx, dy);
            wi.SetBboxChanged()
        }
        get zElevation() {
            return map.get(this).GetWorldInfo().GetZElevation()
        }
        set zElevation(z) {
            z = +z;
            const inst = map.get(this);
            const wi = inst.GetWorldInfo();
            if (isNaN(z) || wi.GetZElevation() === z) return;
            wi.SetZElevation(z);
            inst.GetRuntime().UpdateRender()
        }
        get totalZElevation() {
            return map.get(this).GetWorldInfo().GetTotalZElevation()
        }
        get width() {
            return map.get(this).GetWorldInfo().GetWidth()
        }
        set width(w) {
            w = +w;
            const wi = map.get(this).GetWorldInfo();
            if (isNaN(w) || wi.GetWidth() === w) return;
            wi.SetWidth(w);
            wi.SetBboxChanged()
        }
        get height() {
            return map.get(this).GetWorldInfo().GetHeight()
        }
        set height(h) {
            h = +h;
            const wi =
                map.get(this).GetWorldInfo();
            if (isNaN(h) || wi.GetHeight() === h) return;
            wi.SetHeight(h);
            wi.SetBboxChanged()
        }
        setSize(w, h) {
            w = +w;
            h = +h;
            const wi = map.get(this).GetWorldInfo();
            if (isNaN(w) || isNaN(h) || wi.GetWidth() === w && wi.GetHeight() === h) return;
            wi.SetSize(w, h);
            wi.SetBboxChanged()
        }
        getSize() {
            const wi = map.get(this).GetWorldInfo();
            return [wi.GetWidth(), wi.GetHeight()]
        }
        get angle() {
            return map.get(this).GetWorldInfo().GetAngle()
        }
        set angle(a) {
            a = C3.clampAngle(+a);
            const wi = map.get(this).GetWorldInfo();
            if (isNaN(a) || wi.GetAngle() ===
                a) return;
            wi.SetAngle(a);
            wi.SetBboxChanged()
        }
        get angleDegrees() {
            return C3.toDegrees(this.angle)
        }
        set angleDegrees(a) {
            this.angle = C3.toRadians(a)
        }
        getBoundingBox() {
            return map.get(this).GetWorldInfo().GetBoundingBox().toDOMRect()
        }
        getBoundingQuad() {
            return map.get(this).GetWorldInfo().GetBoundingQuad().toDOMQuad()
        }
        get isVisible() {
            return map.get(this).GetWorldInfo().IsVisible()
        }
        set isVisible(v) {
            v = !!v;
            const inst = map.get(this);
            const wi = inst.GetWorldInfo();
            if (wi.IsVisible() === v) return;
            wi.SetVisible(v);
            inst.GetRuntime().UpdateRender()
        }
        get opacity() {
            return map.get(this).GetWorldInfo().GetOpacity()
        }
        set opacity(o) {
            o =
                C3.clamp(+o, 0, 1);
            const inst = map.get(this);
            const wi = inst.GetWorldInfo();
            if (isNaN(o) || wi.GetOpacity() === o) return;
            wi.SetOpacity(o);
            inst.GetRuntime().UpdateRender()
        }
        set colorRgb(arr) {
            C3X.RequireArray(arr);
            if (arr.length < 3) throw new Error("expected 3 elements");
            tempColor.setRgb(arr[0], arr[1], arr[2]);
            const inst = map.get(this);
            const wi = inst.GetWorldInfo();
            if (wi.GetUnpremultipliedColor().equalsIgnoringAlpha(tempColor)) return;
            wi.SetUnpremultipliedColor(tempColor);
            inst.GetRuntime().UpdateRender()
        }
        get colorRgb() {
            const c =
                map.get(this).GetWorldInfo().GetUnpremultipliedColor();
            return [c.getR(), c.getG(), c.getB()]
        }
        set blendMode(bm) {
            C3X.RequireString(bm);
            const index = BLEND_MODE_TO_INDEX.get(bm);
            if (typeof index !== "number") throw new Error("invalid blend mode");
            const inst = map.get(this);
            const wi = inst.GetWorldInfo();
            wi.SetBlendMode(index);
            inst.GetRuntime().UpdateRender()
        }
        get blendMode() {
            return INDEX_TO_BLEND_MODE.get(map.get(this).GetWorldInfo().GetBlendMode())
        }
        moveToTop() {
            map.get(this).GetWorldInfo().ZOrderMoveToTop()
        }
        moveToBottom() {
            map.get(this).GetWorldInfo().ZOrderMoveToBottom()
        }
        moveToLayer(ilayer) {
            C3X.RequireInstanceOf(ilayer,
                ILayer);
            const layer = ILayer._Unwrap(ilayer);
            if (!layer) throw new Error("invalid layer");
            map.get(this).GetWorldInfo().ZOrderMoveToLayer(layer)
        }
        moveAdjacentToInstance(other, isAfter) {
            C3X.RequireInstanceOf(other, IWorldInstance);
            map.get(this).GetWorldInfo().ZOrderMoveAdjacentToInstance(map.get(other), isAfter)
        }
        get zIndex() {
            return map.get(this).GetWorldInfo().GetZIndex()
        }
        get isCollisionEnabled() {
            return map.get(this).GetWorldInfo().IsCollisionEnabled()
        }
        set isCollisionEnabled(e) {
            map.get(this).GetWorldInfo().SetCollisionEnabled(!!e)
        }
        containsPoint(x,
            y) {
            C3X.RequireNumber(x);
            C3X.RequireNumber(y);
            return map.get(this).GetWorldInfo().ContainsPoint(+x, +y)
        }
        testOverlap(worldInstance) {
            C3X.RequireInstanceOf(worldInstance, IWorldInstance);
            const a = map.get(this);
            const b = map.get(worldInstance);
            return a.GetRuntime().GetCollisionEngine().TestOverlap(a, b)
        }
        testOverlapSolid() {
            const inst = map.get(this);
            const overlapInst = inst.GetRuntime().GetCollisionEngine().TestOverlapSolid(inst);
            return overlapInst ? overlapInst.GetInterfaceClass() : null
        }
        getParent() {
            const parent = map.get(this).GetParent();
            return parent ? parent.GetInterfaceClass() : null
        }
        getTopParent() {
            const parent = map.get(this).GetTopParent();
            return parent ? parent.GetInterfaceClass() : null
        }* parents() {
            for (const parent of map.get(this).parents()) yield parent.GetInterfaceClass()
        }
        getChildCount() {
            return map.get(this).GetChildCount()
        }
        getChildAt(index) {
            const child = map.get(this).GetChildAt(index);
            return child ? child.GetInterfaceClass() : null
        }* children() {
            for (const child of map.get(this).children()) yield child.GetInterfaceClass()
        }* allChildren() {
            for (const child of map.get(this).allChildren()) yield child.GetInterfaceClass()
        }
        addChild(ichild,
            opts) {
            C3X.RequireInstanceOf(ichild, IWorldInstance);
            C3X.RequireOptionalObject(opts);
            if (!opts) opts = {};
            const inst = map.get(this);
            const child = map.get(ichild);
            inst.AddChild(child, opts)
        }
        removeChild(ichild) {
            C3X.RequireInstanceOf(ichild, IWorldInstance);
            const inst = map.get(this);
            const child = map.get(ichild);
            inst.RemoveChild(child)
        }
        removeFromParent() {
            const inst = map.get(this);
            if (!inst.HasParent()) return;
            const parent = inst.GetParent();
            parent.RemoveChild(inst)
        }
        createMesh(hsize, vsize) {
            C3X.RequireFiniteNumber(hsize);
            C3X.RequireFiniteNumber(vsize);
            map.get(this).GetWorldInfo().CreateMesh(hsize, vsize)
        }
        releaseMesh() {
            const wi = map.get(this).GetWorldInfo();
            wi.ReleaseMesh();
            wi.SetBboxChanged()
        }
        setMeshPoint(col, row, opts) {
            C3X.RequireFiniteNumber(col);
            C3X.RequireFiniteNumber(row);
            C3X.RequireObject(opts);
            const wi = map.get(this).GetWorldInfo();
            if (wi.SetMeshPoint(col, row, opts)) wi.SetBboxChanged()
        }
        getMeshSize() {
            const wi = map.get(this).GetWorldInfo();
            if (!wi.HasMesh()) return [0, 0];
            const sourceMesh = wi.GetSourceMesh();
            return [sourceMesh.GetHSize(),
                sourceMesh.GetVSize()
            ]
        }
    };

}

// interfaces/IDOMInstance.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    self.IDOMInstance = class IDOMInstance extends self.IWorldInstance {
        constructor() {
            super();
            map.set(this, self.IInstance._GetInitInst())
        }
        getElement() {
            return map.get(this).GetSdkInstance()._GetElementInDOMMode()
        }
        focus() {
            map.get(this).GetSdkInstance().FocusElement()
        }
        blur() {
            map.get(this).GetSdkInstance().BlurElement()
        }
        setCssStyle(prop, val) {
            C3X.RequireString(prop);
            map.get(this).GetSdkInstance().SetElementCSSStyle(prop, val)
        }
    };

}

// interfaces/IBehaviorInstance.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    const dispatchers = new WeakMap;

    function GetDispatcher(ibehinst) {
        let dispatcher = dispatchers.get(ibehinst);
        if (dispatcher) return dispatcher;
        dispatcher = C3.New(C3.Event.Dispatcher);
        dispatchers.set(ibehinst, dispatcher);
        return dispatcher
    }
    let initBehInst = null;
    self.IBehaviorInstance = class IBehaviorInstance {
        constructor() {
            map.set(this, initBehInst);
            const descriptors = {
                runtime: {
                    value: initBehInst.GetRuntime().GetIRuntime(),
                    writable: false
                },
                behavior: {
                    value: initBehInst.GetBehavior().GetIBehavior(),
                    writable: false
                }
            };
            Object.defineProperties(this, descriptors)
        }
        static _Init(behInst) {
            initBehInst = behInst
        }
        static _GetInitInst() {
            return initBehInst
        }
        get instance() {
            return map.get(this).GetObjectInstance().GetInterfaceClass()
        }
        _Release() {
            const dispatcher = dispatchers.get(this);
            if (dispatcher) {
                dispatcher.Release();
                dispatchers.delete(this)
            }
            map.delete(this)
        }
        addEventListener(type, func, capture) {
            C3X.RequireString(type);
            C3X.RequireFunction(func);
            GetDispatcher(this).addEventListener(type, func, capture)
        }
        removeEventListener(type, func, capture) {
            C3X.RequireString(type);
            C3X.RequireFunction(func);
            GetDispatcher(this).removeEventListener(type, func, capture)
        }
        dispatchEvent(e) {
            GetDispatcher(this).dispatchEvent(e)
        }
    };

}

// interfaces/IBehavior.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    self.IBehavior = class IBehavior {
        constructor(behavior) {
            map.set(this, behavior);
            const descriptors = {
                runtime: {
                    value: behavior.GetRuntime().GetIRuntime(),
                    writable: false
                }
            };
            Object.defineProperties(this, descriptors)
        }
        getAllInstances() {
            return map.get(this).GetInstances().map(inst => inst.GetInterfaceClass())
        }
    };

}

// interfaces/IEffectInstance.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    const tempColor = C3.New(C3.Color);
    self.IEffectInstance = class IEffectInstance {
        constructor(effectList, index) {
            map.set(this, effectList);
            const descriptors = {
                index: {
                    value: index,
                    writable: false
                }
            };
            Object.defineProperties(this, descriptors)
        }
        get name() {
            const effectTypes = map.get(this).GetAllEffectTypes();
            return effectTypes[this.index].GetName()
        }
        get isActive() {
            return map.get(this).IsEffectIndexActive(this.index)
        }
        set isActive(a) {
            a = !!a;
            const fxList = map.get(this);
            if (fxList.IsEffectIndexActive(this.index) === a) return;
            fxList.SetEffectIndexActive(this.index,
                a);
            fxList.UpdateActiveEffects();
            fxList.GetRuntime().UpdateRender()
        }
        setParameter(i, v) {
            C3X.RequireFiniteNumber(i);
            i = Math.floor(+i);
            const fxList = map.get(this);
            const oldValue = fxList.GetEffectParameter(this.index, i);
            if (oldValue === null) throw new RangeError("invalid index");
            if (oldValue instanceof C3.Color) {
                if (!Array.isArray(v) || v.length < 3) throw new TypeError("expected array with 3 elements");
                tempColor.setRgb(v[0], v[1], v[2]);
                v = tempColor
            } else if (typeof v !== "number") throw new TypeError("expected number");
            const didChange =
                fxList.SetEffectParameter(this.index, i, v);
            if (didChange && fxList.IsEffectIndexActive(this.index)) fxList.GetRuntime().UpdateRender()
        }
        getParameter(i) {
            C3X.RequireFiniteNumber(i);
            i = Math.floor(+i);
            const fxList = map.get(this);
            const ret = fxList.GetEffectParameter(this.index, i);
            if (ret === null) throw new RangeError("invalid index");
            if (ret instanceof C3.Color) return [ret.getR(), ret.getG(), ret.getB()];
            else return ret
        }
    };

}

// interfaces/IAnimation.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    self.IAnimation = class IAnimation {
        constructor(animationInfo) {
            map.set(this, animationInfo);
            Object.defineProperties(this, {
                name: {
                    value: animationInfo.GetName(),
                    writable: false
                },
                speed: {
                    value: animationInfo.GetSpeed(),
                    writable: false
                },
                isLooping: {
                    value: animationInfo.IsLooping(),
                    writable: false
                },
                repeatCount: {
                    value: animationInfo.GetRepeatCount(),
                    writable: false
                },
                repeatTo: {
                    value: animationInfo.GetRepeatTo(),
                    writable: false
                },
                isPingPong: {
                    value: animationInfo.IsPingPong(),
                    writable: false
                },
                frameCount: {
                    value: animationInfo.GetFrameCount(),
                    writable: false
                }
            })
        }
        getFrames() {
            return map.get(this).GetFrames().map(f => f.GetIAnimationFrame())
        }* frames() {
            for (const f of map.get(this).GetFrames()) yield f.GetIAnimationFrame()
        }
    };

}

// interfaces/IImageInfo.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    self.IImageInfo = class IImageInfo {
        constructor(imageInfo) {
            map.set(this, imageInfo)
        }
        get width() {
            return map.get(this).GetWidth()
        }
        get height() {
            return map.get(this).GetHeight()
        }
        getSize() {
            const imageInfo = map.get(this);
            return [imageInfo.GetWidth(), imageInfo.GetHeight()]
        }
    };

}

// interfaces/IAnimationFrame.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    self.IAnimationFrame = class IAnimationFrame extends self.IImageInfo {
        constructor(animationFrameInfo) {
            super(animationFrameInfo.GetImageInfo());
            map.set(this, animationFrameInfo);
            Object.defineProperties(this, {
                duration: {
                    value: animationFrameInfo.GetDuration(),
                    writable: false
                },
                originX: {
                    value: animationFrameInfo.GetOriginX(),
                    writable: false
                },
                originY: {
                    value: animationFrameInfo.GetOriginY(),
                    writable: false
                }
            })
        }
        getOrigin() {
            const afi = map.get(this);
            return [afi.GetOriginX(), afi.GetOriginY()]
        }
        getImagePointCount() {
            return map.get(this).GetImagePointCount()
        }
        getImagePointX(nameOrIndex) {
            return this.getImagePoint(nameOrIndex)[0]
        }
        getImagePointY(nameOrIndex) {
            return this.getImagePoint(nameOrIndex)[1]
        }
        getImagePoint(nameOrIndex) {
            const afi =
                map.get(this);
            let ip = null;
            if (typeof nameOrIndex === "number") ip = afi.GetImagePointByIndex(Math.floor(nameOrIndex));
            else if (typeof nameOrIndex === "string") ip = afi.GetImagePointByName(nameOrIndex);
            else throw new TypeError("expected string or number");
            if (!ip) return this.getOrigin();
            return [ip.GetX(), ip.GetY()]
        }
        getPolyPointCount() {
            const poly = map.get(this).GetCollisionPoly();
            return poly ? poly.pointCount() : 0
        }
        getPolyPointX(index) {
            return this.getPolyPoint(index)[0]
        }
        getPolyPointY(index) {
            return this.getPolyPoint(index)[1]
        }
        getPolyPoint(index) {
            C3X.RequireFiniteNumber(index);
            index = Math.floor(index);
            const poly = map.get(this).GetCollisionPoly();
            if (!poly || index < 0 || index >= poly.pointCount()) return [0, 0];
            const pointsArr = poly.pointsArr();
            const ptX = pointsArr[index * 2];
            const ptY = pointsArr[index * 2 + 1];
            return [ptX, ptY]
        }
    };

}

// interfaces/ITimelineState.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;

    function GetTimelineState(iface) {
        const timelineState = map.get(iface);
        if (timelineState.IsReleased()) throw new Error("timeline/tween was released and is no longer valid");
        return timelineState
    }
    self.ITimelineState = class ITimelineState {
        constructor(timelineState) {
            map.set(this, timelineState)
        }
        pause() {
            GetTimelineState(this).Stop()
        }
        resume() {
            GetTimelineState(this).Resume()
        }
        hasTags(tags) {
            return GetTimelineState(this).HasTags(tags)
        }
        set time(t) {
            C3X.RequireFiniteNumber(t);
            GetTimelineState(this).SetTime(t)
        }
        get time() {
            return GetTimelineState(this).GetTime()
        }
        set totalTime(t) {
            C3X.RequireFiniteNumber(t);
            GetTimelineState(this).SetTotalTime(t)
        }
        get totalTime() {
            return GetTimelineState(this).GetTotalTime()
        }
        set isLooping(l) {
            GetTimelineState(this).SetLoop(!!l)
        }
        get isLooping() {
            return GetTimelineState(this).GetLoop()
        }
        set isPingPong(p) {
            GetTimelineState(this).SetPingPong(!!p)
        }
        get isPingPong() {
            return GetTimelineState(this).GetPingPong()
        }
        set playbackRate(p) {
            C3X.RequireFiniteNumber(p);
            GetTimelineState(this).SetPlaybackRate(p)
        }
        get playbackRate() {
            return GetTimelineState(this).GetPlaybackRate()
        }
        get progress() {
            const timelineState = GetTimelineState(this);
            return timelineState.GetTime() / timelineState.GetTotalTime()
        }
        get tags() {
            return GetTimelineState(this).GetTags()
        }
        get finished() {
            return GetTimelineState(this).GetPlayPromise()
        }
        get isPlaying() {
            return GetTimelineState(this).IsPlaying()
        }
        get isPaused() {
            return GetTimelineState(this).IsPaused()
        }
        get isReleased() {
            return map.get(this).IsReleased()
        }
    };

}

// interfaces/ITweenState.js
{
    'use strict';
    const C3 = self.C3;
    const C3X = self.C3X;
    const map = new WeakMap;
    const behInstMap = new WeakMap;
    let easeToIndexFunc = null;

    function GetTweenState(iface) {
        const tweenState = map.get(iface);
        if (tweenState.IsReleased()) throw new Error("timeline/tween was released and is no longer valid");
        return tweenState
    }
    self.ITweenState = class ITweenState extends self.ITimelineState {
        constructor(tweenState, behInst, opts) {
            super(tweenState);
            if (!easeToIndexFunc) easeToIndexFunc = opts.easeToIndexFunc;
            map.set(this, tweenState);
            if (behInst) behInstMap.set(this, behInst)
        }
        stop() {
            const tweenState = GetTweenState(this);
            const behInst = behInstMap.get(this);
            behInst.ReleaseTween(tweenState)
        }
        setEase(easeName) {
            C3X.RequireString(easeName);
            const ease = self.Ease.GetEaseFromIndex(easeToIndexFunc(easeName));
            GetTweenState(this).SetEase(ease)
        }
        get instance() {
            const inst =
                GetTweenState(this).GetInstance();
            return inst ? inst.GetInterfaceClass() : null
        }
        get isDestroyOnComplete() {
            return GetTweenState(this).GetDestroyInstanceOnComplete()
        }
        set isDestroyOnComplete(d) {
            GetTweenState(this).SetDestroyInstanceOnComplete(!!d)
        }
        get value() {
            const tweenState = GetTweenState(this);
            if (tweenState.GetId() !== "value") throw new Error("not a value tween");
            return tweenState.GetPropertyTrack("value").GetSourceAdapterValue()
        }
    };

}

// assets/assetManager.js
{
    'use strict';
    const C3 = self.C3;
    const VALID_LOAD_POLICIES = new Set(["local", "remote"]);
    const EXT_TO_TYPE = new Map([
        ["mp4", "video/mp4"],
        ["webm", "video/webm"],
        ["m4a", "audio/mp4"],
        ["mp3", "audio/mpeg"],
        ["js", "application/javascript"],
        ["wasm", "application/wasm"],
        ["svg", "image/svg+xml"],
        ["html", "text/html"]
    ]);

    function GetTypeFromFileExtension(filename) {
        if (!filename) return "";
        const parts = filename.split(".");
        if (parts.length < 2) return "";
        const ext = parts.at(-1).toLowerCase();
        return EXT_TO_TYPE.get(ext) || ""
    }

    function AddScript(url) {
        return new Promise((resolve, reject) => {
            const elem = document.createElement("script");
            elem.onload = resolve;
            elem.onerror = reject;
            elem.async = false;
            elem.type = "module";
            elem.src = url;
            document.head.appendChild(elem)
        })
    }
    C3.AssetManager = class AssetManager extends C3.DefendedBase {
        constructor(runtime, opts) {
            super();
            const exportType = opts["exportType"];
            this._runtime = runtime;
            this._fileStructure = "folders";
            this._localUrlBlobs = new Map;
            this._localBlobUrlCache = new Map;
            this._localBlobSWUrls = new Map;
            this._isCordova = exportType === "cordova";
            this._isiOSCordova = !!opts["isiOSCordova"];
            this._isFileProtocol = !!opts["isFileProtocol"];
            this._swClientId = opts["swClientId"];
            this._supportedAudioFormats = opts["supportedAudioFormats"] || {};
            this._audioFiles =
                new Map;
            this._preloadSounds = false;
            this._mediaSubfolder = "";
            this._fontsSubfolder = "";
            this._iconsSubfolder = "";
            const isRemoteLoadPolicy = exportType === "html5" || exportType === "scirra-arcade" || exportType === "instant-games";
            this._defaultLoadPolicy = isRemoteLoadPolicy ? "remote" : "local";
            this._allAssets = [];
            this._assetsByUrl = new Map;
            this._webFonts = [];
            this._loadPromises = [];
            this._hasFinishedInitialLoad = false;
            this._totalAssetSizeToLoad = 0;
            this._assetSizeLoaded = 0;
            this._lastLoadProgress = 0;
            this._hasHadErrorLoading = false;
            this._loadingRateLimiter = C3.New(C3.RateLimiter, () => this._FireLoadingProgressEvent(), 50);
            this._promiseThrottle = new C3.PromiseThrottle(Math.max(C3.hardwareConcurrency, 8));
            const localUrlBlobs = opts["previewImageBlobs"];
            if (localUrlBlobs) {
                const projectFileBlobs = opts["previewProjectFileBlobs"];
                if (projectFileBlobs) Object.assign(localUrlBlobs, projectFileBlobs);
                const projectData = opts["projectData"];
                if (projectData) localUrlBlobs["data.json"] = projectData;
                for (const [url, blob] of Object.entries(localUrlBlobs)) this._localUrlBlobs.set(url,
                    blob)
            }
            const localSWUrlMap = opts["previewProjectFileSWUrls"];
            if (localSWUrlMap)
                for (const [srcUrl, destUrl] of Object.entries(localSWUrlMap)) this._localBlobSWUrls.set(srcUrl, destUrl);
            this._iAssetManager = new self.IAssetManager(this)
        }
        Release() {
            this._localUrlBlobs.clear();
            for (const url of this._localBlobUrlCache.values())
                if (url.startsWith("blob:")) URL.revokeObjectURL(url);
            this._localBlobUrlCache.clear();
            for (const asset of this._allAssets) asset.Release();
            C3.clearArray(this._allAssets);
            this._assetsByUrl.clear();
            C3.clearArray(this._loadPromises);
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        _SetFileStructure(f) {
            this._fileStructure = f;
            if (f === "flat") {
                const newMap = new Map;
                for (const [url, blob] of this._localUrlBlobs.entries()) newMap.set(url.toLowerCase(), blob);
                this._localUrlBlobs = newMap
            }
        }
        GetFileStructure() {
            return this._fileStructure
        }
        _SetMediaSubfolder(folder) {
            this._mediaSubfolder = folder
        }
        GetMediaSubfolder() {
            return this._mediaSubfolder
        }
        _SetFontsSubfolder(folder) {
            this._fontsSubfolder = folder
        }
        GetFontsSubfolder() {
            return this._fontsSubfolder
        }
        _SetIconsSubfolder(folder) {
            this._iconsSubfolder =
                folder
        }
        GetIconsSubfolder() {
            return this._iconsSubfolder
        }
        IsFileProtocol() {
            return this._isFileProtocol
        }
        _HasLocalUrlBlob(url) {
            if (this._fileStructure === "flat") url = url.toLowerCase();
            return this._localUrlBlobs.has(url)
        }
        _GetLocalUrlBlob(url) {
            if (this._fileStructure === "flat") url = url.toLowerCase();
            return this._localUrlBlobs.get(url) || null
        }
        GetLocalUrlAsBlobUrl(url) {
            if (this._fileStructure === "flat") url = url.toLowerCase();
            if (!this._HasLocalUrlBlob(url)) return url;
            let ret = this._localBlobUrlCache.get(url);
            if (!ret) {
                const blob =
                    this._GetLocalUrlBlob(url);
                ret = URL.createObjectURL(blob);
                this._localBlobUrlCache.set(url, ret)
            }
            return ret
        }
        FetchBlob(url, loadPolicy) {
            loadPolicy = loadPolicy || this._defaultLoadPolicy;
            const localBlob = this._GetLocalUrlBlob(url);
            if (localBlob) return Promise.resolve(localBlob);
            else if (C3.IsRelativeURL(url)) {
                if (this._fileStructure === "flat") url = url.toLowerCase();
                if (this._isCordova && this._isFileProtocol) return this.CordovaFetchLocalFileAsBlob(url);
                else if (loadPolicy === "local") return this._promiseThrottle.Add(() =>
                    C3.FetchBlob(url));
                else return C3.FetchBlob(url)
            } else return C3.FetchBlob(url)
        }
        FetchArrayBuffer(url) {
            const localBlob = this._GetLocalUrlBlob(url);
            if (localBlob) return C3.BlobToArrayBuffer(localBlob);
            else if (C3.IsRelativeURL(url)) {
                if (this._fileStructure === "flat") url = url.toLowerCase();
                if (this._isCordova && this._isFileProtocol) return this.CordovaFetchLocalFileAsArrayBuffer(url);
                else if (this._defaultLoadPolicy === "local") return this._promiseThrottle.Add(() => C3.FetchArrayBuffer(url));
                else return C3.FetchArrayBuffer(url)
            } else return C3.FetchArrayBuffer(url)
        }
        FetchText(url) {
            const localBlob =
                this._GetLocalUrlBlob(url);
            if (localBlob) return C3.BlobToString(localBlob);
            else if (C3.IsRelativeURL(url)) {
                if (this._fileStructure === "flat") url = url.toLowerCase();
                if (this._isCordova && this._isFileProtocol) return this.CordovaFetchLocalFileAsText(url);
                else if (this._defaultLoadPolicy === "local") return this._promiseThrottle.Add(() => C3.FetchText(url));
                else return C3.FetchText(url)
            } else return C3.FetchText(url)
        }
        async FetchJson(url) {
            const text = await this.FetchText(url);
            return JSON.parse(text)
        }
        _CordovaFetchLocalFileAs(filename,
            as_) {
            if (this._fileStructure === "flat") filename = filename.toLowerCase();
            return this._runtime.PostComponentMessageToDOMAsync("runtime", "cordova-fetch-local-file", {
                "filename": filename,
                "as": as_
            })
        }
        CordovaFetchLocalFileAsText(filename) {
            return this._CordovaFetchLocalFileAs(filename, "text")
        }
        async CordovaFetchLocalFileAsBlob(filename) {
            const buffer = await this._CordovaFetchLocalFileAs(filename, "buffer");
            const type = GetTypeFromFileExtension(filename);
            return new Blob([buffer], {
                "type": type
            })
        }
        async CordovaFetchLocalFileAsBlobURL(filename) {
            if (this._fileStructure ===
                "flat") filename = filename.toLowerCase();
            let blobUrl = this._localBlobUrlCache.get(filename);
            if (blobUrl) return blobUrl;
            const blob = await this.CordovaFetchLocalFileAsBlob(filename);
            blobUrl = URL.createObjectURL(blob);
            this._localBlobUrlCache.set(filename, blobUrl);
            return blobUrl
        }
        CordovaFetchLocalFileAsArrayBuffer(filename) {
            return this._CordovaFetchLocalFileAs(filename, "buffer")
        }
        GetMediaFileUrl(filename) {
            if (this._fileStructure === "flat") filename = filename.toLowerCase();
            filename = this._mediaSubfolder + filename;
            if (this._HasLocalUrlBlob(filename)) return this.GetLocalUrlAsBlobUrl(filename);
            else return filename
        }
        GetProjectFileUrl(url) {
            if (C3.IsAbsoluteURL(url)) return Promise.resolve(url);
            else if (this._HasLocalUrlBlob(url)) return Promise.resolve(this.GetLocalUrlAsBlobUrl(url));
            else if (this._isCordova && this._isFileProtocol) return this.CordovaFetchLocalFileAsBlobURL(url);
            else {
                if (this._fileStructure === "flat") url = url.toLowerCase();
                return Promise.resolve(url)
            }
        }
        GetProjectFileIframeUrl(url) {
            if (C3.IsAbsoluteURL(url)) return Promise.resolve(url);
            else {
                const queryIndex = url.indexOf("?");
                const queryStr =
                    queryIndex === -1 ? "" : url.substr(queryIndex);
                const urlNoSearch = queryIndex === -1 ? url : url.substr(0, queryIndex);
                if (this._HasLocalUrlBlob(urlNoSearch)) {
                    let localUrl = this._localBlobSWUrls.get(urlNoSearch) || this.GetLocalUrlAsBlobUrl(urlNoSearch);
                    if (!localUrl.startsWith("blob:") && this._swClientId) {
                        const asUrl = new URL(localUrl);
                        const params = new URLSearchParams(queryStr);
                        params.set("__c3_client_id", this._swClientId);
                        asUrl.search = params.toString();
                        localUrl = asUrl.toString()
                    }
                    return Promise.resolve(localUrl)
                } else if (this._isCordova &&
                    this._isFileProtocol) return this.CordovaFetchLocalFileAsBlobURL(urlNoSearch);
                else {
                    if (this._fileStructure === "flat") url = url.toLowerCase();
                    return Promise.resolve(url)
                }
            }
        }
        LoadProjectFileUrl(url) {
            return this.GetProjectFileUrl(url)
        }
        LoadImage(opts) {
            if (opts.loadPolicy && !VALID_LOAD_POLICIES.has(opts.loadPolicy)) throw new Error("invalid load policy");
            let asset = this._assetsByUrl.get(opts.url);
            if (asset) return asset;
            asset = C3.New(C3.ImageAsset, this, {
                url: opts.url,
                size: opts.size || 0,
                loadPolicy: opts.loadPolicy || this._defaultLoadPolicy
            });
            this._allAssets.push(asset);
            this._assetsByUrl.set(asset.GetURL(), asset);
            if (!this._hasFinishedInitialLoad) {
                this._totalAssetSizeToLoad += asset.GetSize();
                this._loadPromises.push(asset.Load().then(() => this._AddLoadedSize(asset.GetSize())))
            }
            return asset
        }
        async WaitForAllToLoad() {
            try {
                await Promise.all(this._loadPromises);
                this._lastLoadProgress = 1
            } catch (err) {
                console.error("Error loading: ", err);
                this._hasHadErrorLoading = true;
                this._FireLoadingProgressEvent()
            }
        }
        SetInitialLoadFinished() {
            this._hasFinishedInitialLoad =
                true
        }
        HasHadErrorLoading() {
            return this._hasHadErrorLoading
        }
        _AddLoadedSize(s) {
            this._assetSizeLoaded += s;
            this._loadingRateLimiter.Call()
        }
        _FireLoadingProgressEvent() {
            const event = C3.New(C3.Event, "loadingprogress");
            this._lastLoadProgress = C3.clamp(this._assetSizeLoaded / this._totalAssetSizeToLoad, 0, 1);
            event.progress = this._lastLoadProgress;
            this._runtime.Dispatcher().dispatchEvent(event)
        }
        GetLoadProgress() {
            return this._lastLoadProgress
        }
        _SetWebFonts(arr) {
            C3.shallowAssignArray(this._webFonts, arr);
            if (this._webFonts.length) this._loadPromises.push(this._LoadWebFonts())
        }
        async _LoadWebFonts() {
            const promises = [];
            const loadFontsForDOM = [];
            for (const [name, filename, size] of this._webFonts) {
                this._totalAssetSizeToLoad += size;
                promises.push(this._LoadWebFont(name, filename, loadFontsForDOM).then(() => this._AddLoadedSize(size)))
            }
            await Promise.all(promises);
            if (this._runtime.IsInWorker() && loadFontsForDOM.length > 0) await this._runtime.PostComponentMessageToDOMAsync("runtime", "load-webfonts", {
                "webfonts": loadFontsForDOM
            })
        }
        async _LoadWebFont(name, filename, loadFontsForDOM) {
            try {
                const url = await this.GetProjectFileUrl(filename);
                const fontFace = new FontFace(name, `url('${url}')`);
                if (this._runtime.IsInWorker()) self.fonts.add(fontFace);
                else document.fonts.add(fontFace);
                await fontFace.load();
                if (this._runtime.IsInWorker()) loadFontsForDOM.push({
                    name,
                    url
                })
            } catch (err) {
                console.warn(`[C3 runtime] Failed to load web font '${name}': `, err)
            }
        }
        IsAudioFormatSupported(type) {
            return !!this._supportedAudioFormats[type]
        }
        _SetAudioFiles(arr, preloadSounds) {
            this._preloadSounds = !!preloadSounds;
            for (const [fileName, projectFilesInfo, isMusic] of arr) this._audioFiles.set(fileName, {
                fileName,
                formats: projectFilesInfo.map(si => ({
                    type: si[0],
                    fileExtension: si[1],
                    fullName: fileName + si[1],
                    fileSize: si[2]
                })),
                isMusic
            })
        }
        GetPreferredAudioFile(namePart) {
            if (this._fileStructure === "flat") namePart = namePart.toLowerCase();
            const info = this._audioFiles.get(namePart);
            if (!info) return null;
            let webMOpusFile = null;
            for (const formatInfo of info.formats) {
                if (!webMOpusFile && formatInfo.type === "audio/webm; codecs=opus") webMOpusFile = formatInfo;
                if (this.IsAudioFormatSupported(formatInfo.type)) return formatInfo
            }
            return webMOpusFile
        }
        GetProjectAudioFileUrl(namePart) {
            const formatInfo =
                this.GetPreferredAudioFile(namePart);
            if (!formatInfo) return null;
            return {
                url: this.GetMediaFileUrl(formatInfo.fullName),
                type: formatInfo.type
            }
        }
        GetAudioToPreload() {
            if (this._preloadSounds) {
                const ret = [];
                for (const info of this._audioFiles.values()) {
                    if (info.isMusic) continue;
                    const formatInfo = this.GetPreferredAudioFile(info.fileName);
                    if (!formatInfo) continue;
                    ret.push({
                        originalUrl: info.fileName,
                        url: this.GetMediaFileUrl(formatInfo.fullName),
                        type: formatInfo.type,
                        fileSize: formatInfo.fileSize
                    })
                }
                return ret
            } else return []
        }
        GetIAssetManager() {
            return this._iAssetManager
        }
        async LoadScripts(...urls) {
            const scriptUrls =
                await Promise.all(urls.map(url => this.GetProjectFileUrl(url)));
            if (this._runtime.IsInWorker())
                if (urls.length === 1) {
                    const url = urls[0];
                    await self.c3_import((C3.IsRelativeURL(url) ? "./" : "") + url)
                } else {
                    const scriptStr = urls.map(url => `import "${C3.IsRelativeURL(url)?"./":""}${url}";`).join("\n");
                    const blobUrl = URL.createObjectURL(new Blob([scriptStr], {
                        type: "application/javascript"
                    }));
                    await self.c3_import(blobUrl)
                }
            else await Promise.all(scriptUrls.map(url => AddScript(url)))
        }
        async CompileWebAssembly(url) {
            if (WebAssembly.compileStreaming) {
                const fetchUrl =
                    await this.GetProjectFileUrl(url);
                return await WebAssembly.compileStreaming(fetch(fetchUrl))
            } else {
                const arrayBuffer = await C3.FetchArrayBuffer(url);
                return await WebAssembly.compile(arrayBuffer)
            }
        }
        async LoadStyleSheet(url) {
            const fetchUrl = await this.GetProjectFileUrl(url);
            return await this._runtime.PostComponentMessageToDOMAsync("runtime", "add-stylesheet", {
                "url": fetchUrl
            })
        }
    };

}

// assets/asset.js
{
    'use strict';
    const C3 = self.C3;
    C3.Asset = class Asset extends C3.DefendedBase {
        constructor(assetManager, opts) {
            super();
            this._assetManager = assetManager;
            this._runtime = assetManager.GetRuntime();
            this._url = opts.url || "";
            this._size = opts.size;
            this._loadPolicy = opts.loadPolicy;
            this._blob = opts.blob || null;
            this._isLoaded = !!this._blob;
            this._loadPromise = null
        }
        Release() {
            this._loadPromise = null;
            this._assetManager = null;
            this._runtime = null;
            this._blob = null
        }
        GetURL() {
            return this._url
        }
        GetSize() {
            return this._size
        }
        Load() {
            if (this._loadPolicy === "local" || this._blob) {
                this._isLoaded =
                    true;
                return Promise.resolve()
            }
            if (this._loadPromise) return this._loadPromise;
            this._loadPromise = this._assetManager.FetchBlob(this._url, this._loadPolicy).then(blob => {
                this._isLoaded = true;
                this._loadPromise = null;
                this._blob = blob;
                return blob
            }).catch(err => console.error("Error loading resource: ", err));
            return this._loadPromise
        }
        IsLoaded() {
            return this._isLoaded
        }
        GetBlob() {
            if (this._blob) return Promise.resolve(this._blob);
            if (this._loadPromise) return this._loadPromise;
            return this._assetManager.FetchBlob(this._url,
                this._loadPolicy)
        }
    };

}

// assets/imageAsset.js
{
    'use strict';
    const C3 = self.C3;
    const promiseThrottle = new C3.PromiseThrottle;
    const allImageAssets = new Set;
    C3.ImageAsset = class ImageAsset extends C3.Asset {
        constructor(assetManager, opts) {
            super(assetManager, opts);
            this._texturePromise = null;
            this._webglTexture = null;
            this._refCount = 0;
            this._imageWidth = -1;
            this._imageHeight = -1;
            allImageAssets.add(this)
        }
        Release() {
            this.ReleaseTexture();
            if (this._refCount !== 0) throw new Error("released image asset which still has texture references");
            this._texturePromise = null;
            allImageAssets.delete(this);
            super.Release()
        }
        static OnRendererContextLost() {
            for (const imageAsset of allImageAssets) {
                imageAsset._texturePromise =
                    null;
                imageAsset._webglTexture = null;
                imageAsset._refCount = 0
            }
        }
        LoadStaticTexture(renderer, opts) {
            opts = opts || {};
            this._refCount++;
            if (this._webglTexture) return Promise.resolve(this._webglTexture);
            if (this._texturePromise) return this._texturePromise;
            opts.anisotropy = this._runtime.GetCanvasManager().GetTextureAnisotropy();
            this._texturePromise = this.GetBlob().then(blob => promiseThrottle.Add(() => renderer.CreateStaticTextureAsync(blob, opts).then(texture => {
                this._texturePromise = null;
                if (this._refCount === 0) {
                    renderer.DeleteTexture(texture);
                    return null
                }
                this._webglTexture = texture;
                this._imageWidth = texture.GetWidth();
                this._imageHeight = texture.GetHeight();
                return this._webglTexture
            }))).catch(err => {
                console.error("Failed to load texture: ", err);
                throw err;
            });
            return this._texturePromise
        }
        ReleaseTexture() {
            if (this._refCount <= 0) throw new Error("texture released too many times");
            this._refCount--;
            if (this._refCount === 0 && this._webglTexture) {
                const renderer = this._webglTexture.GetRenderer();
                renderer.DeleteTexture(this._webglTexture);
                this._webglTexture =
                    null
            }
        }
        GetTexture() {
            return this._webglTexture
        }
        GetWidth() {
            return this._imageWidth
        }
        GetHeight() {
            return this._imageHeight
        }
        async LoadToDrawable() {
            const blob = await this.GetBlob();
            if (C3.Supports.ImageBitmapOptions) return await createImageBitmap(blob, {
                "premultiplyAlpha": "none"
            });
            else if (C3.Supports.ImageBitmap) return await createImageBitmap(blob);
            else return await C3.BlobToImage(blob)
        }
    };

}

// layouts/renderCell.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;

    function SortByInstLastCachedZIndex(a, b) {
        return a.GetWorldInfo()._GetLastCachedZIndex() - b.GetWorldInfo()._GetLastCachedZIndex()
    }
    C3.RenderCell = class RenderCell extends C3.DefendedBase {
        constructor(grid, x, y) {
            super();
            this._grid = grid;
            this._x = x;
            this._y = y;
            this._instances = [];
            this._isSorted = true;
            this._pendingRemoval = new Set;
            this._isAnyPendingRemoval = false
        }
        Release() {
            C3.clearArray(this._instances);
            this._pendingRemoval.clear();
            this._grid = null
        }
        Reset() {
            C3.clearArray(this._instances);
            this._isSorted = true;
            this._pendingRemoval.clear();
            this._isAnyPendingRemoval = false
        }
        SetChanged() {
            this._isSorted = false
        }
        IsEmpty() {
            if (!this._instances.length) return true;
            if (this._instances.length > this._pendingRemoval.size) return false;
            this._FlushPending();
            return true
        }
        Insert(inst) {
            if (this._pendingRemoval.has(inst)) {
                this._pendingRemoval.delete(inst);
                if (this._pendingRemoval.size === 0) this._isAnyPendingRemoval = false;
                return
            }
            this._instances.push(inst);
            this._isSorted = this._instances.length === 1
        }
        Remove(inst) {
            this._pendingRemoval.add(inst);
            this._isAnyPendingRemoval = true;
            if (this._pendingRemoval.size >= 50) this._FlushPending()
        }
        _FlushPending() {
            if (!this._isAnyPendingRemoval) return;
            if (this._instances.length === this._pendingRemoval.size) {
                this.Reset();
                return
            }
            C3.arrayRemoveAllInSet(this._instances, this._pendingRemoval);
            this._pendingRemoval.clear();
            this._isAnyPendingRemoval = false
        }
        _EnsureSorted() {
            if (this._isSorted) return;
            this._instances.sort(SortByInstLastCachedZIndex);
            this._isSorted = true
        }
        Dump(result) {
            this._FlushPending();
            this._EnsureSorted();
            if (this._instances.length) result.push(this._instances)
        }
    };

}

// layouts/renderGrid.js
{
    'use strict';
    const C3 = self.C3;
    C3.RenderGrid = class RenderGrid extends C3.DefendedBase {
        constructor(cellWidth, cellHeight) {
            super();
            this._cellWidth = cellWidth;
            this._cellHeight = cellHeight;
            this._cells = C3.New(C3.PairMap)
        }
        Release() {
            this._cells.Release();
            this._cells = null
        }
        GetCell(x, y, createIfMissing) {
            let ret = this._cells.Get(x, y);
            if (ret) return ret;
            else if (createIfMissing) {
                ret = C3.New(C3.RenderCell, this, x, y);
                this._cells.Set(x, y, ret);
                return ret
            } else return null
        }
        XToCell(x) {
            return Math.floor(x / this._cellWidth)
        }
        YToCell(y) {
            return Math.floor(y / this._cellHeight)
        }
        Update(inst,
            oldRange, newRange) {
            if (oldRange)
                for (let x = oldRange.getLeft(), lenx = oldRange.getRight(); x <= lenx; ++x)
                    for (let y = oldRange.getTop(), leny = oldRange.getBottom(); y <= leny; ++y) {
                        if (newRange && newRange.containsPoint(x, y)) continue;
                        const cell = this.GetCell(x, y, false);
                        if (!cell) continue;
                        cell.Remove(inst);
                        if (cell.IsEmpty()) this._cells.Delete(x, y)
                    }
            if (newRange)
                for (let x = newRange.getLeft(), lenx = newRange.getRight(); x <= lenx; ++x)
                    for (let y = newRange.getTop(), leny = newRange.getBottom(); y <= leny; ++y) {
                        if (oldRange && oldRange.containsPoint(x,
                                y)) continue;
                        this.GetCell(x, y, true).Insert(inst)
                    }
        }
        QueryRange(rc, result) {
            let x = this.XToCell(rc.getLeft());
            const ystart = this.YToCell(rc.getTop());
            const lenx = this.XToCell(rc.getRight());
            const leny = this.YToCell(rc.getBottom());
            for (; x <= lenx; ++x)
                for (let y = ystart; y <= leny; ++y) {
                    const cell = this.GetCell(x, y, false);
                    if (!cell) continue;
                    cell.Dump(result)
                }
        }
        MarkRangeChanged(rc) {
            let x = rc.getLeft();
            const ystart = rc.getTop();
            const lenx = rc.getRight();
            const leny = rc.getBottom();
            for (; x <= lenx; ++x)
                for (let y = ystart; y <= leny; ++y) {
                    const cell =
                        this.GetCell(x, y, false);
                    if (!cell) continue;
                    cell.SetChanged()
                }
        }
    };

}

// layouts/layer.js
{
    'use strict';
    const C3 = self.C3;
    const tmpRect = new C3.Rect;
    const tmpQuad = new C3.Quad;
    const renderCellArr = [];
    const tmpDestRect = new C3.Rect;
    const tmpSrcRect = new C3.Rect;
    const glMatrix = self.glMatrix;
    const vec3 = glMatrix.vec3;
    const vec4 = glMatrix.vec4;
    const mat4 = glMatrix.mat4;
    const tempMat4 = mat4.create();
    const tempVec3 = vec3.create();
    const tempVec4 = vec4.create();
    const camVector = vec3.create();
    const lookVector = vec3.create();
    const upVector = vec3.create();
    const tempVec2 = C3.New(C3.Vector2);
    const tempRect = C3.New(C3.Rect);

    function SortByInstLastCachedZIndex(a, b) {
        return a.GetWorldInfo()._GetLastCachedZIndex() - b.GetWorldInfo()._GetLastCachedZIndex()
    }

    function SortByInstZElevation(a, b) {
        return a.GetWorldInfo().GetZElevation() - b.GetWorldInfo().GetZElevation()
    }
    const tempInstanceList1 = [];
    const tempInstanceList2 = [];
    const tempInstancesByCameraDist = [];
    C3.Layer = class Layer extends C3.DefendedBase {
        constructor(layout, parentLayer, data) {
            super();
            this._layout = layout;
            this._runtime = layout.GetRuntime();
            this._parentLayer = parentLayer;
            this._name = data[0];
            this._index = -1;
            this._sid = data[2];
            this._isVisible = !!data[3];
            this._isInteractive = !!data[13];
            this._backgroundColor = C3.New(C3.Color);
            this._backgroundColor.setFromJSON(data[4].map(x => x / 255));
            this._isTransparent = !!data[5];
            this._parallaxX = data[6];
            this._parallaxY = data[7];
            this._color = C3.New(C3.Color, 1, 1, 1, data[8]);
            this._premultipliedColor =
                C3.New(C3.Color);
            this._isForceOwnTexture = data[9];
            this._renderAs3d = data[17];
            this._useCameraDistanceDrawOrder = data[18];
            this._useRenderCells = data[10];
            this._scaleRate = data[11];
            this._blendMode = data[12];
            this._curRenderTarget = null;
            this._scale = 1;
            this._zElevation = data[16];
            this._angle = 0;
            this._scrollX = 0;
            this._scrollY = 0;
            this._hasOwnScrollPosition = false;
            this._viewport = C3.New(C3.Rect);
            this._viewportZ0 = C3.New(C3.Rect);
            this._viewport3D = C3.New(C3.Rect);
            this._isViewportChanged = true;
            this._projectionMatrix = mat4.create();
            this._isProjectionMatrixChanged = true;
            this._modelViewMatrix = mat4.create();
            this._isMVMatrixChanged = true;
            this._viewFrustum = C3.New(C3.Gfx.ViewFrustum);
            this._isViewFrustumChanged = true;
            this._startupInitialInstances = [];
            this._initialInstancesData = data[14];
            this._initialInstances = [];
            this._createdGlobalUids = [];
            this._initialUIDsToInstanceData = new Map;
            this._instances = [];
            this._zIndicesUpToDate = false;
            this._anyInstanceZElevated = false;
            const canvasManager = this._runtime.GetCanvasManager();
            this._effectList = C3.New(C3.EffectList,
                this, data[15]);
            this._effectChain = C3.New(C3.Gfx.EffectChain, canvasManager.GetEffectChainManager(), {
                drawContent: (renderer, effectChain) => {
                    const layer = effectChain.GetContentObject();
                    const renderSurface = layer.GetRenderTarget();
                    renderer.SetColor(layer.GetPremultipliedColor());
                    renderer.DrawRenderTarget(renderSurface);
                    renderer.InvalidateRenderTarget(renderSurface);
                    canvasManager.ReleaseAdditionalRenderTarget(renderSurface)
                },
                getShaderParameters: index => this.GetEffectList()._GetEffectChainShaderParametersForIndex(index)
            });
            this._needsRebuildEffectChainSteps = true;
            this._wasDefaultColor = true;
            this._renderGrid = null;
            this._lastRenderList = [];
            this._isRenderListUpToDate = false;
            this._lastRenderCells = C3.New(C3.Rect, 0, 0, -1, -1);
            this._curRenderCells = C3.New(C3.Rect, 0, 0, -1, -1);
            this._iLayer = null;
            this._UpdatePremultipliedColor();
            if (this.UsesRenderCells()) this._renderGrid = C3.New(C3.RenderGrid, this._runtime.GetOriginalViewportWidth(), this._runtime.GetOriginalViewportHeight());
            this._subLayers = data[19].map(ld => C3.New(C3.Layer, this._layout,
                this, ld))
        }
        _Init() {
            for (const instData of this._initialInstancesData) {
                const objectClass = this._runtime.GetObjectClassByIndex(instData[1]);
                this._layout._AddInitialObjectClass(objectClass);
                if (!objectClass.GetDefaultInstanceData()) {
                    objectClass.SetDefaultInstanceData(instData);
                    objectClass._SetDefaultLayerIndex(this._index)
                }
                this._initialInstances.push(instData);
                this._initialUIDsToInstanceData.set(instData[2], instData)
            }
            C3.shallowAssignArray(this._startupInitialInstances, this._initialInstances);
            this._initialInstancesData =
                null;
            this._iLayer = new self.ILayer(this)
        }
        Release() {
            this._layout = null;
            this._runtime = null
        }
        GetInitialInstanceData(uid) {
            return this._initialUIDsToInstanceData.get(uid)
        }
        CreateInitialInstances(createdInstances) {
            const isFirstVisit = this._layout.IsFirstVisit();
            let k = 0;
            const initialInstances = this._initialInstances;
            for (let i = 0, len = initialInstances.length; i < len; ++i) {
                const instData = initialInstances[i];
                const objectClass = this._runtime.GetObjectClassByIndex(instData[1]);
                let keep = true;
                if (!objectClass.HasPersistBehavior() ||
                    isFirstVisit) {
                    const inst = this._runtime.CreateInstanceFromData(instData, this, true);
                    createdInstances.push(inst);
                    if (objectClass.IsGlobal()) {
                        keep = false;
                        this._createdGlobalUids.push(inst.GetUID())
                    }
                }
                if (keep) {
                    initialInstances[k] = initialInstances[i];
                    ++k
                }
            }
            C3.truncateArray(initialInstances, k);
            this._runtime.FlushPendingInstances();
            this.SetZIndicesChanged()
        }
        _AddInstance(inst, addToGrid) {
            if (!inst.GetPlugin().IsWorldType()) throw new Error("instance is not of world type");
            const wi = inst.GetWorldInfo();
            if (wi.GetLayer() !==
                this) throw new Error("instance added to wrong layer");
            this._instances.push(inst);
            if (wi.GetZElevation() !== 0) this._anyInstanceZElevated = true;
            if (addToGrid && this.UsesRenderCells()) inst.GetWorldInfo().SetBboxChanged();
            this.SetZIndicesChanged()
        }
        _MaybeAddInstance(inst) {
            if (this._instances.includes(inst)) return;
            this._instances.push(inst);
            if (inst.GetWorldInfo().GetZElevation() !== 0) this._anyInstanceZElevated = true;
            this.SetZIndicesChanged()
        }
        _PrependInstance(inst, addToGrid) {
            const wi = inst.GetWorldInfo();
            if (wi.GetLayer() !==
                this) throw new Error("instance added to wrong layer");
            this._instances.unshift(inst);
            if (wi.GetZElevation() !== 0) this._anyInstanceZElevated = true;
            this.SetZIndicesChanged();
            if (addToGrid && this.UsesRenderCells()) inst.GetWorldInfo().SetBboxChanged()
        }
        _RemoveInstance(inst, removeFromGrid) {
            const index = this._instances.indexOf(inst);
            if (index < 0) return;
            if (removeFromGrid && this.UsesRenderCells()) inst.GetWorldInfo()._RemoveFromRenderCells();
            this._instances.splice(index, 1);
            this.SetZIndicesChanged();
            this._MaybeResetAnyInstanceZElevatedFlag()
        }
        _SetAnyInstanceZElevated() {
            this._anyInstanceZElevated =
                true
        }
        _MaybeResetAnyInstanceZElevatedFlag() {
            if (this._instances.length === 0) this._anyInstanceZElevated = false
        }
        _SortInstancesByLastCachedZIndex(isPersistMode) {
            if (isPersistMode) {
                const assignedZIndices = new Set;
                for (const inst of this._instances) {
                    const cachedZIndex = inst.GetWorldInfo()._GetLastCachedZIndex();
                    if (cachedZIndex >= 0) assignedZIndices.add(cachedZIndex)
                }
                let index = -1;
                for (const inst of this._instances) {
                    const wi = inst.GetWorldInfo();
                    if (wi._GetLastCachedZIndex() >= 0) continue;
                    ++index;
                    while (assignedZIndices.has(index)) ++index;
                    wi._SetZIndex(index)
                }
            }
            this._instances.sort(SortByInstLastCachedZIndex)
        }
        _Start() {}
        _End() {
            for (const inst of this._instances)
                if (!inst.GetObjectClass().IsGlobal()) this._runtime.DestroyInstance(inst);
            this._runtime.FlushPendingInstances();
            C3.clearArray(this._instances);
            this._anyInstanceZElevated = false;
            this.SetZIndicesChanged()
        }
        RecreateInitialObjects(objectClass, rc, offsetX, offsetY, createHierarchy) {
            const eventSheetManager = this._runtime.GetEventSheetManager();
            const allObjectClasses = this._runtime.GetAllObjectClasses();
            const isFamily = objectClass.IsFamily();
            const ret = [];
            for (const instData of this._initialInstances) {
                const worldData = instData[0];
                const x = worldData[0];
                const y = worldData[1];
                if (!rc.containsPoint(x, y)) continue;
                const objectType = allObjectClasses[instData[1]];
                if (objectType !== objectClass)
                    if (isFamily) {
                        if (!objectClass.FamilyHasMember(objectType)) continue
                    } else continue;
                let createOnLayer = this;
                const runningLayout = this._runtime.GetCurrentLayout();
                if (this.GetLayout() !== runningLayout) {
                    createOnLayer = runningLayout.GetLayerByName(this.GetName());
                    if (!createOnLayer) createOnLayer = runningLayout.GetLayerByIndex(this.GetIndex())
                }
                const inst = this._runtime.CreateInstanceFromData(instData, createOnLayer, false, undefined, undefined, false, createHierarchy);
                createOnLayer.SortAndAddInstancesByZIndex(inst);
                const wi = inst.GetWorldInfo();
                wi.OffsetXY(offsetX, offsetY);
                wi.SetBboxChanged();
                eventSheetManager.BlockFlushingInstances(true);
                inst._TriggerOnCreatedOnSelfAndRelated();
                eventSheetManager.BlockFlushingInstances(false);
                ret.push(inst)
            }
            return ret
        }
        GetInstanceCount() {
            return this._instances.length
        }
        GetLayout() {
            return this._layout
        }
        GetName() {
            return this._name
        }
        _SetIndex(i) {
            this._index =
                i
        }
        GetIndex() {
            return this._index
        }
        GetSID() {
            return this._sid
        }
        GetRuntime() {
            return this._runtime
        }
        GetDevicePixelRatio() {
            return this._runtime.GetDevicePixelRatio()
        }
        GetEffectList() {
            return this._effectList
        }
        GetEffectChain() {
            this._MaybeRebuildEffectChainSteps();
            return this._effectChain
        }
        _MaybeRebuildEffectChainSteps() {
            const isDefaultColor = this.HasDefaultColor();
            if (!this._needsRebuildEffectChainSteps && isDefaultColor === this._wasDefaultColor && !this._effectChain.NeedsRebuild()) return;
            const activeEffectTypes = this.GetEffectList().GetActiveEffectTypes();
            this._effectChain.BuildSteps(activeEffectTypes.map(e => e.GetShaderProgram()), {
                indexMap: activeEffectTypes.map(e => e.GetIndex()),
                forcePreDraw: !isDefaultColor,
                useFullSurface: true
            });
            this._needsRebuildEffectChainSteps = false;
            this._wasDefaultColor = isDefaultColor
        }
        UpdateActiveEffects() {
            this.GetEffectList().UpdateActiveEffects();
            this._needsRebuildEffectChainSteps = true
        }
        UsesRenderCells() {
            return this._useRenderCells && !this._useCameraDistanceDrawOrder
        }
        GetRenderGrid() {
            return this._renderGrid
        }
        SetRenderListStale() {
            this._isRenderListUpToDate =
                false
        }
        IsVisible() {
            for (const layer of this.selfAndParentLayers())
                if (!layer._IsVisibleFlagSet()) return false;
            return true
        }
        _IsVisibleFlagSet() {
            return this._isVisible
        }
        SetVisible(v) {
            v = !!v;
            if (this._isVisible === v) return;
            this._isVisible = v;
            this._runtime.UpdateRender()
        }
        SetInteractive(i) {
            this._isInteractive = !!i
        }
        IsInteractive() {
            return this._isInteractive
        }
        IsSelfAndParentsInteractive() {
            for (const layer of this.selfAndParentLayers())
                if (!layer.IsInteractive()) return false;
            return true
        }
        SetOwnScrollPositionEnabled(e) {
            e = !!e;
            if (this._hasOwnScrollPosition === e) return;
            this._hasOwnScrollPosition = e;
            if (e) {
                const layout = this.GetLayout();
                this._scrollX = layout.GetScrollX();
                this._scrollY = layout.GetScrollY()
            }
            this._SetMVMatrixChanged();
            this._runtime.UpdateRender()
        }
        IsOwnScrollPositionEnabled() {
            return this._hasOwnScrollPosition
        }
        SetScrollX(x) {
            const layout = this.GetLayout();
            const lbound = layout.GetScrollLeftBound();
            const rbound = layout.GetScrollRightBound();
            if (x > rbound) x = rbound;
            if (x < lbound) x = lbound;
            if (this._scrollX !== x) {
                this._scrollX =
                    x;
                if (this.IsOwnScrollPositionEnabled()) {
                    this._SetMVMatrixChanged();
                    this._runtime.UpdateRender()
                }
            }
        }
        SetScrollY(y) {
            const layout = this.GetLayout();
            const ubound = layout.GetScrollTopBound();
            const bbound = layout.GetScrollBottomBound();
            if (y > bbound) y = bbound;
            if (y < ubound) y = ubound;
            if (this._scrollY !== y) {
                this._scrollY = y;
                if (this.IsOwnScrollPositionEnabled()) {
                    this._SetMVMatrixChanged();
                    this._runtime.UpdateRender()
                }
            }
        }
        GetScrollX() {
            if (this.IsOwnScrollPositionEnabled()) return this._scrollX;
            else return this.GetLayout().GetScrollX()
        }
        GetScrollY() {
            if (this.IsOwnScrollPositionEnabled()) return this._scrollY;
            else return this.GetLayout().GetScrollY()
        }
        GetViewport() {
            this._MaybeUpdateViewport();
            return this._viewport
        }
        _GetViewportZ0() {
            this._MaybeUpdateViewport();
            return this._viewportZ0
        }
        GetViewport3D() {
            this._MaybeUpdateViewport();
            return this._viewport3D
        }
        _GetVanishingPoint() {
            const layout = this.GetLayout();
            return [layout.GetVanishingPointX(), layout.GetVanishingPointY()]
        }
        GetDefaultCameraZ(viewH) {
            return this._runtime.GetDefaultCameraZ(viewH)
        }
        GetViewportForZ(z, outRect) {
            const viewportZ0 = this._GetViewportZ0();
            if (z ===
                0) outRect.copy(viewportZ0);
            else {
                let midX = viewportZ0.midX();
                let midY = viewportZ0.midY();
                const scaleFactor = this.Get2DScaleFactorToZ(z);
                const viewW = viewportZ0.width() / scaleFactor;
                const viewH = viewportZ0.height() / scaleFactor;
                const [vpX, vpY] = this._GetVanishingPoint();
                if (vpX !== .5 || vpY !== .5) {
                    const cameraZ = this.GetCameraZ();
                    const runtime = this._runtime;
                    const zf = this.GetDefaultCameraZ() / cameraZ;
                    let camOffX = (vpX - .5) * runtime.GetViewportWidth() / zf;
                    let camOffY = (vpY - .5) * runtime.GetViewportHeight() / zf;
                    const a = this.GetAngle();
                    if (a !== 0) {
                        tempVec2.set(camOffX, camOffY);
                        tempVec2.rotate(a);
                        camOffX = tempVec2.getX();
                        camOffY = tempVec2.getY()
                    }
                    const zProg = C3.unlerp(cameraZ, 0, z);
                    midX += C3.lerp(camOffX, 0, zProg);
                    midY += C3.lerp(camOffY, 0, zProg)
                }
                outRect.set(midX - viewW / 2, midY - viewH / 2, midX + viewW / 2, midY + viewH / 2)
            }
        }
        GetOpacity() {
            return this._color.getA()
        }
        SetOpacity(o) {
            o = C3.clamp(o, 0, 1);
            if (this._color.getA() === o) return;
            this._color.setA(o);
            this._UpdatePremultipliedColor();
            this._runtime.UpdateRender()
        }
        _UpdatePremultipliedColor() {
            this._premultipliedColor.copy(this._color);
            this._premultipliedColor.premultiply()
        }
        GetPremultipliedColor() {
            return this._premultipliedColor
        }
        HasDefaultColor() {
            return this._color.equalsRgba(1, 1, 1, 1)
        }
        GetScaleRate() {
            return this._scaleRate
        }
        SetScaleRate(r) {
            if (this._scaleRate === r) return;
            this._scaleRate = r;
            this._SetMVMatrixChanged();
            this._runtime.UpdateRender()
        }
        GetParallaxX() {
            return this._parallaxX
        }
        GetParallaxY() {
            return this._parallaxY
        }
        SetParallax(px, py) {
            if (this._parallaxX === px && this._parallaxY === py) return;
            this._parallaxX = px;
            this._parallaxY = py;
            this._SetMVMatrixChanged();
            this._runtime.UpdateRender();
            if (this._parallaxX !== 1 || this._parallaxY !== 1)
                for (const inst of this._instances) inst.GetObjectClass()._SetAnyInstanceParallaxed(true)
        }
        SetParallaxX(px) {
            this.SetParallax(px, this.GetParallaxY())
        }
        SetParallaxY(py) {
            this.SetParallax(this.GetParallaxX(), py)
        }
        SetZElevation(z) {
            if (this._zElevation === z) return;
            this._zElevation = z;
            this._runtime.UpdateRender()
        }
        GetZElevation() {
            return this._zElevation
        }
        SetAngle(a) {
            a = C3.clampAngle(a);
            if (this._angle === a) return;
            this._angle = a;
            this._SetMVMatrixChanged();
            this._runtime.UpdateRender()
        }
        GetAngle() {
            return C3.clampAngle(this._layout.GetAngle() + this._angle)
        }
        GetOwnAngle() {
            return this._angle
        }
        HasInstances() {
            return this._instances.length > 0
        }
        _GetInstances() {
            return this._instances
        }
        _GetInstancesInDrawOrder() {
            if (this.RendersIn3DMode() && this._useCameraDistanceDrawOrder) {
                C3.shallowAssignArray(tempInstancesByCameraDist, this._GetInstances());
                tempInstancesByCameraDist.sort((a, b) => this._SortInstancesByCameraDistance(a, b));
                return tempInstancesByCameraDist
            } else return this._GetInstances()
        }
        _AppendAllInstancesIncludingSubLayersInDrawOrder(arr) {
            C3.appendArray(arr,
                this._GetInstancesInDrawOrder());
            for (const subLayer of this._subLayers)
                if (subLayer.IsVisible() && subLayer.GetOpacity() > 0) subLayer._AppendAllInstancesIncludingSubLayersInDrawOrder(arr)
        }
        _SortInstancesByCameraDistance(a, b) {
            const camVec = this.GetLayout().Get3DCameraPosition();
            const camX = camVec[0];
            const camY = camVec[1];
            const camZ = camVec[2];
            const wiA = a.GetWorldInfo();
            const wiB = b.GetWorldInfo();
            const dxA = wiA.GetX() - camX;
            const dyA = wiA.GetY() - camY;
            const dzA = wiA.GetZElevation() - camZ;
            const dxB = wiB.GetX() - camX;
            const dyB = wiB.GetY() - camY;
            const dzB = wiB.GetZElevation() - camZ;
            return dxB * dxB + dyB * dyB + dzB * dzB - (dxA * dxA + dyA * dyA + dzA * dzA)
        }
        GetBackgroundColor() {
            return this._backgroundColor
        }
        IsTransparent() {
            return this._isTransparent
        }
        SetTransparent(t) {
            t = !!t;
            if (this._isTransparent === t) return;
            this._isTransparent = t;
            this._runtime.UpdateRender()
        }
        IsForceOwnTexture() {
            return this._isForceOwnTexture
        }
        SetForceOwnTexture(f) {
            f = !!f;
            if (this._isForceOwnTexture === f) return;
            this._isForceOwnTexture = f;
            this._runtime.UpdateRender()
        }
        RendersIn2DMode() {
            return !this.GetRuntime().Uses3DFeatures() ||
                !this._renderAs3d
        }
        RendersIn3DMode() {
            return !this.RendersIn2DMode()
        }
        Has3DCamera() {
            return this.RendersIn3DMode() && this.GetLayout().Is3DCameraEnabled()
        }
        SelfAndAllSubLayersHave3DCamera() {
            if (!this.Has3DCamera()) return false;
            for (const subLayer of this._subLayers)
                if (!subLayer.SelfAndAllSubLayersHave3DCamera()) return false;
            return true
        }
        SetBlendMode(bm) {
            if (this._blendMode === bm) return;
            this._blendMode = bm;
            this._runtime.UpdateRender()
        }
        GetBlendMode() {
            return this._blendMode
        }
        IsRootLayer() {
            return !this._parentLayer
        }
        GetParentLayer() {
            return this._parentLayer
        }
        GetSubLayers() {
            return this._subLayers
        }
        HasAnySubLayers() {
            return this._subLayers.length >
                0
        }
        HasAnyVisibleSubLayer() {
            for (const subLayer of this._subLayers)
                if (subLayer.ShouldDraw()) return true;
            return false
        }* selfAndAllSubLayers() {
            for (const subLayer of this._subLayers) yield* subLayer.selfAndAllSubLayers();
            yield this
        }* parentLayers() {
            let parentLayer = this.GetParentLayer();
            while (parentLayer) {
                yield parentLayer;
                parentLayer = parentLayer.GetParentLayer()
            }
        }* selfAndParentLayers() {
            yield this;
            yield* this.parentLayers()
        }
        IsTransformCompatibleWith(otherLayer) {
            return this === otherLayer || this._parallaxX === otherLayer._parallaxX &&
                this._parallaxY === otherLayer._parallaxY && this._scale === otherLayer._scale && this._scaleRate === otherLayer._scaleRate && this._angle === otherLayer._angle && this.GetScrollX() === otherLayer.GetScrollX() && this.GetScrollY() === otherLayer.GetScrollY()
        }
        SaveTransform() {
            return {
                "parallaxX": this.GetParallaxX(),
                "parallaxY": this.GetParallaxY(),
                "scale": this.GetOwnScale(),
                "scaleRate": this.GetScaleRate(),
                "angle": this.GetOwnAngle(),
                "hasOwnScroll": this.IsOwnScrollPositionEnabled(),
                "scrollX": this.GetScrollX(),
                "scrollY": this.GetScrollY()
            }
        }
        RestoreTransform(t) {
            this.SetParallax(t["parallaxX"],
                t["parallaxY"]);
            this.SetOwnScale(t["scale"]);
            this.SetScaleRate(t["scaleRate"]);
            this.SetAngle(t["angle"]);
            this.SetOwnScrollPositionEnabled(t["hasOwnScroll"]);
            this.SetScrollX(t["scrollX"]);
            this.SetScrollY(t["scrollY"]);
            this._MaybeUpdateViewport()
        }
        _RemoveAllInstancesInSet(s) {
            if (s.size === 0) return;
            const numRemoved = C3.arrayRemoveAllInSet(this._instances, s);
            if (numRemoved > 0) {
                this._MaybeResetAnyInstanceZElevatedFlag();
                this.SetZIndicesChanged()
            }
        }
        SetZIndicesChanged() {
            this._zIndicesUpToDate = false;
            this._isRenderListUpToDate =
                false
        }
        _UpdateZIndices() {
            if (this._zIndicesUpToDate) return;
            this._instances.sort(SortByInstZElevation);
            if (this.UsesRenderCells())
                for (let i = 0, len = this._instances.length; i < len; ++i) {
                    const wi = this._instances[i].GetWorldInfo();
                    wi._SetZIndex(i);
                    this._renderGrid.MarkRangeChanged(wi.GetRenderCellRange())
                } else
                    for (let i = 0, len = this._instances.length; i < len; ++i) this._instances[i].GetWorldInfo()._SetZIndex(i);
            this._zIndicesUpToDate = true
        }
        MoveInstanceAdjacent(inst, other, isAfter) {
            const instWi = inst.GetWorldInfo();
            const otherWi =
                other.GetWorldInfo();
            if (instWi.GetLayer() !== this || otherWi.GetLayer() !== this) throw new Error("can't arrange Z order unless both objects on this layer");
            const myZ = instWi.GetZIndex();
            let insertZ = otherWi.GetZIndex();
            if (myZ === insertZ + (isAfter ? 1 : -1)) return false;
            C3.arrayRemove(this._instances, myZ);
            if (myZ < insertZ) insertZ--;
            if (isAfter) insertZ++;
            if (insertZ === this._instances.length) this._instances.push(inst);
            else this._instances.splice(insertZ, 0, inst);
            this.SetZIndicesChanged();
            return true
        }
        _MergeSortedZArrays(a,
            b) {
            const ret = [];
            let i = 0,
                j = 0,
                lena = a.length,
                lenb = b.length;
            while (i < lena && j < lenb) {
                const ai = a[i];
                const bj = b[j];
                if (ai.GetWorldInfo()._GetLastCachedZIndex() < bj.GetWorldInfo()._GetLastCachedZIndex()) {
                    ret.push(ai);
                    ++i
                } else {
                    ret.push(bj);
                    ++j
                }
            }
            for (; i < lena; ++i) ret.push(a[i]);
            for (; j < lenb; ++j) ret.push(b[j]);
            return ret
        }
        _MergeAllSortedZArrays_pass(arr) {
            const ret = [];
            const len = arr.length;
            for (let i = 0; i < len - 1; i += 2) {
                const arr1 = arr[i];
                const arr2 = arr[i + 1];
                ret.push(this._MergeSortedZArrays(arr1, arr2))
            }
            if (len % 2 === 1) ret.push(arr[len -
                1]);
            return ret
        }
        _MergeAllSortedZArrays(arr) {
            while (arr.length > 1) arr = this._MergeAllSortedZArrays_pass(arr);
            return arr[0]
        }
        _GetRenderCellInstancesToDraw() {
            this._UpdateZIndices();
            C3.clearArray(renderCellArr);
            this._renderGrid.QueryRange(this.GetViewport(), renderCellArr);
            if (!renderCellArr.length) return [];
            if (renderCellArr.length === 1) return renderCellArr[0];
            return this._MergeAllSortedZArrays(renderCellArr)
        }
        ShouldDraw() {
            return this.IsVisible() && this.GetOpacity() > 0 && this._DrawsAnyContentInSelfOrSubLayers()
        }
        _DrawsAnyContentInSelfOrSubLayers() {
            if (this.HasInstances() ||
                !this.IsTransparent()) return true;
            for (const subLayer of this._subLayers)
                if (subLayer._DrawsAnyContentInSelfOrSubLayers()) return true;
            return false
        }
        UsesOwnTexture() {
            return this.IsForceOwnTexture() || !this.HasDefaultColor() || this.GetBlendMode() !== 0 || this._effectList.HasAnyActiveEffect()
        }
        SelfOrAnySubLayerUsesOwnTexture() {
            if (this.UsesOwnTexture()) return true;
            for (const subLayer of this._subLayers)
                if (subLayer.SelfOrAnySubLayerUsesOwnTexture()) return true;
            return false
        }
        GetRenderTarget() {
            return this._curRenderTarget
        }
        Get2DScaleFactorToZ(z) {
            if (this._layout.IsOrthographicProjection()) return 1;
            else {
                const camZ = this.GetCameraZ();
                return camZ / (camZ - z)
            }
        }
        GetCameraZ(viewH) {
            return this.GetDefaultCameraZ(viewH) / this.GetNormalScale()
        }
        _SetMVMatrixChanged() {
            this._isMVMatrixChanged = true;
            this._isViewFrustumChanged = true;
            this._isViewportChanged = true
        }
        _GetModelViewMatrix(renderer) {
            if (this._isMVMatrixChanged) {
                this._CalculateModelViewMatrix(renderer, this._modelViewMatrix, 0, 0, null);
                this._isMVMatrixChanged = false
            }
            return this._modelViewMatrix
        }
        GetCameraPosition() {
            if (this.Has3DCamera()) {
                const camPos = this.GetLayout().Get3DCameraPosition();
                return [camPos[0], camPos[1], camPos[2]]
            } else return this._Get2DCameraPosition()
        }
        _Get2DCameraPosition(offX = 0, offY = 0, viewH = 0) {
            const runtime = this._runtime;
            const layout = this.GetLayout();
            const parallaxOriginX = runtime.GetParallaxXOrigin();
            const parallaxOriginY = runtime.GetParallaxYOrigin();
            let scrollOriginX = (this.GetScrollX() - parallaxOriginX) * this._parallaxX + parallaxOriginX;
            let scrollOriginY = (this.GetScrollY() - parallaxOriginY) * this._parallaxY + parallaxOriginY;
            if (runtime.IsPixelRoundingEnabled()) {
                scrollOriginX =
                    Math.round(scrollOriginX);
                scrollOriginY = Math.round(scrollOriginY)
            }
            let camX = scrollOriginX + offX;
            let camY = scrollOriginY + offY;
            const camZ = layout.IsOrthographicProjection() ? this.GetDefaultCameraZ(viewH) : this.GetCameraZ(viewH);
            const [vpX, vpY] = this._GetVanishingPoint();
            if (vpX !== .5 || vpY !== .5) {
                const zf = this.GetDefaultCameraZ(viewH) / camZ;
                let camOffX = (vpX - .5) * runtime.GetViewportWidth() / zf;
                let camOffY = (vpY - .5) * runtime.GetViewportHeight() / zf;
                const a = this.GetAngle();
                if (a !== 0) {
                    tempVec2.set(camOffX, camOffY);
                    tempVec2.rotate(a);
                    camOffX = tempVec2.getX();
                    camOffY = tempVec2.getY()
                }
                camX += camOffX;
                camY += camOffY
            }
            return [camX, camY, camZ]
        }
        _CalculateModelViewMatrix(renderer, outMat, offX, offY, viewH) {
            const runtime = this._runtime;
            const layout = this.GetLayout();
            if (this.Has3DCamera()) {
                vec3.copy(camVector, layout.Get3DCameraPosition());
                vec3.copy(lookVector, layout.Get3DCameraLookAt());
                vec3.copy(upVector, layout.Get3DCameraUpVector());
                const parallaxOriginX = runtime.GetParallaxXOrigin();
                const parallaxOriginY = runtime.GetParallaxYOrigin();
                const lookDx =
                    lookVector[0] - camVector[0];
                const lookDy = lookVector[1] - camVector[1];
                const lookDz = lookVector[2] - camVector[2];
                camVector[0] = (camVector[0] - parallaxOriginX) * this._parallaxX + parallaxOriginX;
                camVector[1] = (camVector[1] - parallaxOriginY) * this._parallaxY + parallaxOriginY;
                camVector[2] *= Math.max(this._parallaxX, this._parallaxY);
                lookVector[0] = camVector[0] + lookDx;
                lookVector[1] = camVector[1] + lookDy;
                lookVector[2] = camVector[2] + lookDz
            } else {
                const [camX, camY, camZ] = this._Get2DCameraPosition(offX, offY, viewH);
                vec3.set(camVector,
                    camX, camY, camZ);
                vec3.set(lookVector, camX, camY, camZ - 100);
                const a = this.GetAngle();
                if (a === 0) vec3.set(upVector, 0, 1, 0);
                else vec3.set(upVector, Math.sin(a), Math.cos(a), 0)
            }
            renderer.CalculateLookAtModelView(outMat, camVector, lookVector, upVector, viewH || runtime.GetViewportHeight())
        }
        _SetProjectionMatrixChanged() {
            this._isProjectionMatrixChanged = true;
            this._isViewFrustumChanged = true;
            this._isViewportChanged = true
        }
        _GetProjectionMatrix(renderer) {
            if (this._isProjectionMatrixChanged) {
                this._CalculateProjectionMatrix(renderer);
                this._isProjectionMatrixChanged = false
            }
            return this._projectionMatrix
        }
        _CalculateProjectionMatrix(renderer) {
            const canvasManager = this._runtime.GetCanvasManager();
            const [vpX, vpY] = this._GetVanishingPoint();
            if (this._layout.IsOrthographicProjection()) renderer.CalculateOrthographicMatrix(this._projectionMatrix, canvasManager.GetDrawWidth(), canvasManager.GetDrawHeight());
            else if (vpX === .5 && vpY === .5) mat4.copy(this._projectionMatrix, canvasManager.GetDefaultProjectionMatrix());
            else {
                const drawW = canvasManager.GetDrawWidth();
                const drawH = canvasManager.GetDrawHeight();
                renderer.CalculatePerspectiveMatrix(this._projectionMatrix, drawW / drawH, vpX, vpY)
            }
        }
        _SetTransform(renderer, updateProjection = true, offX = 0, offY = 0, viewH = 0) {
            if (updateProjection) renderer.SetProjectionMatrix(this._GetProjectionMatrix(renderer));
            let modelViewMatrix = null;
            if (offX === 0 && offY === 0 && viewH === 0) modelViewMatrix = this._GetModelViewMatrix(renderer);
            else {
                this._CalculateModelViewMatrix(renderer, tempMat4, offX, offY, viewH);
                modelViewMatrix = tempMat4
            }
            renderer.SetModelViewMatrix(modelViewMatrix)
        }
        PrepareForDraw(renderer) {
            this._SetTransform(renderer);
            renderer.SetBaseZ(this.GetZElevation())
        }
        Draw(renderer, destinationRenderTarget, isFirstToTarget) {
            const canvasManager = this._runtime.GetCanvasManager();
            const useOwnTexture = this.UsesOwnTexture();
            let ownRenderTarget = null;
            let layerQuery = null;
            if (this._runtime.IsGPUProfiling())
                if (renderer.IsWebGL()) {
                    const timingsBuffer = canvasManager.GetLayerTimingsBuffer(this);
                    if (timingsBuffer) {
                        layerQuery = timingsBuffer.AddTimeElapsedQuery();
                        renderer.StartQuery(layerQuery)
                    }
                } else if (renderer.IsWebGPU()) renderer.WriteTimestamp((this.GetIndex() +
                1) * 2);
            if (useOwnTexture) {
                const rtOpts = {
                    sampling: this._runtime.GetSampling(),
                    isSampled: true,
                    canReadPixels: renderer.IsWebGPU() ? this._runtime.UsesAnyBackgroundBlending() : false
                };
                if (canvasManager.GetCurrentFullscreenScalingQuality() === "low") {
                    rtOpts.width = canvasManager.GetDrawWidth();
                    rtOpts.height = canvasManager.GetDrawHeight()
                }
                ownRenderTarget = this._runtime.GetAdditionalRenderTarget(rtOpts);
                this._curRenderTarget = ownRenderTarget;
                renderer.SetRenderTarget(ownRenderTarget);
                if (this.IsTransparent()) renderer.ClearRgba(0,
                    0, 0, 0)
            } else {
                this._curRenderTarget = destinationRenderTarget;
                renderer.SetRenderTarget(destinationRenderTarget)
            }
            if (!this.IsTransparent()) renderer.Clear(this._backgroundColor);
            this._layout._DrawLayerList(renderer, this._curRenderTarget, this._subLayers, useOwnTexture && this.IsTransparent());
            this._SetTransform(renderer);
            renderer.SetBaseZ(this.GetZElevation());
            renderer.SetDepthEnabled(this.RendersIn3DMode());
            if (this.GetNormalScale() > Number.EPSILON) {
                this._UpdateZIndices();
                const useRenderCells = this.UsesRenderCells() &&
                    this.GetZElevation() === 0 && !this._anyInstanceZElevated;
                if (this.Has3DCamera()) this._DrawInstances_3DCamera(renderer);
                else if (useRenderCells) this._DrawInstances_RenderCells(renderer);
                else this._DrawInstances(renderer, this._GetInstancesInDrawOrder())
            }
            renderer.SetBaseZ(0);
            renderer.SetCurrentZ(0);
            if (useOwnTexture) {
                renderer.SetDepthEnabled(false);
                this._DrawLayerOwnTextureToRenderTarget(renderer, ownRenderTarget, destinationRenderTarget, isFirstToTarget)
            }
            if (layerQuery) renderer.EndQuery(layerQuery);
            if (this._runtime.IsGPUProfiling() &&
                renderer.IsWebGPU()) renderer.WriteTimestamp((this.GetIndex() + 1) * 2 + 1);
            this._curRenderTarget = null
        }
        _DrawInstances(renderer, instances) {
            const viewport = this.GetViewport();
            const renderTarget = this._curRenderTarget;
            const isOrthographic = this.GetLayout().IsOrthographicProjection();
            const hasVanishingPointOutsideViewport = this.GetLayout().HasVanishingPointOutsideViewport();
            let lastInst = null;
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst = instances[i];
                if (inst === lastInst) continue;
                lastInst = inst;
                const wi = inst.GetWorldInfo();
                if (wi.IsVisible() && wi.IsInViewport(viewport, hasVanishingPointOutsideViewport, isOrthographic)) this._DrawInstanceMaybeWithEffects(inst, wi, renderer, renderTarget)
            }
        }
        _DrawInstances_3DCamera(renderer) {
            const renderTarget = this._curRenderTarget;
            const viewFrustum = this._GetViewFrustum();
            const coplanarInstances = tempInstanceList1;
            const postRenderInstances = tempInstanceList2;
            const instances = this._GetInstancesInDrawOrder();
            for (let i = 0, len = instances.length; i < len;) {
                const inst = instances[i];
                const wi = inst.GetWorldInfo();
                if (!wi.IsVisible() || !wi.IsInViewport3D(viewFrustum)) {
                    ++i;
                    continue
                }
                if (!inst.RendersToOwnZPlane() || wi.GetDepth() > 0) postRenderInstances.push(inst);
                const startZ = inst.GetWorldInfo().GetTotalZElevation();
                coplanarInstances.push(inst);
                let endIndex = i + 1;
                for (; endIndex < len; ++endIndex) {
                    const nextInst = instances[endIndex];
                    const nextWi = nextInst.GetWorldInfo();
                    if (!nextWi.IsVisible() || !nextWi.IsInViewport3D(viewFrustum)) continue;
                    if (nextWi.GetTotalZElevation() !== startZ) break;
                    if (!nextInst.RendersToOwnZPlane()) {
                        postRenderInstances.push(nextInst);
                        continue
                    }
                    if (nextWi.GetDepth() > 0) postRenderInstances.push(nextInst);
                    coplanarInstances.push(nextInst)
                }
                if (coplanarInstances.length === 1 && !coplanarInstances[0].MustMitigateZFighting()) {
                    this._DrawInstanceMaybeWithEffects(inst, wi, renderer, renderTarget);
                    for (let j = 0, lenj = postRenderInstances.length; j < lenj; ++j) {
                        const postInst = postRenderInstances[j];
                        if (postInst === inst) continue;
                        const postWi = postInst.GetWorldInfo();
                        const postWiLayer = postWi.GetLayer();
                        postWiLayer._DrawInstanceMaybeWithEffects(postInst, postWi, renderer,
                            renderTarget)
                    }
                } else {
                    this._DrawCoplanarInstances_3DCamera(renderer, coplanarInstances);
                    for (let j = 0, lenj = postRenderInstances.length; j < lenj; ++j) {
                        const postInst = postRenderInstances[j];
                        const postWi = postInst.GetWorldInfo();
                        postWi._SetDrawNonBackFacesOnly(true);
                        this._DrawInstanceMaybeWithEffects(postInst, postWi, renderer, renderTarget);
                        postWi._SetDrawNonBackFacesOnly(false)
                    }
                }
                i = endIndex;
                C3.clearArray(coplanarInstances);
                C3.clearArray(postRenderInstances)
            }
        }
        _DrawCoplanarInstances_3DCamera(renderer, instances) {
            const renderTarget =
                this._curRenderTarget;
            renderer.CoplanarStartStencilPass();
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst = instances[i];
                const wi = inst.GetWorldInfo();
                wi._SetDrawBackFaceOnly(true);
                this._DrawInstance(inst, wi, renderer)
            }
            renderer.CoplanarStartColorPass();
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst = instances[i];
                const wi = inst.GetWorldInfo();
                this._DrawInstanceMaybeWithEffects(inst, wi, renderer, renderTarget);
                wi._SetDrawBackFaceOnly(false)
            }
            renderer.CoplanarRestoreStandardRendering()
        }
        _DrawInstances_RenderCells(renderer) {
            const renderGrid =
                this._renderGrid;
            const curRenderCells = this._curRenderCells;
            const lastRenderCells = this._lastRenderCells;
            const viewport = this.GetViewport();
            let instancesToDraw;
            curRenderCells.set(renderGrid.XToCell(viewport.getLeft()), renderGrid.YToCell(viewport.getTop()), renderGrid.XToCell(viewport.getRight()), renderGrid.YToCell(viewport.getBottom()));
            if (!this._isRenderListUpToDate || !curRenderCells.equals(lastRenderCells)) {
                instancesToDraw = this._GetRenderCellInstancesToDraw();
                this._isRenderListUpToDate = true;
                lastRenderCells.copy(curRenderCells)
            } else instancesToDraw =
                this._lastRenderList;
            this._DrawInstances(renderer, instancesToDraw);
            if (instancesToDraw !== this._lastRenderList) C3.shallowAssignArray(this._lastRenderList, instancesToDraw)
        }
        _DrawInstanceMaybeWithEffects(inst, wi, renderer, renderTarget) {
            if (wi.HasAnyActiveEffect()) this._DrawInstanceWithEffectsAndRestore(inst, wi, renderer, renderTarget);
            else this._DrawInstance(inst, wi, renderer)
        }
        _DrawInstance(inst, wi, renderer) {
            const wiStateGroup = wi.GetRendererStateGroup();
            if (renderer.GetCurrentStateGroup() !== wiStateGroup) wiStateGroup.Apply();
            inst.Draw(renderer)
        }
        _DrawInstanceWithEffectsAndRestore(inst, wi, renderer, renderTarget) {
            if (this._DrawInstanceWithEffects(inst, wi, renderer, renderTarget, null)) this._SetTransform(renderer)
        }
        _DrawInstanceWithEffects(inst, wi, renderer, renderTarget, opts) {
            const effectChain = wi.GetInstanceEffectList().GetEffectChain();
            effectChain.Render(renderer, renderTarget, {
                contentObject: inst,
                blendMode: wi.GetBlendMode(),
                devicePixelRatio: this._runtime.GetEffectDevicePixelRatioParam(),
                time: inst.GetInstanceGameTime(),
                layerScale: this._runtime.GetEffectLayerScaleParam() *
                    this.GetNormalScale(),
                layerAngle: this.GetAngle(),
                layoutRect: wi.GetBoundingBox(),
                drawSurfaceRect: effectChain.CanSkipCalculatingDrawSurfaceRect() ? null : this._InstanceBoxToDrawSurface(wi),
                drawContentHook: opts && opts.drawContentHook,
                compositOffX: opts && opts.compositOffX,
                compositOffY: opts && opts.compositOffY,
                updateOwnProjection: opts && opts.updateOwnProjection
            });
            renderer.SetBaseZ(this.GetZElevation());
            return effectChain.DidChangeTransform()
        }
        _DrawLayerOwnTextureToRenderTarget(renderer, ownRenderTarget, destinationRenderTarget,
            isFirstToTarget) {
            const activeEffectTypes = this._effectList.GetActiveEffectTypes();
            const runtime = this._runtime;
            if (activeEffectTypes.length === 0) {
                renderer.SetRenderTarget(destinationRenderTarget);
                renderer.SetTextureFillMode();
                if (isFirstToTarget && this._blendMode === 0 && this.HasDefaultColor()) renderer.CopyRenderTarget(ownRenderTarget);
                else {
                    renderer.SetBlendMode(this._blendMode);
                    renderer.SetColor(this._premultipliedColor);
                    renderer.DrawRenderTarget(ownRenderTarget)
                }
                renderer.InvalidateRenderTarget(ownRenderTarget);
                runtime.ReleaseAdditionalRenderTarget(ownRenderTarget)
            } else this.GetEffectChain().Render(renderer, destinationRenderTarget, {
                contentObject: this,
                blendMode: this.GetBlendMode(),
                devicePixelRatio: runtime.GetEffectDevicePixelRatioParam(),
                layerScale: runtime.GetEffectLayerScaleParam() * this.GetNormalScale(),
                layerAngle: this.GetAngle(),
                layoutRect: this.GetViewport(),
                drawSurfaceRect: null,
                invalidateRenderTargets: true
            })
        }
        GetOwnScale() {
            return this._scale
        }
        SetOwnScale(s) {
            if (this._scale === s) return;
            this._scale = s;
            this._layout.BoundScrolling();
            this._SetMVMatrixChanged();
            this._runtime.UpdateRender()
        }
        GetRenderScale() {
            return this.GetNormalScale() * this._runtime.GetRenderScale()
        }
        GetDisplayScale() {
            return this.GetNormalScale() * this._runtime.GetDisplayScale()
        }
        GetNormalScale() {
            return (this._scale * this._layout.GetScale() - 1) * this._scaleRate + 1
        }
        _MaybeUpdateViewport() {
            if (!this._isViewportChanged) return;
            this._isViewportChanged = false;
            const parallaxOriginX = this._runtime.GetParallaxXOrigin();
            const parallaxOriginY = this._runtime.GetParallaxYOrigin();
            const scrollOriginX =
                (this.GetScrollX() - parallaxOriginX) * this._parallaxX + parallaxOriginX;
            const scrollOriginY = (this.GetScrollY() - parallaxOriginY) * this._parallaxY + parallaxOriginY;
            const normalScale = this.GetNormalScale();
            const scaledViewportWidth = this._runtime.GetViewportWidth() / normalScale;
            const scaledViewportHeight = this._runtime.GetViewportHeight() / normalScale;
            let px = scrollOriginX - scaledViewportWidth / 2;
            let py = scrollOriginY - scaledViewportHeight / 2;
            if (this._runtime.IsPixelRoundingEnabled()) {
                px = Math.round(px);
                py = Math.round(py)
            }
            const viewportZ0 =
                this._viewportZ0;
            viewportZ0.set(px, py, px + scaledViewportWidth, py + scaledViewportHeight);
            const myAngle = this.GetAngle();
            if (myAngle !== 0) {
                tmpRect.copy(viewportZ0);
                tmpRect.offset(-viewportZ0.midX(), -viewportZ0.midY());
                tmpQuad.setFromRotatedRect(tmpRect, myAngle);
                tmpQuad.getBoundingBox(tmpRect);
                tmpRect.offset(viewportZ0.midX(), viewportZ0.midY());
                viewportZ0.copy(tmpRect)
            }
            const layerZ = this._zElevation;
            this.GetViewportForZ(layerZ, this._viewport);
            if (this.Has3DCamera()) this.CalculateViewport3D(layerZ, this._viewport3D);
            else this._viewport3D.copy(this._viewport)
        }
        CalculateViewport3D(z, outRect) {
            const canvasManager = this._runtime.GetCanvasManager();
            const canvasWidth = canvasManager.GetCssWidth();
            const canvasHeight = canvasManager.GetCssHeight();
            const [tlx, tly] = this.CanvasCssToLayer(0, 0, z);
            const [trx, try_] = this.CanvasCssToLayer(canvasWidth, 0, z);
            const [brx, bry] = this.CanvasCssToLayer(canvasWidth, canvasHeight, z);
            const [blx, bly] = this.CanvasCssToLayer(0, canvasHeight, z);
            let left = Math.min(tlx, trx, brx, blx);
            let top = Math.min(tly, try_,
                bry, bly);
            let right = Math.max(tlx, trx, brx, blx);
            let bottom = Math.max(tly, try_, bry, bly);
            if (!isFinite(left)) left = -Infinity;
            if (!isFinite(top)) top = -Infinity;
            if (!isFinite(right)) right = Infinity;
            if (!isFinite(bottom)) bottom = Infinity;
            outRect.set(left, top, right, bottom)
        }
        CanvasCssToLayer(ptx, pty, z = 0) {
            return this._CanvasToLayer(ptx, pty, z, this.GetDisplayScale())
        }
        DrawSurfaceToLayer(ptx, pty, z = 0) {
            return this._CanvasToLayer(ptx, pty, z, this.GetRenderScale() * this.GetDevicePixelRatio())
        }
        _CanvasToLayer(canvasX, canvasY, zElevation,
            displayScale) {
            const runtime = this._runtime;
            const renderer = runtime.GetRenderer();
            const normalScale = this.GetNormalScale();
            const scaledViewportWidth = runtime.GetViewportWidth() / normalScale;
            const scaledViewportHeight = runtime.GetViewportHeight() / normalScale;
            const viewport = tempVec4;
            vec4.set(viewport, 0, 0, scaledViewportWidth, scaledViewportHeight);
            canvasX = canvasX / displayScale;
            canvasY = viewport[3] - canvasY / displayScale;
            const matP = this._GetProjectionMatrix(renderer);
            const matMV = this._GetModelViewMatrix(renderer);
            const objectCoord = tempVec3;
            const result = C3.Gfx.UnprojectScreenToWorldZ(canvasX, canvasY, zElevation, matMV, matP, viewport, objectCoord);
            if (result) return [objectCoord[0], objectCoord[1]];
            else return [NaN, NaN]
        }
        CanvasCssToLayer_DefaultTransform(ptx, pty) {
            const scale = this._scale;
            const scaleRate = this._scaleRate;
            const parallaxX = this._parallaxX;
            const parallaxY = this._parallaxY;
            const angle = this._angle;
            this._scale = 1;
            this._scaleRate = 1;
            this._parallaxX = 1;
            this._parallaxY = 1;
            this._angle = 0;
            this._SetMVMatrixChanged();
            const ret =
                this.CanvasCssToLayer(ptx, pty);
            this._scale = scale;
            this._scaleRate = scaleRate;
            this._parallaxX = parallaxX;
            this._parallaxY = parallaxY;
            this._angle = angle;
            this._SetMVMatrixChanged();
            return ret
        }
        LayerToCanvasCss(ptx, pty, z = 0) {
            return this._LayerToCanvas(ptx, pty, z, this.GetDisplayScale())
        }
        LayerToDrawSurface(ptx, pty, z = 0) {
            return this._LayerToCanvas(ptx, pty, z, this.GetRenderScale() * this.GetDevicePixelRatio())
        }
        _LayerToCanvas(layerX, layerY, zElevation, displayScale) {
            const runtime = this._runtime;
            const renderer = runtime.GetRenderer();
            const normalScale = this.GetNormalScale();
            const scaledViewportWidth = runtime.GetViewportWidth() / normalScale;
            const scaledViewportHeight = runtime.GetViewportHeight() / normalScale;
            const viewport = tempVec4;
            vec4.set(viewport, 0, 0, scaledViewportWidth, scaledViewportHeight);
            const matP = this._GetProjectionMatrix(renderer);
            const matMV = this._GetModelViewMatrix(renderer);
            const windowCoord = tempVec3;
            const result = C3.Gfx.Project(layerX, layerY, zElevation, matMV, matP, viewport, windowCoord);
            if (result) return [windowCoord[0] * displayScale,
                (viewport[3] - windowCoord[1]) * displayScale
            ];
            else return [NaN, NaN]
        }
        _GetLayerToDrawSurfaceScale(size, zElevation) {
            size *= this.GetRenderScale() * this.GetDevicePixelRatio();
            if (zElevation !== 0) size *= this.Get2DScaleFactorToZ(zElevation);
            return size
        }
        _InstanceBoxToDrawSurface(wi) {
            const bbox = wi.GetBoundingBox();
            const z = wi.GetTotalZElevation();
            const depth = wi.GetDepth();
            const topZ = z + depth;
            const bbLeft = bbox.getLeft();
            const bbTop = bbox.getTop();
            const bbRight = bbox.getRight();
            const bbBottom = bbox.getBottom();
            if (this.Has3DCamera()) {
                if (this._IsPointBehindNearPlane(bbLeft,
                        bbTop, z) || this._IsPointBehindNearPlane(bbRight, bbTop, z) || this._IsPointBehindNearPlane(bbRight, bbBottom, z) || this._IsPointBehindNearPlane(bbLeft, bbBottom, z)) return null;
                if (depth > 0)
                    if (this._IsPointBehindNearPlane(bbLeft, bbTop, topZ) || this._IsPointBehindNearPlane(bbRight, bbTop, topZ) || this._IsPointBehindNearPlane(bbRight, bbBottom, topZ) || this._IsPointBehindNearPlane(bbLeft, bbBottom, topZ)) return null
            } else if (topZ >= this.GetCameraZ()) return null;
            let [stlx, stly] = this.LayerToDrawSurface(bbLeft, bbTop, z);
            let [sbrx,
                sbry
            ] = this.LayerToDrawSurface(bbRight, bbBottom, z);
            if (this.GetAngle() !== 0 || depth > 0 || this.Has3DCamera()) {
                const [strx, stry] = this.LayerToDrawSurface(bbRight, bbTop, z);
                const [sblx, sbly] = this.LayerToDrawSurface(bbLeft, bbBottom, z);
                if (depth > 0) {
                    const [stlxTop, stlyTop] = this.LayerToDrawSurface(bbLeft, bbTop, topZ);
                    const [strxTop, stryTop] = this.LayerToDrawSurface(bbRight, bbTop, topZ);
                    const [sbrxTop, sbryTop] = this.LayerToDrawSurface(bbRight, bbBottom, topZ);
                    const [sblxTop, sblyTop] = this.LayerToDrawSurface(bbLeft, bbBottom,
                        topZ);
                    let temp = Math.min(stlx, sbrx, strx, sblx, stlxTop, strxTop, sbrxTop, sblxTop);
                    sbrx = Math.max(stlx, sbrx, strx, sblx, stlxTop, strxTop, sbrxTop, sblxTop);
                    stlx = temp;
                    temp = Math.min(stly, sbry, stry, sbly, stlyTop, stryTop, sbryTop, sblyTop);
                    sbry = Math.max(stly, sbry, stry, sbly, stlyTop, stryTop, sbryTop, sblyTop);
                    stly = temp
                } else {
                    let temp = Math.min(stlx, sbrx, strx, sblx);
                    sbrx = Math.max(stlx, sbrx, strx, sblx);
                    stlx = temp;
                    temp = Math.min(stly, sbry, stry, sbly);
                    sbry = Math.max(stly, sbry, stry, sbly);
                    stly = temp
                }
            }
            tmpRect.set(stlx, stly, sbrx, sbry);
            return tmpRect
        }
        _GetViewFrustum() {
            if (this._isViewFrustumChanged) {
                this._UpdateViewFrustum();
                this._isViewFrustumChanged = false
            }
            return this._viewFrustum
        }
        _UpdateViewFrustum() {
            const renderer = this._runtime.GetRenderer();
            const matP = this._GetProjectionMatrix(renderer);
            const matMV = this._GetModelViewMatrix(renderer);
            this._viewFrustum.CalculatePlanes(matMV, matP)
        }
        _IsPointBehindNearPlane(x, y, z) {
            return this._GetViewFrustum().IsBehindNearPlane(x, y, z)
        }
        _SaveToJson() {
            const o = {
                "s": this.GetOwnScale(),
                "a": this.GetOwnAngle(),
                "v": this._IsVisibleFlagSet(),
                "i": this.IsInteractive(),
                "bc": this._backgroundColor.toJSON(),
                "t": this.IsTransparent(),
                "sx": this._scrollX,
                "sy": this._scrollY,
                "hosp": this._hasOwnScrollPosition,
                "px": this.GetParallaxX(),
                "py": this.GetParallaxY(),
                "c": this._color.toJSON(),
                "sr": this.GetScaleRate(),
                "fx": this._effectList.SaveToJson(),
                "cg": this._createdGlobalUids
            };
            return o
        }
        _LoadFromJson(o) {
            this._scale = o["s"];
            this._angle = o["a"];
            this._isVisible = !!o["v"];
            this._isInteractive = o.hasOwnProperty("i") ? o["i"] : true;
            this._backgroundColor.setFromJSON(o["bc"]);
            this._isTransparent = !!o["t"];
            if (o.hasOwnProperty("sx")) this._scrollX = o["sx"];
            if (o.hasOwnProperty("sy")) this._scrollY = o["sy"];
            if (o.hasOwnProperty("hosp")) this._hasOwnScrollPosition = !!o["hosp"];
            this._parallaxX = o["px"];
            this._parallaxY = o["py"];
            this._color.setFromJSON(o["c"]);
            this._UpdatePremultipliedColor();
            this._scaleRate = o["sr"];
            C3.shallowAssignArray(this._createdGlobalUids, o["cg"]);
            C3.shallowAssignArray(this._initialInstances, this._startupInitialInstances);
            const tempSet = new Set(this._createdGlobalUids);
            let j = 0;
            for (let i = 0, len = this._initialInstances.length; i < len; ++i)
                if (!tempSet.has(this._initialInstances[i][2])) {
                    this._initialInstances[j] = this._initialInstances[i];
                    ++j
                }
            C3.truncateArray(this._initialInstances, j);
            this._effectList.LoadFromJson(o["fx"]);
            this._needsRebuildEffectChainSteps = true;
            this._SortInstancesByLastCachedZIndex(false);
            this.SetZIndicesChanged();
            this._SetMVMatrixChanged();
            this._SetProjectionMatrixChanged()
        }
        GetILayer() {
            return this._iLayer
        }
        SortAndAddInstancesByZIndex(inst, sortExisting = false) {
            if (this._instances.includes(inst)) {
                if (sortExisting) this._instances.sort((f,
                    s) => {
                    const firstZIndex = f.GetWorldInfo().GetSceneGraphZIndex();
                    const secondZIndex = s.GetWorldInfo().GetSceneGraphZIndex();
                    return firstZIndex - secondZIndex
                });
                return
            }
            if (inst.HasChildren()) {
                const instances = [...inst.allChildren()];
                instances.push(inst);
                instances.sort((f, s) => {
                    const firstZIndex = f.GetWorldInfo().GetSceneGraphZIndex();
                    const secondZIndex = s.GetWorldInfo().GetSceneGraphZIndex();
                    return firstZIndex - secondZIndex
                });
                for (const instanceToAdd of instances) {
                    if (!instanceToAdd.IsInContainer()) continue;
                    for (const instanceToAddSibling of instanceToAdd.siblings()) {
                        if (instances.includes(instanceToAddSibling)) continue;
                        const siblingAndChildren = [...instanceToAddSibling.allChildren()];
                        siblingAndChildren.push(instanceToAddSibling);
                        siblingAndChildren.sort((f, s) => {
                            const firstZIndex = f.GetWorldInfo().GetSceneGraphZIndex();
                            const secondZIndex = s.GetWorldInfo().GetSceneGraphZIndex();
                            return firstZIndex - secondZIndex
                        });
                        if (!siblingAndChildren || !siblingAndChildren.length) continue;
                        instances.splice(instances.length, 0, ...siblingAndChildren)
                    }
                }
                for (const instance of instances)
                    if (instance.GetPlugin().IsWorldType()) this._AddInstance(instance,
                        true)
            } else {
                if (inst.GetPlugin().IsWorldType()) this._AddInstance(inst, true);
                if (!inst.IsInContainer()) return;
                for (const sibling of inst.siblings()) {
                    const siblingAndChildren = [...sibling.allChildren()];
                    siblingAndChildren.push(sibling);
                    siblingAndChildren.sort((f, s) => {
                        const firstZIndex = f.GetWorldInfo().GetSceneGraphZIndex();
                        const secondZIndex = s.GetWorldInfo().GetSceneGraphZIndex();
                        return firstZIndex - secondZIndex
                    });
                    if (!siblingAndChildren || !siblingAndChildren.length) continue;
                    for (const instance of siblingAndChildren)
                        if (instance.GetPlugin().IsWorldType()) this._AddInstance(instance,
                            true)
                }
            }
        }
    };

}

// layouts/layout.js
{
    'use strict';
    const C3 = self.C3;
    const C3Debugger = self.C3Debugger;
    const assert = self.assert;
    const tempDestRect = C3.New(C3.Rect);
    const tempSrcRect = C3.New(C3.Rect);
    const tempLayoutRect = C3.New(C3.Rect);
    const tempColor = C3.New(C3.Color);
    const glMatrix = self.glMatrix;
    const vec3 = glMatrix.vec3;
    const tempRender3dList = [];
    const tempInstanceList1 = [];
    const tempInstanceList2 = [];
    const tempInstanceList3 = [];

    function vec3EqualsXYZ(v, x, y, z) {
        return v[0] === Math.fround(x) && v[1] === Math.fround(y) && v[2] === Math.fround(z)
    }
    let lastLayerPreparedForDrawing = null;

    function MaybePrepareLayerDraw(layer, renderer) {
        if (lastLayerPreparedForDrawing === layer) return;
        layer.PrepareForDraw(renderer);
        lastLayerPreparedForDrawing = layer
    }
    C3.Layout = class Layout extends C3.DefendedBase {
        constructor(layoutManager, index, data) {
            super();
            this._layoutManager = layoutManager;
            this._runtime = layoutManager.GetRuntime();
            this._name = data[0];
            this._originalWidth = data[1];
            this._originalHeight = data[2];
            this._width = data[1];
            this._height = data[2];
            this._isUnboundedScrolling = !!data[3];
            this._isOrthographicProjection = !!data[4];
            this._vanishingPointX = data[5];
            this._vanishingPointY = data[6];
            this._eventSheetName = data[7];
            this._eventSheet = null;
            this._sid = data[8];
            this._index =
                index;
            this._scrollX = 0;
            this._scrollY = 0;
            this._scale = 1;
            this._angle = 0;
            this._initialObjectClasses = new Set;
            this._textureLoadedTypes = new Set;
            this._textureLoadPendingPromises = new Set;
            this._createdInstances = [];
            this._createdPersistedInstances = [];
            this._createdPersistedInstancesToDataMap = new Map;
            this._createdPersistedIndexToInstanceMap = new Map;
            this._initialNonWorld = [];
            this._is3dCameraEnabled = false;
            this._cam3dposition = vec3.create();
            this._cam3dlook = vec3.create();
            this._cam3dup = vec3.create();
            this._rootLayers = [];
            this._allLayersFlat = [];
            this._layersByName = new Map;
            this._layersBySid = new Map;
            const canvasManager = this._runtime.GetCanvasManager();
            this._effectList = C3.New(C3.EffectList, this, data[11]);
            this._effectChain = C3.New(C3.Gfx.EffectChain, canvasManager.GetEffectChainManager(), {
                drawContent: (renderer, effectChain) => {
                    const layout = effectChain.GetContentObject();
                    const renderSurface = layout.GetRenderTarget();
                    renderer.ResetColor();
                    renderer.DrawRenderTarget(renderSurface);
                    renderer.InvalidateRenderTarget(renderSurface);
                    canvasManager.ReleaseAdditionalRenderTarget(renderSurface)
                },
                getShaderParameters: index => this.GetEffectList()._GetEffectChainShaderParametersForIndex(index)
            });
            this._needsRebuildEffectChainSteps = true;
            this._wasFullScreenQualityLow = false;
            this._curRenderTarget = null;
            this._persistData = {};
            this._persistedIntances = new Map;
            this._isFirstVisit = true;
            this._iLayout = new self.ILayout(this);
            this._userScriptDispatcher = C3.New(C3.Event.Dispatcher);
            for (const layerData of data[9]) this._rootLayers.push(C3.New(C3.Layer, this,
                null, layerData));
            this._allLayersFlat = [...this.allLayers()];
            for (let i = 0, len = this._allLayersFlat.length; i < len; ++i) {
                const layer = this._allLayersFlat[i];
                layer._SetIndex(i);
                layer._Init();
                this._layersByName.set(layer.GetName().toLowerCase(), layer);
                this._layersBySid.set(layer.GetSID(), layer)
            }
            for (const instData of data[10]) {
                const objectClass = this._runtime.GetObjectClassByIndex(instData[1]);
                if (!objectClass) throw new Error("missing nonworld object class");
                if (!objectClass.GetDefaultInstanceData()) objectClass.SetDefaultInstanceData(instData);
                this._initialNonWorld.push(instData);
                this._AddInitialObjectClass(objectClass)
            }
        }
        Release() {
            for (const l of this._allLayersFlat) l.Release();
            C3.clearArray(this._allLayersFlat);
            this._textureLoadPendingPromises.clear();
            this._eventSheet = null;
            this._layoutManager = null;
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetIndex() {
            return this._index
        }
        GetEffectList() {
            return this._effectList
        }
        GetEffectChain() {
            this._MaybeRebuildEffectChainSteps();
            return this._effectChain
        }
        _MaybeRebuildEffectChainSteps() {
            const isFullscreenQualityLow =
                this._runtime.GetCanvasManager().GetCurrentFullscreenScalingQuality() === "low";
            if (!this._needsRebuildEffectChainSteps && this._wasFullScreenQualityLow === isFullscreenQualityLow && !this._effectChain.NeedsRebuild()) return;
            const activeEffectTypes = this.GetEffectList().GetActiveEffectTypes();
            this._effectChain.BuildSteps(activeEffectTypes.map(e => e.GetShaderProgram()), {
                indexMap: activeEffectTypes.map(e => e.GetIndex()),
                forcePostDraw: isFullscreenQualityLow,
                useFullSurface: true
            });
            this._needsRebuildEffectChainSteps =
                false;
            this._wasFullScreenQualityLow = isFullscreenQualityLow
        }
        UpdateActiveEffects() {
            this.GetEffectList().UpdateActiveEffects();
            this._needsRebuildEffectChainSteps = true
        }
        GetMinLayerScale() {
            let m = this._allLayersFlat[0].GetNormalScale();
            for (let i = 1, len = this._allLayersFlat.length; i < len; ++i) {
                const layer = this._allLayersFlat[i];
                if (layer.GetParallaxX() === 0 && layer.GetParallaxY() === 0) continue;
                m = Math.min(m, layer.GetNormalScale())
            }
            return m
        }
        _GetScrollBoundMarginHorizontal() {
            return .5 * this._runtime.GetViewportWidth() /
                this.GetMinLayerScale()
        }
        _GetScrollBoundMarginVertical() {
            return .5 * this._runtime.GetViewportHeight() / this.GetMinLayerScale()
        }
        GetScrollLeftBound() {
            if (this.IsUnboundedScrolling()) return -Infinity;
            else return this._GetScrollBoundMarginHorizontal()
        }
        GetScrollRightBound() {
            if (this.IsUnboundedScrolling()) return Infinity;
            else return this.GetWidth() - this._GetScrollBoundMarginHorizontal()
        }
        GetScrollTopBound() {
            if (this.IsUnboundedScrolling()) return -Infinity;
            else return this._GetScrollBoundMarginVertical()
        }
        GetScrollBottomBound() {
            if (this.IsUnboundedScrolling()) return Infinity;
            else return this.GetHeight() - this._GetScrollBoundMarginVertical()
        }
        SetScrollX(x) {
            const lbound = this.GetScrollLeftBound();
            const rbound = this.GetScrollRightBound();
            if (x > rbound) x = rbound;
            if (x < lbound) x = lbound;
            if (this._scrollX !== x) {
                this._scrollX = x;
                this._SetAllLayersMVChanged();
                this._runtime.UpdateRender()
            }
        }
        GetScrollX() {
            return this._scrollX
        }
        SetScrollY(y) {
            const ubound = this.GetScrollTopBound();
            const bbound = this.GetScrollBottomBound();
            if (y > bbound) y = bbound;
            if (y < ubound) y = ubound;
            if (this._scrollY !== y) {
                this._scrollY =
                    y;
                this._SetAllLayersMVChanged();
                this._runtime.UpdateRender()
            }
        }
        GetScrollY() {
            return this._scrollY
        }
        IsUnboundedScrolling() {
            return this._isUnboundedScrolling
        }
        BoundScrolling() {
            this.SetScrollX(this.GetScrollX());
            this.SetScrollY(this.GetScrollY());
            for (const layer of this._allLayersFlat)
                if (layer.IsOwnScrollPositionEnabled()) {
                    layer.SetScrollX(layer.GetScrollX());
                    layer.SetScrollY(layer.GetScrollY())
                }
        }
        SetVanishingPointXY(vpX, vpY) {
            if (this._vanishingPointX === vpX && this._vanishingPointY === vpY) return;
            this._vanishingPointX =
                vpX;
            this._vanishingPointY = vpY;
            if (this.IsPerspectiveProjection()) {
                this._SetAllLayersProjectionChanged();
                this._SetAllLayersMVChanged();
                this._runtime.UpdateRender()
            }
        }
        GetVanishingPointX() {
            if (this.IsOrthographicProjection()) return .5;
            else return this._vanishingPointX
        }
        GetVanishingPointY() {
            if (this.IsOrthographicProjection()) return .5;
            else return this._vanishingPointY
        }
        HasVanishingPointOutsideViewport() {
            const vpX = this.GetVanishingPointX();
            const vpY = this.GetVanishingPointY();
            return vpX < 0 || vpX > 1 || vpY < 0 || vpY > 1
        }
        SetPerspectiveProjection() {
            if (!this._isOrthographicProjection) return;
            this._isOrthographicProjection = false;
            this._SetAllLayersProjectionChanged();
            this._SetAllLayersMVChanged();
            this._runtime.UpdateRender()
        }
        SetOrthographicProjection() {
            if (this._isOrthographicProjection) return;
            this._isOrthographicProjection = true;
            this._SetAllLayersProjectionChanged();
            this._SetAllLayersMVChanged();
            this._runtime.UpdateRender()
        }
        IsOrthographicProjection() {
            return this._isOrthographicProjection
        }
        IsPerspectiveProjection() {
            return !this.IsOrthographicProjection()
        }
        Set3DCameraEnabled(e) {
            e = !!e;
            if (this._is3dCameraEnabled ===
                e) return;
            this._is3dCameraEnabled = e;
            this._SetAllLayersMVChanged();
            this._runtime.UpdateRender()
        }
        Is3DCameraEnabled() {
            return this._is3dCameraEnabled
        }
        Set3DCameraOrientation(camX, camY, camZ, lookX, lookY, lookZ, upX, upY, upZ) {
            if (vec3EqualsXYZ(this._cam3dposition, camX, camY, camZ) && vec3EqualsXYZ(this._cam3dlook, lookX, lookY, lookZ) && vec3EqualsXYZ(this._cam3dup, upX, upY, upZ)) return;
            vec3.set(this._cam3dposition, camX, camY, camZ);
            vec3.set(this._cam3dlook, lookX, lookY, lookZ);
            vec3.set(this._cam3dup, upX, upY, upZ);
            this.Set3DCameraChanged()
        }
        Set3DCameraChanged() {
            this._SetAllLayersMVChanged();
            this._runtime.UpdateRender()
        }
        Get3DCameraPosition() {
            return this._cam3dposition
        }
        Get3DCameraLookAt() {
            return this._cam3dlook
        }
        Get3DCameraUpVector() {
            return this._cam3dup
        }
        GetScale() {
            return this._scale
        }
        SetScale(s) {
            if (this._scale === s) return;
            this._scale = s;
            this._SetAllLayersMVChanged();
            this.BoundScrolling();
            this._runtime.UpdateRender()
        }
        SetAngle(a) {
            a = C3.clampAngle(a);
            if (this._angle === a) return;
            this._angle = a;
            this._SetAllLayersMVChanged();
            this._runtime.UpdateRender()
        }
        GetAngle() {
            return this._angle
        }
        GetWidth() {
            return this._width
        }
        SetWidth(w) {
            if (!isFinite(w) ||
                w < 1) return;
            this._width = w
        }
        GetHeight() {
            return this._height
        }
        SetHeight(h) {
            if (!isFinite(h) || h < 1) return;
            this._height = h
        }
        GetEventSheet() {
            return this._eventSheet
        }* allLayers() {
            for (const rootLayer of this._rootLayers) yield* rootLayer.selfAndAllSubLayers()
        }
        GetLayers() {
            return this._allLayersFlat
        }
        GetLayerCount() {
            return this._allLayersFlat.length
        }
        GetLayer(p) {
            if (typeof p === "number") return this.GetLayerByIndex(p);
            else return this.GetLayerByName(p.toString())
        }
        GetLayerByIndex(i) {
            i = C3.clamp(Math.floor(i), 0, this._allLayersFlat.length -
                1);
            return this._allLayersFlat[i]
        }
        GetLayerByName(name) {
            return this._layersByName.get(name.toLowerCase()) || null
        }
        GetLayerBySID(sid) {
            return this._layersBySid.get(sid) || null
        }
        _SetAllLayersProjectionChanged() {
            for (const layer of this._allLayersFlat) layer._SetProjectionMatrixChanged()
        }
        _SetAllLayersMVChanged() {
            for (const layer of this._allLayersFlat) layer._SetMVMatrixChanged()
        }
        SaveTransform() {
            return {
                "scrollX": this.GetScrollX(),
                "scrollY": this.GetScrollY(),
                "scale": this.GetScale(),
                "angle": this.GetAngle(),
                "vpX": this.GetVanishingPointX(),
                "vpY": this.GetVanishingPointY()
            }
        }
        RestoreTransform(t) {
            this.SetScrollX(t["scrollX"]);
            this.SetScrollY(t["scrollY"]);
            this.SetScale(t["scale"]);
            this.SetAngle(t["angle"]);
            this.SetVanishingPointXY(t["vpX"], t["vpY"])
        }
        GetLayoutBackgroundColor() {
            let firstDrawLayer = this._rootLayers.filter(l => l.ShouldDraw())[0];
            while (firstDrawLayer) {
                if (!firstDrawLayer.IsTransparent()) {
                    tempColor.copyRgb(firstDrawLayer.GetBackgroundColor());
                    tempColor.setA(1);
                    return tempColor
                } else if (firstDrawLayer.UsesOwnTexture()) {
                    tempColor.setRgba(0,
                        0, 0, 0);
                    return tempColor
                }
                firstDrawLayer = firstDrawLayer.GetSubLayers().filter(l => l.ShouldDraw())[0]
            }
            tempColor.setRgba(0, 0, 0, 0);
            return tempColor
        }
        IsFirstVisit() {
            return this._isFirstVisit
        }
        _GetInitialObjectClasses() {
            return [...this._initialObjectClasses]
        }
        _AddInitialObjectClass(objectClass) {
            if (objectClass.IsInContainer())
                for (const containerType of objectClass.GetContainer().GetObjectTypes()) this._initialObjectClasses.add(containerType);
            else this._initialObjectClasses.add(objectClass)
        }
        _GetTextureLoadedObjectTypes() {
            return [...this._textureLoadedTypes]
        }
        _Load(previousLayout,
            renderer) {
            if (previousLayout === this || !renderer) return Promise.resolve();
            if (previousLayout) {
                C3.CopySet(this._textureLoadedTypes, previousLayout._textureLoadedTypes);
                previousLayout._textureLoadedTypes.clear()
            }
            const promises = [];
            for (const oc of this._initialObjectClasses)
                if (!this._textureLoadedTypes.has(oc)) {
                    promises.push(oc.LoadTextures(renderer));
                    this._textureLoadedTypes.add(oc)
                }
            return Promise.all(promises)
        }
        async MaybeLoadTexturesFor(objectClass) {
            if (objectClass.IsFamily()) throw new Error("cannot load textures for family");
            const renderer = this._runtime.GetRenderer();
            if (!renderer || renderer.IsContextLost() || this._textureLoadedTypes.has(objectClass)) return;
            this._textureLoadedTypes.add(objectClass);
            const loadPromise = objectClass.LoadTextures(renderer);
            this._AddPendingTextureLoadPromise(loadPromise);
            await loadPromise;
            objectClass.OnDynamicTextureLoadComplete();
            this._runtime.UpdateRender()
        }
        _AddPendingTextureLoadPromise(promise) {
            this._textureLoadPendingPromises.add(promise);
            promise.then(() => this._textureLoadPendingPromises.delete(promise)).catch(() =>
                this._textureLoadPendingPromises.delete(promise))
        }
        WaitForPendingTextureLoadsToComplete() {
            return Promise.all([...this._textureLoadPendingPromises])
        }
        MaybeUnloadTexturesFor(objectClass) {
            if (objectClass.IsFamily() || objectClass.GetInstanceCount() > 0) throw new Error("cannot unload textures");
            const renderer = this._runtime.GetRenderer();
            if (!renderer || !this._textureLoadedTypes.has(objectClass)) return;
            this._textureLoadedTypes.delete(objectClass);
            objectClass.ReleaseTextures(renderer)
        }
        _Unload(nextLayout, renderer) {
            if (nextLayout ===
                this || !renderer) return;
            for (const oc of this._textureLoadedTypes)
                if (!oc.IsGlobal() && !nextLayout._initialObjectClasses.has(oc)) {
                    oc.ReleaseTextures();
                    this._textureLoadedTypes.delete(oc)
                }
        }
        _OnRendererContextLost() {
            this._textureLoadedTypes.clear()
        }
        async _StartRunning(isFirstLayout) {
            const runtime = this._runtime;
            const layoutManager = this._layoutManager;
            const eventSheetManager = runtime.GetEventSheetManager();
            if (this._eventSheetName) {
                this._eventSheet = eventSheetManager.GetEventSheetByName(this._eventSheetName);
                this._eventSheet._UpdateDeepIncludes()
            }
            layoutManager._SetMainRunningLayout(this);
            this._width = this._originalWidth;
            this._height = this._originalHeight;
            this._scrollX = runtime.GetOriginalViewportWidth() / 2;
            this._scrollY = runtime.GetOriginalViewportHeight() / 2;
            this.BoundScrolling();
            this._SetAllLayersProjectionChanged();
            this._SetAllLayersMVChanged();
            this._MoveGlobalObjectsToThisLayout(isFirstLayout);
            this._runtime.SetUsingCreatePromises(true);
            this._CreateInitialInstances();
            if (!this._isFirstVisit) this._CreatePersistedInstances();
            this._CreateAndLinkContainerInstances(this._createdInstances);
            this._CreateAndLinkContainerInstances(this._createdPersistedInstances);
            this._CreateInitialNonWorldInstances();
            layoutManager.ClearPendingChangeLayout();
            runtime.FlushPendingInstances();
            this._runtime.SetUsingCreatePromises(false);
            const createPromises = this._runtime.GetCreatePromises();
            await Promise.all(createPromises);
            C3.clearArray(createPromises);
            if (!runtime.IsLoadingState()) {
                for (const inst of this._createdInstances) inst.SetupInitialSceneGraphConnections();
                for (const inst of this._createdPersistedInstances) inst.SetupPersistedSceneGraphConnections(this._createdPersistedInstancesToDataMap, this._createdPersistedIndexToInstanceMap);
                for (const [sidStr, typeData] of Object.entries(this._persistData)) {
                    const objectClass = this._runtime.GetObjectClassBySID(parseInt(sidStr, 10));
                    if (!objectClass || objectClass.IsFamily() || !objectClass.HasPersistBehavior()) continue;
                    C3.clearArray(typeData)
                }
                for (const inst of this._createdInstances) inst._TriggerOnCreated();
                for (const inst of this._createdPersistedInstances) inst._TriggerOnCreated()
            }
            C3.clearArray(this._createdInstances);
            C3.clearArray(this._createdPersistedInstances);
            this._createdPersistedInstancesToDataMap.clear();
            this._createdPersistedIndexToInstanceMap.clear();
            await Promise.all([...this._initialObjectClasses].map(oc => oc.PreloadTexturesWithInstances(this._runtime.GetRenderer())));
            if (isFirstLayout) {
                runtime.Dispatcher().dispatchEvent(new C3.Event("beforefirstlayoutstart"));
                await runtime.DispatchUserScriptEventAsyncWait(new C3.Event("beforeprojectstart"))
            }
            runtime.Dispatcher().dispatchEvent(new C3.Event("beforelayoutstart"));
            await this.DispatchUserScriptEventAsyncWait(new C3.Event("beforelayoutstart"));
            if (!runtime.IsLoadingState()) await runtime.TriggerAsync(C3.Plugins.System.Cnds.OnLayoutStart, null, null);
            runtime.Dispatcher().dispatchEvent(new C3.Event("afterlayoutstart"));
            await this.DispatchUserScriptEventAsyncWait(new C3.Event("afterlayoutstart"));
            if (isFirstLayout) {
                runtime.Dispatcher().dispatchEvent(new C3.Event("afterfirstlayoutstart"));
                await runtime.DispatchUserScriptEventAsyncWait(new C3.Event("afterprojectstart"))
            }
            eventSheetManager._RunQueuedTriggers(layoutManager);
            await this.WaitForPendingTextureLoadsToComplete();
            this._isFirstVisit = false
        }
        _MoveGlobalObjectsToThisLayout(isFirstLayout) {
            for (const objectClass of this._runtime.GetAllObjectClasses()) {
                if (objectClass.IsFamily() || !objectClass.IsWorldType()) continue;
                for (const inst of objectClass.GetInstances()) {
                    const wi = inst.GetWorldInfo();
                    const oldLayer = wi.GetLayer();
                    const layerIndex = C3.clamp(oldLayer.GetIndex(), 0, this._allLayersFlat.length - 1);
                    const newLayer = this._allLayersFlat[layerIndex];
                    wi._SetLayer(newLayer);
                    newLayer._MaybeAddInstance(inst)
                }
            }
            if (!isFirstLayout)
                for (const layer of this._allLayersFlat) layer._SortInstancesByLastCachedZIndex(false)
        }
        _CreateInitialInstances() {
            for (const layer of this._allLayersFlat) {
                layer.CreateInitialInstances(this._createdInstances);
                layer._Start()
            }
        }
        _CreatePersistedInstances() {
            let uidsChanged = false;
            for (const [sidStr, typeData] of Object.entries(this._persistData)) {
                const objectClass = this._runtime.GetObjectClassBySID(parseInt(sidStr, 10));
                if (!objectClass || objectClass.IsFamily() || !objectClass.HasPersistBehavior()) continue;
                for (const instData of typeData) {
                    let layer = null;
                    if (objectClass.IsWorldType()) {
                        if (instData.hasOwnProperty("instJson")) layer = this.GetLayerBySID(instData["instJson"]["w"]["l"]);
                        else layer = this.GetLayerBySID(instData["w"]["l"]);
                        if (!layer) continue
                    }
                    const inst = this._runtime.CreateInstanceFromData(objectClass, layer, false, 0, 0, true);
                    if (instData.hasOwnProperty("instJson")) inst.LoadFromJson(instData["instJson"]);
                    else inst.LoadFromJson(instData);
                    uidsChanged = true;
                    this._createdPersistedInstances.push(inst);
                    if (instData.hasOwnProperty("instJson")) {
                        this._createdPersistedInstancesToDataMap.set(inst, instData);
                        this._createdPersistedIndexToInstanceMap.set(instData["index"], inst)
                    }
                }
            }
            for (const layer of this._allLayersFlat) {
                layer._SortInstancesByLastCachedZIndex(true);
                layer.SetZIndicesChanged()
            }
            if (uidsChanged) {
                this._runtime.FlushPendingInstances();
                this._runtime._RefreshUidMap()
            }
        }
        _CreateAndLinkContainerInstances(createdInstances) {
            for (const inst of createdInstances) {
                if (!inst.IsInContainer()) continue;
                const wi = inst.GetWorldInfo();
                const iid = inst.GetIID();
                for (const containerType of inst.GetObjectClass().GetContainer().objectTypes()) {
                    if (containerType === inst.GetObjectClass()) continue;
                    const instances = containerType.GetInstances();
                    if (instances.length > iid) inst._AddSibling(instances[iid]);
                    else {
                        let s;
                        if (wi) s = this._runtime.CreateInstanceFromData(containerType, wi.GetLayer(), true, wi.GetX(), wi.GetY(), true);
                        else s = this._runtime.CreateInstanceFromData(containerType, null, true, 0, 0, true);
                        this._runtime.FlushPendingInstances();
                        containerType._UpdateIIDs();
                        inst._AddSibling(s);
                        createdInstances.push(s)
                    }
                }
            }
        }
        _CreateInitialNonWorldInstances() {
            for (const instData of this._initialNonWorld) {
                const objectClass = this._runtime.GetObjectClassByIndex(instData[1]);
                if (!objectClass.IsInContainer()) this._runtime.CreateInstanceFromData(instData,
                    null, true)
            }
        }
        _CreateGlobalNonWorlds() {
            const createdInstances = [];
            const initialNonWorld = this._initialNonWorld;
            let k = 0;
            for (let i = 0, len = initialNonWorld.length; i < len; ++i) {
                const instData = initialNonWorld[i];
                const objectClass = this._runtime.GetObjectClassByIndex(instData[1]);
                if (objectClass.IsGlobal()) {
                    if (!objectClass.IsInContainer() || !objectClass.GetContainer().HasAnyWorldType()) createdInstances.push(this._runtime.CreateInstanceFromData(instData, null, true))
                } else {
                    initialNonWorld[k] = instData;
                    ++k
                }
            }
            C3.truncateArray(initialNonWorld,
                k);
            this._runtime.FlushPendingInstances();
            this._CreateAndLinkContainerInstances(createdInstances)
        }
        RecreateInitialObjects(objectClass, rc, srcLayer, offsetX, offsetY, createHierarchy) {
            if (srcLayer) return srcLayer.RecreateInitialObjects(objectClass, rc, offsetX, offsetY, createHierarchy);
            else {
                const ret = [];
                for (const layer of this._allLayersFlat) ret.push(layer.RecreateInitialObjects(objectClass, rc, offsetX, offsetY, createHierarchy));
                return ret.flat()
            }
        }
        async _StopRunning() {
            const layoutManager = this._layoutManager;
            if (!this._runtime.IsLoadingState()) {
                await this.DispatchUserScriptEventAsyncWait(new C3.Event("beforelayoutend"));
                await this._runtime.TriggerAsync(C3.Plugins.System.Cnds.OnLayoutEnd, null, null);
                await this.DispatchUserScriptEventAsyncWait(new C3.Event("afterlayoutend"))
            }
            layoutManager.SetIsEndingLayout(true);
            this._runtime.GetEventSheetManager().ClearAllScheduledWaits();
            if (!this._isFirstVisit) this._SavePersistData();
            for (const layer of this._allLayersFlat) layer._End();
            for (const objectClass of this._runtime.GetAllObjectClasses()) {
                if (objectClass.IsGlobal() || objectClass.IsWorldType() || objectClass.GetPlugin().IsSingleGlobal() ||
                    objectClass.IsFamily()) continue;
                for (const inst of objectClass.GetInstances()) this._runtime.DestroyInstance(inst);
                this._runtime.FlushPendingInstances()
            }
            layoutManager.SetIsEndingLayout(false);
            if (layoutManager.GetMainRunningLayout() === this) layoutManager._SetMainRunningLayout(null)
        }
        _SaveInstanceToPersist(inst, index) {
            const sidStr = inst.GetObjectClass().GetSID().toString();
            if (!this._persistData.hasOwnProperty(sidStr)) this._persistData[sidStr] = [];
            const typePersist = this._persistData[sidStr];
            const persistData = {
                "index": index,
                "instJson": inst.SaveToJson(),
                "sceneGraphJson": {
                    "children": []
                }
            };
            typePersist.push(persistData);
            this._persistedIntances.set(inst, persistData)
        }
        _SaveSceneGraphInfoToPersist(inst) {
            const persistData = this._persistedIntances.get(inst);
            for (const child of inst.GetChildren()) {
                const childPersistData = this._persistedIntances.get(child);
                if (childPersistData) persistData["sceneGraphJson"]["children"].push({
                    "index": childPersistData["index"],
                    "flags": C3.SceneGraphInfo._GetFlagsNumber(child.GetWorldInfo())
                })
            }
        }
        _SavePersistData() {
            this._persistedIntances.clear();
            let persisDataIndex = 0;
            for (const layer of this._allLayersFlat) {
                layer._UpdateZIndices();
                for (const inst of layer._GetInstances()) {
                    const objectClass = inst.GetObjectClass();
                    if (!objectClass.IsGlobal() && objectClass.HasPersistBehavior()) {
                        this._SaveInstanceToPersist(inst, persisDataIndex);
                        persisDataIndex++
                    }
                }
            }
            for (const layer of this._allLayersFlat)
                for (const inst of layer._GetInstances()) {
                    const objectClass = inst.GetObjectClass();
                    if (!objectClass.IsGlobal() && objectClass.HasPersistBehavior()) this._SaveSceneGraphInfoToPersist(inst)
                }
            this._persistedIntances.clear()
        }
        ResetPersistData() {
            this._persistData = {};
            this._isFirstVisit = true
        }
        GetRenderTarget() {
            return this._curRenderTarget
        }
        UsesOwnTexture() {
            const runtime = this._runtime;
            const isWebGL = runtime.GetRenderer().IsWebGL();
            return runtime.GetCanvasManager().GetCurrentFullscreenScalingQuality() === "low" || isWebGL && runtime.UsesAnyBackgroundBlending() || runtime.GetCompositingMode() === "low-latency" || this._effectList.HasAnyActiveEffect() || isWebGL && runtime.Uses3DFeatures()
        }
        Draw(renderer) {
            const canvasManager = this._runtime.GetCanvasManager();
            const useOwnTexture = this.UsesOwnTexture();
            if (useOwnTexture) {
                if (this._runtime.GetCompositingMode() !== "low-latency") {
                    renderer.SetRenderTarget(null);
                    renderer.ClearRgba(0, 0, 0, 0)
                }
                const rtOpts = {
                    sampling: this._runtime.GetSampling(),
                    isSampled: renderer.IsWebGPU() || this._runtime.UsesAnyBackgroundBlending() || this._effectList.HasAnyActiveEffect(),
                    canReadPixels: renderer.IsWebGPU() ? this._runtime.UsesAnyBackgroundBlending() : false
                };
                if (canvasManager.GetCurrentFullscreenScalingQuality() === "low") {
                    rtOpts.width = canvasManager.GetDrawWidth();
                    rtOpts.height = canvasManager.GetDrawHeight()
                }
                this._curRenderTarget =
                    this._runtime.GetAdditionalRenderTarget(rtOpts)
            } else this._curRenderTarget = null;
            renderer.SetRenderTarget(this._curRenderTarget);
            renderer.Clear(this.GetLayoutBackgroundColor());
            if (this._runtime.Uses3DFeatures()) renderer.ClearDepth();
            this._DrawLayerList(renderer, this._curRenderTarget, this._rootLayers, true);
            if (useOwnTexture) {
                renderer.SetDepthEnabled(false);
                this._DrawLayoutOwnTextureToRenderTarget(renderer, this._curRenderTarget)
            }
            this._curRenderTarget = null
        }
        _DrawLayerList(renderer, destRenderTarget, layersArr,
            canCopyFirstLayer) {
            const layersToDraw = layersArr.filter(l => l.ShouldDraw());
            for (let i = 0, len = layersToDraw.length; i < len;) {
                const layer = layersToDraw[i];
                if (layer.SelfAndAllSubLayersHave3DCamera() && !layer.SelfOrAnySubLayerUsesOwnTexture()) {
                    tempRender3dList.push(layer);
                    for (let j = i + 1; j < len; ++j) {
                        const nextLayer = layersToDraw[j];
                        if (nextLayer.SelfAndAllSubLayersHave3DCamera() && !nextLayer.SelfOrAnySubLayerUsesOwnTexture()) tempRender3dList.push(layersToDraw[j]);
                        else break
                    }
                    if (tempRender3dList.length >= 2 || tempRender3dList.length ===
                        1 && tempRender3dList[0].HasAnyVisibleSubLayer()) {
                        this._Draw3DLayers(renderer, destRenderTarget, tempRender3dList);
                        i += tempRender3dList.length;
                        C3.clearArray(tempRender3dList);
                        continue
                    }
                    C3.clearArray(tempRender3dList)
                }
                layer.Draw(renderer, destRenderTarget, canCopyFirstLayer && i === 0);
                ++i
            }
        }
        _DrawLayoutOwnTextureToRenderTarget(renderer, ownRenderTarget) {
            const activeEffectTypes = this._effectList.GetActiveEffectTypes();
            const runtime = this._runtime;
            if (activeEffectTypes.length === 0) {
                renderer.SetRenderTarget(null);
                renderer.SetTextureFillMode();
                renderer.CopyRenderTarget(ownRenderTarget);
                renderer.InvalidateRenderTarget(ownRenderTarget);
                runtime.ReleaseAdditionalRenderTarget(ownRenderTarget)
            } else {
                tempLayoutRect.set(0, 0, runtime.GetViewportWidth(), runtime.GetViewportHeight());
                this.GetEffectChain().Render(renderer, null, {
                    contentObject: this,
                    blendMode: 3,
                    devicePixelRatio: this._runtime.GetEffectDevicePixelRatioParam(),
                    layerScale: this._runtime.GetEffectLayerScaleParam() * this.GetScale(),
                    layerAngle: this.GetAngle(),
                    layoutRect: tempLayoutRect,
                    drawSurfaceRect: null,
                    invalidateRenderTargets: true
                })
            }
        }
        _Draw3DLayers(renderer, renderTarget, layerList) {
            if (!layerList[0].IsTransparent()) {
                tempColor.copyRgb(layerList[0].GetBackgroundColor());
                tempColor.setA(1);
                renderer.Clear(tempColor)
            }
            const canvasManager = this._runtime.GetCanvasManager();
            renderer.SetDepthEnabled(true);
            const fullInstanceList = tempInstanceList1;
            const coplanarInstances = tempInstanceList2;
            const postRenderInstances = tempInstanceList3;
            for (const layer of layerList) {
                layer._UpdateZIndices();
                layer._AppendAllInstancesIncludingSubLayersInDrawOrder(fullInstanceList)
            }
            const firstLayer =
                layerList[0];
            let layerQuery = null;
            if (this._runtime.IsGPUProfiling())
                if (renderer.IsWebGL()) {
                    const timingsBuffer = canvasManager.GetLayerTimingsBuffer(firstLayer);
                    if (timingsBuffer) {
                        layerQuery = timingsBuffer.AddTimeElapsedQuery();
                        renderer.StartQuery(layerQuery)
                    }
                } else if (renderer.IsWebGPU()) renderer.WriteTimestamp((firstLayer.GetIndex() + 1) * 2);
            for (let i = 0, len = fullInstanceList.length; i < len;) {
                const inst = fullInstanceList[i];
                const wi = inst.GetWorldInfo();
                const wiLayer = wi.GetLayer();
                if (!wi.IsVisible() || !wi.IsInViewport3D(wiLayer._GetViewFrustum())) {
                    ++i;
                    continue
                }
                if (!inst.RendersToOwnZPlane() || wi.GetDepth() > 0) postRenderInstances.push(inst);
                const startZ = inst.GetWorldInfo().GetTotalZElevation();
                coplanarInstances.push(inst);
                let endIndex = i + 1;
                for (; endIndex < len; ++endIndex) {
                    const nextInst = fullInstanceList[endIndex];
                    const nextWi = nextInst.GetWorldInfo();
                    if (!nextWi.IsVisible() || !nextWi.IsInViewport3D(nextWi.GetLayer()._GetViewFrustum())) continue;
                    if (nextWi.GetTotalZElevation() !== startZ) break;
                    if (!nextInst.RendersToOwnZPlane()) {
                        postRenderInstances.push(nextInst);
                        continue
                    }
                    if (nextWi.GetDepth() > 0) postRenderInstances.push(nextInst);
                    coplanarInstances.push(nextInst)
                }
                if (coplanarInstances.length === 1 && !coplanarInstances[0].MustMitigateZFighting()) {
                    MaybePrepareLayerDraw(wiLayer, renderer);
                    wiLayer._DrawInstanceMaybeWithEffects(inst, wi, renderer, renderTarget);
                    for (let j = 0, lenj = postRenderInstances.length; j < lenj; ++j) {
                        const postInst = postRenderInstances[j];
                        if (postInst === inst) continue;
                        const postWi = postInst.GetWorldInfo();
                        const postWiLayer = postWi.GetLayer();
                        MaybePrepareLayerDraw(postWiLayer,
                            renderer);
                        postWiLayer._DrawInstanceMaybeWithEffects(postInst, postWi, renderer, renderTarget)
                    }
                } else {
                    this._Draw3DLayersCoplanarInstances(renderer, renderTarget, coplanarInstances);
                    for (let j = 0, lenj = postRenderInstances.length; j < lenj; ++j) {
                        const postInst = postRenderInstances[j];
                        const postWi = postInst.GetWorldInfo();
                        const postWiLayer = postWi.GetLayer();
                        postWi._SetDrawNonBackFacesOnly(true);
                        MaybePrepareLayerDraw(postWiLayer, renderer);
                        postWiLayer._DrawInstanceMaybeWithEffects(postInst, postWi, renderer, renderTarget);
                        postWi._SetDrawNonBackFacesOnly(false)
                    }
                }
                i = endIndex;
                C3.clearArray(coplanarInstances);
                C3.clearArray(postRenderInstances)
            }
            if (layerQuery) renderer.EndQuery(layerQuery);
            if (this._runtime.IsGPUProfiling() && renderer.IsWebGPU()) renderer.WriteTimestamp((firstLayer.GetIndex() + 1) * 2 + 1);
            C3.clearArray(fullInstanceList);
            lastLayerPreparedForDrawing = null
        }
        _Draw3DLayersCoplanarInstances(renderer, renderTarget, instances) {
            renderer.CoplanarStartStencilPass();
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst = instances[i];
                const wi = inst.GetWorldInfo();
                const layer = wi.GetLayer();
                wi._SetDrawBackFaceOnly(true);
                MaybePrepareLayerDraw(layer, renderer);
                layer._DrawInstance(inst, wi, renderer)
            }
            renderer.CoplanarStartColorPass();
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst = instances[i];
                const wi = inst.GetWorldInfo();
                const layer = wi.GetLayer();
                MaybePrepareLayerDraw(layer, renderer);
                layer._DrawInstanceMaybeWithEffects(inst, wi, renderer, renderTarget);
                wi._SetDrawBackFaceOnly(false)
            }
            renderer.CoplanarRestoreStandardRendering()
        }
        _SaveToJson() {
            const o = {
                "sx": this.GetScrollX(),
                "sy": this.GetScrollY(),
                "s": this.GetScale(),
                "a": this.GetAngle(),
                "w": this.GetWidth(),
                "h": this.GetHeight(),
                "ortho": this.IsOrthographicProjection(),
                "vpX": this.GetVanishingPointX(),
                "vpY": this.GetVanishingPointY(),
                "fv": this._isFirstVisit,
                "persist": this._persistData,
                "fx": this._effectList.SaveToJson(),
                "layers": {}
            };
            for (const layer of this._allLayersFlat) o["layers"][layer.GetSID().toString()] = layer._SaveToJson();
            return o
        }
        _LoadFromJson(o) {
            this._scrollX = o["sx"];
            this._scrollY = o["sy"];
            this._scale =
                o["s"];
            this._angle = o["a"];
            this._width = o["w"];
            this._height = o["h"];
            this._isOrthographicProjection = !!o["ortho"];
            if (o.hasOwnProperty("vpX")) this._vanishingPointX = o["vpX"];
            if (o.hasOwnProperty("vpY")) this._vanishingPointY = o["vpY"];
            this._isFirstVisit = !!o["fv"];
            this._persistData = o["persist"];
            this._effectList.LoadFromJson(o["fx"]);
            this._needsRebuildEffectChainSteps = true;
            for (const [sidStr, data] of Object.entries(o["layers"])) {
                const sid = parseInt(sidStr, 10);
                const layer = this.GetLayerBySID(sid);
                if (!layer) continue;
                layer._LoadFromJson(data)
            }
            this._SetAllLayersProjectionChanged();
            this._SetAllLayersMVChanged()
        }
        GetILayout() {
            return this._iLayout
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        DispatchUserScriptEvent(e) {
            e.layout = this.GetILayout();
            const runtime = this._runtime;
            const shouldTime = runtime.IsDebug() && !runtime.GetEventSheetManager().IsInEventEngine();
            if (shouldTime) C3Debugger.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(e);
            if (shouldTime) C3Debugger.AddScriptTime()
        }
        DispatchUserScriptEventAsyncWait(e) {
            e.layout =
                this.GetILayout();
            return this._userScriptDispatcher.dispatchEventAndWaitAsync(e)
        }
    };

}

// layouts/layoutManager.js
{
    'use strict';
    const C3 = self.C3;
    C3.LayoutManager = class LayoutManager extends C3.DefendedBase {
        constructor(runtime) {
            super();
            this._runtime = runtime;
            this._allLayouts = [];
            this._layoutsByName = new Map;
            this._layoutsBySid = new Map;
            this._mainRunningLayout = null;
            this._runningSubLayouts = [];
            this._firstLayout = null;
            this._isEndingLayout = 0;
            this._pendingChangeLayout = null
        }
        Release() {
            this._runtime = null;
            this._mainRunningLayout = null;
            this._firstLayout = null;
            this._pendingChangeLayout = null;
            C3.clearArray(this._allLayouts);
            this._layoutsByName.clear();
            this._layoutsBySid.clear();
            C3.clearArray(this._runningSubLayouts)
        }
        Create(layoutData) {
            const layout = C3.New(C3.Layout, this, this._allLayouts.length, layoutData);
            this._allLayouts.push(layout);
            this._layoutsByName.set(layout.GetName().toLowerCase(), layout);
            this._layoutsBySid.set(layout.GetSID(), layout)
        }
        GetRuntime() {
            return this._runtime
        }
        SetFirstLayout(layout) {
            this._firstLayout = layout
        }
        GetFirstLayout() {
            if (this._firstLayout) return this._firstLayout;
            if (this._allLayouts.length) return this._allLayouts[0];
            throw new Error("no first layout");
        }
        GetLayoutByName(name) {
            return this._layoutsByName.get(name.toLowerCase()) || null
        }
        GetLayoutBySID(sid) {
            return this._layoutsBySid.get(sid) || null
        }
        GetLayoutByIndex(index) {
            index = C3.clamp(Math.floor(index), 0, this._allLayouts.length - 1);
            return this._allLayouts[index]
        }
        GetLayout(p) {
            if (typeof p === "number") return this.GetLayoutByIndex(p);
            else return this.GetLayoutByName(p.toString())
        }
        GetAllLayouts() {
            return this._allLayouts
        }
        _SetMainRunningLayout(layout) {
            this._mainRunningLayout = layout
        }
        GetMainRunningLayout() {
            return this._mainRunningLayout
        }
        _AddRunningSubLayout(layout) {
            if (this._runningSubLayouts.includes(layout)) throw new Error("layout already running");
            this._runningSubLayouts.push(layout)
        }
        _RemoveRunningSubLayout(layout) {
            const i = this._runningSubLayouts.indexOf(layout);
            if (i === -1) throw new Error("layout not running");
            this._runningSubLayouts.splice(i, 1)
        }* runningLayouts() {
            if (this._mainRunningLayout) yield this._mainRunningLayout;
            if (this._runningSubLayouts.length) yield* this._runningSubLayouts
        }
        IsLayoutRunning(layout) {
            return this._mainRunningLayout === layout || this._runningSubLayouts.includes(layout)
        }
        SetIsEndingLayout(e) {
            if (e) this._isEndingLayout++;
            else {
                if (this._isEndingLayout <=
                    0) throw new Error("already unset");
                this._isEndingLayout--
            }
        }
        IsEndingLayout() {
            return this._isEndingLayout > 0
        }
        ChangeMainLayout(layout) {
            this._pendingChangeLayout = layout
        }
        ClearPendingChangeLayout() {
            this._pendingChangeLayout = null
        }
        IsPendingChangeMainLayout() {
            return !!this._pendingChangeLayout
        }
        GetPendingChangeMainLayout() {
            return this._pendingChangeLayout
        }
        SetAllLayerProjectionChanged() {
            const runningLayout = this.GetMainRunningLayout();
            if (!runningLayout) return;
            runningLayout._SetAllLayersProjectionChanged()
        }
        SetAllLayerMVChanged() {
            const runningLayout =
                this.GetMainRunningLayout();
            if (!runningLayout) return;
            runningLayout._SetAllLayersMVChanged()
        }
    };

}

// timelines/timelineManager.js
{
    'use strict';
    const C3 = self.C3;
    const NAMES_REGEXP = new RegExp("<(.+?)>", "g");
    C3.TimelineManager = class TimelineManager extends C3.DefendedBase {
        constructor(runtime) {
            super();
            this._runtime = runtime;
            this._timelineDataManager = C3.New(C3.TimelineDataManager);
            this._pluginInstance = null;
            this._timelines = [];
            this._timelinesByName = new Map;
            this._objectClassToTimelineMap = new Map;
            this._timelinesCreatedByTemplate = new Map;
            this._scheduledTimelines = [];
            this._playingTimelines = [];
            this._markedForRemovalTimelines = [];
            this._hasRuntimeListeners = false;
            this._changingLayout = false;
            this._isTickingTimelines =
                false;
            this._tickFunc = () => this._OnTick();
            this._tick2Func = () => this._OnTick2();
            this._beforeLayoutChange = () => this._OnBeforeChangeLayout();
            this._layoutChange = () => this._OnAfterChangeLayout();
            this._instanceDestroy = e => this._OnInstanceDestroy(e.instance);
            this._beforeLoad = e => this._OnBeforeLoad();
            this._afterLoad = e => this._OnAfterLoad();
            this._afterLayoutStart = e => this._OnAfterLayoutStart();
            this._destroyedWhileLoadingState = [];
            this._renderChange = 0
        }
        Release() {
            this.RemoveRuntimeListeners();
            this._tickFunc = null;
            this._tick2Func =
                null;
            this._beforeLayoutChange = null;
            this._layoutChange = null;
            this._instanceDestroy = null;
            this._afterLoad = null;
            for (const timeline of this._timelines) {
                timeline.Stop();
                timeline.Release()
            }
            C3.clearArray(this._timelines);
            this._timelines = null;
            this._timelineDataManager.Release();
            this._timelineDataManager = null;
            C3.clearArray(this._scheduledTimelines);
            this._scheduledTimelines = null;
            C3.clearArray(this._playingTimelines);
            this._playingTimelines = null;
            C3.clearArray(this._markedForRemovalTimelines);
            this._markedForRemovalTimelines =
                null;
            this._timelinesByName.clear();
            this._timelinesByName = null;
            this._objectClassToTimelineMap.clear();
            this._objectClassToTimelineMap = null;
            this._timelinesCreatedByTemplate.clear();
            this._timelinesCreatedByTemplate = null;
            C3.clearArray(this._destroyedWhileLoadingState);
            this._destroyedWhileLoadingState = null;
            this._runtime = null
        }
        AddRuntimeListeners() {
            const dispatcher = this._runtime.Dispatcher();
            dispatcher.addEventListener("pretick", this._tickFunc);
            dispatcher.addEventListener("tick2", this._tick2Func);
            dispatcher.addEventListener("beforelayoutchange",
                this._beforeLayoutChange);
            dispatcher.addEventListener("layoutchange", this._layoutChange);
            dispatcher.addEventListener("instancedestroy", this._instanceDestroy);
            dispatcher.addEventListener("beforeload", this._beforeLoad);
            dispatcher.addEventListener("afterload", this._afterLoad);
            dispatcher.addEventListener("afterlayoutstart", this._afterLayoutStart)
        }
        RemoveRuntimeListeners() {
            const dispatcher = this._runtime.Dispatcher();
            dispatcher.removeEventListener("pretick", this._tickFunc);
            dispatcher.removeEventListener("tick2",
                this._tick2Func);
            dispatcher.removeEventListener("beforelayoutchange", this._beforeLayoutChange);
            dispatcher.removeEventListener("layoutchange", this._layoutChange);
            dispatcher.removeEventListener("instancedestroy", this._instanceDestroy);
            dispatcher.removeEventListener("beforeload", this._beforeLoad);
            dispatcher.removeEventListener("afterload", this._afterLoad);
            dispatcher.removeEventListener("afterlayoutstart", this._afterLayoutStart)
        }
        Create(timelineData) {
            this._timelineDataManager.Add(timelineData);
            const timeline =
                C3.TimelineState.CreateInitial(timelineData, this);
            this.Add(timeline);
            this.SetTimelineObjectClassesToMap(timeline);
            this._timelinesCreatedByTemplate.set(timeline.GetName(), 0)
        }
        CreateFromTemplate(template) {
            const timelineDataManager = this.GetTimelineDataManager();
            const templateName = template.GetTemplateName();
            const timelineDataItem = timelineDataManager.Get(templateName);
            const timeline = C3.TimelineState.CreateFromTemplate(`${templateName}:${this._timelinesCreatedByTemplate.get(templateName)}`, timelineDataItem,
                this);
            this._IncreaseTemplateTimelinesCount(templateName);
            this.Add(timeline);
            return timeline
        }
        _IncreaseTemplateTimelinesCount(templateName) {
            this._timelinesCreatedByTemplate.set(templateName, this._timelinesCreatedByTemplate.get(templateName) + 1)
        }
        _SetCreatedTemplateTimelinesCount() {
            for (const timeline of this._timelines) {
                if (timeline.IsTemplate()) continue;
                const templateName = timeline.GetTemplateName();
                this._IncreaseTemplateTimelinesCount(templateName)
            }
        }
        _ClearCreatedTemplateTimelinesCount() {
            for (const templateName of this._timelinesCreatedByTemplate.keys()) this._timelinesCreatedByTemplate.set(templateName,
                0)
        }
        Add(timeline) {
            this._timelines.push(timeline);
            this._timelinesByName.set(timeline.GetName().toLowerCase(), timeline)
        }
        Remove(timeline) {
            timeline.Removed();
            if (timeline.IsTemplate()) return;
            C3.arrayFindRemove(this._timelines, timeline);
            C3.arrayFindRemove(this._scheduledTimelines, timeline);
            C3.arrayFindRemove(this._playingTimelines, timeline);
            C3.arrayFindRemove(this._markedForRemovalTimelines, timeline);
            this._timelinesByName.delete(timeline.GetName().toLowerCase());
            this.RemoveTimelineFromObjectClassMap(timeline);
            if (!timeline.IsReleased()) timeline.Release()
        }
        Trigger(method) {
            this._runtime.Trigger(method, this._pluginInstance, null)
        }
        GetRuntime() {
            return this._runtime
        }
        GetTimelineDataManager() {
            return this._timelineDataManager
        }
        SetPluginInstance(inst) {
            this._pluginInstance = inst
        }
        GetPluginInstance() {
            return this._pluginInstance
        }* GetTimelines() {
            for (const timeline of this._timelines) yield timeline
        }* GetPlayingTimelines() {
            for (const timeline of this._playingTimelines) yield timeline
        }
        SetTimelineObjectClassToMap(objectClass, timeline) {
            if (!this._objectClassToTimelineMap.has(objectClass)) this._objectClassToTimelineMap.set(objectClass,
                new Set);
            this._objectClassToTimelineMap.get(objectClass).add(timeline)
        }
        SetTimelineObjectClassesToMap(timeline) {
            for (const objectClass of timeline.GetObjectClasses()) this.SetTimelineObjectClassToMap(objectClass, timeline)
        }
        RemoveTimelineFromObjectClassMap(timeline) {
            for (const [objectClass, timelines] of this._objectClassToTimelineMap.entries())
                if (timelines.has(timeline)) {
                    timelines.delete(timeline);
                    if (timelines.size === 0) this._objectClassToTimelineMap.delete(objectClass)
                }
        }
        GetTimelinesForObjectClass(objectClass) {
            if (!this._objectClassToTimelineMap.has(objectClass)) return;
            return this._objectClassToTimelineMap.get(objectClass)
        }
        GetTimelineOfTemplateForInstances(templateTimeline, instancesObject) {
            if (!instancesObject) return;
            for (const timeline of this._timelines) {
                const found = instancesObject.every(io => {
                    return timeline.HasTrackInstance(io.instance, io.trackId)
                });
                if (found)
                    if (timeline.GetName().includes(templateTimeline.GetName())) return timeline
            }
        }
        GetTimelineByName(name) {
            return this._timelinesByName.get(name.toLowerCase()) || null
        }
        GetScheduledOrPlayingTimelineByName(name) {
            for (const timeline of this._scheduledTimelines)
                if (timeline.GetName() ===
                    name) return timeline;
            for (const timeline of this._playingTimelines)
                if (timeline.GetName() === name) return timeline;
            return null
        }* GetTimelinesByName(name) {
            if (NAMES_REGEXP.test(name)) {
                NAMES_REGEXP.lastIndex = 0;
                let match;
                const uniqueNames = new Set;
                do {
                    match = NAMES_REGEXP.exec(name);
                    if (match) {
                        const names = match[1].split(",");
                        for (const name of names) uniqueNames.add(name)
                    }
                } while (match);
                for (const name of uniqueNames.values()) {
                    const timeline = this.GetTimelineByName(name);
                    if (timeline) yield timeline
                }
                uniqueNames.clear()
            } else {
                const timeline =
                    this.GetTimelineByName(name);
                if (timeline) yield timeline
            }
        }* GetTimelinesByTags(tags) {
            for (const timeline of this._timelines)
                if (timeline.HasTags(tags)) yield timeline
        }
        AddScheduledTimeline(timeline) {
            if (!this._scheduledTimelines.includes(timeline)) this._scheduledTimelines.push(timeline);
            this._MaybeEnableRuntimeListeners()
        }
        RemovePlayingTimeline(timeline) {
            C3.arrayFindRemove(this._playingTimelines, timeline);
            this._MaybeDisableRuntimeListeners()
        }
        ScheduleTimeline(timeline) {
            if (this._playingTimelines.includes(timeline)) {
                timeline.SetPlaying(true);
                timeline.SetScheduled(false);
                timeline.SetMarkedForRemoval(false)
            } else {
                timeline.SetPlaying(false);
                timeline.SetScheduled(true);
                timeline.SetMarkedForRemoval(false);
                if (!this._scheduledTimelines.includes(timeline)) this._scheduledTimelines.push(timeline)
            }
            this._MaybeEnableRuntimeListeners()
        }
        DeScheduleTimeline(timeline) {
            timeline.SetPlaying(false);
            timeline.SetScheduled(false);
            timeline.ResolvePlayPromise();
            C3.arrayFindRemove(this._scheduledTimelines, timeline);
            this._MaybeDisableRuntimeListeners()
        }
        CompleteTimeline(timeline) {
            timeline.SetPlaying(false);
            timeline.SetScheduled(false);
            if (this._playingTimelines.includes(timeline)) {
                timeline.SetMarkedForRemoval(true);
                this._markedForRemovalTimelines.push(timeline);
                C3.arrayFindRemove(this._playingTimelines, timeline)
            }
        }
        CompleteTimelineBeforeChangeOfLayout(timeline) {
            timeline.SetPlaying(false);
            timeline.SetScheduled(false);
            timeline.SetMarkedForRemoval(false);
            timeline.SetPlaybackRate(1);
            C3.arrayFindRemove(this._playingTimelines, timeline)
        }
        CompleteTimelineAndResolve(timeline) {
            this.CompleteTimeline(timeline);
            timeline.ResolvePlayPromise()
        }
        _OnTick() {
            if (this.GetRuntime().IsLoadingState()) return;
            if (!this._hasRuntimeListeners) return;
            if (this._changingLayout) return;
            this._isTickingTimelines = true;
            while (this._scheduledTimelines.length) {
                const t = this._scheduledTimelines.pop();
                t.SetInitialState();
                if (t.GetRenderChange() !== 0) this._renderChange = 1;
                this._playingTimelines.push(t)
            }
            const dt = this._runtime._GetDtFast();
            const dt1 = this._runtime.GetDt1();
            const ts = this._runtime.GetTimeScale();
            for (let i = this._playingTimelines.length - 1; i >= 0; i--) {
                const t = this._playingTimelines[i];
                if (t) t.Tick(dt, ts, dt1)
            }
            this._isTickingTimelines =
                false;
            if (this._renderChange !== 0) this.GetRuntime().UpdateRender()
        }
        _OnTick2() {
            if (this.GetRuntime().IsLoadingState()) return;
            if (!this._hasRuntimeListeners) return;
            if (this._changingLayout) return;
            let timelinesToRemove;
            for (let i = 0, l = this._markedForRemovalTimelines.length; i < l; i++) {
                const t = this._markedForRemovalTimelines[i];
                if (!timelinesToRemove) timelinesToRemove = new Set;
                t.Removed();
                this._MaybeExecuteTimelineFinishTriggers(t);
                timelinesToRemove.add(t)
            }
            if (timelinesToRemove) {
                C3.arrayRemoveAllInSet(this._markedForRemovalTimelines,
                    timelinesToRemove);
                this._renderChange = 0;
                for (let i = 0, l = this._playingTimelines.length; i < l; i++)
                    if (this._playingTimelines[i].GetRenderChange() !== 0) {
                        this._renderChange = 1;
                        break
                    }
            }
            this._MaybeDisableRuntimeListeners()
        }
        _MaybeExecuteTimelineFinishTriggers(timeline) {
            if (timeline.IsReleased()) return;
            if (!timeline.HasValidTracks()) return;
            if (timeline.IsComplete() && timeline.InitialStateSet()) timeline.FinishTriggers()
        }
        _MaybeEnableRuntimeListeners() {
            if (this._hasRuntimeListeners) return;
            this._hasRuntimeListeners = true
        }
        _MaybeDisableRuntimeListeners() {
            if (this._markedForRemovalTimelines.length) return;
            if (this._playingTimelines.length) return;
            if (this._scheduledTimelines.length) return;
            if (this._isTickingTimelines) return;
            this._hasRuntimeListeners = false
        }
        _OnBeforeChangeLayout() {
            this._changingLayout = true;
            while (this._scheduledTimelines.length) this.DeScheduleTimeline(this._scheduledTimelines.pop());
            const timelinesToRemove = new Set;
            for (const t of this._playingTimelines) {
                const remove = t._OnBeforeChangeLayout();
                if (remove) {
                    t.Removed();
                    timelinesToRemove.add(t)
                }
            }
            C3.arrayRemoveAllInSet(this._playingTimelines, timelinesToRemove);
            timelinesToRemove.clear();
            for (const t of this._markedForRemovalTimelines) {
                const remove = t._OnBeforeChangeLayout();
                if (remove) {
                    t.Removed();
                    timelinesToRemove.add(t)
                }
            }
            C3.arrayRemoveAllInSet(this._markedForRemovalTimelines, timelinesToRemove);
            this._MaybeDisableRuntimeListeners();
            for (const timeline of this._timelines) timeline.CleanCaches()
        }
        _OnAfterChangeLayout() {
            this._changingLayout = false
        }
        _OnInstanceDestroy(instance) {
            const objectClass = instance.GetObjectClass();
            const timelines = this.GetTimelinesForObjectClass(objectClass);
            if (!timelines) return;
            if (this._runtime.IsLoadingState()) this._destroyedWhileLoadingState.push(instance);
            else
                for (const timeline of timelines) {
                    if (timeline.IsTemplate()) continue;
                    if (timeline.IsReleased()) {
                        this.Remove(timeline);
                        continue
                    }
                    if (!timeline.HasValidTracks()) {
                        this._MaybeExecuteTimelineFinishTriggers(timeline);
                        this.Remove(timeline)
                    }
                }
        }
        _OnBeforeLoad() {
            for (const timeline of this._scheduledTimelines.map(t => t)) {
                this._MaybeExecuteTimelineFinishTriggers(timeline);
                this.Remove(timeline)
            }
            for (const timeline of this._playingTimelines.map(t =>
                    t)) {
                this._MaybeExecuteTimelineFinishTriggers(timeline);
                this.Remove(timeline)
            }
        }
        _OnAfterLoad() {
            for (const destroyedInstance of this._destroyedWhileLoadingState) this._OnInstanceDestroy(destroyedInstance);
            C3.clearArray(this._destroyedWhileLoadingState)
        }
        _OnAfterLayoutStart() {
            const layoutManager = this._runtime.GetLayoutManager();
            const runningLayout = layoutManager.GetMainRunningLayout();
            if (!runningLayout) return;
            for (const timeline of this._timelines) {
                const startOnLayout = timeline.GetStartOnLayout();
                if (!startOnLayout) continue;
                if (runningLayout.GetName() === startOnLayout) this.ScheduleTimeline(timeline)
            }
        }
        _SaveToJson() {
            return {
                "timelinesJson": this._SaveTimelinesToJson(),
                "scheduledTimelinesJson": this._SaveScheduledTimelinesToJson(),
                "playingTimelinesJson": this._SavePlayingTimelinesToJson(),
                "markedForRemovalTimelinesJson": this._SaveMarkedForRemovalTimelinesToJson(),
                "hasRuntimeListeners": this._hasRuntimeListeners,
                "changingLayout": this._changingLayout,
                "isTickingTimelines": this._isTickingTimelines
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this._ClearCreatedTemplateTimelinesCount();
            this._LoadTimelinesFromJson(o["timelinesJson"]);
            this._LoadScheduledTimelinesFromJson(o["scheduledTimelinesJson"]);
            this._LoadPlayingTimelinesFromJson(o["playingTimelinesJson"]);
            this._LoadMarkedForRemovalTimelinesFromJson(o["markedForRemovalTimelinesJson"]);
            this._hasRuntimeListeners = !o["hasRuntimeListeners"];
            this._changingLayout = !!o["changingLayout"];
            this._isTickingTimelines = !!o["isTickingTimelines"];
            this._SetCreatedTemplateTimelinesCount();
            this._MaybeEnableRuntimeListeners();
            this._MaybeDisableRuntimeListeners()
        }
        _SaveTimelinesToJson() {
            return this._timelines.map(timelineState =>
                timelineState._SaveToJson())
        }
        _LoadTimelinesFromJson(timelinesJson) {
            for (const timelineJson of timelinesJson) {
                let timeline = this.GetTimelineByName(timelineJson["name"]);
                if (timeline) timeline._LoadFromJson(timelineJson);
                else {
                    const templateName = this._GetTemplateNameFromJson(timelineJson);
                    if (!templateName) continue;
                    const templateTimeline = this.GetTimelineByName(templateName);
                    timeline = this.CreateFromTemplate(templateTimeline);
                    timeline._LoadFromJson(timelineJson)
                }
                if (!timeline.HasTracks()) this.Remove(timeline)
            }
        }
        _GetTemplateNameFromJson(timelineJson) {
            const name =
                timelineJson["name"];
            const nameParts = name.split(":");
            if (!nameParts || nameParts.length !== 2) return null;
            return nameParts[0]
        }
        _SaveScheduledTimelinesToJson() {
            return this._SaveTimelines(this._scheduledTimelines)
        }
        _LoadScheduledTimelinesFromJson(scheduledTimelinesJson) {
            this._LoadTimelines(scheduledTimelinesJson, this._scheduledTimelines)
        }
        _SavePlayingTimelinesToJson() {
            return this._SaveTimelines(this._playingTimelines)
        }
        _LoadPlayingTimelinesFromJson(playingTimelinesJson) {
            this._LoadTimelines(playingTimelinesJson,
                this._playingTimelines)
        }
        _SaveMarkedForRemovalTimelinesToJson() {
            return this._SaveTimelines(this._markedForRemovalTimelines)
        }
        _LoadMarkedForRemovalTimelinesFromJson(markedForRemovalTimelinesJson) {
            this._LoadTimelines(markedForRemovalTimelinesJson, this._markedForRemovalTimelines)
        }
        _IsTimelineInJson(timeline, json) {
            if (!json) return false;
            for (const name of json)
                if (name === timeline.GetName()) return true;
            return false
        }
        _SaveTimelines(collection) {
            return collection.map(t => t.GetName())
        }
        _LoadTimelines(timelinesJson,
            collection) {
            const timelinesToRemove = new Set;
            for (const timeline of collection)
                if (!this._IsTimelineInJson(timeline, timelinesJson)) timelinesToRemove.add(timeline);
            C3.arrayRemoveAllInSet(collection, timelinesToRemove);
            if (timelinesJson) {
                const ff = tn => t => t.GetName() === tn;
                for (const name of timelinesJson) {
                    const timeline = this.GetTimelineByName(name);
                    if (timeline) {
                        const t = collection.find(ff(name));
                        if (!t) collection.push(timeline)
                    }
                }
            }
        }
    };

}

// timelines/timelineInfo.js
{
    'use strict';
    const C3 = self.C3;
    const STEPS = 100;
    const LENGTH_STEP_SIZE = .01;
    const BEZIER_STEP_SIZE = 30;
    const TANGENT_RESULT = [0, 0];
    const MAP_RESULT = [0, 0];
    const PROJECTION_RESULT = [0, 0, 0, 0, 0];
    C3.TimelineInfo = class TimelineInfo {
        constructor(timeline, trackId) {
            this._initialized = false;
            this._timeline = timeline;
            this._segments = [];
            let trackState = null;
            if (trackId) trackState = this._timeline.GetTrackById(trackId);
            else trackState = C3.first(this._timeline.GetTracks());
            if (!trackState) return;
            const xTrack = trackState.GetPropertyTrack("offsetX");
            const yTrack = trackState.GetPropertyTrack("offsetY");
            if (!xTrack || !yTrack) return;
            this._xTrack = xTrack;
            this._yTrack = yTrack;
            const xPropertyKeyframes = xTrack.GetPropertyKeyframeDataItemArrayIncludingDisabled();
            const yPropertyKeyframes = yTrack.GetPropertyKeyframeDataItemArrayIncludingDisabled();
            for (let i = 1, len = Math.min(xPropertyKeyframes.length, yPropertyKeyframes.length); i < len; ++i) {
                const startX = xPropertyKeyframes[i];
                const endX = startX.GetNext();
                const prevX = startX.GetPrevious();
                const startY = yPropertyKeyframes[i];
                const endY = startY.GetNext();
                const prevY = startY.GetPrevious();
                if (prevX && prevX.GetPathMode() === "cubic-bezier" && prevY && prevY.GetPathMode() === "cubic-bezier") this._segments.push(C3.New(C3.TimelineCubicBezierSegmentInfo,
                    prevX, prevY, startX, startY, this._segments.length));
                else if (prevX && prevX.GetPathMode() === "line" && prevY && prevY.GetPathMode() === "line") this._segments.push(C3.New(C3.TimelineLineSegmentInfo, startX, startY, this._segments.length));
                else this._segments.push(C3.New(C3.TimelineLineSegmentInfo, startX, startY, this._segments.length))
            }
            this._initialized = true
        }
        Release() {
            for (const segment of this._segments) segment.Release();
            C3.clearArray(this._segments);
            this._segments = null;
            this._timeline = null;
            this._xTrack = null;
            this._yTrack =
                null
        }
        WasInitialized() {
            return this._initialized
        }
        segments() {
            return this._segments
        }
        SetOrigin(wi) {
            const ox = this._xTrack.GetResultMode() === "relative" ? wi.GetX() : 0;
            const oy = this._yTrack.GetResultMode() === "relative" ? wi.GetY() : 0;
            for (const segment of this._segments) segment.SetOrigin(ox, oy)
        }
        Project(x, y, opts) {
            if (opts && opts.tRange) {
                if (!C3.IsFiniteNumber(opts.tRange[0])) opts.tRange[0] = 0;
                if (!C3.IsFiniteNumber(opts.tRange[1])) opts.tRange[1] = 1
            }
            const ret = [];
            for (const segment of this._segments)
                if (segment.GetType() ===
                    "cubic-bezier") {
                    const p = segment.Project(x, y, opts ? opts.tRange : null);
                    p[4] = segment.GetIndex();
                    ret.push(JSON.parse(JSON.stringify(p)))
                }
            ret.sort((f, s) => f[3] - s[3]);
            return ret[0]
        }
        Tangent(t, segmentIndex) {
            return this._segments[segmentIndex].Tangent(t)
        }
        TangentAngle(x, y, t, segmentIndex) {
            return this._segments[segmentIndex].TangentAngle(x, y, t)
        }
    };
    C3.TimelineCubicBezierSegmentInfo = class TimelineCubicBezierSegmentInfo {
        constructor(startX, startY, endX, endY, index) {
            this._index = index;
            const startXAddon = startX.GetAddOn("cubic-bezier");
            const endXAddon = endX.GetAddOn("cubic-bezier");
            const startYAddon = startY.GetAddOn("cubic-bezier");
            const endYAddon = endY.GetAddOn("cubic-bezier");
            this._aX = startX.GetValueWithResultMode();
            this._aY = startY.GetValueWithResultMode();
            this._bX = startX.GetValueWithResultMode() + startXAddon.GetStartAnchor();
            this._bY = startY.GetValueWithResultMode() +
                startYAddon.GetStartAnchor();
            this._cX = endX.GetValueWithResultMode() + endXAddon.GetEndAnchor();
            this._cY = endY.GetValueWithResultMode() + endYAddon.GetEndAnchor();
            this._dX = endX.GetValueWithResultMode();
            this._dY = endY.GetValueWithResultMode();
            this._initialized = false;
            this._len = STEPS;
            this._arcLengths = new Array(this._len + 1);
            this._arcLengths[0] = 0;
            this._length = 0;
            this._lut = [];
            this._CalculateLength()
        }
        Release() {
            C3.clearArray(this._arcLengths);
            this._arcLengths = null;
            C3.clearArray(this._lut);
            this._lut = null
        }
        GetType() {
            return "cubic-bezier"
        }
        GetIndex() {
            return this._index
        }
        GetStepCount() {
            return Math.floor(this._length /
                BEZIER_STEP_SIZE)
        }
        GetStepIncrement() {
            return 1 / this.GetStepCount()
        }
        SetOrigin(ox, oy) {
            this._originX = ox;
            this._originY = oy;
            this._arcLengths = new Array(this._len + 1);
            this._arcLengths[0] = 0;
            this._CalculateLength()
        }
        Map(u) {
            if (!this._initialized) return NaN;
            const mt = this._Map(u);
            MAP_RESULT[0] = this._X(mt);
            MAP_RESULT[1] = this._Y(mt);
            return MAP_RESULT
        }
        Project(x, y, tRange) {
            const lut = this._GenerateLUT(STEPS);
            const i = this._FindClosestFromLUT(x, y, lut, tRange);
            const p = this._RefineProjection(x, y, lut, i);
            PROJECTION_RESULT[0] =
                p.x;
            PROJECTION_RESULT[1] = p.y;
            PROJECTION_RESULT[2] = p.t;
            PROJECTION_RESULT[3] = p.distance;
            return PROJECTION_RESULT
        }
        Tangent(t) {
            const mt = 1 - t;
            const a = mt * mt;
            const b = 2 * mt * t;
            const c = t * t;
            const d0x = 3 * (this._bX + this._originX - (this._aX + this._originX));
            const d0y = 3 * (this._bY + this._originY - (this._aY + this._originY));
            const d1x = 3 * (this._cX + this._originX - (this._bX + this._originX));
            const d1y = 3 * (this._cY + this._originY - (this._bY + this._originY));
            const d2x = 3 * (this._dX + this._originX - (this._cX + this._originX));
            const d2y = 3 * (this._dY +
                this._originY - (this._cY + this._originY));
            const dx = a * d0x + b * d1x + c * d2x;
            const dy = a * d0y + b * d1y + c * d2y;
            const m = Math.hypot(dx, dy);
            TANGENT_RESULT[0] = dx / m;
            TANGENT_RESULT[1] = dy / m;
            return TANGENT_RESULT
        }
        TangentAngle(x, y, t) {
            const tanget = this.Tangent(t);
            const angle = C3.angleTo(x, y, x + tanget[0], y + tanget[1]);
            return angle
        }
        _Map(u) {
            if (!this._initialized) return;
            let targetLength = u * this._arcLengths[this._len];
            let low = 0;
            let high = this._len;
            let index = 0;
            while (low < high) {
                index = low + ((high - low) / 2 | 0);
                if (this._arcLengths[index] < targetLength) low =
                    index + 1;
                else high = index
            }
            if (this._arcLengths[index] > targetLength) index--;
            const lengthBefore = this._arcLengths[index];
            if (lengthBefore === targetLength) return index / this._len;
            else return (index + (targetLength - lengthBefore) / (this._arcLengths[index + 1] - lengthBefore)) / this._len
        }
        _X(t) {
            if (!this._initialized) return NaN;
            return self.Ease.GetRuntimeEase("cubicbezier")(t, this._aX + this._originX, this._bX + this._originX, this._cX + this._originX, this._dX + this._originX)
        }
        _Y(t) {
            if (!this._initialized) return NaN;
            return self.Ease.GetRuntimeEase("cubicbezier")(t,
                this._aY + this._originY, this._bY + this._originY, this._cY + this._originY, this._dY + this._originY)
        }
        _GenerateLUT(steps) {
            steps = steps || STEPS;
            if (this._lut.length === steps) return this._lut;
            this._lut = [];
            steps++;
            for (let i = 0; i < steps; i++) {
                const t = i / (steps - 1);
                const x = this._X(t);
                const y = this._Y(t);
                this._lut.push({
                    x: x,
                    y: y,
                    t: t,
                    distance: 0
                })
            }
            return this._lut
        }
        _FindClosestFromLUT(x, y, LUT, tRange = null, distance = Number.MAX_SAFE_INTEGER) {
            let i = 0;
            LUT.forEach((p, index) => {
                p.t = index / (LUT.length - 1);
                p.distance = C3.distanceTo(x, y, p.x,
                    p.y);
                if (tRange && C3.IsArray(tRange) && C3.IsFiniteNumber(tRange[0]) && C3.IsFiniteNumber(tRange[1])) {
                    if (p.t >= tRange[0] && p.t <= tRange[1])
                        if (p.distance < distance) {
                            distance = p.distance;
                            i = index
                        }
                } else if (p.distance < distance) {
                    distance = p.distance;
                    i = index
                }
            });
            return i
        }
        _RefineProjection(x, y, LUT, i, targetDistance = 0, epsilon = 1) {
            let q = LUT[i];
            let count = 1;
            let distance = Number.MAX_SAFE_INTEGER;
            do {
                let i1 = i === 0 ? 0 : i - 1;
                let i2 = i === LUT.length - 1 ? LUT.length - 1 : i + 1;
                let t1 = LUT[i1].t;
                let t2 = LUT[i2].t;
                let lut = [];
                let step = (t2 - t1) / 4;
                if (step <
                    .001) break;
                lut.push(LUT[i1]);
                for (let j = 1; j <= 3; j++) {
                    const t = t1 + j * step;
                    const pathX = this._X(t);
                    const pathY = this._Y(t);
                    const pathDistance = Math.abs(C3.distanceTo(pathX, pathY, x, y) - targetDistance);
                    if (pathDistance < distance) {
                        distance = pathDistance;
                        q = {
                            x: pathX,
                            y: pathY,
                            t: t,
                            distance: pathDistance
                        };
                        i = j
                    }
                    lut.push({
                        x: pathX,
                        y: pathY,
                        t: t,
                        distance: pathDistance
                    })
                }
                lut.push(LUT[i2]);
                LUT = lut
            } while (count++ < 25);
            if (targetDistance && distance > epsilon) q = null;
            return q
        }
        _CalculateLength() {
            this._initialized = true;
            let ox = this._X(0);
            let oy =
                this._Y(0);
            let clen = 0;
            for (let i = 1; i <= this._len; i++) {
                const x = this._X(i * LENGTH_STEP_SIZE);
                const y = this._Y(i * LENGTH_STEP_SIZE);
                const dx = ox - x;
                const dy = oy - y;
                clen += Math.hypot(dx, dy);
                this._arcLengths[i] = clen;
                ox = x;
                oy = y
            }
            this._length = clen
        }
    };
    C3.TimelineLineSegmentInfo = class TimelineLineSegmentInfo {
        constructor(startX, startY, index) {
            this._index = index;
            this._targetX = startX.GetValueWithResultMode();
            this._targetY = startY.GetValueWithResultMode();
            this._originX = 0;
            this._originY = 0
        }
        Release() {}
        GetType() {
            return "line"
        }
        GetIndex() {
            return this._index
        }
        SetOrigin(ox, oy) {
            this._originX = ox;
            this._originY = oy
        }
        GetX() {
            return this._targetX + this._originX
        }
        GetY() {
            return this._targetY + this._originY
        }
    };

}

// timelines/state/timelineState.js
{
    'use strict';
    const C3 = self.C3;
    const PING_PONG_BEGIN = 0;
    const PING_PONG_END = 1;
    C3.TimelineState = class Timeline extends C3.DefendedBase {
        constructor(name, timelineDataItem, timelineManager) {
            super();
            this._runtime = timelineManager.GetRuntime();
            this._timelineManager = timelineManager;
            this._timelineDataItem = timelineDataItem;
            this._name = name;
            this._tracks = [];
            this._tracksLength = 0;
            this._beforeAndAfterTracks = null;
            this._beforeAndAfterTracksLength = 0;
            this.CreateTrackStates();
            this._playPromise = null;
            this._playResolve = null;
            this._playheadTime = 0;
            this._playbackRate = 1;
            this._pingPongState = PING_PONG_BEGIN;
            this._currentRepeatCount = 1;
            this._isPlaying = false;
            this._isScheduled = false;
            this._initialStateSet = false;
            this._complete = true;
            this._released = false;
            this._markedForRemoval = false;
            this._completedTick = -1;
            this._implicitPause = false;
            this._isTemplate = false;
            this._finishedTriggers = false;
            this._firstTick = false;
            this._lastDelta = NaN;
            this._tags = [""];
            this._stringTags = "";
            this._tagsChanged = false;
            this._renderChange = 0;
            this._hasNestedContent = 0;
            this._iTimelineState = null
        }
        static CreateInitial(timelineDataJson, timelineManager) {
            const timelineDataManager =
                timelineManager.GetTimelineDataManager();
            const nameId = timelineDataManager.GetNameId();
            const timelineDataItem = timelineDataManager.Get(timelineDataJson[nameId]);
            const timeline = C3.New(C3.TimelineState, timelineDataJson[nameId], timelineDataItem, timelineManager);
            timeline.SetIsTemplate(true);
            return timeline
        }
        static CreateFromTemplate(name, timelineDataItem, timelineManager) {
            return C3.New(C3.TimelineState, name, timelineDataItem, timelineManager)
        }
        Release() {
            if (this.IsReleased()) return;
            const dispatcher = this._runtime.Dispatcher();
            this._timelineManager.DeScheduleTimeline(this);
            this._timelineManager.CompleteTimelineAndResolve(this);
            for (const track of this._tracks) track.Release();
            C3.clearArray(this._tracks);
            this._tracks = null;
            this._runtime = null;
            this._timelineManager = null;
            this._timelineDataItem = null;
            this._released = true;
            this._playPromise = null;
            this._playResolve = null;
            this.FireReleaseEvent(dispatcher)
        }
        FireReleaseEvent(dispatcher) {
            const event = C3.New(C3.Event, "timelinestatereleased");
            event.timelineState = this;
            dispatcher.dispatchEvent(event)
        }
        GetType() {
            return 0
        }
        CreateTrackStates() {
            for (const trackDataItem of this._timelineDataItem.GetTrackData().trackDataItems()) this._tracksLength =
                this._tracks.push(C3.TrackState.Create(this, trackDataItem))
        }
        GetTimelineManager() {
            return this._timelineManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetTracks() {
            return this._tracks
        }
        GetSimilarPropertyTracks(instance, sourceAdapter, propertyName) {
            if (!this._hasNestedContent) return;
            let ret;
            for (let i = 0; i < this._tracks.length; i++) {
                let track = this._tracks[i];
                if (instance !== track.GetInstance()) continue;
                const propertyTrack = track.GetPropertyTrack(propertyName);
                if (!propertyTrack) continue;
                if (sourceAdapter.constructor !==
                    propertyTrack.GetSourceAdapter().constructor) continue;
                if (!ret) ret = [];
                ret.push(propertyTrack)
            }
            return ret
        }
        HasTracks() {
            return !!this._tracks.length
        }
        GetTrackById(trackId) {
            for (const track of this._tracks)
                if (C3.equalsNoCase(track.GetId(), trackId)) return track;
            return null
        }
        GetTrackByName(name) {
            for (const track of this._tracks) {
                if (track.IsInstanceTrack()) continue;
                if (C3.equalsNoCase(track.GetName(), name)) return track
            }
            return null
        }
        SetName(name) {
            this._name = name
        }
        GetName() {
            return this._name
        }
        GetTimelineDataItem() {
            return this._timelineDataItem
        }
        GetTemplateName() {
            return this._timelineDataItem.GetName()
        }
        GetTotalTime() {
            return this._timelineDataItem.GetTotalTime()
        }
        SetTotalTime(tt) {
            this._timelineDataItem.SetTotalTime(tt)
        }
        GetStep() {
            return this._timelineDataItem.GetStep()
        }
        SetStep(s) {
            this._timelineDataItem.SetStep(s)
        }
        GetInterpolationMode() {
            return this._timelineDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(im) {
            this._timelineDataItem.SetInterpolationMode(im)
        }
        GetResultMode() {
            return this._timelineDataItem.GetResultMode()
        }
        SetResultMode(rm) {
            this._timelineDataItem.GetResultMode(rm)
        }
        SetEase(e) {
            for (const track of this.GetTracks()) track.SetEase(e)
        }
        GetLoop() {
            return this._timelineDataItem.GetLoop()
        }
        SetLoop(l) {
            return this._timelineDataItem.SetLoop(l)
        }
        GetPingPong() {
            return this._timelineDataItem.GetPingPong()
        }
        SetPingPong(p) {
            return this._timelineDataItem.SetPingPong(p)
        }
        GetRepeatCount() {
            return this._timelineDataItem.GetRepeatCount()
        }
        SetRepeatCount(rc) {
            return this._timelineDataItem.SetRepeatCount(rc)
        }
        SetPlaybackRate(r) {
            return this._playbackRate =
                r
        }
        GetPlaybackRate() {
            return this._playbackRate
        }
        GetStartOnLayout() {
            return this._timelineDataItem.GetStartOnLayout()
        }
        GetTransformWithSceneGraph() {
            return this._timelineDataItem.GetTransformWithSceneGraph()
        }
        GetUseSystemTimescale() {
            return this._timelineDataItem.GetUseSystemTimescale()
        }
        IsForwardPlayBack() {
            if (!this.IsPlaying()) return true;
            return this._playbackRate > 0
        }
        GetPlayPromise() {
            if (this._playPromise) return this._playPromise;
            this._playPromise = new Promise(resolve => {
                this._playResolve = resolve
            });
            return this._playPromise
        }
        ResolvePlayPromise() {
            if (!this._playPromise) return;
            this._playResolve();
            this._playPromise = null;
            this._playResolve = null
        }
        SetTags(tags) {
            this._tags = C3.TimelineState._GetTagArray(tags);
            this._tagsChanged = true
        }
        GetTags() {
            return this._tags
        }
        GetStringTags() {
            if (this._tagsChanged) this._stringTags = this._tags.join(" ");
            this._tagsChanged = false;
            return this._stringTags
        }
        HasTags(tags) {
            if (!this._tags) return false;
            if (!this._tags.length) return false;
            const t = C3.TimelineState._GetTagArray(tags);
            if (!t) return false;
            if (!t.length) return false;
            return t.every(C3.TimelineState._HasTag,
                this)
        }
        OnStarted() {
            if (!C3.Plugins.Timeline || this.constructor !== C3.TimelineState) return;
            C3.Plugins.Timeline.Cnds.PushTriggerTimeline(this);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnTimelineStarted);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnTimelineStartedByName);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnTimelineStartedByTags);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnAnyTimelineStarted);
            C3.Plugins.Timeline.Cnds.PopTriggerTimeline()
        }
        OnCompleted() {
            this._completedTick =
                this._runtime.GetTickCount()
        }
        FinishTriggers() {
            if (this._finishedTriggers) return;
            this._finishedTriggers = true;
            if (!C3.Plugins.Timeline || this.constructor !== C3.TimelineState) return;
            C3.Plugins.Timeline.Cnds.PushTriggerTimeline(this);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnTimelineFinished);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnTimelineFinishedByName);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnTimelineFinishedByTags);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnAnyTimelineFinished);
            C3.Plugins.Timeline.Cnds.PopTriggerTimeline()
        }
        SetPlaying(p) {
            this._isPlaying = p
        }
        IsCompletedTick() {
            return this._completedTick === this._runtime.GetTickCount()
        }
        IsPlaying(playingOnly = false) {
            if (this.IsCompletedTick()) return true;
            if (this.IsScheduled() && !playingOnly) return true;
            return this._isPlaying
        }
        _IsPlaying() {
            return this.IsPlaying(true)
        }
        IsPaused() {
            return this._IsPaused()
        }
        _IsPaused() {
            if (this.IsReleased()) return false;
            if (this.IsScheduled()) return false;
            if (this._IsPlaying()) return false;
            if (this.IsComplete()) return false;
            return true
        }
        SetScheduled(s) {
            this._isScheduled = s
        }
        IsScheduled() {
            return this._isScheduled
        }
        SetComplete(c) {
            this._complete = c;
            const t = this.GetTime();
            if (t <= 0 || t >= this.GetTotalTime()) this._complete = true
        }
        IsComplete() {
            return this._complete
        }
        IsReleased() {
            return this._released
        }
        SetMarkedForRemoval(mfr) {
            this._markedForRemoval = mfr
        }
        IsMarkedForRemoval() {
            return this._markedForRemoval
        }
        SetImplicitPause(ip) {
            this._implicitPause = ip
        }
        IsImplicitPause() {
            return this._implicitPause
        }
        SetIsTemplate(it) {
            this._isTemplate = !!it
        }
        IsTemplate() {
            return this._isTemplate
        }
        InitialStateSet() {
            return this._initialStateSet
        }
        GetTime() {
            return this._playheadTime
        }
        SetTime(time) {
            const lastGlobalTime =
                this.GetTime();
            this._SetTime(time);
            this.SetComplete(false);
            if (!this.IsComplete()) this.SetImplicitPause(true);
            if (!this._IsPlaying() && !this.IsScheduled() && this._initialStateSet);
            else if (!this._IsPlaying() && !this.IsScheduled() && !this._initialStateSet) this.SetInitialStateFromSetTime();
            else if (this._IsPlaying()) this.Stop();
            else if (this.IsScheduled()) {
                this._timelineManager.DeScheduleTimeline(this);
                this.SetInitialStateFromSetTime()
            }
            this._SetUpdateStateBefore();
            this._Interpolate(this.GetTime(), false, true,
                true, lastGlobalTime);
            this._SetUpdateStateAfter();
            if (this._renderChange) this.GetRuntime().UpdateRender();
            this._OnSetTime()
        }
        _SetTime(time) {
            if (!C3.IsFiniteNumber(time)) time = this.GetTotalTime();
            if (time < 0) this._playheadTime = 0;
            else if (time >= this.GetTotalTime()) this._playheadTime = this.GetTotalTime();
            else this._playheadTime = time
        }
        _SetTimeAndReset(time) {
            if (!C3.IsFiniteNumber(time)) time = this.GetTotalTime();
            if (time < 0) this._playheadTime = 0;
            else if (time >= this.GetTotalTime()) this._playheadTime = this.GetTotalTime();
            else this._playheadTime = time;
            for (const track of this._tracks) track.SetResetState()
        }
        _OnSetTime() {
            if (!C3.Plugins.Timeline || this.constructor !== C3.TimelineState) return;
            C3.Plugins.Timeline.Cnds.PushTriggerTimeline(this);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnTimeSet);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnTimeSetByName);
            this._timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnTimeSetByTags);
            C3.Plugins.Timeline.Cnds.PopTriggerTimeline()
        }
        _CanResume() {
            if (this.GetLoop()) return true;
            else if (this.GetPingPong() && this._pingPongState === PING_PONG_END)
                if (this.IsForwardPlayBack()) {
                    if (this.GetTime() >= this.GetTotalTime()) return false
                } else {
                    if (this.GetTime() <= 0) return false
                }
            else if (!this.GetLoop() && !this.GetPingPong())
                if (this.IsForwardPlayBack()) {
                    if (this.GetTime() >= this.GetTotalTime()) return false
                } else if (this.GetTime() <= 0) return false;
            return true
        }
        Resume() {
            if (this.IsReleased()) return;
            if (this._CanResume()) this.Play(true)
        }
        Play(resume = false) {
            if (this.IsReleased()) return false;
            if (this.IsScheduled()) return false;
            if (this._IsPlaying() && this.IsCompletedTick()) return this._SchedulePlayingTimeline();
            if (this._IsPlaying()) return false;
            if (!this.IsComplete() && !resume && !this.IsImplicitPause()) return false;
            return this._ScheduleStoppedTimeline()
        }
        _SchedulePlayingTimeline() {
            this.SetImplicitPause(false);
            this._timelineManager.RemovePlayingTimeline(this);
            this._timelineManager.ScheduleTimeline(this);
            this.GetPlayPromise();
            return true
        }
        _ScheduleStoppedTimeline() {
            this.SetImplicitPause(false);
            this._timelineManager.ScheduleTimeline(this);
            this.GetPlayPromise();
            return true
        }
        Stop(completed = false) {
            if (this.IsReleased()) return;
            this.SetComplete(completed);
            this._timelineManager.CompleteTimeline(this);
            if (this.IsComplete()) this.ResolvePlayPromise()
        }
        Reset(render = true, beforeChangeLayout = false) {
            if (this.IsReleased()) return;
            if (!this._IsPlaying() && this.IsScheduled()) return this._timelineManager.DeScheduleTimeline(this);
            if (this.IsComplete()) return;
            this.Stop(true);
            if (this.IsForwardPlayBack()) this._SetTime(0);
            else this._SetTime(this.GetTotalTime());
            const time = this.GetTime();
            this._SetUpdateStateBefore();
            if (beforeChangeLayout) this._InterpolateBeforeChangeLayout(time);
            else this._Interpolate(time, false, false, true);
            if (render) this._OnSetTime();
            this._SetUpdateStateAfter();
            if (this._renderChange && render) this.GetRuntime().UpdateRender()
        }
        ResetBeforeChangeLayout() {
            this.Reset(false, true)
        }
        _InterpolateBeforeChangeLayout(time) {
            this._Interpolate(time, false, false, true, NaN, false, true)
        }
        _OnBeforeChangeLayout() {
            if (this.IsReleased()) return true;
            if (!this.GetRuntime().IsLoadingState())
                if (this.HasValidGlobalTracks()) return false;
            this._timelineManager.CompleteTimelineBeforeChangeOfLayout(this);
            if (!this.GetRuntime().IsLoadingState()) this.ResetBeforeChangeLayout();
            return true
        }
        SetInitialStateFromSetTime() {
            this.SetInitialState(true)
        }
        SetInitialState(fromSetTime) {
            if (this.IsMarkedForRemoval()) return;
            if (fromSetTime) {
                this._finishedTriggers = false;
                this._initialStateSet = true;
                this._firstTick = true;
                this._SetUpdateStateBefore();
                for (const track of this._tracks) track.SetInitialState();
                this._SetUpdateStateAfter()
            } else {
                this.SetPlaying(true);
                this.SetScheduled(false);
                this.OnStarted();
                if (this.IsComplete()) {
                    this._completedTick = -1;
                    if (this._pingPongState !== PING_PONG_BEGIN) this._playbackRate = Math.abs(this._playbackRate);
                    this._pingPongState = PING_PONG_BEGIN;
                    this._currentRepeatCount = 1;
                    this._complete = false;
                    this._finishedTriggers = false;
                    this._initialStateSet = true;
                    this._firstTick = true;
                    if (this.IsForwardPlayBack()) this._SetTime(0);
                    else this._SetTime(this.GetTotalTime());
                    this._SetUpdateStateBefore();
                    for (const track of this._tracks) track.SetInitialState();
                    this._SetUpdateStateAfter()
                } else {
                    this._firstTick = true;
                    this._finishedTriggers = false;
                    this._SetUpdateStateBefore();
                    for (const track of this._tracks) track.SetResumeState();
                    this._SetUpdateStateAfter()
                }
            }
        }
        GetRenderChange() {
            return this._renderChange
        }
        _SetUpdateStateBefore() {
            this._hasNestedContent = 0;
            for (const track of this._tracks)
                if (track.IsNested()) this._hasNestedContent = 1
        }
        _SetUpdateStateAfter() {
            this._renderChange = 0;
            for (const track of this._tracks) {
                track._SetUpdateState();
                if (this._renderChange === 0 && track.GetRenderChange() ===
                    1) this._renderChange = 1;
                if (!this._beforeAndAfterTracks && track.GetNeedsBeforeAndAfter() === 1) {
                    if (!this._beforeAndAfterTracks) this._beforeAndAfterTracks = [];
                    this._beforeAndAfterTracksLength = this._beforeAndAfterTracks.push(track)
                }
            }
        }
        Tick(deltaTime, timeScale, deltaTime1) {
            if (this.GetUseSystemTimescale()) {
                if (deltaTime === 0 && this._lastDelta === 0) return;
                this._lastDelta = deltaTime
            } else {
                if (deltaTime1 === 0 && this._lastDelta === 0) return;
                this._lastDelta = deltaTime1;
                deltaTime = deltaTime1;
                timeScale = 1
            }
            const lastTime = this._playheadTime;
            const newDeltaTime = deltaTime * timeScale * this._playbackRate;
            const newTime = lastTime + newDeltaTime;
            const totalTime = this._timelineDataItem._totalTime;
            if (newTime < 0) this._playheadTime = 0;
            else if (newTime >= totalTime) this._playheadTime = totalTime;
            else this._playheadTime = newTime;
            let complete = false;
            let ensureValue = false;
            const loop = this.GetLoop();
            const pingPong = this.GetPingPong();
            if (!loop && !pingPong)
                if (this._playbackRate > 0) {
                    if (this._playheadTime >= totalTime)
                        if (this._currentRepeatCount < this.GetRepeatCount()) {
                            this._currentRepeatCount++;
                            this._SetTimeAndReset(0);
                            ensureValue = true
                        } else {
                            this._SetTime(totalTime);
                            complete = true
                        }
                } else {
                    if (this._playheadTime <= 0)
                        if (this._currentRepeatCount < this.GetRepeatCount()) {
                            this._currentRepeatCount++;
                            this._SetTimeAndReset(totalTime);
                            ensureValue = true
                        } else {
                            this._SetTime(0);
                            complete = true
                        }
                }
            else if (loop && !pingPong)
                if (this._playbackRate > 0) {
                    if (this._playheadTime >= totalTime) {
                        this._SetTimeAndReset(0);
                        ensureValue = true
                    }
                } else {
                    if (this._playheadTime <= 0) {
                        this._SetTimeAndReset(totalTime);
                        ensureValue = true
                    }
                }
            else if (!loop &&
                pingPong)
                if (this._playbackRate > 0) {
                    if (this._playheadTime >= totalTime) {
                        this._SetTime(totalTime);
                        this.SetPlaybackRate(this.GetPlaybackRate() * -1);
                        ensureValue = true;
                        if (this._pingPongState === PING_PONG_END)
                            if (this._currentRepeatCount < this.GetRepeatCount()) {
                                this._currentRepeatCount++;
                                this._pingPongState = PING_PONG_BEGIN
                            } else complete = true;
                        else if (this._pingPongState === PING_PONG_BEGIN) this._pingPongState = PING_PONG_END
                    }
                } else {
                    if (this._playheadTime <= 0) {
                        this._SetTime(0);
                        this.SetPlaybackRate(this.GetPlaybackRate() *
                            -1);
                        ensureValue = true;
                        if (this._pingPongState === PING_PONG_END)
                            if (this._currentRepeatCount < this.GetRepeatCount()) {
                                this._currentRepeatCount++;
                                this._pingPongState = PING_PONG_BEGIN
                            } else complete = true;
                        else if (this._pingPongState === PING_PONG_BEGIN) this._pingPongState = PING_PONG_END
                    }
                }
            else if (loop && pingPong)
                if (this._playbackRate > 0) {
                    if (this._playheadTime >= totalTime) {
                        this._SetTime(totalTime);
                        this.SetPlaybackRate(this.GetPlaybackRate() * -1);
                        ensureValue = true;
                        this._pingPongState++;
                        C3.wrap(this._pingPongState, 0, 2)
                    }
                } else if (this._playheadTime <=
                0) {
                this._SetTime(0);
                this.SetPlaybackRate(this.GetPlaybackRate() * -1);
                ensureValue = true;
                this._pingPongState++;
                C3.wrap(this._pingPongState, 0, 2)
            }
            let i;
            const l = this._tracksLength;
            if (complete) {
                for (i = 0; i < l; i++) this._tracks[i].SetEndState();
                this.Stop(true);
                this.OnCompleted();
                return
            }
            const bal = this._beforeAndAfterTracksLength;
            for (i = 0; i < bal; i++) this._beforeAndAfterTracks[i].BeforeInterpolate();
            if (this._hasNestedContent === 1)
                for (i = 0; i < l; i++) {
                    const track = this._tracks[i];
                    const startOffset = track.GetStartOffset();
                    const localTime = this._playheadTime - startOffset;
                    const lastLocalTime = lastTime - startOffset;
                    if (localTime < 0 && lastLocalTime > 0) {
                        if (startOffset < 0) this._playheadTime = 0;
                        else if (startOffset >= totalTime) this._playheadTime = totalTime;
                        else this._playheadTime = startOffset;
                        track.Interpolate(startOffset, true, false, ensureValue, this._firstTick, false)
                    } else track.Interpolate(this._playheadTime, true, false, ensureValue, this._firstTick, false)
                } else
                    for (i = 0; i < l; i++) this._tracks[i].Interpolate(this._playheadTime, true, false, ensureValue,
                        this._firstTick, false);
            for (i = 0; i < bal; i++) this._beforeAndAfterTracks[i].AfterInterpolate();
            if (this._firstTick) this._firstTick = false
        }
        _Interpolate(time, isTicking = false, setTime = false, ensureValue = false, lastTime = NaN, onTickCall = false, ignoreGlobals = false) {
            for (const track of this._tracks) track.BeforeInterpolate();
            for (const track of this._tracks) {
                let t = time;
                if (typeof lastTime === "number" && !isNaN(lastTime)) {
                    const globalTime = this.GetTime();
                    const localTime = globalTime - track.GetStartOffset();
                    const lastLocalTime =
                        lastTime - track.GetStartOffset();
                    if (localTime < 0 && lastLocalTime > 0) {
                        t = track.GetStartOffset();
                        this._SetTime(t)
                    }
                }
                track.Interpolate(t, isTicking, setTime, ensureValue, this._firstTick, ignoreGlobals)
            }
            for (const track of this._tracks) track.AfterInterpolate();
            if (this._firstTick && onTickCall) this._firstTick = false
        }
        AddTrack() {
            const trackDataItem = this._timelineDataItem.GetTrackData().AddEmptyTrackDataItem();
            const track = C3.TrackState.Create(this, trackDataItem);
            this._tracksLength = this._tracks.push(track);
            return track
        }
        Removed() {
            if (this.IsReleased()) return;
            for (const track of this._tracks) track.TimelineRemoved()
        }
        CleanCaches() {
            for (const track of this._tracks) track.CleanCaches()
        }
        ClearTrackInstances() {
            for (const track of this._tracks) track.ClearInstance()
        }
        SetTrackInstance(trackId, instance) {
            if (!instance) return;
            for (const track of this._tracks) {
                if (!track.IsInstanceTrack()) continue;
                if (trackId) {
                    if (track.GetId() !== trackId) continue;
                    track.SetInstance(instance);
                    this._timelineManager.SetTimelineObjectClassToMap(instance.GetObjectClass(), this);
                    break
                } else {
                    if (track.HasInstance()) continue;
                    track.SetInstance(instance);
                    this._timelineManager.SetTimelineObjectClassToMap(instance.GetObjectClass(), this);
                    break
                }
            }
        }
        HasTrackInstance(instance, trackId) {
            for (const track of this._tracks) {
                if (!track.IsInstanceTrack()) continue;
                if (trackId) {
                    if (trackId === track.GetId() && instance === track.GetInstance()) return true
                } else if (instance === track.GetInstance()) return true
            }
            return false
        }
        HasValidTracks() {
            return this._tracks.some(t => {
                if (t.IsInstanceTrack()) return t.CanInstanceBeValid();
                else return true
            })
        }
        HasValidGlobalTracks() {
            return this._tracks.some(t => {
                if (t.IsInstanceTrack()) {
                    if (!t.CanInstanceBeValid()) return false;
                    const objectClass = t.GetObjectClass();
                    if (!objectClass) return false;
                    return objectClass.IsGlobal()
                } else return false
            })
        }
        GetPropertyTrack(propertyName) {
            for (const track of this.GetTracks())
                for (const propertyTrack of track.GetPropertyTracks())
                    if (propertyTrack.GetPropertyName() === propertyName) return propertyTrack
        }
        GetTrackFromInstance(instance) {
            for (const track of this._tracks)
                if (instance === track.GetInstance()) return track;
            return null
        }
        GetKeyframeWithTags(tags) {
            let tagsArray =
                tags ? tags.split(" ") : [];
            const tagsSet = new Set(tagsArray.map(t => t.toLowerCase().trim()));
            tagsArray = [...tagsSet.values()];
            for (const track of this.GetTracks())
                for (const keyframeDataItem of track.GetKeyframeDataItems()) {
                    const hasAllTags = tagsArray.every(t => keyframeDataItem.HasTag(t));
                    if (hasAllTags) return keyframeDataItem
                }
        }
        GetObjectClasses() {
            const ret = [];
            for (const track of this.GetTracks()) ret.push(track.GetObjectClass());
            return ret.filter(oc => oc)
        }
        _SaveToJson() {
            return {
                "tracksJson": this._SaveTracksToJson(),
                "name": this._name,
                "playheadTime": this.GetTime(),
                "playbackRate": this._playbackRate,
                "pingPongState": this._pingPongState,
                "currentRepeatCount": this._currentRepeatCount,
                "isPlaying": this._isPlaying,
                "isScheduled": this._isScheduled,
                "initialStateSet": this._initialStateSet,
                "finishedTriggers": this._finishedTriggers,
                "complete": this._complete,
                "released": this._released,
                "markedForRemoval": this._markedForRemoval,
                "completedTick": this._completedTick,
                "implicitPause": this._implicitPause,
                "isTemplate": this._isTemplate,
                "tags": this._tags.join(" "),
                "stringTags": this._stringTags,
                "tagsChanged": this._tagsChanged,
                "firstTick": this._firstTick
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this._LoadTracksFromJson(o["tracksJson"]);
            this._name = o["name"];
            this._playheadTime = o["playheadTime"];
            this._playbackRate = o["playbackRate"];
            this._pingPongState = o["pingPongState"];
            this._currentRepeatCount = o["currentRepeatCount"];
            this._isPlaying = !!o["isPlaying"];
            this._isScheduled = !!o["isScheduled"];
            this._initialStateSet = !!o["initialStateSet"];
            this._finishedTriggers =
                o.hasOwnProperty("finishedTriggers") ? !!o["finishedTriggers"] : false;
            this._complete = !!o["complete"];
            this._released = !!o["released"];
            this._markedForRemoval = !!o["markedForRemoval"];
            this._completedTick = o["completedTick"];
            this._implicitPause = !!o["implicitPause"];
            this._isTemplate = !!o["isTemplate"];
            this._tags = o["tags"].split(" ");
            this._stringTags = o["stringTags"];
            this._tagsChanged = !!o["tagsChanged"];
            this._firstTick = !!o["firstTick"]
        }
        _SaveTracksToJson() {
            return this._tracks.map(trackState => trackState._SaveToJson())
        }
        _LoadTracksFromJson(tracksJson) {
            this.ClearTrackInstances();
            tracksJson.forEach((trackJson, i) => {
                const track = this._tracks[i];
                track._LoadFromJson(trackJson)
            });
            this._tracks.filter(track => track.CanInstanceBeValid())
        }
        static _HasTag(tag) {
            const tags = this.GetTags();
            if (tag === "") return tags.length === 1 && tags[0] === "";
            return tags.map(t => t.toLowerCase()).includes(tag.toLowerCase())
        }
        static _GetTagArray(tags) {
            if (C3.IsArray(tags)) return tags.slice(0);
            if (C3.IsString(tags)) return tags.split(" ");
            throw new Error("invalid tags");
        }
        GetITimelineState() {
            if (!this._iTimelineState) this._iTimelineState =
                C3.New(self.ITimelineState, this);
            return this._iTimelineState
        }
    };

}

// timelines/state/trackState.js
{
    'use strict';
    const C3 = self.C3;
    const INSTANCE_TRACK = 0;
    const VALUE_TRACK = 1;
    const AUDIO_TRACK = 2;
    C3.TrackState = class Track extends C3.DefendedBase {
        constructor(timeline, trackDataItem) {
            super();
            this._timeline = timeline;
            this._trackDataItem = trackDataItem;
            this._trackData = trackDataItem.GetTrackData();
            this._instanceUid = NaN;
            this._objectClassIndex = NaN;
            this._instance = null;
            this._worldInfo = null;
            this._isNested = trackDataItem.GetStartOffset() > 0;
            this._initialStateOfNestedSet = false;
            this._endStateOfNestedSet = false;
            this._lastKeyframeDataItem = null;
            this._keyframeDataItems = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            this._propertyTracks = [];
            this.CreatePropertyTrackStates();
            this._worldInfoChange = 0;
            this._renderChange = 0;
            this._needsBeforeAndAfter = 0
        }
        static Create(timeline, trackDataItem) {
            return C3.New(C3.TrackState, timeline, trackDataItem)
        }
        Release() {
            this._keyframeDataItems = null;
            for (const propertyTrack of this._propertyTracks) propertyTrack.Release();
            C3.clearArray(this._propertyTracks);
            this._propertyTracks = null;
            this._timeline = null;
            this._instance = null;
            this._worldInfo = null;
            this._trackDataItem = null;
            this._lastKeyframeDataItem =
                null
        }
        CreatePropertyTrackStates() {
            for (const propertyTrackDataItem of this._trackDataItem.GetPropertyTrackData().propertyTrackDataItems()) this._propertyTracks.push(C3.PropertyTrackState.Create(this, propertyTrackDataItem))
        }
        TimelineRemoved() {
            for (const propertyTrack of this._propertyTracks) propertyTrack.TimelineRemoved()
        }
        CleanCaches() {
            for (const propertyTrack of this._propertyTracks) propertyTrack.CleanCaches();
            this._instance = null;
            this._worldInfo = null
        }
        GetTimeline() {
            return this._timeline
        }
        GetRuntime() {
            return this._timeline.GetRuntime()
        }
        GetKeyframeDataItems() {
            if (this._keyframeDataItems) return this._keyframeDataItems;
            this._keyframeDataItems = this._trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            return this._keyframeDataItems
        }
        GetPropertyTracks() {
            return this._propertyTracks
        }
        GetPropertyTrack(propertyName) {
            for (let i = 0; i < this._propertyTracks.length; i++) {
                const propertyTrack = this._propertyTracks[i];
                if (propertyTrack.GetPropertyName() === propertyName) return propertyTrack
            }
        }
        MaybeGetInstance() {
            if (!this._instance) this.GetInstance()
        }
        IsInstanceValid() {
            if (!this._instance) return false;
            return !this._instance.IsDestroyed()
        }
        CanInstanceBeValid() {
            if (!this.IsInstanceTrack()) return false;
            const uid = this.GetInstanceUID();
            const instance = this.GetRuntime().GetInstanceByUID(uid);
            if (!instance) return false;
            return !instance.IsDestroyed()
        }
        GetObjectClass() {
            if (!this.IsInstanceTrack()) return;
            const index = this.GetObjectClassIndex();
            if (index === -1) return;
            return this.GetRuntime().GetObjectClassByIndex(index)
        }
        ClearInstance() {
            this._instance = null;
            this._instanceUid = -1;
            this._worldInfo = null;
            this._objectClassIndex = -1
        }
        HasInstance() {
            return !!this._instance
        }
        GetInstance() {
            if (this._instance && this.IsInstanceValid()) return this._instance;
            const uid = this.GetInstanceUID();
            this._instance = this.GetRuntime().GetInstanceByUID(uid);
            return this._instance
        }
        SetInstance(instance) {
            if (this._instance === instance) return;
            this.CleanCaches();
            this._instance = instance;
            this._objectClassIndex = instance.GetObjectClass().GetIndex();
            this._instanceUid = instance.GetUID();
            this._worldInfo = instance.GetWorldInfo();
            for (const item of this.propertyTrackItems()) {
                const propertyTrack = item.propertyTrack;
                const sourceAdapter = item.sourceAdapter;
                const id = propertyTrack.GetSourceAdapterId();
                switch (id) {
                    case "instance-variable":
                        {
                            const index = sourceAdapter.GetEditorIndex();
                            const objectClass = instance.GetObjectClass();
                            const i = objectClass.GetInstanceVariableIndexByName(item.name);
                            const name = objectClass.GetInstanceVariableName(i);
                            const type = objectClass.GetInstanceVariableType(i);
                            if (name === item.name && type === item.type) sourceAdapter.UpdateInstanceVariableIndex(i);
                            break
                        }
                    case "behavior":
                        {
                            const timelineBehaviorType = item.behaviorType;
                            const trackObjectClass = this.GetObjectClass();
                            const objectClass = instance.GetObjectClass();
                            const instanceBehaviorType = sourceAdapter.GetBehaviorType(objectClass);
                            if (timelineBehaviorType && instanceBehaviorType) {
                                const name = timelineBehaviorType.GetName();
                                const templateBehaviorIndex = trackObjectClass.GetBehaviorIndexByName(name);
                                const instanceBehaviorIndex = objectClass.GetBehaviorIndexByName(name);
                                const propertyIndex = sourceAdapter.GetEditorIndex();
                                sourceAdapter.UpdateBehaviorTypeSid(instanceBehaviorType.GetSID())
                            }
                            break
                        }
                }
            }
        }* propertyTrackItems() {
            for (const propertyTrack of this._propertyTracks) {
                const sourceAdapter =
                    propertyTrack.GetSourceAdapter();
                const objectClass = this.GetObjectClass();
                const ret = {
                    propertyTrack: propertyTrack,
                    sourceAdapter: sourceAdapter
                };
                switch (propertyTrack.GetSourceAdapterId()) {
                    case "world-instance":
                        {
                            ret.property = propertyTrack.GetPropertyName();
                            break
                        }
                    case "instance-variable":
                        {
                            const index = sourceAdapter.GetEditorIndex();ret.name = objectClass.GetInstanceVariableName(index);ret.type = objectClass.GetInstanceVariableType(index);
                            break
                        }
                    case "effect":
                        {
                            const effectList = objectClass.GetEffectList();
                            const effectType =
                                sourceAdapter.GetEffectType(effectList);ret.effectType = effectType;
                            break
                        }
                    case "behavior":
                        {
                            const behaviorType = sourceAdapter.GetBehaviorType(objectClass);ret.behaviorType = behaviorType;
                            break
                        }
                    case "plugin":
                        {
                            ret.plugin = objectClass.GetPlugin();
                            break
                        }
                    case "value":
                        {
                            break
                        }
                }
                yield ret
            }
        }
        GetWorldInfo() {
            if (this._worldInfo && this.IsInstanceValid()) return this._worldInfo;
            const instance = this.GetInstance();
            if (instance) this._worldInfo = instance.GetWorldInfo();
            return this._worldInfo
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        GetInstanceUID() {
            if (this._instanceUid) return this._instanceUid;
            return this._trackDataItem.GetInstanceUID()
        }
        SetInstanceUID(uid) {
            this._trackDataItem.SetInstanceUID(uid)
        }
        GetInterpolationMode() {
            return this._trackDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(im) {
            this._trackDataItem.SetInterpolationMode(im)
        }
        GetResultMode() {
            return this._trackDataItem.GetResultMode()
        }
        GetId() {
            return this._trackDataItem.GetId()
        }
        GetStartOffset() {
            return this._trackDataItem.GetStartOffset()
        }
        GetLocalTotalTime() {
            return this._trackDataItem.GetLocalTotalTime()
        }
        SetLocalTotalTime(t) {
            this._trackDataItem.SetLocalTotalTime(t)
        }
        SetResultMode(rm) {
            this._trackDataItem.SetResultMode(rm)
        }
        SetEase(e) {
            for (const keyframeDataItem of this.GetKeyframeDataItems()) keyframeDataItem.SetEase(e);
            for (const propertyTrack of this.GetPropertyTracks()) propertyTrack.SetEase(e)
        }
        GetEnable() {
            return this._trackDataItem.GetEnable()
        }
        SetEnable(e) {
            this._trackDataItem.SetEnable(e)
        }
        GetObjectClassIndex() {
            if (!isNaN(this._objectClassIndex)) return this._objectClassIndex;
            return this._trackDataItem.GetObjectClassIndex()
        }
        SetObjectClassIndex(objectClassIndex) {
            this._trackDataItem.SetObjectClassIndex(objectClassIndex)
        }
        SetOriginalWidth(w) {
            this._trackDataItem.SetOriginalWidth(w)
        }
        GetOriginalWidth() {
            const instance = this.GetInstance();
            if (instance) {
                const sdkIntance = instance.GetSdkInstance();
                if (sdkIntance.IsOriginalSizeKnown()) return instance.GetSdkInstance().GetOriginalWidth()
            }
            return this._trackDataItem.GetOriginalWidth()
        }
        SetOriginalHeight(h) {
            this._trackDataItem.SetOriginalHeight(h)
        }
        GetOriginalHeight() {
            const instance = this.GetInstance();
            if (instance) {
                const sdkIntance = instance.GetSdkInstance();
                if (sdkIntance.IsOriginalSizeKnown()) return instance.GetSdkInstance().GetOriginalHeight()
            }
            return this._trackDataItem.GetOriginalHeight()
        }
        GetType() {
            return this._trackDataItem.GetType()
        }
        GetName() {
            return this._trackDataItem.GetName()
        }
        IsInstanceTrack() {
            return this.GetType() ===
                INSTANCE_TRACK
        }
        IsValueTrack() {
            return this.GetType() === VALUE_TRACK
        }
        IsAudioTrack() {
            return this.GetType() === AUDIO_TRACK
        }
        GetWorldInfoChange() {
            return this._worldInfoChange
        }
        GetRenderChange() {
            return this._renderChange
        }
        GetNeedsBeforeAndAfter() {
            return this._needsBeforeAndAfter
        }
        IsNested() {
            return this._isNested
        }
        SetResetState() {
            for (const propertyTrack of this._propertyTracks) propertyTrack.SetResetState()
        }
        SetInitialState() {
            this.MaybeGetInstance();
            if (!this.IsInstanceValid() && this.IsInstanceTrack()) return;
            const timeline =
                this.GetTimeline();
            const isForwardPlayBack = timeline.IsForwardPlayBack();
            const time = isForwardPlayBack ? 0 : this.GetLocalTotalTime();
            for (const propertyTrack of this._propertyTracks) {
                propertyTrack.SetInitialState(time);
                if (this._worldInfoChange === 0 && propertyTrack.GetWorldInfoChange() === 1) this._worldInfoChange = 1;
                if (this._renderChange === 0 && propertyTrack.GetRenderChange() === 1) this._renderChange = 1
            }
            this._needsBeforeAndAfter = 0;
            const nba = this._propertyTracks.some(pt => pt.GetNeedsBeforeAndAfter());
            if (nba) this._needsBeforeAndAfter =
                1;
            this._lastKeyframeDataItem = this._GetLastKeyFrameBeforeTime(time);
            this._initialStateOfNestedSet = false;
            this._endStateOfNestedSet = false;
            this.Interpolate(time);
            this.OnKeyframeReached(this._GetLastKeyFrameBeforeTime(time))
        }
        SetResumeState() {
            this.MaybeGetInstance();
            if (!this.IsInstanceValid() && this.IsInstanceTrack()) return;
            const playbackDirection = this._timeline.IsForwardPlayBack();
            const time = this._timeline.GetTime() - this.GetStartOffset();
            this._lastKeyframeDataItem = this._GetLastKeyFrameBeforeTime(time);
            for (const propertyTrack of this._propertyTracks) propertyTrack.SetResumeState(time)
        }
        SetEndState() {
            if (this.GetTimeline().IsComplete()) return;
            this.MaybeGetInstance();
            if (!this.IsInstanceValid() && this.IsInstanceTrack()) return;
            if (!this._isNested) {
                const time = this._timeline.GetTime();
                const totalTime = this.GetStartOffset() + this.GetLocalTotalTime();
                if (time >= totalTime) this.Interpolate(this.GetLocalTotalTime(), true, false, true, false, false, true);
                else if (time <= 0) this.Interpolate(0, true, false, true, false, false, true)
            }
        }
        _SetUpdateState() {
            for (let i =
                    0, l = this._propertyTracks.length; i < l; i++) {
                const propertyTrack = this._propertyTracks[i];
                propertyTrack._SetUpdateState();
                if (this._worldInfoChange === 0 && propertyTrack.GetWorldInfoChange() === 1) this._worldInfoChange = 1;
                if (this._renderChange === 0 && propertyTrack.GetRenderChange() === 1) this._renderChange = 1
            }
        }
        BeforeInterpolate() {
            const l = this._propertyTracks.length;
            for (let i = 0; i < l; i++) this._propertyTracks[i].BeforeInterpolate()
        }
        Interpolate(time, isTicking = false, setTime = false, ensureValue = false, firstTick = false, ignoreGlobals =
            false, endState = false) {
            if (!this._instance) this.GetInstance();
            const instanceValid = this._instance && !this._instance.IsDestroyed();
            const isInstanceTrack = this._trackDataItem._type === INSTANCE_TRACK;
            if (!instanceValid && isInstanceTrack) return;
            if (ignoreGlobals && isInstanceTrack && this.GetObjectClass().IsGlobal()) return;
            time = time - this.GetStartOffset();
            if (time < 0) return;
            this.MaybeSetInitialStateOfNestedTrack(time, isTicking);
            this.MaybeTriggerKeyframeReachedConditions(time, isTicking, firstTick);
            for (let i = 0, l = this._propertyTracks.length; i <
                l; i++) this._propertyTracks[i].Interpolate(time, setTime, ensureValue, endState);
            this.MaybeSetEndStateOfNestedTrack(time, isTicking);
            if (this._worldInfoChange !== 0) {
                if (!this._worldInfo) this._worldInfo = this._instance.GetWorldInfo();
                if (this._worldInfo) this._worldInfo.SetBboxChanged()
            }
        }
        AfterInterpolate() {
            const l = this._propertyTracks.length;
            for (let i = 0; i < l; i++) this._propertyTracks[i].AfterInterpolate()
        }
        MaybeSetInitialStateOfNestedTrack(time, isTicking) {
            if (!isTicking) return;
            if (!this._isNested) return;
            if (this._initialStateOfNestedSet) return;
            const timeline = this.GetTimeline();
            if (timeline.IsForwardPlayBack()) {
                if (time < 0) return;
                for (const propertyTrack of this._propertyTracks) propertyTrack.Interpolate(0, false, true)
            } else {
                if (time > this.GetLocalTotalTime()) return;
                for (const propertyTrack of this._propertyTracks) propertyTrack.Interpolate(this.GetLocalTotalTime(), false, true)
            }
            for (const propertyTrack of this._propertyTracks) propertyTrack.SetInitialState();
            this._initialStateOfNestedSet = true
        }
        MaybeSetEndStateOfNestedTrack(time, isTicking) {
            if (!isTicking) return;
            if (!this._isNested) return;
            if (this._endStateOfNestedSet) return;
            const timeline = this.GetTimeline();
            if (timeline.IsForwardPlayBack()) {
                if (time >= this.GetLocalTotalTime()) {
                    for (const propertyTrack of this._propertyTracks) propertyTrack.Interpolate(this.GetLocalTotalTime(), false, true);
                    this._endStateOfNestedSet = true
                }
            } else if (time <= 0) {
                for (const propertyTrack of this._propertyTracks) propertyTrack.Interpolate(0, false, true);
                this._endStateOfNestedSet = true
            }
        }
        MaybeTriggerKeyframeReachedConditions(time, isTicking, firstTick) {
            if (firstTick) return;
            if (!isTicking) return;
            if (!C3.Plugins.Timeline) return;
            const timeline = this.GetTimeline();
            const nextKeyframe = this._lastKeyframeDataItem.GetNext();
            const lastTime = this._lastKeyframeDataItem.GetTime();
            const nextTime = nextKeyframe ? nextKeyframe.GetTime() : timeline.GetTotalTime();
            if (time <= lastTime || time >= nextTime) {
                this._lastKeyframeDataItem = this._trackData.GetFirstKeyFrameDataItemLowerOrEqualThan(time, this._trackDataItem);
                if (timeline.IsForwardPlayBack()) {
                    if (nextKeyframe) this.OnKeyframeReached(this._lastKeyframeDataItem)
                } else {
                    const nextKeyframe =
                        this._lastKeyframeDataItem.GetNext();
                    if (nextKeyframe) this.OnKeyframeReached(nextKeyframe)
                }
            }
        }
        _GetLastKeyFrameBeforeTime(time) {
            const keyframeDataItem = this._trackData.GetKeyFrameDataItemAtTime(time, this._trackDataItem);
            if (keyframeDataItem) return keyframeDataItem;
            else return this._trackData.GetFirstKeyFrameDataItemLowerOrEqualThan(time, this._trackDataItem)
        }
        OnKeyframeReached(keyframeDataItem) {
            const timeline = this.GetTimeline();
            const timelineManager = timeline.GetTimelineManager();
            C3.Plugins.Timeline.Cnds.PushTriggerTimeline(timeline);
            C3.Plugins.Timeline.Cnds.PushTriggerKeyframe(keyframeDataItem);
            timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnAnyKeyframeReached);
            timelineManager.Trigger(C3.Plugins.Timeline.Cnds.OnKeyframeReached);
            C3.Plugins.Timeline.Cnds.PopTriggerTimeline(timeline);
            C3.Plugins.Timeline.Cnds.PopTriggerKeyframe(keyframeDataItem)
        }
        AddKeyframe() {
            const keyframeData = this._trackDataItem.GetKeyframeData();
            const keyframeDataItem = keyframeData.AddEmptyKeyframeDataItem();
            return keyframeDataItem
        }
        AddPropertyTrack() {
            const propertyTrackData =
                this._trackDataItem.GetPropertyTrackData();
            const propertyTrackDataItem = propertyTrackData.AddEmptyPropertyTrackDataItem();
            const propertyTrack = C3.PropertyTrackState.Create(this, propertyTrackDataItem);
            this._propertyTracks.push(propertyTrack);
            return propertyTrack
        }
        DeleteKeyframes(match) {
            const keyframeData = this._trackDataItem.GetKeyframeData();
            keyframeData.DeleteKeyframeDataItems(match)
        }
        DeletePropertyKeyframes(match) {
            for (const propertyTrack of this._propertyTracks) propertyTrack.DeletePropertyKeyframes(match)
        }
        SaveState() {
            for (const propertyTrack of this._propertyTracks) propertyTrack.SaveState()
        }
        CompareInitialStateWithCurrent() {
            this.MaybeGetInstance();
            if (!this.IsInstanceValid() && this.IsInstanceTrack()) return;
            for (const propertyTrack of this._propertyTracks) propertyTrack.CompareInitialStateWithCurrent()
        }
        CompareSaveStateWithCurrent() {
            this.MaybeGetInstance();
            if (!this.IsInstanceValid() && this.IsInstanceTrack()) return;
            let difference = false;
            for (const propertyTrack of this._propertyTracks) {
                const diff = propertyTrack.CompareSaveStateWithCurrent();
                if (!difference && diff) difference = true
            }
            if (difference) {
                const keyframeDataItem = this.AddKeyframe();
                keyframeDataItem.SetTime(this.GetTimeline().GetTime());
                keyframeDataItem.SetEase("noease");
                keyframeDataItem.SetEnable(true);
                keyframeDataItem.SetTags("")
            }
        }
        _SaveToJson() {
            const instance = this.GetInstance();
            const uid = instance ? instance.GetUID() : this.GetInstanceUID();
            return {
                "propertyTracksJson": this._SavePropertyTracksToJson(),
                "lastKeyframeDataItemJson": this._SaveLastKeyframeDataItemToJson(),
                "initialStateOfNestedSet": this._initialStateOfNestedSet,
                "endStateOfNestedSet": this._endStateOfNestedSet,
                "instanceUid": uid
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this._LoadPropertyTracksFromJson(o["propertyTracksJson"]);
            this._LoadLastKeyframeDataItemFromJson(o["lastKeyframeDataItemJson"]);
            this._LoadInstanceFromJson(o["instanceUid"]);
            this._initialStateOfNestedSet = false;
            if (o.hasOwnProperty["initialStateOfNestedSet"]) this._initialStateOfNestedSet = o["initialStateOfNestedSet"];
            this._endStateOfNestedSet = false;
            if (o.hasOwnProperty["endStateOfNestedSet"]) this._endStateOfNestedSet = o["endStateOfNestedSet"];
            for (const propertyTrack of this._propertyTracks) {
                if (this._worldInfoChange === 0 && propertyTrack.GetWorldInfoChange() === 1) this._worldInfoChange =
                    1;
                if (this._renderChange === 0 && propertyTrack.GetRenderChange() === 1) this._renderChange = 1
            }
            this._needsBeforeAndAfter = 0;
            if (this._propertyTracks.some(pt => pt.GetNeedsBeforeAndAfter())) this._needsBeforeAndAfter = 1
        }
        _SaveLastKeyframeDataItemToJson() {
            const keyframeData = this._trackDataItem.GetKeyframeData();
            return keyframeData.GetKeyframeDataItemIndex(this._lastKeyframeDataItem)
        }
        _SavePropertyTracksToJson() {
            return this._propertyTracks.map(propertyTrackState => propertyTrackState._SaveToJson())
        }
        _LoadPropertyTracksFromJson(propertyTracksJson) {
            propertyTracksJson.forEach((propertyTrackJson,
                i) => {
                const propertyTrack = this._propertyTracks[i];
                propertyTrack._LoadFromJson(propertyTrackJson)
            })
        }
        _LoadInstanceFromJson(uid) {
            if (!C3.IsFiniteNumber(uid)) return;
            const instance = this.GetRuntime().GetInstanceByUID(uid);
            if (!instance) return;
            const timeline = this.GetTimeline();
            timeline.SetTrackInstance(this._trackDataItem.GetId(), instance)
        }
        _LoadLastKeyframeDataItemFromJson(lastKeyframeDataItemIndex) {
            const keyframeData = this._trackDataItem.GetKeyframeData();
            this._lastKeyframeDataItem = keyframeData.GetKeyframeDataItemFromIndex(lastKeyframeDataItemIndex)
        }
    };

}

// timelines/state/propertyTrackState.js
{
    'use strict';
    const C3 = self.C3;
    C3.PropertyTrackState = class PropertyTrack extends C3.DefendedBase {
        constructor(track, propertyTrackDataItem) {
            super();
            this._track = track;
            this._propertyTrackDataItem = propertyTrackDataItem;
            this._propertyTrackData = propertyTrackDataItem.GetPropertyTrackData();
            this._worldInfoChange = 0;
            this._renderChange = 0;
            this._needsBeforeAndAfter = 0;
            this._sourceAdapter = this.GetSourceAdapter();
            this._propertyKeyframeDataItems = this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray();
            this._lastPropertyKeyframeDataItem =
                null;
            this._absoluteValueObject = null
        }
        static Create(track, propertyTrackDataItem) {
            return C3.New(C3.PropertyTrackState, track, propertyTrackDataItem)
        }
        Release() {
            this._track = null;
            if (this._sourceAdapter) {
                this._sourceAdapter.Release();
                this._sourceAdapter = null
            }
            this._propertyKeyframeDataItems = null;
            this._propertyTrackDataItem = null;
            this._propertyTrackData = null
        }
        GetWorldInfoChange() {
            return this._worldInfoChange
        }
        GetRenderChange() {
            return this._renderChange
        }
        GetNeedsBeforeAndAfter() {
            return this._needsBeforeAndAfter
        }
        HasAbsoluteValueObject() {
            return !!this._absoluteValueObject
        }
        SetAbsoluteValueObject(avo) {
            this._absoluteValueObject =
                avo
        }
        GetAbsoluteValueObject() {
            return this._absoluteValueObject
        }
        GetTrack() {
            return this._track
        }
        GetPropertyTrackDataItem() {
            return this._propertyTrackDataItem
        }
        GetPropertyTrackData() {
            return this._propertyTrackData
        }
        GetTimeline() {
            return this._track.GetTimeline()
        }
        GetRuntime() {
            return this._track.GetRuntime()
        }
        GetInstance() {
            return this._track.GetInstance()
        }
        GetSourceAdapter() {
            if (this._sourceAdapter) return this._sourceAdapter;
            const id = this._propertyTrackDataItem.GetSourceAdapterId();
            let ret;
            switch (id) {
                case "behavior":
                    ret =
                        new C3.PropertyTrackState.BehaviorSourceAdapter(this);
                    break;
                case "effect":
                    ret = new C3.PropertyTrackState.EffectSourceAdapter(this);
                    this._renderChange = 1;
                    break;
                case "instance-variable":
                    ret = new C3.PropertyTrackState.InstanceVariableSourceAdapter(this);
                    break;
                case "plugin":
                    ret = new C3.PropertyTrackState.PluginSourceAdapter(this);
                    this._renderChange = 1;
                    break;
                case "world-instance":
                    ret = new C3.PropertyTrackState.PropertySourceAdapter(this);
                    this._renderChange = 1;
                    this._worldInfoChange = 1;
                    break;
                case "value":
                    ret = new C3.PropertyTrackState.ValueSourceAdapter(this);
                    break;
                case "audio":
                    ret = new C3.PropertyTrackState.AudioSourceAdapter(this);
                    break
            }
            this._sourceAdapter = ret;
            return this._sourceAdapter
        }
        GetSourceAdapterId() {
            return this._propertyTrackDataItem.GetSourceAdapterId()
        }
        SetSourceAdapterId(said) {
            this._propertyTrackDataItem.SetSourceAdapterId(said)
        }
        GetSourceAdapterArgs() {
            return this._propertyTrackDataItem.GetSourceAdapterArguments()
        }
        SetSourceAdapterArgs(sargs) {
            this._propertyTrackDataItem.SetSourceAdapterArguments(sargs)
        }
        GetSourceAdapterValue() {
            return this.GetSourceAdapter().GetValue()
        }
        GetPropertyName() {
            return this._propertyTrackDataItem.GetProperty()
        }
        SetPropertyName(pn) {
            this._propertyTrackDataItem.SetProperty(pn)
        }
        GetPropertyType() {
            return this._propertyTrackDataItem.GetType()
        }
        SetPropertyType(pt) {
            this._propertyTrackDataItem.SetType(pt)
        }
        GetPropertyKeyframeType() {
            return this.GetPropertyTrackData().GetFirstPropertyKeyframeDataItem(this._propertyTrackDataItem).GetType()
        }
        GetMin() {
            return this._propertyTrackDataItem.GetMin()
        }
        SetMin(min) {
            this._propertyTrackDataItem.SetMin(min)
        }
        GetMax() {
            return this._propertyTrackDataItem.GetMax()
        }
        SetMax(max) {
            this._propertyTrackDataItem.SetMax(max)
        }
        GetEnable() {
            return this._propertyTrackDataItem.GetEnable()
        }
        SetEnable(e) {
            this._propertyTrackDataItem.SetEnable(e)
        }
        GetInterpolationMode() {
            return this._propertyTrackDataItem.GetInterpolationMode()
        }
        SetInterpolationMode(im) {
            this._propertyTrackDataItem.SetInterpolationMode(im)
        }
        GetResultMode() {
            return this._propertyTrackDataItem.GetResultMode()
        }
        SetResultMode(rm) {
            this._propertyTrackDataItem.SetResultMode(rm)
        }
        SetEase(e) {
            for (const propertyKeyframeDataItem of this.GetPropertyKeyframeDataItems()) propertyKeyframeDataItem.SetEase(e)
        }
        CanHavePropertyKeyframes() {
            return this._propertyTrackDataItem.CanHavePropertyKeyframes()
        }
        GetPropertyKeyframeDataItems() {
            if (this._propertyKeyframeDataItems) return this._propertyKeyframeDataItems;
            this._propertyKeyframeDataItems = this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArray();
            return this._propertyKeyframeDataItems
        }
        GetPropertyKeyframeDataItemArrayIncludingDisabled() {
            return this._propertyTrackDataItem.GetPropertyKeyframeData().GetPropertyKeyframeDataItemArrayIncludingDisabled()
        }
        GetPropertyKeyFrameDataItemAtTime(time) {
            return this._propertyTrackData.GetPropertyKeyFrameDataItemAtTime(time, this._propertyTrackDataItem)
        }
        GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time) {
            return this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time,
                this._propertyTrackDataItem)
        }
        GetPropertyKeyframeDataItemPairForTime(time) {
            let start = this._propertyTrackData.GetPropertyKeyFrameDataItemAtTime(time, this._propertyTrackDataItem);
            let end;
            if (start) end = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherThan(time, this._propertyTrackDataItem);
            else {
                start = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time, this._propertyTrackDataItem);
                end = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(time, this._propertyTrackDataItem)
            }
            return {
                start,
                end
            }
        }* GetPropertyKeyframeValues() {
            for (const propertyKeyframeDataItem of this.GetPropertyKeyframeDataItems()) yield propertyKeyframeDataItem.GetValueWithResultMode()
        }* GetPropertyKeyframeTimes() {
            for (const propertyKeyframeDataItem of this.GetPropertyKeyframeDataItems()) yield propertyKeyframeDataItem.GetTime()
        }
        TimelineRemoved() {
            this.GetSourceAdapter().TimelineRemoved()
        }
        CleanCaches() {
            this.GetSourceAdapter().CleanCaches()
        }
        GetCurrentState() {
            return this.GetSourceAdapter().GetCurrentState()
        }
        SetResetState() {
            this.GetSourceAdapter().SetResetState()
        }
        SetInitialState(time) {
            this.GetSourceAdapter().SetInitialState();
            this._lastPropertyKeyframeDataItem = this._GetLastPropertyKeyFrameBeforeTime(time);
            this._SetUpdateState()
        }
        SetResumeState(time) {
            this.GetSourceAdapter().SetResumeState();
            this._lastPropertyKeyframeDataItem = this._GetLastPropertyKeyFrameBeforeTime(time)
        }
        _SetUpdateState() {
            const track = this.GetTrack();
            this._needsBeforeAndAfter = 0;
            if (track.IsInstanceTrack()) {
                const timeline = this.GetTimeline();
                const instance = track.GetInstance();
                const sourceAdapter = this.GetSourceAdapter();
                const propertyName = this.GetPropertyName();
                const mayNeedBeforeAndAfterInterpolate = sourceAdapter.MayNeedBeforeAndAfterInterpolate();
                if (mayNeedBeforeAndAfterInterpolate) {
                    const similarPropertyTracks = timeline.GetSimilarPropertyTracks(instance, sourceAdapter, propertyName);
                    if (similarPropertyTracks && similarPropertyTracks.length) this._needsBeforeAndAfter = 1
                } else this._needsBeforeAndAfter = 0
            }
        }
        _GetLastPropertyKeyFrameBeforeTime(time) {
            const timeline = this.GetTimeline();
            const propertyKeyframeDataItem = this._propertyTrackData.GetPropertyKeyFrameDataItemAtTime(time,
                this._propertyTrackDataItem);
            if (propertyKeyframeDataItem) return propertyKeyframeDataItem;
            else if (timeline.IsForwardPlayBack()) return this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time, this._propertyTrackDataItem);
            else return this._propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(time, this._propertyTrackDataItem)
        }
        BeforeInterpolate() {
            this._sourceAdapter.BeforeInterpolate()
        }
        Interpolate(time, setTime = false, ensureValue = false, endState = false) {
            let start;
            let end;
            if (setTime) start = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time, this._propertyTrackDataItem);
            else {
                if (this._lastPropertyKeyframeDataItem) {
                    const timeline = this.GetTimeline();
                    const nextPropertyKeyframe = this._lastPropertyKeyframeDataItem.GetNext();
                    const lastTime = this._lastPropertyKeyframeDataItem.GetTime();
                    const nextTime = nextPropertyKeyframe ? nextPropertyKeyframe.GetTime() : timeline.GetTotalTime();
                    if (time <= lastTime || time >= nextTime) this._lastPropertyKeyframeDataItem = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time,
                        this._propertyTrackDataItem)
                } else this._lastPropertyKeyframeDataItem = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time, this._propertyTrackDataItem);
                start = this._lastPropertyKeyframeDataItem
            }
            if (start) end = start.GetNext();
            this._sourceAdapter.Interpolate(time, start, end, setTime, ensureValue, endState)
        }
        GetInterpolatedValue(time) {
            if (this._lastPropertyKeyframeDataItem) {
                const timeline = this.GetTimeline();
                const nextPropertyKeyframe = this._lastPropertyKeyframeDataItem.GetNext();
                const lastTime =
                    this._lastPropertyKeyframeDataItem.GetTime();
                const nextTime = nextPropertyKeyframe ? nextPropertyKeyframe.GetTime() : timeline.GetTotalTime();
                if (time <= lastTime || time >= nextTime) this._lastPropertyKeyframeDataItem = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time, this._propertyTrackDataItem)
            } else this._lastPropertyKeyframeDataItem = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time, this._propertyTrackDataItem);
            const start = this._lastPropertyKeyframeDataItem;
            const end = start.GetNext();
            return this._sourceAdapter.GetInterpolatedValue(time, start, end)
        }
        GetInterpolatedValueFast(time, start, end) {
            return this._sourceAdapter.GetInterpolatedValue(time, start, end)
        }
        AfterInterpolate() {
            this._sourceAdapter.AfterInterpolate()
        }
        static GetStartPropertyKeyframeForTime(time, propertyTrack) {
            const propertyTrackDataItem = propertyTrack.GetPropertyTrackDataItem();
            const propertyTrackData = propertyTrack._propertyTrackData;
            return propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time,
                propertyTrackDataItem)
        }
        static GetEndPropertyKeyframeForTime(time, propertyTrack) {
            const propertyTrackDataItem = propertyTrack.GetPropertyTrackDataItem();
            const propertyTrackData = propertyTrack._propertyTrackData;
            return propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(time, propertyTrackDataItem)
        }
        AddPropertyKeyframe() {
            const propertyKeyframeData = this._propertyTrackDataItem.GetPropertyKeyframeData();
            const propertyKeyframeDataItem = propertyKeyframeData.AddEmptyPropertyKeyframeDataItem();
            this._lastPropertyKeyframeDataItem =
                null;
            return propertyKeyframeDataItem
        }
        DeletePropertyKeyframes(match) {
            this._lastPropertyKeyframeDataItem = null;
            const propertyKeyframeData = this._propertyTrackDataItem.GetPropertyKeyframeData();
            propertyKeyframeData.DeletePropertyKeyframeDataItems(match)
        }
        SaveState() {
            this.GetSourceAdapter().SaveState()
        }
        CompareInitialStateWithCurrent() {
            const difference = this.GetSourceAdapter().CompareInitialStateWithCurrent();
            if (difference) {
                const propertyKeyframeDataItem = this._propertyTrackData.GetFirstPropertyKeyframeDataItem(this._propertyTrackDataItem);
                const currentState = this.GetSourceAdapter().GetCurrentState();
                propertyKeyframeDataItem.SetAbsoluteValue(currentState)
            }
        }
        CompareSaveStateWithCurrent() {
            const difference = this.GetSourceAdapter().CompareSaveStateWithCurrent();
            if (difference) this.AddPropertyKeyframeAtCurrentTime();
            this.GetSourceAdapter().ClearSaveState();
            return difference
        }
        AddPropertyKeyframeAtCurrentTime() {
            const time = this.GetTimeline().GetTime();
            const sourceAdapter = this.GetSourceAdapter();
            const startPropertyKeyframe = C3.PropertyTrackState.GetStartPropertyKeyframeForTime(time,
                this);
            const propertyKeyframeDataItem = this.AddPropertyKeyframe();
            propertyKeyframeDataItem.SetType(startPropertyKeyframe.GetType());
            propertyKeyframeDataItem.SetTime(time);
            propertyKeyframeDataItem.SetEase(startPropertyKeyframe.GetEase());
            propertyKeyframeDataItem.SetEnable(true);
            propertyKeyframeDataItem.SetValue(sourceAdapter.GetValueAtTime());
            propertyKeyframeDataItem.SetAbsoluteValue(sourceAdapter.GetCurrentState())
        }
        _SaveToJson() {
            return {
                "sourceAdapterJson": this.GetSourceAdapter()._SaveToJson()
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this.GetSourceAdapter()._LoadFromJson(o["sourceAdapterJson"])
        }
    };

}

// timelines/state/propertySourceAdapters/propertySourceAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const NS = C3.PropertyTrackState;
    NS.PropertySourceAdapter = class PropertySourceAdapter {
        constructor(propertyTrack) {
            this._propertyTrack = propertyTrack;
            this._propertyAdapter = null;
            this.GetPropertyAdapter()
        }
        Release() {
            if (this._propertyAdapter) {
                this._propertyAdapter.Release();
                this._propertyAdapter = null
            }
            this._propertyTrack = null
        }
        MayNeedBeforeAndAfterInterpolate() {
            return this._propertyAdapter.MayNeedBeforeAndAfterInterpolate()
        }
        GetPropertyTrack() {
            return this._propertyTrack
        }
        TimelineRemoved() {
            if (this._propertyAdapter) this._propertyAdapter.TimelineRemoved()
        }
        CleanCaches() {
            if (this._propertyAdapter) this._propertyAdapter.CleanCaches()
        }
        GetPropertyAdapter() {
            if (this._propertyAdapter) return this._propertyAdapter;
            this._propertyAdapter =
                this._CreatePropertyAdapter();
            return this._propertyAdapter
        }
        GetEditorIndex() {}
        GetIndex() {
            return this.GetEditorIndex()
        }
        GetTarget() {}
        SetResetState() {
            this.GetPropertyAdapter().SetResetState()
        }
        SetInitialState() {
            this.GetPropertyAdapter().SetInitialState()
        }
        SetResumeState() {
            this.GetPropertyAdapter().SetResumeState()
        }
        BeforeInterpolate() {
            this._propertyAdapter.BeforeChangeProperty()
        }
        Interpolate(time, start, end, setTime, ensureValue, endState) {
            const type = this._propertyTrack.GetPropertyKeyframeType();
            let value;
            switch (type) {
                case "numeric":
                    {
                        value =
                        NS.NumericTypeAdapter.Interpolate(time, start, end, this._propertyTrack);
                        break
                    }
                case "angle":
                    {
                        value = NS.AngleTypeAdapter.Interpolate(time, start, end, this._propertyTrack);
                        break
                    }
                case "boolean":
                    {
                        value = NS.BooleanTypeAdapter.Interpolate(time, start, end, this._propertyTrack);
                        break
                    }
                case "color":
                    {
                        value = NS.ColorTypeAdapter.Interpolate(time, start, end, this._propertyTrack);
                        break
                    }
                case "text":
                    {
                        value = NS.TextTypeAdapter.Interpolate(time, start, end, this._propertyTrack);
                        break
                    }
            }
            this._propertyAdapter.ChangeProperty(time, value,
                start, end, setTime, ensureValue, endState)
        }
        GetInterpolatedValue(time, start, end) {
            switch (this._propertyTrack.GetPropertyKeyframeType()) {
                case "numeric":
                    return NS.NumericTypeAdapter.Interpolate(time, start, end, this._propertyTrack);
                case "angle":
                    return NS.AngleTypeAdapter.Interpolate(time, start, end, this._propertyTrack);
                case "boolean":
                    return NS.BooleanTypeAdapter.Interpolate(time, start, end, this._propertyTrack);
                case "color":
                    return NS.ColorTypeAdapter.Interpolate(time, start, end, this._propertyTrack);
                case "text":
                    return NS.TextTypeAdapter.Interpolate(time,
                        start, end, this._propertyTrack)
            }
        }
        AfterInterpolate() {
            this._propertyAdapter.AfterChangeProperty()
        }
        SaveState() {
            this.GetPropertyAdapter().SetSaveState()
        }
        ClearSaveState() {
            this.GetPropertyAdapter().ClearSaveState()
        }
        GetCurrentState() {
            return this.GetPropertyAdapter().GetCurrentState()
        }
        CompareInitialStateWithCurrent() {
            return this.GetPropertyAdapter().CompareInitialStateWithCurrent()
        }
        CompareSaveStateWithCurrent() {
            return this.GetPropertyAdapter().CompareSaveStateWithCurrent()
        }
        GetValueAtTime() {
            const propertyTrack =
                this._propertyTrack;
            const track = propertyTrack.GetTrack();
            const time = track.GetTimeline().GetTime();
            const start = NS.GetStartPropertyKeyframeForTime(time, propertyTrack);
            const end = start.GetNext();
            const type = propertyTrack.GetPropertyKeyframeType();
            switch (type) {
                case "numeric":
                    {
                        return NS.NumericTypeAdapter.Interpolate(time, start, end, propertyTrack)
                    }
                case "angle":
                    {
                        return NS.AngleTypeAdapter.Interpolate(time, start, end, propertyTrack)
                    }
                case "boolean":
                    {
                        return NS.BooleanTypeAdapter.Interpolate(time, start, end, propertyTrack)
                    }
                case "color":
                    {
                        return NS.ColorTypeAdapter.Interpolate(time,
                            start, end, propertyTrack)
                    }
                case "text":
                    {
                        return NS.TextTypeAdapter.Interpolate(time, start, end, propertyTrack)
                    }
            }
        }
        _CreatePropertyAdapter() {
            const pt = this._propertyTrack;
            const type = pt.CanHavePropertyKeyframes() ? pt.GetPropertyKeyframeType() : "";
            switch (type) {
                case "combo":
                case "boolean":
                case "text":
                case "string":
                    {
                        return new NS.PropertyInterpolationAdapter.NoInterpolationAdapter(this)
                    }
                case "numeric":
                case "number":
                case "angle":
                    {
                        if (this._propertyTrack.GetPropertyType() === "combo") return new NS.PropertyInterpolationAdapter.NoInterpolationAdapter(this);
                        return new NS.PropertyInterpolationAdapter.NumericInterpolationAdapter(this)
                    }
                case "color":
                case "offsetColor":
                    {
                        return new NS.PropertyInterpolationAdapter.ColorInterpolationAdapter(this)
                    }
                default:
                    {
                        return new NS.PropertyInterpolationAdapter.NumericInterpolationAdapter(this)
                    }
            }
        }
        _SaveToJson() {
            return {
                "propertyAdapterJson": this.GetPropertyAdapter()._SaveToJson()
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this.GetPropertyAdapter()._LoadFromJson(o["propertyAdapterJson"])
        }
    };

}

// timelines/state/propertySourceAdapters/instanceVariableSourceAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const INDEX = 0;
    class InstanceVariableSourceAdapter extends C3.PropertyTrackState.PropertySourceAdapter {
        constructor(propertyTrack) {
            super(propertyTrack);
            this._updatedIndex = NaN
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[INDEX]
        }
        GetIndex() {
            if (this._updatedIndex) return this._updatedIndex;
            return super.GetIndex()
        }
        GetTarget() {
            return this._propertyTrack.GetTrack().GetInstance()
        }
        UpdateInstanceVariableIndex(index) {
            const i = this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[INDEX];
            if (i ===
                index) return;
            this._updatedIndex = index
        }
        Interpolate(time, start, end, setTime, ensureValue) {
            if (!this.GetPropertyAdapter().CanChange(start.GetValue())) return;
            super.Interpolate(time, start, end, setTime, ensureValue)
        }
        GetInterpolatedValue(time, start, end) {
            if (!this.GetPropertyAdapter().CanChange(start.GetValue())) return;
            return super.GetInterpolatedValue(time, start, end)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                "index": this._updatedIndex
            })
        }
        _LoadFromJson(o) {
            if (!o) return;
            super._LoadFromJson(o);
            this._updatedIndex =
                o["index"]
        }
    }
    C3.PropertyTrackState.InstanceVariableSourceAdapter = InstanceVariableSourceAdapter;

}

// timelines/state/propertySourceAdapters/behaviorSourceAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const SID = 0;
    const INDEX = 1;
    const NAME = 2;
    class BehaviorSourceAdapter extends C3.PropertyTrackState.PropertySourceAdapter {
        constructor(propertyTrack) {
            super(propertyTrack);
            this._sid = NaN
        }
        GetEditorIndex() {
            const dataItem = this._propertyTrack.GetPropertyTrackDataItem();
            return dataItem.GetSourceAdapterArguments()[INDEX]
        }
        GetTarget() {
            const dataItem = this._propertyTrack.GetPropertyTrackDataItem();
            const track = this._propertyTrack.GetTrack();
            const sid = this._sid ? this._sid : dataItem.GetSourceAdapterArguments()[SID];
            const instance = track.GetInstance();
            const index =
                instance.GetBehaviorIndexBySID(sid);
            const behaviorInstance = instance.GetBehaviorInstances()[index];
            return behaviorInstance.GetSdkInstance()
        }
        GetBehaviorType(objectClass) {
            const dataItem = this._propertyTrack.GetPropertyTrackDataItem();
            const name = dataItem.GetSourceAdapterArguments()[NAME];
            return objectClass.GetBehaviorTypeByName(name)
        }
        UpdateBehaviorTypeSid(sid) {
            const dataItem = this._propertyTrack.GetPropertyTrackDataItem();
            if (dataItem.GetSourceAdapterArguments()[SID] === sid) return;
            this._sid = sid
        }
        Interpolate(time,
            start, end, setTime, ensureValue) {
            const track = this._propertyTrack.GetTrack();
            const instance = track.GetInstance();
            if (!this.GetBehaviorType(instance.GetObjectClass())) return;
            super.Interpolate(time, start, end, setTime, ensureValue)
        }
        GetInterpolatedValue(time, start, end) {
            const track = this._propertyTrack.GetTrack();
            const instance = track.GetInstance();
            if (!this.GetBehaviorType(instance.GetObjectClass())) return;
            return super.GetInterpolatedValue(time, start, end)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                "sid": this._sid
            })
        }
        _LoadFromJson(o) {
            if (!o) return;
            super._LoadFromJson(o);
            this._sid = o["sid"]
        }
    }
    C3.PropertyTrackState.BehaviorSourceAdapter = BehaviorSourceAdapter;

}

// timelines/state/propertySourceAdapters/effectSourceAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const NAME = 0;
    const INDEX = 1;
    class EffectSourceAdapter extends C3.PropertyTrackState.PropertySourceAdapter {
        constructor(propertyTrack) {
            super(propertyTrack)
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[INDEX]
        }
        GetTarget() {
            const pTrack = this._propertyTrack;
            const track = pTrack.GetTrack();
            const worldInfo = track.GetWorldInfo();
            const instanceEffectList = worldInfo.GetInstanceEffectList();
            const effectList = instanceEffectList.GetEffectList();
            const effectType = this.GetEffectType(effectList);
            const effectIndex = effectType.GetIndex();
            if (instanceEffectList.IsEffectIndexActive(effectIndex)) return instanceEffectList.GetEffectParametersForIndex(effectIndex);
            return null
        }
        GetEffectType(effectList) {
            const pTrack = this._propertyTrack;
            const name = pTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[NAME];
            return effectList.GetEffectTypeByName(name)
        }
        Interpolate(time, start, end, setTime, ensureValue) {
            if (!this._IsEffectActive()) return;
            super.Interpolate(time, start, end, setTime, ensureValue)
        }
        GetInterpolatedValue(time,
            start, end) {
            if (!this._IsEffectActive()) return;
            return super.GetInterpolatedValue(time, start, end)
        }
        _IsEffectActive() {
            const pTrack = this._propertyTrack;
            const track = pTrack.GetTrack();
            const worldInfo = track.GetWorldInfo();
            const instanceEffectList = worldInfo.GetInstanceEffectList();
            const effectList = instanceEffectList.GetEffectList();
            const effectType = this.GetEffectType(effectList);
            if (!effectType) return;
            const effectIndex = effectType.GetIndex();
            return instanceEffectList.IsEffectIndexActive(effectIndex)
        }
    }
    C3.PropertyTrackState.EffectSourceAdapter = EffectSourceAdapter;

}

// timelines/state/propertySourceAdapters/pluginSourceAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const INDEX = 0;
    class PluginSourceAdapter extends C3.PropertyTrackState.PropertySourceAdapter {
        constructor(propertyTrack) {
            super(propertyTrack)
        }
        GetEditorIndex() {
            return this._propertyTrack.GetPropertyTrackDataItem().GetSourceAdapterArguments()[INDEX]
        }
        GetTarget() {
            return this._propertyTrack.GetTrack().GetInstance().GetSdkInstance()
        }
        Interpolate(time, start, end, setTime, ensureValue) {
            const track = this._propertyTrack.GetTrack();
            const templatePlugin = track.GetObjectClass().GetPlugin();
            const currentPlugin = track.GetInstance().GetObjectClass().GetPlugin();
            if (templatePlugin !== currentPlugin) return;
            super.Interpolate(time, start, end, setTime, ensureValue)
        }
        GetInterpolatedValue(time, start, end) {
            const track = this._propertyTrack.GetTrack();
            const templatePlugin = track.GetObjectClass().GetPlugin();
            const currentPlugin = track.GetInstance().GetObjectClass().GetPlugin();
            if (templatePlugin !== currentPlugin) return;
            return super.GetInterpolatedValue(time, start, end)
        }
        GetOptionalCallbacks() {
            const track = this._propertyTrack.GetTrack();
            const plugin = track.GetObjectClass().GetPlugin();
            if (plugin instanceof C3.Plugins.Sprite)
                if (this._propertyTrack.GetPropertyName() === "initial-frame" || this._propertyTrack.GetPropertyName() === "initial-animation") switch (this._propertyTrack.GetResultMode()) {
                    case "relative":
                        {
                            return null
                        }
                    case "absolute":
                        {
                            return null
                        }
                }
        }
    }
    C3.PropertyTrackState.PluginSourceAdapter = PluginSourceAdapter;

}

// timelines/state/propertySourceAdapters/valueSourceAdapter.js
{
    'use strict';
    const C3 = self.C3;
    class ValueSourceAdapter extends C3.PropertyTrackState.PropertySourceAdapter {
        constructor(propertyTrack) {
            super(propertyTrack);
            this._value = 0;
            this._init = false
        }
        MayNeedBeforeAndAfterInterpolate() {
            return false
        }
        SetInitialState() {
            const propertyTrackData = this._propertyTrack.GetPropertyTrackData();
            let propertyTrackDataItem = this._propertyTrack.GetPropertyTrackDataItem();
            propertyTrackDataItem = propertyTrackData.GetFirstPropertyKeyframeDataItem(propertyTrackDataItem);
            this._value = propertyTrackDataItem.GetValueWithResultMode()
        }
        SetResumeState() {}
        GetValue() {
            if (!this._init) this._propertyTrack.Interpolate(0);
            return this._value
        }
        Interpolate(time,
            start, end, setTime, ensureValue) {
            this._value = C3.PropertyTrackState.NumericTypeAdapter.Interpolate(time, start, end, this._propertyTrack);
            this._init = true
        }
        SaveState() {}
        ClearSaveState() {}
        GetCurrentState() {
            return this._value
        }
        CompareInitialStateWithCurrent() {
            return false
        }
        CompareSaveStateWithCurrent() {
            return false
        }
        _SaveToJson() {
            return {
                "value": this._value,
                "init": this._init
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this._value = o["value"];
            this._init = o.hasOwnProperty("init") ? o["init"] : true
        }
    }
    C3.PropertyTrackState.ValueSourceAdapter = ValueSourceAdapter;

}

// timelines/state/propertySourceAdapters/audioSourceAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const PROJECT_FILE = 0;
    const PROJECT_FILE_NAME = 0;
    const PROJECT_FILE_TYPE = 1;
    const START_OFFSET = 1;
    const AUDIO_DURATION = 2;
    const AUDIO_TAG = 3;
    class AudioSourceAdapter extends C3.PropertyTrackState.PropertySourceAdapter {
        constructor(propertyTrack) {
            super(propertyTrack);
            this._audioPlaybackStarted = false;
            this._sdkInstance = null;
            this._actions = null;
            this._expressions = null;
            this._timeline = this._propertyTrack.GetTimeline();
            this._track = this._propertyTrack.GetTrack();
            this._sourceAdapterArgs = this._propertyTrack.GetSourceAdapterArgs();
            this._fileArgs = this._sourceAdapterArgs[PROJECT_FILE];
            this._startOffsetTime = this._sourceAdapterArgs[START_OFFSET];
            if (this._sourceAdapterArgs[AUDIO_TAG]) this._audioTag =
                this._sourceAdapterArgs[AUDIO_TAG];
            else this._audioTag = Math.random().toString(36).slice(2);
            this._pauseTime = NaN;
            this._pauseVolume = NaN;
            this._volume = NaN;
            this._audioSource = null;
            this._Initialize()
        }
        Release() {
            super.Release();
            this._sdkInstance = null;
            this._actions = null;
            this._expressions = null;
            this._timeline = null;
            this._track = null;
            this._sourceAdapterArgs = null;
            this._fileArgs = null;
            this._audioSource = null
        }
        _Initialize() {
            if (!self.C3.Plugins.Audio) return;
            const runtime = this._propertyTrack.GetRuntime();
            const audioObjectClass =
                runtime.GetObjectClassByName("audio");
            if (audioObjectClass) this._sdkInstance = audioObjectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._actions = self.C3.Plugins.Audio.Acts;
            this._expressions = self.C3.Plugins.Audio.Exps
        }
        _MaybeSetAudioSource() {
            if (this._audioSource) return;
            const track = this._propertyTrack.GetTrack();
            const audioSourcePropertyTrack = track.GetPropertyTrack("audioSource");
            if (audioSourcePropertyTrack) this._audioSource = audioSourcePropertyTrack.GetSourceAdapter()
        }
        _GetPauseVolume() {
            const track =
                this._propertyTrack.GetTrack();
            const volumePropertyTrack = track.GetPropertyTrack("volume");
            if (volumePropertyTrack) return volumePropertyTrack.GetSourceAdapter()._pauseVolume;
            else return this._pauseVolume
        }
        TimelineRemoved() {
            super.TimelineRemoved();
            this._audioPlaybackStarted = false;
            if (this._sdkInstance) {
                if (this._expressions) {
                    this._pauseTime = this._expressions.PlaybackTime.call(this._sdkInstance, this._audioTag);
                    this._pauseVolume = this._expressions.Volume.call(this._sdkInstance, this._audioTag)
                }
                if (this._actions) this._actions.Stop.call(this._sdkInstance,
                    this._audioTag)
            }
        }
        GetAudioTag() {
            return this._audioTag
        }
        GetVolume() {
            return this._volume
        }
        SetVolume(v) {
            this._volume = v
        }
        SetInitialState() {
            super.SetInitialState();
            this._pauseTime = NaN;
            this._audioPlaybackStarted = false
        }
        SetResumeState() {
            super.SetResumeState();
            const timeline = this._propertyTrack.GetTimeline();
            const time = timeline.GetTime();
            this._pauseTime = time - this._startOffsetTime;
            switch (this._propertyTrack.GetPropertyName()) {
                case "audioSource":
                    {
                        break
                    }
                case "volume":
                    {
                        this._pauseVolume = this._propertyTrack.GetInterpolatedValue(time);
                        break
                    }
            }
            this._audioPlaybackStarted = false
        }
        Interpolate(time, start, end, setTime, ensureValue) {
            if (!this._sdkInstance) return;
            switch (this._propertyTrack.GetPropertyName()) {
                case "audioSource":
                    {
                        if (!this._timeline.IsForwardPlayBack()) return;
                        if (setTime) {
                            if (this._actions) this._actions.Stop.call(this._sdkInstance, this._audioTag);
                            return
                        }
                        if (time < this._startOffsetTime) {
                            this._audioPlaybackStarted = false;
                            return
                        }
                        const aPlaybackRate = this._expressions.PlaybackRate.call(this._sdkInstance, this._audioTag);
                        const tPlaybackRate =
                            this._timeline.GetPlaybackRate();
                        if (tPlaybackRate !== aPlaybackRate) this._actions.SetPlaybackRate.call(this._sdkInstance, this._audioTag, tPlaybackRate);
                        if (this._audioPlaybackStarted) return;
                        if (!this._propertyTrack.GetTimeline().IsPlaying()) return;this._audioPlaybackStarted = true;
                        if (isNaN(this._pauseTime)) {
                            const thenTime = self["performance"].now();
                            const startDeltaTime = time - this._startOffsetTime;
                            const state = this._sdkInstance.GetAudioContextState();
                            if (state === "suspended") {
                                this._audioPlaybackStarted = false;
                                return
                            }
                            const nowTime = self["performance"].now();
                            const postToDOMDeltaTime = (nowTime - thenTime) / 1E3;
                            const startPlaybackOffset = startDeltaTime + postToDOMDeltaTime;
                            if (this._actions) {
                                let startVolume = this.GetVolume();
                                if (isNaN(startVolume)) {
                                    this.SetVolume(0);
                                    startVolume = 0
                                } else this.SetVolume(startVolume);
                                this._actions.PlayFromTimeline.call(this._sdkInstance, this._fileArgs, startVolume, this._audioTag, startPlaybackOffset)
                            }
                        } else {
                            const startTime = this._pauseTime;
                            this._pauseTime = NaN;
                            const startVolume = this._GetPauseVolume();
                            this._pauseVolume = NaN;
                            const state = this._sdkInstance.GetAudioContextState();
                            if (state === "suspended") {
                                this._audioPlaybackStarted = false;
                                return
                            }
                            if (this._actions) {
                                this.SetVolume(startVolume);
                                this._actions.PlayFromTimeline.call(this._sdkInstance, this._fileArgs, startVolume, this._audioTag, startTime)
                            }
                        }
                        break
                    }
                case "volume":
                    {
                        this._MaybeSetAudioSource();super.Interpolate(time, start, end, setTime, ensureValue)
                    }
            }
        }
        GetInterpolatedValue(time, start, end) {
            if (!this._sdkInstance) return;
            switch (this._propertyTrack.GetPropertyName()) {
                case "audioSource":
                    {
                        return
                    }
                case "volume":
                    {
                        this._MaybeSetAudioSource();
                        return super.GetInterpolatedValue(time, start, end)
                    }
            }
        }
        Getter(wi, track) {
            if (this._audioSource) return this._audioSource.GetVolume();
            return 0
        }
        Setter(wi, value, track, interpolationAdapter) {
            if (this._audioSource) this._audioSource.SetVolume(this.Getter() + value);
            if (this._actions && this._audioSource) this._actions.SetVolume.call(this._sdkInstance, this._audioSource.GetAudioTag(), this._audioSource.GetVolume())
        }
        AbsoluteSetter(wi, value, track) {
            if (this._audioSource) this._audioSource.SetVolume(value);
            if (this._actions &&
                this._audioSource) this._actions.SetVolume.call(this._sdkInstance, this._audioSource.GetAudioTag(), this._audioSource.GetVolume())
        }
        DoesRounding() {
            return true
        }
        _SaveToJson() {
            return {
                "audioPlaybackStarted": this._audioPlaybackStarted,
                "audioTag": this._audioTag,
                "pauseTime": this._pauseTime,
                "pauseVolume": this._pauseVolume,
                "volume": this._volume
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this._audioPlaybackStarted = o["audioPlaybackStarted"];
            this._audioTag = o["audioTag"];
            this._pauseTime = o["pauseTime"];
            this._pauseVolume = o["pauseVolume"];
            this._volume = o["volume"];
            this._Initialize()
        }
    }
    C3.PropertyTrackState.AudioSourceAdapter = AudioSourceAdapter;

}

// timelines/state/propertyInterpolationAdapters/propertyInterpolationAdapter.js
{
    'use strict';
    const C3 = self.C3;
    C3.PropertyTrackState.PropertyInterpolationAdapter = class PropertyInterpolationAdapter {
        constructor(sourceAdapter) {
            this._sourceAdapter = sourceAdapter;
            this._propertyTrack = sourceAdapter.GetPropertyTrack();
            this._worldInfo = this._propertyTrack.GetTrack().GetWorldInfo();
            this._property = this._propertyTrack.GetPropertyName();
            this._firstAbsoluteUpdate = false;
            this._saveState = null;
            this._target = null
        }
        Release() {
            this._sourceAdapter = null;
            this._propertyTrack = null;
            this._worldInfo = null;
            this._saveState = null;
            this._target =
                null
        }
        MayNeedBeforeAndAfterInterpolate() {
            return false
        }
        TimelineRemoved() {}
        CleanCaches() {
            this._worldInfo = null;
            this._saveState = null;
            this._target = null
        }
        GetSourceAdapter() {
            return this._sourceAdapter
        }
        GetPropertyTrack() {
            return this._propertyTrack
        }
        GetWorldInfo() {
            if (this._worldInfo) return this._worldInfo;
            this._worldInfo = this._propertyTrack.GetTrack().GetWorldInfo();
            return this._worldInfo
        }
        SetFirstAbsoluteUpdate(f) {
            this._firstAbsoluteUpdate = !!f
        }
        GetFirstAbsoluteUpdate() {
            return this._firstAbsoluteUpdate
        }
        SetResetState() {}
        SetInitialState() {}
        SetResumeState() {}
        SetSaveState() {
            this._saveState =
                this.GetCurrentState()
        }
        ClearSaveState() {
            this._saveState = null
        }
        GetCurrentState() {}
        CompareInitialStateWithCurrent() {}
        CompareSaveStateWithCurrent() {}
        CanChange(value) {
            const targetType = typeof this._Getter();
            const newType = typeof value;
            return targetType === newType
        }
        BeforeChangeProperty() {}
        ChangeProperty(time, value, start, end, setTime, ensureValue, endState) {}
        AfterChangeProperty() {}
        _FirstKeyframeGetter() {
            const propertyKeyframeDataItem = this._PickTimelinePlaybackMode(() => {
                const propertyTrackDataItem = this._propertyTrack.GetPropertyTrackDataItem();
                const propertyTrackData = this._propertyTrack.GetPropertyTrackData();
                return propertyTrackData.GetFirstPropertyKeyframeDataItem(propertyTrackDataItem)
            }, () => {
                const propertyTrackDataItem = this._propertyTrack.GetPropertyTrackDataItem();
                const propertyTrackData = this._propertyTrack.GetPropertyTrackData();
                return propertyTrackData.GetLastPropertyKeyframeDataItem(propertyTrackDataItem)
            });
            return propertyKeyframeDataItem.GetAbsoluteValue()
        }
        _CurrentKeyframeGetter() {
            const timeline = this._propertyTrack.GetTimeline();
            const time = timeline.GetTime() - this._propertyTrack.GetTrack().GetStartOffset();
            const propertyKeyframe = this._PickTimelinePlaybackMode(() => {
                const propertyTrackDataItem = this._propertyTrack.GetPropertyTrackDataItem();
                const propertyTrackData = this._propertyTrack.GetPropertyTrackData();
                return propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time, propertyTrackDataItem)
            }, () => {
                const propertyTrackDataItem = this._propertyTrack.GetPropertyTrackDataItem();
                const propertyTrackData = this._propertyTrack.GetPropertyTrackData();
                const ret = propertyTrackData.GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(time, propertyTrackDataItem);
                if (!ret) return propertyTrackData.GetLastPropertyKeyframeDataItem(propertyTrackDataItem);
                return ret
            });
            return propertyKeyframe.GetAbsoluteValue()
        }
        _PickTimelinePlaybackMode(forwardFunc, backwardFunc) {
            const timeline = this._propertyTrack.GetTimeline();
            return timeline.IsForwardPlayBack() ? forwardFunc() : backwardFunc()
        }
        _PickResultMode(relativeFunc, absoluteFunc) {
            const resultMode = this._propertyTrack.GetResultMode();
            return resultMode === "relative" ? relativeFunc() : absoluteFunc()
        }
        _PickFirstAbsoluteUpdate(firstFunc, otherFunc) {
            if (this.GetFirstAbsoluteUpdate()) {
                this.SetFirstAbsoluteUpdate(false);
                return firstFunc()
            } else return otherFunc()
        }
        _GetAbsoluteInitialValue(keyframeValue) {}
        _GetIndex() {
            return this._sourceAdapter.GetIndex()
        }
        _GetTarget() {
            if (this._target) return this._target;
            this._target = this._sourceAdapter.GetTarget();
            return this._target
        }
        _PickSource(bFunc, eFunc, ivFunc, pFunc, wiFunc, aFunc) {
            const id = this._propertyTrack.GetSourceAdapterId();
            switch (id) {
                case "behavior":
                    return bFunc();
                case "effect":
                    return eFunc();
                case "instance-variable":
                    return ivFunc();
                case "plugin":
                    return pFunc();
                case "world-instance":
                    return wiFunc();
                case "audio":
                    return aFunc()
            }
        }
        _SaveToJson() {
            return {
                "firstAbsoluteUpdate": this._firstAbsoluteUpdate,
                "saveState": this._saveState
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this._firstAbsoluteUpdate = o["firstAbsoluteUpdate"];
            this._saveState = o["saveState"]
        }
        _GetPropertyKeyframeStubs(propertyTracks, firstOnly = false) {
            const ret = [];
            for (const propertyTrack of propertyTracks) {
                const startOffset =
                    propertyTrack.GetTrack().GetStartOffset();
                for (const propertyKeyframeDataItem of propertyTrack.GetPropertyKeyframeDataItems())
                    if (firstOnly && propertyKeyframeDataItem.GetTime() === 0) ret.push({
                        time: startOffset + propertyKeyframeDataItem.GetTime(),
                        value: propertyKeyframeDataItem.GetAbsoluteValue()
                    });
                    else if (!firstOnly) ret.push({
                    time: startOffset + propertyKeyframeDataItem.GetTime(),
                    value: propertyKeyframeDataItem.GetAbsoluteValue()
                })
            }
            return ret.sort((f, s) => f.time - s.time)
        }
        _GetLastPropertyKeyframeStub(timeline,
            time, propertyKeyframeStubs) {
            return this._GetPropertyKeyframeStubLowerThanPlayhead(time, propertyKeyframeStubs)
        }
        _GetPropertyKeyframeStubLowerThanPlayhead(time, propertyKeyframeStubs) {
            for (let i = propertyKeyframeStubs.length - 1; i >= 0; i--) {
                const stubTime = propertyKeyframeStubs[i].time;
                if (stubTime <= time) return propertyKeyframeStubs[i]
            }
            return null
        }
    };

}

// timelines/state/propertyInterpolationAdapters/colorInterpolationAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const TMP_COLORS_MAP = new Map;
    const TMP_COLOR = [0, 0, 0];
    class ColorInterpolationAdapter extends C3.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(sourceAdapter) {
            super(sourceAdapter)
        }
        SetResetState() {}
        SetInitialState() {}
        SetResumeState() {}
        GetCurrentState() {
            const id = this._propertyTrack.GetSourceAdapterId();
            const target = this._GetTarget();
            const index = this._GetIndex();
            switch (id) {
                case "behavior":
                    return this._ToColorArray(target.GetPropertyValueByIndex(index));
                case "effect":
                    return this._ToColorArray(target[index]);
                case "plugin":
                    return this._ToColorArray(target.GetPropertyValueByIndex(index));
                case "world-instance":
                    return this._ToColorArray(this._Getter())
            }
        }
        CompareInitialStateWithCurrent() {
            const firstKeyframeColor = this._FirstKeyframeGetter();
            return !this._CompareColors(firstKeyframeColor, this._Getter())
        }
        CompareSaveStateWithCurrent() {
            if (C3.IsNullOrUndefined(this._saveState)) return false;
            return !this._CompareColors(this._saveState, this._Getter())
        }
        _CompareColors(fColor, sColor) {
            fColor = this._GetColorFromArray(fColor);
            sColor = this._GetColorFromArray(sColor);
            return fColor.equalsIgnoringAlpha(sColor)
        }
        _FirstKeyframeGetter() {
            const color =
                super._FirstKeyframeGetter();
            return this._GetColorFromArray(color)
        }
        _CurrentKeyframeGetter() {
            const color = super._CurrentKeyframeGetter();
            return this._GetColorFromArray(color)
        }
        _GetAbsoluteInitialValue(value) {}
        _ToColorArray(color) {
            if (C3.IsInstanceOf(color, C3.Color)) return color.toArray().slice(0, 3);
            return color.slice(0, 3)
        }
        _GetColorFromArray(color) {
            if (C3.IsInstanceOf(color, C3.Color)) return color;
            return new C3.Color(color[0], color[1], color[2], 1)
        }
        CanChange(value) {
            return true
        }
        MayNeedBeforeAndAfterInterpolate() {
            return true
        }
        BeforeChangeProperty() {
            const timeline =
                this._propertyTrack.GetTimeline();
            const instance = this._propertyTrack.GetInstance();
            const sourceAdapter = this._propertyTrack.GetSourceAdapter();
            const propertyTracks = timeline.GetSimilarPropertyTracks(instance, sourceAdapter, this._property);
            if (propertyTracks && propertyTracks.length > 1) {
                if (!TMP_COLORS_MAP.has(instance)) TMP_COLORS_MAP.set(instance, new Map);
                const instanceMap = TMP_COLORS_MAP.get(instance);
                const id = this._propertyTrack.GetSourceAdapterId();
                if (!instanceMap.has(id)) instanceMap.set(id, new Map);
                const sourceMap =
                    instanceMap.get(id);
                if (!sourceMap.has(this._property)) sourceMap.set(this._property, {
                    used: false,
                    color: new C3.Color(0, 0, 0, 1)
                })
            }
        }
        _GetTmpColor(instance, sourceId, propertyName) {
            const tmpColorObj = TMP_COLORS_MAP.get(instance).get(sourceId).get(propertyName);
            tmpColorObj.used = true;
            return tmpColorObj.color
        }
        ChangeProperty(time, value, start, end, setTime) {
            const timeline = this._propertyTrack.GetTimeline();
            const track = this._propertyTrack.GetTrack();
            const instance = this._propertyTrack.GetInstance();
            const sourceAdapter =
                this._propertyTrack.GetSourceAdapter();
            const sourceAdapterId = this._propertyTrack.GetSourceAdapterId();
            const property = this._property;
            const propertyTracks = timeline.GetSimilarPropertyTracks(instance, sourceAdapter, property);
            if (propertyTracks && propertyTracks.length > 1) {
                const propertyKeyframeStubs = this._GetPropertyKeyframeStubs(propertyTracks, true);
                const stub = this._GetLastPropertyKeyframeStub(timeline, timeline.GetTime(), propertyKeyframeStubs);
                if (stub) {
                    const startOffset = track.GetStartOffset();
                    const t = stub.time -
                        startOffset;
                    if (t === 0) this._GetTmpColor(instance, sourceAdapterId, this._property).addRgb(value[0], value[1], value[2]);
                    else {
                        if (t < 0) return;
                        const r = value[0];
                        const g = value[1];
                        const b = value[2];
                        const v = this._propertyTrack.Interpolate(t, false, true);
                        const dr = C3.Color.DiffChannel(r, v[0]);
                        const dg = C3.Color.DiffChannel(g, v[1]);
                        const db = C3.Color.DiffChannel(b, v[2]);
                        this._GetTmpColor(instance, sourceAdapterId, this._property).addRgb(dr, dg, db)
                    }
                }
            } else this._Setter(value[0], value[1], value[2])
        }
        AfterChangeProperty() {
            const instance =
                this._propertyTrack.GetInstance();
            if (!TMP_COLORS_MAP.has(instance)) return;
            const instanceMap = TMP_COLORS_MAP.get(instance);
            const id = this._propertyTrack.GetSourceAdapterId();
            if (!instanceMap.has(id)) return;
            const sourceMap = instanceMap.get(id);
            if (!sourceMap.has(this._property)) return;
            const tmpColorObj = sourceMap.get(this._property);
            const used = tmpColorObj.used;
            const color = tmpColorObj.color;
            if (used) this._Setter(color.getR(), color.getG(), color.getB());
            if (sourceMap.size === 0) instanceMap.delete(id);
            if (instanceMap.size ===
                0) TMP_COLORS_MAP.delete(instance)
        }
        _Getter() {
            const id = this._propertyTrack.GetSourceAdapterId();
            const target = this._GetTarget();
            const index = this._GetIndex();
            switch (id) {
                case "behavior":
                    return this._GetColorFromArray(target.GetPropertyValueByIndex(index));
                case "effect":
                    return target[index].clone();
                case "plugin":
                    return this._GetColorFromArray(target.GetPropertyValueByIndex(index));
                case "world-instance":
                    return this.GetWorldInfo().GetUnpremultipliedColor().clone()
            }
        }
        _Setter(r, g, b) {
            const id = this._propertyTrack.GetSourceAdapterId();
            const target = this._GetTarget();
            const index = this._GetIndex();
            switch (id) {
                case "behavior":
                    TMP_COLOR[0] = r;
                    TMP_COLOR[1] = g;
                    TMP_COLOR[2] = b;
                    target.SetPropertyValueByIndex(index, TMP_COLOR);
                    break;
                case "effect":
                    target[index].setRgb(r, g, b);
                    break;
                case "plugin":
                    TMP_COLOR[0] = r;
                    TMP_COLOR[1] = g;
                    TMP_COLOR[2] = b;
                    target.SetPropertyValueByIndex(index, TMP_COLOR);
                    break;
                case "world-instance":
                    this.GetWorldInfo().SetUnpremultipliedColorRGB(r, g, b);
                    break
            }
        }
        _SaveToJson() {}
        _LoadFromJson(o) {}
    }
    C3.PropertyTrackState.PropertyInterpolationAdapter.ColorInterpolationAdapter = ColorInterpolationAdapter;

}

// timelines/state/propertyInterpolationAdapters/noInterpolationAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const NS = C3.PropertyTrackState;
    class NoInterpolationAdapter extends C3.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(sourceAdapter) {
            super(sourceAdapter)
        }
        SetResetState() {}
        SetInitialState() {}
        SetResumeState() {}
        GetCurrentState() {
            return this._Getter()
        }
        CompareInitialStateWithCurrent() {
            const firstKeyframeValue = this._FirstKeyframeGetter();
            return firstKeyframeValue !== this.GetCurrentState()
        }
        CompareSaveStateWithCurrent() {
            if (C3.IsNullOrUndefined(this._saveState)) return false;
            return this._saveState !== this.GetCurrentState()
        }
        MayNeedBeforeAndAfterInterpolate() {
            return false
        }
        ChangeProperty(time,
            value, start, end, setTime) {
            const propertyTrack = this._propertyTrack;
            const track = propertyTrack.GetTrack();
            const id = propertyTrack.GetSourceAdapterId();
            const timeline = propertyTrack.GetTimeline();
            const instance = track.GetInstance();
            const sourceAdapter = propertyTrack.GetSourceAdapter();
            const property = this._property;
            const propertyTracks = timeline.GetSimilarPropertyTracks(instance, sourceAdapter, property);
            if (propertyTracks && propertyTracks.length > 1) {
                const propertyKeyframeStubs = this._GetPropertyKeyframeStubs(propertyTracks);
                const t = time + track.GetStartOffset();
                const stub = this._GetLastPropertyKeyframeStub(timeline, t, propertyKeyframeStubs);
                if (stub) value = stub.value
            }
            const type = propertyTrack.GetPropertyKeyframeType();
            switch (type) {
                case "numeric":
                    {
                        if (!NS.NumericTypeAdapter.WillChange(this._GetIndex(), this._GetTarget(), value, id)) return;
                        break
                    }
                case "angle":
                    {
                        if (!NS.AngleTypeAdapter.WillChange(this._GetIndex(), this._GetTarget(), value, id)) return;
                        break
                    }
                case "boolean":
                    {
                        if (!NS.BooleanTypeAdapter.WillChange(this._GetIndex(), this._GetTarget(),
                                value, id)) return;
                        break
                    }
                case "color":
                    {
                        if (!NS.ColorTypeAdapter.WillChange(this._GetIndex(), this._GetTarget(), value, id)) return;
                        break
                    }
                case "text":
                    {
                        if (!NS.TextTypeAdapter.WillChange(this._GetIndex(), this._GetTarget(), value, id)) return;
                        break
                    }
            }
            this._Setter(value)
        }
        _Getter() {
            const id = this._propertyTrack.GetSourceAdapterId();
            const target = this._GetTarget();
            const index = this._GetIndex();
            switch (id) {
                case "behavior":
                    return target.GetPropertyValueByIndex(index);
                case "effect":
                    return target[index];
                case "instance-variable":
                    return target.GetInstanceVariableValue(index);
                case "plugin":
                    return target.GetPropertyValueByIndex(index)
            }
        }
        _Setter(value) {
            const id = this._propertyTrack.GetSourceAdapterId();
            const target = this._GetTarget();
            const index = this._GetIndex();
            switch (id) {
                case "behavior":
                    target.SetPropertyValueByIndex(index, value);
                    break;
                case "effect":
                    target[index] = value;
                    break;
                case "instance-variable":
                    target.SetInstanceVariableValue(index, value);
                    break;
                case "plugin":
                    target.SetPropertyValueByIndex(index, value);
                    break
            }
        }
    }
    C3.PropertyTrackState.PropertyInterpolationAdapter.NoInterpolationAdapter = NoInterpolationAdapter;

}

// timelines/state/propertyInterpolationAdapters/numericInterpolationAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const NS = C3.PropertyTrackState.PropertyInterpolationAdapter;
    const INSTANCE_FUNC_MAP = new Map;
    const add = (prop, setter, absolute_setter, getter, round, fRound = false, init = null, reset = null) => {
        INSTANCE_FUNC_MAP.set(prop, {
            setter,
            absolute_setter,
            getter,
            round,
            fRound,
            init,
            reset
        })
    };
    add("offsetX", (wi, v, t, a) => {
        if (a._propertyTrack.GetResultMode() === "relative") wi.OffsetX(v, t.GetTimeline().GetTransformWithSceneGraph());
        else wi.OffsetX(v)
    }, (wi, v) => wi.SetX(v), wi => wi.GetX(), true);
    add("offsetY", (wi, v, t, a) => {
        if (a._propertyTrack.GetResultMode() === "relative") wi.OffsetY(v, t.GetTimeline().GetTransformWithSceneGraph());
        else wi.OffsetY(v)
    }, (wi, v) => wi.SetY(v), wi => wi.GetY(), true);
    add("offsetWidth", (wi, v, t, a, noChanges) => {
            if (v === 0) return;
            const isRelative = a._propertyTrack.GetResultMode() === "relative";
            const isTween = a._typeAdapter.GetType() === 1;
            if ((isRelative || isTween) && wi.HasParent() && wi.GetTransformWithParentWidth()) {
                if (isNaN(a._absoluteToFactor)) {
                    const parents = [];
                    let parent = wi.GetParent();
                    while (parent) {
                        parents.push(parent);
                        parent = parent.GetParent()
                    }
                    parents.reverse();
                    const get_track = (wi, t) => {
                        return t.GetTimeline().GetTrackFromInstance(wi.GetInstance())
                    };
                    const get_original_size =
                        (wi, t) => {
                            const track = get_track(wi, t);
                            if (track) return track.GetOriginalWidth();
                            const sdki = wi.GetInstance().GetSdkInstance();
                            if (sdki.IsOriginalSizeKnown()) return sdki.GetOriginalWidth();
                            return wi._GetSceneGraphInfo()._GetStartWidth()
                        };
                    const get_last_property_keyframe_value = (wi, t, propertyName) => {
                        const track = get_track(wi, t);
                        if (!track) return 0;
                        const propertyTrack = track.GetPropertyTrack(propertyName);
                        if (!propertyTrack) return 0;
                        const parentPropertyKeyframeData = propertyTrack.GetPropertyTrackDataItem().GetPropertyKeyframeData();
                        if (!parentPropertyKeyframeData) return 0;
                        const parentLastPropertyKeyframeDataItem = parentPropertyKeyframeData.GetLastPropertyKeyframeDataItem();
                        if (!parentLastPropertyKeyframeDataItem) return 0;
                        return parentLastPropertyKeyframeDataItem.GetValue()
                    };
                    let p = parents[0];
                    const ownStartSize = p._GetSceneGraphInfo()._GetStartWidth();
                    const ownStartScale = p._GetSceneGraphInfo().GetStartScaleX();
                    let absoluteToFactor = ownStartSize * ownStartScale;
                    absoluteToFactor += get_last_property_keyframe_value(p, t, "offsetWidth");
                    absoluteToFactor +=
                        get_original_size(p, t) * get_last_property_keyframe_value(p, t, "offsetScaleX");
                    for (let i = 1; i < parents.length; i++) {
                        p = parents[i];
                        absoluteToFactor *= p._GetSceneGraphInfo().GetStartScaleX();
                        absoluteToFactor += get_last_property_keyframe_value(p, t, "offsetWidth");
                        absoluteToFactor += get_original_size(p, t) * get_last_property_keyframe_value(p, t, "offsetScaleX")
                    }
                    a._absoluteToFactor = absoluteToFactor === 0 ? Number.EPSILON : absoluteToFactor
                }
                if (noChanges) return;
                wi.OffsetWidth(v / a._absoluteToFactor, true)
            } else wi.OffsetWidth(v)
        },
        (wi, v) => wi.SetWidth(v), wi => wi.GetWidth(), true);
    add("offsetHeight", (wi, v, t, a, noChanges) => {
            if (v === 0) return;
            const isRelative = a._propertyTrack.GetResultMode() === "relative";
            const isTween = a._typeAdapter.GetType() === 1;
            if ((isRelative || isTween) && wi.HasParent() && wi.GetTransformWithParentHeight()) {
                if (isNaN(a._absoluteToFactor)) {
                    const parents = [];
                    let parent = wi.GetParent();
                    while (parent) {
                        parents.push(parent);
                        parent = parent.GetParent()
                    }
                    parents.reverse();
                    const get_track = (wi, t) => {
                        return t.GetTimeline().GetTrackFromInstance(wi.GetInstance())
                    };
                    const get_original_size =
                        (wi, t) => {
                            const track = get_track(wi, t);
                            if (track) return track.GetOriginalHeight();
                            const sdki = wi.GetInstance().GetSdkInstance();
                            if (sdki.IsOriginalSizeKnown()) return sdki.GetOriginalHeight();
                            return wi._GetSceneGraphInfo()._GetStartHeight()
                        };
                    const get_last_property_keyframe_value = (wi, t, propertyName) => {
                        const track = t.GetTimeline().GetTrackFromInstance(wi.GetInstance());
                        if (!track) return 0;
                        const propertyTrack = track.GetPropertyTrack(propertyName);
                        if (!propertyTrack) return 0;
                        const parentPropertyKeyframeData = propertyTrack.GetPropertyTrackDataItem().GetPropertyKeyframeData();
                        if (!parentPropertyKeyframeData) return 0;
                        const parentLastPropertyKeyframeDataItem = parentPropertyKeyframeData.GetLastPropertyKeyframeDataItem();
                        if (!parentLastPropertyKeyframeDataItem) return 0;
                        return parentLastPropertyKeyframeDataItem.GetValue()
                    };
                    let p = parents[0];
                    const ownStartSize = p._GetSceneGraphInfo()._GetStartHeight();
                    const ownStartScale = p._GetSceneGraphInfo().GetStartScaleY();
                    let absoluteToFactor = ownStartSize * ownStartScale;
                    absoluteToFactor += get_last_property_keyframe_value(p, t, "offsetHeight");
                    absoluteToFactor +=
                        get_original_size(p, t) * get_last_property_keyframe_value(p, t, "offsetScaleY");
                    for (let i = 1; i < parents.length; i++) {
                        p = parents[i];
                        absoluteToFactor *= p._GetSceneGraphInfo().GetStartScaleY();
                        absoluteToFactor += get_last_property_keyframe_value(p, t);
                        absoluteToFactor += get_original_size(p, t) * get_last_property_keyframe_value(p, t, "offsetScaleY")
                    }
                    a._absoluteToFactor = absoluteToFactor === 0 ? Number.EPSILON : absoluteToFactor
                }
                if (noChanges) return;
                wi.OffsetHeight(v / a._absoluteToFactor, true)
            } else wi.OffsetHeight(v)
        }, (wi, v) =>
        wi.SetHeight(v), wi => wi.GetHeight(), true);
    add("offsetAngle", (wi, v) => wi.OffsetAngle(v), (wi, v) => wi.SetAngle(v), wi => wi.GetAngle(), false, true);
    add("offsetOpacity", (wi, v, t, a, noChanges) => {
        const opacityFactor = a._opacityFactor ? a._opacityFactor : 1;
        v /= opacityFactor;
        const o = wi.GetOpacity();
        const nv = o + v;
        const min = 0;
        const max = 1;
        if (a._clampAccumulator === 0) {
            if (nv > max) a._clampAccumulator += nv - max;
            else if (nv < min) a._clampAccumulator += nv;
            wi.OffsetOpacity(v)
        } else {
            const nv = wi.GetOpacity() + v;
            if (v > 0 && a._clampAccumulator > 0) {
                if (nv > max) a._clampAccumulator += nv - max
            } else if (v > 0 && a._clampAccumulator < 0) {
                a._clampAccumulator += v;
                if (a._clampAccumulator > 0) a._clampAccumulator =
                    0
            } else if (v < 0 && a._clampAccumulator > 0) {
                a._clampAccumulator += v;
                if (a._clampAccumulator < 0) a._clampAccumulator = 0
            } else if (v < 0 && a._clampAccumulator < 0)
                if (nv < min) a._clampAccumulator += nv
        }
    }, (wi, v) => {
        wi.SetOpacity(v)
    }, wi => {
        return wi.GetOpacity()
    }, false, true, (a, wi, t) => {
        a._clampAccumulator = 0;
        switch (a._propertyTrack.GetResultMode()) {
            case "relative":
                {
                    const propertyTrackData = a._propertyTrack.GetPropertyTrackData();
                    const propertyTrackDataItem = a._propertyTrack.GetPropertyTrackDataItem();
                    const propertyKeyframeData = propertyTrackDataItem.GetPropertyKeyframeData();
                    const propertyKeyframeDataItems = propertyKeyframeData.GetPropertyKeyframeDataItemArray();
                    let startingAbsoluteOpacity = a.GetWorldInfo().GetOpacity();
                    let currentAbsoluteOpacity = startingAbsoluteOpacity;
                    for (const propertyKeyframeDataItem of propertyKeyframeDataItems) {
                        const time = propertyKeyframeDataItem.GetTime();
                        const currentRelativeOpacity = a._propertyTrack.GetInterpolatedValue(time);
                        currentAbsoluteOpacity = startingAbsoluteOpacity + currentRelativeOpacity;
                        currentAbsoluteOpacity = C3.clamp(currentAbsoluteOpacity,
                            0, 1)
                    }
                    a._totalForewardOpacityDelta = startingAbsoluteOpacity - currentAbsoluteOpacity;a._totalForewardOpacityDelta = Math.round((a._totalForewardOpacityDelta + Number.EPSILON) * 100) / 100;currentAbsoluteOpacity = startingAbsoluteOpacity;
                    for (let i = propertyKeyframeDataItems.length - 1; i >= 0; i--) {
                        const time = propertyKeyframeDataItems[i].GetTime();
                        const currentRelativeOpacity = a._propertyTrack.GetInterpolatedValue(time);
                        currentAbsoluteOpacity -= currentRelativeOpacity;
                        currentAbsoluteOpacity = C3.clamp(currentAbsoluteOpacity,
                            0, 1)
                    }
                    a._totalBackwardOpacityDelta = currentAbsoluteOpacity;a._totalBackwardOpacityDelta = Math.round((a._totalBackwardOpacityDelta + Number.EPSILON) * 100) / 100;
                    break
                }
            case "absolute":
                {
                    break
                }
        }
        const isRelative = a._propertyTrack.GetResultMode() === "relative";
        const isTween = a._typeAdapter.GetType() === 1;
        if ((isRelative || isTween) && wi.HasParent() && wi.GetTransformWithParentOpacity()) {
            const parents = [];
            let parent = wi.GetParent();
            while (parent) {
                parents.push(parent);
                parent = parent.GetParent()
            }
            parents.reverse();
            const get_last_property_keyframe_value =
                (wi, t, propertyName) => {
                    const track = t.GetTimeline().GetTrackFromInstance(wi.GetInstance());
                    if (!track) return 0;
                    const propertyTrack = track.GetPropertyTrack(propertyName);
                    if (!propertyTrack) return 0;
                    const parentPropertyKeyframeData = propertyTrack.GetPropertyTrackDataItem().GetPropertyKeyframeData();
                    if (!parentPropertyKeyframeData) return 0;
                    const parentLastPropertyKeyframeDataItem = parentPropertyKeyframeData.GetLastPropertyKeyframeDataItem();
                    if (!parentLastPropertyKeyframeDataItem) return 0;
                    return parentLastPropertyKeyframeDataItem.GetValue()
                };
            let opacityFactor = parents[0]._GetSceneGraphInfo().GetStartOpacity();
            opacityFactor += get_last_property_keyframe_value(parents[0], t, "offsetOpacity");
            for (let i = 1; i < parents.length; i++) opacityFactor += get_last_property_keyframe_value(parents[i], t, "offsetOpacity");
            a._opacityFactor = opacityFactor === 0 ? 1 : opacityFactor
        }
    }, a => {
        switch (a._propertyTrack.GetResultMode()) {
            case "relative":
                {
                    a._clampAccumulator = 0;
                    const wi = a.GetWorldInfo();
                    let currentOpacity = wi.GetOpacity();currentOpacity = Math.round((currentOpacity + Number.EPSILON) *
                        100) / 100;
                    if (a._propertyTrack.GetTimeline().IsForwardPlayBack()) {
                        wi.SetOpacity(currentOpacity + a._totalForewardOpacityDelta);
                        a._lastValue = 0
                    } else {
                        wi.SetOpacity(currentOpacity - a._totalBackwardOpacityDelta);
                        a._lastValue = a.GetSourceAdapter().GetValueAtTime()
                    }
                    break
                }
            case "absolute":
                {
                    break
                }
        }
    });
    add("offsetOriginX", (wi, v) => wi.OffsetOriginX(v), (wi, v) => wi.SetOriginX(v), wi => wi.GetOriginX(), false);
    add("offsetOriginY", (wi, v) => wi.OffsetOriginY(v), (wi, v) => wi.SetOriginY(v), wi => wi.GetOriginY(), false);
    add("offsetZElevation", (wi, v) => wi.OffsetZElevation(v), (wi, v) => wi.SetZElevation(v), wi => wi.GetZElevation(), true);
    add("offsetScaleX", (wi, v, t, a) => {
        if (v === 0) return;
        const mirrorFactor = wi.GetWidth() < 0 ? -1 : 1;
        if (a._propertyTrack.GetResultMode() === "relative" && wi.HasParent() && wi.GetTransformWithParentWidth()) {
            const value = t.GetOriginalWidth() * mirrorFactor * v;
            if (isNaN(a._absoluteToFactor)) INSTANCE_FUNC_MAP.get("offsetWidth").setter(wi, 1, t, a, true);
            wi.OffsetWidth(value / a._absoluteToFactor, true)
        } else wi.OffsetWidth(t.GetOriginalWidth() * mirrorFactor * v)
    }, (wi, v, t) => {
        wi.SetWidth(t.GetOriginalWidth() * v)
    }, (wi, t) => {
        const mirrorFactor =
            wi.GetWidth() < 0 ? -1 : 1;
        if (wi.GetTransformWithParentWidth()) {
            const parentWi = wi.GetParent();
            const parentTrack = t.GetTimeline().GetTrackFromInstance(parentWi.GetInstance());
            let parentScale = NaN;
            if (parentTrack) parentScale = parentWi.GetWidth() / parentTrack.GetOriginalWidth();
            else {
                const sdki = parentWi.GetInstance().GetSdkInstance();
                if (sdki.IsOriginalSizeKnown()) parentScale = parentWi.GetWidth() / sdki.GetOriginalWidth();
                else parentScale = 1
            }
            return wi.GetWidth() * mirrorFactor / (t.GetOriginalWidth() * parentScale)
        } else return wi.GetWidth() *
            mirrorFactor / t.GetOriginalWidth()
    }, false);
    add("offsetScaleY", (wi, v, t, a) => {
        if (v === 0) return;
        const flipFactor = wi.GetHeight() < 0 ? -1 : 1;
        if (a._propertyTrack.GetResultMode() === "relative" && wi.HasParent() && wi.GetTransformWithParentHeight()) {
            const value = t.GetOriginalHeight() * flipFactor * v;
            if (isNaN(a._absoluteToFactor)) INSTANCE_FUNC_MAP.get("offsetHeight").setter(wi, 1, t, a, true);
            wi.OffsetHeight(value / a._absoluteToFactor, true)
        } else wi.OffsetHeight(t.GetOriginalHeight() * flipFactor * v)
    }, (wi, v, t) => {
        wi.SetHeight(t.GetOriginalHeight() * v)
    }, (wi, t) => {
        const flipFactor =
            wi.GetHeight() < 0 ? -1 : 1;
        if (wi.GetTransformWithParentHeight()) {
            const parentWi = wi.GetParent();
            const parentTrack = t.GetTimeline().GetTrackFromInstance(parentWi.GetInstance());
            let parentScale = NaN;
            if (parentTrack) parentScale = parentWi.GetHeight() / parentTrack.GetOriginalHeight();
            else {
                const sdki = parentWi.GetInstance().GetSdkInstance();
                if (sdki.IsOriginalSizeKnown()) parentScale = parentWi.GetHeight() / sdki.GetOriginalHeight();
                else parentScale = 1
            }
            return wi.GetHeight() * flipFactor / (t.GetOriginalHeight() * parentScale)
        } else return wi.GetHeight() *
            flipFactor / t.GetOriginalHeight()
    }, false);
    class NumericInterpolationAdapter extends C3.PropertyTrackState.PropertyInterpolationAdapter {
        constructor(sourceAdapter) {
            super(sourceAdapter);
            this._lastValue = 0;
            this._clampAccumulator = 0;
            this._totalForewardOpacityDelta = 0;
            this._totalBackwardOpacityDelta = 0;
            this._opacityFactor = NaN;
            this._absoluteToFactor = NaN;
            this._instance_getter = null;
            this._instance_setter = null;
            this._instance_absolute_setter = null;
            this._reset_action = null;
            this._init_action = null;
            this._source_adapter_getter = null;
            this._source_adapter_setter =
                null;
            this._source_adapter_absolute_setter = null;
            this._round = false;
            this._fRound = false;
            if (C3.IsInstanceOf(this._propertyTrack.GetTimeline(), C3.TweenState)) this._typeAdapter = new C3.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTween(this);
            else this._typeAdapter = new C3.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTimeline(this);
            const property = this._propertyTrack.GetPropertyName();
            switch (this._propertyTrack.GetSourceAdapterId()) {
                case "world-instance":
                    {
                        const p =
                            INSTANCE_FUNC_MAP.get(property);this._instance_getter = p.getter;this._instance_setter = p.setter;this._instance_absolute_setter = p.absolute_setter;this._round = p.round;this._fRound = p.fRound;this._init_action = p.init;this._reset_action = p.reset;
                        break
                    }
                case "audio":
                    {
                        this._source_adapter_getter = sourceAdapter.Getter;this._source_adapter_setter = sourceAdapter.Setter;this._source_adapter_absolute_setter = sourceAdapter.AbsoluteSetter;this._round = !!sourceAdapter.DoesRounding();this._fRound = false;
                        break
                    }
            }
        }
        Release() {
            this._typeAdapter =
                null;
            this._instance_getter = null;
            this._instance_setter = null;
            this._instance_absolute_setter = null;
            this._absoluteToFactor = NaN;
            super.Release()
        }
        MayNeedBeforeAndAfterInterpolate() {
            return this._typeAdapter.MayNeedBeforeAndAfterInterpolate()
        }
        GetLastValue() {
            return this._lastValue
        }
        SetLastValue(v) {
            this._lastValue = v
        }
        SetResetState() {
            if (this._reset_action) this._reset_action(this)
        }
        SetInitialState() {
            const initValue = this._typeAdapter.SetInitialState();
            if (typeof initValue === "number") this._lastValue = initValue;
            if (this._init_action) {
                const wi =
                    this.GetWorldInfo();
                const track = this._propertyTrack.GetTrack();
                this._init_action(this, wi, track)
            }
        }
        SetResumeState() {
            const resumeValue = this._typeAdapter.SetResumeState();
            if (typeof resumeValue === "number") this._lastValue = resumeValue
        }
        GetCurrentState() {
            return this._Getter()
        }
        CompareInitialStateWithCurrent() {
            const firstKeyframeValue = this._FirstKeyframeGetter();
            return firstKeyframeValue !== this.GetCurrentState()
        }
        CompareSaveStateWithCurrent() {
            if (C3.IsNullOrUndefined(this._saveState)) return false;
            return this._saveState !==
                this.GetCurrentState()
        }
        BeforeChangeProperty() {
            this._typeAdapter.BeforeChangeProperty()
        }
        ChangeProperty(time, value, start, end, setTime, ensureValue, endState) {
            return this._typeAdapter.ChangeProperty(time, value, start, end, setTime, ensureValue, endState)
        }
        AfterChangeProperty() {
            this._typeAdapter.AfterChangeProperty()
        }
        _Getter() {
            const target = this._GetTarget();
            const index = this._GetIndex();
            const wi = this.GetWorldInfo();
            const track = this._propertyTrack.GetTrack();
            const id = this._propertyTrack.GetSourceAdapterId();
            switch (id) {
                case "behavior":
                    return target.GetPropertyValueByIndex(index);
                case "effect":
                    return target[index];
                case "instance-variable":
                    return target.GetInstanceVariableValue(index);
                case "plugin":
                    return target.GetPropertyValueByIndex(index);
                case "world-instance":
                    return this._instance_getter(wi, track);
                case "audio":
                    return this._source_adapter_getter.call(this.GetSourceAdapter(), wi, track)
            }
        }
        _Setter(value, start, end) {
            const target = this._GetTarget();
            const index = this._GetIndex();
            const wi = this.GetWorldInfo();
            const track = this._propertyTrack.GetTrack();
            const id = this._propertyTrack.GetSourceAdapterId();
            switch (id) {
                case "behavior":
                    target.OffsetPropertyValueByIndex(index, value);
                    break;
                case "effect":
                    target[index] += value;
                    break;
                case "instance-variable":
                    target.SetInstanceVariableOffset(index, value);
                    break;
                case "plugin":
                    target.OffsetPropertyValueByIndex(index, value, this.GetSourceAdapter().GetOptionalCallbacks());
                    break;
                case "world-instance":
                    this._instance_setter(wi, value, track, this);
                    break;
                case "audio":
                    this._source_adapter_setter.call(this.GetSourceAdapter(), wi, value, track, this);
                    break
            }
        }
        _SetterAbsolute(value,
            start, end) {
            const target = this._GetTarget();
            const index = this._GetIndex();
            const wi = this.GetWorldInfo();
            const track = this._propertyTrack.GetTrack();
            const id = this._propertyTrack.GetSourceAdapterId();
            switch (id) {
                case "behavior":
                    target.SetPropertyValueByIndex(index, value);
                    break;
                case "effect":
                    target[index] = value;
                    break;
                case "instance-variable":
                    target.SetInstanceVariableValue(index, value);
                    break;
                case "plugin":
                    target.SetPropertyValueByIndex(index, value, this.GetSourceAdapter().GetOptionalCallbacks());
                    break;
                case "world-instance":
                    this._instance_absolute_setter(wi,
                        value, track);
                    break;
                case "audio":
                    this._source_adapter_absolute_setter.call(this.GetSourceAdapter(), wi, value, track);
                    break
            }
        }
        _MaybeEnsureValue(time, start, end, setTime, lastValue, currentValue, forceEndValue, endState) {
            this._typeAdapter._MaybeEnsureValue(time, start, end, setTime, lastValue, currentValue, forceEndValue, endState)
        }
        _AddDelta(value, start, end, forceEndValue, endState) {
            switch (this._propertyTrack.GetPropertyType()) {
                case "angle":
                    {
                        value = C3.toDegrees(value);
                        break
                    }
                default:
                    {
                        value = value;
                        break
                    }
            }
            const stringValue =
                value.toString();
            const decimalsString = stringValue.split(".")[1] || "";
            const decimalPlaces = decimalsString.length;
            const v = this._Getter();
            let rv;
            if (decimalPlaces === 0)
                if (this._round) rv = Math.round(v);
                else if (this._fRound) switch (this._propertyTrack.GetPropertyType()) {
                case "angle":
                    {
                        rv = C3.toRadians(Math.round(C3.toDegrees(v)));
                        break
                    }
                default:
                    {
                        rv = Math.round((v + Number.EPSILON) * 100) / 100;
                        break
                    }
            } else rv = v;
            else if (this._round) rv = Number(C3.toFixed(v, decimalPlaces));
            else if (this._fRound) rv = v;
            else rv = v;
            this._Setter(rv -
                v, start, end)
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                "v": this._lastValue,
                "a": this._clampAccumulator,
                "fod": this._totalForewardOpacityDelta,
                "bod": this._totalBackwardOpacityDelta
            })
        }
        _LoadFromJson(o) {
            if (!o) return;
            super._LoadFromJson(o);
            this._lastValue = o["v"];
            this._clampAccumulator = o["a"];
            this._totalForewardOpacityDelta = C3.IsFiniteNumber(o["fod"]) ? o["fod"] : 0;
            this._totalBackwardOpacityDelta = C3.IsFiniteNumber(o["bod"]) ? o["bod"] : 0
        }
    }
    C3.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapter = NumericInterpolationAdapter;

}

// timelines/state/propertyInterpolationAdapters/numericInterpolationAdapterForTimeline.js
{
    'use strict';
    const C3 = self.C3;
    class AbsoluteValueObject {
        constructor(propertyTracks) {
            this._used = false;
            this._value = 0;
            this._propertyTracks = propertyTracks;
            for (let i = 0, l = this._propertyTracks.length; i < l; i++) this._propertyTracks[i].SetAbsoluteValueObject(this)
        }
        GetPropertyTracks() {
            return this._propertyTracks
        }
        SetUsed() {
            this._used = true
        }
        GetUsed() {
            return this._used
        }
        SetValue(v) {
            this._value = v
        }
        GetValue() {
            return this._value
        }
        Reset() {
            this._used = false;
            this._value = 0
        }
    }
    class NumericInterpolationAdapterForTimeline {
        constructor(numericInterpolationAdapter) {
            this._numericInterpolationAdapter = numericInterpolationAdapter
        }
        Release() {
            this._numericInterpolationAdapter = null
        }
        GetType() {
            return 0
        }
        SetInitialState() {
            const adapter = this._numericInterpolationAdapter;
            const propertyTrack = this._numericInterpolationAdapter.GetPropertyTrack();
            return adapter._PickResultMode(() => {
                return adapter._PickTimelinePlaybackMode(() => 0, () => adapter.GetSourceAdapter().GetValueAtTime())
            }, () => {})
        }
        SetResumeState() {}
        MayNeedBeforeAndAfterInterpolate() {
            const adapter =
                this._numericInterpolationAdapter;
            const propertyTrack = this._numericInterpolationAdapter.GetPropertyTrack();
            switch (propertyTrack.GetResultMode()) {
                case "relative":
                    {
                        return false
                    }
                case "absolute":
                    {
                        return true
                    }
            }
        }
        BeforeChangeProperty() {
            const adapter = this._numericInterpolationAdapter;
            const propertyTrack = this._numericInterpolationAdapter.GetPropertyTrack();
            const property = propertyTrack.GetPropertyName();
            switch (propertyTrack.GetResultMode()) {
                case "relative":
                    {
                        break
                    }
                case "absolute":
                    {
                        if (propertyTrack.HasAbsoluteValueObject()) {
                            const valueObj =
                                propertyTrack.GetAbsoluteValueObject();
                            valueObj.Reset()
                        } else {
                            const timeline = propertyTrack.GetTimeline();
                            const instance = propertyTrack.GetInstance();
                            const sourceAdapter = propertyTrack.GetSourceAdapter();
                            const similarPropertyTracks = timeline.GetSimilarPropertyTracks(instance, sourceAdapter, property);
                            if (similarPropertyTracks && similarPropertyTracks.length > 1) new AbsoluteValueObject(similarPropertyTracks)
                        }
                        break
                    }
            }
        }
        ChangeProperty(time, value, start, end, setTime, ensureValue, endState) {
            const adapter = this._numericInterpolationAdapter;
            const propertyTrack = this._numericInterpolationAdapter.GetPropertyTrack();
            switch (propertyTrack.GetResultMode()) {
                case "relative":
                    {
                        const lastValue = adapter.GetLastValue();adapter._Setter(value - lastValue, start, end);
                        if (ensureValue) this._MaybeEnsureValue(time, start, end, setTime, lastValue, value);adapter.SetLastValue(value);
                        break
                    }
                case "absolute":
                    {
                        const timeline = propertyTrack.GetTimeline();
                        const track = propertyTrack.GetTrack();
                        const instance = propertyTrack.GetInstance();
                        const sourceAdapter = propertyTrack.GetSourceAdapter();
                        if (propertyTrack.HasAbsoluteValueObject()) {
                            const absoluteValueObject = propertyTrack.GetAbsoluteValueObject();
                            const similarpropertyTracks = absoluteValueObject.GetPropertyTracks();
                            const propertyKeyframeStubs = adapter._GetPropertyKeyframeStubs(similarpropertyTracks, true);
                            const stub = adapter._GetLastPropertyKeyframeStub(timeline, timeline.GetTime(), propertyKeyframeStubs);
                            if (stub) {
                                const startOffset = track.GetStartOffset();
                                const t = stub.time - startOffset;
                                if (t === 0) {
                                    absoluteValueObject.SetUsed();
                                    absoluteValueObject.SetValue(absoluteValueObject.GetValue() +
                                        value)
                                } else {
                                    if (t < 0) return;
                                    const v = propertyTrack.GetInterpolatedValue(t);
                                    absoluteValueObject.SetUsed();
                                    absoluteValueObject.SetValue(absoluteValueObject.GetValue() + (value - v))
                                }
                            }
                        } else adapter._SetterAbsolute(value);
                        break
                    }
            }
        }
        AfterChangeProperty() {
            const adapter = this._numericInterpolationAdapter;
            const propertyTrack = this._numericInterpolationAdapter.GetPropertyTrack();
            switch (propertyTrack.GetResultMode()) {
                case "relative":
                    {
                        break
                    }
                case "absolute":
                    {
                        if (propertyTrack.HasAbsoluteValueObject()) {
                            const absoluteValueObject =
                                propertyTrack.GetAbsoluteValueObject();
                            if (absoluteValueObject.GetUsed()) adapter._SetterAbsolute(absoluteValueObject.GetValue())
                        }
                        break
                    }
            }
        }
        _MaybeEnsureValue(time, start, end, setTime, lastValue, currentValue) {
            const adapter = this._numericInterpolationAdapter;
            if (setTime) return;
            if (start && time === start.GetTime()) adapter._AddDelta(start.GetValueWithResultMode(), start, end);
            else if (end && time === end.GetTime()) adapter._AddDelta(end.GetValueWithResultMode(), start, end);
            else if (currentValue - lastValue === 0) adapter._AddDelta(start.GetValueWithResultMode(),
                start, end)
        }
    }
    C3.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTimeline = NumericInterpolationAdapterForTimeline;

}

// timelines/state/propertyInterpolationAdapters/numericInterpolationAdapterForTween.js
{
    'use strict';
    const C3 = self.C3;
    class NumericInterpolationAdapterForTween {
        constructor(numericInterpolationAdapter) {
            this._numericInterpolationAdapter = numericInterpolationAdapter
        }
        Release() {
            this._numericInterpolationAdapter = null
        }
        GetType() {
            return 1
        }
        SetInitialState() {
            const adapter = this._numericInterpolationAdapter;
            adapter.SetFirstAbsoluteUpdate(true);
            return this._GetAbsoluteInitialValue(adapter._FirstKeyframeGetter())
        }
        SetResumeState() {
            const adapter = this._numericInterpolationAdapter;
            if (adapter._FirstKeyframeGetter() === adapter._CurrentKeyframeGetter()) return;
            adapter.SetFirstAbsoluteUpdate(true);
            return this._GetAbsoluteInitialValue(adapter._CurrentKeyframeGetter())
        }
        MayNeedBeforeAndAfterInterpolate() {
            return false
        }
        BeforeChangeProperty() {}
        ChangeProperty(time, value, start, end, setTime, ensureValue, endState) {
            const adapter = this._numericInterpolationAdapter;
            const lastValue = adapter.GetLastValue();
            switch (adapter.GetPropertyTrack().GetResultMode()) {
                case "relative":
                    {
                        adapter._Setter(value - lastValue, start, end);
                        if (ensureValue) this._MaybeEnsureValue(time, start, end, setTime,
                            lastValue, value, false, endState);
                        break
                    }
                case "absolute":
                    {
                        if (adapter.GetFirstAbsoluteUpdate()) {
                            adapter.SetFirstAbsoluteUpdate(false);
                            adapter._Setter(lastValue, start, end)
                        } else {
                            adapter._Setter(value - lastValue, start, end);
                            if (ensureValue) this._MaybeEnsureValue(time, start, end, setTime, lastValue, value, this._ForceEndValue(), endState)
                        }
                        break
                    }
            }
            adapter.SetLastValue(value)
        }
        AfterChangeProperty() {}
        _GetAbsoluteInitialValue(keyframeValue) {
            const adapter = this._numericInterpolationAdapter;
            return keyframeValue - adapter.GetCurrentState()
        }
        _ForceEndValue() {
            const adapter =
                this._numericInterpolationAdapter;
            const inst = adapter.GetWorldInfo().GetInstance();
            const runtime = adapter.GetPropertyTrack().GetRuntime();
            const timelineManager = runtime.GetTimelineManager();
            let activeTimelineCount = 0;
            for (const timeline of timelineManager.GetPlayingTimelines())
                if (timeline.GetType() === 0) {
                    if (timeline.HasTrackInstance(inst)) activeTimelineCount++
                } else if (timeline.GetType() === 1)
                if (timeline.GetInstance() === inst) activeTimelineCount++;
            return activeTimelineCount <= 1
        }
        _MaybeEnsureValue(time, start,
            end, setTime, lastValue, currentValue, forceEndValue, endState) {
            const adapter = this._numericInterpolationAdapter;
            if (setTime)
                if (start && time === start.GetTime()) adapter._AddDelta(start.GetValueWithResultMode(), start, end, forceEndValue, endState);
                else if (end && time === end.GetTime()) adapter._AddDelta(end.GetValueWithResultMode(), start, end, forceEndValue, endState);
            else {
                if (!end) adapter._AddDelta(start.GetValueWithResultMode(), start, end, forceEndValue, endState)
            } else if (start && time === start.GetTime()) adapter._AddDelta(start.GetValueWithResultMode(),
                start, end, forceEndValue, endState);
            else if (end && time === end.GetTime()) adapter._AddDelta(end.GetValueWithResultMode(), start, end, forceEndValue, endState);
            else if (currentValue - lastValue === 0) adapter._AddDelta(start.GetValueWithResultMode(), start, end, forceEndValue, endState)
        }
    }
    C3.PropertyTrackState.PropertyInterpolationAdapter.NumericInterpolationAdapterForTween = NumericInterpolationAdapterForTween;

}

// timelines/state/propertyTypeAdapters/numericTypeAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const Ease = self.Ease;
    C3.PropertyTrackState.NumericTypeAdapter = class NumericTypeAdapter {
        constructor() {}
        static WillChange(index, source, newValue, type) {
            let oldValue;
            switch (type) {
                case "behavior":
                    oldValue = source.GetPropertyValueByIndex(index);
                    break;
                case "effect":
                    oldValue = source[index];
                    break;
                case "instance-variable":
                    oldValue = source.GetInstanceVariableValue(index);
                    break;
                case "plugin":
                    oldValue = source.GetPropertyValueByIndex(index);
                    break
            }
            if (oldValue === newValue) return false;
            return true
        }
        static Interpolate(time, start, end, propertyTrack) {
            if (!end) {
                let propertyTrackDataItem =
                    propertyTrack.GetPropertyTrackDataItem();
                const propertyTrackData = propertyTrack.GetPropertyTrackData();
                propertyTrackDataItem = propertyTrackData.GetLastPropertyKeyframeDataItem(propertyTrackDataItem);
                return propertyTrackDataItem.GetValueWithResultMode()
            }
            let mode = propertyTrack.GetInterpolationMode();
            if (mode === "default") mode = "continuous";
            if (propertyTrack.GetPropertyType() === "combo") mode = "discrete";
            if (mode === "discrete") return start.GetValueWithResultMode();
            else if (mode === "continuous" || mode === "step") {
                if (mode ===
                    "step") {
                    const step = propertyTrack.GetTimeline().GetStep();
                    if (step !== 0) {
                        const s = 1 / step;
                        time = Math.floor(time * s) / s
                    }
                }
                const sv = start.GetValueWithResultMode();
                const ev = end.GetValueWithResultMode();
                const startAddon = start.GetAddOn("cubic-bezier");
                const endAddon = end.GetAddOn("cubic-bezier");
                const doCubicBezier = startAddon && startAddon.GetStartEnable() && endAddon && endAddon.GetEndEnable();
                if (!doCubicBezier && sv === ev) return sv;
                const st = start.GetTime();
                const et = end.GetTime();
                const n = C3.normalize(time, st, et);
                const e =
                    start.GetEase();
                let ret;
                if (doCubicBezier) {
                    const dt = et - st;
                    ret = Ease.GetRuntimeEase(e)(dt * n, 0, 1, dt);
                    ret = Ease.GetRuntimeEase("cubicbezier")(ret, sv, sv + startAddon.GetStartAnchor(), ev + endAddon.GetEndAnchor(), ev)
                } else ret = Ease.GetRuntimeEase(e)((et - st) * n, sv, ev - sv, et - st);
                if (propertyTrack.GetPropertyType() === "integer") return Math.floor(ret);
                return ret
            }
        }
    };

}

// timelines/state/propertyTypeAdapters/angleTypeAdapter.js
{
    'use strict';
    const C3 = self.C3;
    C3.PropertyTrackState.AngleTypeAdapter = class AngleTypeAdapter {
        constructor() {}
        static WillChange(index, source, newValue, type) {
            let oldValue;
            switch (type) {
                case "behavior":
                    oldValue = source.GetPropertyValueByIndex(index);
                    break;
                case "effect":
                    oldValue = source[index];
                    break;
                case "instance-variable":
                    oldValue = source.GetInstanceVariableValue(index);
                    break;
                case "plugin":
                    oldValue = source.GetPropertyValueByIndex(index);
                    break
            }
            if (oldValue === newValue) return false;
            return true
        }
        static Interpolate(time, start, end, propertyTrack) {
            if (!end) {
                let propertyTrackDataItem =
                    propertyTrack.GetPropertyTrackDataItem();
                const propertyTrackData = propertyTrack.GetPropertyTrackData();
                propertyTrackDataItem = propertyTrackData.GetLastPropertyKeyframeDataItem(propertyTrackDataItem);
                return propertyTrackDataItem.GetValueWithResultMode()
            }
            let mode = propertyTrack.GetInterpolationMode();
            if (mode === "default") mode = "continuous";
            if (propertyTrack.GetPropertyType() === "combo") mode = "discrete";
            if (mode === "discrete") return start.GetValueWithResultMode();
            else if (mode === "continuous" || mode === "step") {
                if (mode ===
                    "step") {
                    const step = propertyTrack.GetTimeline().GetStep();
                    if (step !== 0) {
                        const s = 1 / step;
                        time = Math.floor(time * s) / s
                    }
                }
                const st = start.GetTime();
                const et = end.GetTime();
                const sv = start.GetValueWithResultMode();
                const ev = end.GetValueWithResultMode();
                const angleAddon = start.GetAddOn("angle");
                if (angleAddon) {
                    const revolutions = angleAddon.GetRevolutions();
                    if (sv === ev && revolutions === 0) return sv;
                    const n = C3.normalize(time, st, et);
                    const easeFunc = self.Ease.GetRuntimeEase(start.GetEase());
                    const easeRes = easeFunc(n, 0, 1, 1);
                    switch (angleAddon.GetDirection()) {
                        case "closest":
                            return C3.angleLerp(sv,
                                ev, easeRes, revolutions);
                        case "clockwise":
                            return C3.angleLerpClockwise(sv, ev, easeRes, revolutions);
                        case "anti-clockwise":
                            return C3.angleLerpAntiClockwise(sv, ev, easeRes, revolutions)
                    }
                } else {
                    if (sv === ev) return sv;
                    const n = C3.normalize(time, st, et);
                    const easeFunc = self.Ease.GetRuntimeEase(start.GetEase());
                    return C3.angleLerp(sv, ev, easeFunc(n, 0, 1, 1))
                }
            }
        }
    };

}

// timelines/state/propertyTypeAdapters/booleanTypeAdapter.js
{
    'use strict';
    const C3 = self.C3;
    C3.PropertyTrackState.BooleanTypeAdapter = class BooleanTypeAdapter {
        constructor() {}
        static WillChange(index, source, newValue, type) {
            let oldValue;
            switch (type) {
                case "behavior":
                    oldValue = source.GetPropertyValueByIndex(index);
                    break;
                case "effect":
                    oldValue = source[index];
                    break;
                case "instance-variable":
                    oldValue = source.GetInstanceVariableValue(index);
                    break;
                case "plugin":
                    oldValue = source.GetPropertyValueByIndex(index);
                    break
            }
            if (!!oldValue === !!newValue) return false;
            return true
        }
        static Interpolate(time, start, end, propertyTrack) {
            if (!end) {
                let propertyTrackDataItem =
                    propertyTrack.GetPropertyTrackDataItem();
                const propertyTrackData = propertyTrack.GetPropertyTrackData();
                propertyTrackDataItem = propertyTrackData.GetLastPropertyKeyframeDataItem(propertyTrackDataItem);
                return propertyTrackDataItem.GetValueWithResultMode() ? 1 : 0
            }
            return start.GetValueWithResultMode() ? 1 : 0
        }
    };

}

// timelines/state/propertyTypeAdapters/colorTypeAdapter.js
{
    'use strict';
    const C3 = self.C3;
    const TEMP_COLOR_ARRAY = [0, 0, 0];
    const TEMP_COLOR_ARRAY_2 = [0, 0, 0];
    const TEMP_COLOR_ARRAY_3 = [0, 0, 0];
    C3.PropertyTrackState.ColorTypeAdapter = class ColorTypeAdapter {
        constructor() {}
        static WillChange(index, source, newValue, type) {
            let oldValue;
            switch (type) {
                case "behavior":
                    oldValue = source.GetPropertyValueByIndex(index);
                    break;
                case "effect":
                    oldValue = source[index];
                    break;
                case "instance-variable":
                    oldValue = source.GetInstanceVariableValue(index);
                    break;
                case "plugin":
                    oldValue = source.GetPropertyValueByIndex(index);
                    break
            }
            if (Array.isArray(newValue)) {
                TEMP_COLOR_ARRAY[0] = newValue[0];
                TEMP_COLOR_ARRAY[1] = newValue[1];
                TEMP_COLOR_ARRAY[2] =
                    newValue[2]
            } else {
                TEMP_COLOR_ARRAY_3.parseCommaSeparatedRgb(newValue);
                TEMP_COLOR_ARRAY[0] = Math.floor(TEMP_COLOR_ARRAY_3.getR() * 255);
                TEMP_COLOR_ARRAY[1] = Math.floor(TEMP_COLOR_ARRAY_3.getG() * 255);
                TEMP_COLOR_ARRAY[2] = Math.floor(TEMP_COLOR_ARRAY_3.getB() * 255)
            }
            if (Array.isArray(oldValue)) {
                TEMP_COLOR_ARRAY_2[0] = oldValue[0];
                TEMP_COLOR_ARRAY_2[1] = oldValue[1];
                TEMP_COLOR_ARRAY_2[2] = oldValue[2]
            } else {
                TEMP_COLOR_ARRAY_3.parseCommaSeparatedRgb(oldValue);
                TEMP_COLOR_ARRAY_2[0] = Math.floor(TEMP_COLOR_ARRAY_3.getR() *
                    255);
                TEMP_COLOR_ARRAY_2[1] = Math.floor(TEMP_COLOR_ARRAY_3.getG() * 255);
                TEMP_COLOR_ARRAY_2[2] = Math.floor(TEMP_COLOR_ARRAY_3.getB() * 255)
            }
            if (TEMP_COLOR_ARRAY[0] !== TEMP_COLOR_ARRAY_2[0]) return true;
            if (TEMP_COLOR_ARRAY[1] !== TEMP_COLOR_ARRAY_2[1]) return true;
            if (TEMP_COLOR_ARRAY[2] !== TEMP_COLOR_ARRAY_2[2]) return true;
            return false
        }
        static Interpolate(time, start, end, propertyTrack) {
            if (!end) {
                let propertyTrackDataItem = propertyTrack.GetPropertyTrackDataItem();
                const propertyTrackData = propertyTrack.GetPropertyTrackData();
                propertyTrackDataItem = propertyTrackData.GetLastPropertyKeyframeDataItem(propertyTrackDataItem);
                const color = propertyTrackDataItem.GetValueWithResultMode();
                TEMP_COLOR_ARRAY[0] = color[0];
                TEMP_COLOR_ARRAY[1] = color[1];
                TEMP_COLOR_ARRAY[2] = color[2];
                return TEMP_COLOR_ARRAY
            }
            let mode = propertyTrack.GetInterpolationMode();
            if (mode === "default") mode = "continuous";
            if (mode === "discrete") {
                const color = start.GetValueWithResultMode();
                TEMP_COLOR_ARRAY[0] = color[0];
                TEMP_COLOR_ARRAY[1] = color[1];
                TEMP_COLOR_ARRAY[2] = color[2];
                return TEMP_COLOR_ARRAY
            } else if (mode === "continuous" || mode === "step") {
                if (mode === "step") {
                    const step = propertyTrack.GetTimeline().GetStep();
                    if (step !== 0) {
                        const s = 1 / step;
                        time = Math.floor(time * s) / s
                    }
                }
                const st = start.GetTime();
                const et = end.GetTime();
                const sv = start.GetValueWithResultMode();
                const ev = end.GetValueWithResultMode();
                const n = C3.normalize(time, st, et);
                const e = start.GetEase();
                const sr = sv[0];
                const sg = sv[1];
                const sb = sv[2];
                const er = ev[0];
                const eg = ev[1];
                const eb = ev[2];
                const easeFunc = self.Ease.GetRuntimeEase(e);
                const d = et - st;
                const dn = d * n;
                if (sr === er) TEMP_COLOR_ARRAY[0] = sr;
                else TEMP_COLOR_ARRAY[0] = easeFunc(dn, sr, er - sr, d);
                if (sg === eg) TEMP_COLOR_ARRAY[1] = sg;
                else TEMP_COLOR_ARRAY[1] = easeFunc(dn, sg, eg - sg, d);
                if (sb === eb) TEMP_COLOR_ARRAY[2] = sb;
                else TEMP_COLOR_ARRAY[2] = easeFunc(dn, sb, eb - sb, d);
                return TEMP_COLOR_ARRAY
            }
        }
    };

}

// timelines/state/propertyTypeAdapters/textTypeAdapter.js
{
    'use strict';
    const C3 = self.C3;
    C3.PropertyTrackState.TextTypeAdapter = class TextTypeAdapter {
        constructor() {}
        static WillChange(index, source, newValue, type) {
            let oldValue;
            switch (type) {
                case "behavior":
                    oldValue = source.GetPropertyValueByIndex(index);
                    break;
                case "effect":
                    oldValue = source[index];
                    break;
                case "instance-variable":
                    oldValue = source.GetInstanceVariableValue(index);
                    break;
                case "plugin":
                    oldValue = source.GetPropertyValueByIndex(index);
                    break
            }
            if (oldValue === newValue) return false;
            return true
        }
        static Interpolate(time, start, end, propertyTrack) {
            if (!end) {
                let propertyTrackDataItem =
                    propertyTrack.GetPropertyTrackDataItem();
                const propertyTrackData = propertyTrack.GetPropertyTrackData();
                propertyTrackDataItem = propertyTrackData.GetLastPropertyKeyframeDataItem(propertyTrackDataItem);
                return propertyTrackDataItem.GetValueWithResultMode()
            }
            return start.GetValueWithResultMode()
        }
    };

}

// timelines/data/timelineDataManager.js
{
    'use strict';
    const C3 = self.C3;
    C3.TimelineDataManager = class TimelineDataManager {
        constructor() {
            this._timelineDataItems = new Map
        }
        Release() {
            for (const timelineDataItem of this._timelineDataItems.values()) timelineDataItem.Release();
            this._timelineDataItems.clear();
            this._timelineDataItems = null
        }
        Add(data) {
            const timelineDataItem = new C3.TimelineDataItem(data);
            const name = timelineDataItem.GetName();
            this._timelineDataItems.set(name, timelineDataItem)
        }
        Get(name) {
            return this._timelineDataItems.get(name)
        }
        GetNameId() {
            return 0
        }
        static _CreateDataItems(items, jsonItems,
            dataItemConstructor, dataContainer) {
            if (!jsonItems) return;
            for (const jsonItem of jsonItems) C3.TimelineDataManager._CreateDataItem("create", jsonItem, items, dataItemConstructor, dataContainer)
        }
        static _CreateDataItemsIncludingDisabled(items, jsonItems, dataItemConstructor, dataContainer) {
            if (!jsonItems) return;
            for (const jsonItem of jsonItems) C3.TimelineDataManager._CreateDataItem("create-including-disabled", jsonItem, items, dataItemConstructor, dataContainer)
        }
        static _LoadDataItemsFromJson(items, jsonItems, dataItemConstructor,
            dataContainer) {
            if (items.length) jsonItems.forEach((jsonItem, index) => {
                items[index]._LoadFromJson(jsonItem)
            });
            else jsonItems.forEach(jsonItem => {
                C3.TimelineDataManager._CreateDataItem("load", jsonItem, items, dataItemConstructor, dataContainer)
            })
        }
        static _CreateDataItem(mode, json, items, dataItemConstructor, dataContainer) {
            let dataItem;
            if (typeof dataItemConstructor === "function") switch (mode) {
                case "load":
                    dataItem = new dataItemConstructor(null, dataContainer);
                    break;
                case "create":
                    dataItem = new dataItemConstructor(json,
                        dataContainer);
                    break;
                case "create-including-disabled":
                    dataItem = new dataItemConstructor(json, dataContainer);
                    break
            } else if (typeof dataItemConstructor === "object") {
                const prop = dataItemConstructor.prop;
                const value = json[prop];
                const cnstrctr = dataItemConstructor.map.get(value);
                switch (mode) {
                    case "load":
                        dataItem = new cnstrctr(null, dataContainer);
                        break;
                    case "create":
                        dataItem = new cnstrctr(json, dataContainer);
                        break;
                    case "create-including-disabled":
                        dataItem = new cnstrctr(json, dataContainer);
                        break
                }
            }
            switch (mode) {
                case "load":
                    dataItem._LoadFromJson(json);
                    items.push(dataItem);
                    break;
                case "create":
                    if (typeof dataItem.GetEnable === "function" && !dataItem.GetEnable()) return dataItem.Release();
                    items.push(dataItem);
                    break;
                case "create-including-disabled":
                    items.push(dataItem);
                    break
            }
        }
    };

}

// timelines/data/timelineData.js
{
    'use strict';
    const C3 = self.C3;
    const NAME = 0;
    const TOTAL_TIME = 1;
    const STEP = 2;
    const INTERPOLATION_MODE = 3;
    const RESULT_MODE = 4;
    const TRACKS = 5;
    const LOOP = 6;
    const PING_PONG = 7;
    const REPEAT_COUNT = 8;
    const START_ON_LAYOUT = 9;
    const TRANSFORM_WITH_SCENE_GRAPH = 10;
    const USE_SYSTEM_TIMESCALE = 11;
    C3.TimelineDataItem = class TimelineDataItem {
        constructor(timelineDataJson) {
            this._name = "";
            this._totalTime = NaN;
            this._step = 0;
            this._interpolationMode = "default";
            this._resultMode = "default";
            this._loop = false;
            this._pingPong = false;
            this._repeatCount = 1;
            this._trackData = null;
            this._startOnLayout = "";
            this._transformWithSceneGraph = false;
            this._useSystemTimescale = true;
            if (!timelineDataJson) return;
            this._name = timelineDataJson[NAME];
            this._totalTime = timelineDataJson[TOTAL_TIME];
            this._step = timelineDataJson[STEP];
            this._interpolationMode =
                timelineDataJson[INTERPOLATION_MODE];
            this._resultMode = timelineDataJson[RESULT_MODE];
            this._loop = !!timelineDataJson[LOOP];
            this._pingPong = !!timelineDataJson[PING_PONG];
            this._repeatCount = timelineDataJson[REPEAT_COUNT];
            this._startOnLayout = timelineDataJson[START_ON_LAYOUT];
            this._transformWithSceneGraph = !!timelineDataJson[TRANSFORM_WITH_SCENE_GRAPH];
            this._useSystemTimescale = !!timelineDataJson[USE_SYSTEM_TIMESCALE];
            this._trackData = new C3.TrackData(timelineDataJson[TRACKS], this)
        }
        Release() {
            this._trackData.Release();
            this._trackData = null
        }
        GetTrackData() {
            if (!this._trackData) this._trackData = new C3.TrackData(null, this);
            return this._trackData
        }
        GetName() {
            return this._name
        }
        SetName(n) {
            this._name = n
        }
        GetTotalTime() {
            return this._totalTime
        }
        SetTotalTime(tt) {
            this._totalTime = tt
        }
        GetStep() {
            return this._step
        }
        SetStep(s) {
            this._step = s
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(im) {
            this._interpolationMode = im
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(rm) {
            this._resultMode = rm
        }
        GetLoop() {
            return this._loop
        }
        SetLoop(l) {
            this._loop =
                l
        }
        GetPingPong() {
            return this._pingPong
        }
        SetPingPong(p) {
            this._pingPong = p
        }
        GetRepeatCount() {
            return this._repeatCount
        }
        SetRepeatCount(rc) {
            this._repeatCount = rc
        }
        GetStartOnLayout() {
            return this._startOnLayout
        }
        GetTransformWithSceneGraph() {
            return this._transformWithSceneGraph
        }
        GetUseSystemTimescale() {
            return this._useSystemTimescale
        }
        _SaveToJson() {
            return {
                "trackDataJson": this._trackData._SaveToJson(),
                "name": this._name,
                "totalTime": this._totalTime,
                "step": this._step,
                "interpolationMode": this._interpolationMode,
                "resultMode": this._resultMode,
                "loop": this._loop,
                "pingPong": this._pingPong,
                "repeatCount": this._repeatCount,
                "startOnLayout": this._startOnLayout,
                "transformWithSceneGraph": !!this._transformWithSceneGraph,
                "useSystemTimescale": this._useSystemTimescale
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this.GetTrackData()._LoadFromJson(o["trackDataJson"]);
            this._name = o["name"];
            this._totalTime = o["totalTime"];
            this._step = o["step"];
            this._interpolationMode = o["interpolationMode"];
            this._resultMode = o["resultMode"];
            this._loop = o["loop"];
            this._pingPong = o["pingPong"];
            this._repeatCount = o["repeatCount"];
            this._startOnLayout = o["startOnLayout"];
            this._transformWithSceneGraph = !!o["transformWithSceneGraph"];
            this._useSystemTimescale = !!o["useSystemTimescale"]
        }
    };

}

// timelines/data/trackData.js
{
    'use strict';
    const C3 = self.C3;
    const WI_DATA = 0;
    const OC_INDEX = 1;
    const WI_UID = 2;
    const INTERPOLATION_MODE = 1;
    const RESULT_MODE = 2;
    const ENABLED = 3;
    const KEYFRAMES = 4;
    const PROPERTY_TRACKS = 5;
    const ID = 6;
    const NESTED_DATA = 7;
    const START_OFFSET = 0;
    const LOCAL_TOTAL_TIME = 1;
    const WI_ADDITIONAL_DATA = 8;
    const ORIGINAL_WIDTH = 0;
    const ORIGINAL_HEIGHT = 1;
    const TRACK_TYPE = 9;
    const TRACK_NAME = 10;
    class TrackDataItem {
        constructor(trackDataJson, trackData) {
            this._trackData = trackData;
            this._instanceData = null;
            this._additionalInstanceData = null;
            this._instanceUid = NaN;
            this._objectClassIndex = NaN;
            this._interpolationMode = "default";
            this._resultMode = "default";
            this._enabled = false;
            this._keyframeData = null;
            this._propertyTrackData = null;
            this._id = "";
            this._nestedData = null;
            this._startOffset = 0;
            this._localTotalTime = this._trackData.GetTimelineDataItem().GetTotalTime();
            this._type = 0;
            this._name = "";
            if (!trackDataJson) return;
            if (trackDataJson[WI_DATA]) {
                this._instanceData = trackDataJson[WI_DATA];
                this._instanceUid = trackDataJson[WI_DATA][WI_UID];
                this._objectClassIndex = trackDataJson[WI_DATA][OC_INDEX]
            }
            this._interpolationMode = trackDataJson[INTERPOLATION_MODE];
            this._resultMode = trackDataJson[RESULT_MODE];
            this._enabled = !!trackDataJson[ENABLED];
            if (trackDataJson[ID]) this._id = trackDataJson[ID];
            if (trackDataJson[NESTED_DATA]) {
                this._nestedData = trackDataJson[NESTED_DATA];
                this._startOffset = trackDataJson[NESTED_DATA][START_OFFSET];
                this._localTotalTime =
                    trackDataJson[NESTED_DATA][LOCAL_TOTAL_TIME]
            }
            if (trackDataJson[WI_ADDITIONAL_DATA]) this._additionalInstanceData = trackDataJson[WI_ADDITIONAL_DATA];
            if (trackDataJson[WI_ADDITIONAL_DATA]) this._additionalInstanceData = trackDataJson[WI_ADDITIONAL_DATA];
            if (trackDataJson[TRACK_TYPE]) this._type = trackDataJson[TRACK_TYPE];
            if (trackDataJson[TRACK_NAME]) this._name = trackDataJson[TRACK_NAME];
            this._keyframeData = new C3.KeyframeData(trackDataJson[KEYFRAMES], this);
            this._propertyTrackData = new C3.PropertyTrackData(trackDataJson[PROPERTY_TRACKS],
                this)
        }
        Release() {
            this._instanceData = null;
            this._trackData = null;
            if (this._keyframeData) {
                this._keyframeData.Release();
                this._keyframeData = null
            }
            if (this._propertyTrackData) {
                this._propertyTrackData.Release();
                this._propertyTrackData = null
            }
            this._nestedData = null
        }
        GetTrackData() {
            return this._trackData
        }
        GetKeyframeData() {
            if (!this._keyframeData) this._keyframeData = new C3.KeyframeData(null, this);
            return this._keyframeData
        }
        GetPropertyTrackData() {
            if (!this._propertyTrackData) this._propertyTrackData = new C3.PropertyTrackData(null,
                this);
            return this._propertyTrackData
        }
        GetInstanceData() {
            return this._instanceData
        }
        GetObjectClassIndex() {
            return this._objectClassIndex
        }
        SetObjectClassIndex(index) {
            this._objectClassIndex = index
        }
        GetInstanceUID() {
            return this._instanceUid
        }
        SetInstanceUID(uid) {
            this._instanceUid = uid
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(im) {
            this._interpolationMode = im
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(rm) {
            this._resultMode = rm
        }
        GetEnable() {
            return this._enabled
        }
        SetEnable(e) {
            this._enabled = !!e
        }
        GetId() {
            return this._id
        }
        GetStartOffset() {
            return this._startOffset
        }
        GetLocalTotalTime() {
            return this._localTotalTime
        }
        SetLocalTotalTime(t) {
            this._localTotalTime = t
        }
        GetOriginalWidth() {
            return this._additionalInstanceData[ORIGINAL_WIDTH]
        }
        SetOriginalWidth(w) {
            if (!this._additionalInstanceData) this._additionalInstanceData = [];
            this._additionalInstanceData[ORIGINAL_WIDTH] = w
        }
        GetOriginalHeight() {
            if (!this._additionalInstanceData) this._additionalInstanceData = [];
            return this._additionalInstanceData[ORIGINAL_HEIGHT]
        }
        SetOriginalHeight(h) {
            if (!this._additionalInstanceData) this._additionalInstanceData = [];
            this._additionalInstanceData[ORIGINAL_HEIGHT] = h
        }
        GetType() {
            return this._type
        }
        GetName() {
            return this._name
        }
        _SaveToJson() {
            return {
                "keyframeDataJson": this._keyframeData._SaveToJson(),
                "propertyTrackDataJson": this._propertyTrackData._SaveToJson(),
                "instanceData": this._instanceData,
                "additionalInstanceData": this._additionalInstanceData,
                "instanceUid": this._instanceUid,
                "objectClassIndex": this._objectClassIndex,
                "interpolationMode": this._interpolationMode,
                "resultMode": this._resultMode,
                "enabled": this._enabled,
                "id": this._id,
                "nestedData": this._nestedData,
                "type": this._type,
                "name": this._name
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this._instanceData = o["instanceData"];
            this._instanceUid = o["instanceUid"];
            this._objectClassIndex = o["objectClassIndex"];
            this._interpolationMode = o["interpolationMode"];
            this._resultMode = o["resultMode"];
            this._enabled = o["enabled"];
            this._id = o["id"];
            this._type = o["type"] ? o["type"] : 0;
            this._name = o["name"] ? o["name"] : "";
            this._localTotalTime = this._trackData.GetTimelineDataItem().GetTotalTime();
            if (o["nestedData"]) {
                this._nestedData =
                    o["nestedData"];
                this._startOffset = this._nestedData[START_OFFSET];
                this._localTotalTime = this._nestedData[LOCAL_TOTAL_TIME]
            }
            if (o["additionalInstanceData"]) this._additionalInstanceData = o["additionalInstanceData"];
            this.GetKeyframeData()._LoadFromJson(o["keyframeDataJson"]);
            this.GetPropertyTrackData()._LoadFromJson(o["propertyTrackDataJson"])
        }
    }
    C3.TrackData = class TrackData {
        constructor(tracksDataJson, timelineDataItem) {
            this._timelineDataItem = timelineDataItem;
            this._trackDataItems = [];
            C3.TimelineDataManager._CreateDataItems(this._trackDataItems, tracksDataJson, TrackDataItem, this)
        }
        Release() {
            this._timelineDataItem = null;
            for (const trackDataItem of this._trackDataItems) trackDataItem.Release();
            C3.clearArray(this._trackDataItems);
            this._trackDataItems = null
        }
        GetTimelineDataItem() {
            return this._timelineDataItem
        }
        AddEmptyTrackDataItem() {
            const trackDataItem =
                new TrackDataItem(null, this);
            this._trackDataItems.push(trackDataItem);
            return trackDataItem
        }
        GetFirstKeyframeDataItem(trackDataItem) {
            return trackDataItem.GetKeyframeData().GetKeyframeDataItemArray()[0]
        }
        GetLastKeyframeDataItem(trackDataItem) {
            const keyframeDataItems = trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            return keyframeDataItems.at(-1)
        }
        GetKeyFrameDataItemAtTime(time, trackDataItem) {
            const keyframeDataItems = trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            const l = keyframeDataItems.length;
            for (let i = 0; i < l; i++) {
                const keyframeDataItem = keyframeDataItems[i];
                if (keyframeDataItem.GetTime() === time) return keyframeDataItem
            }
        }
        GetFirstKeyFrameDataItemHigherThan(time, trackDataItem) {
            const keyframeDataItems = trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            const l = keyframeDataItems.length;
            for (let i = 0; i < l; i++) {
                const keyframeDataItem = keyframeDataItems[i];
                if (keyframeDataItem.GetTime() > time) return keyframeDataItem
            }
        }
        GetFirstKeyFrameDataItemHigherOrEqualThan(time, trackDataItem) {
            const keyframeDataItems =
                trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            const l = keyframeDataItems.length;
            for (let i = 0; i < l; i++) {
                const keyframeDataItem = keyframeDataItems[i];
                if (keyframeDataItem.GetTime() >= time) return keyframeDataItem
            }
        }
        GetFirstKeyFrameDataItemLowerOrEqualThan(time, trackDataItem) {
            const keyframeDataItems = trackDataItem.GetKeyframeData().GetKeyframeDataItemArray();
            for (let i = keyframeDataItems.length - 1; i >= 0; i--) {
                const keyframeDataItem = keyframeDataItems[i];
                if (keyframeDataItem.GetTime() <= time) return keyframeDataItem
            }
        }* trackDataItems() {
            for (const trackDataItem of this._trackDataItems) yield trackDataItem
        }
        _SaveToJson() {
            return {
                "trackDataItemsJson": this._trackDataItems.map(trackDataItem =>
                    trackDataItem._SaveToJson())
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            C3.TimelineDataManager._LoadDataItemsFromJson(this._trackDataItems, o["trackDataItemsJson"], TrackDataItem, this)
        }
    };

}

// timelines/data/propertyTrackData.js
{
    'use strict';
    const C3 = self.C3;
    const SOURCE_DATA = 0;
    const SOURCE = 0;
    const PROPERTY = 1;
    const TYPE = 2;
    const MIN = 3;
    const MAX = 4;
    const INTERPOLATION_MODE = 5;
    const RESULT_MODE = 6;
    const ENABLED = 7;
    const PROPERTY_KEYFRAMES = 8;
    const CAN_HAVE_PROPERTY_KEYFRAMES = 9;
    class PropertyTrackDataItem {
        constructor(propertyTrackDataJson, propertyTrackData) {
            this._propertyTrackData = propertyTrackData;
            this._sourceAdapterId = "";
            this._sourceAdapterArguments = null;
            this._property = null;
            this._type = null;
            this._min = NaN;
            this._max = NaN;
            this._interpolationMode = "default";
            this._resultMode = "default";
            this._enabled = false;
            this._propertyKeyframeData = null;
            this._canHavePropertyKeyframes = true;
            if (!propertyTrackDataJson) return;
            this._sourceAdapterId = propertyTrackDataJson[SOURCE_DATA][SOURCE];
            this._sourceAdapterArguments =
                propertyTrackDataJson[SOURCE_DATA].slice(1);
            this._property = propertyTrackDataJson[PROPERTY];
            this._type = propertyTrackDataJson[TYPE];
            this._min = propertyTrackDataJson[MIN];
            this._max = propertyTrackDataJson[MAX];
            this._interpolationMode = propertyTrackDataJson[INTERPOLATION_MODE];
            this._resultMode = propertyTrackDataJson[RESULT_MODE];
            this._enabled = !!propertyTrackDataJson[ENABLED];
            this._propertyKeyframeData = new C3.PropertyKeyframeData(propertyTrackDataJson[PROPERTY_KEYFRAMES], this);
            this._canHavePropertyKeyframes =
                propertyTrackDataJson[CAN_HAVE_PROPERTY_KEYFRAMES]
        }
        Release() {
            this._propertyKeyframeData.Release();
            this._propertyKeyframeData = null;
            this._propertyTrackData = null;
            this._sourceAdapterArguments = null
        }
        GetPropertyTrackData() {
            return this._propertyTrackData
        }
        GetPropertyKeyframeData() {
            if (!this._propertyKeyframeData) this._propertyKeyframeData = new C3.PropertyKeyframeData(null, this);
            return this._propertyKeyframeData
        }
        GetSourceAdapterId() {
            return this._sourceAdapterId
        }
        SetSourceAdapterId(said) {
            this._sourceAdapterId =
                said
        }
        GetSourceAdapterArguments() {
            return this._sourceAdapterArguments
        }
        SetSourceAdapterArguments(sargs) {
            this._sourceAdapterArguments = sargs
        }
        GetProperty() {
            return this._property
        }
        SetProperty(p) {
            this._property = p
        }
        GetType() {
            return this._type
        }
        SetType(t) {
            this._type = t
        }
        GetMin() {
            return this._min
        }
        SetMin(min) {
            this._min = min
        }
        GetMax() {
            return this._max
        }
        SetMax(max) {
            this._max = max
        }
        GetInterpolationMode() {
            return this._interpolationMode
        }
        SetInterpolationMode(im) {
            this._interpolationMode = im
        }
        GetResultMode() {
            return this._resultMode
        }
        SetResultMode(rm) {
            this._resultMode =
                rm
        }
        GetEnable() {
            return this._enabled
        }
        SetEnable(e) {
            this._enabled = !!e
        }
        CanHavePropertyKeyframes() {
            return !!this._canHavePropertyKeyframes
        }
        _SaveToJson() {
            return {
                "propertyKeyframeDataJson": this._propertyKeyframeData._SaveToJson(),
                "sourceAdapterId": this._sourceAdapterId,
                "sourceAdapterArguments": this._sourceAdapterArguments,
                "property": this._property,
                "type": this._type,
                "min": this._min,
                "max": this._max,
                "interpolationMode": this._interpolationMode,
                "resultMode": this._resultMode,
                "enabled": this._enabled,
                "canHavePropertyKeyframes": this._canHavePropertyKeyframes
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this._sourceAdapterId = o["sourceAdapterId"];
            this._sourceAdapterArguments = o["sourceAdapterArguments"];
            this._property = o["property"];
            this._type = o["type"];
            this._min = o["min"];
            this._max = o["max"];
            this._interpolationMode = o["interpolationMode"];
            this._resultMode = o["resultMode"];
            this._enabled = o["enabled"];
            this._canHavePropertyKeyframes = o["canHavePropertyKeyframes"];
            this.GetPropertyKeyframeData()._LoadFromJson(o["propertyKeyframeDataJson"])
        }
    }
    C3.PropertyTrackData = class PropertyTrackData {
        constructor(propertyTracksDataJson, trackDataItem) {
            this._trackDataItem = trackDataItem;
            this._propertyTrackDataItems = [];
            C3.TimelineDataManager._CreateDataItems(this._propertyTrackDataItems, propertyTracksDataJson, PropertyTrackDataItem, this)
        }
        Release() {
            this._trackDataItem = null;
            for (const propertyTrackDataItem of this._propertyTrackDataItems) propertyTrackDataItem.Release();
            C3.clearArray(this._propertyTrackDataItems);
            this._propertyTrackDataItems = null
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        AddEmptyPropertyTrackDataItem() {
            const propertyTrackDataItem =
                new PropertyTrackDataItem(null, this);
            this._propertyTrackDataItems.push(propertyTrackDataItem);
            return propertyTrackDataItem
        }
        GetFirstPropertyKeyframeDataItem(propertyTrackDataItem) {
            const propertyKeyframeData = propertyTrackDataItem.GetPropertyKeyframeData();
            return propertyKeyframeData.GetPropertyKeyframeDataItemArray()[0]
        }
        GetLastPropertyKeyframeDataItem(propertyTrackDataItem) {
            const propertyKeyframeData = propertyTrackDataItem.GetPropertyKeyframeData();
            const propertyKeyframeDataItems = propertyKeyframeData.GetPropertyKeyframeDataItemArray();
            return propertyKeyframeDataItems.at(-1)
        }
        GetPropertyKeyFrameDataItemAtTime(time, propertyTrackDataItem) {
            const propertyKeyframeData = propertyTrackDataItem.GetPropertyKeyframeData();
            const propertyKeyframeDataItems = propertyKeyframeData.GetPropertyKeyframeDataItemArray();
            const l = propertyKeyframeDataItems.length;
            for (let i = 0; i < l; i++) {
                const propertyKeyframeDataItem = propertyKeyframeDataItems[i];
                if (propertyKeyframeDataItem.GetTime() === time) return propertyKeyframeDataItem
            }
        }
        GetFirstPropertyKeyFrameDataItemHigherThan(time,
            propertyTrackDataItem) {
            const propertyKeyframeData = propertyTrackDataItem.GetPropertyKeyframeData();
            const propertyKeyframeDataItems = propertyKeyframeData.GetPropertyKeyframeDataItemArray();
            const l = propertyKeyframeDataItems.length;
            for (let i = 0; i < l; i++) {
                const propertyKeyframeDataItem = propertyKeyframeDataItems[i];
                if (propertyKeyframeDataItem.GetTime() > time) return propertyKeyframeDataItem
            }
        }
        GetFirstPropertyKeyFrameDataItemHigherOrEqualThan(time, propertyTrackDataItem) {
            const propertyKeyframeData = propertyTrackDataItem.GetPropertyKeyframeData();
            const propertyKeyframeDataItems = propertyKeyframeData.GetPropertyKeyframeDataItemArray();
            const l = propertyKeyframeDataItems.length;
            for (let i = 0; i < l; i++) {
                const propertyKeyframeDataItem = propertyKeyframeDataItems[i];
                if (propertyKeyframeDataItem.GetTime() >= time) return propertyKeyframeDataItem
            }
        }
        GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time, propertyTrackDataItem) {
            const propertyKeyframeData = propertyTrackDataItem.GetPropertyKeyframeData();
            const propertyKeyframeDataItems = propertyKeyframeData.GetPropertyKeyframeDataItemArray();
            for (let i = propertyKeyframeDataItems.length - 1; i >= 0; i--) {
                const propertyKeyframeDataItem = propertyKeyframeDataItems[i];
                if (propertyKeyframeDataItem.GetTime() <= time) return propertyKeyframeDataItem
            }
        }* propertyTrackDataItems() {
            for (const propertyTrackDataItem of this._propertyTrackDataItems) yield propertyTrackDataItem
        }
        _SaveToJson() {
            return {
                "propertyTrackDataItemsJson": this._propertyTrackDataItems.map(propertyTrackDataItem => propertyTrackDataItem._SaveToJson())
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            C3.TimelineDataManager._LoadDataItemsFromJson(this._propertyTrackDataItems,
                o["propertyTrackDataItemsJson"], PropertyTrackDataItem, this)
        }
    };

}

// timelines/data/keyframeData.js
{
    'use strict';
    const C3 = self.C3;
    const TIME = 0;
    const EASE = 1;
    const ENABLE = 2;
    const TAGS = 3;
    class KeyframeDataItem {
        constructor(keyframeDataJson, keyframeData) {
            this._keyframeData = keyframeData;
            this._time = -1;
            this._ease = "noease";
            this._enable = false;
            this._tags = null;
            this._lowerTags = null;
            if (!keyframeDataJson) return;
            this._time = keyframeDataJson[TIME];
            this._ease = keyframeDataJson[EASE];
            this._enable = !!keyframeDataJson[ENABLE];
            const tagStr = keyframeDataJson[TAGS];
            this._tags = tagStr ? tagStr.split(" ") : [];
            this._lowerTags = new Set(this._tags.map(t => t.toLowerCase()));
            this._next = null
        }
        Release() {
            this._keyframeData =
                null;
            C3.clearArray(this._tags);
            this._tags = null;
            this._lowerTags.clear();
            this._lowerTags = null;
            this._next = null
        }
        GetKeyframeData() {
            return this._keyframeData
        }
        GetNext() {
            return this._next
        }
        SetNext(next) {
            this._next = next
        }
        GetTime() {
            return this._time
        }
        SetTime(t) {
            this._time = t;
            this._keyframeData._LinkKeyframeDataItems()
        }
        GetEase() {
            return this._ease
        }
        SetEase(e) {
            this._ease = e
        }
        GetEnable() {
            return this._enable
        }
        SetEnable(e) {
            this._enable = !!e
        }
        GetTags() {
            return this._tags
        }
        SetTags(t) {
            this._tags = t ? t.split(" ") : [];
            this._lowerTags =
                new Set(this._tags.map(t => t.toLowerCase()))
        }
        GetLowerTags() {
            return this._lowerTags
        }
        HasTag(tag) {
            return this._lowerTags.has(tag.toLowerCase())
        }
        _SaveToJson() {
            return {
                "time": this._time,
                "ease": this._ease,
                "enable": this._enable,
                "tags": this._tags
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this._time = o["time"];
            this._ease = o["ease"];
            this._enable = o["enable"];
            this._tags = o["tags"];
            this._lowerTags = new Set(this._tags.map(t => t.toLowerCase()))
        }
    }
    C3.KeyframeData = class KeyframeData {
        constructor(keyframesDataJson, trackDataItem) {
            this._trackDataItem = trackDataItem;
            this._keyframeDataItems = [];
            C3.TimelineDataManager._CreateDataItems(this._keyframeDataItems, keyframesDataJson, KeyframeDataItem, this);
            this._LinkKeyframeDataItems()
        }
        Release() {
            this._trackDataItem = null;
            for (const keyframeDataItem of this._keyframeDataItems) keyframeDataItem.Release();
            C3.clearArray(this._keyframeDataItems);
            this._keyframeDataItems = null
        }
        _LinkKeyframeDataItems() {
            this._keyframeDataItems.sort((first,
                second) => first.GetTime() - second.GetTime());
            for (let i = 0; i < this._keyframeDataItems.length; i++) {
                const current = this._keyframeDataItems[i];
                current.SetNext(this._keyframeDataItems[i + 1])
            }
        }
        GetTrackDataItem() {
            return this._trackDataItem
        }
        GetKeyframeDataItemCount() {
            return this._keyframeDataItems.length
        }
        GetKeyframeDataItemArray() {
            return this._keyframeDataItems
        }
        AddEmptyKeyframeDataItem() {
            const keyframeDataItem = new KeyframeDataItem(null, this);
            this._keyframeDataItems.push(keyframeDataItem);
            this._LinkKeyframeDataItems();
            return keyframeDataItem
        }
        DeleteKeyframeDataItems(match) {
            for (const keyframeDataItem of this._keyframeDataItems) {
                if (!match(keyframeDataItem)) continue;
                const index = this._keyframeDataItems.indexOf(keyframeDataItem);
                if (index === -1) continue;
                keyframeDataItem.Release();
                this._keyframeDataItems.splice(index, 1)
            }
            this.SortKeyframeDataItems();
            this._LinkKeyframeDataItems()
        }
        SortKeyframeDataItems() {
            this._keyframeDataItems.sort((a, b) => a.GetTime() - b.GetTime())
        }
        GetKeyframeDataItemIndex(keyframeDataItem) {
            return this._keyframeDataItems.indexOf(keyframeDataItem)
        }
        GetKeyframeDataItemFromIndex(index) {
            return this._keyframeDataItems[index]
        }* keyframeDataItems() {
            for (const keyframeDataItem of this._keyframeDataItems) yield keyframeDataItem
        }* keyframeDataItemsReverse() {
            for (let i =
                    this._keyframeDataItems.length - 1; i >= 0; i--) yield this._keyframeDataItems[i]
        }
        _SaveToJson() {
            return {
                "keyframeDataItemsJson": this._keyframeDataItems.map(keyframeDataItem => keyframeDataItem._SaveToJson())
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            C3.TimelineDataManager._LoadDataItemsFromJson(this._keyframeDataItems, o["keyframeDataItemsJson"], KeyframeDataItem, this);
            this._LinkKeyframeDataItems()
        }
    };

}

// timelines/data/propertyKeyframeData.js
{
    'use strict';
    const C3 = self.C3;
    const VALUE_DATA = 0;
    const VALUE_DATA_VALUE = 0;
    const VALUE_DATA_ABSOLUTE_VALUE = 1;
    const VALUE_DATA_TYPE = 2;
    const TIME = 1;
    const EASE = 2;
    const ENABLE = 3;
    const ADDONS = 4;
    const PATH_MODE = 5;
    class PropertyKeyframeDataItem {
        constructor(propertyKeyframeDataJson, propertyKeyframeData) {
            this._propertyKeyframeData = propertyKeyframeData;
            this._value = null;
            this._aValue = null;
            this._type = "";
            this._time = NaN;
            this._ease = "noease";
            this._enable = false;
            this._addonData = null;
            this._addonInstance = undefined;
            this._pathMode = "line";
            if (!propertyKeyframeDataJson) return;
            this._value = propertyKeyframeDataJson[VALUE_DATA][VALUE_DATA_VALUE];
            this._aValue = propertyKeyframeDataJson[VALUE_DATA][VALUE_DATA_ABSOLUTE_VALUE];
            this._type =
                propertyKeyframeDataJson[VALUE_DATA][VALUE_DATA_TYPE];
            this._time = propertyKeyframeDataJson[TIME];
            this._ease = propertyKeyframeDataJson[EASE];
            this._enable = !!propertyKeyframeDataJson[ENABLE];
            this._pathMode = propertyKeyframeDataJson[PATH_MODE];
            this._addonData = null;
            if (!!propertyKeyframeDataJson[ADDONS]) this._addonData = new C3.AddonData(propertyKeyframeDataJson[ADDONS], this);
            this._next = null;
            this._prev = null
        }
        Release() {
            this._propertyKeyframeData = null;
            if (this._addonData) {
                this._addonData.Release();
                this._addonData =
                    null
            }
            this._next = null;
            this._prev = null
        }
        GetAddonData() {
            return this._addonData
        }
        SetNext(next) {
            this._next = next
        }
        GetNext() {
            return this._next
        }
        SetPrevious(prev) {
            this._prev = prev
        }
        GetPrevious() {
            return this._prev
        }
        GetValue() {
            return this._value
        }
        SetValue(value) {
            if (this._type === "color" && C3.IsFiniteNumber(value)) {
                this._value[0] = C3.GetRValue(value);
                this._value[1] = C3.GetGValue(value);
                this._value[2] = C3.GetBValue(value)
            } else this._value = value
        }
        GetAbsoluteValue() {
            return this._aValue
        }
        SetAbsoluteValue(aValue) {
            if (this._type ===
                "color" && C3.IsFiniteNumber(aValue)) {
                this._aValue[0] = C3.GetRValue(aValue);
                this._aValue[1] = C3.GetGValue(aValue);
                this._aValue[2] = C3.GetBValue(aValue)
            } else this._aValue = aValue
        }
        GetValueWithResultMode() {
            const rm = this._propertyKeyframeData.GetPropertyTrackDataItem().GetResultMode();
            if (rm === "relative") return this.GetValue();
            else if (rm === "absolute") return this.GetAbsoluteValue()
        }
        GetType() {
            return this._type
        }
        SetType(t) {
            this._type = t
        }
        GetTime() {
            return this._time
        }
        SetTime(t) {
            this._time = t;
            this._propertyKeyframeData._LinkPropertyKeyframeDataItems()
        }
        GetEase() {
            return this._ease
        }
        SetEase(e) {
            this._ease =
                e
        }
        GetEnable() {
            return this._enable
        }
        SetEnable(e) {
            this._enable = !!e
        }
        GetPathMode() {
            return this._pathMode
        }
        GetAddOn(id) {
            if (!this._addonData) return;
            if (this._addonInstance || this._addonInstance === null) return this._addonInstance;
            const addonArray = this._addonData.GetAddDataItemArray();
            if (!addonArray) {
                this._addonInstance = null;
                return this._addonInstance
            }
            const len = addonArray.length;
            for (let i = 0; i < len; i++) {
                const addon = addonArray[i];
                if (addon.GetId() === id) {
                    this._addonInstance = addon;
                    return this._addonInstance
                }
            }
            this._addonInstance =
                null;
            return this._addonInstance
        }
        _SaveToJson() {
            const aData = this._addonData;
            return {
                "addonDataJson": aData ? aData._SaveToJson() : aData,
                "value": this._value,
                "aValue": this._aValue,
                "type": this._type,
                "time": this._time,
                "ease": this._ease,
                "enable": this._enable
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            if (o["addonDataJson"]) this._addonData._SetFromJson(o["addonDataJson"]);
            this._value = o["value"];
            this._aValue = o["aValue"];
            this._type = o["type"];
            this._time = o["time"];
            this._ease = o["ease"];
            this._enable = o["enable"]
        }
    }
    C3.PropertyKeyframeData = class PropertyKeyframeData {
        constructor(propertyKeyframesDataJson, propertyTrackDataItem) {
            this._propertyTrackDataItem = propertyTrackDataItem;
            this._propertyKeyframeDataItems = [];
            this._propertyKeyframeDataItemsIncludingDisabled = [];
            C3.TimelineDataManager._CreateDataItems(this._propertyKeyframeDataItems, propertyKeyframesDataJson, PropertyKeyframeDataItem, this);
            C3.TimelineDataManager._CreateDataItemsIncludingDisabled(this._propertyKeyframeDataItemsIncludingDisabled, propertyKeyframesDataJson,
                PropertyKeyframeDataItem, this);
            this._LinkPropertyKeyframeDataItems()
        }
        Release() {
            this._propertyTrackDataItem = null;
            for (const propertyKeyframeDataItem of this._propertyKeyframeDataItems) propertyKeyframeDataItem.Release();
            C3.clearArray(this._propertyKeyframeDataItems);
            this._propertyKeyframeDataItems = null;
            for (const propertyKeyframeDataItem of this._propertyKeyframeDataItemsIncludingDisabled) propertyKeyframeDataItem.Release();
            C3.clearArray(this._propertyKeyframeDataItemsIncludingDisabled);
            this._propertyKeyframeDataItemsIncludingDisabled =
                null
        }
        _LinkPropertyKeyframeDataItems() {
            let dataItems = this._propertyKeyframeDataItems;
            dataItems.sort((first, second) => first.GetTime() - second.GetTime());
            for (let i = 0; i < dataItems.length; i++) {
                const current = dataItems[i];
                if (i + 1 < dataItems.length) current.SetNext(dataItems[i + 1]);
                if (i - 1 >= 0) current.SetPrevious(dataItems[i - 1])
            }
            dataItems = this._propertyKeyframeDataItemsIncludingDisabled;
            dataItems.sort((first, second) => first.GetTime() - second.GetTime());
            for (let i = 0; i < dataItems.length; i++) {
                const current = dataItems[i];
                if (i + 1 < dataItems.length) current.SetNext(dataItems[i + 1]);
                if (i - 1 >= 0) current.SetPrevious(dataItems[i - 1])
            }
        }
        AddEmptyPropertyKeyframeDataItem() {
            const propertyKeyframeDataItem = new PropertyKeyframeDataItem(null, this);
            this._propertyKeyframeDataItems.push(propertyKeyframeDataItem);
            this._LinkPropertyKeyframeDataItems();
            return propertyKeyframeDataItem
        }
        DeletePropertyKeyframeDataItems(match) {
            for (const propertyKeyframeDataItem of this._propertyKeyframeDataItems) {
                if (!match(propertyKeyframeDataItem)) continue;
                const index =
                    this._propertyKeyframeDataItems.indexOf(propertyKeyframeDataItem);
                if (index === -1) continue;
                propertyKeyframeDataItem.Release();
                this._propertyKeyframeDataItems.splice(index, 1)
            }
            this.SortPropertyKeyFrameDataItems();
            this._LinkPropertyKeyframeDataItems()
        }
        SortPropertyKeyFrameDataItems() {
            this._propertyKeyframeDataItems.sort((a, b) => a.GetTime() - b.GetTime())
        }
        GetPropertyTrackDataItem() {
            return this._propertyTrackDataItem
        }
        GetPropertyKeyframeDataItemCount() {
            return this._propertyKeyframeDataItems.length
        }
        GetLastPropertyKeyframeDataItem() {
            return this._propertyKeyframeDataItems[this._propertyKeyframeDataItems.length -
                1]
        }
        GetPropertyKeyframeDataItemArray() {
            return this._propertyKeyframeDataItems
        }
        GetPropertyKeyframeDataItemArrayIncludingDisabled() {
            return this._propertyKeyframeDataItemsIncludingDisabled
        }* propertyKeyframeDataItems() {
            for (const propertyKeyframeDataItem of this._propertyKeyframeDataItems) yield propertyKeyframeDataItem
        }* propertyKeyframeDataItemsReverse() {
            for (let i = this._propertyKeyframeDataItems.length - 1; i >= 0; i--) yield this._propertyKeyframeDataItems[i]
        }
        _SaveToJson() {
            const propertyKeyframeDataItems = this._propertyKeyframeDataItems;
            const propertyKeyframeDataItemsIncludingDisabled = this._propertyKeyframeDataItemsIncludingDisabled;
            return {
                "propertyKeyframeDataItemsJson": propertyKeyframeDataItems.map(propertyTrackDataItem => {
                    return propertyTrackDataItem._SaveToJson()
                }),
                "propertyKeyframeDataItemsIncludingDisabledJson": propertyKeyframeDataItemsIncludingDisabled.map(propertyTrackDataItem => {
                    return propertyTrackDataItem._SaveToJson()
                })
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            C3.TimelineDataManager._LoadDataItemsFromJson(this._propertyKeyframeDataItems,
                o["propertyKeyframeDataItemsJson"], PropertyKeyframeDataItem, this);
            C3.TimelineDataManager._LoadDataItemsFromJson(this._propertyKeyframeDataItemsIncludingDisabled, o["propertyKeyframeDataItemsIncludingDisabledJson"], PropertyKeyframeDataItem, this);
            this._LinkPropertyKeyframeDataItems()
        }
    };

}

// timelines/data/propertyKeyframeAddonData.js
{
    'use strict';
    const C3 = self.C3;
    const ADDON_ID = 0;
    const ADDON_DATA = 1;
    class AddonDataItem {
        constructor(addonDataJson, addonData) {
            this._addonData = addonData;
            this._id = addonDataJson[ADDON_ID];
            this._data = addonDataJson[ADDON_DATA]
        }
        Release() {
            this._addonData = null;
            this._data = null
        }
        GetAddonData() {
            return this._addonData
        }
        GetId() {
            return this._id
        }
        _SaveToJson() {
            return {
                "id": this._id,
                "data": this._data
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this._id = o["id"];
            this._data = o["data"]
        }
    }
    const START_ANCHOR = 0;
    const START_ENABLE = 1;
    const END_ANCHOR = 2;
    const END_ENABLE = 3;
    class AddonDataCubicBezierItem extends AddonDataItem {
        constructor(addonDataJson, addonData) {
            super(addonDataJson, addonData);
            this._startAnchor = this._data[START_ANCHOR];
            this._startEnable = !!this._data[START_ENABLE];
            this._endAnchor = this._data[END_ANCHOR];
            this._endEnable = !!this._data[END_ENABLE]
        }
        Release() {
            super.Release()
        }
        GetStartAnchor() {
            return this._startAnchor
        }
        GetStartEnable() {
            return this._startEnable
        }
        GetEndAnchor() {
            return this._endAnchor
        }
        GetEndEnable() {
            return this._endEnable
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                "startAnchor": this._startAnchor,
                "startEnable": !!this._startEnable,
                "endAnchor": this._endAnchor,
                "endEnable": !!this._endEnable
            })
        }
        _LoadFromJson(o) {
            if (!o) return;
            super._LoadFromJson(o);
            this._startAnchor = o["startAnchor"];
            this._startEnable = !!o["startEnable"];
            this._endAnchor = o["endAnchor"];
            this._endEnable = !!o["endEnable"]
        }
    }
    const DIRECTION = 0;
    const REVOLUTIONS = 1;
    class AddonDataAngleItem extends AddonDataItem {
        constructor(addonDataJson, addonData) {
            super(addonDataJson, addonData);
            this._direction = this._data[DIRECTION];
            this._revolutions = this._data[REVOLUTIONS]
        }
        Release() {
            super.Release()
        }
        GetDirection() {
            return this._direction
        }
        GetRevolutions() {
            return this._revolutions
        }
        _SaveToJson() {
            return Object.assign(super._SaveToJson(), {
                "direction": this._direction,
                "revolutions": this._revolutions
            })
        }
        _LoadFromJson(o) {
            if (!o) return;
            super._LoadFromJson(o);
            this._direction = o["direction"];
            this._revolutions = o["revolutions"]
        }
    }
    C3.AddonData = class AddonData {
        constructor(addonsDataJson, propertyKeyframeDataItem) {
            this._propertyKeyframeDataItem = propertyKeyframeDataItem;
            this._addonDataItems = [];
            C3.TimelineDataManager._CreateDataItems(this._addonDataItems, addonsDataJson, {
                prop: 0,
                map: new Map([
                    ["cubic-bezier", AddonDataCubicBezierItem],
                    ["angle", AddonDataAngleItem]
                ])
            }, this)
        }
        Release() {
            this._propertyKeyframeDataItem = null;
            for (const addonDataItem of this._addonDataItems) addonDataItem.Release();
            C3.clearArray(this._addonDataItems);
            this._addonDataItems =
                null
        }
        GetPropertyKeyframeDataItem() {
            return this._propertyKeyframeDataItem
        }
        GetAddDataItemArray() {
            return this._addonDataItems
        }* addonDataItems() {
            for (const addonDataItem of this._addonDataItems) yield addonDataItem
        }
        _SaveToJson() {
            return {
                "addonDataItemsJson": this._addonDataItems.map(addonDataItem => addonDataItem._SaveToJson())
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            C3.TimelineDataManager._LoadDataItemsFromJson(this._addonDataItems, o["addonDataItemsJson"], {
                prop: "id",
                map: new Map([
                    ["cubic-bezier", AddonDataCubicBezierItem],
                    ["angle", AddonDataAngleItem]
                ])
            }, this)
        }
    };

}

// timelines/tweens/tweenState.js
{
    'use strict';
    const C3 = self.C3;
    const INITIAL_VALUE_MODE_START_VALUE = "start-value";
    const INITIAL_VALUE_MODE_CURRENT_STATE = "current-state";
    const PING_PONG_BEGIN = 0;
    const PING_PONG_END = 1;
    let createdTweens = 0;
    C3.TweenState = class Tween extends C3.TimelineState {
        constructor(tweenDataItem, timelineManager) {
            super(`tween-${createdTweens++}`, tweenDataItem, timelineManager);
            this._id = "";
            this._destroyInstanceOnComplete = false;
            this._initialValueMode = INITIAL_VALUE_MODE_START_VALUE;
            this._instance = null;
            this._on_completed_callbacks = null;
            this._on_started_callbacks = null;
            this._track = null;
            this._iTweenState = null
        }
        FireReleaseEvent(dispatcher) {
            const event = C3.New(C3.Event, "tweenstatereleased");
            event.tweenState = this;
            dispatcher.dispatchEvent(event)
        }
        GetType() {
            return 1
        }
        CreateTrackStates() {
            for (const trackDataItem of this._timelineDataItem.GetTrackData().trackDataItems()) this._tracks.push(C3.TweenTrackState.Create(this,
                trackDataItem));
            this._track = this._tracks[0]
        }
        AddTrack() {
            const trackDataItem = this._timelineDataItem.GetTrackData().AddEmptyTrackDataItem();
            const track = C3.TweenTrackState.Create(this, trackDataItem);
            this._tracks.push(track);
            this._track = this._tracks[0];
            return track
        }
        GetPropertyTrack(propertyName) {
            return this._track.GetPropertyTracks()[0]
        }
        SetPropertyType(type) {
            this._propertyType = type
        }
        GetInstance() {
            const tracks = this.GetTracks();
            if (!tracks || !tracks.length) return;
            const track = tracks[0];
            this._track = track;
            if (!track) return;
            const instance = track.GetInstance();
            return track.IsInstanceValid() ? instance : undefined
        }
        AddStartedCallback(c) {
            if (!this._on_started_callbacks) this._on_started_callbacks = [];
            this._on_started_callbacks.push(c)
        }
        AddCompletedCallback(c) {
            if (!this._on_completed_callbacks) this._on_completed_callbacks = [];
            this._on_completed_callbacks.push(c)
        }
        RemoveStartedCallback(c) {
            if (!this._on_started_callbacks) return;
            const index = this._on_started_callbacks.indexOf(c);
            if (index !== -1) this._on_started_callbacks.splice(index, 1)
        }
        RemoveCompletedCallback(c) {
            if (!this._on_completed_callbacks) return;
            const index = this._on_completed_callbacks.indexOf(c);
            if (index !== -1) this._on_completed_callbacks.splice(index, 1)
        }
        SetStartValue(startValue, propertyName) {
            for (const track of this._tracks)
                for (const propertyTrack of track._propertyTracks) {
                    if (propertyTrack.GetPropertyName() !== propertyName) continue;
                    const propertyTrackData = propertyTrack.GetPropertyTrackData();
                    const propertyTrackDataItem = propertyTrack.GetPropertyTrackDataItem();
                    const propertyKeyframeDataItem = propertyTrackData.GetFirstPropertyKeyframeDataItem(propertyTrackDataItem);
                    propertyKeyframeDataItem.SetValue(startValue);
                    propertyKeyframeDataItem.SetAbsoluteValue(startValue)
                }
        }
        _GetPropertyTrackState(propertyName) {
            for (const track of this._tracks)
                for (const propertyTrack of track._propertyTracks)
                    if (propertyTrack.GetPropertyName() === propertyName) return propertyTrack
        }
        BeforeSetEndValues(properties) {
            for (const propertyName of properties) {
                const propertyTrackState = this._GetPropertyTrackState(propertyName);
                this.SetStartValue(propertyTrackState.GetCurrentState(), propertyName)
            }
            if (this.IsForwardPlayBack()) {
                const newTotalTime =
                    this.GetTotalTime() - this.GetTime();
                this.SetTotalTime(newTotalTime);
                for (const track of this._tracks) track.SetLocalTotalTime(newTotalTime);
                this._SetTime(0)
            } else {
                const newTotalTime = this.GetTime();
                this.SetTotalTime(newTotalTime);
                for (const track of this._tracks) track.SetLocalTotalTime(newTotalTime);
                this._SetTime(newTotalTime)
            }
            this.SetInitialStateFromSetTime()
        }
        SetEndValue(endValue, propertyName) {
            const propertyTrackState = this._GetPropertyTrackState(propertyName);
            const propertyTrackData = propertyTrackState.GetPropertyTrackData();
            const propertyTrackDataItem = propertyTrackState.GetPropertyTrackDataItem();
            const propertyKeyframeDataItem = propertyTrackData.GetLastPropertyKeyframeDataItem(propertyTrackDataItem);
            propertyKeyframeDataItem.SetTime(this.GetTotalTime());
            propertyKeyframeDataItem.SetValue(endValue);
            propertyKeyframeDataItem.SetAbsoluteValue(endValue)
        }
        SetId(id) {
            this._id = id
        }
        GetId() {
            return this._id
        }
        SetInitialValueMode(initialValueMode) {
            this._initialValueMode = initialValueMode
        }
        GetInitialValueMode() {
            return this._initialValueMode
        }
        SetDestroyInstanceOnComplete(releaseOnComplete) {
            this._destroyInstanceOnComplete =
                releaseOnComplete
        }
        GetDestroyInstanceOnComplete() {
            return this._destroyInstanceOnComplete
        }
        OnStarted() {
            if (this._on_started_callbacks)
                for (const c of this._on_started_callbacks) c(this);
            if (this.IsComplete()) return;
            for (const track of this._tracks) track.CompareSaveStateWithCurrent()
        }
        OnCompleted() {
            this._completedTick = this._runtime.GetTickCount()
        }
        FinishTriggers() {
            if (this._finishedTriggers) return;
            this._finishedTriggers = true;
            if (this._on_completed_callbacks)
                for (const c of this._on_completed_callbacks) c(this)
        }
        SetTime(time) {
            this._DeleteIntermediateKeyframes();
            super.SetTime(time)
        }
        _SetTimeAndReset(time) {
            if (!C3.IsFiniteNumber(time)) time = this.GetTotalTime();
            if (time < 0) this._playheadTime = 0;
            else if (time >= this.GetTotalTime()) this._playheadTime = this.GetTotalTime();
            else this._playheadTime = time;
            this._track.SetResetState()
        }
        SetInitialState(fromSetTime) {
            if (!this.InitialStateSet() && this.GetInitialValueMode() === INITIAL_VALUE_MODE_CURRENT_STATE)
                for (const track of this._tracks) track.CompareInitialStateWithCurrent();
            super.SetInitialState(fromSetTime)
        }
        Stop(completed = false) {
            super.Stop(completed);
            if (this.IsComplete()) return;
            for (const track of this._tracks) track.SaveState()
        }
        Reset(render = true, beforeChangeLayout = false) {
            this._DeleteIntermediateKeyframes();
            super.Reset(render, beforeChangeLayout)
        }
        _DeleteIntermediateKeyframes() {
            for (const track of this._tracks) {
                const del = kf => {
                    const time = kf.GetTime();
                    const totalTime = this.GetTotalTime();
                    return time !== 0 && time !== totalTime
                };
                track.DeleteKeyframes(del);
                track.DeletePropertyKeyframes(del)
            }
        }
        _OnBeforeChangeLayout() {
            if (this.IsReleased()) return true;
            const instance =
                this.GetInstance();
            if (instance && instance.GetObjectClass().IsGlobal()) return false;
            this._timelineManager.CompleteTimelineBeforeChangeOfLayout(this);
            this.ResetBeforeChangeLayout();
            return true
        }
        Tick(deltaTime, timeScale, deltaTime1) {
            if (!this._instance) this._instance = this.GetInstance();
            if (!this._instance || this._instance.IsDestroyed()) {
                this.Stop(true);
                this.OnCompleted();
                return
            }
            const instanceTimeScale = this._instance.GetTimeScale();
            if (instanceTimeScale !== -1) deltaTime = deltaTime1 * instanceTimeScale;
            if (deltaTime ===
                0 && this._lastDelta === 0) return;
            this._lastDelta = deltaTime;
            const lastTime = this._playheadTime;
            const newDeltaTime = deltaTime * this._playbackRate;
            const newTime = lastTime + newDeltaTime;
            const totalTime = this._timelineDataItem._totalTime;
            if (newTime < 0) this._playheadTime = 0;
            else if (newTime >= totalTime) this._playheadTime = totalTime;
            else this._playheadTime = newTime;
            let complete = false;
            let ensureValue = false;
            const loop = this.GetLoop();
            const pingPong = this.GetPingPong();
            if (!loop && !pingPong)
                if (this._playbackRate > 0) {
                    if (this._playheadTime >=
                        totalTime)
                        if (this._currentRepeatCount < this.GetRepeatCount()) {
                            this._currentRepeatCount++;
                            this._SetTimeAndReset(0);
                            ensureValue = true
                        } else {
                            this._SetTime(totalTime);
                            complete = true
                        }
                } else {
                    if (this._playheadTime <= 0)
                        if (this._currentRepeatCount < this.GetRepeatCount()) {
                            this._currentRepeatCount++;
                            this._SetTimeAndReset(totalTime);
                            ensureValue = true
                        } else {
                            this._SetTime(0);
                            complete = true
                        }
                }
            else if (loop && !pingPong)
                if (this._playbackRate > 0) {
                    if (this._playheadTime >= totalTime) {
                        this._SetTimeAndReset(0);
                        ensureValue = true
                    }
                } else {
                    if (this._playheadTime <=
                        0) {
                        this._SetTimeAndReset(totalTime);
                        ensureValue = true
                    }
                }
            else if (!loop && pingPong)
                if (this._playbackRate > 0) {
                    if (this._playheadTime >= totalTime) {
                        this._SetTime(totalTime);
                        this.SetPlaybackRate(this.GetPlaybackRate() * -1);
                        ensureValue = true;
                        if (this._pingPongState === PING_PONG_END)
                            if (this._currentRepeatCount < this.GetRepeatCount()) {
                                this._currentRepeatCount++;
                                this._pingPongState = PING_PONG_BEGIN
                            } else complete = true;
                        else if (this._pingPongState === PING_PONG_BEGIN) this._pingPongState = PING_PONG_END
                    }
                } else {
                    if (this._playheadTime <=
                        0) {
                        this._SetTime(0);
                        this.SetPlaybackRate(this.GetPlaybackRate() * -1);
                        ensureValue = true;
                        if (this._pingPongState === PING_PONG_END)
                            if (this._currentRepeatCount < this.GetRepeatCount()) {
                                this._currentRepeatCount++;
                                this._pingPongState = PING_PONG_BEGIN
                            } else complete = true;
                        else if (this._pingPongState === PING_PONG_BEGIN) this._pingPongState = PING_PONG_END
                    }
                }
            else if (loop && pingPong)
                if (this._playbackRate > 0) {
                    if (this._playheadTime >= totalTime) {
                        this._SetTime(totalTime);
                        this.SetPlaybackRate(this.GetPlaybackRate() * -1);
                        ensureValue =
                            true;
                        this._pingPongState++;
                        C3.wrap(this._pingPongState, 0, 2)
                    }
                } else if (this._playheadTime <= 0) {
                this._SetTime(0);
                this.SetPlaybackRate(this.GetPlaybackRate() * -1);
                ensureValue = true;
                this._pingPongState++;
                C3.wrap(this._pingPongState, 0, 2)
            }
            if (complete) {
                this._track.SetEndState();
                this.Stop(true);
                this.OnCompleted();
                return
            }
            this._track.Interpolate(this._playheadTime, true, false, ensureValue, this._firstTick, false);
            if (this._firstTick) this._firstTick = false
        }
        _SaveToJson() {
            const ret = super._SaveToJson();
            const tweenDataItem =
                this.GetTimelineDataItem();
            return Object.assign(ret, {
                "tweenDataItemJson": tweenDataItem._SaveToJson(),
                "id": this._id,
                "destroyInstanceOnComplete": this._destroyInstanceOnComplete,
                "initialValueMode": this._initialValueMode
            })
        }
        _LoadFromJson(o) {
            if (!o) return;
            const tweenDataItem = this.GetTimelineDataItem();
            tweenDataItem._LoadFromJson(o["tweenDataItemJson"]);
            super._LoadFromJson(o);
            this._id = o["id"];
            this._destroyInstanceOnComplete = o["destroyInstanceOnComplete"];
            this._initialValueMode = o["initialValueMode"]
        }
        static IsPlaying(tween) {
            return tween.IsPlaying()
        }
        static IsPaused(tween) {
            return tween.IsPaused()
        }
        static Build(config) {
            const timelineManager =
                config.runtime.GetTimelineManager();
            const tweenDataItem = new C3.TimelineDataItem;
            if (config.json) {
                tweenDataItem._LoadFromJson(config.json["tweenDataItemJson"]);
                const tween = new C3.TweenState(tweenDataItem, timelineManager);
                tween._LoadFromJson(config.json);
                return tween
            } else {
                const tween = new C3.TweenState(tweenDataItem, timelineManager);
                if (!C3.IsArray(config.propertyTracksConfig)) config.propertyTracksConfig = [config.propertyTracksConfig];
                tween.SetId(config.id);
                tween.SetTags(config.tags);
                tween.SetInitialValueMode(config.initialValueMode);
                tween.SetDestroyInstanceOnComplete(config.releaseOnComplete);
                tween.SetLoop(config.loop);
                tween.SetPingPong(config.pingPong);
                tween.SetTotalTime(config.time);
                tween.SetStep(0);
                tween.SetInterpolationMode("default");
                tween.SetResultMode(config.propertyTracksConfig[0].resultMode);
                tween.SetRepeatCount(config.repeatCount);
                const track = tween.AddTrack();
                track.SetInstanceUID(config.instance.GetUID());
                track.SetInterpolationMode("default");
                track.SetResultMode(config.propertyTracksConfig[0].resultMode);
                track.SetEnable(true);
                track.SetObjectClassIndex(config.instance.GetObjectClass().GetIndex());
                const sdkIntance = config.instance.GetSdkInstance();
                const w = sdkIntance.IsOriginalSizeKnown() ? sdkIntance.GetOriginalWidth() : config.instance.GetWorldInfo().GetWidth();
                const h = sdkIntance.IsOriginalSizeKnown() ? sdkIntance.GetOriginalHeight() : config.instance.GetWorldInfo().GetHeight();
                track.SetOriginalWidth(w);
                track.SetOriginalHeight(h);
                const startKeyframeDataItem = track.AddKeyframe();
                startKeyframeDataItem.SetTime(0);
                startKeyframeDataItem.SetEase("noease");
                startKeyframeDataItem.SetEnable(true);
                startKeyframeDataItem.SetTags("");
                const endKeyframeDataItem = track.AddKeyframe();
                endKeyframeDataItem.SetTime(config.time);
                endKeyframeDataItem.SetEase("noease");
                endKeyframeDataItem.SetEnable(true);
                endKeyframeDataItem.SetTags("");
                for (const propertyTrackConfig of config.propertyTracksConfig) {
                    const propertyTrack = track.AddPropertyTrack();
                    propertyTrack.SetSourceAdapterId(propertyTrackConfig.sourceId);
                    propertyTrack.SetSourceAdapterArgs(propertyTrackConfig.sourceArgs);
                    propertyTrack.SetPropertyName(propertyTrackConfig.property);
                    propertyTrack.SetPropertyType(propertyTrackConfig.type);
                    propertyTrack.SetMin(NaN);
                    propertyTrack.SetMax(NaN);
                    propertyTrack.SetInterpolationMode("default");
                    propertyTrack.SetResultMode(propertyTrackConfig.resultMode);
                    propertyTrack.SetEnable(true);
                    const startPropertyKeyframeDataItem = propertyTrack.AddPropertyKeyframe();
                    startPropertyKeyframeDataItem.SetType(propertyTrackConfig.valueType);
                    startPropertyKeyframeDataItem.SetTime(0);
                    startPropertyKeyframeDataItem.SetEase(propertyTrackConfig.ease);
                    startPropertyKeyframeDataItem.SetEnable(true);
                    startPropertyKeyframeDataItem.SetValue(propertyTrackConfig.startValue);
                    startPropertyKeyframeDataItem.SetAbsoluteValue(propertyTrackConfig.startValue);
                    const endPropertyKeyframeDataItem = propertyTrack.AddPropertyKeyframe();
                    endPropertyKeyframeDataItem.SetType(propertyTrackConfig.valueType);
                    endPropertyKeyframeDataItem.SetTime(config.time);
                    endPropertyKeyframeDataItem.SetEase(propertyTrackConfig.ease);
                    endPropertyKeyframeDataItem.SetEnable(true);
                    endPropertyKeyframeDataItem.SetValue(propertyTrackConfig.endValue);
                    endPropertyKeyframeDataItem.SetAbsoluteValue(propertyTrackConfig.endValue);
                    propertyTrack.GetSourceAdapter()
                }
                return tween
            }
        }
        GetITweenState(behInst, opts) {
            if (!this._iTweenState) this._iTweenState = C3.New(self.ITweenState, this, behInst, opts);
            return this._iTweenState
        }
    };

}

// timelines/tweens/tweenTrackState.js
{
    'use strict';
    const C3 = self.C3;
    C3.TweenTrackState = class TweenTrack extends C3.TrackState {
        constructor(timeline, trackDataItem) {
            super(timeline, trackDataItem);
            this._firstPropertyTrack = null;
            this._secondPropertyTrack = null
        }
        static Create(timeline, trackDataItem) {
            return C3.New(C3.TweenTrackState, timeline, trackDataItem)
        }
        _CachePropertyTracks() {
            if (this._propertyTracks.length === 1) this._firstPropertyTrack = this._propertyTracks[0];
            else {
                this._firstPropertyTrack = this._propertyTracks[0];
                this._secondPropertyTrack = this._propertyTracks[1]
            }
        }
        CreatePropertyTrackStates() {
            for (const propertyTrackDataItem of this._trackDataItem.GetPropertyTrackData().propertyTrackDataItems()) this._propertyTracks.push(C3.TweenPropertyTrackState.Create(this, propertyTrackDataItem));
            this._CachePropertyTracks()
        }
        AddPropertyTrack() {
            const propertyTrackData = this._trackDataItem.GetPropertyTrackData();
            const propertyTrackDataItem = propertyTrackData.AddEmptyPropertyTrackDataItem();
            const propertyTrack = C3.TweenPropertyTrackState.Create(this, propertyTrackDataItem);
            this._propertyTracks.push(propertyTrack);
            this._CachePropertyTracks();
            return propertyTrack
        }
        SetInitialState() {
            this.MaybeGetInstance();
            if (!this.IsInstanceValid() && this.IsInstanceTrack()) return;
            const timeline = this.GetTimeline();
            const isForwardPlayBack =
                timeline.IsForwardPlayBack();
            const time = isForwardPlayBack ? 0 : this.GetLocalTotalTime();
            for (const propertyTrack of this._propertyTracks) {
                propertyTrack.SetInitialState(time);
                if (this._worldInfoChange === 0 && propertyTrack.GetWorldInfoChange() === 1) this._worldInfoChange = 1;
                if (this._renderChange === 0 && propertyTrack.GetRenderChange() === 1) this._renderChange = 1
            }
            this._needsBeforeAndAfter = 0;
            const nba = this._propertyTracks.some(pt => pt.GetNeedsBeforeAndAfter());
            if (nba) this._needsBeforeAndAfter = 1;
            this._lastKeyframeDataItem =
                this._GetLastKeyFrameBeforeTime(time);
            this._initialStateOfNestedSet = false;
            this._endStateOfNestedSet = false;
            this.Interpolate(time)
        }
        BeforeInterpolate() {}
        Interpolate(time, isTicking = false, setTime = false, ensureValue = false, firstTick = false, ignoreGlobals = false, endState = false) {
            if (!this._instance) this.GetInstance();
            if (!this._instance) return;
            const instanceValid = !this._instance.IsDestroyed();
            if (!instanceValid) return false;
            if (ignoreGlobals && this.GetObjectClass().IsGlobal()) return false;
            if (this._secondPropertyTrack) {
                this._firstPropertyTrack.Interpolate(time,
                    setTime, ensureValue, endState);
                this._secondPropertyTrack.Interpolate(time, setTime, ensureValue, endState)
            } else this._firstPropertyTrack.Interpolate(time, setTime, ensureValue, endState);
            if (this._firstPropertyTrack.GetWorldInfoChange() !== 0) {
                if (!this._worldInfo) this._worldInfo = this._instance.GetWorldInfo();
                if (this._worldInfo) this._worldInfo.SetBboxChanged()
            }
        }
        AfterInterpolate() {}
        _LoadFromJson(o) {
            super._LoadFromJson(o);
            this._CachePropertyTracks()
        }
    };

}

// timelines/tweens/tweenPropertyTrackState.js
{
    'use strict';
    const C3 = self.C3;
    C3.TweenPropertyTrackState = class TweenPropertyTrackState extends C3.PropertyTrackState {
        constructor(track, propertyTrackDataItem) {
            super(track, propertyTrackDataItem);
            this._basic = false
        }
        static Create(track, propertyTrackDataItem) {
            return C3.New(C3.TweenPropertyTrackState, track, propertyTrackDataItem)
        }
        Interpolate(time, setTime = false, ensureValue = false, endState = false) {
            let start;
            let end;
            if (this._basic) {
                start = this._propertyKeyframeDataItems[0];
                end = this._propertyKeyframeDataItems[1]
            } else if (setTime) {
                start = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time,
                    this._propertyTrackDataItem);
                end = start.GetNext()
            } else {
                if (this._lastPropertyKeyframeDataItem) {
                    const timeline = this.GetTimeline();
                    const nextPropertyKeyframe = this._lastPropertyKeyframeDataItem.GetNext();
                    const lastTime = this._lastPropertyKeyframeDataItem.GetTime();
                    const nextTime = nextPropertyKeyframe ? nextPropertyKeyframe.GetTime() : timeline.GetTotalTime();
                    if (time <= lastTime || time >= nextTime) this._lastPropertyKeyframeDataItem = this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time, this._propertyTrackDataItem)
                } else this._lastPropertyKeyframeDataItem =
                    this._propertyTrackData.GetFirstPropertyKeyFrameDataItemLowerOrEqualThan(time, this._propertyTrackDataItem);
                start = this._lastPropertyKeyframeDataItem;
                end = start.GetNext()
            }
            this._sourceAdapter.Interpolate(time, start, end, setTime, ensureValue, endState)
        }
        AddPropertyKeyframe() {
            const propertyKeyframeData = this._propertyTrackDataItem.GetPropertyKeyframeData();
            const propertyKeyframeDataItem = propertyKeyframeData.AddEmptyPropertyKeyframeDataItem();
            this._lastPropertyKeyframeDataItem = null;
            this._basic = this.GetPropertyKeyframeDataItems().length <=
                2;
            return propertyKeyframeDataItem
        }
        DeletePropertyKeyframes(match) {
            this._lastPropertyKeyframeDataItem = null;
            const propertyKeyframeData = this._propertyTrackDataItem.GetPropertyKeyframeData();
            propertyKeyframeData.DeletePropertyKeyframeDataItems(match);
            this._basic = this.GetPropertyKeyframeDataItems().length <= 2
        }
        _SaveToJson() {
            return {
                "sourceAdapterJson": this.GetSourceAdapter()._SaveToJson(),
                "basic": this._basic
            }
        }
        _LoadFromJson(o) {
            if (!o) return;
            this.GetSourceAdapter()._LoadFromJson(o["sourceAdapterJson"]);
            this._basic =
                o["basic"]
        }
    };

}

// timelines/transitions/transition.js
{
    'use strict';
    const C3 = self.C3;
    const Ease = self.Ease;
    const NAME = 0;
    const TRANSITION_KEYFRAMES = 1;
    C3.Transition = class Transition extends C3.DefendedBase {
        constructor(data, addCustomEase = true) {
            super();
            this._name = data[NAME];
            this._linear = false;
            this._transitionKeyframes = [];
            for (const transitionKeyframeData of data[TRANSITION_KEYFRAMES]) {
                const transitionKeyframe = C3.TransitionKeyframe.Create(this, transitionKeyframeData);
                this._transitionKeyframes.push(transitionKeyframe)
            }
            for (let i = 0; i < this._transitionKeyframes.length; i++) {
                const current = this._transitionKeyframes[i];
                current.SetNext(this._transitionKeyframes[i +
                    1])
            }
            this._precalculatedSamples = new Map;
            this._transitionKeyframeCache = new Map;
            this._PreCalcSamples();
            if (addCustomEase) Ease.AddCustomEase(this._name, (t, sv, dv, tt) => this.Interpolate(t, sv, dv, tt))
        }
        static Create(data) {
            return C3.New(C3.Transition, data)
        }
        Release() {
            for (const transitionKeyframe of this._transitionKeyframes) transitionKeyframe.Release();
            C3.clearArray(this._transitionKeyframes);
            this._transitionKeyframes = null;
            this._precalculatedSamples.clear();
            this._precalculatedSamples = null;
            this._transitionKeyframeCache.clear();
            this._transitionKeyframeCache = null
        }
        MakeLinear(linear) {
            this._linear = !!linear
        }
        GetTransitionKeyFrameAt(x) {
            const transitionKeyframe = this._transitionKeyframeCache.get(x);
            if (transitionKeyframe) return transitionKeyframe;
            for (const transitionKeyframe of this._transitionKeyframes)
                if (transitionKeyframe.GetValueX() === x) {
                    this._transitionKeyframeCache.set(x, transitionKeyframe);
                    return transitionKeyframe
                }
        }
        GetFirstTransitionKeyFrameHigherThan(x) {
            for (const transitionKeyframe of this._transitionKeyframes)
                if (transitionKeyframe.GetValueX() >
                    x) return transitionKeyframe
        }
        GetFirstTransitionKeyFrameHigherOrEqualThan(x) {
            for (const transitionKeyframe of this._transitionKeyframes)
                if (transitionKeyframe.GetValueX() >= x) return transitionKeyframe
        }
        GetFirstTransitionKeyFrameLowerThan(x) {
            for (let i = this._transitionKeyframes.length - 1; i >= 0; i--) {
                const transitionKeyframe = this._transitionKeyframes[i];
                if (transitionKeyframe.GetValueX() < x) return transitionKeyframe
            }
        }
        GetFirstTransitionKeyFrameLowerOrEqualThan(x) {
            for (let i = this._transitionKeyframes.length - 1; i >=
                0; i--) {
                const transitionKeyframe = this._transitionKeyframes[i];
                if (transitionKeyframe.GetValueX() <= x) return transitionKeyframe
            }
        }
        Interpolate(time, startValue, deltaValue, totalTime) {
            if (this._linear) return Ease.NoEase(time, startValue, deltaValue, totalTime);
            const n = time / totalTime;
            let start = this.GetFirstTransitionKeyFrameLowerOrEqualThan(n);
            let end = start.GetNext();
            if (!end) {
                start = this.GetFirstTransitionKeyFrameLowerThan(n);
                end = start.GetNext()
            }
            const delta = end.GetValueX() - start.GetValueX();
            const nn = C3.mapToRange(n,
                start.GetValueX(), end.GetValueX(), 0, delta);
            const startX = start.GetValueX();
            const startY = start.GetValueY();
            const anchor1X = start.GetValueX() + start.GetStartAnchorX();
            const anchor1Y = start.GetValueY() + start.GetStartAnchorY();
            const anchor2X = end.GetValueX() + end.GetEndAnchorX();
            const anchor2Y = end.GetValueY() + end.GetEndAnchorY();
            const endX = end.GetValueX();
            const endY = end.GetValueY();
            let ret = Ease.GetRuntimeEase("spline")(nn, startX, startY, anchor1X, anchor1Y, anchor2X, anchor2Y, endX, endY, this._precalculatedSamples.get(start));
            ret += start.GetValueY();
            return (1 - ret) * startValue + ret * (startValue + deltaValue)
        }
        _PreCalcSamples() {
            this._precalculatedSamples.clear();
            for (let i = 0; i < this._transitionKeyframes.length - 1; i++) {
                const transitionKeyframe = this._transitionKeyframes[i];
                if (!transitionKeyframe.GetStartEnable()) continue;
                const start = transitionKeyframe;
                const end = this._transitionKeyframes[i + 1];
                const startValue = start.GetValueX();
                const anchor1Value = start.GetValueX() + start.GetStartAnchorX();
                const anchor2Value = end.GetValueX() + end.GetEndAnchorX();
                const endValue = end.GetValueX();
                this._precalculatedSamples.set(start, Ease.GetBezierSamples(startValue, anchor1Value, anchor2Value, endValue))
            }
        }
    };

}

// timelines/transitions/transitionKeyframe.js
{
    'use strict';
    const C3 = self.C3;
    const VALUE_X = 0;
    const VALUE_Y = 1;
    const START_ANCHOR_X = 2;
    const START_ANCHOR_Y = 3;
    const END_ANCHOR_X = 4;
    const END_ANCHOR_Y = 5;
    const START_ENABLE = 6;
    const END_ENABLE = 7;
    C3.TransitionKeyframe = class TransitionKeyframe extends C3.DefendedBase {
        constructor(transition, data) {
            super();
            this._transition = transition;
            this._valueX = data[VALUE_X];
            this._valueY = data[VALUE_Y];
            this._startAnchorX = data[START_ANCHOR_X];
            this._startAnchorY = data[START_ANCHOR_Y];
            this._endAnchorX = data[END_ANCHOR_X];
            this._endAnchorY = data[END_ANCHOR_Y];
            this._startEnable = data[START_ENABLE];
            this._endEnable = data[END_ENABLE];
            this._next = null
        }
        Release() {
            this._transition = null
        }
        static Create(transition, data) {
            return C3.New(C3.TransitionKeyframe,
                transition, data)
        }
        SetNext(transitionKeyframe) {
            this._next = transitionKeyframe
        }
        GetNext() {
            return this._next
        }
        GetValueX() {
            return this._valueX
        }
        GetValueY() {
            return this._valueY
        }
        GetStartAnchorX() {
            return this._startAnchorX
        }
        GetStartAnchorY() {
            return this._startAnchorY
        }
        GetEndAnchorX() {
            return this._endAnchorX
        }
        GetEndAnchorY() {
            return this._endAnchorY
        }
        GetStartEnable() {
            return this._startEnable
        }
        GetEndEnable() {
            return this._endEnable
        }
    };

}

// timelines/transitions/transitionManager.js
{
    'use strict';
    const C3 = self.C3;
    C3.TransitionManager = class TransitionManager extends C3.DefendedBase {
        constructor(runtime) {
            super();
            this._runtime = runtime;
            this._transitions = []
        }
        Release() {
            for (const transition of this._transitions) transition.Release();
            C3.clearArray(this._transitions);
            this._transitions = null
        }
        Create(transitionData) {
            this._transitions.push(C3.Transition.Create(transitionData))
        }
    };

}

// templates/templateManager.js
{
    'use strict';
    const C3 = self.C3;
    C3.TemplateManager = class TemplateManager extends C3.DefendedBase {
        constructor(runtime) {
            super();
            this._runtime = runtime;
            this._templateDataMap = null;
            this._instanceToTemplateNameMap = null;
            this._instanceDestroy = e => this._OnInstanceDestroy(e.instance)
        }
        Release() {
            this.RemoveRuntimeListeners();
            if (this._templateDataMap) {
                for (const objectClassTemplatesMap of this._templateDataMap.values()) objectClassTemplatesMap.clear();
                this._templateDataMap.clear()
            }
            this._templateDataMap = null;
            this._runtime = null
        }
        Create(templateInstanceData) {
            if (!this._templateDataMap) this._templateDataMap =
                new Map;
            if (!templateInstanceData) return;
            const templateData = templateInstanceData[0][16];
            const templateName = templateData[0];
            const objectClassIndex = templateInstanceData[1];
            if (!this._templateDataMap.has(objectClassIndex)) this._templateDataMap.set(objectClassIndex, new Map);
            const objectClassTemplatesMap = this._templateDataMap.get(objectClassIndex);
            objectClassTemplatesMap.set(templateName, templateInstanceData)
        }
        AddRuntimeListeners() {
            const dispatcher = this._runtime.Dispatcher();
            if (dispatcher) dispatcher.addEventListener("instancedestroy",
                this._instanceDestroy)
        }
        RemoveRuntimeListeners() {
            const dispatcher = this._runtime.Dispatcher();
            if (dispatcher) dispatcher.removeEventListener("instancedestroy", this._instanceDestroy)
        }
        HasTemplates() {
            if (!this._templateDataMap) return false;
            return this._templateDataMap.size !== 0
        }
        GetTemplateData(objectClass_or_index, templateName) {
            let index = 0;
            if (objectClass_or_index instanceof C3.ObjectClass) index = objectClass_or_index.GetIndex();
            else index = objectClass_or_index;
            if (!this._templateDataMap.has(index)) return;
            const ret =
                this._templateDataMap.get(index).get(templateName);
            if (ret) return JSON.parse(JSON.stringify(ret));
            return undefined
        }
        MapInstanceToTemplateName(inst, templateName) {
            if (!this._instanceToTemplateNameMap) this._instanceToTemplateNameMap = new WeakMap;
            if (this._instanceToTemplateNameMap.has(inst)) return;
            this._instanceToTemplateNameMap.set(inst, templateName)
        }
        GetInstanceTemplateName(inst) {
            if (!this._instanceToTemplateNameMap) return "";
            const ret = this._instanceToTemplateNameMap.get(inst);
            if (ret) return ret;
            return ""
        }
        _OnInstanceDestroy(inst) {
            if (!this._instanceToTemplateNameMap) return;
            if (!this._instanceToTemplateNameMap.has(inst)) return;
            this._instanceToTemplateNameMap.delete(inst)
        }
    };

}

// events/stacks/solStack.js
{
    'use strict';
    const C3 = self.C3;
    C3.SolStack = class SolStack extends C3.DefendedBase {
        constructor(objectClass) {
            super();
            this._objectClass = objectClass;
            this._stack = [];
            this._stack.push(C3.New(C3.Sol, this));
            this._index = 0;
            this._current = this._stack[0]
        }
        Release() {
            for (const s of this._stack) s.Release();
            C3.clearArray(this._stack);
            this._current = null;
            this._objectClass = null
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetCurrentSol() {
            return this._current
        }
        GetOneBelowCurrentSol() {
            return this._stack[this._index - 1]
        }
        Clear() {
            this.GetCurrentSol().Clear()
        }
        PushClean() {
            const stack = this._stack;
            const index = ++this._index;
            if (index === stack.length) {
                const sol = C3.New(C3.Sol, this);
                stack.push(sol);
                this._current = sol
            } else {
                const sol = stack[index];
                sol.Reset();
                this._current = sol
            }
        }
        PushCopy() {
            const stack = this._stack;
            const index = ++this._index;
            if (index === stack.length) stack.push(C3.New(C3.Sol, this));
            const sol = stack[index];
            sol.Copy(stack[index - 1]);
            this._current = sol
        }
        Pop() {
            this._current = this._stack[--this._index]
        }
        RemoveInstances(s) {
            const stack = this._stack;
            for (let i = 0, len = stack.length; i < len; ++i) stack[i].RemoveInstances(s)
        }
    };

}

// events/stacks/sol.js
{
    'use strict';
    const C3 = self.C3;
    C3.Sol = class Sol extends C3.DefendedBase {
        constructor(stack) {
            super();
            this._stack = stack;
            this._objectClass = this._stack.GetObjectClass();
            this._eventStack = this._objectClass.GetRuntime().GetEventStack();
            this._selectAll = true;
            this._instances = [];
            this._elseInstances = []
        }
        Release() {
            this.ClearArrays();
            this._stack = null;
            this._objectClass = null;
            this._eventStack = null
        }
        ClearArrays() {
            C3.clearArray(this._instances);
            C3.clearArray(this._elseInstances)
        }
        GetObjectClass() {
            return this._objectClass
        }
        IsSelectAll() {
            return this._selectAll
        }
        HasAnyInstances() {
            if (this._selectAll) return !!this._objectClass.GetInstanceCount();
            else return !!this._instances.length
        }
        GetInstances() {
            if (this._selectAll) return this._objectClass.GetInstances();
            else return this._instances
        }
        HasAnyElseInstances() {
            return !!this._elseInstances.length
        }
        GetElseInstances() {
            return this._elseInstances
        }
        GetExpressionInstances() {
            const ret = this.GetInstances();
            if (ret.length) return ret;
            else return this._elseInstances
        }
        Reset() {
            this._selectAll = true;
            C3.clearArray(this._elseInstances)
        }
        Clear() {
            this._selectAll = true
        }
        Copy(sol) {
            if (sol.IsSelectAll()) this.Reset();
            else {
                this._selectAll = false;
                C3.shallowAssignArray(this._instances, sol._instances);
                C3.clearArray(this._elseInstances)
            }
        }
        _PushInstance(inst) {
            this._instances.push(inst)
        }
        _PushElseInstance(inst) {
            this._elseInstances.push(inst)
        }
        _SetSelectAll(s) {
            this._selectAll = !!s
        }
        _GetOwnInstances() {
            return this._instances
        }
        _GetOwnElseInstances() {
            return this._elseInstances
        }
        SetSinglePicked(inst) {
            this._selectAll = false;
            C3.clearArray(this._instances);
            this._instances.push(inst)
        }
        SetArrayPicked(arr) {
            this._selectAll = false;
            C3.shallowAssignArray(this._instances, arr)
        }
        SetSetPicked(set) {
            this._selectAll = false;
            C3.clearArray(this._instances);
            for (const item of set) this._instances.push(item)
        }
        AddElseInstances(setOfPicked, arrayOfAllPicked) {
            for (const inst of arrayOfAllPicked)
                if (!setOfPicked.has(inst)) this._elseInstances.push(inst)
        }
        TransferElseInstancesToOwn(setOfPicked) {
            for (const inst of setOfPicked) this._instances.push(inst);
            C3.arrayRemoveAllInSet(this._elseInstances, setOfPicked)
        }
        ClearElseInstances() {
            C3.clearArray(this._elseInstances)
        }
        PickOne(inst) {
            if (!inst) return;
            if (this._eventStack.GetCurrentStackFrame().GetCurrentEvent().IsOrBlock()) {
                if (this.IsSelectAll()) {
                    C3.clearArray(this._instances);
                    C3.shallowAssignArray(this._elseInstances, inst.GetObjectClass().GetInstances());
                    this._selectAll = false
                }
                const i = this._elseInstances.indexOf(inst);
                if (i !== -1) {
                    this._instances.push(this._elseInstances[i]);
                    this._elseInstances.splice(i, 1)
                }
            } else this.SetSinglePicked(inst)
        }
        RemoveInstances(s) {
            C3.arrayRemoveAllInSet(this._instances,
                s);
            C3.arrayRemoveAllInSet(this._elseInstances, s)
        }
    };

}

// events/stacks/eventStack.js
{
    'use strict';
    const C3 = self.C3;
    C3.EventStack = class EventStack extends C3.DefendedBase {
        constructor(eventSheetManager) {
            super();
            this._eventSheetManager = eventSheetManager;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._stack.push(C3.New(C3.EventStackFrame, this, null));
            this._index = 0;
            this._expFuncStack = []
        }
        Release() {
            for (const e of this._stack) e.Release();
            C3.clearArray(this._stack);
            C3.clearArray(this._expFuncStack);
            this._eventSheetManager = null;
            this._runtime = null
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetCurrentStackFrame() {
            return this._stack[this._index]
        }
        GetAllStackFrames() {
            return this._stack
        }
        GetCurrentStackFrameIndex() {
            return this._index
        }
        Push(currentEvent) {
            const stack = this._stack;
            const index = ++this._index;
            if (index === stack.length) {
                const ret = C3.New(C3.EventStackFrame, this, currentEvent);
                stack.push(ret);
                return ret
            } else {
                const ret = stack[index];
                ret.Reset(currentEvent);
                return ret
            }
        }
        Pop() {
            --this._index
        }
        PushExpFunc(frame) {
            this._expFuncStack.push(frame)
        }
        PopExpFunc() {
            this._expFuncStack.pop()
        }
        GetCurrentExpFuncStackFrame() {
            const expFuncStack = this._expFuncStack;
            if (expFuncStack.length === 0) return null;
            else return expFuncStack.at(-1)
        }
    };

}

// events/stacks/eventStackFrame.js
{
    'use strict';
    const C3 = self.C3;
    C3.EventStackFrame = class EventStackFrame extends C3.DefendedBase {
        constructor(stack, currentEvent) {
            super();
            this._stack = stack;
            this._runtime = this._stack.GetRuntime();
            this._currentEvent = currentEvent;
            this._cndIndex = 0;
            this._actIndex = 0;
            this._lastEventTrue = false;
            this._elseBranchRan = false;
            this._expressionObjectClass = null;
            this._functionReturnType = 0;
            this._functionReturnValue = 0;
            this._dynamicSolModifiers = null
        }
        Release() {
            this.Reset(null);
            this._stack = null;
            this._runtime = null
        }
        Reset(currentEvent) {
            this._currentEvent = currentEvent;
            this._cndIndex = 0;
            this._actIndex = 0;
            this._lastEventTrue = false;
            this._elseBranchRan = false;
            this._dynamicSolModifiers = null
        }
        _Restore(currentEvent, actIndex) {
            this._currentEvent = currentEvent;
            this._cndIndex = 0;
            this._actIndex = actIndex
        }
        ResetQuick() {
            this._cndIndex = 0;
            this._actIndex = 0
        }
        GetCurrentEvent() {
            return this._currentEvent
        }
        SetCurrentEvent(currentEvent) {
            this._currentEvent = currentEvent
        }
        GetConditionIndex() {
            return this._cndIndex
        }
        SetConditionIndex(i) {
            this._cndIndex = i
        }
        GetActionIndex() {
            return this._actIndex
        }
        SetActionIndex(i) {
            this._actIndex =
                i
        }
        SetLastEventTrue(t) {
            this._lastEventTrue = !!t
        }
        GetLastEventTrue() {
            return this._lastEventTrue
        }
        SetElseBranchRan(r) {
            this._elseBranchRan = !!r
        }
        GetElseBranchRan() {
            return this._elseBranchRan
        }
        SetExpressionObjectClass(objectClass) {
            this._expressionObjectClass = objectClass
        }
        GetExpressionObjectClass() {
            return this._expressionObjectClass
        }
        InitCallFunctionExpression(returnType, defaultReturnValue) {
            this._functionReturnType = returnType;
            this._functionReturnValue = defaultReturnValue
        }
        GetFunctionReturnType() {
            return this._functionReturnType
        }
        SetFunctionReturnValue(v) {
            this._functionReturnValue =
                v
        }
        GetFunctionReturnValue() {
            return this._functionReturnValue
        }
        IsSolModifierAfterCnds() {
            const currentEvent = this._currentEvent;
            if (currentEvent.IsSolWriterAfterCnds()) return true;
            if (this._cndIndex < currentEvent.GetConditionCount() - 1) return !!currentEvent.GetSolModifiers().length;
            return false
        }
        SetDynamicSolModifiers(solModifiers) {
            this._dynamicSolModifiers = solModifiers
        }
        GetDynamicSolModifiers() {
            return this._dynamicSolModifiers
        }
    };

}

// events/stacks/localVarStack.js
{
    'use strict';
    const C3 = self.C3;
    C3.LocalVarStack = class LocalVarStack extends C3.DefendedBase {
        constructor(eventSheetManager) {
            super();
            this._eventSheetManager = eventSheetManager;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._index = -1;
            this._current = null;
            this._initialValues = []
        }
        Release() {
            C3.clearArray(this._stack);
            this._eventSheetManager = null;
            this._runtime = null
        }
        _SetInitialValues(initialValues) {
            this._initialValues = initialValues;
            const arr = this._initialValues.slice(0);
            this._stack.push(arr);
            this._index = 0;
            this._current =
                arr
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetCurrent() {
            return this._current
        }
        Push() {
            const index = ++this._index;
            const stack = this._stack;
            if (index === stack.length) stack.push(this._initialValues.slice(0));
            else C3.shallowAssignArray(stack[index], this._initialValues);
            this._current = stack[index]
        }
        Pop() {
            this._current = this._stack[--this._index]
        }
    };

}

// events/stacks/loopStack.js
{
    'use strict';
    const C3 = self.C3;
    C3.LoopStack = class LoopStack extends C3.DefendedBase {
        constructor(eventSheetManager) {
            super();
            this._eventSheetManager = eventSheetManager;
            this._runtime = this._eventSheetManager.GetRuntime();
            this._stack = [];
            this._index = -1
        }
        Release() {
            C3.clearArray(this._stack);
            this._eventSheetManager = null;
            this._runtime = null
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        IsInLoop() {
            return this._index >= 0
        }
        GetCurrent() {
            return this._stack[this._index]
        }
        Push() {
            ++this._index;
            if (this._index ===
                this._stack.length) {
                const ret = C3.New(C3.Loop, this);
                this._stack.push(ret);
                return ret
            } else {
                const ret = this._stack[this._index];
                ret.Reset();
                return ret
            }
        }
        Pop() {
            --this._index
        }
        FindByName(name) {
            const stack = this._stack;
            for (let i = this._index; i >= 0; --i) {
                const loop = stack[i];
                if (loop.GetName() === name) return loop
            }
            return null
        }
        _GetStack() {
            return this._stack.slice(0, this._index + 1)
        }
    };

}

// events/stacks/loop.js
{
    'use strict';
    const C3 = self.C3;
    C3.Loop = class Loop extends C3.DefendedBase {
        constructor(loopStack) {
            super();
            this._loopStack = loopStack;
            this._name = "";
            this._index = 0;
            this._isStopped = false;
            this._end = NaN
        }
        Reset() {
            this._name = "";
            this._index = 0;
            this._isStopped = false;
            this._end = NaN
        }
        SetName(name) {
            this._name = name
        }
        GetName() {
            return this._name
        }
        SetIndex(i) {
            this._index = i
        }
        GetIndex() {
            return this._index
        }
        Stop() {
            this._isStopped = true
        }
        IsStopped() {
            return this._isStopped
        }
        SetEnd(e) {
            this._end = e
        }
        GetEnd() {
            return this._end
        }
    };

}

// events/stacks/arrayStack.js
{
    'use strict';
    const C3 = self.C3;
    C3.ArrayStack = class ArrayStack extends C3.DefendedBase {
        constructor() {
            super();
            this._stack = [];
            this._index = -1
        }
        Release() {
            C3.clearArray(this._stack)
        }
        GetCurrent() {
            return this._stack[this._index]
        }
        Push() {
            ++this._index;
            if (this._index === this._stack.length) {
                const ret = [];
                this._stack.push(ret);
                return ret
            } else return this._stack[this._index]
        }
        Pop() {
            --this._index
        }
    };

}

// events/eventSheetManager.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;

    function SortSolArray(a, b) {
        return a.GetIndex() - b.GetIndex()
    }

    function IsSolArrayIdentical(a, b) {
        for (let i = 0, len = a.length; i < len; ++i)
            if (a[i] !== b[i]) return false;
        return true
    }
    C3.EventSheetManager = class EventSheetManager extends C3.DefendedBase {
        constructor(runtime) {
            super();
            this._runtime = runtime;
            this._allSheets = [];
            this._sheetsByName = new Map;
            this._allGroups = [];
            this._groupsByName = new Map;
            this._blocksBySid = new Map;
            this._cndsBySid = new Map;
            this._actsBySid = new Map;
            this._allUniqueSolModifiers = new Map;
            this._eventVarsBySid = new Map;
            this._nextLocalVarIndex = 0;
            this._allGlobalVars = [];
            this._allLocalVars = [];
            this._localVarInitialValues = [];
            this._functionBlocksByName = new Map;
            this._customActionBlocksMap =
                new Map;
            this._eventStack = C3.New(C3.EventStack, this);
            this._localVarStack = C3.New(C3.LocalVarStack, this);
            this._loopStack = C3.New(C3.LoopStack, this);
            this._triggersToPostInit = [];
            this._queuedTriggers = [];
            this._queuedDebugTriggers = [];
            this._runningEventsDepth = 0;
            this._executingTriggerDepth = 0;
            this._blockFlushingDepth = 0;
            this._scheduledWaits = [];
            this._asyncActionPromises = [];
            self["c3_callFunction"] = (name, params) => this._InvokeFunctionFromJS(name, params)
        }
        Release() {
            this.ClearAllScheduledWaits();
            this._eventStack.Release();
            this._eventStack = null;
            this._localVarStack.Release();
            this._localVarStack = null;
            C3.clearArray(this._queuedTriggers);
            C3.clearArray(this._queuedDebugTriggers);
            this._runtime = null;
            C3.clearArray(this._allSheets);
            this._sheetsByName.clear()
        }
        Create(eventSheetData) {
            const eventSheet = C3.New(C3.EventSheet, this, eventSheetData);
            this._allSheets.push(eventSheet);
            this._sheetsByName.set(eventSheet.GetName().toLowerCase(), eventSheet)
        }
        _AddTriggerToPostInit(trig) {
            this._triggersToPostInit.push(trig)
        }
        _PostInit() {
            for (const customActionBlock of this._customActionBlocksMap.values()) customActionBlock._CheckOverrideState();
            for (const functionBlock of this._functionBlocksByName.values()) functionBlock._PostInit();
            for (const customActionBlock of this._customActionBlocksMap.values()) customActionBlock._PostInit();
            for (const sheet of this._allSheets) sheet._PostInit();
            for (const sheet of this._allSheets) sheet._UpdateDeepIncludes();
            for (const trig of this._triggersToPostInit) trig._PostInit(false);
            C3.clearArray(this._triggersToPostInit);
            this._localVarStack._SetInitialValues(this._localVarInitialValues)
        }
        GetRuntime() {
            return this._runtime
        }
        GetEventSheetByName(name) {
            return this._sheetsByName.get(name.toLowerCase()) ||
                null
        }
        _RegisterGroup(group) {
            this._allGroups.push(group);
            this._groupsByName.set(group.GetGroupName(), group)
        }
        _RegisterEventBlock(eventBlock) {
            this._blocksBySid.set(eventBlock.GetSID(), eventBlock)
        }
        _RegisterCondition(condition) {
            this._cndsBySid.set(condition.GetSID(), condition)
        }
        _RegisterAction(action) {
            this._actsBySid.set(action.GetSID(), action)
        }
        _RegisterFunctionBlock(functionBlock) {
            switch (functionBlock.GetFunctionType()) {
                case 0:
                    this._functionBlocksByName.set(functionBlock.GetFunctionName().toLowerCase(),
                        functionBlock);
                    break;
                case 1:
                    this._customActionBlocksMap.set(functionBlock.GetFunctionName().toLowerCase(), functionBlock);
                    break;
                default:
            }
        }
        _RegisterEventVariable(ev) {
            this._eventVarsBySid.set(ev.GetSID(), ev);
            if (ev.IsGlobal()) this._allGlobalVars.push(ev);
            else this._allLocalVars.push(ev)
        }
        _DeduplicateSolModifierList(arr) {
            if (arr.length >= 2) arr.sort(SortSolArray);
            let candidateList = this._allUniqueSolModifiers.get(arr.length);
            if (!candidateList) {
                candidateList = [];
                this._allUniqueSolModifiers.set(arr.length, candidateList)
            }
            for (let i =
                    0, len = candidateList.length; i < len; ++i) {
                const candidate = candidateList[i];
                if (IsSolArrayIdentical(arr, candidate)) return candidate
            }
            candidateList.push(arr);
            return arr
        }
        _GetNextLocalVarIndex(eventVar) {
            this._localVarInitialValues.push(eventVar.GetInitialValue());
            return this._nextLocalVarIndex++
        }
        GetEventStack() {
            return this._eventStack
        }
        GetCurrentEventStackFrame() {
            return this.GetEventStack().GetCurrentStackFrame()
        }
        GetCurrentEvent() {
            return this.GetCurrentEventStackFrame().GetCurrentEvent()
        }
        GetCurrentCondition() {
            const frame =
                this.GetCurrentEventStackFrame();
            const event = frame.GetCurrentEvent();
            return event.GetConditionAt(frame.GetConditionIndex())
        }
        GetCurrentAction() {
            const frame = this.GetCurrentEventStackFrame();
            const event = frame.GetCurrentEvent();
            return event.GetActionAt(frame.GetActionIndex())
        }
        GetLocalVarStack() {
            return this._localVarStack
        }
        GetLoopStack() {
            return this._loopStack
        }
        GetAllLocalVariablesInScope(fromRow) {
            const ret = [];
            fromRow = fromRow.GetScopeParent();
            while (fromRow) {
                C3.appendArray(ret, fromRow._GetAllLocalVariablesInScope());
                fromRow = fromRow.GetScopeParent()
            }
            return ret
        }
        _GetLocalVariablesScriptInterface(fromRow) {
            const localVarDescriptors = {};
            for (const v of this.GetAllLocalVariablesInScope(fromRow)) localVarDescriptors[v.GetJsPropName()] = v._GetScriptInterfaceDescriptor();
            return Object.create(Object.prototype, localVarDescriptors)
        }
        GetEventVariableBySID(sid) {
            return this._eventVarsBySid.get(sid) || null
        }
        GetEventBlockBySID(sid) {
            return this._blocksBySid.get(sid) || null
        }
        GetConditionBySID(sid) {
            return this._cndsBySid.get(sid) || null
        }
        GetActionBySID(sid) {
            return this._actsBySid.get(sid) ||
                null
        }
        GetFunctionBlockByName(name) {
            return this._functionBlocksByName.get(name.toLowerCase()) || null
        }
        GetCustomActionBlockByName(objectClass, name) {
            let ret = this._customActionBlocksMap.get((objectClass.GetName() + "." + name).toLowerCase());
            if (ret) return ret;
            if (!objectClass.IsFamily())
                for (const family of objectClass.GetFamilies()) {
                    ret = this._customActionBlocksMap.get((family.GetName() + "." + name).toLowerCase());
                    if (ret) return ret
                }
            return null
        }
        GetAllGlobalVariables() {
            return this._allGlobalVars
        }
        GetAllLocalVariables() {
            return this._allLocalVars
        }
        ResetAllGlobalsToInitialValue() {
            for (const ev of this._allGlobalVars) ev.ResetToInitialValue()
        }
        GetEventGroupByName(name) {
            return this._groupsByName.get(name.toLowerCase()) ||
                null
        }
        GetEventGroupBySID(sid) {
            const group = this._blocksBySid.get(sid);
            if (group && group.IsGroup()) return group;
            else return null
        }
        GetAllGroups() {
            return this._allGroups
        }
        ResetAllGroupsInitialActivation() {
            for (const group of this._allGroups) group.ResetInitialActivation()
        }
        _ResetAllHasRunFlags() {
            for (const sheet of this._allSheets) sheet._ResetHasRunFlag()
        }
        RunEvents(layoutManager) {
            this._ResetAllHasRunFlags();
            this._runningEventsDepth++;
            for (const layout of layoutManager.runningLayouts()) {
                const eventSheet = layout.GetEventSheet();
                if (!eventSheet) continue;
                this._runtime.PushCurrentLayout(layout);
                eventSheet.Run();
                this._runtime.PopCurrentLayout()
            }
            this._runningEventsDepth--
        }
        async DebugRunEvents(layoutManager) {
            this._ResetAllHasRunFlags();
            this._runningEventsDepth++;
            for (const breakEventObject of this._DebugRunEventsGen(layoutManager)) await this._runtime.DebugBreak(breakEventObject);
            this._runningEventsDepth--
        }* _DebugRunEventsGen(layoutManager) {
            for (const layout of layoutManager.runningLayouts()) {
                const eventSheet = layout.GetEventSheet();
                if (!eventSheet) continue;
                this._runtime.PushCurrentLayout(layout);
                yield* eventSheet.DebugRun();
                this._runtime.PopCurrentLayout()
            }
        }
        _Trigger(layoutManager, method, inst, behaviorType) {
            let ret = false;
            if (!layoutManager.GetMainRunningLayout()) return this.QueueTrigger(method, inst, behaviorType);
            this._executingTriggerDepth++;
            for (const layout of layoutManager.runningLayouts()) {
                const eventSheet = layout.GetEventSheet();
                if (!eventSheet) continue;
                this._runtime.PushCurrentLayout(layout);
                for (const includeSheet of eventSheet.deepIncludes()) {
                    const result =
                        includeSheet._Trigger(method, inst, behaviorType);
                    ret = ret || result
                }
                const result2 = eventSheet._Trigger(method, inst, behaviorType);
                ret = ret || result2;
                this._runtime.PopCurrentLayout()
            }
            this._executingTriggerDepth--;
            return ret
        }* _DebugTrigger(layoutManager, method, inst, behaviorType) {
            let ret = false;
            if (!layoutManager.GetMainRunningLayout()) return this.QueueTrigger(method, inst, behaviorType);
            this._executingTriggerDepth++;
            for (const layout of layoutManager.runningLayouts()) {
                const eventSheet = layout.GetEventSheet();
                if (!eventSheet) continue;
                this._runtime.PushCurrentLayout(layout);
                for (const includeSheet of eventSheet.deepIncludes()) {
                    const result = yield* includeSheet._DebugTrigger(method, inst, behaviorType);
                    ret = ret || result
                }
                const result2 = yield* eventSheet._DebugTrigger(method, inst, behaviorType);
                ret = ret || result2;
                this._runtime.PopCurrentLayout()
            }
            this._executingTriggerDepth--;
            return ret
        }
        QueueTrigger(method, inst, behaviorType) {
            this._queuedTriggers.push([method, inst, behaviorType]);
            return false
        }
        QueueDebugTrigger(method, inst, behaviorType) {
            let resolve =
                null;
            const ret = new Promise(r => resolve = r);
            this._queuedDebugTriggers.push([method, inst, behaviorType, resolve]);
            return ret
        }* _RunQueuedDebugTriggersGen() {
            if (this._runtime.HitBreakpoint()) throw new Error("should not be in breakpoint");
            const layoutManager = this._runtime.GetLayoutManager();
            while (this._queuedDebugTriggers.length) {
                const [method, inst, behaviorType, resolve] = this._queuedDebugTriggers.shift();
                const ret = yield* this._DebugTrigger(layoutManager, method, inst, behaviorType);
                resolve(ret)
            }
        }
        async RunQueuedDebugTriggersAsync() {
            for (const breakEventObject of this._RunQueuedDebugTriggersGen()) await this._runtime.DebugBreak(breakEventObject)
        }
        _FastTrigger(layoutManager,
            method, inst, value) {
            let ret = false;
            const layout = layoutManager.GetMainRunningLayout();
            const eventSheet = layout.GetEventSheet();
            if (!eventSheet) return;
            this._executingTriggerDepth++;
            this._runtime.PushCurrentLayout(layout);
            const deepIncludes = eventSheet.deepIncludes();
            for (let i = 0, len = deepIncludes.length; i < len; ++i) {
                const result = deepIncludes[i]._FastTrigger(method, inst, value);
                ret = ret || result
            }
            const result2 = eventSheet._FastTrigger(method, inst, value);
            ret = ret || result2;
            this._runtime.PopCurrentLayout();
            this._executingTriggerDepth--;
            return ret
        }* _DebugFastTrigger(layoutManager, method, inst, value) {
            let ret = false;
            const layout = layoutManager.GetMainRunningLayout();
            const eventSheet = layout.GetEventSheet();
            if (!eventSheet) return;
            this._executingTriggerDepth++;
            this._runtime.PushCurrentLayout(layout);
            const deepIncludes = eventSheet.deepIncludes();
            for (let i = 0, len = deepIncludes.length; i < len; ++i) {
                const result = yield* deepIncludes[i]._DebugFastTrigger(method, inst, value);
                ret = ret || result
            }
            const result2 = yield* eventSheet._DebugFastTrigger(method, inst, value);
            ret = ret || result2;
            this._runtime.PopCurrentLayout();
            this._executingTriggerDepth--;
            return ret
        }
        GetTriggerDepth() {
            return this._executingTriggerDepth
        }
        IsInTrigger() {
            return this.GetTriggerDepth() > 0
        }
        _IncTriggerDepth() {
            return ++this._executingTriggerDepth
        }
        _DecTriggerDepth() {
            --this._executingTriggerDepth
        }
        IsRunningEvents() {
            return this._runningEventsDepth > 0
        }
        IsInEventEngine() {
            return this.IsRunningEvents() || this.IsInTrigger()
        }
        _RunQueuedTriggers(layoutManager) {
            for (const [method, inst, behaviorType] of this._queuedTriggers) this._Trigger(layoutManager,
                method, inst, behaviorType);
            C3.clearArray(this._queuedTriggers)
        }
        BlockFlushingInstances(e) {
            if (e) this._blockFlushingDepth++;
            else this._blockFlushingDepth--
        }
        IsFlushingBlocked() {
            return this._blockFlushingDepth > 0
        }
        ClearSol(solModifiers) {
            for (let i = 0, len = solModifiers.length; i < len; ++i) solModifiers[i].GetSolStack().Clear()
        }
        PushCleanSol(solModifiers) {
            for (let i = 0, len = solModifiers.length; i < len; ++i) solModifiers[i].GetSolStack().PushClean()
        }
        PushCopySol(solModifiers) {
            for (let i = 0, len = solModifiers.length; i < len; ++i) solModifiers[i].GetSolStack().PushCopy()
        }
        PopSol(solModifiers) {
            for (let i =
                    0, len = solModifiers.length; i < len; ++i) solModifiers[i].GetSolStack().Pop()
        }
        GetDynamicSolModifiersSet(skipSet) {
            const ret = new Set;
            const allStackFrames = this._eventStack.GetAllStackFrames();
            const stackIndex = this._eventStack.GetCurrentStackFrameIndex();
            for (let i = 0; i <= stackIndex; ++i) {
                const dynamicSolModifiers = allStackFrames[i].GetDynamicSolModifiers();
                if (dynamicSolModifiers)
                    for (const t of dynamicSolModifiers)
                        if (!skipSet || !skipSet.has(t)) ret.add(t)
            }
            return ret
        }
        PushCleanSolDynamic(existingSolModifiers) {
            const existingSet =
                new Set([...existingSolModifiers]);
            const pushSet = this.GetDynamicSolModifiersSet(existingSet);
            if (pushSet.size > 0) {
                for (const t of pushSet) t.GetSolStack().PushClean();
                return [...pushSet]
            } else return null
        }
        AddScheduledWait() {
            const w = C3.New(C3.ScheduledWait, this);
            this._scheduledWaits.push(w);
            return w
        }
        scheduledWaits() {
            return this._scheduledWaits
        }
        RunScheduledWaits() {
            if (!this._scheduledWaits.length) return;
            const frame = this.GetCurrentEventStackFrame();
            let didAnyRun = false;
            this._runningEventsDepth++;
            for (let i = 0,
                    len = this._scheduledWaits.length; i < len; ++i) {
                const w = this._scheduledWaits[i];
                if (w._ShouldRun()) w._Run(frame);
                if (w.ShouldRelease()) didAnyRun = true
            }
            if (didAnyRun) {
                this._FilterScheduledWaitsToRelease();
                frame.Reset(null)
            }
            this._runningEventsDepth--
        }
        async DebugRunScheduledWaits() {
            if (!this._scheduledWaits.length) return;
            const frame = this.GetCurrentEventStackFrame();
            let didAnyRun = false;
            this._runningEventsDepth++;
            for (let i = 0, len = this._scheduledWaits.length; i < len; ++i) {
                const w = this._scheduledWaits[i];
                if (w._ShouldRun()) await w._DebugRun(frame);
                if (w.ShouldRelease()) didAnyRun = true
            }
            if (didAnyRun) {
                this._FilterScheduledWaitsToRelease();
                frame.Reset(null)
            }
            this._runningEventsDepth--
        }
        _FilterScheduledWaitsToRelease() {
            const toRelease = C3.arrayFilterOut(this._scheduledWaits, w => w.ShouldRelease());
            for (const w of toRelease) w.Release()
        }
        ClearAllScheduledWaits() {
            for (const w of this._scheduledWaits) w.Release();
            C3.clearArray(this._scheduledWaits)
        }
        RemoveInstancesFromScheduledWaits(s) {
            for (const w of this._scheduledWaits) w.RemoveInstances(s)
        }
        AddAsyncActionPromise(p) {
            this._asyncActionPromises.push(p)
        }
        ClearAsyncActionPromises() {
            C3.clearArray(this._asyncActionPromises)
        }
        GetPromiseForAllAsyncActions() {
            const ret =
                Promise.all(this._asyncActionPromises);
            this._asyncActionPromises = [];
            return ret
        }
        _SaveToJson() {
            return {
                "groups": this._SaveGroupsToJson(),
                "cnds": this._SaveCndsToJson(),
                "acts": this._SaveActsToJson(),
                "vars": this._SaveVarsToJson(),
                "waits": this._SaveScheduledWaitsToJson()
            }
        }
        _LoadFromJson(o) {
            this._LoadGroupsFromJson(o["groups"]);
            this._LoadCndsFromJson(o["cnds"]);
            this._LoadActsFromJson(o["acts"]);
            this._LoadVarsFromJson(o["vars"]);
            this._LoadScheduledWaitsFromJson(o["waits"])
        }
        _SaveGroupsToJson() {
            const o = {};
            for (const group of this.GetAllGroups()) o[group.GetSID().toString()] =
                group.IsGroupActive();
            return o
        }
        _LoadGroupsFromJson(o) {
            for (const [sidStr, data] of Object.entries(o)) {
                const sid = parseInt(sidStr, 10);
                const group = this.GetEventGroupBySID(sid);
                if (group) group.SetGroupActive(data)
            }
        }
        _SaveCndsToJson() {
            const o = {};
            for (const [sid, cnd] of this._cndsBySid) {
                const data = cnd._SaveToJson();
                if (data) o[sid.toString()] = data
            }
            return o
        }
        _LoadCndsFromJson(o) {
            const map = new Map;
            for (const [sidStr, data] of Object.entries(o)) map.set(parseInt(sidStr, 10), data);
            for (const [sid, cnd] of this._cndsBySid) cnd._LoadFromJson(map.get(sid) ||
                null)
        }
        _SaveActsToJson() {
            const o = {};
            for (const [sid, act] of this._actsBySid) {
                const data = act._SaveToJson();
                if (data) o[sid.toString()] = data
            }
            return o
        }
        _LoadActsFromJson(o) {
            const map = new Map;
            for (const [sidStr, data] of Object.entries(o)) map.set(parseInt(sidStr, 10), data);
            for (const [sid, act] of this._actsBySid) act._LoadFromJson(map.get(sid) || null)
        }
        _SaveVarsToJson() {
            const o = {};
            for (const [sid, eventVar] of this._eventVarsBySid)
                if (!eventVar.IsConstant() && (eventVar.IsGlobal() || eventVar.IsStatic())) o[sid.toString()] =
                    eventVar.GetValue();
            return o
        }
        _LoadVarsFromJson(o) {
            for (const [sidStr, data] of Object.entries(o)) {
                const sid = parseInt(sidStr, 10);
                const eventVar = this.GetEventVariableBySID(sid);
                if (eventVar) eventVar.SetValue(data)
            }
        }
        _SaveScheduledWaitsToJson() {
            return this._scheduledWaits.filter(w => !w.IsPromise()).map(w => w._SaveToJson())
        }
        _LoadScheduledWaitsFromJson(arr) {
            this.ClearAllScheduledWaits();
            for (const data of arr) {
                const sw = C3.ScheduledWait._CreateFromJson(this, data);
                if (sw) this._scheduledWaits.push(sw)
            }
        }
        _GetPerfRecords() {
            return [...this._runtime.GetLayoutManager().runningLayouts()].map(l =>
                l.GetEventSheet()).filter(eventSheet => eventSheet).map(e => e._GetPerfRecord())
        }
        FindFirstFunctionBlockParent(parent) {
            while (parent) {
                const scopeParent = parent.GetScopeParent();
                if (scopeParent instanceof C3.FunctionBlock) return scopeParent;
                parent = scopeParent
            }
            return null
        }
        _InvokeFunctionFromJS(name, params) {
            if (!Array.isArray(params)) params = [];
            const functionBlock = this.GetFunctionBlockByName(name.toLowerCase());
            if (!functionBlock) return null;
            if (!functionBlock.IsEnabled()) return functionBlock.GetDefaultReturnValue();
            const functionParameters = functionBlock.GetFunctionParameters();
            if (params.length < functionParameters.length) {
                params = params.slice(0);
                do params.push(functionParameters[params.length].GetInitialValue()); while (params.length < functionParameters.length)
            }
            const callEventBlock = functionBlock.GetEventBlock();
            return callEventBlock.RunAsExpressionFunctionCall(callEventBlock.GetSolModifiersIncludingParents(), false, functionBlock.GetReturnType(), functionBlock.GetDefaultReturnValue(), ...params)
        }
    };

}

// events/eventSheet.js
{
    'use strict';
    const C3 = self.C3;
    C3.EventSheet = class EventSheet extends C3.DefendedBase {
        constructor(eventSheetManager, data) {
            super();
            this._eventSheetManager = eventSheetManager;
            this._runtime = eventSheetManager.GetRuntime();
            this._name = data[0];
            this._events = [];
            this._triggers = new Map;
            this._fastTriggers = new Map;
            this._eventsByDisplayNumber = new Map;
            this._hasRun = false;
            this._shallowIncludes = [];
            this._deepIncludes = [];
            this._alreadyIncludedSheets = new Set;
            for (const eventData of data[1]) this._CreateEvent(eventData, null, this._events);
            this._perfRecord =
                this._runtime.IsDebug() ? {
                    type: "sheet",
                    name: this._name,
                    totalTimeCounter: 0,
                    children: []
                } : null
        }
        Release() {
            this._eventSheetManager = null;
            this._runtime = null
        }
        _CreateEvent(eventData, parent, nontriggers) {
            switch (eventData[0]) {
                case 0:
                case 3:
                    this._CreateEventBlock(eventData, parent, nontriggers);
                    break;
                case 1:
                    this._CreateEventVariable(eventData, parent, nontriggers);
                    break;
                case 2:
                    this._CreateInclude(eventData, parent, nontriggers);
                    break;
                case 4:
                    this._CreateFunctionBlock(eventData, parent);
                    break;
                case 5:
                    this._CreateScriptBlock(eventData,
                        parent, nontriggers);
                    break;
                case 6:
                    this._CreateCustomACEBlock(eventData, parent);
                    break;
                default:
                    throw new Error("invalid event type");
            }
        }
        _CreateEventBlock(data, parent, nontriggers) {
            const eventBlock = C3.EventBlock.Create(this, parent, data);
            if (eventBlock.IsOrBlock()) {
                nontriggers.push(eventBlock);
                const conditions = eventBlock.GetConditions();
                for (let i = 0, len = conditions.length; i < len; ++i)
                    if (conditions[i].IsTrigger()) this._InitTrigger(eventBlock, i)
            } else if (eventBlock.IsTrigger()) this._InitTrigger(eventBlock, 0);
            else nontriggers.push(eventBlock)
        }
        _CreateFunctionBlock(data,
            parent) {
            const functionBlock = C3.FunctionBlock.CreateFunctionBlock(this, parent, data);
            this._eventSheetManager._RegisterFunctionBlock(functionBlock)
        }
        _CreateCustomACEBlock(data, parent) {
            const customAceBlock = C3.FunctionBlock.CreateCustomACEBlock(this, parent, data);
            this._eventSheetManager._RegisterFunctionBlock(customAceBlock)
        }
        _CreateEventVariable(data, parent, nontriggers) {
            const v = C3.EventVariable.Create(this, parent, data);
            nontriggers.push(v)
        }
        _CreateInclude(data, parent, nontriggers) {
            const include = C3.EventInclude.Create(this,
                parent, data);
            nontriggers.push(include)
        }
        _CreateScriptBlock(data, parent, nontriggers) {
            const scriptBlock = C3.EventScript.Create(this, parent, data);
            nontriggers.push(scriptBlock)
        }
        _InitTrigger(eventBlock, i) {
            if (!eventBlock.IsOrBlock()) this._eventSheetManager._AddTriggerToPostInit(eventBlock);
            const cnd = eventBlock.GetConditionAt(i);
            const func = cnd._GetFunc();
            const objectClass = cnd.GetObjectClass();
            if (cnd.IsFastTrigger()) {
                let methodMap = this._fastTriggers.get(objectClass);
                if (!methodMap) {
                    methodMap = new Map;
                    this._fastTriggers.set(objectClass,
                        methodMap)
                }
                const value = cnd.GetFastTriggerValue().toLowerCase();
                let valueMap = methodMap.get(func);
                if (!valueMap) {
                    valueMap = new Map;
                    methodMap.set(func, valueMap)
                }
                let triggerArr = valueMap.get(value);
                if (!triggerArr) {
                    triggerArr = [];
                    valueMap.set(value, triggerArr)
                }
                triggerArr.push([eventBlock, i])
            } else {
                let ocInfo = this._triggers.get(objectClass);
                if (!ocInfo) {
                    ocInfo = {
                        methodMap: new Map,
                        behaviors: new Map
                    };
                    this._triggers.set(objectClass, ocInfo)
                }
                const behaviorType = cnd.GetBehaviorType();
                let methodMap;
                if (behaviorType) {
                    methodMap =
                        ocInfo.behaviors.get(behaviorType);
                    if (!methodMap) {
                        methodMap = new Map;
                        ocInfo.behaviors.set(behaviorType, methodMap)
                    }
                } else methodMap = ocInfo.methodMap;
                let triggerArr = methodMap.get(func);
                if (!triggerArr) {
                    triggerArr = [];
                    methodMap.set(func, triggerArr)
                }
                triggerArr.push([eventBlock, i])
            }
        }
        _PostInit() {
            const events = this._events;
            for (let i = 0, len = events.length; i < len; ++i) {
                const hasElseBlock = i < len - 1 && events[i + 1] instanceof C3.EventBlock && events[i + 1].IsElseBlock();
                events[i]._PostInit(hasElseBlock)
            }
        }
        _AddShallowInclude(include) {
            this._shallowIncludes.push(include)
        }
        _UpdateDeepIncludes() {
            C3.clearArray(this._deepIncludes);
            this._AddDeepIncludes(this);
            this._alreadyIncludedSheets.clear()
        }
        _AddDeepIncludes(rootSheet) {
            const deepIncludes = rootSheet._deepIncludes;
            const alreadyIncludedSheets = rootSheet._alreadyIncludedSheets;
            for (const include of this._shallowIncludes) {
                const sheet = include.GetIncludeSheet();
                if (!include.IsActive() || rootSheet === sheet || alreadyIncludedSheets.has(sheet)) continue;
                alreadyIncludedSheets.add(sheet);
                sheet._AddDeepIncludes(rootSheet);
                deepIncludes.push(sheet)
            }
        }
        deepIncludes() {
            return this._deepIncludes
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetRuntime() {
            return this._runtime
        }
        GetName() {
            return this._name
        }
        _RegisterEventByDisplayNumber(eventBlock,
            displayNumber) {
            this._eventsByDisplayNumber.set(displayNumber, eventBlock)
        }
        _GetEventByDisplayNumber(displayNumber) {
            return this._eventsByDisplayNumber.get(displayNumber) || null
        }
        _ResetHasRunFlag() {
            this._hasRun = false
        }
        Run() {
            if (this._hasRun) return;
            const runtime = this._runtime;
            const profile = runtime.IsCPUProfiling();
            const startTime = profile ? performance.now() : 0;
            this._hasRun = true;
            const eventSheetManager = this.GetEventSheetManager();
            const frame = eventSheetManager.GetCurrentEventStackFrame();
            for (const e of this._events) {
                e.Run(frame);
                eventSheetManager.ClearSol(e.GetSolModifiers());
                eventSheetManager.ClearAsyncActionPromises();
                runtime.FlushPendingInstances()
            }
            frame.Reset(null);
            if (profile) this._perfRecord.totalTimeCounter += performance.now() - startTime
        }* DebugRun() {
            if (this._hasRun) return;
            this._hasRun = true;
            const runtime = this._runtime;
            const eventSheetManager = this.GetEventSheetManager();
            const frame = eventSheetManager.GetCurrentEventStackFrame();
            for (const e of this._events) {
                yield* e.DebugRun(frame);
                eventSheetManager.ClearSol(e.GetSolModifiers());
                eventSheetManager.ClearAsyncActionPromises();
                runtime.FlushPendingInstances()
            }
            frame.Reset(null)
        }
        _Trigger(method, inst, behaviorType) {
            if (inst) {
                const objectClass = inst.GetObjectClass();
                let ret = false;
                let r = this._TriggerForClass(method, inst, objectClass, behaviorType);
                ret = ret || r;
                for (const family of objectClass.GetFamilies()) {
                    r = this._TriggerForClass(method, inst, family, behaviorType);
                    ret = ret || r
                }
            } else return this._TriggerForClass(method, inst, null, null)
        }
        _TriggerForClass(method, inst, objectClass, behaviorType) {
            const ocInfo =
                this._triggers.get(objectClass);
            if (!ocInfo) return false;
            const methodMap = behaviorType ? ocInfo.behaviors.get(behaviorType) : ocInfo.methodMap;
            if (!methodMap) return false;
            const triggerList = methodMap.get(method);
            if (!triggerList) return false;
            let ret = false;
            for (const [trigger, index] of triggerList) {
                const r = this._ExecuteTrigger(inst, trigger, index);
                ret = ret || r
            }
            return ret
        }* _DebugTrigger(method, inst, behaviorType) {
            if (inst) {
                const objectClass = inst.GetObjectClass();
                let ret = false;
                let r = yield* this._DebugTriggerForClass(method,
                    inst, objectClass, behaviorType);
                ret = ret || r;
                for (const family of objectClass.GetFamilies()) {
                    r = yield* this._DebugTriggerForClass(method, inst, family, behaviorType);
                    ret = ret || r
                }
            } else return yield* this._DebugTriggerForClass(method, inst, null, null)
        }* _DebugTriggerForClass(method, inst, objectClass, behaviorType) {
            const ocInfo = this._triggers.get(objectClass);
            if (!ocInfo) return false;
            const methodMap = behaviorType ? ocInfo.behaviors.get(behaviorType) : ocInfo.methodMap;
            if (!methodMap) return false;
            const triggerList = methodMap.get(method);
            if (!triggerList) return false;
            let ret = false;
            for (const [trigger, index] of triggerList) {
                let r;
                if (trigger.DebugCanRunFast()) r = this._ExecuteTrigger(inst, trigger, index);
                else r = yield* this._DebugExecuteTrigger(inst, trigger, index);
                ret = ret || r
            }
            return ret
        }
        _FastTrigger(method, inst, value) {
            const objectClass = inst.GetObjectClass();
            const methodMap = this._fastTriggers.get(objectClass);
            if (!methodMap) return false;
            const valueMap = methodMap.get(method);
            if (!valueMap) return false;
            const triggerList = valueMap.get(value);
            if (!triggerList) return false;
            let ret = false;
            for (let i = 0, len = triggerList.length; i < len; ++i) {
                const t = triggerList[i];
                const r = this._ExecuteTrigger(null, t[0], t[1]);
                ret = ret || r
            }
            return ret
        }* _DebugFastTrigger(method, inst, value) {
            const objectClass = inst.GetObjectClass();
            const methodMap = this._fastTriggers.get(objectClass);
            if (!methodMap) return false;
            const valueMap = methodMap.get(method);
            if (!valueMap) return false;
            const triggerList = valueMap.get(value);
            if (!triggerList) return false;
            let ret = false;
            for (let i = 0, len = triggerList.length; i < len; ++i) {
                const t =
                    triggerList[i];
                const trigger = t[0];
                const index = t[1];
                let r;
                if (trigger.DebugCanRunFast()) r = this._ExecuteTrigger(null, trigger, index);
                else r = yield* this._DebugExecuteTrigger(null, trigger, index);
                ret = ret || r
            }
            return ret
        }
        _ExecuteTrigger(inst, trigger, index) {
            const runtime = this._runtime;
            const eventSheetManager = this._eventSheetManager;
            const currentEvent = eventSheetManager.GetCurrentEvent();
            const eventStack = eventSheetManager.GetEventStack();
            const triggerDepth = eventSheetManager.GetTriggerDepth();
            let ret = false;
            if (currentEvent) eventSheetManager.PushCleanSol(currentEvent.GetSolModifiersIncludingParents());
            eventSheetManager.PushCleanSol(trigger.GetSolModifiersIncludingParents());
            const isRecursive = triggerDepth > 1;
            if (isRecursive) eventSheetManager.GetLocalVarStack().Push();
            const frame = eventStack.Push(trigger);
            if (inst) {
                const objectClass = trigger.GetConditions()[index].GetObjectClass();
                const sol = objectClass.GetCurrentSol();
                sol.SetSinglePicked(inst);
                if (inst.IsInContainer()) inst.SetSiblingsSinglePicked()
            }
            let okToRun = true;
            if (trigger.GetParent()) {
                const parents = trigger.GetTriggerParents();
                for (let i = 0, len = parents.length; i <
                    len; ++i)
                    if (!parents[i].RunPreTrigger(frame)) {
                        okToRun = false;
                        break
                    }
            }
            if (okToRun) {
                if (trigger.IsOrBlock()) trigger.RunOrBlockTrigger(frame, index);
                else trigger.Run(frame);
                ret = frame.GetLastEventTrue()
            }
            eventStack.Pop();
            if (isRecursive) eventSheetManager.GetLocalVarStack().Pop();
            eventSheetManager.PopSol(trigger.GetSolModifiersIncludingParents());
            if (currentEvent) eventSheetManager.PopSol(currentEvent.GetSolModifiersIncludingParents());
            if (!currentEvent && triggerDepth === 1) {
                eventSheetManager.ClearAsyncActionPromises();
                if (!eventSheetManager.IsFlushingBlocked()) runtime.FlushPendingInstances()
            }
            return ret
        }* _DebugExecuteTrigger(inst, trigger, index) {
            const runtime = this._runtime;
            const eventSheetManager = this._eventSheetManager;
            const currentEvent = eventSheetManager.GetCurrentEvent();
            const eventStack = eventSheetManager.GetEventStack();
            const triggerDepth = eventSheetManager.GetTriggerDepth();
            let ret = false;
            if (currentEvent) eventSheetManager.PushCleanSol(currentEvent.GetSolModifiersIncludingParents());
            eventSheetManager.PushCleanSol(trigger.GetSolModifiersIncludingParents());
            const isRecursive = triggerDepth > 1;
            if (isRecursive) eventSheetManager.GetLocalVarStack().Push();
            const frame = eventStack.Push(trigger);
            if (inst) {
                const objectClass = trigger.GetConditions()[index].GetObjectClass();
                const sol = objectClass.GetCurrentSol();
                sol.SetSinglePicked(inst);
                if (inst.IsInContainer()) inst.SetSiblingsSinglePicked()
            }
            let okToRun = true;
            if (trigger.GetParent()) {
                const parents = trigger.GetTriggerParents();
                for (let i = 0, len = parents.length; i < len; ++i)
                    if (!(yield* parents[i].DebugRunPreTrigger(frame))) {
                        okToRun =
                            false;
                        break
                    }
            }
            if (okToRun) {
                if (trigger.IsOrBlock()) yield* trigger.DebugRunOrBlockTrigger(frame, index);
                else yield* trigger.DebugRun(frame);
                ret = frame.GetLastEventTrue()
            }
            eventStack.Pop();
            if (isRecursive) eventSheetManager.GetLocalVarStack().Pop();
            eventSheetManager.PopSol(trigger.GetSolModifiersIncludingParents());
            if (currentEvent) eventSheetManager.PopSol(currentEvent.GetSolModifiersIncludingParents());
            if (!currentEvent && triggerDepth === 1) {
                eventSheetManager.ClearAsyncActionPromises();
                if (!eventSheetManager.IsFlushingBlocked()) runtime.FlushPendingInstances()
            }
            return ret
        }
        _GetPerfRecord() {
            return this._perfRecord
        }
    };

}

// events/eventBlock.js
{
    'use strict';
    const C3 = self.C3;
    const EMPTY_ARRAY = [];

    function NoActions(frame, index) {
        return true
    }

    function* DebugNoActions(frame, index) {
        return true
    }
    C3.EventBlock = class EventBlock extends C3.DefendedBase {
        constructor(eventSheet, parent, data) {
            super();
            this._eventSheet = eventSheet;
            this._runtime = eventSheet.GetRuntime();
            this._parent = parent;
            this._scopeParent = null;
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._solModifiers = [];
            this._solModifiersIncludingParents = [];
            this._hasGotSolModifiersIncludingParents = false;
            this._isSolWriterAfterCnds = false;
            this._isTopLevelGroup = false;
            this._hasElseBlock = false;
            this._isOrBlock = !!data[2];
            this._isElseBlock =
                false;
            this._triggerParents = null;
            this._conditions = [];
            this._actions = [];
            this._subEvents = [];
            this._RunActions = NoActions;
            this._DebugRunActions = DebugNoActions;
            this._isGroup = false;
            this._isInitiallyActive = false;
            this._groupName = "";
            this._isGroupActive = false;
            this._containedIncludes = null;
            this._perfRecord = null;
            this._sid = data[4];
            this._displayNumber = data[5];
            this._eventSheet._RegisterEventByDisplayNumber(this, this._displayNumber);
            this._debugData = this._runtime.IsDebug() ? {
                isBreakpoint: data[3][0],
                isBreakable: data[3][1],
                canRunAllConditionsFast: false,
                canRunAllActionsFast: false,
                canRunAllSubEventsFast: false,
                canRunSelfFast: false
            } : null;
            this.GetEventSheetManager()._RegisterEventBlock(this);
            if (data[0] === 3) this._InitGroup(data[1]);
            let index = 0;
            for (const cndData of data[6]) {
                const condition = C3.Condition.Create(this, cndData, index++);
                this._conditions.push(condition);
                this._AddSolModifier(condition.GetObjectClass())
            }
            index = 0;
            for (const actData of data[7]) {
                const action = C3.Action.Create(this, actData, index++);
                this._actions.push(action)
            }
            if (data.length ===
                9) {
                const subEventsData = data[8];
                for (const eventData of subEventsData) this._eventSheet._CreateEvent(eventData, this, this._subEvents)
            }
            if (this._conditions.length) this._isElseBlock = this._conditions[0].GetObjectClass() === null && this._conditions[0]._GetFunc() === C3.Plugins.System.Cnds.Else;
            if (this._conditions.length === 0) this._conditions = EMPTY_ARRAY;
            if (this._actions.length === 0) this._actions = EMPTY_ARRAY;
            if (this._subEvents.length === 0) this._subEvents = EMPTY_ARRAY
        }
        static Create(eventSheet, parent, data) {
            return C3.New(C3.EventBlock,
                eventSheet, parent, data)
        }
        _InitGroup(groupData) {
            this._isGroup = true;
            this._isInitiallyActive = !!groupData[0];
            this._isGroupActive = this._isInitiallyActive;
            this._groupName = groupData[1].toLowerCase();
            this._containedIncludes = [];
            this.GetEventSheetManager()._RegisterGroup(this);
            if (this._runtime.IsDebug()) this._perfRecord = {
                type: "group",
                name: groupData[1],
                totalTimeCounter: 0,
                children: []
            }
        }
        _AddContainedInclude(include) {
            this._containedIncludes.push(include)
        }
        _AddContainerSolModifierToList(objectClass, arr) {
            for (const containerType of objectClass.GetContainer().objectTypes())
                if (!arr.includes(containerType)) arr.push(containerType)
        }
        _AddSolModifierToList(objectClass,
            arr) {
            if (!objectClass) return;
            if (!arr.includes(objectClass)) arr.push(objectClass);
            if (objectClass.IsFamily())
                for (const familyMember of objectClass.GetFamilyMembers()) {
                    if (familyMember.IsInContainer()) this._AddContainerSolModifierToList(familyMember, arr)
                } else if (objectClass.IsInContainer()) this._AddContainerSolModifierToList(objectClass, arr)
        }
        _AddSolModifier(objectClass) {
            this._AddSolModifierToList(objectClass, this._solModifiers)
        }
        _AddParentSolModifier(objectClass) {
            this._AddSolModifierToList(objectClass,
                this._solModifiersIncludingParents)
        }
        SetAllSolModifiers() {
            this._solModifiers = this._runtime.GetAllObjectClasses()
        }
        _PostInit(hasElse) {
            this._hasElseBlock = !!hasElse;
            this._IdentifyTopLevelGroup();
            this._IdentifyTriggerParents();
            for (const c of this._conditions) c._PostInit();
            if (this._actions.length > 0) {
                let hasAnyActionWithReturnType = false;
                for (const a of this._actions) {
                    a._PostInit();
                    if (a.HasReturnType()) hasAnyActionWithReturnType = true
                }
                if (hasAnyActionWithReturnType) {
                    this._RunActions = this._RunActions_ReturnValue;
                    this._DebugRunActions = this._DebugRunActions_ReturnValue
                } else {
                    this._RunActions = this._RunActions_Fast;
                    this._DebugRunActions = this._DebugRunActions_Fast
                }
            }
            const subEvents = this._subEvents;
            for (let i = 0, len = subEvents.length; i < len; ++i) {
                const hasElseBlock = i < len - 1 && subEvents[i + 1] instanceof C3.EventBlock && subEvents[i + 1].IsElseBlock();
                subEvents[i]._PostInit(hasElseBlock)
            }
            if (this._debugData) this._UpdateCanRunFast();
            if (this._perfRecord) this._GetPerfRecordParent()._GetPerfRecord().children.push(this._perfRecord)
        }
        _GetPerfRecord() {
            return this._perfRecord
        }
        _GetPerfRecordParent() {
            let p =
                this.GetParent();
            while (p) {
                if (p.IsGroup()) return p;
                p = p.GetParent()
            }
            return this._eventSheet
        }
        _UpdateCanRunFast() {
            const dd = this._debugData;
            dd.canRunAllConditionsFast = this._conditions.every(c => c.DebugCanRunFast());
            dd.canRunAllActionsFast = this._actions.every(a => a.DebugCanRunFast());
            dd.canRunAllSubEventsFast = this._subEvents.every(s => s.DebugCanRunFast());
            dd.canRunSelfFast = dd.canRunAllConditionsFast && dd.canRunAllActionsFast && dd.canRunAllSubEventsFast
        }
        _UpdateCanRunFastRecursive() {
            let e = this;
            do {
                e._UpdateCanRunFast();
                e = e.GetParent()
            } while (e)
        }
        _IdentifyTopLevelGroup() {
            if (!this.IsGroup()) return;
            let p = this.GetParent();
            this._isTopLevelGroup = true;
            while (p) {
                if (!p.IsGroup()) {
                    this._isTopLevelGroup = false;
                    break
                }
                p = p.GetParent()
            }
        }
        _IdentifySolModifiersIncludingParents() {
            const allObjectClasses = this._runtime.GetAllObjectClasses();
            if (this._solModifiers === allObjectClasses) this._solModifiersIncludingParents = allObjectClasses;
            else {
                this._solModifiersIncludingParents = C3.cloneArray(this._solModifiers);
                let p = this.GetParent();
                while (p) {
                    for (const o of p._solModifiers) this._AddParentSolModifier(o);
                    p = p.GetParent()
                }
                const eventSheetManager = this.GetEventSheetManager();
                this._solModifiers = eventSheetManager._DeduplicateSolModifierList(this._solModifiers);
                this._solModifiersIncludingParents = eventSheetManager._DeduplicateSolModifierList(this._solModifiersIncludingParents)
            }
        }
        _IdentifyTriggerParents() {
            if (!this.HasAnyTriggeredCondition()) return;
            this._triggerParents = [];
            let p = this.GetParent();
            while (p) {
                this._triggerParents.push(p);
                p = p.GetParent()
            }
            this._triggerParents.reverse()
        }
        SetSolWriterAfterCnds() {
            this._isSolWriterAfterCnds =
                true;
            if (this._parent) this._parent.SetSolWriterAfterCnds()
        }
        IsSolWriterAfterCnds() {
            return this._isSolWriterAfterCnds
        }
        GetSolModifiers() {
            return this._solModifiers
        }
        GetSolModifiersIncludingParents() {
            if (!this._hasGotSolModifiersIncludingParents) {
                this._hasGotSolModifiersIncludingParents = true;
                this._IdentifySolModifiersIncludingParents()
            }
            return this._solModifiersIncludingParents
        }
        HasSolModifier(objectClass) {
            return this._solModifiers.includes(objectClass)
        }
        GetTriggerParents() {
            return this._triggerParents
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetEventSheetManager() {
            return this._eventSheet.GetEventSheetManager()
        }
        GetRuntime() {
            return this._runtime
        }
        GetParent() {
            return this._parent
        }
        _SetScopeParent(p) {
            this._scopeParent =
                p
        }
        GetScopeParent() {
            return this._scopeParent || this._parent
        }
        GetDisplayNumber() {
            return this._displayNumber
        }
        IsDebugBreakable() {
            return this._debugData && this._debugData.isBreakable
        }
        IsDebugBreakpoint() {
            return this.IsDebugBreakable() && this._debugData.isBreakpoint
        }
        _SetDebugBreakpoint(b) {
            this._debugData.isBreakpoint = !!b;
            this._UpdateCanRunFastRecursive()
        }
        IsGroup() {
            return this._isGroup
        }
        IsTopLevelGroup() {
            return this._isTopLevelGroup
        }
        IsElseBlock() {
            return this._isElseBlock
        }
        HasElseBlock() {
            return this._hasElseBlock
        }
        GetGroupName() {
            return this._groupName
        }
        IsGroupActive() {
            return this._isGroupActive
        }
        ResetInitialActivation() {
            this.SetGroupActive(this._isInitiallyActive)
        }
        SetGroupActive(a) {
            a = !!a;
            if (!this._isGroup) throw new Error("not a group");
            if (this._isGroupActive === a) return;
            this._isGroupActive = a;
            for (const include of this._containedIncludes) include.UpdateActive();
            if (this._containedIncludes.length) {
                const currentLayout = this._runtime.GetCurrentLayout();
                const mainEventSheet = currentLayout.GetEventSheet();
                if (mainEventSheet) mainEventSheet._UpdateDeepIncludes()
            }
        }
        GetSID() {
            return this._sid
        }
        IsOrBlock() {
            return this._isOrBlock
        }
        IsTrigger() {
            return this._conditions.length && this._conditions[0].IsTrigger()
        }
        IsForFunctionBlock() {
            return this._scopeParent &&
                this._scopeParent instanceof C3.FunctionBlock
        }
        HasAnyTriggeredCondition() {
            return this.IsForFunctionBlock() || this._conditions.some(c => c.IsTrigger())
        }
        GetConditions() {
            return this._conditions
        }
        GetConditionCount() {
            return this._conditions.length
        }
        GetConditionAt(i) {
            i = Math.floor(i);
            if (i < 0 || i >= this._conditions.length) throw new RangeError("invalid condition index");
            return this._conditions[i]
        }
        GetConditionByDebugIndex(i) {
            return this.GetConditionAt(i)
        }
        IsFirstConditionOfType(cnd) {
            let i = cnd.GetIndex();
            if (i === 0) return true;
            --i;
            const cndObjectClass = cnd.GetObjectClass();
            for (; i >= 0; --i) {
                const c = this._conditions[i];
                if (c.GetObjectClass() === cndObjectClass || c.IsSystemCondition() && c.GetFirstObjectParameterObjectClass() === cndObjectClass) return false
            }
            return true
        }
        GetActions() {
            return this._actions
        }
        GetActionCount() {
            return this._actions.length
        }
        GetActionAt(i) {
            i = Math.floor(i);
            if (i < 0 || i >= this._actions.length) throw new RangeError("invalid action index");
            return this._actions[i]
        }
        GetActionByDebugIndex(i) {
            i = Math.floor(i);
            const ret = this._actions.find(a =>
                a.GetDebugIndex() === i);
            if (!ret) throw new RangeError("invalid action debug index");
            return ret
        }
        _HasActionIndex(i) {
            i = Math.floor(i);
            return i >= 0 && i < this._actions.length
        }
        GetSubEvents() {
            return this._subEvents
        }
        _GetAllLocalVariablesInScope() {
            return this._subEvents.filter(e => e instanceof C3.EventVariable)
        }
        RunPreTrigger(frame) {
            frame.SetCurrentEvent(this);
            const conditions = this._conditions;
            let isAnyTrue = conditions.length === 0;
            for (let i = 0, len = conditions.length; i < len; ++i) {
                const c = conditions[i];
                frame.SetConditionIndex(i);
                if (c.IsLooping()) throw new Error("trigger cannot be used as sub-event to a loop");
                if (c.Run()) isAnyTrue = true;
                else if (!this._isOrBlock) return false
            }
            return this._isOrBlock ? isAnyTrue : true
        }
        RunOrBlockTrigger(frame, index) {
            frame.SetCurrentEvent(this);
            if (this._conditions[index].Run()) {
                if (this._RunActions(frame, 0)) this._RunSubEvents(frame);
                frame.SetLastEventTrue(true)
            }
        }* DebugRunPreTrigger(frame) {
            frame.SetCurrentEvent(this);
            const conditions = this._conditions;
            let isAnyTrue = conditions.length === 0;
            for (let i = 0, len =
                    conditions.length; i < len; ++i) {
                const c = conditions[i];
                frame.SetConditionIndex(i);
                if (c.IsLooping()) throw new Error("trigger cannot be used as sub-event to a loop");
                let ret;
                if (c.DebugCanRunFast()) ret = c.Run();
                else ret = yield* c.DebugRun();
                if (ret) isAnyTrue = true;
                else if (!this._isOrBlock) return false
            }
            return this._isOrBlock ? isAnyTrue : true
        }* DebugRunOrBlockTrigger(frame, index) {
            frame.SetCurrentEvent(this);
            const c = this._conditions[index];
            let ret;
            if (c.DebugCanRunFast()) ret = c.Run();
            else ret = yield* c.DebugRun();
            if (ret) {
                let actRet;
                if (this.DebugCanRunActionsFast()) actRet = this._RunActions(frame, 0);
                else actRet = yield* this._DebugRunActions(frame, 0);
                if (actRet)
                    if (this.DebugCanRunSubEventsFast()) this._RunSubEvents();
                    else yield* this._DebugRunSubEvents();
                frame.SetLastEventTrue(true)
            }
        }
        Run(frame) {
            frame.SetCurrentEvent(this);
            if (!this._isElseBlock) frame.SetElseBranchRan(false);
            if (this._isOrBlock) this._RunOrBlock(frame);
            else this._RunAndBlock(frame)
        }* DebugRun(frame) {
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            frame.SetCurrentEvent(this);
            if (!this._isElseBlock) frame.SetElseBranchRan(false);
            if (this._isOrBlock) yield* this._DebugRunOrBlock(frame);
            else yield* this._DebugRunAndBlock(frame)
        }
        _RunOrBlock(frame) {
            const conditions = this._conditions;
            let isAnyTrue = conditions.length === 0;
            for (let i = 0, len = conditions.length; i < len; ++i) {
                const c = conditions[i];
                if (c.IsTrigger()) continue;
                frame.SetConditionIndex(i);
                const result = c.Run();
                isAnyTrue = isAnyTrue || result
            }
            frame.SetLastEventTrue(isAnyTrue);
            if (isAnyTrue) {
                if (this._RunActions(frame, 0)) this._RunSubEvents(frame);
                if (this._hasElseBlock) frame.SetElseBranchRan(true)
            }
        }* _DebugRunOrBlock(frame) {
            const conditions = this._conditions;
            let isAnyTrue = conditions.length === 0;
            for (let i = 0, len = conditions.length; i < len; ++i) {
                const c = conditions[i];
                if (c.IsTrigger()) continue;
                frame.SetConditionIndex(i);
                let ret;
                if (c.DebugCanRunFast()) ret = c.Run();
                else ret = yield* c.DebugRun();
                isAnyTrue = isAnyTrue || ret
            }
            frame.SetLastEventTrue(isAnyTrue);
            if (isAnyTrue) {
                let actRet;
                if (this.DebugCanRunActionsFast()) actRet = this._RunActions(frame, 0);
                else actRet = yield* this._DebugRunActions(frame,
                    0);
                if (actRet)
                    if (this.DebugCanRunSubEventsFast()) this._RunSubEvents();
                    else yield* this._DebugRunSubEvents();
                if (this._hasElseBlock) frame.SetElseBranchRan(true)
            }
        }
        _RunAndBlock(frame) {
            const conditions = this._conditions;
            for (let i = 0, len = conditions.length; i < len; ++i) {
                const c = conditions[i];
                frame.SetConditionIndex(i);
                const result = c.Run();
                if (!result) {
                    frame.SetLastEventTrue(false);
                    return
                }
            }
            frame.SetLastEventTrue(true);
            if (this._RunActions(frame, 0)) this._RunSubEvents(frame);
            if (frame.GetLastEventTrue() && this._hasElseBlock) frame.SetElseBranchRan(true)
        }* _DebugRunAndBlock(frame) {
            const conditions =
                this._conditions;
            for (let i = 0, len = conditions.length; i < len; ++i) {
                const c = conditions[i];
                frame.SetConditionIndex(i);
                let ret;
                if (c.DebugCanRunFast()) ret = c.Run();
                else ret = yield* c.DebugRun();
                if (!ret) {
                    frame.SetLastEventTrue(false);
                    return
                }
            }
            frame.SetLastEventTrue(true);
            let actRet;
            if (this.DebugCanRunActionsFast()) actRet = this._RunActions(frame, 0);
            else actRet = yield* this._DebugRunActions(frame, 0);
            if (actRet)
                if (this.DebugCanRunSubEventsFast()) this._RunSubEvents();
                else yield* this._DebugRunSubEvents();
            if (frame.GetLastEventTrue() &&
                this._hasElseBlock) frame.SetElseBranchRan(true)
        }
        _RunActions_Fast(frame, startIndex) {
            const actions = this._actions;
            for (let i = startIndex, len = actions.length; i < len; ++i) {
                const a = actions[i];
                frame.SetActionIndex(i);
                a.Run()
            }
            return true
        }* _DebugRunActions_Fast(frame, startIndex) {
            const actions = this._actions;
            for (let i = startIndex, len = actions.length; i < len; ++i) {
                const a = actions[i];
                frame.SetActionIndex(i);
                if (a.DebugCanRunFast()) a.Run();
                else yield* a.DebugRun()
            }
            return true
        }
        _RunActions_ReturnValue(frame, startIndex) {
            const eventSheetManager =
                this.GetEventSheetManager();
            const actions = this._actions;
            for (let i = startIndex, len = actions.length; i < len; ++i) {
                const a = actions[i];
                frame.SetActionIndex(i);
                const ret = a.Run();
                if (a.CanBailOut() && ret === true) return false;
                else if (a.IsAsync() && ret instanceof Promise) eventSheetManager.AddAsyncActionPromise(ret)
            }
            return true
        }* _DebugRunActions_ReturnValue(frame, startIndex) {
            const eventSheetManager = this.GetEventSheetManager();
            const actions = this._actions;
            for (let i = startIndex, len = actions.length; i < len; ++i) {
                const a = actions[i];
                frame.SetActionIndex(i);
                let ret;
                if (a.DebugCanRunFast()) ret = a.Run();
                else ret = yield* a.DebugRun();
                if (a.CanBailOut() && ret === true) return false;
                else if (a.IsAsync() && ret instanceof Promise) eventSheetManager.AddAsyncActionPromise(ret)
            }
            return true
        }
        _ResumeActionsAndSubEvents(frame) {
            if (this._RunActions(frame, frame.GetActionIndex())) this._RunSubEvents()
        }* _DebugResumeActionsAndSubEvents(frame) {
            if (yield* this._DebugRunActions(frame, frame.GetActionIndex())) yield* this._DebugRunSubEvents()
        }
        _RunSubEvents() {
            if (!this._subEvents.length) return;
            const profile = this.IsGroup() && this._runtime.IsCPUProfiling();
            const startTime = profile ? performance.now() : 0;
            const eventStack = this._eventStack;
            const frame = eventStack.Push(this);
            if (this._isSolWriterAfterCnds) this._RunSubEvents_SolWriterAfterCnds(frame);
            else this._RunSubEvents_Fast(frame);
            eventStack.Pop();
            if (profile) this._perfRecord.totalTimeCounter += performance.now() - startTime
        }
        _RunSubEvents_SolWriterAfterCnds(frame) {
            const isGroup = this._isGroup;
            const isTopLevelGroup = this._isTopLevelGroup;
            const eventSheetManager =
                this.GetEventSheetManager();
            const subEvents = this._subEvents;
            for (let i = 0, len = subEvents.length, last = len - 1; i < len; ++i) {
                const e = subEvents[i];
                const solModifiers = e.GetSolModifiers();
                const copySol = !isTopLevelGroup || !isGroup && i < last;
                if (copySol) eventSheetManager.PushCopySol(solModifiers);
                e.Run(frame);
                if (copySol) eventSheetManager.PopSol(solModifiers);
                else eventSheetManager.ClearSol(solModifiers)
            }
        }
        _RunSubEvents_Fast(frame) {
            const subEvents = this._subEvents;
            for (let i = 0, len = subEvents.length; i < len; ++i) subEvents[i].Run(frame)
        }* _DebugRunSubEvents() {
            if (!this._subEvents.length) return;
            const eventStack = this._eventStack;
            const frame = eventStack.Push(this);
            if (this._isSolWriterAfterCnds) yield* this._DebugRunSubEvents_SolWriterAfterCnds(frame);
            else yield* this._DebugRunSubEvents_Fast(frame);
            eventStack.Pop()
        }* _DebugRunSubEvents_SolWriterAfterCnds(frame) {
            const isGroup = this._isGroup;
            const isTopLevelGroup = this._isTopLevelGroup;
            const eventSheetManager = this.GetEventSheetManager();
            const subEvents = this._subEvents;
            for (let i = 0, len = subEvents.length, last = len - 1; i < len; ++i) {
                const e = subEvents[i];
                const solModifiers =
                    e.GetSolModifiers();
                const copySol = !isTopLevelGroup || !isGroup && i < last;
                if (copySol) eventSheetManager.PushCopySol(solModifiers);
                yield* e.DebugRun(frame);
                if (copySol) eventSheetManager.PopSol(solModifiers);
                else eventSheetManager.ClearSol(solModifiers)
            }
        }* _DebugRunSubEvents_Fast(frame) {
            const subEvents = this._subEvents;
            for (let i = 0, len = subEvents.length; i < len; ++i) yield* subEvents[i].DebugRun(frame)
        }
        Retrigger(oldFrame, newFrame) {
            newFrame.ResetQuick();
            const conditions = this._conditions;
            if (!this.IsOrBlock())
                for (let i =
                        oldFrame.GetConditionIndex() + 1, len = conditions.length; i < len; ++i) {
                    const c = conditions[i];
                    newFrame.SetConditionIndex(i);
                    const result = c.Run();
                    if (!result) return false
                }
            if (this._RunActions(newFrame, 0)) this._RunSubEvents(newFrame);
            return true
        }* DebugRetrigger(oldFrame, newFrame) {
            newFrame.ResetQuick();
            const conditions = this._conditions;
            if (!this.IsOrBlock())
                for (let i = oldFrame.GetConditionIndex() + 1, len = conditions.length; i < len; ++i) {
                    const c = conditions[i];
                    newFrame.SetConditionIndex(i);
                    let ret;
                    if (c.DebugCanRunFast()) ret =
                        c.Run();
                    else ret = yield* c.DebugRun();
                    if (!ret) return false
                }
            let actRet;
            if (this.DebugCanRunActionsFast()) actRet = this._RunActions(newFrame, 0);
            else actRet = yield* this._DebugRunActions(newFrame, 0);
            if (actRet)
                if (this.DebugCanRunSubEventsFast()) this._RunSubEvents();
                else yield* this._DebugRunSubEvents();
            return true
        }
        DebugCanRunFast() {
            return !this.IsDebugBreakpoint() && !this._runtime.DebugBreakNext() && this._debugData.canRunSelfFast
        }
        DebugCanRunActionsFast() {
            return !this._runtime.DebugBreakNext() && this._debugData.canRunAllActionsFast
        }
        DebugCanRunSubEventsFast() {
            return !this._runtime.DebugBreakNext() &&
                this._debugData.canRunAllSubEventsFast
        }
        _CheckParentsOKToRun(frame) {
            if (this.GetParent()) {
                const parents = this.GetTriggerParents();
                for (let i = 0, len = parents.length; i < len; ++i)
                    if (!parents[i].RunPreTrigger(frame)) return false
            }
            return true
        }* _DebugCheckParentsOKToRun(frame) {
            if (this.GetParent()) {
                const parents = this.GetTriggerParents();
                for (let i = 0, len = parents.length; i < len; ++i)
                    if (!(yield* parents[i].DebugRunPreTrigger(frame))) return false
            }
            return true
        }
        _EvaluateFunctionCallParameters(eventSheetManager, parameters, isRecursive) {
            if (parameters.length >
                0)
                if (isRecursive) {
                    const paramResults = parameters.map(p => p.Get(0));
                    eventSheetManager.GetLocalVarStack().Push();
                    this._scopeParent.SetFunctionParameters(paramResults)
                } else this._scopeParent.EvaluateFunctionParameters(parameters);
            else if (isRecursive) eventSheetManager.GetLocalVarStack().Push()
        }
        RunAsFunctionCall(combinedSolModifiers, parameters, isCopyPicked, pickInfo) {
            let ret;
            let asyncId;
            const hasAnySolModifiers = combinedSolModifiers.length > 0;
            let extraPopSolModifiers = null;
            const runtime = this._runtime;
            const eventStack =
                this._eventStack;
            const eventSheetManager = runtime.GetEventSheetManager();
            const triggerDepth = eventSheetManager._IncTriggerDepth();
            const isRecursive = triggerDepth > 1;
            this._EvaluateFunctionCallParameters(eventSheetManager, parameters, isRecursive);
            if (hasAnySolModifiers)
                if (isCopyPicked) eventSheetManager.PushCopySol(combinedSolModifiers);
                else eventSheetManager.PushCleanSol(combinedSolModifiers);
            if (pickInfo !== null) {
                if (pickInfo.copyFromObjectClass) {
                    const copyFromSol = isCopyPicked ? pickInfo.copyFromObjectClass.GetCurrentSol() :
                        pickInfo.copyFromObjectClass.GetSolStack().GetOneBelowCurrentSol();
                    const copyToSol = pickInfo.copyToObjectClass.GetCurrentSol();
                    copyToSol.SetArrayPicked(copyFromSol.GetInstances());
                    copyToSol.ClearElseInstances();
                    if (!isCopyPicked) pickInfo.copyToObjectClass.ApplySolToContainer()
                } else if (pickInfo.pickObjectClass) {
                    const objectClassSol = pickInfo.pickObjectClass.GetCurrentSol();
                    objectClassSol.SetArrayPicked(pickInfo.pickInstances);
                    objectClassSol.ClearElseInstances()
                }
                if (pickInfo.pushCleanSolDynamic) extraPopSolModifiers =
                    eventSheetManager.PushCleanSolDynamic(combinedSolModifiers)
            }
            const frame = eventStack.Push(this);
            if (isCopyPicked) frame.SetDynamicSolModifiers(combinedSolModifiers);
            if (this._CheckParentsOKToRun(frame)) {
                frame.SetCurrentEvent(this);
                const isAsync = this._scopeParent.IsAsync();
                if (isAsync)[asyncId, ret] = this._scopeParent.StartAsyncFunctionCall();
                this._RunAndBlock(frame);
                if (isAsync) this._scopeParent.MaybeFinishAsyncFunctionCall(asyncId)
            }
            eventStack.Pop();
            if (isRecursive) eventSheetManager.GetLocalVarStack().Pop();
            if (extraPopSolModifiers !== null) eventSheetManager.PopSol(extraPopSolModifiers);
            if (hasAnySolModifiers) eventSheetManager.PopSol(combinedSolModifiers);
            eventSheetManager._DecTriggerDepth();
            return ret
        }* DebugRunAsFunctionCall(combinedSolModifiers, parameters, isCopyPicked, pickInfo) {
            let ret;
            let asyncId;
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            const hasAnySolModifiers = combinedSolModifiers.length > 0;
            let extraPopSolModifiers = null;
            const runtime = this._runtime;
            const eventStack = this._eventStack;
            const eventSheetManager = runtime.GetEventSheetManager();
            const triggerDepth = eventSheetManager._IncTriggerDepth();
            const isRecursive = triggerDepth > 1;
            this._EvaluateFunctionCallParameters(eventSheetManager, parameters, isRecursive);
            if (hasAnySolModifiers)
                if (isCopyPicked) eventSheetManager.PushCopySol(combinedSolModifiers);
                else eventSheetManager.PushCleanSol(combinedSolModifiers);
            if (pickInfo !== null) {
                if (pickInfo.copyFromObjectClass) {
                    const copyFromSol = isCopyPicked ? pickInfo.copyFromObjectClass.GetCurrentSol() : pickInfo.copyFromObjectClass.GetSolStack().GetOneBelowCurrentSol();
                    const copyToSol = pickInfo.copyToObjectClass.GetCurrentSol();
                    copyToSol.SetArrayPicked(copyFromSol.GetInstances());
                    copyToSol.ClearElseInstances();
                    if (!isCopyPicked) pickInfo.copyToObjectClass.ApplySolToContainer()
                } else if (pickInfo.pickObjectClass) {
                    const objectClassSol = pickInfo.pickObjectClass.GetCurrentSol();
                    objectClassSol.SetArrayPicked(pickInfo.pickInstances);
                    objectClassSol.ClearElseInstances()
                }
                if (pickInfo.pushCleanSolDynamic) extraPopSolModifiers = eventSheetManager.PushCleanSolDynamic(combinedSolModifiers)
            }
            const frame =
                eventStack.Push(this);
            if (isCopyPicked) frame.SetDynamicSolModifiers(combinedSolModifiers);
            if (yield* this._DebugCheckParentsOKToRun(frame)) {
                frame.SetCurrentEvent(this);
                const isAsync = this._scopeParent.IsAsync();
                if (isAsync)[asyncId, ret] = this._scopeParent.StartAsyncFunctionCall();
                yield* this._DebugRunAndBlock(frame);
                if (isAsync) this._scopeParent.MaybeFinishAsyncFunctionCall(asyncId)
            }
            eventStack.Pop();
            if (isRecursive) eventSheetManager.GetLocalVarStack().Pop();
            if (extraPopSolModifiers !== null) eventSheetManager.PopSol(extraPopSolModifiers);
            if (hasAnySolModifiers) eventSheetManager.PopSol(combinedSolModifiers);
            eventSheetManager._DecTriggerDepth();
            return ret
        }
        RunAsMappedFunctionCall(paramResults, isCopyPicked) {
            const solModifiers = this.GetSolModifiersIncludingParents();
            const hasAnySolModifiers = solModifiers.length > 0;
            const runtime = this._runtime;
            const eventStack = this._eventStack;
            const eventSheetManager = runtime.GetEventSheetManager();
            const triggerDepth = eventSheetManager._IncTriggerDepth();
            const isRecursive = triggerDepth > 1;
            if (isRecursive) eventSheetManager.GetLocalVarStack().Push();
            this._scopeParent.SetFunctionParameters(paramResults);
            if (hasAnySolModifiers)
                if (isCopyPicked) eventSheetManager.PushCopySol(solModifiers);
                else eventSheetManager.PushCleanSol(solModifiers);
            const frame = eventStack.Push(this);
            if (this._CheckParentsOKToRun(frame)) {
                frame.SetCurrentEvent(this);
                this._RunAndBlock(frame)
            }
            eventStack.Pop();
            if (isRecursive) eventSheetManager.GetLocalVarStack().Pop();
            if (hasAnySolModifiers) eventSheetManager.PopSol(solModifiers);
            eventSheetManager._DecTriggerDepth()
        }* DebugRunAsMappedFunctionCall(paramResults,
            isCopyPicked) {
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            const solModifiers = this.GetSolModifiersIncludingParents();
            const hasAnySolModifiers = solModifiers.length > 0;
            const runtime = this._runtime;
            const eventStack = this._eventStack;
            const eventSheetManager = runtime.GetEventSheetManager();
            const triggerDepth = eventSheetManager._IncTriggerDepth();
            const isRecursive = triggerDepth > 1;
            if (isRecursive) eventSheetManager.GetLocalVarStack().Push();
            this._scopeParent.SetFunctionParameters(paramResults);
            if (hasAnySolModifiers)
                if (isCopyPicked) eventSheetManager.PushCopySol(solModifiers);
                else eventSheetManager.PushCleanSol(solModifiers);
            const frame = eventStack.Push(this);
            if (yield* this._DebugCheckParentsOKToRun(frame)) {
                frame.SetCurrentEvent(this);
                yield* this._DebugRunAndBlock(frame)
            }
            eventStack.Pop();
            if (isRecursive) eventSheetManager.GetLocalVarStack().Pop();
            if (hasAnySolModifiers) eventSheetManager.PopSol(solModifiers);
            eventSheetManager._DecTriggerDepth()
        }
        RunAsExpressionFunctionCall(combinedSolModifiers, isCopyPicked,
            returnType, defaultReturnValue, ...paramResults) {
            let ret;
            let asyncId;
            const hasAnySolModifiers = combinedSolModifiers.length > 0;
            const runtime = this._runtime;
            const eventStack = this._eventStack;
            const eventSheetManager = runtime.GetEventSheetManager();
            const triggerDepth = eventSheetManager._IncTriggerDepth();
            const isRecursive = triggerDepth > 1;
            if (isRecursive) eventSheetManager.GetLocalVarStack().Push();
            if (paramResults.length > 0) this._scopeParent.SetFunctionParameters(paramResults);
            if (hasAnySolModifiers)
                if (isCopyPicked) eventSheetManager.PushCopySol(combinedSolModifiers);
                else eventSheetManager.PushCleanSol(combinedSolModifiers);
            const frame = eventStack.Push(this);
            frame.InitCallFunctionExpression(returnType, defaultReturnValue);
            eventStack.PushExpFunc(frame);
            runtime.SetDebuggingEnabled(false);
            if (this._CheckParentsOKToRun(frame)) {
                frame.SetCurrentEvent(this);
                const isAsync = this._scopeParent.IsAsync();
                if (isAsync)[asyncId, ret] = this._scopeParent.StartAsyncFunctionCall();
                this._RunAndBlock(frame);
                if (isAsync) this._scopeParent.MaybeFinishAsyncFunctionCall(asyncId)
            }
            runtime.SetDebuggingEnabled(true);
            eventStack.Pop();
            eventStack.PopExpFunc();
            if (isRecursive) eventSheetManager.GetLocalVarStack().Pop();
            if (hasAnySolModifiers) eventSheetManager.PopSol(combinedSolModifiers);
            eventSheetManager._DecTriggerDepth();
            return ret || frame.GetFunctionReturnValue()
        }
    };

}

// events/eventScript.js
{
    'use strict';
    const C3 = self.C3;
    const EMPTY_SOL_MODIFIERS = [];
    let hadUserScriptException = false;
    C3.EventScript = class EventScript extends C3.DefendedBase {
        constructor(eventSheet, parent, data) {
            super();
            const runtime = eventSheet.GetRuntime();
            const eventSheetManager = eventSheet.GetEventSheetManager();
            this._eventSheet = eventSheet;
            this._eventSheetManager = eventSheetManager;
            this._runtime = eventSheet.GetRuntime();
            this._parent = parent;
            const userMethod = runtime.GetObjectReference(data[1]);
            this._func = userMethod;
            this._displayNumber = data[2];
            this._eventSheet._RegisterEventByDisplayNumber(this, this._displayNumber);
            this._debugData = runtime.IsDebug() ? {
                isBreakpoint: data[3][0],
                isBreakable: data[3][1]
            } : null
        }
        static Create(eventSheet, parent, data) {
            return C3.New(C3.EventScript, eventSheet, parent, data)
        }
        _PostInit() {
            const userMethod = this._func;
            const localVars = this._runtime.GetEventSheetManager()._GetLocalVariablesScriptInterface(this);
            this._func = userMethod.bind(null, this._runtime.GetIRuntime(), localVars)
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this._parent
        }
        GetEventSheet() {
            return this._eventSheet
        }
        GetDisplayNumber() {
            return this._displayNumber
        }
        IsDebugBreakable() {
            return this._debugData &&
                this._debugData.isBreakable
        }
        IsDebugBreakpoint() {
            return this.IsDebugBreakable() && this._debugData.isBreakpoint
        }
        _SetDebugBreakpoint(b) {
            this._debugData.isBreakpoint = !!b
        }
        IsElseBlock() {
            return false
        }
        GetSolModifiers() {
            return EMPTY_SOL_MODIFIERS
        }
        GetSolModifiersIncludingParents() {
            if (this._parent) return this._parent.GetSolModifiersIncludingParents();
            else return EMPTY_SOL_MODIFIERS
        }
        Run(frame) {
            frame.SetCurrentEvent(this);
            this._eventSheetManager.AddAsyncActionPromise(this._RunUserScript())
        }
        async _RunUserScript() {
            try {
                await this._func()
            } catch (err) {
                console.error(`Unhandled exception running script %c${this.GetEventSheet().GetName()}, event ${this.GetDisplayNumber()}:`,
                    "font-size: 1.2em; font-weight: bold;", err);
                if (self.C3Debugger) self.C3Debugger._SetLastErrorScript(this);
                if (!hadUserScriptException) {
                    console.info(`%cTip:%c run this to highlight in Construct the last script that had an error: %cgoToLastErrorScript()`, "font-weight: bold; text-decoration: underline", "", "font-weight: bold");
                    hadUserScriptException = true
                }
            }
        }* DebugRun(frame) {
            frame.SetCurrentEvent(this);
            if (this.IsDebugBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            this.Run(frame)
        }
        DebugCanRunFast() {
            return !this.IsDebugBreakpoint() &&
                !this._runtime.DebugBreakNext()
        }
        static HadUserScriptException() {
            return hadUserScriptException
        }
        static SetHadUserScriptException() {
            hadUserScriptException = true
        }
    };

}

// events/functionBlock.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;
    C3.FunctionBlock = class FunctionBlock extends C3.DefendedBase {
        constructor(eventSheet, parent, data) {
            super();
            this._eventSheet = eventSheet;
            this._runtime = eventSheet.GetRuntime();
            this._parent = parent;
            this._functionType = 0;
            this._functionName = "";
            this._returnType = 0;
            this._functionParameters = [];
            this._isEnabled = true;
            this._aceName = "";
            this._objectClass = null;
            this._hasOverrides = false;
            this._innerLocalVariables = [];
            this._isCopyPicked = false;
            this._isAsync = false;
            this._nextAsyncId = 0;
            this._currentAsyncId = -1;
            this._asyncMap = new Map;
            this._eventBlock = C3.EventBlock.Create(eventSheet, parent, data);
            this._eventBlock._SetScopeParent(this)
        }
        InitFunctionBlock(funcData) {
            this._functionType = 0;
            this._functionName = funcData[0];
            this._returnType = funcData[1];
            this._functionParameters = funcData[2].map(paramData => C3.EventVariable.Create(this._eventSheet, this, paramData));
            this._isEnabled = funcData[3];
            this._isAsync = funcData[4];
            this._isCopyPicked = funcData[5]
        }
        InitCustomACEBlock(funcData) {
            this._functionType = 1;
            this._aceName = funcData[1];
            this._objectClass = this._runtime.GetObjectClassByIndex(funcData[2]);
            this._eventBlock._AddSolModifier(this._objectClass);
            this._functionName = this._objectClass.GetName() + "." + this._aceName;
            this._returnType = funcData[3];
            this._functionParameters = funcData[4].map(paramData => C3.EventVariable.Create(this._eventSheet, this, paramData));
            this._isEnabled = funcData[5];
            this._isAsync = funcData[6];
            this._isCopyPicked = funcData[7];
            this._objectClass.AddCustomAction(this)
        }
        static CreateFunctionBlock(eventSheet, parent, data) {
            const ret = C3.New(C3.FunctionBlock, eventSheet, parent, data);
            const funcData =
                data[1];
            ret.InitFunctionBlock(funcData);
            return ret
        }
        static CreateCustomACEBlock(eventSheet, parent, data) {
            const ret = C3.New(C3.FunctionBlock, eventSheet, parent, data);
            const funcData = data[1];
            ret.InitCustomACEBlock(funcData);
            return ret
        }
        _CheckOverrideState() {
            if (this._objectClass && this._objectClass.IsFamily())
                for (const objectType of this._objectClass.GetFamilyMembers())
                    if (objectType.HasOwnCustomActionByName(this._aceName)) {
                        this._hasOverrides = true;
                        break
                    }
        }
        _PostInit() {
            for (const fp of this._functionParameters) fp._PostInit();
            this._eventBlock._PostInit(false)
        }
        GetFunctionType() {
            return this._functionType
        }
        _GetAllLocalVariablesInScope() {
            return this._functionParameters
        }
        GetFunctionParameters() {
            return this._functionParameters
        }
        GetFunctionParameterCount() {
            return this._functionParameters.length
        }
        _RegisterLocalVariable(localVariable) {
            this._innerLocalVariables.push(localVariable)
        }
        _GetAllInnerLocalVariables() {
            return this._innerLocalVariables
        }
        EvaluateFunctionParameters(parameters) {
            const functionParameters = this._functionParameters;
            for (let i =
                    0, len = functionParameters.length; i < len; ++i) functionParameters[i].SetValue(parameters[i].Get(0))
        }
        SetFunctionParameters(paramResults) {
            const functionParameters = this._functionParameters;
            for (let i = 0, len = functionParameters.length; i < len; ++i) functionParameters[i].SetValue(paramResults[i])
        }
        CaptureFunctionParameters() {
            return this._functionParameters.map(p => p.GetValue())
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this._parent
        }
        GetFunctionName() {
            return this._functionName
        }
        GetACEName() {
            return this._aceName
        }
        HasCustomACEOverrides() {
            return this._hasOverrides
        }
        GetReturnType() {
            return this._returnType
        }
        GetObjectClass() {
            return this._objectClass
        }
        IsEnabled() {
            return this._isEnabled
        }
        GetDefaultReturnValue() {
            switch (this._returnType) {
                case 0:
                    return null;
                case 2:
                    return "";
                default:
                    return 0
            }
        }
        GetEventBlock() {
            return this._eventBlock
        }
        IsCopyPicked() {
            return this._isCopyPicked
        }
        IsAsync() {
            return this._isAsync
        }
        StartAsyncFunctionCall() {
            const asyncId = this._nextAsyncId++;
            this._currentAsyncId = asyncId;
            let resolve;
            const promise = new Promise(r => resolve = r);
            this._asyncMap.set(asyncId, {
                resolve,
                pauseCount: 0
            });
            return [asyncId, promise]
        }
        MaybeFinishAsyncFunctionCall(asyncId) {
            const info = this._asyncMap.get(asyncId);
            if (info.pauseCount === 0) {
                info.resolve();
                this._asyncMap.delete(asyncId)
            }
            this._currentAsyncId = -1
        }
        PauseCurrentAsyncFunction() {
            const info = this._asyncMap.get(this._currentAsyncId);
            info.pauseCount++;
            return this._currentAsyncId
        }
        ResumeAsyncFunction(asyncId) {
            this._currentAsyncId = asyncId;
            const info = this._asyncMap.get(asyncId);
            info.pauseCount--
        }
        RunAsFamilyCustomActionWithOverrides(combinedSolModifiers, parameters) {
            const objectTypeMap = new Map;
            const familyInstances = [];
            for (const inst of this._objectClass.GetCurrentSol().GetInstances()) {
                const objectType = inst.GetObjectClass();
                if (objectType.HasOwnCustomActionByName(this._aceName)) {
                    const arr =
                        objectTypeMap.get(objectType);
                    if (Array.isArray(arr)) arr.push(inst);
                    else objectTypeMap.set(objectType, [inst])
                } else familyInstances.push(inst)
            }
            if (familyInstances.length > 0) this._eventBlock.RunAsFunctionCall(combinedSolModifiers, parameters, this._isCopyPicked, {
                pickObjectClass: this._objectClass,
                pickInstances: familyInstances
            });
            if (objectTypeMap.size > 0)
                for (const [objectType, arr] of objectTypeMap) {
                    const eventBlock = objectType.GetOwnCustomActionByName(this._aceName).GetEventBlock();
                    const allCombinedSolModifiers = [...(new Set([...combinedSolModifiers, ...eventBlock.GetSolModifiers()]))];
                    eventBlock.RunAsFunctionCall(allCombinedSolModifiers, parameters, this._isCopyPicked, {
                        pickObjectClass: objectType,
                        pickInstances: arr
                    })
                }
        }* DebugRunAsFamilyCustomActionWithOverrides(combinedSolModifiers, parameters) {
            const objectTypeMap = new Map;
            const familyInstances = [];
            for (const inst of this._objectClass.GetCurrentSol().GetInstances()) {
                const objectType = inst.GetObjectClass();
                if (objectType.HasOwnCustomActionByName(this._aceName)) {
                    const arr =
                        objectTypeMap.get(objectType);
                    if (Array.isArray(arr)) arr.push(inst);
                    else objectTypeMap.set(objectType, [inst])
                } else familyInstances.push(inst)
            }
            if (familyInstances.length > 0) yield* this._eventBlock.DebugRunAsFunctionCall(combinedSolModifiers, parameters, this._isCopyPicked, {
                pickObjectClass: this._objectClass,
                pickInstances: familyInstances
            });
            if (objectTypeMap.size > 0)
                for (const [objectType, arr] of objectTypeMap) {
                    const eventBlock = objectType.GetOwnCustomActionByName(this._aceName).GetEventBlock();
                    const allCombinedSolModifiers = [...(new Set([...combinedSolModifiers, ...eventBlock.GetSolModifiers()]))];
                    yield* eventBlock.DebugRunAsFunctionCall(allCombinedSolModifiers, parameters, this._isCopyPicked, {
                        pickObjectClass: objectType,
                        pickInstances: arr
                    })
                }
        }
    };

}

// events/eventVariable.js
{
    'use strict';
    const C3 = self.C3;
    const EMPTY_SOL_MODIFIERS = [];
    C3.EventVariable = class EventVariable extends C3.DefendedBase {
        constructor(eventSheet, parent, data) {
            super();
            const eventSheetManager = eventSheet.GetEventSheetManager();
            this._eventSheet = eventSheet;
            this._eventSheetManager = eventSheetManager;
            this._runtime = eventSheet.GetRuntime();
            this._parent = parent;
            this._localVarStack = eventSheetManager.GetLocalVarStack();
            this._name = data[1];
            this._type = data[2];
            this._initialValue = data[3];
            this._isStatic = !!data[4];
            this._isConstant = !!data[5];
            this._isFunctionParameter = parent instanceof
            C3.FunctionBlock;
            this._sid = data[6];
            this._jsPropName = this._runtime.GetJsPropName(data[8]);
            this._scriptSetter = v => this.SetValue(v);
            this._scriptGetter = () => this.GetValue();
            this._hasSingleValue = !this._parent || this._isStatic || this._isConstant;
            this._value = this._initialValue;
            this._localIndex = -1;
            if (this.IsBoolean()) this._value = this._value ? 1 : 0;
            if (this.IsLocal() && !this.IsStatic() && !this.IsConstant()) this._localIndex = eventSheetManager._GetNextLocalVarIndex(this);
            eventSheetManager._RegisterEventVariable(this)
        }
        static Create(eventSheet,
            parent, data) {
            return C3.New(C3.EventVariable, eventSheet, parent, data)
        }
        _PostInit() {
            if (this.IsLocal() && !this.IsStatic() && !this.IsConstant() && !this.IsFunctionParameter()) {
                const functionBlock = this._eventSheetManager.FindFirstFunctionBlockParent(this);
                if (functionBlock) functionBlock._RegisterLocalVariable(this)
            }
        }
        GetName() {
            return this._name
        }
        GetJsPropName() {
            return this._jsPropName
        }
        GetParent() {
            return this._parent
        }
        GetScopeParent() {
            return this.GetParent()
        }
        IsGlobal() {
            return !this.GetParent()
        }
        IsLocal() {
            return !this.IsGlobal()
        }
        IsFunctionParameter() {
            return this._isFunctionParameter
        }
        IsStatic() {
            return this._isStatic
        }
        IsConstant() {
            return this._isConstant
        }
        IsNumber() {
            return this._type ===
                0
        }
        IsString() {
            return this._type === 1
        }
        IsBoolean() {
            return this._type === 2
        }
        IsElseBlock() {
            return false
        }
        GetSID() {
            return this._sid
        }
        GetInitialValue() {
            return this._initialValue
        }
        GetSolModifiers() {
            return EMPTY_SOL_MODIFIERS
        }
        Run(frame) {
            if (this.IsLocal() && !this.IsStatic() && !this.IsConstant()) this.SetValue(this.GetInitialValue())
        }
        DebugCanRunFast() {
            return true
        }* DebugRun(frame) {
            this.Run(frame)
        }
        SetValue(v) {
            if (this.IsNumber()) {
                if (typeof v !== "number") v = parseFloat(v)
            } else if (this.IsString()) {
                if (typeof v !== "string") v = v.toString()
            } else if (this.IsBoolean()) v =
                v ? 1 : 0;
            if (this._hasSingleValue) this._value = v;
            else this._localVarStack.GetCurrent()[this._localIndex] = v
        }
        GetValue() {
            return this._hasSingleValue ? this._value : this._localVarStack.GetCurrent()[this._localIndex]
        }
        GetTypedValue() {
            let ret = this.GetValue();
            if (this.IsBoolean()) ret = !!ret;
            return ret
        }
        ResetToInitialValue() {
            this._value = this._initialValue
        }
        _GetScriptInterfaceDescriptor() {
            return {
                configurable: false,
                enumerable: true,
                get: this._scriptGetter,
                set: this._scriptSetter
            }
        }
    };

}

// events/eventInclude.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;
    const EMPTY_SOL_MODIFIERS = [];
    C3.EventInclude = class EventInclude extends C3.DefendedBase {
        constructor(eventSheet, parent, data) {
            super();
            const eventSheetManager = eventSheet.GetEventSheetManager();
            this._eventSheet = eventSheet;
            this._eventSheetManager = eventSheetManager;
            this._runtime = eventSheet.GetRuntime();
            this._parent = parent;
            this._includeSheet = null;
            this._includeSheetName = data[1];
            this._isActive = true
        }
        static Create(eventSheet, parent, data) {
            return C3.New(C3.EventInclude, eventSheet, parent, data)
        }
        _PostInit() {
            this._includeSheet = this._eventSheetManager.GetEventSheetByName(this._includeSheetName);
            this._eventSheet._AddShallowInclude(this);
            let p = this.GetParent();
            while (p) {
                if (p instanceof C3.EventBlock && p.IsGroup()) p._AddContainedInclude(this);
                p = p.GetParent()
            }
            this.UpdateActive();
            if (this._runtime.IsDebug()) this._eventSheet._GetPerfRecord().children.push(this._includeSheet._GetPerfRecord())
        }
        GetParent() {
            return this._parent
        }
        GetSolModifiers() {
            return EMPTY_SOL_MODIFIERS
        }
        GetIncludeSheet() {
            return this._includeSheet
        }
        Run(frame) {
            const pushSol = !!this.GetParent();
            const allObjectClasses = this._runtime.GetAllObjectClasses();
            if (pushSol) this._eventSheetManager.PushCleanSol(allObjectClasses);
            this._includeSheet.Run();
            if (pushSol) this._eventSheetManager.PopSol(allObjectClasses)
        }* DebugRun(frame) {
            const pushSol = !!this.GetParent();
            const allObjectClasses = this._runtime.GetAllObjectClasses();
            if (pushSol) this._eventSheetManager.PushCleanSol(allObjectClasses);
            yield* this._includeSheet.DebugRun();
            if (pushSol) this._eventSheetManager.PopSol(allObjectClasses)
        }
        DebugCanRunFast() {
            return false
        }
        IsActive() {
            return this._isActive
        }
        UpdateActive() {
            let p =
                this.GetParent();
            while (p) {
                if (p instanceof C3.EventBlock && p.IsGroup() && !p.IsGroupActive()) {
                    this._isActive = false;
                    return
                }
                p = p.GetParent()
            }
            this._isActive = true
        }
    };

}

// events/expNode.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;
    C3.ExpNode = class ExpNode extends C3.DefendedBase {
        constructor(owner) {
            super();
            this._owner = owner;
            this._runtime = owner.GetRuntime()
        }
        _PostInit() {}
        static CreateNode(owner, data) {
            const type = data[0];
            const Classes = [BehaviorExpressionNode, ObjectExpressionNode, InstVarExpressionNode, EventVarExpNode, SystemExpressionExpNode, CallFunctionExpressionExpNode];
            return C3.New(Classes[type], owner, data)
        }
    };
    class SystemExpressionExpNode extends C3.ExpNode {
        constructor(owner, data) {
            super(owner);
            this._systemPlugin = this._runtime.GetSystemPlugin();
            this._func = this._runtime.GetObjectReference(data[1]);
            if (this._func === C3.Plugins.System.Exps.random || this._func === C3.Plugins.System.Exps.choose) this._owner.SetVariesPerInstance()
        }
        GetBoundMethod() {
            return this._systemPlugin._GetBoundACEMethod(this._func, this._systemPlugin)
        }
    }
    class CallFunctionExpressionExpNode extends C3.ExpNode {
        constructor(owner, data) {
            super(owner);
            this._functionBlock = null;
            this._functionName = data[1];
            this._owner.SetVariesPerInstance()
        }
        _PostInit() {
            const eventSheetManager = this._runtime.GetEventSheetManager();
            this._functionBlock = eventSheetManager.GetFunctionBlockByName(this._functionName);
            this._functionName = null;
            const myEventBlock = this._owner.GetEventBlock();
            const callEventBlock = this._functionBlock.GetEventBlock();
            this._combinedSolModifiers = [...(new Set([...myEventBlock.GetSolModifiersIncludingParents(),
                ...callEventBlock.GetSolModifiersIncludingParents()
            ]))];
            this._combinedSolModifiers = eventSheetManager._DeduplicateSolModifierList(this._combinedSolModifiers)
        }
        GetBoundMethod() {
            const functionBlock = this._functionBlock;
            if (functionBlock.IsEnabled()) {
                const callEventBlock = functionBlock.GetEventBlock();
                return C3.EventBlock.prototype.RunAsExpressionFunctionCall.bind(callEventBlock, this._combinedSolModifiers, functionBlock.IsCopyPicked(), functionBlock.GetReturnType(), functionBlock.GetDefaultReturnValue())
            } else {
                const defaultReturnValue =
                    functionBlock.GetDefaultReturnValue();
                return () => defaultReturnValue
            }
        }
    }

    function WrapIndex(index, len) {
        if (index >= len) return index % len;
        else if (index < 0) {
            if (index <= -len) index %= len;
            if (index < 0) index += len;
            return index
        } else return index
    }
    class ObjectExpressionNode extends C3.ExpNode {
        constructor(owner, data) {
            super(owner);
            this._objectClass = this._runtime.GetObjectClassByIndex(data[1]);
            this._func = this._runtime.GetObjectReference(data[2]);
            this._returnsString = !!data[3];
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._owner._MaybeVaryFor(this._objectClass)
        }
        GetBoundMethod() {
            return this._objectClass.GetPlugin()._GetBoundACEMethod(this._func, this._objectClass.GetSingleGlobalInstance().GetSdkInstance())
        }
        ExpObject(...args) {
            const objectClass =
                this._objectClass;
            const instances = objectClass.GetCurrentSol().GetExpressionInstances();
            const len = instances.length;
            if (len === 0) return this._returnsString ? "" : 0;
            const index = WrapIndex(this._owner.GetSolIndex(), len);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(objectClass);
            return this._func.apply(instances[index].GetSdkInstance(), args)
        }
        ExpObject_InstExpr(instIndex, ...args) {
            const objectClass = this._objectClass;
            const instances = objectClass.GetInstances();
            const len = instances.length;
            if (len ===
                0) return this._returnsString ? "" : 0;
            const index = WrapIndex(instIndex, len);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(objectClass);
            return this._func.apply(instances[index].GetSdkInstance(), args)
        }
    }
    class InstVarExpressionNode extends C3.ExpNode {
        constructor(owner, data) {
            super(owner);
            this._objectClass = this._runtime.GetObjectClassByIndex(data[1]);
            this._varIndex = data[3];
            this._returnsString = !!data[2];
            this._owner._MaybeVaryFor(this._objectClass)
        }
        ExpInstVar() {
            const instances = this._objectClass.GetCurrentSol().GetExpressionInstances();
            const len = instances.length;
            if (len === 0) return this._returnsString ? "" : 0;
            const index = WrapIndex(this._owner.GetSolIndex(), len);
            return instances[index]._GetInstanceVariableValueUnchecked(this._varIndex)
        }
        ExpInstVar_Family() {
            const objectClass =
                this._objectClass;
            const instances = objectClass.GetCurrentSol().GetExpressionInstances();
            const len = instances.length;
            if (len === 0) return this._returnsString ? "" : 0;
            const index = WrapIndex(this._owner.GetSolIndex(), len);
            const inst = instances[index];
            const offset = inst.GetObjectClass().GetFamilyInstanceVariableOffset(objectClass.GetFamilyIndex());
            return inst._GetInstanceVariableValueUnchecked(this._varIndex + offset)
        }
        ExpInstVar_InstExpr(instIndex) {
            const objectClass = this._objectClass;
            const instances = objectClass.GetInstances();
            const len = instances.length;
            if (len === 0) return this._returnsString ? "" : 0;
            const index = WrapIndex(instIndex, len);
            const inst = instances[index];
            let offset = 0;
            if (objectClass.IsFamily()) offset = inst.GetObjectClass().GetFamilyInstanceVariableOffset(objectClass.GetFamilyIndex());
            return inst._GetInstanceVariableValueUnchecked(this._varIndex + offset)
        }
    }
    class BehaviorExpressionNode extends C3.ExpNode {
        constructor(owner, data) {
            super(owner);
            this._objectClass = this._runtime.GetObjectClassByIndex(data[1]);
            this._behaviorType = this._objectClass.GetBehaviorTypeByName(data[2]);
            this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(data[2]);
            this._func = this._runtime.GetObjectReference(data[3]);
            this._returnsString = !!data[4];
            this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
            this._owner._MaybeVaryFor(this._objectClass)
        }
        ExpBehavior(...args) {
            const objectClass =
                this._objectClass;
            const instances = objectClass.GetCurrentSol().GetExpressionInstances();
            const len = instances.length;
            if (len === 0) return this._returnsString ? "" : 0;
            const index = WrapIndex(this._owner.GetSolIndex(), len);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(objectClass);
            const inst = instances[index];
            let offset = 0;
            if (objectClass.IsFamily()) offset = inst.GetObjectClass().GetFamilyBehaviorOffset(objectClass.GetFamilyIndex());
            return this._func.apply(inst.GetBehaviorInstances()[this._behaviorIndex +
                offset].GetSdkInstance(), args)
        }
        ExpBehavior_InstExpr(instIndex, ...args) {
            const objectClass = this._objectClass;
            const instances = objectClass.GetInstances();
            const len = instances.length;
            if (len === 0) return this._returnsString ? "" : 0;
            const index = WrapIndex(instIndex, len);
            this._eventStack.GetCurrentStackFrame().SetExpressionObjectClass(objectClass);
            const inst = instances[index];
            let offset = 0;
            if (objectClass.IsFamily()) offset = inst.GetObjectClass().GetFamilyBehaviorOffset(objectClass.GetFamilyIndex());
            return this._func.apply(inst.GetBehaviorInstances()[this._behaviorIndex +
                offset].GetSdkInstance(), args)
        }
    }
    class EventVarExpNode extends C3.ExpNode {
        constructor(owner, data) {
            super(owner);
            this._eventVar = null;
            this._eventVarSid = data[1]
        }
        _PostInit() {
            this._eventVar = this._runtime.GetEventSheetManager().GetEventVariableBySID(this._eventVarSid)
        }
        GetVar() {
            return this._eventVar
        }
    };

}

// events/parameter.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;
    C3.Parameter = class Parameter extends C3.DefendedBase {
        constructor(owner, type, index) {
            super();
            this._owner = owner;
            this._index = index;
            this._type = type;
            this.Get = null;
            this._variesPerInstance = false;
            this._isConstant = false
        }
        static Create(owner, data, index) {
            const type = data[0];
            const Classes = [ExpressionParameter, StringExpressionParameter, FileParameter, ComboParameter, ObjectParameter, LayerExpressionParameter, LayoutParameter, ExpressionParameter, ComboParameter, ComboParameter, InstVarParameter, EventVarParameter, FileParameter,
                VariadicParameter, StringExpressionParameter, TimelineParameter, BooleanParameter, FunctionParameter, EaseParameter, TilemapBrushParameter, TemplateExpressionParameter
            ];
            return C3.New(Classes[type], owner, type, index, data)
        }
        _PostInit() {}
        SetVariesPerInstance() {
            this._variesPerInstance = true
        }
        _MaybeVaryFor(objectClass) {
            if (this._variesPerInstance) return;
            if (!objectClass) return;
            if (!objectClass.GetPlugin().IsSingleGlobal()) this._variesPerInstance = true
        }
        VariesPerInstance() {
            return this._variesPerInstance
        }
        GetIndex() {
            return this._index
        }
        GetRuntime() {
            return this._owner.GetRuntime()
        }
        GetEventBlock() {
            return this._owner.GetEventBlock()
        }
        IsConstant() {
            return this._isConstant
        }
        IsObjectParameter() {
            return this._type ===
                4
        }
    };

    function GetExpressionFunc(number) {
        const ret = self.C3_ExpressionFuncs[number];
        if (!ret) throw new Error("invalid expression number");
        return ret
    }
    class ExpressionParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._solIndex = 0;
            const expData = data[1];
            this._expressionNumber = expData[0];
            this._numberedNodes = [];
            this._expressionFunc = null;
            for (let i = 1, len = expData.length; i < len; ++i) this._numberedNodes.push(C3.ExpNode.CreateNode(this, expData[i]));
            if (this._numberedNodes.length) this.Get = this.GetExpression;
            else {
                this.Get = GetExpressionFunc(this._expressionNumber);
                this._isConstant = true
            }
        }
        _GetNode(i) {
            if (i < 0 || i >= this._numberedNodes.length) throw new RangeError("invalid numbered node");
            return this._numberedNodes[i]
        }
        _PostInit() {
            for (const node of this._numberedNodes) node._PostInit();
            const func = GetExpressionFunc(this._expressionNumber);
            if (this._numberedNodes.length) this._expressionFunc = func(this);
            else this._expressionFunc = func
        }
        GetSolIndex() {
            return this._solIndex
        }
        GetExpression(solIndex) {
            this._solIndex = solIndex;
            return this._expressionFunc()
        }
    }
    class StringExpressionParameter extends ExpressionParameter {
        constructor(owner, type, index, data) {
            super(owner, type, index, data);
            this.Get = this.GetStringExpression;
            if (type === 14) {
                this.GetEventBlock().SetAllSolModifiers();
                if (this._owner instanceof C3.Action) this.GetEventBlock().SetSolWriterAfterCnds()
            }
        }
        GetStringExpression(solIndex) {
            this._solIndex = solIndex;
            const ret = this._expressionFunc();
            if (typeof ret === "string") return ret;
            else return ""
        }
        _GetFastTriggerValue() {
            return GetExpressionFunc(this._expressionNumber)()
        }
    }
    class LayerExpressionParameter extends ExpressionParameter {
        constructor(owner, type, index, data) {
            super(owner, type, index, data);
            this.Get = this.GetLayer;
            this._isConstant = false
        }
        GetLayer(solIndex) {
            this._solIndex = solIndex;
            const ret = this._expressionFunc();
            const layout = this.GetRuntime().GetCurrentLayout();
            return layout.GetLayer(ret)
        }
    }
    class ComboParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._combo = data[1];
            this.Get = this.GetCombo;
            this._isConstant = true
        }
        GetCombo() {
            return this._combo
        }
    }
    class BooleanParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._bool = data[1];
            this.Get = this.GetBoolean;
            this._isConstant = true
        }
        GetBoolean() {
            return this._bool
        }
    }
    class ObjectParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._objectClass = this.GetRuntime().GetObjectClassByIndex(data[1]);
            this.Get = this.GetObjectClass;
            const eventBlock = this.GetEventBlock();
            eventBlock._AddSolModifier(this._objectClass);
            if (this._owner instanceof C3.Action) eventBlock.SetSolWriterAfterCnds();
            else if (eventBlock.GetParent()) eventBlock.GetParent().SetSolWriterAfterCnds();
            this._isConstant = true
        }
        GetObjectClass() {
            return this._objectClass
        }
    }
    class LayoutParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._layout = this.GetRuntime().GetLayoutManager().GetLayoutByName(data[1]);
            this.Get = this.GetLayout;
            this._isConstant = true
        }
        GetLayout() {
            return this._layout
        }
    }
    class TimelineParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._timeline = this.GetRuntime().GetTimelineManager().GetTimelineByName(data[1]);
            this.Get = this.GetTimeline;
            this._isConstant = true
        }
        GetTimeline() {
            return this._timeline
        }
    }
    class FileParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._fileInfo = data[1];
            this.Get = this.GetFile;
            this._isConstant = true
        }
        GetFile() {
            return this._fileInfo
        }
    }
    class InstVarParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._instVarIndex = data[1];
            const ownerObjectClass = this._owner.GetObjectClass();
            if (this._owner instanceof C3.Condition && this._owner.IsStatic()) {
                this.Get = this.GetInstanceVariable;
                this._isConstant = true
            } else if (ownerObjectClass && ownerObjectClass.IsFamily()) {
                this.Get = this.GetFamilyInstanceVariable;
                this.SetVariesPerInstance()
            } else {
                this.Get = this.GetInstanceVariable;
                this._isConstant = true
            }
        }
        GetInstanceVariable() {
            return this._instVarIndex
        }
        GetFamilyInstanceVariable(solIndex) {
            solIndex =
                solIndex || 0;
            const familyType = this._owner.GetObjectClass();
            const sol = familyType.GetCurrentSol();
            const instances = sol.GetInstances();
            let realType = null;
            if (instances.length) realType = instances[solIndex % instances.length].GetObjectClass();
            else if (sol.HasAnyElseInstances()) {
                const elseInstances = sol.GetElseInstances();
                realType = elseInstances[solIndex % elseInstances.length].GetObjectClass()
            } else if (familyType.GetInstanceCount() > 0) {
                const familyInstances = familyType.GetInstances();
                realType = familyInstances[solIndex %
                    familyInstances.length].GetObjectClass()
            } else return 0;
            return this._instVarIndex + realType.GetFamilyInstanceVariableOffset(familyType.GetFamilyIndex())
        }
    }
    class EventVarParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._eventVarSid = data[1];
            this._eventVar = null;
            this.Get = this.GetEventVariable;
            this._isConstant = true
        }
        _PostInit() {
            this._eventVar = this.GetRuntime().GetEventSheetManager().GetEventVariableBySID(this._eventVarSid)
        }
        GetEventVariable() {
            return this._eventVar
        }
    }
    class FunctionParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._functionBlockName = data[1];
            this._functionBlock = null;
            this.Get = this.GetFunction;
            this._isConstant = true
        }
        _PostInit() {
            this._functionBlock = this.GetRuntime().GetEventSheetManager().GetFunctionBlockByName(this._functionBlockName);
            this._functionBlockName = null
        }
        GetFunction() {
            return this._functionBlock
        }
    }
    class VariadicParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._subParams = [];
            this._variadicRet = [];
            this._isConstant = true;
            for (let i = 1, len = data.length; i < len; ++i) {
                const subParam = C3.Parameter.Create(this._owner, data[i], 0);
                this._subParams.push(subParam);
                this._variadicRet.push(0);
                if (!subParam.IsConstant()) this._isConstant = false
            }
            this.Get = this.GetVariadic
        }
        _PostInit() {
            for (const subParam of this._subParams) subParam._PostInit()
        }
        GetVariadic() {
            const subParams = this._subParams;
            const variadicRet = this._variadicRet;
            for (let i = 0, len = subParams.length; i < len; ++i) variadicRet[i] = subParams[i].Get(0);
            return variadicRet
        }
    }
    class EaseParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._easeIndex = data[1];
            this.Get = this.GetEase;
            this._isConstant = true
        }
        GetEase() {
            return this._easeIndex
        }
    }
    class TilemapBrushParameter extends C3.Parameter {
        constructor(owner, type, index, data) {
            super(owner, type, index);
            this._brushIndex = data[1];
            this.Get = this.GetTilemapBrush;
            this._isConstant = true
        }
        GetTilemapBrush() {
            return this._brushIndex
        }
    }
    class TemplateExpressionParameter extends ExpressionParameter {
        constructor(owner, type, index, data) {
            super(owner, type, index, data);
            this.Get = this.GetTemplateName;
            this._isConstant = false
        }
        GetTemplateName() {
            return this._expressionFunc()
        }
    };

}

// events/condition.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;

    function EvalParams(parameters, results) {
        for (let i = 0, len = parameters.length; i < len; ++i) results[i] = parameters[i].Get(0)
    }
    const EMPTY_PARAMS_ARRAY = [];
    const noop = function() {};
    C3.Condition = class Condition extends C3.DefendedBase {
        constructor(eventBlock, data, index) {
            super();
            this._eventBlock = eventBlock;
            this._runtime = eventBlock.GetRuntime();
            this._index = index;
            this._func = this._runtime.GetObjectReference(data[1]);
            this._isTrigger = data[3] > 0;
            this._isFastTrigger = data[3] === 2;
            this._isLooping = !!data[4];
            this._isInverted = !!data[5];
            this._isStatic = !!data[6];
            this._sid = data[7];
            this._isInOrBlock = this._eventBlock.IsOrBlock();
            this._objectClass = null;
            this._behaviorType = null;
            this._behaviorIndex = -1;
            this._systemPlugin = null;
            this.Run = noop;
            this.DebugRun = noop;
            this._parameters = [];
            this._results = [];
            this._anyParamVariesPerInstance = false;
            this._savedData = null;
            this._unsavedData = null;
            this._debugData = this._runtime.IsDebug() ? {
                isBreakpoint: data[8][0],
                canDebug: data[8][1]
            } : null;
            if (data[0] === -1) this._systemPlugin = this._runtime.GetSystemPlugin();
            else {
                this._objectClass = this._runtime.GetObjectClassByIndex(data[0]);
                if (data[2]) {
                    this._behaviorType = this._objectClass.GetBehaviorTypeByName(data[2]);
                    this._behaviorIndex =
                        this._objectClass.GetBehaviorIndexByName(data[2])
                }
                if (this._eventBlock.GetParent()) this._eventBlock.GetParent().SetSolWriterAfterCnds()
            }
            if (data.length === 10) {
                let paramData = data[9];
                for (let data of paramData) {
                    this._parameters.push(C3.Parameter.Create(this, data, this._parameters.length));
                    this._results.push(0)
                }
            }
            if (this._parameters.length === 0) {
                this._parameters = EMPTY_PARAMS_ARRAY;
                this._results = EMPTY_PARAMS_ARRAY
            }
            this._eventBlock.GetEventSheetManager()._RegisterCondition(this)
        }
        static Create(eventBlock, data,
            index) {
            return C3.New(C3.Condition, eventBlock, data, index)
        }
        _PostInit() {
            for (const param of this._parameters) {
                param._PostInit();
                if (param.VariesPerInstance()) this._anyParamVariesPerInstance = true
            }
            if (this._isFastTrigger) {
                this.Run = this._RunFastTrigger;
                this.DebugRun = this._DebugRunFastTrigger
            } else if (this._systemPlugin) {
                this._SetSystemRunMethod();
                this.DebugRun = this._DebugRunSystem
            } else if (this._objectClass.GetPlugin().IsSingleGlobal()) {
                this._SetSingleGlobalRunMethod();
                this.DebugRun = this._DebugRunSingleGlobal
            } else if (this._isStatic) {
                this.Run =
                    this._RunStatic;
                this.DebugRun = this._DebugRunStatic
            } else {
                this.Run = this._RunObject;
                this.DebugRun = this._DebugRunObject
            }
        }
        _SetSystemRunMethod() {
            const plugin = this._systemPlugin;
            const bindThis = this._systemPlugin;
            this._SetRunMethodForBoundFunc(plugin, bindThis, this._RunSystem)
        }
        _SetSingleGlobalRunMethod() {
            const plugin = this._objectClass.GetPlugin();
            const bindThis = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._SetRunMethodForBoundFunc(plugin, bindThis, this._RunSingleGlobal)
        }
        _SetRunMethodForBoundFunc(plugin,
            bindThis, fallbackMethod) {
            const func = this._func;
            const isInverted = this._isInverted;
            const parameters = this._parameters;
            if (parameters.length === 0) {
                const boundFunc = plugin._GetBoundACEMethod(func, bindThis);
                if (isInverted) this.Run = function RunSingleCnd_0param() {
                    return C3.xor(boundFunc(), isInverted)
                };
                else this.Run = boundFunc
            } else if (parameters.length === 1) {
                const param0 = parameters[0];
                if (!isInverted && param0.IsConstant()) this.Run = plugin._GetBoundACEMethod_1param(func, bindThis, param0.Get(0));
                else {
                    const boundFunc =
                        plugin._GetBoundACEMethod(func, bindThis);
                    this.Run = function RunSingleCnd_1param() {
                        return C3.xor(boundFunc(param0.Get(0)), isInverted)
                    }
                }
            } else if (parameters.length === 2) {
                const param0 = parameters[0];
                const param1 = parameters[1];
                if (!isInverted && param0.IsConstant() && param1.IsConstant()) this.Run = plugin._GetBoundACEMethod_2params(func, bindThis, param0.Get(0), param1.Get(0));
                else {
                    const boundFunc = plugin._GetBoundACEMethod(func, bindThis);
                    this.Run = function RunSingleCnd_2params() {
                        return C3.xor(boundFunc(param0.Get(0),
                            param1.Get(0)), isInverted)
                    }
                }
            } else if (parameters.length === 3) {
                const param0 = parameters[0];
                const param1 = parameters[1];
                const param2 = parameters[2];
                if (!isInverted && param0.IsConstant() && param1.IsConstant() && param2.IsConstant()) this.Run = plugin._GetBoundACEMethod_3params(func, bindThis, param0.Get(0), param1.Get(0), param2.Get(0));
                else {
                    const boundFunc = plugin._GetBoundACEMethod(func, bindThis);
                    this.Run = function RunSingleCnd_3params() {
                        return C3.xor(boundFunc(param0.Get(0), param1.Get(0), param2.Get(0)), isInverted)
                    }
                }
            } else this.Run =
                fallbackMethod
        }
        GetSID() {
            return this._sid
        }
        _GetFunc() {
            return this._func
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetEventBlock() {
            return this._eventBlock
        }
        GetRuntime() {
            return this._runtime
        }
        GetIndex() {
            return this._index
        }
        GetDebugIndex() {
            return this.GetIndex()
        }
        IsTrigger() {
            return this._isTrigger
        }
        IsFastTrigger() {
            return this._isFastTrigger
        }
        IsInverted() {
            return this._isInverted
        }
        IsLooping() {
            return this._isLooping
        }
        IsStatic() {
            return this._isStatic
        }
        IsBreakpoint() {
            return this._debugData.isBreakpoint
        }
        IsSystemCondition() {
            return !!this._systemPlugin
        }
        GetFirstObjectParameterObjectClass() {
            for (const p of this._parameters)
                if (p.IsObjectParameter()) return p.GetObjectClass();
            return null
        }
        _SetBreakpoint(b) {
            this._debugData.isBreakpoint = !!b;
            this._eventBlock._UpdateCanRunFastRecursive()
        }
        _DebugReturnsGenerator() {
            return this._debugData.canDebug
        }
        DebugCanRunFast() {
            return !this.IsBreakpoint() && !this._runtime.DebugBreakNext() && !this._DebugReturnsGenerator()
        }
        GetSavedDataMap() {
            if (!this._savedData) this._savedData = new Map;
            return this._savedData
        }
        GetUnsavedDataMap() {
            if (!this._unsavedData) this._unsavedData = new Map;
            return this._unsavedData
        }
        _RunSystem() {
            const results = this._results;
            EvalParams(this._parameters,
                results);
            return C3.xor(this._func.apply(this._systemPlugin, results), this._isInverted)
        }* _DebugRunSystem() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const results = this._results;
                EvalParams(this._parameters, results);
                let ret = this._func.apply(this._systemPlugin, results);
                if (C3.IsIterator(ret)) ret = yield* ret;
                return C3.xor(ret, this._isInverted)
            } else return this.Run()
        }
        _RunSingleGlobal() {
            const results = this._results;
            EvalParams(this._parameters, results);
            const inst = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            return C3.xor(this._func.apply(inst, results), this._isInverted)
        }* _DebugRunSingleGlobal() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const results = this._results;
                EvalParams(this._parameters, results);
                const inst = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
                let ret = this._func.apply(inst, results);
                if (C3.IsIterator(ret)) ret = yield* ret;
                return C3.xor(ret, this._isInverted)
            } else return this.Run()
        }
        _RunFastTrigger() {
            return true
        }* _DebugRunFastTrigger() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            return true
        }
        _RunStatic() {
            const results = this._results;
            EvalParams(this._parameters, results);
            const ret = this._func.apply(this._behaviorType || this._objectClass, results);
            this._objectClass.ApplySolToContainer();
            return ret
        }* _DebugRunStatic() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const results = this._results;
                EvalParams(this._parameters, results);
                let ret = this._func.apply(this._behaviorType || this._objectClass,
                    results);
                if (C3.IsIterator(ret)) ret = yield* ret;
                this._objectClass.ApplySolToContainer();
                return ret
            } else return this.Run()
        }
        _RunObject() {
            const parameters = this._parameters;
            const results = this._results;
            const sol = this._objectClass.GetCurrentSol();
            for (let i = 0, len = parameters.length; i < len; ++i) {
                const p = parameters[i];
                if (!p.VariesPerInstance()) results[i] = p.Get(0)
            }
            if (sol.IsSelectAll()) return this._RunObject_FirstFilter(sol);
            else return this._RunObject_NextFilter(sol)
        }* _DebugRunObject() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return this._RunObject()
        }
        _EvaluateVaryingParameters(solIndex) {
            const parameters = this._parameters;
            const results = this._results;
            for (let i = 0, len = parameters.length; i < len; ++i) {
                const p = parameters[i];
                if (p.VariesPerInstance()) results[i] = p.Get(solIndex)
            }
        }
        _RunObject_FirstFilter(sol) {
            const objectClass = this._objectClass;
            const isFamily = objectClass.IsFamily();
            const familyIndex = objectClass.GetFamilyIndex();
            const behaviorIndex = this._behaviorIndex;
            const isBehavior = behaviorIndex >= 0;
            const allInstances = objectClass.GetInstances();
            const paramsVary = this._anyParamVariesPerInstance;
            const results = this._results;
            const func = this._func;
            const isInverted = this._isInverted;
            const isInOrBlock = this._isInOrBlock && !this._isTrigger;
            sol.ClearArrays();
            for (let i = 0, len = allInstances.length; i < len; ++i) {
                const inst = allInstances[i];
                if (paramsVary) this._EvaluateVaryingParameters(i);
                let ret;
                if (isBehavior) {
                    const offset = isFamily ? inst.GetObjectClass().GetFamilyBehaviorOffset(familyIndex) : 0;
                    ret = func.apply(inst.GetBehaviorInstances()[behaviorIndex + offset].GetSdkInstance(),
                        results)
                } else ret = func.apply(inst.GetSdkInstance(), results);
                if (C3.xor(ret, isInverted)) sol._PushInstance(inst);
                else if (isInOrBlock) sol._PushElseInstance(inst)
            }
            objectClass.FinishCondition(true);
            sol._SetSelectAll(false);
            objectClass.ApplySolToContainer();
            return sol.HasAnyInstances()
        }
        _RunObject_NextFilter(sol) {
            const objectClass = this._objectClass;
            const isFamily = objectClass.IsFamily();
            const familyIndex = objectClass.GetFamilyIndex();
            const isInContainer = objectClass.IsInContainer();
            const behaviorIndex = this._behaviorIndex;
            const isBehavior = behaviorIndex >= 0;
            const paramsVary = this._anyParamVariesPerInstance;
            const results = this._results;
            const func = this._func;
            const isInverted = this._isInverted;
            const isInOrBlock = this._isInOrBlock && !this._isTrigger;
            const solInstances = sol._GetOwnInstances();
            const solElseInstances = sol._GetOwnElseInstances();
            const isUsingElseInstances = isInOrBlock && !this._eventBlock.IsFirstConditionOfType(this);
            const arr = isUsingElseInstances ? solElseInstances : solInstances;
            let k = 0;
            let isAnyTrue = false;
            for (let i = 0,
                    len = arr.length; i < len; ++i) {
                const inst = arr[i];
                if (paramsVary) this._EvaluateVaryingParameters(i);
                let ret;
                if (isBehavior) {
                    const offset = isFamily ? inst.GetObjectClass().GetFamilyBehaviorOffset(familyIndex) : 0;
                    ret = func.apply(inst.GetBehaviorInstances()[behaviorIndex + offset].GetSdkInstance(), results)
                } else ret = func.apply(inst.GetSdkInstance(), results);
                if (C3.xor(ret, isInverted)) {
                    isAnyTrue = true;
                    if (isUsingElseInstances) {
                        solInstances.push(inst);
                        if (isInContainer) inst._PushSiblingsToSolInstances()
                    } else {
                        arr[k] = inst;
                        if (isInContainer) inst._SetSiblingsToSolInstancesIndex(k);
                        ++k
                    }
                } else if (isUsingElseInstances) {
                    arr[k] = inst;
                    if (isInContainer) inst._SetSiblingsToSolElseInstancesIndex(k);
                    ++k
                } else if (isInOrBlock) {
                    solElseInstances.push(inst);
                    if (isInContainer) inst._PushSiblingsToSolElseInstances()
                }
            }
            C3.truncateArray(arr, k);
            if (isInContainer) objectClass._TruncateContainerSols(isUsingElseInstances, k);
            const pickInFinish = isAnyTrue;
            if (isUsingElseInstances && !isAnyTrue) isAnyTrue = this._OrBlockCheckInstances(solInstances);
            objectClass.FinishCondition(pickInFinish ||
                isInOrBlock);
            return isInOrBlock ? isAnyTrue : sol.HasAnyInstances()
        }
        _OrBlockCheckInstances(solInstances) {
            const objectClass = this._objectClass;
            const isFamily = objectClass.IsFamily();
            const familyIndex = objectClass.GetFamilyIndex();
            const paramsVary = this._anyParamVariesPerInstance;
            const behaviorIndex = this._behaviorIndex;
            const isBehavior = behaviorIndex >= 0;
            const results = this._results;
            const func = this._func;
            const isInverted = this._isInverted;
            for (let i = 0, len = solInstances.length; i < len; ++i) {
                const inst = solInstances[i];
                if (paramsVary) this._EvaluateVaryingParameters(i);
                let ret;
                if (isBehavior) {
                    const offset = isFamily ? inst.GetObjectClass().GetFamilyBehaviorOffset(familyIndex) : 0;
                    ret = func.apply(inst.GetBehaviorInstances()[behaviorIndex + offset].GetSdkInstance(), results)
                } else ret = func.apply(inst.GetSdkInstance(), results);
                if (C3.xor(ret, isInverted)) return true
            }
            return false
        }
        ReevaluateParameter(paramIndex, solIndex) {
            return this._parameters[paramIndex].Get(solIndex)
        }
        GetFastTriggerValue() {
            const parameters = this._parameters;
            if (!parameters.length) throw new Error("no parameters");
            return parameters[0]._GetFastTriggerValue()
        }
        _SaveToJson() {
            if (!this._savedData || !this._savedData.size) return null;
            const ex = {};
            for (const [k, v] of this._savedData.entries()) {
                let saveVal = v;
                if (k === "collmemory") saveVal = [...v.entries()].map(arr => [arr[0].GetUID(), arr[1].GetUID(), arr[2]]);
                ex[k] = saveVal
            }
            return {
                "ex": ex
            }
        }
        _LoadFromJson(o) {
            if (this._savedData) {
                this._savedData.clear();
                this._savedData = null
            }
            if (!o) return;
            const runtime = this._runtime;
            const ex = o["ex"];
            if (ex) {
                const map = this.GetSavedDataMap();
                map.clear();
                for (const [k, v] of Object.entries(ex)) {
                    let loadVal = v;
                    if (k === "collmemory") loadVal = C3.New(C3.PairMap, v.map(arr => [runtime.GetInstanceByUID(arr[0]), runtime.GetInstanceByUID(arr[1]), arr[2]]).filter(arr => arr[0] && arr[1]));
                    map.set(k, loadVal)
                }
            }
        }
    };

}

// events/action.js
{
    'use strict';
    const C3 = self.C3;
    const assert = self.assert;

    function EvalParams(parameters, results) {
        for (let i = 0, len = parameters.length; i < len; ++i) results[i] = parameters[i].Get(0)
    }
    const EMPTY_PARAMS_ARRAY = [];
    const noop = function() {};
    const noopGenerator = function*() {};
    const FLAG_CANPICKANYOBJECTCLASS = 1;
    const FLAG_COPYPICKED = 2;
    const FLAG_CUSTOM_ACE = 4;
    C3.Action = class Action extends C3.DefendedBase {
        constructor(eventBlock, data, index) {
            super();
            this._eventBlock = eventBlock;
            const runtime = eventBlock.GetRuntime();
            this._runtime = runtime;
            this._index = index;
            this._sid = data.length >= 4 ? data[3] : -1;
            this._actionType = data.length >= 5 ? data[4] & 255 : 0;
            this._flags = data.length >= 5 ? data[4] >> 8 : 0;
            this._func = null;
            this._objectClass = null;
            this._behaviorType = null;
            this._behaviorIndex = -1;
            this._systemPlugin = null;
            this._callFunctionName = "";
            this._callCustomAceObjectClass = null;
            this._callEventBlock =
                null;
            this.Run = noop;
            this.DebugRun = noop;
            this._parameters = [];
            this._results = [];
            this._anyParamVariesPerInstance = false;
            this._savedData = null;
            this._unsavedData = null;
            const isScript = data[0] === -3;
            const debugInfo = isScript ? data[2] : data[5];
            this._debugData = runtime.IsDebug() || isScript ? {
                isBreakpoint: debugInfo[0],
                canDebug: debugInfo[1],
                index: debugInfo[2]
            } : null;
            if (data[0] === -1) {
                this._systemPlugin = runtime.GetSystemPlugin();
                this._func = runtime.GetObjectReference(data[1])
            } else if (data[0] === -2) this._callFunctionName = data[1];
            else if (isScript) {
                const userMethod = runtime.GetObjectReference(data[1]);
                this._func = userMethod;
                this.Run = this.RunUserScript;
                this.DebugRun = this.DebugRunUserScript;
                this._actionType = 1
            } else {
                this._objectClass = runtime.GetObjectClassByIndex(data[0]);
                if (this._flags & FLAG_CUSTOM_ACE) {
                    this._callFunctionName = data[1];
                    this._callCustomAceObjectClass = runtime.GetObjectClassByIndex(data[2])
                } else {
                    if (data[2]) {
                        this._behaviorType = this._objectClass.GetBehaviorTypeByName(data[2]);
                        this._behaviorIndex = this._objectClass.GetBehaviorIndexByName(data[2])
                    }
                    this._func =
                        runtime.GetObjectReference(data[1])
                }
            }
            if (data.length === 7) {
                const paramData = data[6];
                for (const data of paramData) {
                    this._parameters.push(C3.Parameter.Create(this, data, this._parameters.length));
                    this._results.push(0)
                }
            }
            if (this._parameters.length === 0) {
                this._parameters = EMPTY_PARAMS_ARRAY;
                this._results = EMPTY_PARAMS_ARRAY
            }
            if (this.CanPickAnyObjectClass()) {
                this._eventBlock.SetAllSolModifiers();
                this._eventBlock.SetSolWriterAfterCnds()
            }
            this._eventBlock.GetEventSheetManager()._RegisterAction(this)
        }
        static Create(eventBlock,
            data, index) {
            return C3.New(C3.Action, eventBlock, data, index)
        }
        _PostInit() {
            for (const param of this._parameters) {
                param._PostInit();
                if (param.VariesPerInstance()) this._anyParamVariesPerInstance = true
            }
            if (this._systemPlugin) {
                this._SetSystemRunMethod();
                this.DebugRun = this._DebugRunSystem
            } else if (this._callFunctionName) {
                if (this._flags & FLAG_CUSTOM_ACE) this._SetCallCustomActionRunMethod();
                else this._SetCallFunctionRunMethod();
                this._callFunctionName = "";
                this._callCustomAceObjectClass = null
            } else if (this.Run === this.RunUserScript) {
                const userMethod =
                    this._func;
                const localVars = this._runtime.GetEventSheetManager()._GetLocalVariablesScriptInterface(this._eventBlock);
                this._func = userMethod.bind(null, this._runtime.GetIRuntime(), localVars)
            } else if (this._behaviorType)
                if (this.IsAsync()) {
                    this.Run = this._RunBehavior_Async;
                    this.DebugRun = this._DebugRunBehavior_Async
                } else {
                    this.Run = this._RunBehavior;
                    this.DebugRun = this._DebugRunBehavior
                }
            else if (this._objectClass.GetPlugin().IsSingleGlobal()) {
                this._SetSingleGlobalRunMethod();
                this.DebugRun = this._DebugRunSingleGlobal
            } else if (this.IsAsync()) {
                this.Run =
                    this._RunObject_Async;
                this.DebugRun = this._DebugRunObject_Async
            } else if (this.CallBeforeAfterHooks()) {
                this.Run = this._RunObject_BeforeAfterHooks;
                this.DebugRun = this._DebugRunObject_BeforeAfterHooks
            } else if (!this._parameters.length) {
                this.Run = this._RunObject_ParamsConst;
                this.DebugRun = this._DebugRunObject_ParamsConst
            } else if (this._parameters.every(p => p.VariesPerInstance())) {
                this.Run = this._RunObject_AllParamsVary;
                this.DebugRun = this._DebugRunObject_AllParamsVary
            } else if (this._anyParamVariesPerInstance) {
                this.Run =
                    this._RunObject_SomeParamsVary;
                this.DebugRun = this._DebugRunObject_SomeParamsVary
            } else if (this._parameters.every(p => p.IsConstant())) {
                EvalParams(this._parameters, this._results);
                this.Run = this._RunObject_ParamsConst;
                this.DebugRun = this._DebugRunObject_ParamsConst
            } else {
                this.Run = this._RunObject_ParamsDontVary;
                this.DebugRun = this._DebugRunObject_ParamsDontVary
            }
        }
        _SetSystemRunMethod() {
            const plugin = this._systemPlugin;
            const bindThis = this._systemPlugin;
            this._SetRunMethodForBoundFunc(plugin, bindThis, this._RunSystem)
        }
        _SetSingleGlobalRunMethod() {
            const plugin =
                this._objectClass.GetPlugin();
            const bindThis = this._objectClass.GetSingleGlobalInstance().GetSdkInstance();
            this._SetRunMethodForBoundFunc(plugin, bindThis, this._RunSingleGlobal)
        }
        _SetCallFunctionRunMethod() {
            const eventSheetManager = this._eventBlock.GetEventSheetManager();
            const functionBlock = eventSheetManager.GetFunctionBlockByName(this._callFunctionName);
            if (functionBlock.IsEnabled()) {
                const isCopyPicked = (this._flags & FLAG_COPYPICKED) !== 0;
                this._callEventBlock = functionBlock.GetEventBlock();
                let combinedSolModifiers = [...(new Set([...this._eventBlock.GetSolModifiersIncludingParents(), ...this._callEventBlock.GetSolModifiersIncludingParents()]))];
                combinedSolModifiers = eventSheetManager._DeduplicateSolModifierList(combinedSolModifiers);
                const pickInfo = !functionBlock.IsCopyPicked() && this._HasCopyPickedParent() ? {
                    pushCleanSolDynamic: true
                } : null;
                this.Run = C3.EventBlock.prototype.RunAsFunctionCall.bind(this._callEventBlock, combinedSolModifiers, this._parameters, isCopyPicked, pickInfo);
                if (this._runtime.IsDebug()) {
                    const thiz =
                        this;
                    this.DebugRun = function* DebugRunCallFunction() {
                        if (thiz.IsBreakpoint() || thiz._runtime.DebugBreakNext()) yield thiz;
                        const ret = yield* thiz._callEventBlock.DebugRunAsFunctionCall(combinedSolModifiers, thiz._parameters, isCopyPicked, pickInfo);
                        return ret
                    }
                } else this.DebugRun = noopGenerator
            } else {
                this.Run = noop;
                this.DebugRun = noopGenerator
            }
        }
        _SetCallCustomActionRunMethod() {
            const eventSheetManager = this._eventBlock.GetEventSheetManager();
            const customAceBlock = eventSheetManager.GetCustomActionBlockByName(this._callCustomAceObjectClass,
                this._callFunctionName);
            if (customAceBlock.IsEnabled()) {
                const isCopyPicked = (this._flags & FLAG_COPYPICKED) !== 0;
                this._callEventBlock = customAceBlock.GetEventBlock();
                let combinedSolModifiers = [...(new Set([...this._eventBlock.GetSolModifiersIncludingParents(), ...this._callEventBlock.GetSolModifiersIncludingParents(), this._objectClass, customAceBlock.GetObjectClass()]))];
                combinedSolModifiers = eventSheetManager._DeduplicateSolModifierList(combinedSolModifiers);
                const isOTtoOT = !this._objectClass.IsFamily() && !customAceBlock.GetObjectClass().IsFamily();
                const isOTtoFamily = !this._objectClass.IsFamily() && customAceBlock.GetObjectClass().IsFamily();
                const isFamilyToFamily = this._objectClass.IsFamily();
                let pickInfo = null;
                if (!customAceBlock.IsCopyPicked() && this._HasCopyPickedParent()) {
                    pickInfo = pickInfo || {};
                    pickInfo.pushCleanSolDynamic = true
                }
                if (isOTtoFamily || !isCopyPicked) {
                    pickInfo = pickInfo || {};
                    pickInfo.copyFromObjectClass = this._objectClass;
                    pickInfo.copyToObjectClass = customAceBlock.GetObjectClass()
                }
                if (isOTtoOT || isOTtoFamily || isFamilyToFamily && !customAceBlock.HasCustomACEOverrides()) this.Run =
                    C3.EventBlock.prototype.RunAsFunctionCall.bind(this._callEventBlock, combinedSolModifiers, this._parameters, isCopyPicked, pickInfo);
                else if (isFamilyToFamily) this.Run = C3.FunctionBlock.prototype.RunAsFamilyCustomActionWithOverrides.bind(customAceBlock, combinedSolModifiers, this._parameters);
                else;
                if (this._runtime.IsDebug()) {
                    const thiz = this;
                    if (isOTtoOT || isOTtoFamily || isFamilyToFamily && !customAceBlock.HasCustomACEOverrides()) this.DebugRun = function* DebugRunCustomAction() {
                        if (thiz.IsBreakpoint() || thiz._runtime.DebugBreakNext()) yield thiz;
                        const ret = yield* thiz._callEventBlock.DebugRunAsFunctionCall(combinedSolModifiers, thiz._parameters, isCopyPicked, pickInfo);
                        return ret
                    };
                    else if (isFamilyToFamily) this.DebugRun = function* DebugRunCustomAction() {
                        if (thiz.IsBreakpoint() || thiz._runtime.DebugBreakNext()) yield thiz;
                        const ret = yield* customAceBlock.DebugRunAsFamilyCustomActionWithOverrides(combinedSolModifiers, thiz._parameters);
                        return ret
                    }
                } else this.DebugRun = noopGenerator
            } else {
                this.Run = noop;
                this.DebugRun = noopGenerator
            }
        }
        _SetRunMethodForBoundFunc(plugin,
            bindThis, fallbackMethod) {
            const func = this._func;
            const parameters = this._parameters;
            if (parameters.length === 0) this.Run = plugin._GetBoundACEMethod(func, bindThis);
            else if (parameters.length === 1) {
                const param0 = parameters[0];
                if (param0.IsConstant()) this.Run = plugin._GetBoundACEMethod_1param(func, bindThis, param0.Get(0));
                else {
                    const boundFunc = plugin._GetBoundACEMethod(func, bindThis);
                    this.Run = function RunSingleAct_1param() {
                        return boundFunc(param0.Get(0))
                    }
                }
            } else if (parameters.length === 2) {
                const param0 = parameters[0];
                const param1 = parameters[1];
                if (param0.IsConstant() && param1.IsConstant()) this.Run = plugin._GetBoundACEMethod_2params(func, bindThis, param0.Get(0), param1.Get(0));
                else {
                    const boundFunc = plugin._GetBoundACEMethod(func, bindThis);
                    this.Run = function RunSingleAct_2params() {
                        return boundFunc(param0.Get(0), param1.Get(0))
                    }
                }
            } else if (parameters.length === 3) {
                const param0 = parameters[0];
                const param1 = parameters[1];
                const param2 = parameters[2];
                if (param0.IsConstant() && param1.IsConstant() && param2.IsConstant()) this.Run = plugin._GetBoundACEMethod_3params(func,
                    bindThis, param0.Get(0), param1.Get(0), param2.Get(0));
                else {
                    const boundFunc = plugin._GetBoundACEMethod(func, bindThis);
                    this.Run = function RunSingleAct_3params() {
                        return boundFunc(param0.Get(0), param1.Get(0), param2.Get(0))
                    }
                }
            } else this.Run = fallbackMethod
        }
        GetSID() {
            return this._sid
        }
        IsAsync() {
            return this._actionType === 1
        }
        CanBailOut() {
            return this._actionType === 2
        }
        CallBeforeAfterHooks() {
            return this._actionType === 3
        }
        CanPickAnyObjectClass() {
            return (this._flags & FLAG_CANPICKANYOBJECTCLASS) !== 0
        }
        HasReturnType() {
            return this.IsAsync() ||
                this.CanBailOut()
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetEventBlock() {
            return this._eventBlock
        }
        _HasCopyPickedParent() {
            let parent = this._eventBlock;
            do {
                if (parent instanceof C3.FunctionBlock && parent.IsCopyPicked()) return true;
                parent = parent.GetScopeParent()
            } while (parent);
            return false
        }
        GetRuntime() {
            return this._runtime
        }
        GetIndex() {
            return this._index
        }
        GetDebugIndex() {
            return this._debugData.index
        }
        IsBreakpoint() {
            return this._debugData.isBreakpoint
        }
        _SetBreakpoint(b) {
            this._debugData.isBreakpoint = !!b;
            this._eventBlock._UpdateCanRunFastRecursive()
        }
        _DebugReturnsGenerator() {
            return this._debugData.canDebug
        }
        DebugCanRunFast() {
            return !this.IsBreakpoint() &&
                !this._runtime.DebugBreakNext() && !this._DebugReturnsGenerator()
        }
        GetSavedDataMap() {
            if (!this._savedData) this._savedData = new Map;
            return this._savedData
        }
        GetUnsavedDataMap() {
            if (!this._unsavedData) this._unsavedData = new Map;
            return this._unsavedData
        }
        _RunSystem() {
            const results = this._results;
            EvalParams(this._parameters, results);
            return this._func.apply(this._systemPlugin, results)
        }* _DebugRunSystem() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const results =
                    this._results;
                EvalParams(this._parameters, results);
                const ret = yield* this._func.apply(this._systemPlugin, results);
                return ret
            } else return this.Run()
        }
        _RunSingleGlobal() {
            const results = this._results;
            EvalParams(this._parameters, results);
            return this._func.apply(this._objectClass.GetSingleGlobalInstance().GetSdkInstance(), results)
        }* _DebugRunSingleGlobal() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const results = this._results;
                EvalParams(this._parameters,
                    results);
                const ret = yield* this._func.apply(this._objectClass.GetSingleGlobalInstance().GetSdkInstance(), results);
                return ret
            } else return this.Run()
        }
        _RunObject_ParamsConst() {
            const results = this._results;
            const instances = this._objectClass.GetCurrentSol().GetInstances();
            for (let i = 0, len = instances.length; i < len; ++i) this._func.apply(instances[i].GetSdkInstance(), results)
        }* _DebugRunObject_ParamsConst() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const results =
                    this._results;
                const instances = this._objectClass.GetCurrentSol().GetInstances();
                for (let i = 0, len = instances.length; i < len; ++i) yield* this._func.apply(instances[i].GetSdkInstance(), results)
            } else this._RunObject_ParamsConst()
        }
        _RunObject_ParamsDontVary() {
            const results = this._results;
            EvalParams(this._parameters, results);
            const instances = this._objectClass.GetCurrentSol().GetInstances();
            for (let i = 0, len = instances.length; i < len; ++i) this._func.apply(instances[i].GetSdkInstance(), results)
        }* _DebugRunObject_ParamsDontVary() {
            if (this.IsBreakpoint() ||
                this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const results = this._results;
                EvalParams(this._parameters, results);
                const instances = this._objectClass.GetCurrentSol().GetInstances();
                for (let i = 0, len = instances.length; i < len; ++i) yield* this._func.apply(instances[i].GetSdkInstance(), results)
            } else this._RunObject_ParamsDontVary()
        }
        _RunObject_AllParamsVary() {
            const parameters = this._parameters;
            const results = this._results;
            const func = this._func;
            const instances = this._objectClass.GetCurrentSol().GetInstances();
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst = instances[i];
                for (let j = 0, lenj = parameters.length; j < lenj; ++j) results[j] = parameters[j].Get(i);
                func.apply(inst.GetSdkInstance(), results)
            }
        }* _DebugRunObject_AllParamsVary() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const parameters = this._parameters;
                const results = this._results;
                const func = this._func;
                const instances = this._objectClass.GetCurrentSol().GetInstances();
                for (let i = 0, len = instances.length; i <
                    len; ++i) {
                    const inst = instances[i];
                    for (let j = 0, lenj = parameters.length; j < lenj; ++j) results[j] = parameters[j].Get(i);
                    yield* func.apply(inst.GetSdkInstance(), results)
                }
            } else this._RunObject_AllParamsVary()
        }
        _RunObject_SomeParamsVary() {
            const parameters = this._parameters;
            const results = this._results;
            const func = this._func;
            const instances = this._objectClass.GetCurrentSol().GetInstances();
            for (let i = 0, len = parameters.length; i < len; ++i) {
                const p = parameters[i];
                if (!p.VariesPerInstance()) results[i] = p.Get(0)
            }
            for (let i = 0, len =
                    instances.length; i < len; ++i) {
                const inst = instances[i];
                for (let j = 0, lenj = parameters.length; j < lenj; ++j) {
                    const p = parameters[j];
                    if (p.VariesPerInstance()) results[j] = p.Get(i)
                }
                func.apply(inst.GetSdkInstance(), results)
            }
        }* _DebugRunObject_SomeParamsVary() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const parameters = this._parameters;
                const results = this._results;
                const func = this._func;
                const instances = this._objectClass.GetCurrentSol().GetInstances();
                for (let i =
                        0, len = parameters.length; i < len; ++i) {
                    const p = parameters[i];
                    if (!p.VariesPerInstance()) results[i] = p.Get(0)
                }
                for (let i = 0, len = instances.length; i < len; ++i) {
                    const inst = instances[i];
                    for (let j = 0, lenj = parameters.length; j < lenj; ++j) {
                        const p = parameters[j];
                        if (p.VariesPerInstance()) results[j] = p.Get(i)
                    }
                    yield* func.apply(inst.GetSdkInstance(), results)
                }
            } else this._RunObject_SomeParamsVary()
        }
        _RunObject_BeforeAfterHooks() {
            const parameters = this._parameters;
            const results = this._results;
            const func = this._func;
            const objectClass =
                this._objectClass;
            const sdkType = objectClass.GetSdkType();
            const instances = objectClass.GetCurrentSol().GetInstances();
            sdkType.BeforeRunAction(func);
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst = instances[i];
                for (let j = 0, lenj = parameters.length; j < lenj; ++j) results[j] = parameters[j].Get(i);
                func.apply(inst.GetSdkInstance(), results)
            }
            sdkType.AfterRunAction(func)
        }* _DebugRunObject_BeforeAfterHooks() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const parameters =
                    this._parameters;
                const results = this._results;
                const func = this._func;
                const objectClass = this._objectClass;
                const sdkType = objectClass.GetSdkType();
                const instances = objectClass.GetCurrentSol().GetInstances();
                sdkType.BeforeRunAction(func);
                for (let i = 0, len = instances.length; i < len; ++i) {
                    const inst = instances[i];
                    for (let j = 0, lenj = parameters.length; j < lenj; ++j) results[j] = parameters[j].Get(i);
                    yield* func.apply(inst.GetSdkInstance(), results)
                }
                sdkType.AfterRunAction(func)
            } else this._RunObject_BeforeAfterHooks()
        }
        _RunBehavior() {
            const objectClass =
                this._objectClass;
            const isFamily = objectClass.IsFamily();
            const familyIndex = objectClass.GetFamilyIndex();
            const parameters = this._parameters;
            const paramsVary = this._anyParamVariesPerInstance;
            const results = this._results;
            const func = this._func;
            const behaviorIndex = this._behaviorIndex;
            const instances = objectClass.GetCurrentSol().GetInstances();
            for (let i = 0, len = parameters.length; i < len; ++i) {
                const p = parameters[i];
                if (!p.VariesPerInstance()) results[i] = p.Get(0)
            }
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst =
                    instances[i];
                if (paramsVary)
                    for (let j = 0, lenj = parameters.length; j < lenj; ++j) {
                        const p = parameters[j];
                        if (p.VariesPerInstance()) results[j] = p.Get(i)
                    }
                const offset = isFamily ? inst.GetObjectClass().GetFamilyBehaviorOffset(familyIndex) : 0;
                func.apply(inst.GetBehaviorInstances()[behaviorIndex + offset].GetSdkInstance(), results)
            }
        }* _DebugRunBehavior() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const objectClass = this._objectClass;
                const isFamily = objectClass.IsFamily();
                const familyIndex = objectClass.GetFamilyIndex();
                const parameters = this._parameters;
                const paramsVary = this._anyParamVariesPerInstance;
                const results = this._results;
                const func = this._func;
                const behaviorIndex = this._behaviorIndex;
                const instances = objectClass.GetCurrentSol().GetInstances();
                for (let i = 0, len = parameters.length; i < len; ++i) {
                    const p = parameters[i];
                    if (!p.VariesPerInstance()) results[i] = p.Get(0)
                }
                for (let i = 0, len = instances.length; i < len; ++i) {
                    const inst = instances[i];
                    if (paramsVary)
                        for (let j = 0, lenj = parameters.length; j <
                            lenj; ++j) {
                            const p = parameters[j];
                            if (p.VariesPerInstance()) results[j] = p.Get(i)
                        }
                    const offset = isFamily ? inst.GetObjectClass().GetFamilyBehaviorOffset(familyIndex) : 0;
                    yield* func.apply(inst.GetBehaviorInstances()[behaviorIndex + offset].GetSdkInstance(), results)
                }
            } else this._RunBehavior()
        }
        _RunObject_Async() {
            const parameters = this._parameters;
            const results = this._results;
            const func = this._func;
            const instances = this._objectClass.GetCurrentSol().GetInstances();
            const promises = [];
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst =
                    instances[i];
                for (let j = 0, lenj = parameters.length; j < lenj; ++j) results[j] = parameters[j].Get(i);
                promises.push(func.apply(inst.GetSdkInstance(), results))
            }
            return Promise.all(promises)
        }* _DebugRunObject_Async() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const parameters = this._parameters;
                const results = this._results;
                const func = this._func;
                const instances = this._objectClass.GetCurrentSol().GetInstances();
                const promises = [];
                for (let i = 0, len = instances.length; i <
                    len; ++i) {
                    const inst = instances[i];
                    for (let j = 0, lenj = parameters.length; j < lenj; ++j) results[j] = parameters[j].Get(i);
                    promises.push(yield* func.apply(inst.GetSdkInstance(), results))
                }
                return Promise.all(promises)
            } else return this._RunObject_Async()
        }
        _RunBehavior_Async() {
            const objectClass = this._objectClass;
            const isFamily = objectClass.IsFamily();
            const familyIndex = objectClass.GetFamilyIndex();
            const parameters = this._parameters;
            const results = this._results;
            const func = this._func;
            const behaviorIndex = this._behaviorIndex;
            const instances = objectClass.GetCurrentSol().GetInstances();
            const promises = [];
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst = instances[i];
                for (let j = 0, lenj = parameters.length; j < lenj; ++j) results[j] = parameters[j].Get(i);
                const offset = isFamily ? inst.GetObjectClass().GetFamilyBehaviorOffset(familyIndex) : 0;
                promises.push(func.apply(inst.GetBehaviorInstances()[behaviorIndex + offset].GetSdkInstance(), results))
            }
            return Promise.all(promises)
        }* _DebugRunBehavior_Async() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            if (this._DebugReturnsGenerator()) {
                const objectClass = this._objectClass;
                const isFamily = objectClass.IsFamily();
                const familyIndex = objectClass.GetFamilyIndex();
                const parameters = this._parameters;
                const results = this._results;
                const func = this._func;
                const behaviorIndex = this._behaviorIndex;
                const instances = objectClass.GetCurrentSol().GetInstances();
                const promises = [];
                for (let i = 0, len = instances.length; i < len; ++i) {
                    const inst = instances[i];
                    for (let j = 0, lenj = parameters.length; j < lenj; ++j) results[j] = parameters[j].Get(i);
                    const offset = isFamily ? inst.GetObjectClass().GetFamilyBehaviorOffset(familyIndex) : 0;
                    promises.push(yield* func.apply(inst.GetBehaviorInstances()[behaviorIndex + offset].GetSdkInstance(), results))
                }
                return Promise.all(promises)
            } else return this._RunBehavior_Async()
        }
        async RunUserScript() {
            try {
                await this._func()
            } catch (err) {
                console.error(`Unhandled exception running script %c${this._eventBlock.GetEventSheet().GetName()}, event ${this._eventBlock.GetDisplayNumber()}, action ${this.GetDebugIndex()+1}:`, "font-size: 1.2em; font-weight: bold;",
                    err);
                if (self.C3Debugger) self.C3Debugger._SetLastErrorScript(this);
                if (!C3.EventScript.HadUserScriptException()) {
                    console.info(`%cTip:%c run this to highlight in Construct the last script that had an error: %cgoToLastErrorScript()`, "font-weight: bold; text-decoration: underline", "", "font-weight: bold");
                    C3.EventScript.SetHadUserScriptException()
                }
            }
        }* DebugRunUserScript() {
            if (this.IsBreakpoint() || this._runtime.DebugBreakNext()) yield this;
            return this.RunUserScript()
        }
        _SaveToJson() {
            if (!this._savedData || !this._savedData.size) return null;
            return {
                "ex": C3.ToSuperJSON(this._savedData)
            }
        }
        _LoadFromJson(o) {
            if (this._savedData) {
                this._savedData.clear();
                this._savedData = null
            }
            if (!o) return;
            const ex = o["ex"];
            if (ex) this._savedData = C3.FromSuperJSON(ex)
        }
    };

}

// events/commonACEs.js
{
    'use strict';
    const C3 = self.C3;
    const tempColor = new C3.Color;

    function CompareX(cmp, x) {
        return C3.compare(this.GetWorldInfo().GetX(), cmp, x)
    }

    function CompareY(cmp, y) {
        return C3.compare(this.GetWorldInfo().GetY(), cmp, y)
    }

    function IsOnScreen() {
        return this.GetWorldInfo().IsInViewport2()
    }

    function IsOutsideLayout() {
        const wi = this.GetWorldInfo();
        const layout = wi.GetLayout();
        const bbox = wi.GetBoundingBox();
        return bbox.getRight() < 0 || bbox.getBottom() < 0 || bbox.getLeft() > layout.GetWidth() || bbox.getTop() > layout.GetHeight()
    }

    function PickDistance(which, x, y) {
        const sol = this.GetCurrentSol();
        const instances = sol.GetInstances();
        if (!instances.length) return false;
        let inst = instances[0];
        let wi = inst.GetWorldInfo();
        let pickme = inst;
        let dist2 = C3.distanceSquared(wi.GetX(), wi.GetY(), x, y);
        for (let i = 1, len = instances.length; i < len; ++i) {
            inst = instances[i];
            wi = inst.GetWorldInfo();
            const d2 = C3.distanceSquared(wi.GetX(), wi.GetY(), x, y);
            if (which === 0 && d2 < dist2 || which === 1 && d2 > dist2) {
                dist2 = d2;
                pickme = inst
            }
        }
        sol.PickOne(pickme);
        return true
    }

    function SetX(x) {
        const wi = this.GetWorldInfo();
        if (wi.GetX() === x) return;
        wi.SetX(x);
        wi.SetBboxChanged()
    }

    function SetY(y) {
        const wi = this.GetWorldInfo();
        if (wi.GetY() === y) return;
        wi.SetY(y);
        wi.SetBboxChanged()
    }

    function SetPos(x, y) {
        const wi = this.GetWorldInfo();
        if (wi.EqualsXY(x, y)) return;
        wi.SetXY(x, y);
        wi.SetBboxChanged()
    }

    function SetPosToObject(objectClass, imgPt) {
        if (!objectClass) return;
        const inst = objectClass.GetPairedInstance(this._inst);
        if (!inst) return;
        const [x, y] = inst.GetImagePoint(imgPt);
        const wi = this.GetWorldInfo();
        if (wi.GetX() === x && wi.GetY() === y) return;
        wi.SetXY(x, y);
        wi.SetBboxChanged()
    }

    function MoveForward(dist) {
        if (dist === 0) return;
        const wi = this.GetWorldInfo();
        wi.OffsetXY(wi.GetCosAngle() * dist, wi.GetSinAngle() * dist);
        wi.SetBboxChanged()
    }

    function MoveAtAngle(a, dist) {
        if (dist === 0) return;
        const wi = this.GetWorldInfo();
        a = C3.toRadians(a);
        wi.OffsetXY(Math.cos(a) * dist, Math.sin(a) * dist);
        wi.SetBboxChanged()
    }

    function GetX() {
        return this.GetWorldInfo().GetX()
    }

    function GetY() {
        return this.GetWorldInfo().GetY()
    }

    function GetDt() {
        return this._runtime.GetDt(this._inst)
    }

    function CompareWidth(cmp, w) {
        return C3.compare(this.GetWorldInfo().GetWidth(), cmp, w)
    }

    function CompareHeight(cmp, h) {
        return C3.compare(this.GetWorldInfo().GetHeight(), cmp, h)
    }

    function SetWidth(w) {
        const wi = this.GetWorldInfo();
        if (wi.GetWidth() === w) return;
        wi.SetWidth(w);
        wi.SetBboxChanged()
    }

    function SetHeight(h) {
        const wi = this.GetWorldInfo();
        if (wi.GetHeight() === h) return;
        wi.SetHeight(h);
        wi.SetBboxChanged()
    }

    function SetSize(w, h) {
        const wi = this.GetWorldInfo();
        if (wi.GetWidth() === w && wi.GetHeight() === h) return;
        wi.SetSize(w, h);
        wi.SetBboxChanged()
    }

    function GetWidth() {
        return this.GetWorldInfo().GetWidth()
    }

    function GetHeight() {
        return this.GetWorldInfo().GetHeight()
    }

    function GetBboxLeft() {
        return this.GetWorldInfo().GetBoundingBox().getLeft()
    }

    function GetBboxTop() {
        return this.GetWorldInfo().GetBoundingBox().getTop()
    }

    function GetBboxRight() {
        return this.GetWorldInfo().GetBoundingBox().getRight()
    }

    function GetBboxBottom() {
        return this.GetWorldInfo().GetBoundingBox().getBottom()
    }

    function GetBboxMidX() {
        const bbox = this.GetWorldInfo().GetBoundingBox();
        return (bbox.getLeft() + bbox.getRight()) / 2
    }

    function GetBboxMidY() {
        const bbox = this.GetWorldInfo().GetBoundingBox();
        return (bbox.getTop() + bbox.getBottom()) / 2
    }

    function IsAngleWithin(within, a) {
        return C3.angleDiff(this.GetWorldInfo().GetAngle(), C3.toRadians(a)) <= C3.toRadians(within)
    }

    function IsAngleClockwiseFrom(a) {
        return C3.angleClockwise(this.GetWorldInfo().GetAngle(), C3.toRadians(a))
    }

    function IsBetweenAngles(a, b) {
        const lower = C3.toRadians(a);
        const upper = C3.toRadians(b);
        const angle = this.GetWorldInfo().GetAngle();
        const obtuse = !C3.angleClockwise(upper, lower);
        if (obtuse) return !(!C3.angleClockwise(angle, lower) && C3.angleClockwise(angle, upper));
        else return C3.angleClockwise(angle, lower) && !C3.angleClockwise(angle, upper)
    }

    function SetAngle(a) {
        const wi = this.GetWorldInfo();
        const newAngle = C3.clampAngle(C3.toRadians(a));
        if (isNaN(newAngle) || wi.GetAngle() === newAngle) return;
        wi.SetAngle(newAngle);
        wi.SetBboxChanged()
    }

    function RotateClockwise(a) {
        if (isNaN(a) || a === 0) return;
        const wi = this.GetWorldInfo();
        wi.SetAngle(wi.GetAngle() + C3.toRadians(a));
        wi.SetBboxChanged()
    }

    function RotateCounterclockwise(a) {
        if (isNaN(a) || a === 0) return;
        const wi = this.GetWorldInfo();
        wi.SetAngle(wi.GetAngle() - C3.toRadians(a));
        wi.SetBboxChanged()
    }

    function RotateTowardAngle(amt, target) {
        const wi = this.GetWorldInfo();
        const a = wi.GetAngle();
        const newAngle = C3.angleRotate(a, C3.toRadians(target), C3.toRadians(amt));
        if (isNaN(newAngle) || a === newAngle) return;
        wi.SetAngle(newAngle);
        wi.SetBboxChanged()
    }

    function RotateTowardPosition(amt, x, y) {
        const wi = this.GetWorldInfo();
        const a = wi.GetAngle();
        const dx = x - wi.GetX();
        const dy = y - wi.GetY();
        const target = Math.atan2(dy, dx);
        const newAngle = C3.angleRotate(a, target, C3.toRadians(amt));
        if (isNaN(newAngle) || a === newAngle) return;
        wi.SetAngle(newAngle);
        wi.SetBboxChanged()
    }

    function SetTowardPosition(x, y) {
        const wi = this.GetWorldInfo();
        const a = wi.GetAngle();
        const dx = x - wi.GetX();
        const dy = y - wi.GetY();
        const newAngle = Math.atan2(dy, dx);
        if (isNaN(newAngle) || a === newAngle) return;
        wi.SetAngle(newAngle);
        wi.SetBboxChanged()
    }

    function GetAngle() {
        return C3.toDegrees(this.GetWorldInfo().GetAngle())
    }

    function CompareOpacity(cmp, x) {
        return C3.compare(C3.roundToDp(this.GetWorldInfo().GetOpacity() * 100, 6), cmp, x)
    }

    function IsVisible() {
        return this.GetWorldInfo().IsVisible()
    }

    function SetVisible(v) {
        const wi = this.GetWorldInfo();
        if (v === 2) v = !wi.IsVisible();
        else v = v !== 0;
        if (wi.IsVisible() === v) return;
        wi.SetVisible(v);
        this._runtime.UpdateRender()
    }

    function SetOpacity(o) {
        const newOpacity = C3.clamp(o / 100, 0, 1);
        const wi = this.GetWorldInfo();
        if (wi.GetTransformWithParentOpacity()) {
            if (wi._GetSceneGraphInfo().GetOwnOpacity() === newOpacity) return
        } else if (wi.GetOpacity() === newOpacity) return;
        wi.SetOpacity(newOpacity);
        this._runtime.UpdateRender()
    }

    function SetDefaultColor(rgb) {
        tempColor.setFromRgbValue(rgb);
        const wi = this.GetWorldInfo();
        if (wi.GetUnpremultipliedColor().equalsIgnoringAlpha(tempColor)) return;
        wi.SetUnpremultipliedColor(tempColor);
        this._runtime.UpdateRender()
    }

    function GetColor() {
        const c = this.GetWorldInfo().GetUnpremultipliedColor();
        return C3.PackRGBAEx(c.getR(), c.getG(), c.getB(), c.getA())
    }

    function GetOpacity() {
        return C3.roundToDp(this.GetWorldInfo().GetOpacity() * 100, 6)
    }

    function IsOnLayer(layer) {
        if (!layer) return false;
        return this.GetWorldInfo().GetLayer() === layer
    }

    function PickTopBottom(which) {
        const sol = this.GetCurrentSol();
        const instances = sol.GetInstances();
        if (!instances.length) return false;
        let inst = instances[0];
        let pickme = inst;
        for (let i = 1, len = instances.length; i < len; ++i) {
            const inst = instances[i];
            const instWi = inst.GetWorldInfo();
            const pickmeWi = pickme.GetWorldInfo();
            const instLayerIndex = instWi.GetLayer().GetIndex();
            const pickmeLayerIndex = pickmeWi.GetLayer().GetIndex();
            if (which === 0) {
                if (instLayerIndex > pickmeLayerIndex || instLayerIndex === pickmeLayerIndex && instWi.GetZIndex() >
                    pickmeWi.GetZIndex()) pickme = inst
            } else if (instLayerIndex < pickmeLayerIndex || instLayerIndex === pickmeLayerIndex && instWi.GetZIndex() < pickmeWi.GetZIndex()) pickme = inst
        }
        sol.PickOne(pickme);
        return true
    }

    function CompareZElevation(which, cmp, value) {
        const wi = this.GetWorldInfo();
        const z = which === 0 ? wi.GetZElevation() : wi.GetTotalZElevation();
        return C3.compare(z, cmp, value)
    }

    function MoveToTop() {
        this.GetWorldInfo().ZOrderMoveToTop()
    }

    function MoveToBottom() {
        this.GetWorldInfo().ZOrderMoveToBottom()
    }

    function MoveToLayer(layerMove) {
        if (!layerMove) return;
        this.GetWorldInfo().ZOrderMoveToLayer(layerMove)
    }

    function ZMoveToObject(where, objectClass) {
        const isAfter = where === 0;
        if (!objectClass) return;
        const otherInst = objectClass.GetFirstPicked(this.GetInstance());
        if (!otherInst) return;
        this.GetWorldInfo().ZOrderMoveAdjacentToInstance(otherInst, isAfter)
    }

    function SetZElevation(z) {
        const wi = this.GetWorldInfo();
        if (wi.GetZElevation() === z) return;
        wi.SetZElevation(z);
        this._runtime.UpdateRender()
    }

    function LayerNumber() {
        return this.GetWorldInfo().GetLayer().GetIndex()
    }

    function LayerName() {
        return this.GetWorldInfo().GetLayer().GetName()
    }

    function ZIndex() {
        return this.GetWorldInfo().GetZIndex()
    }

    function ZElevation() {
        return this.GetWorldInfo().GetZElevation()
    }

    function TotalZElevation() {
        return this.GetWorldInfo().GetTotalZElevation()
    }

    function IsEffectEnabled(effectName) {
        const effectType = this.GetObjectClass().GetEffectList().GetEffectTypeByName(effectName);
        if (!effectType) return;
        const effectTypeIndex = effectType.GetIndex();
        const instFxList = this.GetWorldInfo().GetInstanceEffectList();
        return instFxList.IsEffectIndexActive(effectTypeIndex)
    }

    function SetEffectEnabled(enabled, effectName) {
        const effectType = this.GetObjectClass().GetEffectList().GetEffectTypeByName(effectName);
        if (!effectType) return;
        const effectTypeIndex = effectType.GetIndex();
        const e = enabled === 1;
        const instFxList = this.GetWorldInfo().GetInstanceEffectList();
        if (instFxList.IsEffectIndexActive(effectTypeIndex) === e) return;
        instFxList.SetEffectIndexActive(effectTypeIndex, e);
        instFxList.UpdateActiveEffects();
        this._runtime.UpdateRender()
    }

    function SetEffectParam(effectName, paramIndex, value) {
        const effectType = this.GetObjectClass().GetEffectList().GetEffectTypeByName(effectName);
        if (!effectType) return;
        paramIndex = Math.floor(paramIndex);
        const paramType = effectType.GetShaderProgram().GetParameterType(paramIndex);
        if (!paramType) return;
        if (paramType === "color") {
            tempColor.setFromRgbValue(value);
            value = tempColor
        } else if (paramType === "percent") value /= 100;
        const effectTypeIndex = effectType.GetIndex();
        const instFxList = this.GetWorldInfo().GetInstanceEffectList();
        const didChange = instFxList.SetEffectParameter(effectTypeIndex, paramIndex, value);
        if (didChange && instFxList.IsEffectIndexActive(effectTypeIndex)) this._runtime.UpdateRender()
    }
    const tempRect = C3.New(C3.Rect);
    const tempCandidates1 = [];
    const tempCandidates2 = [];
    let needsCollisionFinish = false;
    let rPickType = null;
    let rPickFromElseInstances = false;
    const rToPick = new Set;

    function CollMemory_Add(collMemory, a, b, tickCount) {
        const a_uid = a.GetUID();
        const b_uid = b.GetUID();
        if (a_uid < b_uid) collMemory.Set(a, b, tickCount);
        else collMemory.Set(b, a, tickCount)
    }

    function CollMemory_Remove(collMemory, a, b) {
        const a_uid = a.GetUID();
        const b_uid = b.GetUID();
        if (a_uid < b_uid) collMemory.Delete(a, b);
        else collMemory.Delete(b, a)
    }

    function CollMemory_RemoveInstance(collMemory, inst) {
        collMemory.DeleteEither(inst)
    }

    function CollMemory_Get(collMemory, a, b) {
        const a_uid = a.GetUID();
        const b_uid = b.GetUID();
        if (a_uid < b_uid) return collMemory.Get(a, b);
        else return collMemory.Get(b, a)
    }

    function DoOverlapCondition(sdkInst, rtype, offX, offY) {
        if (!rtype) return false;
        const inst = sdkInst.GetInstance();
        const hasOffset = offX !== 0 || offY !== 0;
        const wi = inst.GetWorldInfo();
        const runtime = inst.GetRuntime();
        const collisionEngine = runtime.GetCollisionEngine();
        const cnd = runtime.GetCurrentCondition();
        const isOrBlock = cnd.GetEventBlock().IsOrBlock();
        const ltype = cnd.GetObjectClass();
        const isInverted = cnd.IsInverted();
        const rsol = rtype.GetCurrentSol();
        const isDifferentTypes = ltype !== rtype;
        rPickType = rtype;
        needsCollisionFinish =
            isDifferentTypes && !isInverted;
        rPickFromElseInstances = false;
        let rinstances;
        let oldX = 0;
        let oldY = 0;
        let ret = false;
        if (rsol.IsSelectAll()) {
            tempRect.copy(wi.GetBoundingBox());
            tempRect.offset(offX, offY);
            collisionEngine.GetCollisionCandidates(wi.GetLayer(), rtype, tempRect, tempCandidates2);
            rinstances = tempCandidates2
        } else if (isOrBlock)
            if (runtime.IsCurrentConditionFirst() && !rsol._GetOwnElseInstances().length && rsol._GetOwnInstances().length) rinstances = rsol._GetOwnInstances();
            else {
                rinstances = rsol._GetOwnElseInstances();
                rPickFromElseInstances = true
            }
        else rinstances = rsol._GetOwnInstances();
        if (hasOffset) {
            oldX = wi.GetX();
            oldY = wi.GetY();
            wi.OffsetXY(offX, offY);
            wi.SetBboxChanged()
        }
        for (const rinst of rinstances)
            if (collisionEngine.TestOverlap(inst, rinst)) {
                ret = true;
                if (isInverted) break;
                if (isDifferentTypes) rToPick.add(rinst)
            }
        if (hasOffset) {
            wi.SetXY(oldX, oldY);
            wi.SetBboxChanged()
        }
        C3.clearArray(tempCandidates2);
        return ret
    }

    function FinishCollisionConditionPicking(type) {
        const isOrBlock = type.GetRuntime().GetCurrentEvent().IsOrBlock();
        const sol = rPickType.GetCurrentSol();
        const solInstances = sol._GetOwnInstances();
        const solElseInstances = sol._GetOwnElseInstances();
        if (sol.IsSelectAll()) {
            sol.SetSetPicked(rToPick);
            if (isOrBlock) {
                C3.clearArray(solElseInstances);
                sol.AddElseInstances(rToPick, rPickType.GetInstances())
            }
        } else if (isOrBlock)
            if (rPickFromElseInstances) sol.TransferElseInstancesToOwn(rToPick);
            else {
                sol.AddElseInstances(rToPick,
                    solInstances);
                sol.SetSetPicked(rToPick)
            }
        else sol.SetSetPicked(rToPick);
        rPickType.ApplySolToContainer()
    }

    function FinishCollisionCondition(type, doPick) {
        if (!needsCollisionFinish) return;
        if (doPick) FinishCollisionConditionPicking(type);
        rToPick.clear();
        rPickType = null;
        needsCollisionFinish = false
    }

    function OnCollision(rtype) {
        if (this._runtime.IsDebugging()) return DebugOnCollision.call(this, rtype);
        if (!rtype) return false;
        const runtime = this._runtime;
        const collisionEngine = runtime.GetCollisionEngine();
        const eventSheetManager = runtime.GetEventSheetManager();
        const eventStack = eventSheetManager.GetEventStack();
        const cnd = eventSheetManager.GetCurrentCondition();
        const ltype = cnd.GetObjectClass();
        const savedData = cnd.GetSavedDataMap();
        const unsavedData = cnd.GetUnsavedDataMap();
        const oldFrame = eventStack.GetCurrentStackFrame();
        const tickCount = runtime.GetTickCount();
        const lastTickCount = tickCount - 1;
        const currentEvent = oldFrame.GetCurrentEvent();
        const newFrame = eventStack.Push(currentEvent);
        let collMemory = savedData.get("collmemory");
        if (!collMemory) {
            collMemory = C3.New(C3.PairMap);
            savedData.set("collmemory", collMemory)
        }
        if (!unsavedData.get("collisionCreatedDestroyCallback")) {
            unsavedData.set("collisionCreatedDestroyCallback", true);
            runtime.Dispatcher().addEventListener("instancedestroy", e => CollMemory_RemoveInstance(collMemory, e.instance))
        }
        const lsol =
            ltype.GetCurrentSol();
        const rsol = rtype.GetCurrentSol();
        const linstances = lsol.GetInstances();
        let rinstances = null;
        for (let l = 0; l < linstances.length; ++l) {
            const linst = linstances[l];
            if (rsol.IsSelectAll()) {
                collisionEngine.GetCollisionCandidates(linst.GetWorldInfo().GetLayer(), rtype, linst.GetWorldInfo().GetBoundingBox(), tempCandidates1);
                rinstances = tempCandidates1;
                collisionEngine.AddRegisteredCollisionCandidates(linst, rtype, rinstances)
            } else rinstances = rsol.GetInstances();
            for (let r = 0; r < rinstances.length; ++r) {
                const rinst =
                    rinstances[r];
                if (collisionEngine.TestOverlap(linst, rinst) || collisionEngine.CheckRegisteredCollision(linst, rinst)) {
                    const entry = CollMemory_Get(collMemory, linst, rinst);
                    let entryExists = false;
                    let lastCollTickCount = -2;
                    if (typeof entry === "number") {
                        entryExists = true;
                        lastCollTickCount = entry
                    }
                    const shouldRun = !entryExists || lastCollTickCount < lastTickCount;
                    CollMemory_Add(collMemory, linst, rinst, tickCount);
                    if (shouldRun) {
                        const solModifiers = currentEvent.GetSolModifiers();
                        eventSheetManager.PushCopySol(solModifiers);
                        const curlsol =
                            ltype.GetCurrentSol();
                        const currsol = rtype.GetCurrentSol();
                        curlsol._SetSelectAll(false);
                        currsol._SetSelectAll(false);
                        if (ltype === rtype) {
                            const solInstances = curlsol._GetOwnInstances();
                            C3.clearArray(solInstances);
                            solInstances.push(linst);
                            solInstances.push(rinst);
                            ltype.ApplySolToContainer()
                        } else {
                            const lsolInstances = curlsol._GetOwnInstances();
                            const rsolInstances = currsol._GetOwnInstances();
                            C3.clearArray(lsolInstances);
                            C3.clearArray(rsolInstances);
                            lsolInstances.push(linst);
                            rsolInstances.push(rinst);
                            ltype.ApplySolToContainer();
                            rtype.ApplySolToContainer()
                        }
                        currentEvent.Retrigger(oldFrame, newFrame);
                        eventSheetManager.PopSol(solModifiers)
                    }
                } else CollMemory_Remove(collMemory, linst, rinst)
            }
            C3.clearArray(tempCandidates1)
        }
        eventStack.Pop();
        return false
    }

    function* DebugOnCollision(rtype) {
        if (!rtype) return false;
        const runtime = this._runtime;
        const collisionEngine = runtime.GetCollisionEngine();
        const eventSheetManager = runtime.GetEventSheetManager();
        const eventStack = eventSheetManager.GetEventStack();
        const cnd = eventSheetManager.GetCurrentCondition();
        const ltype = cnd.GetObjectClass();
        const savedData = cnd.GetSavedDataMap();
        const unsavedData = cnd.GetUnsavedDataMap();
        const oldFrame = eventStack.GetCurrentStackFrame();
        const tickCount = runtime.GetTickCount();
        const lastTickCount =
            tickCount - 1;
        const currentEvent = oldFrame.GetCurrentEvent();
        const newFrame = eventStack.Push(currentEvent);
        let collMemory = savedData.get("collmemory");
        if (!collMemory) {
            collMemory = C3.New(C3.PairMap);
            savedData.set("collmemory", collMemory)
        }
        if (!unsavedData.get("collisionCreatedDestroyCallback")) {
            unsavedData.set("collisionCreatedDestroyCallback", true);
            runtime.Dispatcher().addEventListener("instancedestroy", e => CollMemory_RemoveInstance(collMemory, e.instance))
        }
        const lsol = ltype.GetCurrentSol();
        const rsol = rtype.GetCurrentSol();
        const linstances = lsol.GetInstances();
        let rinstances = null;
        for (let l = 0; l < linstances.length; ++l) {
            const linst = linstances[l];
            if (rsol.IsSelectAll()) {
                collisionEngine.GetCollisionCandidates(linst.GetWorldInfo().GetLayer(), rtype, linst.GetWorldInfo().GetBoundingBox(), tempCandidates1);
                rinstances = tempCandidates1;
                collisionEngine.AddRegisteredCollisionCandidates(linst, rtype, rinstances)
            } else rinstances = rsol.GetInstances();
            for (let r = 0; r < rinstances.length; ++r) {
                const rinst = rinstances[r];
                if (collisionEngine.TestOverlap(linst,
                        rinst) || collisionEngine.CheckRegisteredCollision(linst, rinst)) {
                    const entry = CollMemory_Get(collMemory, linst, rinst);
                    let entryExists = false;
                    let lastCollTickCount = -2;
                    if (typeof entry === "number") {
                        entryExists = true;
                        lastCollTickCount = entry
                    }
                    const shouldRun = !entryExists || lastCollTickCount < lastTickCount;
                    CollMemory_Add(collMemory, linst, rinst, tickCount);
                    if (shouldRun) {
                        const solModifiers = currentEvent.GetSolModifiers();
                        eventSheetManager.PushCopySol(solModifiers);
                        const curlsol = ltype.GetCurrentSol();
                        const currsol = rtype.GetCurrentSol();
                        curlsol._SetSelectAll(false);
                        currsol._SetSelectAll(false);
                        if (ltype === rtype) {
                            const solInstances = curlsol._GetOwnInstances();
                            C3.clearArray(solInstances);
                            solInstances.push(linst);
                            solInstances.push(rinst);
                            ltype.ApplySolToContainer()
                        } else {
                            const lsolInstances = curlsol._GetOwnInstances();
                            const rsolInstances = currsol._GetOwnInstances();
                            C3.clearArray(lsolInstances);
                            C3.clearArray(rsolInstances);
                            lsolInstances.push(linst);
                            rsolInstances.push(rinst);
                            ltype.ApplySolToContainer();
                            rtype.ApplySolToContainer()
                        }
                        yield* currentEvent.DebugRetrigger(oldFrame,
                            newFrame);
                        eventSheetManager.PopSol(solModifiers)
                    }
                } else CollMemory_Remove(collMemory, linst, rinst)
            }
            C3.clearArray(tempCandidates1)
        }
        eventStack.Pop();
        return false
    }

    function IsOverlapping(rtype) {
        return DoOverlapCondition(this, rtype, 0, 0)
    }

    function IsOverlappingOffset(rtype, offX, offY) {
        return DoOverlapCondition(this, rtype, offX, offY)
    }

    function HasParent() {
        return this.GetWorldInfo().HasParent()
    }

    function HasChildren() {
        return this.GetWorldInfo().HasChildren()
    }

    function PickParent(parentObjectClass, which) {
        const mySol = this.GetCurrentSol();
        const myInstances = mySol.GetInstances();
        if (myInstances.length === 0) return false;
        const parentSol = parentObjectClass.GetCurrentSol();
        let parentInstances = parentSol.GetInstances();
        if (parentSol.IsSelectAll()) {
            const parentInstsPendingCreate = [...this._runtime.instancesPendingCreateForObjectClass(parentObjectClass)];
            if (parentInstsPendingCreate.length > 0) parentInstances = parentInstances.concat(parentInstsPendingCreate)
        }
        if (parentInstances.length ===
            0) return false;
        const parentInstancesSet = new Set(parentInstances);
        const pickParents = new Set;
        for (let i = 0, len = myInstances.length; i < len; ++i) {
            const myInst = myInstances[i];
            if (which === 1)
                for (const parentInst of myInst.parents()) {
                    if (parentInst.BelongsToObjectClass(parentObjectClass) && parentInstancesSet.has(parentInst)) pickParents.add(parentInst)
                } else {
                    let parentInst;
                    if (which === 0) {
                        parentInst = myInst.GetParent();
                        if (parentInst === null) continue
                    } else parentInst = myInst.GetTopParent();
                    if (parentInst.BelongsToObjectClass(parentObjectClass) &&
                        parentInstancesSet.has(parentInst)) pickParents.add(parentInst)
                }
        }
        if (pickParents.size === 0) return false;
        parentSol.SetSetPicked(pickParents);
        parentObjectClass.ApplySolToContainer();
        return true
    }

    function PickChildren(childObjectClass, which) {
        const mySol = this.GetCurrentSol();
        const myInstances = mySol.GetInstances();
        if (myInstances.length === 0) return false;
        const childSol = childObjectClass.GetCurrentSol();
        let childInstances = childSol.GetInstances();
        if (childSol.IsSelectAll()) {
            const childInstsPendingCreate = [...this._runtime.instancesPendingCreateForObjectClass(childObjectClass)];
            if (childInstsPendingCreate.length > 0) childInstances = childInstances.concat(childInstsPendingCreate)
        }
        if (childInstances.length ===
            0) return false;
        const childInstancesSet = new Set(childInstances);
        const pickChildren = new Set;
        for (let i = 0, len = myInstances.length; i < len; ++i) {
            const myInst = myInstances[i];
            if (which === 2 && !myInst.HasChildren() && myInst.BelongsToObjectClass(childObjectClass) && childInstancesSet.has(myInst)) pickChildren.add(myInst);
            for (const childInst of which === 0 ? myInst.children() : myInst.allChildren()) {
                if (which === 2 && childInst.HasChildren()) continue;
                if (childInst.BelongsToObjectClass(childObjectClass) && childInstancesSet.has(childInst)) pickChildren.add(childInst)
            }
        }
        if (pickChildren.size ===
            0) return false;
        childSol.SetSetPicked(pickChildren);
        childObjectClass.ApplySolToContainer();
        return true
    }

    function PickNthChild(childObjectClass, index) {
        const mySol = this.GetCurrentSol();
        const myInstances = mySol.GetInstances();
        if (myInstances.length === 0) return false;
        const childSol = childObjectClass.GetCurrentSol();
        let childInstances = childSol.GetInstances();
        if (childSol.IsSelectAll()) {
            const childInstsPendingCreate = [...this._runtime.instancesPendingCreateForObjectClass(childObjectClass)];
            if (childInstsPendingCreate.length > 0) childInstances = childInstances.concat(childInstsPendingCreate)
        }
        if (childInstances.length ===
            0) return false;
        const childInstancesSet = new Set(childInstances);
        const pickChildren = [];
        for (let i = 0, len = myInstances.length; i < len; ++i) {
            const myInst = myInstances[i];
            const childInst = myInst.GetChildAt(index);
            if (childInst !== null && childInst.BelongsToObjectClass(childObjectClass) && childInstancesSet.has(childInst)) pickChildren.push(childInst)
        }
        if (pickChildren.length === 0) return false;
        childSol.SetArrayPicked(pickChildren);
        childObjectClass.ApplySolToContainer();
        return true
    }

    function CompareChildCount(which, cmp, count) {
        switch (which) {
            case 0:
            default:
                {
                    return C3.compare(this._inst.GetChildCount(), cmp, count)
                }
            case 1:
                {
                    return C3.compare(this._inst.GetAllChildCount(), cmp, count)
                }
        }
    }

    function AddChild(childObjectClass, transformX, transformY, transformWidth, transformHeight, transformAngle, transformOpacity, transformZElevation, transformVisibility, destroyWithParent) {
        const inst = this._inst;
        const actObjectClass = this._runtime.GetCurrentAction().GetObjectClass();
        for (const child of childObjectClass.allCorrespondingInstances(inst, actObjectClass)) {
            if (!child.GetPlugin().SupportsSceneGraph()) return;
            inst.AddChild(child, {
                transformX,
                transformY,
                transformWidth,
                transformHeight,
                transformAngle,
                transformOpacity,
                transformZElevation,
                transformVisibility,
                destroyWithParent
            })
        }
    }

    function RemoveChild(childObjectClass) {
        const inst = this._inst;
        const actObjectClass = this._runtime.GetCurrentAction().GetObjectClass();
        for (const child of childObjectClass.allCorrespondingInstances(inst, actObjectClass)) inst.RemoveChild(child)
    }

    function RemoveFromParent() {
        if (!this._inst.HasParent()) return;
        const parent = this._inst.GetParent();
        parent.RemoveChild(this._inst)
    }

    function ChildCount() {
        return this._inst.GetChildCount()
    }

    function AllChildCount() {
        return this._inst.GetAllChildCount()
    }

    function SetMeshSize(cols, rows) {
        cols = Math.floor(cols);
        rows = Math.floor(rows);
        const wi = this.GetWorldInfo();
        if (cols < 2 || rows < 2 || !isFinite(cols) || !isFinite(rows)) {
            wi.ReleaseMesh();
            wi.SetBboxChanged()
        } else wi.CreateMesh(cols, rows)
    }

    function SetMeshPoint(col, row, mode, posx, posy, zElevation, texu, texv) {
        const wi = this.GetWorldInfo();
        const didBboxChange = wi.SetMeshPoint(col, row, {
            mode: mode === 0 ? "absolute" : "relative",
            x: posx,
            y: posy,
            zElevation,
            u: texu,
            v: texv
        });
        if (didBboxChange) wi.SetBboxChanged()
    }

    function MeshColumns() {
        const wi = this.GetWorldInfo();
        return wi.HasMesh() ? wi.GetSourceMesh().GetHSize() : 0
    }

    function MeshRows() {
        const wi = this.GetWorldInfo();
        return wi.HasMesh() ? wi.GetSourceMesh().GetVSize() : 0
    }

    function SetElementVisible(v) {
        const wi = this.GetWorldInfo();
        if (v === 2) v = !wi.IsVisible();
        else v = v !== 0;
        if (wi.IsVisible() === v) return;
        wi.SetVisible(v)
    }

    function SetElementCSSStyle(prop, val) {
        this.SetElementCSSStyle(prop, val)
    }

    function SetElementAttribute(attribName, value) {
        this.SetElementAttribute(attribName, "" + value)
    }

    function RemoveElementAttribute(attribName) {
        this.RemoveElementAttribute(attribName)
    }

    function SetElementFocus() {
        this.FocusElement()
    }

    function SetElementBlur() {
        this.BlurElement()
    }

    function IsElementFocused() {
        return this.IsElementFocused()
    }

    function SetElementEnabled(e) {
        this._SetEnabled(e !== 0)
    }

    function IsElementEnabled() {
        return this._IsEnabled()
    }

    function CompareInstanceVar(iv, cmp, val) {
        return C3.compare(this.GetInstance().GetInstanceVariableValue(iv), cmp, val)
    }

    function IsBoolInstanceVarSet(iv) {
        return !!this.GetInstance().GetInstanceVariableValue(iv)
    }

    function TemplateName() {
        return this.GetInstance().GetTemplateName()
    }

    function PickInstVarHiLow(which, iv) {
        const sol = this.GetCurrentSol();
        const instances = sol.GetInstances();
        if (!instances.length) return false;
        const isFamily = this.IsFamily();
        let pickInst = null;
        let bestVal = 0;
        for (let i = 0, len = instances.length; i < len; ++i) {
            const inst = instances[i];
            const offset = isFamily ? inst.GetObjectClass().GetFamilyInstanceVariableOffset(this.GetFamilyIndex()) : 0;
            const v = inst.GetInstanceVariableValue(offset + iv);
            if (pickInst === null || which === 0 && v < bestVal || which === 1 && v > bestVal) {
                bestVal = v;
                pickInst = inst
            }
        }
        sol.PickOne(pickInst);
        return true
    }

    function PickByUID(uid) {
        if (this._runtime.GetCurrentCondition().IsInverted()) return PickByUID_Inverted(this, uid);
        else return PickByUID_Normal(this, uid)
    }

    function PickByUID_Normal(objectClass, uid) {
        const inst = objectClass.GetRuntime().GetInstanceByUID(uid);
        if (!inst) return false;
        const sol = objectClass.GetCurrentSol();
        if (!sol.IsSelectAll() && !sol._GetOwnInstances().includes(inst)) return false;
        if (objectClass.IsFamily()) {
            if (inst.GetObjectClass().BelongsToFamily(objectClass)) {
                sol.PickOne(inst);
                objectClass.ApplySolToContainer();
                return true
            }
        } else if (inst.GetObjectClass() === objectClass) {
            sol.PickOne(inst);
            objectClass.ApplySolToContainer();
            return true
        }
        return false
    }

    function PickByUID_Inverted(objectClass, uid) {
        const sol = objectClass.GetCurrentSol();
        if (sol.IsSelectAll()) {
            sol._SetSelectAll(false);
            sol.ClearArrays();
            const instances = objectClass.GetInstances();
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst = instances[i];
                if (inst.GetUID() === uid) sol._PushElseInstance(inst);
                else sol._PushInstance(inst)
            }
            objectClass.ApplySolToContainer();
            return !!sol._GetOwnInstances().length
        } else {
            const instances = sol._GetOwnInstances();
            let j = 0;
            for (let i = 0, len = instances.length; i < len; ++i) {
                const inst =
                    instances[i];
                instances[j] = inst;
                if (inst.GetUID() === uid) sol._PushElseInstance(inst);
                else ++j
            }
            C3.truncateArray(instances, j);
            objectClass.ApplySolToContainer();
            return !!instances.length
        }
    }

    function Destroy() {
        this._runtime.DestroyInstance(this._inst)
    }

    function OnCreated() {
        return true
    }

    function OnDestroyed() {
        return true
    }

    function SetInstanceVar(iv, value) {
        this.GetInstance().SetInstanceVariableValue(iv, value)
    }

    function AddInstanceVar(iv, value) {
        const instance = this.GetInstance();
        const lastValue = instance.GetInstanceVariableValue(iv);
        if (typeof lastValue === "number" && typeof value !== "number") value = parseFloat(value);
        else if (typeof lastValue === "string" && typeof value !== "string") value = value.toString();
        instance.SetInstanceVariableValue(iv, lastValue + value)
    }

    function SubInstanceVar(iv, value) {
        const instance = this.GetInstance();
        const lastValue = instance.GetInstanceVariableValue(iv);
        if (typeof lastValue !== "number") return;
        if (typeof value !== "number") value = parseFloat(value);
        instance.SetInstanceVariableValue(iv, lastValue - value)
    }

    function SetBoolInstanceVar(iv, value) {
        this.GetInstance().SetInstanceVariableValue(iv, value ? 1 : 0)
    }

    function ToggleBoolInstanceVar(iv) {
        const instance = this.GetInstance();
        instance.SetInstanceVariableValue(iv, instance.GetInstanceVariableValue(iv) === 0 ? 1 : 0)
    }

    function LoadFromJsonString(str) {
        let o;
        try {
            o = JSON.parse(str)
        } catch (err) {
            console.error("Failed to load from JSON string: ", err);
            return
        }
        const inst = this.GetInstance();
        const mode = "state";
        inst._OnBeforeLoad(mode);
        inst.LoadFromJson(o, mode);
        const event = C3.New(C3.Event, "afterloadinstance");
        event["instance"] = inst;
        this._runtime.Dispatcher().dispatchEvent(event)
    }

    function AsJSON() {
        return JSON.stringify(this.GetInstance().SaveToJson("state"))
    }

    function ObjectTypeName() {
        return this.GetInstance().GetObjectClass().GetName()
    }

    function Count() {
        const expObjectClass = this._runtime.GetCurrentEventStackFrame().GetExpressionObjectClass();
        let count = expObjectClass.GetInstanceCount();
        for (const inst of this._runtime.instancesPendingCreateForObjectClass(expObjectClass)) ++count;
        return count
    }

    function PickedCount() {
        return this._runtime.GetCurrentEventStackFrame().GetExpressionObjectClass().GetCurrentSol().GetInstances().length
    }

    function GetIID() {
        return this._inst.GetIID()
    }

    function GetUID() {
        return this._inst.GetUID()
    }
    C3.AddCommonACEs = function AddCommonACEs(pluginData, pluginCtor) {
        const isSingleGlobal = pluginData[1];
        const hasPositionACEs = pluginData[3];
        const hasSizeACEs = pluginData[4];
        const hasAngleACEs = pluginData[5];
        const hasAppearanceACEs = pluginData[6];
        const hasZOrderACEs = pluginData[7];
        const hasEffectsACEs = pluginData[8];
        const hasElementACEs = pluginData[10];
        const hasElementFocusACEs = pluginData[11];
        const hasElementEnabledACEs = pluginData[12];
        const hasSceneGraphACEs = pluginData[13];
        const hasMeshACEs = pluginData[14];
        const hasCollisionACEs =
            pluginData[15];
        const hasTemplateACEs = pluginData[16];
        const Cnds = pluginCtor.Cnds;
        const Acts = pluginCtor.Acts;
        const Exps = pluginCtor.Exps;
        if (hasPositionACEs) {
            Cnds.CompareX = CompareX;
            Cnds.CompareY = CompareY;
            Cnds.IsOnScreen = IsOnScreen;
            Cnds.IsOutsideLayout = IsOutsideLayout;
            Cnds.PickDistance = PickDistance;
            Acts.SetX = SetX;
            Acts.SetY = SetY;
            Acts.SetPos = SetPos;
            Acts.SetPosToObject = SetPosToObject;
            Acts.MoveForward = MoveForward;
            Acts.MoveAtAngle = MoveAtAngle;
            Exps.X = GetX;
            Exps.Y = GetY;
            Exps.dt = GetDt
        }
        if (hasSizeACEs) {
            Cnds.CompareWidth =
                CompareWidth;
            Cnds.CompareHeight = CompareHeight;
            Acts.SetWidth = SetWidth;
            Acts.SetHeight = SetHeight;
            Acts.SetSize = SetSize;
            Exps.Width = GetWidth;
            Exps.Height = GetHeight;
            Exps.BBoxLeft = GetBboxLeft;
            Exps.BBoxTop = GetBboxTop;
            Exps.BBoxRight = GetBboxRight;
            Exps.BBoxBottom = GetBboxBottom;
            Exps.BBoxMidX = GetBboxMidX;
            Exps.BBoxMidY = GetBboxMidY
        }
        if (hasAngleACEs) {
            Cnds.AngleWithin = IsAngleWithin;
            Cnds.IsClockwiseFrom = IsAngleClockwiseFrom;
            Cnds.IsBetweenAngles = IsBetweenAngles;
            Acts.SetAngle = SetAngle;
            Acts.RotateClockwise = RotateClockwise;
            Acts.RotateCounterclockwise = RotateCounterclockwise;
            Acts.RotateTowardAngle = RotateTowardAngle;
            Acts.RotateTowardPosition = RotateTowardPosition;
            Acts.SetTowardPosition = SetTowardPosition;
            Exps.Angle = GetAngle
        }
        if (hasAppearanceACEs) {
            Cnds.IsVisible = IsVisible;
            Cnds.CompareOpacity = CompareOpacity;
            Acts.SetVisible = SetVisible;
            Acts.SetOpacity = SetOpacity;
            Acts.SetDefaultColor = SetDefaultColor;
            Exps.Opacity = GetOpacity;
            Exps.ColorValue = GetColor
        }
        if (hasZOrderACEs) {
            Cnds.IsOnLayer = IsOnLayer;
            Cnds.PickTopBottom = PickTopBottom;
            Cnds.CompareZElevation =
                CompareZElevation;
            Acts.MoveToTop = MoveToTop;
            Acts.MoveToBottom = MoveToBottom;
            Acts.MoveToLayer = MoveToLayer;
            Acts.ZMoveToObject = ZMoveToObject;
            Acts.SetZElevation = SetZElevation;
            Exps.LayerNumber = LayerNumber;
            Exps.LayerName = LayerName;
            Exps.ZIndex = ZIndex;
            Exps.ZElevation = ZElevation;
            Exps.TotalZElevation = TotalZElevation
        }
        if (hasEffectsACEs) {
            Cnds.IsEffectEnabled = IsEffectEnabled;
            Acts.SetEffectEnabled = SetEffectEnabled;
            Acts.SetEffectParam = SetEffectParam
        }
        if (hasSceneGraphACEs) {
            Cnds.HasParent = HasParent;
            Cnds.HasChildren = HasChildren;
            Cnds.PickParent = PickParent;
            Cnds.PickChildren = PickChildren;
            Cnds.PickNthChild = PickNthChild;
            Cnds.CompareChildCount = CompareChildCount;
            Acts.AddChild = AddChild;
            Acts.RemoveChild = RemoveChild;
            Acts.RemoveFromParent = RemoveFromParent;
            Exps.ChildCount = ChildCount;
            Exps.AllChildCount = AllChildCount
        }
        if (hasMeshACEs) {
            Acts.SetMeshSize = SetMeshSize;
            Acts.SetMeshPoint = SetMeshPoint;
            Exps.MeshColumns = MeshColumns;
            Exps.MeshRows = MeshRows
        }
        if (hasElementACEs) {
            Cnds.IsVisible = IsVisible;
            Acts.SetVisible = SetElementVisible;
            Acts.SetCSSStyle =
                SetElementCSSStyle;
            Acts.SetElemAttribute = SetElementAttribute;
            Acts.RemoveElemAttribute = RemoveElementAttribute
        }
        if (hasElementFocusACEs) {
            Cnds.IsFocused = IsElementFocused;
            Acts.SetFocus = SetElementFocus;
            Acts.SetBlur = SetElementBlur
        }
        if (hasElementEnabledACEs) {
            Cnds.IsEnabled = IsElementEnabled;
            Acts.SetEnabled = SetElementEnabled
        }
        if (hasCollisionACEs) {
            Cnds.OnCollision = OnCollision;
            Cnds.IsOverlapping = IsOverlapping;
            Cnds.IsOverlappingOffset = IsOverlappingOffset;
            pluginCtor.FinishCollisionCondition = FinishCollisionCondition
        }
        if (!isSingleGlobal) {
            Cnds.CompareInstanceVar =
                CompareInstanceVar;
            Cnds.IsBoolInstanceVarSet = IsBoolInstanceVarSet;
            Cnds.PickInstVarHiLow = PickInstVarHiLow;
            Cnds.PickByUID = PickByUID;
            Acts.SetInstanceVar = SetInstanceVar;
            Acts.AddInstanceVar = AddInstanceVar;
            Acts.SubInstanceVar = SubInstanceVar;
            Acts.SetBoolInstanceVar = SetBoolInstanceVar;
            Acts.ToggleBoolInstanceVar = ToggleBoolInstanceVar;
            Cnds.OnCreated = OnCreated;
            Cnds.OnDestroyed = OnDestroyed;
            Acts.Destroy = Destroy;
            if (!Acts.LoadFromJsonString) Acts.LoadFromJsonString = LoadFromJsonString;
            if (!Exps.AsJSON) Exps.AsJSON =
                AsJSON;
            Exps.Count = Count;
            Exps.PickedCount = PickedCount;
            Exps.IID = GetIID;
            Exps.UID = GetUID;
            Exps.ObjectTypeName = ObjectTypeName
        }
        if (hasTemplateACEs) Exps.TemplateName = TemplateName
    };

}

// events/scheduledWait.js
{
    'use strict';
    const C3 = self.C3;
    C3.ScheduledWait = class ScheduledWait extends C3.DefendedBase {
        constructor(eventSheetManager) {
            super();
            this._eventSheetManager = eventSheetManager;
            this._type = "";
            this._time = -1;
            this._signalTag = "";
            this._isSignalled = false;
            this._event = null;
            this._actIndex = 0;
            this._solModifiers = [];
            this._dynamicSolModifiers = null;
            this._sols = new Map;
            this._callingFunctionBlock = null;
            this._asyncId = -1;
            this._functionParameters = null;
            this._functionInnerLocalVars = null;
            this._shouldRelease = false
        }
        Release() {
            this._type = "";
            this._time = -1;
            this._signalTag =
                "";
            this._event = null;
            this._callingFunctionBlock = null;
            this._functionParameters = null;
            this._functionInnerLocalVars = null;
            this._asyncId = -1;
            C3.clearArray(this._solModifiers);
            if (this._dynamicSolModifiers) {
                this._dynamicSolModifiers.clear();
                this._dynamicSolModifiers = null
            }
            for (const s of this._sols.values()) s.Release();
            this._sols.clear()
        }
        _Init() {
            const eventSheetManager = this._eventSheetManager;
            const allObjectClasses = eventSheetManager.GetRuntime().GetAllObjectClasses();
            const frame = eventSheetManager.GetCurrentEventStackFrame();
            this._event = frame.GetCurrentEvent();
            this._actIndex = frame.GetActionIndex() + 1;
            const functionBlock = eventSheetManager.FindFirstFunctionBlockParent(this._event);
            if (functionBlock) {
                this._callingFunctionBlock = functionBlock;
                this._functionParameters = functionBlock.CaptureFunctionParameters();
                this._functionInnerLocalVars = functionBlock._GetAllInnerLocalVariables().map(v => v.GetValue());
                if (functionBlock.IsAsync()) this._asyncId = functionBlock.PauseCurrentAsyncFunction()
            }
            for (const objectClass of allObjectClasses) {
                const sol =
                    objectClass.GetCurrentSol();
                if (sol.IsSelectAll() && !this._event.HasSolModifier(objectClass)) continue;
                this._solModifiers.push(objectClass);
                this._sols.set(objectClass, C3.New(C3.SolState, sol))
            }
            const dynamicSolModifiersSet = eventSheetManager.GetDynamicSolModifiersSet();
            this._dynamicSolModifiers = dynamicSolModifiersSet.size > 0 ? dynamicSolModifiersSet : null
        }
        InitTimer(seconds) {
            this._type = "timer";
            this._Init();
            this._time = this._eventSheetManager.GetRuntime().GetGameTime() + seconds
        }
        InitSignal(tag) {
            this._type = "signal";
            this._Init();
            this._signalTag = tag.toLowerCase()
        }
        InitPromise(p) {
            this._type = "promise";
            this._Init();
            p.then(() => this.SetSignalled()).catch(err => {
                console.warn("[C3 runtime] Promise rejected in 'Wait for previous actions to complete': ", err);
                this.SetSignalled()
            })
        }
        IsTimer() {
            return this._type === "timer"
        }
        IsSignal() {
            return this._type === "signal"
        }
        IsPromise() {
            return this._type === "promise"
        }
        GetSignalTag() {
            return this._signalTag
        }
        IsSignalled() {
            return this._isSignalled
        }
        SetSignalled() {
            this._isSignalled = true
        }
        _ShouldRun() {
            if (this.IsTimer()) return this._time <=
                this._eventSheetManager.GetRuntime().GetGameTime();
            else return this.IsSignalled()
        }
        _RestoreState(frame) {
            frame._Restore(this._event, this._actIndex);
            for (const [objectClass, solState] of this._sols.entries()) {
                const sol = objectClass.GetCurrentSol();
                solState._Restore(sol)
            }
            if (this._dynamicSolModifiers) frame.SetDynamicSolModifiers([...this._dynamicSolModifiers]);
            const callingFunctionBlock = this._callingFunctionBlock;
            if (callingFunctionBlock) {
                callingFunctionBlock.SetFunctionParameters(this._functionParameters);
                callingFunctionBlock._GetAllInnerLocalVariables().map((v, index) => v.SetValue(this._functionInnerLocalVars[index]));
                if (callingFunctionBlock.IsAsync()) callingFunctionBlock.ResumeAsyncFunction(this._asyncId)
            }
        }
        _Run(frame) {
            this._RestoreState(frame);
            this._event._ResumeActionsAndSubEvents(frame);
            if (this._callingFunctionBlock && this._callingFunctionBlock.IsAsync()) this._callingFunctionBlock.MaybeFinishAsyncFunctionCall(this._asyncId);
            this._eventSheetManager.ClearSol(this._solModifiers);
            this._shouldRelease =
                true
        }
        async _DebugRun(frame) {
            this._RestoreState(frame);
            for (const breakEventObject of this._event._DebugResumeActionsAndSubEvents(frame)) await this._eventSheetManager.GetRuntime().DebugBreak(breakEventObject);
            if (this._callingFunctionBlock && this._callingFunctionBlock.IsAsync()) this._callingFunctionBlock.MaybeFinishAsyncFunctionCall(this._asyncId);
            this._eventSheetManager.ClearSol(this._solModifiers);
            this._shouldRelease = true
        }
        ShouldRelease() {
            return this._shouldRelease
        }
        RemoveInstances(s) {
            for (const solState of this._sols.values()) solState.RemoveInstances(s)
        }
        _SaveToJson() {
            const sols = {};
            const o = {
                "t": this._time,
                "st": this._signalTag,
                "s": this._isSignalled,
                "ev": this._event.GetSID(),
                "sm": this._solModifiers.map(oc => oc.GetSID()),
                "dsm": this._dynamicSolModifiers ? [...this._dynamicSolModifiers].map(oc => oc.GetSID()) : null,
                "sols": sols
            };
            if (this._event._HasActionIndex(this._actIndex)) o["act"] = this._event.GetActionAt(this._actIndex).GetSID();
            for (const [objectClass, solState] of this._sols) sols[objectClass.GetSID().toString()] = solState._SaveToJson();
            return o
        }
        static _CreateFromJson(eventSheetManager,
            o) {
            const runtime = eventSheetManager.GetRuntime();
            const event = eventSheetManager.GetEventBlockBySID(o["ev"]);
            if (!event) return null;
            let actIndex = 0;
            if (o.hasOwnProperty("act")) {
                const act = eventSheetManager.GetActionBySID(o["act"]);
                if (!act) return null;
                actIndex = act.GetIndex()
            }
            const sw = C3.New(C3.ScheduledWait, eventSheetManager);
            sw._time = o["t"];
            sw._type = sw._time === -1 ? "signal" : "timer";
            sw._signalTag = o["st"];
            sw._isSignalled = o["s"];
            sw._event = event;
            sw._actIndex = actIndex;
            for (const sid of o["sm"]) {
                const objectClass =
                    runtime.GetObjectClassBySID(sid);
                if (objectClass) sw._solModifiers.push(objectClass)
            }
            if (Array.isArray(o["dsm"]))
                for (const sid of o["dsm"]) {
                    const objectClass = runtime.GetObjectClassBySID(sid);
                    if (objectClass) {
                        if (!sw._dynamicSolModifiers) sw._dynamicSolModifiers = new Set;
                        sw._dynamicSolModifiers.add(objectClass)
                    }
                }
            for (const [sidStr, solData] of Object.entries(o["sols"])) {
                const sid = parseInt(sidStr, 10);
                const objectClass = runtime.GetObjectClassBySID(sid);
                if (!objectClass) continue;
                const solState = C3.New(C3.SolState,
                    null);
                solState._LoadFromJson(eventSheetManager, solData);
                sw._sols.set(objectClass, solState)
            }
            return sw
        }
    };

}

// events/solState.js
{
    'use strict';
    const C3 = self.C3;
    C3.SolState = class SolState extends C3.DefendedBase {
        constructor(sol) {
            super();
            this._objectClass = null;
            this._isSelectAll = true;
            this._instances = [];
            if (sol) {
                this._objectClass = sol.GetObjectClass();
                this._isSelectAll = sol.IsSelectAll();
                C3.shallowAssignArray(this._instances, sol._GetOwnInstances())
            }
        }
        Release() {
            this._objectClass = null;
            C3.clearArray(this._instances)
        }
        _Restore(sol) {
            sol._SetSelectAll(this._isSelectAll);
            C3.shallowAssignArray(sol._GetOwnInstances(), this._instances)
        }
        RemoveInstances(s) {
            C3.arrayRemoveAllInSet(this._instances, s)
        }
        _SaveToJson() {
            return {
                "sa": this._isSelectAll,
                "insts": this._instances.map(inst => inst.GetUID())
            }
        }
        _LoadFromJson(eventSheetManager, o) {
            const runtime = eventSheetManager.GetRuntime();
            this._isSelectAll = !!o["sa"];
            C3.clearArray(this._instances);
            for (const uid of o["insts"]) {
                const inst = runtime.GetInstanceByUID(uid);
                if (inst) this._instances.push(inst)
            }
        }
    };

}

// sdk/sdkPluginBase.js
{
    'use strict';
    const C3 = self.C3;

    function GetNextParamMap(paramMap, param) {
        let nextParamMap = paramMap.get(param);
        if (!nextParamMap) {
            nextParamMap = new Map;
            paramMap.set(param, nextParamMap)
        }
        return nextParamMap
    }
    C3.SDKPluginBase = class SDKPluginBase extends C3.DefendedBase {
        constructor(opts) {
            super();
            this._runtime = opts.runtime;
            this._isSingleGlobal = !!opts.isSingleGlobal;
            this._isWorldType = !!opts.isWorld;
            this._isRotatable = !!opts.isRotatable;
            this._mustPredraw = !!opts.mustPredraw;
            this._hasEffects = !!opts.hasEffects;
            this._supportsSceneGraph = !!opts.supportsSceneGraph;
            this._supportsMesh = !!opts.supportsMesh;
            this._singleGlobalObjectClass = null;
            this._boundACEMethodCache = new Map;
            this._boundACEMethodCache_1param = new Map;
            this._boundACEMethodCache_2params =
                new Map;
            this._boundACEMethodCache_3params = new Map
        }
        Release() {
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        OnCreate() {}
        IsSingleGlobal() {
            return this._isSingleGlobal
        }
        IsWorldType() {
            return this._isWorldType
        }
        IsRotatable() {
            return this._isRotatable
        }
        MustPreDraw() {
            return this._mustPredraw
        }
        HasEffects() {
            return this._hasEffects
        }
        SupportsSceneGraph() {
            return this._supportsSceneGraph
        }
        SupportsMesh() {
            return this._supportsMesh
        }
        _GetBoundACEMethod(func, bindThis) {
            if (!bindThis) throw new Error("missing 'this' binding");
            let ret = this._boundACEMethodCache.get(func);
            if (ret) return ret;
            ret = func.bind(bindThis);
            this._boundACEMethodCache.set(func, ret);
            return ret
        }
        _GetBoundACEMethod_1param(func, bindThis, param0) {
            if (!bindThis) throw new Error("missing 'this' binding");
            const param0map = GetNextParamMap(this._boundACEMethodCache_1param, func);
            let ret = param0map.get(param0);
            if (ret) return ret;
            ret = func.bind(bindThis, param0);
            param0map.set(param0, ret);
            return ret
        }
        _GetBoundACEMethod_2params(func, bindThis, param0, param1) {
            if (!bindThis) throw new Error("missing 'this' binding");
            const param0map = GetNextParamMap(this._boundACEMethodCache_2params, func);
            const param1map = GetNextParamMap(param0map, param0);
            let ret = param1map.get(param1);
            if (ret) return ret;
            ret = func.bind(bindThis, param0, param1);
            param1map.set(param1, ret);
            return ret
        }
        _GetBoundACEMethod_3params(func, bindThis, param0, param1, param2) {
            if (!bindThis) throw new Error("missing 'this' binding");
            const param0map = GetNextParamMap(this._boundACEMethodCache_3params, func);
            const param1map = GetNextParamMap(param0map, param0);
            const param2map =
                GetNextParamMap(param1map, param1);
            let ret = param2map.get(param2);
            if (ret) return ret;
            ret = func.bind(bindThis, param0, param1, param2);
            param2map.set(param2, ret);
            return ret
        }
        _SetSingleGlobalObjectClass(objectClass) {
            if (!this.IsSingleGlobal()) throw new Error("must be single-global plugin");
            this._singleGlobalObjectClass = objectClass
        }
        GetSingleGlobalObjectClass() {
            if (!this.IsSingleGlobal()) throw new Error("must be single-global plugin");
            return this._singleGlobalObjectClass
        }
        GetSingleGlobalInstance() {
            if (!this.IsSingleGlobal()) throw new Error("must be single-global plugin");
            return this._singleGlobalObjectClass.GetSingleGlobalInstance()
        }
    };

}

// sdk/sdkDOMPluginBase.js
{
    'use strict';
    const C3 = self.C3;
    C3.SDKDOMPluginBase = class SDKDOMPluginBase extends C3.SDKPluginBase {
        constructor(opts, DOM_COMPONENT_ID) {
            super(opts);
            this._domComponentId = DOM_COMPONENT_ID;
            this._nextElementId = 0;
            this._instMap = new Map;
            this.AddElementMessageHandler("elem-focused", sdkInst => sdkInst._OnElemFocused());
            this.AddElementMessageHandler("elem-blurred", sdkInst => {
                if (sdkInst) sdkInst._OnElemBlurred()
            })
        }
        Release() {
            super.Release()
        }
        _AddElement(sdkInst) {
            const elementId = this._nextElementId++;
            this._instMap.set(elementId, sdkInst);
            return elementId
        }
        _RemoveElement(elementId) {
            this._instMap.delete(elementId)
        }
        AddElementMessageHandler(handler,
            func) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId, handler, e => {
                const sdkInst = this._instMap.get(e["elementId"]);
                func(sdkInst, e)
            })
        }
    };

}

// sdk/sdkTypeBase.js
{
    'use strict';
    const C3 = self.C3;
    C3.SDKTypeBase = class SDKTypeBase extends C3.DefendedBase {
        constructor(objectClass) {
            super();
            this._objectClass = objectClass;
            this._runtime = objectClass.GetRuntime();
            this._plugin = objectClass.GetPlugin()
        }
        Release() {
            this._objectClass = null;
            this._runtime = null;
            this._plugin = null
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetRuntime() {
            return this._runtime
        }
        GetPlugin() {
            return this._plugin
        }
        GetImageInfo() {
            return this._objectClass.GetImageInfo()
        }
        OnCreate() {}
        FinishCondition(f) {}
        BeforeRunAction(method) {}
        AfterRunAction(method) {}
        LoadTextures(renderer) {}
        ReleaseTextures() {}
        OnDynamicTextureLoadComplete() {}
        PreloadTexturesWithInstances(renderer) {}
        LoadTilemapData() {}
        GetScriptInterfaceClass() {
            return null
        }
        DispatchScriptEvent(name, cancelable,
            additionalProperties) {
            const e = C3.New(C3.Event, name, cancelable);
            e.objectClass = this;
            if (additionalProperties) Object.assign(e, additionalProperties);
            this.GetObjectClass().DispatchUserScriptEvent(e)
        }
    };

}

// sdk/sdkInstanceBase.js
{
    'use strict';
    const C3 = self.C3;
    C3.SDKInstanceBase = class SDKInstanceBase extends C3.DefendedBase {
        constructor(inst, domComponentId) {
            super();
            this._inst = inst;
            this._domComponentId = domComponentId;
            this._runtime = inst.GetRuntime();
            this._objectClass = this._inst.GetObjectClass();
            this._sdkType = this._objectClass.GetSdkType();
            this._tickFunc = null;
            this._tick2Func = null;
            this._isTicking = false;
            this._isTicking2 = false;
            this._disposables = null;
            this._wasReleased = false
        }
        Release() {
            this._wasReleased = true;
            this._StopTicking();
            this._StopTicking2();
            this._tickFunc =
                null;
            this._tick2Func = null;
            if (this._disposables) {
                this._disposables.Release();
                this._disposables = null
            }
            this._inst = null;
            this._runtime = null;
            this._objectClass = null;
            this._sdkType = null
        }
        WasReleased() {
            return this._wasReleased
        }
        GetInstance() {
            return this._inst
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetPlugin() {
            return this._sdkType.GetPlugin()
        }
        GetSdkType() {
            return this._sdkType
        }
        GetScriptInterface() {
            return this._inst.GetInterfaceClass()
        }
        Trigger(method) {
            return this._runtime.Trigger(method,
                this._inst, null)
        }
        DebugTrigger(method) {
            return this._runtime.DebugTrigger(method, this._inst, null)
        }
        TriggerAsync(method) {
            return this._runtime.TriggerAsync(method, this._inst, null)
        }
        FastTrigger(method, value) {
            return this._runtime.FastTrigger(method, this._inst, value)
        }
        DebugFastTrigger(method, value) {
            return this._runtime.DebugFastTrigger(method, this._inst, value)
        }
        ScheduleTriggers(f) {
            return this._runtime.ScheduleTriggers(f)
        }
        AddDOMMessageHandler(handler, func) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId,
                handler, func)
        }
        AddDOMMessageHandlers(list) {
            for (const [handler, func] of list) this.AddDOMMessageHandler(handler, func)
        }
        PostToDOM(handler, data) {
            this._runtime.PostComponentMessageToDOM(this._domComponentId, handler, data)
        }
        PostToDOMAsync(handler, data) {
            return this._runtime.PostComponentMessageToDOMAsync(this._domComponentId, handler, data)
        }
        _PostToDOMMaybeSync(handler, data) {
            if (this._runtime.IsInWorker()) this.PostToDOM(handler, data);
            else return window["c3_runtimeInterface"]["_OnMessageFromRuntime"]({
                "type": "event",
                "component": this._domComponentId,
                "handler": handler,
                "data": data,
                "responseId": null
            })
        }
        Tick() {}
        Tick2() {}
        _StartTicking() {
            if (this._isTicking) return;
            if (!this._tickFunc) this._tickFunc = () => this.Tick();
            this._runtime.Dispatcher().addEventListener("tick", this._tickFunc);
            this._isTicking = true
        }
        _StopTicking() {
            if (!this._isTicking) return;
            this._runtime.Dispatcher().removeEventListener("tick", this._tickFunc);
            this._isTicking = false
        }
        IsTicking() {
            return this._isTicking
        }
        _StartTicking2() {
            if (this._isTicking2) return;
            if (!this._tick2Func) this._tick2Func =
                () => this.Tick2();
            this._runtime.Dispatcher().addEventListener("tick2", this._tick2Func);
            this._isTicking2 = true
        }
        _StopTicking2() {
            if (!this._isTicking2) return;
            this._runtime.Dispatcher().removeEventListener("tick2", this._tick2Func);
            this._isTicking2 = false
        }
        IsTicking2() {
            return this._isTicking2
        }
        GetDebuggerProperties() {
            return []
        }
        SaveToJson() {
            return null
        }
        LoadFromJson(o) {}
        GetPropertyValueByIndex(index) {}
        SetPropertyValueByIndex(index, value) {}
        OffsetPropertyValueByIndex(index, offset, opts) {
            if (offset === 0) return;
            const value =
                this.GetPropertyValueByIndex(index);
            if (typeof value !== "number") throw new Error("expected number");
            this.SetPropertyValueByIndex(index, value + offset, opts)
        }
        SetPropertyColorOffsetValueByIndex(offset, r, g, b) {}
        CallAction(actMethod, ...args) {
            actMethod.call(this, ...args)
        }
        CallExpression(expMethod, ...args) {
            return expMethod.call(this, ...args)
        }
        GetScriptInterfaceClass() {
            return null
        }
        DispatchScriptEvent(name, cancelable, additionalProperties) {
            if (!this._inst.HasScriptInterface()) return;
            const scriptInterface = this.GetScriptInterface();
            const e = C3.New(C3.Event, name, cancelable);
            e.instance = scriptInterface;
            if (additionalProperties) Object.assign(e, additionalProperties);
            scriptInterface.dispatchEvent(e)
        }
    };

}

// sdk/sdkWorldInstanceBase.js
{
    'use strict';
    const C3 = self.C3;
    C3.SDKWorldInstanceBase = class SDKWorldInstanceBase extends C3.SDKInstanceBase {
        constructor(inst, domComponentId) {
            super(inst, domComponentId);
            this._worldInfo = inst.GetWorldInfo();
            this._renderercontextlost_handler = null;
            this._renderercontextrestored_handler = null
        }
        Release() {
            if (this._renderercontextlost_handler) {
                const dispatcher = this._runtime.Dispatcher();
                dispatcher.removeEventListener("renderercontextlost", this._renderercontextlost_handler);
                dispatcher.removeEventListener("renderercontextrestored", this._renderercontextrestored_handler);
                this._renderercontextlost_handler = null;
                this._renderercontextrestored_handler = null
            }
            this._worldInfo = null;
            super.Release()
        }
        HandleWebGLContextLoss() {
            this.HandleRendererContextLoss()
        }
        OnWebGLContextLost() {}
        OnWebGLContextRestored() {}
        HandleRendererContextLoss() {
            if (this._renderercontextlost_handler) return;
            this._renderercontextlost_handler = () => this.OnRendererContextLost();
            this._renderercontextrestored_handler = () => this.OnRendererContextRestored();
            const dispatcher = this._runtime.Dispatcher();
            dispatcher.addEventListener("rendererontextlost",
                this._renderercontextlost_handler);
            dispatcher.addEventListener("renderercontextrestored", this._renderercontextrestored_handler)
        }
        OnRendererContextLost() {
            this.OnWebGLContextLost()
        }
        OnRendererContextRestored() {
            this.OnWebGLContextRestored()
        }
        GetWorldInfo() {
            return this._worldInfo
        }
        IsOriginalSizeKnown() {
            return false
        }
        GetOriginalWidth() {
            if (!this.IsOriginalSizeKnown()) throw new Error("original size not known");
            const imageInfo = this.GetCurrentImageInfo();
            if (imageInfo) return imageInfo.GetWidth();
            else;
        }
        GetOriginalHeight() {
            if (!this.IsOriginalSizeKnown()) throw new Error("original size not known");
            const imageInfo = this.GetCurrentImageInfo();
            if (imageInfo) return imageInfo.GetHeight();
            else;
        }
        GetCurrentImageInfo() {
            return null
        }
        GetCurrentSurfaceSize() {
            const imageInfo = this.GetCurrentImageInfo();
            if (imageInfo) {
                const texture = imageInfo.GetTexture();
                if (texture) return [texture.GetWidth(), texture.GetHeight()]
            }
            return [100, 100]
        }
        GetCurrentTexRect() {
            const imageInfo = this.GetCurrentImageInfo();
            return imageInfo ? imageInfo.GetTexRect() : null
        }
        GetCurrentTexQuad() {
            const imageInfo = this.GetCurrentImageInfo();
            return imageInfo ?
                imageInfo.GetTexQuad() : null
        }
        IsCurrentTexRotated() {
            const imageInfo = this.GetCurrentImageInfo();
            return imageInfo ? imageInfo.IsRotated() : false
        }
        GetImagePoint(nameOrIndex) {
            const wi = this._inst.GetWorldInfo();
            return [wi.GetX(), wi.GetY(), wi.GetTotalZElevation()]
        }
        LoadTilemapData(data, mapWidth, mapHeight) {}
        TestPointOverlapTile(x, y) {}
        RendersToOwnZPlane() {
            return true
        }
    };

}

// sdk/sdkDOMInstanceBase.js
{
    'use strict';
    const C3 = self.C3;
    const tempRect = C3.New(C3.Rect);
    C3.SDKDOMInstanceBase = class SDKDOMInstanceBase extends C3.SDKWorldInstanceBase {
        constructor(inst, domComponentId) {
            super(inst, domComponentId);
            this._elementId = this.GetPlugin()._AddElement(this);
            this._isElementShowing = true;
            this._elemHasFocus = false;
            this._autoFontSize = false;
            this._autoFontSizeOffset = -.2;
            this._lastRect = C3.New(C3.Rect, 0, 0, -1, -1);
            const canvasManager = this._runtime.GetCanvasManager();
            this._lastWindowWidth = canvasManager.GetLastWidth();
            this._lastWindowHeight = canvasManager.GetLastHeight();
            this._isPendingUpdateState =
                false;
            this._StartTicking()
        }
        Release() {
            this.GetPlugin()._RemoveElement(this._elementId);
            this.PostToDOMElement("destroy");
            this._elementId = -1;
            super.Release()
        }
        _GetElementInDOMMode() {
            if (this._runtime.IsInWorker()) throw new Error("not valid in worker mode");
            return this._PostToDOMElementMaybeSync("get-element")
        }
        PostToDOMElement(handler, data) {
            if (!data) data = {};
            data["elementId"] = this._elementId;
            this.PostToDOM(handler, data)
        }
        _PostToDOMElementMaybeSync(handler, data) {
            if (!data) data = {};
            data["elementId"] = this._elementId;
            return this._PostToDOMMaybeSync(handler, data)
        }
        PostToDOMElementAsync(handler, data) {
            if (!data) data = {};
            data["elementId"] = this._elementId;
            return this.PostToDOMAsync(handler, data)
        }
        CreateElement(data) {
            if (!data) data = {};
            const isVisible = this.GetWorldInfo().IsVisible();
            data["elementId"] = this._elementId;
            data["isVisible"] = isVisible;
            Object.assign(data, this.GetElementState());
            this._isElementShowing = !!data["isVisible"];
            this._PostToDOMMaybeSync("create", data);
            this._UpdatePosition(true)
        }
        SetElementVisible(v) {
            v = !!v;
            if (this._isElementShowing === v) return;
            this._isElementShowing = v;
            this.PostToDOMElement("set-visible", {
                "isVisible": v
            })
        }
        Tick() {
            this._UpdatePosition(false)
        }
        _ShouldPreserveElement() {
            const fullscreenMode = this._runtime.GetCanvasManager().GetFullscreenMode();
            return C3.Platform.OS === "Android" && (fullscreenMode === "scale-inner" || fullscreenMode === "scale-outer" || fullscreenMode === "crop")
        }
        _UpdatePosition(first) {
            const wi = this.GetWorldInfo();
            const layer = wi.GetLayer();
            const bbox = wi.GetBoundingBox();
            let [cleft, ctop] = layer.LayerToCanvasCss(bbox.getLeft(),
                bbox.getTop());
            let [cright, cbottom] = layer.LayerToCanvasCss(bbox.getRight(), bbox.getBottom());
            const canvasManager = this._runtime.GetCanvasManager();
            const rightEdge = canvasManager.GetCssWidth();
            const bottomEdge = canvasManager.GetCssHeight();
            if (!wi.IsVisible() || !layer.IsVisible()) {
                this.SetElementVisible(false);
                return
            }
            if (!this._ShouldPreserveElement()) {
                if (cright <= 0 || cbottom <= 0 || cleft >= rightEdge || ctop >= bottomEdge) {
                    this.SetElementVisible(false);
                    return
                }
                if (cleft < 1) cleft = 1;
                if (ctop < 1) ctop = 1;
                if (cright >= rightEdge) cright =
                    rightEdge - 1;
                if (cbottom >= bottomEdge) cbottom = bottomEdge - 1
            }
            tempRect.set(cleft, ctop, cright, cbottom);
            const curWinWidth = canvasManager.GetLastWidth();
            const curWinHeight = canvasManager.GetLastHeight();
            if (!first && tempRect.equals(this._lastRect) && this._lastWindowWidth === curWinWidth && this._lastWindowHeight === curWinHeight) {
                this.SetElementVisible(true);
                return
            }
            this._lastRect.copy(tempRect);
            this._lastWindowWidth = curWinWidth;
            this._lastWindowHeight = curWinHeight;
            this.SetElementVisible(true);
            let fontSize = null;
            if (this._autoFontSize) fontSize =
                layer.GetDisplayScale() + this._autoFontSizeOffset;
            this.PostToDOMElement("update-position", {
                "left": Math.round(this._lastRect.getLeft()) + canvasManager.GetCanvasClientX(),
                "top": Math.round(this._lastRect.getTop()) + canvasManager.GetCanvasClientY(),
                "width": Math.round(this._lastRect.width()),
                "height": Math.round(this._lastRect.height()),
                "fontSize": fontSize
            })
        }
        FocusElement() {
            this._PostToDOMElementMaybeSync("focus", {
                "focus": true
            })
        }
        BlurElement() {
            this._PostToDOMElementMaybeSync("focus", {
                "focus": false
            })
        }
        _OnElemFocused() {
            this._elemHasFocus =
                true
        }
        _OnElemBlurred() {
            this._elemHasFocus = false
        }
        IsElementFocused() {
            return this._elemHasFocus
        }
        SetElementCSSStyle(prop, val) {
            this.PostToDOMElement("set-css-style", {
                "prop": C3.CSSToCamelCase(prop),
                "val": val
            })
        }
        SetElementAttribute(attribName, value) {
            this.PostToDOMElement("set-attribute", {
                "name": attribName,
                "val": value
            })
        }
        RemoveElementAttribute(attribName) {
            this.PostToDOMElement("remove-attribute", {
                "name": attribName
            })
        }
        UpdateElementState() {
            if (this._isPendingUpdateState) return;
            this._isPendingUpdateState = true;
            Promise.resolve().then(() => {
                this._isPendingUpdateState = false;
                this.PostToDOMElement("update-state", this.GetElementState())
            })
        }
        GetElementState() {}
        GetElementId() {
            return this._elementId
        }
    };

}

// sdk/sdkBehaviorBase.js
{
    'use strict';
    const C3 = self.C3;
    const IBehavior = self.IBehavior;
    C3.SDKBehaviorBase = class SDKBehaviorBase extends C3.DefendedBase {
        constructor(opts) {
            super();
            this._runtime = opts.runtime;
            this._myObjectClasses = C3.New(C3.ArraySet);
            this._myInstances = C3.New(C3.ArraySet);
            this._iBehavior = null;
            this._scriptInterfaceClass = opts.scriptInterfaceClass || null
        }
        Release() {
            this._myInstances.Release();
            this._myObjectClasses.Release();
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        OnCreate() {}
        _AddObjectClass(objectClass) {
            this._myObjectClasses.Add(objectClass)
        }
        GetObjectClasses() {
            return this._myObjectClasses.GetArray()
        }
        _AddInstance(inst) {
            this._myInstances.Add(inst)
        }
        _RemoveInstance(inst) {
            this._myInstances.Delete(inst)
        }
        GetInstances() {
            return this._myInstances.GetArray()
        }
        GetIBehavior() {
            if (this._iBehavior === null) {
                const CustomScriptClass =
                    this._scriptInterfaceClass;
                if (CustomScriptClass) {
                    this._iBehavior = new CustomScriptClass(this);
                    if (!(this._iBehavior instanceof IBehavior)) throw new TypeError("script interface class must derive from IBehavior");
                } else this._iBehavior = new IBehavior(this)
            }
            return this._iBehavior
        }
    };

}

// sdk/sdkBehaviorTypeBase.js
{
    'use strict';
    const C3 = self.C3;
    C3.SDKBehaviorTypeBase = class SDKBehaviorTypeBase extends C3.DefendedBase {
        constructor(behaviorType) {
            super();
            this._runtime = behaviorType.GetRuntime();
            this._behaviorType = behaviorType;
            this._objectClass = behaviorType.GetObjectClass();
            this._behavior = behaviorType.GetBehavior();
            this._behavior._AddObjectClass(this._objectClass)
        }
        Release() {
            this._runtime = null;
            this._behaviorType = null;
            this._objectClass = null;
            this._behavior = null
        }
        OnCreate() {}
        GetBehaviorType() {
            return this._behaviorType
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehavior() {
            return this._behavior
        }
    };

}

// sdk/sdkBehaviorInstanceBase.js
{
    'use strict';
    const C3 = self.C3;
    C3.SDKBehaviorInstanceBase = class SDKBehaviorInstanceBase extends C3.DefendedBase {
        constructor(behInst, domComponentId) {
            super();
            this._behInst = behInst;
            this._domComponentId = domComponentId;
            this._inst = behInst.GetObjectInstance();
            this._runtime = behInst.GetRuntime();
            this._behaviorType = behInst.GetBehaviorType();
            this._sdkType = this._behaviorType.GetSdkType();
            this._isTicking = false;
            this._isTicking2 = false;
            this._isPostTicking = false;
            this._disposables = null
        }
        Release() {
            this._StopTicking();
            this._StopTicking2();
            this._StopPostTicking();
            if (this._disposables) {
                this._disposables.Release();
                this._disposables = null
            }
            this._behInst = null;
            this._inst = null;
            this._runtime = null;
            this._behaviorType = null;
            this._sdkType = null
        }
        GetBehavior() {
            return this._behaviorType.GetBehavior()
        }
        GetBehaviorInstance() {
            return this._behInst
        }
        GetObjectInstance() {
            return this._inst
        }
        GetObjectClass() {
            return this._inst.GetObjectClass()
        }
        GetWorldInfo() {
            return this._inst.GetWorldInfo()
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetSdkType() {
            return this._sdkType
        }
        GetScriptInterface() {
            return this._behInst.GetScriptInterface()
        }
        Trigger(method) {
            return this._runtime.Trigger(method,
                this._inst, this._behaviorType)
        }
        DebugTrigger(method) {
            return this._runtime.DebugTrigger(method, this._inst, this._behaviorType)
        }
        TriggerAsync(method) {
            return this._runtime.TriggerAsync(method, this._inst, this._behaviorType)
        }
        PostCreate() {}
        Tick() {}
        Tick2() {}
        PostTick() {}
        _StartTicking() {
            if (this._isTicking) return;
            this._runtime._AddBehInstToTick(this);
            this._isTicking = true
        }
        _StopTicking() {
            if (!this._isTicking) return;
            this._runtime._RemoveBehInstToTick(this);
            this._isTicking = false
        }
        IsTicking() {
            return this._isTicking
        }
        _StartTicking2() {
            if (this._isTicking2) return;
            this._runtime._AddBehInstToTick2(this);
            this._isTicking2 = true
        }
        _StopTicking2() {
            if (!this._isTicking2) return;
            this._runtime._RemoveBehInstToTick2(this);
            this._isTicking2 = false
        }
        IsTicking2() {
            return this._isTicking2
        }
        _StartPostTicking() {
            if (this._isPostTicking) return;
            this._runtime._AddBehInstToPostTick(this);
            this._isPostTicking = true
        }
        _StopPostTicking() {
            if (!this._isPostTicking) return;
            this._runtime._RemoveBehInstToPostTick(this);
            this._isPostTicking = false
        }
        IsPostTicking() {
            return this._isPostTicking
        }
        GetDebuggerProperties() {
            return []
        }
        AddDOMMessageHandler(handler,
            func) {
            this._runtime.AddDOMComponentMessageHandler(this._domComponentId, handler, func)
        }
        OnSpriteFrameChanged(prevFrame, nextFrame) {}
        SaveToJson() {
            return null
        }
        LoadFromJson(o) {}
        GetPropertyValueByIndex(index) {}
        SetPropertyValueByIndex(index, value) {}
        OffsetPropertyValueByIndex(index, offset) {
            if (offset === 0) return;
            const value = this.GetPropertyValueByIndex(index);
            if (typeof value !== "number") throw new Error("expected number");
            this.SetPropertyValueByIndex(index, value + offset)
        }
        SetPropertyColorOffsetValueByIndex(index,
            offsetR, offsetG, offsetB) {}
        CallAction(actMethod, ...args) {
            actMethod.call(this, ...args)
        }
        CallExpression(expMethod, ...args) {
            return expMethod.call(this, ...args)
        }
        GetScriptInterfaceClass() {
            return null
        }
        DispatchScriptEvent(name, cancelable, additionalProperties) {
            if (!this._behInst.HasScriptInterface()) return;
            const scriptInterface = this.GetScriptInterface();
            const e = C3.New(C3.Event, name, cancelable);
            e.behaviorInstance = scriptInterface;
            e.instance = scriptInterface.instance;
            if (additionalProperties) Object.assign(e, additionalProperties);
            scriptInterface.dispatchEvent(e)
        }
    };

}

// objects/pluginManager.js
{
    'use strict';
    const C3 = self.C3;
    C3.Plugins = {};
    C3.Behaviors = {};
    C3.PluginManager = class PluginManager extends C3.DefendedBase {
        constructor(runtime) {
            super();
            this._runtime = runtime;
            this._allPlugins = [];
            this._pluginsByCtor = new Map;
            this._systemPlugin = null;
            this._allBehaviors = [];
            this._behaviorsByCtor = new Map;
            this._solidBehavior = null;
            this._jumpthruBehavior = null
        }
        CreatePlugin(pluginData) {
            const Ctor = this._runtime.GetObjectReference(pluginData[0]);
            if (!Ctor) throw new Error("missing plugin");
            C3.AddCommonACEs(pluginData, Ctor);
            const plugin = C3.New(Ctor, {
                runtime: this._runtime,
                isSingleGlobal: pluginData[1],
                isWorld: pluginData[2],
                isRotatable: pluginData[5],
                hasEffects: pluginData[8],
                mustPredraw: pluginData[9],
                supportsSceneGraph: pluginData[13],
                supportsMesh: pluginData[14]
            });
            plugin.OnCreate();
            this._allPlugins.push(plugin);
            this._pluginsByCtor.set(Ctor, plugin)
        }
        CreateSystemPlugin() {
            this._systemPlugin = C3.New(C3.Plugins.System, {
                runtime: this._runtime,
                isSingleGlobal: true
            });
            this._systemPlugin.OnCreate()
        }
        CreateBehavior(behaviorData) {
            const Ctor = this._runtime.GetObjectReference(behaviorData[1]);
            if (!Ctor) throw new Error("missing behavior");
            const behavior = C3.New(Ctor, {
                runtime: this._runtime
            });
            behavior.OnCreate();
            this._allBehaviors.push(behavior);
            this._behaviorsByCtor.set(Ctor, behavior);
            if (!this._solidBehavior && C3.Behaviors.solid && behavior instanceof C3.Behaviors.solid) this._solidBehavior = behavior;
            else if (!this._jumpthruBehavior && C3.Behaviors.jumpthru && behavior instanceof C3.Behaviors.jumpthru) this._jumpthruBehavior = behavior
        }
        GetPluginByConstructorFunction(ctor) {
            return this._pluginsByCtor.get(ctor) || null
        }
        HasBehaviorByConstructorFunction(ctor) {
            return this._behaviorsByCtor.has(ctor)
        }
        GetBehaviorByConstructorFunction(ctor) {
            return this._behaviorsByCtor.get(ctor) ||
                null
        }
        GetSystemPlugin() {
            return this._systemPlugin
        }
        GetSolidBehavior() {
            return this._solidBehavior
        }
        GetJumpthruBehavior() {
            return this._jumpthruBehavior
        }
    };

}

// objects/imageInfo.js
{
    'use strict';
    const C3 = self.C3;
    const allImageInfos = new Set;
    C3.ImageInfo = class ImageInfo extends C3.DefendedBase {
        constructor() {
            super();
            this._generation = 0;
            this._url = "";
            this._size = 0;
            this._offsetX = 0;
            this._offsetY = 0;
            this._width = 0;
            this._height = 0;
            this._isRotated = false;
            this._hasMetaData = false;
            this._imageAsset = null;
            this._textureState = "";
            this._rcTex = C3.New(C3.Rect);
            this._quadTex = C3.New(C3.Quad);
            this._blobUrl = "";
            this._iImageInfo = new self.IImageInfo(this);
            allImageInfos.add(this)
        }
        Release() {
            this.ReleaseTexture();
            this._imageAsset = null;
            allImageInfos.delete(this);
            this.ReleaseBlobURL()
        }
        static OnRendererContextLost() {
            for (const imageInfo of allImageInfos) {
                imageInfo._textureState =
                    "";
                imageInfo._rcTex.set(0, 0, 0, 0);
                imageInfo._quadTex.setFromRect(imageInfo._rcTex)
            }
        }
        LoadData(imageData) {
            this._url = imageData[0];
            this._size = imageData[1];
            this._offsetX = imageData[2];
            this._offsetY = imageData[3];
            this._width = imageData[4];
            this._height = imageData[5];
            this._isRotated = imageData[6];
            this._hasMetaData = true
        }
        LoadDynamicAsset(runtime, url) {
            if (this._imageAsset) throw new Error("already loaded asset");
            this._url = url;
            const opts = {};
            if (C3.IsAbsoluteURL(url)) opts.loadPolicy = "remote";
            this.LoadAsset(runtime, opts);
            return this._imageAsset.Load()
        }
        async LoadDynamicBlobAsset(runtime, blob) {
            if (this._imageAsset) throw new Error("already loaded asset");
            this._url = "";
            this._size = blob.size;
            this._imageAsset = C3.New(C3.ImageAsset, runtime.GetAssetManager(), {
                blob,
                size: this._size,
                loadPolicy: "local"
            })
        }
        ReplaceWith(otherImageInfo) {
            if (otherImageInfo === this) throw new Error("cannot replace with self");
            this._generation++;
            this.ReleaseTexture();
            this._url = otherImageInfo._url;
            this._size = otherImageInfo._size;
            this._offsetX = otherImageInfo._offsetX;
            this._offsetY = otherImageInfo._offsetY;
            this._width = otherImageInfo._width;
            this._height = otherImageInfo._height;
            this._isRotated = otherImageInfo._isRotated;
            this._hasMetaData = otherImageInfo._hasMetaData;
            this._imageAsset = otherImageInfo._imageAsset;
            this._textureState = otherImageInfo._textureState;
            this._rcTex = otherImageInfo._rcTex;
            this._quadTex = otherImageInfo._quadTex;
            this.ReleaseBlobURL()
        }
        GetURL() {
            return this._url
        }
        GetSize() {
            return this._size
        }
        GetOffsetX() {
            return this._offsetX
        }
        GetOffsetY() {
            return this._offsetY
        }
        IsRotated() {
            return this._isRotated
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetSheetWidth() {
            return this._imageAsset.GetWidth()
        }
        GetSheetHeight() {
            return this._imageAsset.GetHeight()
        }
        LoadAsset(runtime,
            opts) {
            if (this._imageAsset) throw new Error("already got asset");
            opts = Object.assign({}, opts, {
                url: this.GetURL(),
                size: this.GetSize()
            });
            this._imageAsset = runtime.LoadImage(opts)
        }
        IsLoaded() {
            return this._imageAsset && this._imageAsset.IsLoaded()
        }
        async LoadStaticTexture(renderer, opts) {
            if (!this._imageAsset) throw new Error("no asset");
            if (this._textureState) throw new Error("already loaded texture");
            const startGeneration = this._generation;
            this._textureState = "loading";
            const texture = await this._imageAsset.LoadStaticTexture(renderer,
                opts);
            if (this._generation !== startGeneration) return null;
            if (!texture) {
                this._textureState = "";
                return null
            }
            this._textureState = "loaded";
            if (!this._hasMetaData) {
                this._width = texture.GetWidth();
                this._height = texture.GetHeight();
                this._hasMetaData = true
            }
            const wr = this._isRotated ? this._height : this._width;
            const hr = this._isRotated ? this._width : this._height;
            this._rcTex.set(this._offsetX, this._offsetY, this._offsetX + wr, this._offsetY + hr);
            this._rcTex.divide(texture.GetWidth(), texture.GetHeight());
            this._quadTex.setFromRect(this._rcTex);
            if (this._isRotated) this._quadTex.rotatePointsAnticlockwise();
            return texture
        }
        ReleaseTexture() {
            if (!this._textureState) return;
            if (this._imageAsset) this._imageAsset.ReleaseTexture();
            this._textureState = "";
            this._rcTex.set(0, 0, 0, 0);
            this._quadTex.setFromRect(this._rcTex)
        }
        GetTexture() {
            return this._imageAsset ? this._imageAsset.GetTexture() : null
        }
        GetTexRect() {
            return this._rcTex
        }
        GetTexQuad() {
            return this._quadTex
        }
        GetIImageInfo() {
            return this._iImageInfo
        }
        async ExtractImageToCanvas() {
            const srcDrawable = await this._imageAsset.LoadToDrawable();
            const canvas = C3.CreateCanvas(this._width, this._height);
            const ctx = canvas.getContext("2d");
            if (this._isRotated) {
                ctx.rotate(Math.PI / -2);
                ctx.translate(-this._height, 0);
                ctx.drawImage(srcDrawable, this._offsetX, this._offsetY, this._height, this._width, 0, 0, this._height, this._width)
            } else ctx.drawImage(srcDrawable, this._offsetX, this._offsetY, this._width, this._height, 0, 0, this._width, this._height);
            return canvas
        }
        async ExtractImageToBlobURL() {
            if (this._blobUrl) return this._blobUrl;
            const canvas = await this.ExtractImageToCanvas();
            const blob = await C3.CanvasToBlob(canvas);
            this._blobUrl = URL.createObjectURL(blob);
            return this._blobUrl
        }
        ReleaseBlobURL() {
            if (this._blobUrl) {
                URL.revokeObjectURL(this._blobUrl);
                this._blobUrl = ""
            }
        }
    };

}

// objects/animationInfo.js
{
    'use strict';
    const C3 = self.C3;
    C3.AnimationInfo = class AnimationInfo extends C3.DefendedBase {
        constructor(animData) {
            super();
            this._name = animData[0];
            this._speed = animData[1];
            this._isLooping = !!animData[2];
            this._repeatCount = animData[3];
            this._repeatTo = animData[4];
            this._isPingPong = !!animData[5];
            this._sid = animData[6];
            this._frames = animData[7].map(frameData => C3.New(C3.AnimationFrameInfo, frameData));
            this._iAnimation = new self.IAnimation(this)
        }
        Release() {
            for (const f of this._frames) f.Release();
            C3.clearArray(this._frames)
        }
        LoadAllAssets(runtime) {
            for (const f of this._frames) f.GetImageInfo().LoadAsset(runtime)
        }
        LoadAllTextures(renderer, opts) {
            return Promise.all(this._frames.map(f =>
                f.GetImageInfo().LoadStaticTexture(renderer, opts)))
        }
        ReleaseAllTextures() {
            for (const f of this._frames) f.GetImageInfo().ReleaseTexture()
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetFrameCount() {
            return this._frames.length
        }
        GetFrames() {
            return this._frames
        }
        GetFrameAt(i) {
            i = Math.floor(i);
            if (i < 0 || i >= this._frames.length) throw new RangeError("invalid frame");
            return this._frames[i]
        }
        GetSpeed() {
            return this._speed
        }
        IsLooping() {
            return this._isLooping
        }
        GetRepeatCount() {
            return this._repeatCount
        }
        GetRepeatTo() {
            return this._repeatTo
        }
        IsPingPong() {
            return this._isPingPong
        }
        GetIAnimation() {
            return this._iAnimation
        }
    };

}

// objects/animationFrameInfo.js
{
    'use strict';
    const C3 = self.C3;
    C3.AnimationFrameInfo = class AnimationFrameInfo extends C3.DefendedBase {
        constructor(frameData) {
            super();
            this._imageInfo = C3.New(C3.ImageInfo);
            this._imageInfo.LoadData(frameData);
            this._duration = frameData[7];
            this._origin = C3.New(C3.Vector2, frameData[8], frameData[9]);
            this._imagePoints = frameData[10].map(data => C3.New(C3.ImagePoint, this, data));
            this._imagePointsByName = new Map;
            for (const ip of this._imagePoints) this._imagePointsByName.set(ip.GetName().toLowerCase(), ip);
            this._collisionPoly = null;
            const polyPoints =
                frameData[11];
            if (polyPoints.length >= 6) this._collisionPoly = C3.New(C3.CollisionPoly, polyPoints);
            this._iAnimationFrame = new self.IAnimationFrame(this)
        }
        Release() {
            if (this._collisionPoly) {
                this._collisionPoly.Release();
                this._collisionPoly = null
            }
            this._imageInfo.Release();
            this._imageInfo = null
        }
        GetImageInfo() {
            return this._imageInfo
        }
        GetDuration() {
            return this._duration
        }
        GetOriginX() {
            return this._origin.getX()
        }
        GetOriginY() {
            return this._origin.getY()
        }
        GetCollisionPoly() {
            return this._collisionPoly
        }
        GetImagePointByName(name) {
            return this._imagePointsByName.get(name.toLowerCase()) ||
                null
        }
        GetImagePointByIndex(index) {
            index = Math.floor(index);
            if (index < 0 || index >= this._imagePoints.length) return null;
            return this._imagePoints[index]
        }
        GetImagePointCount() {
            return this._imagePoints.length
        }
        GetIAnimationFrame() {
            return this._iAnimationFrame
        }
    };

}

// objects/imagePoint.js
{
    'use strict';
    const C3 = self.C3;
    C3.ImagePoint = class ImagePoint extends C3.DefendedBase {
        constructor(afi, data) {
            super();
            this._afi = afi;
            this._name = data[0];
            this._pos = C3.New(C3.Vector2, data[1], data[2])
        }
        Release() {}
        GetName() {
            return this._name
        }
        GetX() {
            return this._pos.getX()
        }
        GetY() {
            return this._pos.getY()
        }
        GetVec2() {
            return this._pos
        }
    };

}

// objects/objectClass.js
{
    'use strict';
    const C3 = self.C3;
    const C3Debugger = self.C3Debugger;
    const IObjectClass = self.IObjectClass;
    const assert = self.assert;
    C3.ObjectClass = class ObjectClass extends C3.DefendedBase {
        constructor(runtime, index, data) {
            super();
            const PluginCtor = runtime.GetObjectReference(data[1]);
            this._runtime = runtime;
            this._plugin = runtime.GetPluginManager().GetPluginByConstructorFunction(PluginCtor);
            this._sdkType = null;
            this._instSdkCtor = PluginCtor.Instance;
            this._index = index;
            this._sid = data[11];
            this._name = data[0];
            this._jsPropName = this._runtime.GetJsPropName(data[14]);
            this._isGlobal = !!data[9];
            this._isFamily = !!data[2];
            this._isOnLoaderLayout = !!data[10];
            this._instVars = data[3].map(arr => ({
                sid: arr[0],
                type: arr[1],
                name: arr[2],
                jsPropName: runtime.GetJsPropName(arr[3])
            }));
            this._behaviorsCount = data[4];
            this._effectsCount = data[5];
            this._isWorldType = this._plugin.IsWorldType();
            this._effectList = null;
            this._collisionGrid = C3.New(C3.SparseGrid, runtime.GetOriginalViewportWidth(), runtime.GetOriginalViewportHeight());
            this._anyCollisionCellChanged = true;
            this._anyInstanceParallaxed = false;
            this._familyMembers = null;
            this._familyMembersSet = null;
            this._familyIndex = -1;
            this._families =
                null;
            this._familiesSet = null;
            this._familyInstVarMap = null;
            this._familyBehaviorMap = null;
            this._familyEffectMap = null;
            this._isInContainer = false;
            this._container = null;
            this._behaviorTypes = data[8].map(behaviorTypeData => C3.BehaviorType.Create(this, behaviorTypeData));
            this._behaviorTypesIncludingInherited = [];
            this._behaviorsByName = new Map;
            this._behaviorNameToIndex = new Map;
            this._usedBehaviorCtors = new Set;
            this._customActionMap = new Map;
            this._solStack = C3.New(C3.SolStack, this);
            this._defaultInstanceData = null;
            this._defaultLayerIndex =
                0;
            this._isContained = false;
            this._container = null;
            this._imageInfo = null;
            this._animations = null;
            this._animationsByName = null;
            this._animationsBySid = null;
            this._textureRefCount = 0;
            this._savedData = new Map;
            this._unsavedData = new Map;
            this._instances = [];
            this._iidsStale = true;
            if (this._plugin.HasEffects()) this._effectList = C3.New(C3.EffectList, this, data[12]);
            if (data[6]) {
                this._imageInfo = C3.New(C3.ImageInfo);
                this._imageInfo.LoadData(data[6])
            }
            if (data[7]) {
                this._animations = data[7].map(animData => C3.New(C3.AnimationInfo, animData));
                this._animationsByName = new Map;
                this._animationsBySid = new Map;
                for (const anim of this._animations) {
                    this._animationsByName.set(anim.GetName().toLowerCase(), anim);
                    this._animationsBySid.set(anim.GetSID(), anim)
                }
            }
            if (this._isFamily) {
                this._familyMembers = [];
                this._familyMembersSet = new Set;
                this._familyIndex = this._runtime._GetNextFamilyIndex()
            } else {
                this._families = [];
                this._familiesSet = new Set;
                this._familyInstVarMap = [];
                this._familyBehaviorMap = [];
                this._familyEffectMap = []
            }
            this._sdkType = C3.New(PluginCtor.Type, this,
                data[15]);
            this._iObjectClass = null;
            this._instanceUserScriptClass = null;
            this._userScriptDispatcher = C3.New(C3.Event.Dispatcher);
            const CustomScriptClass = this._sdkType.GetScriptInterfaceClass();
            if (CustomScriptClass) {
                this._iObjectClass = new CustomScriptClass(this);
                if (!(this._iObjectClass instanceof IObjectClass)) throw new TypeError("script interface class must derive from IObjectClass");
            } else this._iObjectClass = new IObjectClass(this);
            if (data[13]) {
                const tilemapData = data[13];
                if (tilemapData) {
                    const tilePolyData =
                        tilemapData[0];
                    const maxTileIndex = tilemapData[1];
                    const brushData = tilemapData[2];
                    this._sdkType.LoadTilemapData(tilePolyData, maxTileIndex, brushData)
                }
            }
            if (!this._runtime.UsesLoaderLayout() || this._isFamily || this._isOnLoaderLayout || !this._isWorldType) this.OnCreate();
            if (this._plugin.IsSingleGlobal()) {
                this._plugin._SetSingleGlobalObjectClass(this);
                this._CreateSingleGlobalInstance(data)
            }
            this._loadInstancesJson = null
        }
        static Create(runtime, index, objectClassData) {
            return C3.New(C3.ObjectClass, runtime, index, objectClassData)
        }
        Release() {
            if (this._imageInfo) {
                this._imageInfo.Release();
                this._imageInfo = null
            }
            if (this._animations) {
                for (const a of this._animations) a.Release();
                C3.clearArray(this._animations);
                this._animationsByName.clear();
                this._animationsBySid.clear()
            }
            this._loadInstancesJson = null;
            this._solStack.Release();
            this._solStack = null;
            this._savedData.clear();
            this._unsavedData.clear();
            this._container = null;
            this._runtime = null
        }
        _LoadFamily(familyData) {
            for (let i = 1, len = familyData.length; i < len; ++i) {
                const memberType = this._runtime.GetObjectClassByIndex(familyData[i]);
                this._familyMembers.push(memberType);
                this._familyMembersSet.add(memberType);
                memberType._families.push(this);
                memberType._familiesSet.add(this)
            }
        }
        _SetContainer(container) {
            this._isInContainer = true;
            this._container = container
        }
        IsInContainer() {
            return this._isInContainer
        }
        GetContainer() {
            return this._container
        }
        _OnAfterCreate() {
            let index = 0;
            if (!this._isFamily)
                for (const family of this._families)
                    for (const familyBehType of family.GetBehaviorTypes()) {
                        const lowerName = familyBehType.GetName().toLowerCase();
                        this._behaviorsByName.set(lowerName, familyBehType);
                        this._behaviorNameToIndex.set(lowerName, index);
                        this._behaviorTypesIncludingInherited.push(familyBehType);
                        ++index
                    }
            for (const behaviorType of this.GetBehaviorTypes()) {
                const lowerName = behaviorType.GetName().toLowerCase();
                this._behaviorsByName.set(lowerName, behaviorType);
                this._behaviorNameToIndex.set(lowerName, index);
                this._behaviorTypesIncludingInherited.push(behaviorType);
                ++index
            }
            for (const behaviorType of this._behaviorTypesIncludingInherited) this._usedBehaviorCtors.add(behaviorType.GetBehavior().constructor);
            if (!this._isFamily && this._families.length) {
                const familyCount = this._runtime.GetFamilyCount();
                C3.extendArray(this._familyInstVarMap, familyCount, 0);
                C3.extendArray(this._familyBehaviorMap, familyCount, 0);
                C3.extendArray(this._familyEffectMap, familyCount, 0);
                const allFx = [];
                let ivSum = 0;
                let behSum = 0;
                let fxSum = 0;
                for (const family of this._families) {
                    const familyIndex = family.GetFamilyIndex();
                    this._familyInstVarMap[familyIndex] = ivSum;
                    ivSum += family.GetInstanceVariablesCount();
                    this._familyBehaviorMap[familyIndex] =
                        behSum;
                    behSum += family.GetBehaviorTypesCount();
                    this._familyEffectMap[familyIndex] = fxSum;
                    fxSum += family.GetEffectTypesCount();
                    const familyEffectList = family.GetEffectList();
                    if (familyEffectList && this._effectList)
                        for (const effectType of familyEffectList.GetAllEffectTypes()) allFx.push(effectType.Clone(this._effectList))
                }
                if (this._effectList) this._effectList.PrependEffectTypes(allFx)
            }
        }
        _CreateSingleGlobalInstance(data) {
            const uid = this._runtime._GetNewUID();
            const inst = C3.New(C3.Instance, {
                runtime: this._runtime,
                objectType: this,
                uid: uid
            });
            inst._CreateSdkInstance(data[16], []);
            this._runtime._MapInstanceByUID(uid, inst);
            this._instances.push(inst)
        }
        GetSdkType() {
            return this._sdkType
        }
        IsOnLoaderLayout() {
            return this._isOnLoaderLayout
        }
        OnCreate() {
            if (!this._isFamily) this._sdkType.OnCreate()
        }
        HasLoadedTextures() {
            return this._textureRefCount > 0
        }
        LoadTextures(renderer) {
            if (this._isFamily) return Promise.resolve();
            this._textureRefCount++;
            if (this._textureRefCount === 1) return this._sdkType.LoadTextures(renderer) || Promise.resolve();
            else return Promise.resolve()
        }
        ReleaseTextures() {
            if (this._isFamily) return;
            this._textureRefCount--;
            if (this._textureRefCount < 0) throw new Error("released textures too many times");
            if (this._textureRefCount === 0) this._sdkType.ReleaseTextures()
        }
        OnDynamicTextureLoadComplete() {
            if (this._isFamily) throw new Error("not applicable to family");
            this._sdkType.OnDynamicTextureLoadComplete()
        }
        PreloadTexturesWithInstances(renderer) {
            if (this._isFamily) return Promise.resolve();
            return this._sdkType.PreloadTexturesWithInstances(renderer)
        }
        GetRuntime() {
            return this._runtime
        }
        GetPlugin() {
            return this._plugin
        }
        GetInstanceSdkCtor() {
            return this._instSdkCtor
        }
        GetName() {
            return this._name
        }
        GetJsPropName() {
            return this._jsPropName
        }
        GetIndex() {
            return this._index
        }
        GetSID() {
            return this._sid
        }
        IsFamily() {
            return this._isFamily
        }
        IsGlobal() {
            return this._isGlobal
        }
        IsWorldType() {
            return this._isWorldType
        }
        GetFamilyIndex() {
            return this._familyIndex
        }
        GetBehaviorTypes() {
            return this._behaviorTypes
        }
        GetBehaviorTypesCount() {
            return this._behaviorsCount
        }
        UsesBehaviorByCtor(Ctor) {
            return Ctor &&
                this._usedBehaviorCtors.has(Ctor)
        }
        GetInstanceVariablesCount() {
            return this._instVars.length
        }
        GetInstanceVariableSIDs() {
            return this._instVars.map(iv => iv.sid)
        }
        GetInstanceVariableIndexBySID(sid) {
            return this._instVars.findIndex(iv => iv.sid === sid)
        }
        GetInstanceVariableIndexByName(name) {
            return this._instVars.findIndex(iv => iv.name === name)
        }
        _GetAllInstanceVariableNames() {
            return this._instVars.map(iv => iv.name)
        }
        _GetAllInstanceVariableJsPropNames() {
            return this._instVars.map(iv => iv.jsPropName)
        }
        GetInstanceVariableType(i) {
            i =
                Math.floor(i);
            if (i < 0 || i >= this._instVars.length) throw new RangeError("invalid instance variable index");
            return this._instVars[i].type
        }
        GetInstanceVariableName(i) {
            i = Math.floor(i);
            if (i < 0 || i >= this._instVars.length) throw new RangeError("invalid instance variable index");
            return this._instVars[i].name
        }
        GetEffectTypesCount() {
            return this._effectsCount
        }
        GetBehaviorTypesIncludingInherited() {
            return this._behaviorTypesIncludingInherited
        }
        GetBehaviorTypeByName(name) {
            return this._behaviorsByName.get(name.toLowerCase()) ||
                null
        }
        GetBehaviorIndexByName(name) {
            const ret = this._behaviorNameToIndex.get(name.toLowerCase());
            if (typeof ret === "undefined") return -1;
            else return ret
        }
        GetEffectList() {
            return this._effectList
        }
        HasEffects() {
            return this._plugin.HasEffects()
        }
        UsesEffects() {
            return this._effectList && this._effectList.HasAnyEffectType()
        }
        GetSolStack() {
            return this._solStack
        }
        GetCurrentSol() {
            return this._solStack.GetCurrentSol()
        }
        GetImageInfo() {
            return this._imageInfo
        }
        SetDefaultInstanceData(d) {
            this._defaultInstanceData = d
        }
        GetDefaultInstanceData() {
            return this._defaultInstanceData
        }
        _SetDefaultLayerIndex(i) {
            this._defaultLayerIndex =
                i
        }
        GetDefaultLayerIndex() {
            return this._defaultLayerIndex
        }
        GetAnimations() {
            return this._animations
        }
        GetAnimationCount() {
            return this._animations.length
        }
        GetFamilies() {
            return this._families
        }
        BelongsToFamily(family) {
            return this._familiesSet.has(family)
        }
        GetFamilyMembers() {
            return this._familyMembers
        }
        FamilyHasMember(objectType) {
            return this._familyMembersSet.has(objectType)
        }
        GetFamilyBehaviorOffset(familyIndex) {
            return this._familyBehaviorMap[familyIndex]
        }
        GetFamilyInstanceVariableOffset(familyIndex) {
            return this._familyInstVarMap[familyIndex]
        }
        AddCustomAction(customAceBlock) {
            this._customActionMap.set(customAceBlock.GetACEName().toLowerCase(),
                customAceBlock)
        }
        HasOwnCustomActionByName(name) {
            return !!this.GetOwnCustomActionByName(name)
        }
        GetOwnCustomActionByName(name) {
            const ret = this._customActionMap.get(name.toLowerCase());
            return ret && ret.IsEnabled() ? ret : null
        }
        GetAnimationByName(name) {
            if (!this._animations) throw new Error("no animations");
            return this._animationsByName.get(name.toLowerCase()) || null
        }
        GetAnimationBySID(sid) {
            if (!this._animations) throw new Error("no animations");
            return this._animationsBySid.get(sid) || null
        }
        GetFirstAnimationFrame() {
            if (!this._animations) throw new Error("no animations");
            return this._animations[0].GetFrameAt(0)
        }
        GetDefaultInstanceSize() {
            if (this._animations) {
                const firstFrameInfo = this.GetFirstAnimationFrame().GetImageInfo();
                return [firstFrameInfo.GetWidth(), firstFrameInfo.GetHeight()]
            } else if (this._imageInfo) return [this._imageInfo.GetWidth(), this._imageInfo.GetHeight()];
            else return [100, 100]
        }
        GetSingleGlobalInstance() {
            if (!this._plugin.IsSingleGlobal()) throw new Error("not a single-global plugin");
            return this._instances[0]
        }
        GetInstances() {
            return this._instances
        }* instances() {
            yield* this._instances
        }* instancesIncludingPendingCreate() {
            yield* this._instances;
            yield* this._runtime.instancesPendingCreateForObjectClass(this)
        }
        GetInstanceCount() {
            return this._instances.length
        }
        _AddInstance(inst) {
            this._instances.push(inst)
        }
        _SetIIDsStale() {
            this._iidsStale = true
        }
        _UpdateIIDs() {
            if (!this._iidsStale || this._isFamily) return;
            const instances = this._instances;
            let i = 0;
            for (let len = instances.length; i < len; ++i) instances[i]._SetIID(i);
            const instancesPendingCreate = this._runtime._GetInstancesPendingCreate();
            for (const inst of instancesPendingCreate)
                if (inst.GetObjectClass() === this) inst._SetIID(i++);
            this._iidsStale = false
        }
        GetInstanceByIID(i) {
            const instances = this._instances;
            if (i < instances.length) return instances[i];
            i -= instances.length;
            const instancesPendingCreate = this._runtime._GetInstancesPendingCreate();
            for (const inst of instancesPendingCreate)
                if (inst.GetObjectClass() === this) {
                    if (i === 0) return inst;
                    --i
                }
            return null
        }
        GetFirstPicked(fromInst) {
            if (fromInst && fromInst.IsInContainer() && fromInst.GetObjectClass() !== this)
                for (const s of fromInst.siblings())
                    if (s.GetObjectClass() === this) return s;
            const instances =
                this.GetCurrentSol().GetInstances();
            if (instances.length) return instances[0];
            else return null
        }
        GetPairedInstance(inst) {
            const instances = this.GetCurrentSol().GetInstances();
            if (instances.length > 0) return instances[inst.GetIID() % instances.length];
            else return null
        }* allCorrespondingInstances(inst, objectClass) {
            const myInstances = this.GetCurrentSol().GetInstances();
            const myInstanceCount = myInstances.length;
            const otherSol = objectClass.GetCurrentSol();
            const otherInstances = objectClass.GetCurrentSol().GetInstances();
            const otherInstanceCount = otherInstances.length;
            let index = inst.GetIID();
            if (objectClass.IsFamily() || !otherSol.IsSelectAll()) index = otherInstances.indexOf(inst);
            const divisor = Math.ceil(myInstanceCount / otherInstanceCount);
            const remainder = myInstanceCount % otherInstanceCount;
            let startIndex = 0;
            let correspondCount = 0;
            if (remainder === 0 || index < remainder) {
                startIndex = index * divisor;
                correspondCount = divisor
            } else {
                startIndex = remainder * divisor + (index - remainder) * (divisor - 1);
                correspondCount = divisor - 1
            }
            for (let i = startIndex,
                    end = startIndex + correspondCount; i < end; ++i) yield myInstances[i]
        }
        FinishCondition(f) {
            this._sdkType.FinishCondition(f)
        }
        ApplySolToContainer() {
            if (!this._isInContainer || this._isFamily) return;
            this._UpdateIIDs();
            const sol1 = this.GetCurrentSol();
            const sol1instances = sol1._GetOwnInstances();
            const selectAll = sol1.IsSelectAll();
            const es = this._runtime.GetCurrentEventStackFrame();
            const isOrBlock = es && es.GetCurrentEvent() && es.GetCurrentEvent().IsOrBlock();
            for (const containerType of this._container.objectTypes()) {
                if (containerType ===
                    this) continue;
                containerType._UpdateIIDs();
                const sol2 = containerType.GetCurrentSol();
                sol2._SetSelectAll(selectAll);
                if (!selectAll) {
                    const sol2instances = sol2._GetOwnInstances();
                    C3.clearArray(sol2instances);
                    for (const inst of sol1instances) sol2instances.push(containerType.GetInstanceByIID(inst.GetIID()));
                    if (isOrBlock) {
                        const sol1elseInstances = sol1._GetOwnElseInstances();
                        const sol2elseInstances = sol2._GetOwnElseInstances();
                        C3.clearArray(sol2elseInstances);
                        for (const inst of sol1elseInstances) sol2elseInstances.push(containerType.GetInstanceByIID(inst.GetIID()))
                    }
                }
            }
        }
        _TruncateContainerSols(useElseInstances,
            i) {
            for (const containerType of this.GetContainer().objectTypes()) {
                const sol = containerType.GetCurrentSol();
                if (useElseInstances) C3.truncateArray(sol._GetOwnElseInstances(), i);
                else C3.truncateArray(sol._GetOwnInstances(), i)
            }
        }
        _GetCollisionCellGrid() {
            return this._collisionGrid
        }
        _SetAnyCollisionCellChanged(c) {
            this._anyCollisionCellChanged = !!c
        }
        _SetAnyInstanceParallaxed(p) {
            this._anyInstanceParallaxed = !!p
        }
        IsAnyInstanceParallaxed() {
            return this._anyInstanceParallaxed
        }
        _UpdateAllCollisionCells() {
            if (!this._anyCollisionCellChanged ||
                !this._isWorldType) return;
            for (const inst of this._instances) inst.GetWorldInfo()._UpdateCollisionCell();
            for (const inst of this._runtime._GetInstancesPendingCreate())
                if (inst.GetObjectClass() === this) inst.GetWorldInfo()._UpdateCollisionCell();
            this._anyCollisionCellChanged = false
        }
        GetSavedDataMap() {
            if (!this._savedData) this._savedData = new Map;
            return this._savedData
        }
        GetUnsavedDataMap() {
            if (!this._unsavedData) this._unsavedData = new Map;
            return this._unsavedData
        }
        HasSolidBehavior() {
            return this.UsesBehaviorByCtor(C3.Behaviors.solid)
        }
        HasJumpthruBehavior() {
            return this.UsesBehaviorByCtor(C3.Behaviors.jumpthru)
        }
        HasNoSaveBehavior() {
            return this.UsesBehaviorByCtor(C3.Behaviors.NoSave)
        }
        HasPersistBehavior() {
            return this.UsesBehaviorByCtor(C3.Behaviors.Persist)
        }
        _SaveToJson() {
            const o = {
                "instances": this._instances.map(inst => inst.SaveToJson())
            };
            if (this._savedData && this._savedData.size) o["ex"] = C3.ToSuperJSON(this._savedData);
            return o
        }
        _LoadFromJson(o) {
            if (this._savedData) {
                this._savedData.clear();
                this._savedData = null
            }
            const ex = o["ex"];
            if (ex) this._savedData = C3.FromSuperJSON(ex);
            const existingInstances = this._instances;
            const loadInstances = o["instances"];
            for (let i = 0, len = Math.min(existingInstances.length, loadInstances.length); i < len; ++i) existingInstances[i].LoadFromJson(loadInstances[i]);
            for (let i =
                    loadInstances.length, len = existingInstances.length; i < len; ++i) this._runtime.DestroyInstance(existingInstances[i]);
            for (let i = existingInstances.length, len = loadInstances.length; i < len; ++i) {
                const data = loadInstances[i];
                let layer = null;
                if (this.IsWorldType()) {
                    layer = this._runtime.GetMainRunningLayout().GetLayerBySID(data["w"]["l"]);
                    if (!layer) continue
                }
                const inst = this._runtime.CreateInstanceFromData(this._defaultInstanceData || this, layer, false, 0, 0, true);
                inst.LoadFromJson(data)
            }
            this._loadInstancesJson = loadInstances;
            this._SetIIDsStale()
        }
        _GetLoadInstancesJson() {
            return this._loadInstancesJson
        }
        _ClearLoadInstancesJson() {
            this._loadInstancesJson = null
        }
        _SetupSceneGraphConnectionsOnChangeOfLayout() {
            for (let i = 0, len = this._instances; i < len; ++i) this._instances[i]._SetupSceneGraphConnectionsOnChangeOfLayout()
        }
        GetIObjectClass() {
            return this._iObjectClass
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        _GetUserScriptInstanceClass() {
            return this._instanceUserScriptClass
        }
        _SetUserScriptInstanceClass(Class) {
            this._instanceUserScriptClass =
                Class
        }
        DispatchUserScriptEvent(e) {
            const runtime = this._runtime;
            const shouldTime = runtime.IsDebug() && !runtime.GetEventSheetManager().IsInEventEngine();
            if (shouldTime) C3Debugger.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(e);
            if (shouldTime) C3Debugger.AddScriptTime()
        }
    };

}

// objects/container.js
{
    'use strict';
    const C3 = self.C3;
    C3.Container = class Container extends C3.DefendedBase {
        constructor(runtime, objectTypes) {
            super();
            this._runtime = runtime;
            this._objectTypes = objectTypes;
            for (const objectType of this._objectTypes) objectType._SetContainer(this)
        }
        Release() {
            this._runtime = null
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectTypes() {
            return this._objectTypes
        }
        objectTypes() {
            return this._objectTypes
        }
        HasAnyWorldType() {
            return this._objectTypes.some(o => o.IsWorldType())
        }
    };

}

// objects/instance.js
{
    'use strict';
    const C3 = self.C3;
    const C3Debugger = self.C3Debugger;
    const IInstance = self.IInstance;
    const EMPTY_ARRAY = [];
    let nextPuid = 0;
    const savedDataMaps = new WeakMap;
    const unsavedDataMaps = new WeakMap;
    const FLAG_DESTROYED = 1 << 0;
    const FLAG_TILEMAP = 1 << 1;
    const FLAG_MUST_PREDRAW = 1 << 2;
    const FLAG_SOLID_ENABLED = 1 << 3;
    const FLAG_JUMPTHRU_ENABLED = 1 << 4;
    const FLAG_MUST_MITIGATE_Z_FIGHTING = 1 << 5;
    const FLAG_IS_DRAWING_WITH_EFFECTS = 1 << 6;
    C3.Instance = class Instance extends C3.DefendedBase {
        constructor(opts) {
            super();
            this._runtime = opts.runtime;
            this._objectType = opts.objectType;
            this._worldInfo = null;
            this._sdkInst = null;
            this._iScriptInterface = null;
            this._iid = 0;
            this._uid = opts.uid;
            this._puid = nextPuid++;
            this._flags = 0;
            this._instVarValues = EMPTY_ARRAY;
            this._behaviorInstances = EMPTY_ARRAY;
            const behaviorTypes = this._objectType.GetBehaviorTypesIncludingInherited();
            if (behaviorTypes.length > 0) this._behaviorInstances = behaviorTypes.map((behaviorType, index) =>
                C3.New(C3.BehaviorInstance, {
                    runtime: this._runtime,
                    behaviorType: behaviorType,
                    instance: this,
                    index
                }));
            this._siblings = this._objectType.IsInContainer() ? [] : null;
            this._timeScale = -1;
            this._dispatcher = null;
            const plugin = this.GetPlugin();
            if (plugin.MustPreDraw()) this._flags |= FLAG_MUST_PREDRAW;
            if (plugin.IsWorldType()) {
                this._worldInfo = C3.New(C3.WorldInfo, this, opts.layer);
                if (opts.worldData) this._worldInfo.Init(opts.worldData);
                else {
                    this._worldInfo.InitNoData();
                    const [width, height] = this._objectType.GetDefaultInstanceSize();
                    this._worldInfo.SetSize(width, height);
                    if (this.GetObjectClass().UsesEffects()) this._worldInfo.GetInstanceEffectList().LoadDefaultEffectParameters()
                }
            }
            if (opts.instVarData) this._LoadInstanceVariableData(opts.instVarData);
            else this._LoadDefaultInstanceVariables()
        }
        Release() {
            if (this._iScriptInterface) {
                this._iScriptInterface._Release();
                this._iScriptInterface = null
            }
            if (this._behaviorInstances.length > 0) {
                for (const behInst of this._behaviorInstances) behInst.Release();
                C3.clearArray(this._behaviorInstances)
            }
            this._sdkInst.Release();
            this._sdkInst = null;
            const savedData = savedDataMaps.get(this);
            if (savedData) {
                savedData.clear();
                savedDataMaps.delete(this)
            }
            const unsavedData = unsavedDataMaps.get(this);
            if (unsavedData) {
                unsavedData.clear();
                unsavedDataMaps.delete(this)
            }
            if (this._siblings) C3.clearArray(this._siblings);
            if (this._dispatcher) {
                this._dispatcher.Release();
                this._dispatcher = null
            }
            this._runtime = null;
            this._objectType = null;
            if (this._instVarValues.length > 0) C3.clearArray(this._instVarValues);
            if (this._worldInfo) {
                this._worldInfo.Release();
                this._worldInfo =
                    null
            }
        }
        _LoadInstanceVariableData(instVarData) {
            if (instVarData.length > 0) {
                this._instVarValues = [];
                C3.shallowAssignArray(this._instVarValues, instVarData)
            }
        }
        _LoadDefaultInstanceVariables() {
            const len = this._objectType.GetInstanceVariablesCount();
            if (len === 0) return;
            this._instVarValues = [];
            const typeToInitValue = [0, 0, ""];
            for (let i = 0; i < len; ++i) this._instVarValues.push(typeToInitValue[this._objectType.GetInstanceVariableType(i)])
        }
        _CreateSdkInstance(properties, behInstProperties) {
            if (this._sdkInst) throw new Error("already got sdk instance");
            for (let i = 0, len = this._behaviorInstances.length; i < len; ++i) {
                const behInst = this._behaviorInstances[i];
                behInst._CreateSdkInstance(behInstProperties ? behInstProperties[i] : null)
            }
            this._sdkInst = C3.New(this._objectType.GetInstanceSdkCtor(), this, properties);
            if (!(this._sdkInst instanceof C3.SDKInstanceBase)) throw new Error("sdk type must derive from SDKInstanceBase");
            if (!this.GetPlugin().IsWorldType() && this._objectType._GetUserScriptInstanceClass()) this.GetInterfaceClass();
            for (let i = 0, len = this._behaviorInstances.length; i <
                len; ++i) this._behaviorInstances[i].PostCreate()
        }
        GetSdkInstance() {
            return this._sdkInst
        }
        GetWorldInfo() {
            return this._worldInfo
        }
        GetRuntime() {
            return this._runtime
        }
        GetTimeScale() {
            return this._timeScale
        }
        GetActiveTimeScale() {
            const ts = this._timeScale;
            if (ts === -1) return this.GetRuntime().GetTimeScale();
            else return ts
        }
        SetTimeScale(ts) {
            ts = +ts;
            if (ts < 0 || !isFinite(ts)) ts = 0;
            this._timeScale = ts;
            if (this.GetObjectClass().UsesEffects()) this._runtime._SetTrackingInstanceTime(this, true)
        }
        RestoreTimeScale() {
            this._timeScale = -1;
            if (this.GetObjectClass().UsesEffects()) this._runtime._SetTrackingInstanceTime(this, false)
        }
        GetInstanceGameTime() {
            return this._runtime._GetInstanceGameTime(this)
        }
        Dispatcher() {
            if (!this._dispatcher) this._dispatcher = C3.New(C3.Event.Dispatcher);
            return this._dispatcher
        }
        Draw(renderer) {
            this._sdkInst.Draw(renderer)
        }
        OnCreate(properties) {
            this._sdkInst.OnCreate(properties)
        }
        _SetHasTilemap() {
            this._flags |= FLAG_TILEMAP
        }
        HasTilemap() {
            return (this._flags & FLAG_TILEMAP) !== 0
        }
        _MarkDestroyed() {
            this._flags |= FLAG_DESTROYED
        }
        IsDestroyed() {
            return (this._flags &
                FLAG_DESTROYED) !== 0
        }
        MustPreDraw() {
            return (this._flags & FLAG_MUST_PREDRAW) !== 0
        }
        SetMustMitigateZFighting() {
            this._flags |= FLAG_MUST_MITIGATE_Z_FIGHTING
        }
        MustMitigateZFighting() {
            return (this._flags & FLAG_MUST_MITIGATE_Z_FIGHTING) !== 0
        }
        _IsSolidEnabled() {
            return (this._flags & FLAG_SOLID_ENABLED) !== 0
        }
        _SetSolidEnabled(e) {
            if (e) this._flags |= FLAG_SOLID_ENABLED;
            else this._flags &= ~FLAG_SOLID_ENABLED
        }
        _IsJumpthruEnabled() {
            return (this._flags & FLAG_JUMPTHRU_ENABLED) !== 0
        }
        _SetJumpthruEnabled(e) {
            if (e) this._flags |= FLAG_JUMPTHRU_ENABLED;
            else this._flags &= ~FLAG_JUMPTHRU_ENABLED
        }
        _IsDrawingWithEffects() {
            return (this._flags & FLAG_IS_DRAWING_WITH_EFFECTS) !== 0
        }
        _SetIsDrawingWithEffects(e) {
            if (e) this._flags |= FLAG_IS_DRAWING_WITH_EFFECTS;
            else this._flags &= ~FLAG_IS_DRAWING_WITH_EFFECTS
        }
        SetFlag(bit, enable) {
            bit <<= 16;
            if (enable) this._flags |= bit;
            else this._flags &= ~bit
        }
        GetFlag(bit) {
            return (this._flags & bit << 16) !== 0
        }
        GetCurrentImageInfo() {
            return this._sdkInst.GetCurrentImageInfo()
        }
        GetCurrentSurfaceSize() {
            return this._sdkInst.GetCurrentSurfaceSize()
        }
        GetCurrentTexRect() {
            return this._sdkInst.GetCurrentTexRect()
        }
        GetCurrentTexQuad() {
            return this._sdkInst.GetCurrentTexQuad()
        }
        IsCurrentTexRotated() {
            return this._sdkInst.IsCurrentTexRotated()
        }
        GetImagePoint(nameOrIndex) {
            return this._sdkInst.GetImagePoint(nameOrIndex)
        }
        GetObjectClass() {
            return this._objectType
        }
        RendersToOwnZPlane() {
            return this._sdkInst.RendersToOwnZPlane()
        }
        BelongsToObjectClass(objectClass) {
            if (objectClass.IsFamily()) return objectClass.FamilyHasMember(this.GetObjectClass());
            else return this.GetObjectClass() === objectClass
        }
        CollectInstancesToPick(pickMap, createdObjectClass, includeHierarchy) {
            const addInst = (inst, objectClass_) => {
                const objectClass = objectClass_ || inst.GetObjectClass();
                const instSet = pickMap.get(objectClass);
                if (instSet) instSet.add(inst);
                else pickMap.set(objectClass, new Set([inst]))
            };
            addInst(this, createdObjectClass);
            if (this.IsInContainer())
                for (const s of this.siblings()) addInst(s);
            if (includeHierarchy)
                for (const c of this.allChildren()) addInst(c)
        }
        VerifySupportsSceneGraph() {
            if (!this.GetPlugin().SupportsSceneGraph()) throw new Error("object does not support scene graph");
        }
        HasParent() {
            return this.GetParent() !== null
        }
        GetParent() {
            const wi = this.GetWorldInfo();
            if (!wi) return null;
            const parentWi = wi.GetParent();
            return parentWi ? parentWi.GetInstance() : null
        }
        GetTopParent() {
            const wi = this.GetWorldInfo();
            if (!wi) return null;
            const parentWi = wi.GetTopParent();
            return parentWi ? parentWi.GetInstance() : null
        }* parents() {
            const wi = this.GetWorldInfo();
            if (!wi) return;
            for (const parentWi of wi.parents()) yield parentWi.GetInstance()
        }
        HasChild(child) {
            if (!child) return false;
            for (const c of this.children())
                if (c ===
                    child) return true;
            return false
        }
        HasChildren() {
            const wi = this.GetWorldInfo();
            return wi ? wi.HasChildren() : false
        }
        GetChildrenOfObjectClass(objectClass) {
            const wi = this.GetWorldInfo();
            if (!wi) return [];
            const objectClassName = objectClass.GetName();
            return wi.GetChildren().map(wi => wi.GetInstance()).filter(i => i.GetObjectClass().GetName() === objectClassName)
        }
        GetChildren() {
            const wi = this.GetWorldInfo();
            if (!wi) return [];
            return wi.GetChildren().map(wi => wi.GetInstance())
        }* children() {
            const wi = this.GetWorldInfo();
            if (!wi) return;
            for (const childWi of wi.children()) yield childWi.GetInstance()
        }* allChildren() {
            const wi = this.GetWorldInfo();
            if (!wi) return;
            for (const childWi of wi.allChildren()) yield childWi.GetInstance()
        }
        GetChildCount() {
            const wi = this.GetWorldInfo();
            return wi ? wi.GetChildCount() : 0
        }
        GetParentCount() {
            return [...this.parents()].length
        }
        GetAllChildCount() {
            const wi = this.GetWorldInfo();
            return wi ? wi.GetAllChildCount() : 0
        }
        GetChildAt(index) {
            const wi = this.GetWorldInfo();
            if (!wi) return null;
            const childWi = wi.GetChildAt(index);
            return childWi ?
                childWi.GetInstance() : null
        }
        AddChild(childInst, opts) {
            this.VerifySupportsSceneGraph();
            childInst.VerifySupportsSceneGraph();
            this.GetWorldInfo().AddChild(childInst.GetWorldInfo(), opts || {})
        }
        RemoveChild(childInst) {
            const wi = this.GetWorldInfo();
            if (!wi) return;
            wi.RemoveChild(childInst.GetWorldInfo())
        }
        GetDestroyWithParent() {
            const wi = this.GetWorldInfo();
            return wi ? wi.GetDestroyWithParent() : false
        }
        SetupInitialSceneGraphConnections() {
            const wi = this.GetWorldInfo();
            if (!wi) return;
            const childrenData = wi.GetSceneGraphChildrenExportData();
            if (!childrenData) return;
            for (const childData of childrenData) {
                const child = this._runtime.GetInstanceByUID(childData[2]);
                if (child) {
                    const flags = childData[3];
                    this.AddChild(child, {
                        transformX: !!(flags >> 0 & 1),
                        transformY: !!(flags >> 1 & 1),
                        transformWidth: !!(flags >> 2 & 1),
                        transformHeight: !!(flags >> 3 & 1),
                        transformAngle: !!(flags >> 4 & 1),
                        destroyWithParent: !!(flags >> 5 & 1),
                        transformZElevation: !!(flags >> 6 & 1),
                        transformOpacity: !!(flags >> 7 & 1),
                        transformVisibility: !!(flags >> 8 & 1)
                    })
                }
            }
        }
        SetupPersistedSceneGraphConnections(instanceToPersistedDataMap,
            persistedIndexToInstanceMap) {
            const persistedData = instanceToPersistedDataMap.get(this);
            if (!persistedData) return;
            for (const persistedChildData of persistedData["sceneGraphJson"]["children"]) {
                const child = persistedIndexToInstanceMap.get(persistedChildData["index"]);
                if (!child) continue;
                const flags = persistedChildData["flags"];
                this.AddChild(child, {
                    transformX: !!(flags >> 0 & 1),
                    transformY: !!(flags >> 1 & 1),
                    transformWidth: !!(flags >> 2 & 1),
                    transformHeight: !!(flags >> 3 & 1),
                    transformAngle: !!(flags >> 4 & 1),
                    destroyWithParent: !!(flags >>
                        5 & 1),
                    transformZElevation: !!(flags >> 6 & 1),
                    transformOpacity: !!(flags >> 7 & 1),
                    transformVisibility: !!(flags >> 8 & 1)
                })
            }
        }
        GetTemplateName() {
            const templateManager = this._runtime.GetTemplateManager();
            return templateManager ? templateManager.GetInstanceTemplateName(this) : ""
        }
        IsInContainer() {
            return this._siblings !== null
        }
        _AddSibling(inst) {
            this._siblings.push(inst)
        }
        GetSiblings() {
            return this._siblings
        }
        HasSibling(objectClass) {
            return !!this.GetSibling(objectClass)
        }
        GetSibling(objectClass) {
            const siblings = this.siblings();
            if (siblings ===
                null || siblings.length === 0) return false;
            for (const s of siblings)
                if (s.GetObjectClass() === objectClass) return s;
            return null
        }
        siblings() {
            return this._siblings
        }
        SetSiblingsSinglePicked() {
            for (const s of this.siblings()) s.GetObjectClass().GetCurrentSol().SetSinglePicked(s)
        }
        _PushSiblingsToSolInstances() {
            for (const s of this.siblings()) s.GetObjectClass().GetCurrentSol()._PushInstance(s)
        }
        _SetSiblingsToSolInstancesIndex(i) {
            for (const s of this.siblings()) s.GetObjectClass().GetCurrentSol()._GetOwnInstances()[i] = s
        }
        _PushSiblingsToSolElseInstances() {
            for (const s of this.siblings()) s.GetObjectClass().GetCurrentSol()._PushElseInstance(s)
        }
        _SetSiblingsToSolElseInstancesIndex(i) {
            for (const s of this.siblings()) s.GetObjectClass().GetCurrentSol()._GetOwnElseInstances()[i] =
                s
        }
        GetPlugin() {
            return this._objectType.GetPlugin()
        }
        _SetIID(i) {
            this._iid = i
        }
        GetIID() {
            this._objectType._UpdateIIDs();
            return this._iid
        }
        GetUID() {
            return this._uid
        }
        GetPUID() {
            return this._puid
        }
        GetBehaviorInstances() {
            return this._behaviorInstances
        }
        GetBehaviorInstanceFromCtor(ctor) {
            if (!ctor) return null;
            for (const behInst of this._behaviorInstances)
                if (behInst.GetBehavior() instanceof ctor) return behInst;
            return null
        }
        GetBehaviorSdkInstanceFromCtor(ctor) {
            if (!ctor) return null;
            const behInst = this.GetBehaviorInstanceFromCtor(ctor);
            if (behInst) return behInst.GetSdkInstance();
            else return null
        }
        GetBehaviorIndexBySID(sid) {
            const behaviorInstances = this._behaviorInstances;
            for (let i = 0, len = behaviorInstances.length; i < len; ++i)
                if (behaviorInstances[i].GetBehaviorType().GetSID() === sid) return i;
            return -1
        }
        GetAllInstanceVariableValues() {
            return this._instVarValues
        }
        _GetAllInstanceVariableNames() {
            return this._objectType._GetAllInstanceVariableNames()
        }
        GetInstanceVariableCount() {
            return this._instVarValues.length
        }
        GetInstanceVariableValue(index) {
            index =
                index | 0;
            const instVarValues = this._instVarValues;
            if (index < 0 || index >= instVarValues.length) throw new RangeError("invalid instance variable");
            return instVarValues[index]
        }
        _GetInstanceVariableValueUnchecked(index) {
            return this._instVarValues[index]
        }
        _GetInstanceVariableTypedValue(index) {
            const ret = this._instVarValues[index];
            if (this._objectType.GetInstanceVariableType(index) === 0) return !!ret;
            else return ret
        }
        SetInstanceVariableValue(index, value) {
            index = index | 0;
            const instVarValues = this._instVarValues;
            if (index <
                0 || index >= instVarValues.length) throw new RangeError("invalid instance variable");
            const type = this._objectType.GetInstanceVariableType(index);
            switch (type) {
                case 0:
                    instVarValues[index] = value ? 1 : 0;
                    break;
                case 1:
                    instVarValues[index] = typeof value === "number" ? value : parseFloat(value);
                    break;
                case 2:
                    instVarValues[index] = typeof value === "string" ? value : value.toString();
                    break;
                default:
                    throw new Error("unknown instance variable type");
            }
        }
        SetInstanceVariableOffset(index, offset) {
            if (offset === 0) return;
            index = index | 0;
            const instVarValues =
                this._instVarValues;
            if (index < 0 || index >= instVarValues.length) throw new RangeError("invalid instance variable");
            const lastValue = instVarValues[index];
            if (typeof lastValue === "number")
                if (typeof offset === "number") instVarValues[index] += offset;
                else instVarValues[index] += parseFloat(offset);
            else if (typeof lastValue === "boolean") throw new Error("can not set offset of boolean variable");
            else if (typeof lastValue === "string") throw new Error("can not set offset of string variable");
            else throw new Error("unknown instance variable type");
        }
        GetSavedDataMap() {
            let ret = savedDataMaps.get(this);
            if (ret) return ret;
            ret = new Map;
            savedDataMaps.set(this, ret);
            return ret
        }
        GetUnsavedDataMap() {
            let ret = unsavedDataMaps.get(this);
            if (ret) return ret;
            ret = new Map;
            unsavedDataMaps.set(this, ret);
            return ret
        }
        _HasAnyCreateDestroyHandler(name) {
            const objectType = this.GetObjectClass();
            if (objectType.UserScriptDispatcher().HasAnyHandlerFor(name)) return true;
            for (const family of objectType.GetFamilies())
                if (family.UserScriptDispatcher().HasAnyHandlerFor(name)) return true;
            if (this._runtime.UserScriptDispatcher().HasAnyHandlerFor(name)) return true;
            return false
        }
        _TriggerOnCreatedOnSelfAndRelated() {
            const instancesToTriggerOnCreated = new Set;
            instancesToTriggerOnCreated.add(this);
            const wi = this.GetWorldInfo();
            if (wi && wi.HasChildren())
                for (const c of this.allChildren()) {
                    instancesToTriggerOnCreated.add(c);
                    if (!c.IsInContainer()) continue;
                    for (const s of c.siblings()) instancesToTriggerOnCreated.add(s)
                }
            if (this.IsInContainer())
                for (const s of this.siblings()) instancesToTriggerOnCreated.add(s);
            for (const instance of instancesToTriggerOnCreated.values()) instance._TriggerOnCreated()
        }
        _TriggerOnCreated() {
            if (this._objectType._GetUserScriptInstanceClass()) this.GetInterfaceClass();
            if (this._HasAnyCreateDestroyHandler("instancecreate")) {
                const objectType = this.GetObjectClass();
                const instCreateEvent = new C3.Event("instancecreate");
                instCreateEvent.instance = this.GetInterfaceClass();
                objectType.DispatchUserScriptEvent(instCreateEvent);
                for (const family of objectType.GetFamilies()) family.DispatchUserScriptEvent(instCreateEvent);
                this._runtime.DispatchUserScriptEvent(instCreateEvent)
            }
            this._runtime.Trigger(this.GetPlugin().constructor.Cnds.OnCreated, this, null)
        }
        _TriggerOnDestroyed() {
            this._runtime.Trigger(this.GetPlugin().constructor.Cnds.OnDestroyed, this, null)
        }
        _FireDestroyedScriptEvents(isEndingLayout) {
            if (this._iScriptInterface) {
                const e = new C3.Event("destroy");
                e.isEndingLayout = isEndingLayout;
                this.DispatchUserScriptEvent(e)
            }
            if (!this._HasAnyCreateDestroyHandler("instancedestroy")) return;
            const objectType = this.GetObjectClass();
            const instDestroyEvent = new C3.Event("instancedestroy");
            instDestroyEvent.instance = this.GetInterfaceClass();
            instDestroyEvent.isEndingLayout = isEndingLayout;
            objectType.DispatchUserScriptEvent(instDestroyEvent);
            for (const family of objectType.GetFamilies()) family.DispatchUserScriptEvent(instDestroyEvent);
            this._runtime.DispatchUserScriptEvent(instDestroyEvent)
        }
        _GetDebuggerProperties() {
            return this._sdkInst.GetDebuggerProperties()
        }
        SaveToJson(mode = "full") {
            const o = {};
            if (mode === "full") o["uid"] = this.GetUID();
            else o["c3"] = true;
            if (mode !== "visual-state") {
                const savedData = savedDataMaps.get(this);
                if (savedData && savedData.size) o["ex"] = C3.ToSuperJSON(savedData);
                if (this.GetTimeScale() !== -1) o["mts"] = this.GetTimeScale();
                if (this._objectType.GetInstanceVariablesCount() > 0) {
                    const ivs = {};
                    const ivSids = this._objectType.GetInstanceVariableSIDs();
                    for (let i = 0, len = this._instVarValues.length; i < len; ++i) ivs[ivSids[i].toString()] = this._instVarValues[i];
                    o["ivs"] = ivs
                }
                if (this._behaviorInstances.length) {
                    const behs = {};
                    for (const behInst of this._behaviorInstances) {
                        const data =
                            behInst.SaveToJson();
                        if (data) behs[behInst.GetBehaviorType().GetSID().toString()] = data
                    }
                    o["behs"] = behs
                }
            }
            if (this._worldInfo) o["w"] = this._worldInfo._SaveToJson(mode);
            const ownData = this._sdkInst.SaveToJson();
            if (ownData) o["data"] = ownData;
            return o
        }
        _OnBeforeLoad(mode = "full") {
            if (this._worldInfo) this._worldInfo._OnBeforeLoad(mode)
        }
        _SetupSceneGraphConnectionsOnChangeOfLayout() {
            if (!this.GetPlugin().IsWorldType()) return;
            this._worldInfo._SetupSceneGraphConnectionsOnChangeOfLayout()
        }
        LoadFromJson(o, mode = "full") {
            if (mode ===
                "full") this._uid = o["uid"];
            else if (!o["c3"]) return;
            if (mode !== "visual-state") {
                let savedData = savedDataMaps.get(this);
                if (savedData) {
                    savedData.clear();
                    savedDataMaps.delete(this)
                }
                const ex = o["ex"];
                if (ex) {
                    savedData = C3.FromSuperJSON(ex);
                    savedDataMaps.set(this, savedData)
                }
                this._timeScale = o.hasOwnProperty("mts") ? o["mts"] : -1;
                const ivs = o["ivs"];
                if (ivs)
                    for (const [sidStr, value] of Object.entries(ivs)) {
                        const sid = parseInt(sidStr, 10);
                        const index = this._objectType.GetInstanceVariableIndexBySID(sid);
                        if (index < 0 || index >=
                            this._instVarValues.length) continue;
                        let v = value;
                        if (v === null) v = NaN;
                        this._instVarValues[index] = v
                    }
            }
            if (this.GetPlugin().IsWorldType()) {
                const worldData = o["w"];
                const layerSid = worldData["l"];
                if (this._worldInfo.GetLayer().GetSID() !== layerSid) {
                    const oldLayer = this._worldInfo.GetLayer();
                    const newLayer = oldLayer.GetLayout().GetLayerBySID(layerSid);
                    if (newLayer) {
                        this._worldInfo._SetLayer(newLayer);
                        oldLayer._RemoveInstance(this, true);
                        newLayer._AddInstance(this, true);
                        newLayer.SetZIndicesChanged();
                        this._worldInfo.SetBboxChanged()
                    } else if (mode ===
                        "full") this._runtime.DestroyInstance(this)
                }
                this._worldInfo._LoadFromJson(worldData, mode)
            }
            if (mode !== "visual-state") {
                const behs = o["behs"];
                if (behs)
                    for (const [sidStr, data] of Object.entries(behs)) {
                        const sid = parseInt(sidStr, 10);
                        const index = this.GetBehaviorIndexBySID(sid);
                        if (index < 0 || index >= this._behaviorInstances.length) continue;
                        this._behaviorInstances[index].LoadFromJson(data)
                    }
            }
            const ownData = o["data"];
            if (ownData) this._sdkInst.LoadFromJson(ownData, mode)
        }
        GetInterfaceClass() {
            return this._iScriptInterface ||
                this._InitUserScriptInterface()
        }
        HasScriptInterface() {
            return !!this._iScriptInterface
        }
        _InitUserScriptInterface() {
            const DefaultScriptClass = this._worldInfo ? self.IWorldInstance : IInstance;
            const SdkScriptClass = this._sdkInst.GetScriptInterfaceClass();
            const UserScriptClass = this._objectType._GetUserScriptInstanceClass();
            const ScriptInterfaceClass = UserScriptClass || SdkScriptClass || DefaultScriptClass;
            IInstance._Init(this);
            this._iScriptInterface = new ScriptInterfaceClass;
            IInstance._Init(null);
            if (SdkScriptClass &&
                !(this._iScriptInterface instanceof DefaultScriptClass)) throw new TypeError(`script interface class '${SdkScriptClass.name}' does not extend the right base class '${DefaultScriptClass.name}'`);
            if (UserScriptClass) {
                const ExpectedBaseClass = SdkScriptClass || DefaultScriptClass;
                if (!(this._iScriptInterface instanceof ExpectedBaseClass)) throw new TypeError(`setInstanceClass(): class '${UserScriptClass.name}' does not extend the right base class '${ExpectedBaseClass.name}'`);
            }
            return this._iScriptInterface
        }
        _GetInstVarsScriptDescriptor(instDescriptors) {
            if (this._instVarValues.length ===
                0) return;
            const varDescriptors = {};
            const instVarJsPropNames = this._objectType._GetAllInstanceVariableJsPropNames();
            for (let i = 0, len = instVarJsPropNames.length; i < len; ++i) varDescriptors[instVarJsPropNames[i]] = {
                configurable: false,
                enumerable: true,
                get: C3.Instance.prototype._GetInstanceVariableTypedValue.bind(this, i),
                set: C3.Instance.prototype.SetInstanceVariableValue.bind(this, i)
            };
            const instVarsObj = Object.create(Object.prototype, varDescriptors);
            instDescriptors.instVars = {
                value: instVarsObj,
                writable: false
            }
        }
        _GetBehaviorsScriptDescriptor(instDescriptors) {
            const behaviorInstances =
                this._behaviorInstances;
            if (behaviorInstances.length === 0) return;
            const behDescriptors = {};
            for (const behInst of behaviorInstances) behDescriptors[behInst.GetBehaviorType().GetJsPropName()] = {
                value: behInst.GetScriptInterface(),
                writable: false
            };
            const behaviorsObj = Object.create(Object.prototype, behDescriptors);
            instDescriptors.behaviors = {
                value: behaviorsObj,
                writable: false
            }
        }
        DispatchUserScriptEvent(e) {
            if (!this.HasScriptInterface()) return;
            const scriptInterface = this.GetInterfaceClass();
            e.instance = scriptInterface;
            const runtime = this._runtime;
            const shouldTime = runtime.IsDebug() && !runtime.GetEventSheetManager().IsInEventEngine();
            if (shouldTime) C3Debugger.StartMeasuringScriptTime();
            scriptInterface.dispatchEvent(e);
            if (shouldTime) C3Debugger.AddScriptTime()
        }
    };

}

// objects/sceneGraphInfo.js
{
    'use strict';
    const C3 = self.C3;
    C3.SceneGraphInfo = class SceneGraphInfo extends C3.DefendedBase {
        constructor(owner) {
            super();
            this._owner = owner;
            this._parent = null;
            this._children = [];
            this._startWidth = owner.GetWidth();
            this._startHeight = owner.GetHeight();
            this._startScaleX = 1;
            this._startScaleY = 1;
            this._parentStartAngle = 0;
            this._ownOpacity = 1;
            this._startOpacity = owner.GetOpacity();
            this._tmpSceneGraphChildren = null;
            this._tmpSceneGraphChildrenIndexes = null
        }
        Release() {
            this._parent = null;
            this._tmpSceneGraphChildren = null;
            this._tmpSceneGraphChildrenIndexes = null;
            C3.clearArray(this._children)
        }
        SetParent(parent) {
            this._ownOpacity = this._owner.GetOpacity();
            this._startOpacity = this._ownOpacity;
            this._parent = parent;
            this._parentStartAngle = parent ? parent.GetAngle() : 0
        }
        GetParent() {
            return this._parent
        }
        HasChildren() {
            return this._children.length > 0
        }
        GetChildren() {
            return this._children
        }
        _MaybeSortChildren() {
            if (!this.HasChildren()) return;
            if (!this._tmpSceneGraphChildrenIndexes) return;
            if (this._children.length === 1) return;
            this._children.sort((f, s) => {
                const fIndex = this._tmpSceneGraphChildrenIndexes.get(f.GetInstance());
                const sIndex = this._tmpSceneGraphChildrenIndexes.get(s.GetInstance());
                if (C3.IsFiniteNumber(fIndex) && C3.IsFiniteNumber(sIndex)) return fIndex - sIndex;
                return 0
            })
        }
        GetStartScaleX() {
            return this._startScaleX
        }
        SetStartScaleX(sx) {
            this._startScaleX = sx
        }
        GetStartScaleY() {
            return this._startScaleY
        }
        SetStartScaleY(sy) {
            this._startScaleY = sy
        }
        GetStartOpacity() {
            return this._startOpacity
        }
        GetOwnOpacity() {
            return this._ownOpacity
        }
        SetOwnOpacity(ownOpacity) {
            this._ownOpacity = ownOpacity
        }
        _GetStartWidth() {
            if (this._startWidth === 0) return Number.EPSILON;
            return this._startWidth
        }
        _GetStartHeight() {
            if (this._startHeight === 0) return Number.EPSILON;
            return this._startHeight
        }
        GetParentScaleX() {
            if (this._owner.GetTransformWithParentWidth()) {
                const p = this._parent;
                let cw = p.GetWidth();
                let sw = p._GetSceneGraphInfo()._GetStartWidth();
                if (cw === 0) cw = Number.EPSILON;
                if (sw === Number.EPSILON && cw === Number.EPSILON) return 1;
                if (sw === Number.EPSILON && cw !== Number.EPSILON) {
                    const sdkIntance = p.GetInstance().GetSdkInstance();
                    if (sdkIntance.IsOriginalSizeKnown()) return 1 + cw / sdkIntance.GetOriginalWidth()
                }
                return cw /
                    sw
            }
            return 1
        }
        GetParentScaleY() {
            if (this._owner.GetTransformWithParentHeight()) {
                const p = this._parent;
                let ch = p.GetHeight();
                let sh = p._GetSceneGraphInfo()._GetStartHeight();
                if (ch === 0) ch = Number.EPSILON;
                if (sh === Number.EPSILON && ch === Number.EPSILON) return 1;
                if (sh === Number.EPSILON && ch !== Number.EPSILON) {
                    const sdkIntance = p.GetInstance().GetSdkInstance();
                    if (sdkIntance.IsOriginalSizeKnown()) return 1 + ch / sdkIntance.GetOriginalHeight()
                }
                return ch / sh
            }
            return 1
        }
        GetParentStartAngle() {
            return this._parentStartAngle
        }
        _SaveToJson(mode) {
            return {
                "sw": this._startWidth,
                "sh": this._startHeight,
                "sx": this._startScaleX,
                "sy": this._startScaleY,
                "psa": this._parentStartAngle,
                "oo": this._ownOpacity,
                "so": this._startOpacity,
                "p": this._GetParentJson(mode),
                "c": this._GetChildrenJson(mode)
            }
        }
        _GetFlagsString(wi) {
            let flagsStr = "";
            if (wi.GetTransformWithParentX()) flagsStr += "x";
            if (wi.GetTransformWithParentY()) flagsStr += "y";
            if (wi.GetTransformWithParentWidth()) flagsStr += "w";
            if (wi.GetTransformWithParentHeight()) flagsStr += "h";
            if (wi.GetTransformWithParentAngle()) flagsStr += "a";
            if (wi.GetTransformWithParentZElevation()) flagsStr +=
                "z";
            if (wi.GetDestroyWithParent()) flagsStr += "d";
            if (wi.GetTransformWithParentOpacity()) flagsStr += "o";
            if (wi.GetTransformWithParentVisibility()) flagsStr += "v";
            return flagsStr
        }
        _GetParentJson(mode) {
            if (!this._parent) return null;
            if (!this._parent.GetInstance() || this._parent.GetInstance().IsDestroyed()) return null;
            return this._GetInstanceJson(this._parent, this._owner, mode)
        }
        _GetChildrenJson(mode) {
            return this._children.map(c => {
                return this._GetInstanceJson(c, c, mode)
            })
        }
        _GetInstanceJson(wi, flagsSource, mode) {
            const inst =
                wi.GetInstance();
            const ret = {};
            ret["uid"] = inst.GetUID();
            ret["f"] = this._GetFlagsString(flagsSource);
            ret["offsets"] = flagsSource._SaveSceneGraphPropertiesToJson();
            ret["data"] = C3.SceneGraphInfo.GetSceneGraphInstanceDataFromInstance(inst);
            ret["oci"] = inst.GetObjectClass().GetIndex();
            if (mode === "state") {
                ret["inst"] = inst.SaveToJson();
                ret["instIndex"] = NaN
            } else {
                ret["instIndex"] = inst.GetObjectClass().GetInstances().indexOf(inst);
                ret["inst"] = null
            }
            return ret
        }
        _LoadFromJson(o) {
            this._startWidth = o["sw"];
            this._startHeight =
                o["sh"];
            this._startScaleX = o["sx"];
            this._startScaleY = o["sy"];
            this._parentStartAngle = o["psa"];
            this._ownOpacity = o["oo"];
            this._startOpacity = o["so"]
        }
        _SetTmpSceneGraphChildren(tmpSceneGraphChildren, tmpSceneGraphChildrenIndexes) {
            this._tmpSceneGraphChildren = tmpSceneGraphChildren;
            this._tmpSceneGraphChildrenIndexes = tmpSceneGraphChildrenIndexes
        }
        _OnAfterLoad(o, opts) {
            const owner = this._owner;
            const runtime = owner.GetRuntime();
            const processedExistingWis = new Set;
            if (o["p"] && !this._parent) {
                const parentUid = o["p"]["uid"];
                const parentInst = runtime.GetInstanceByUID(parentUid);
                if (opts && !opts.ignoreMissingInstances);
                if (parentInst) {
                    const parentWi = parentInst.GetWorldInfo();
                    if (parentInst.HasChild(this._owner.GetInstance())) this._parent = parentWi;
                    else {
                        parentInst.AddChild(this._owner.GetInstance(), this._GetFlagsObj(o["p"]["f"]));
                        if (!processedExistingWis.has(this._owner)) this._owner._LoadSceneGraphPropertiesFromJson(o["p"]["offsets"]);
                        processedExistingWis.add(this._owner);
                        const pwi = parentInst.GetWorldInfo();
                        pwi._GetSceneGraphInfo()._MaybeSortChildren()
                    }
                } else if (C3.IsFiniteNumber(o["p"]["oci"])) {
                    const objectClass =
                        runtime.GetObjectClassByIndex(o["p"]["oci"]);
                    const system = runtime.GetSystemPlugin();
                    const parentInstance = runtime.CreateInstance(objectClass, owner.GetLayer(), 0, 0, true);
                    if (opts && !opts.ignoreMissingInstances);
                    if (parentInstance) {
                        const instData = this._GetInstanceData(o["p"], runtime);
                        parentInstance.LoadFromJson(instData);
                        const parentWi = parentInstance.GetWorldInfo();
                        parentWi.GetLayer().SortAndAddInstancesByZIndex(parentInstance);
                        parentInstance.AddChild(owner.GetInstance(), this._GetFlagsObj(o["p"]["f"]));
                        const pwi = parentInstance.GetWorldInfo();
                        pwi._GetSceneGraphInfo()._MaybeSortChildren()
                    }
                }
            }
            const childInstances = [];
            for (const childData of o["c"]) {
                const childUid = childData["uid"];
                const childInst = runtime.GetInstanceByUID(childUid);
                if (childInst) childInstances.push(childInst)
            }
            let childIndex = 0;
            for (const childData of o["c"]) {
                const childUid = childData["uid"];
                const childInst = runtime.GetInstanceByUID(childUid);
                if (opts && !opts.ignoreMissingInstances);
                if (childInst) {
                    if (this._tmpSceneGraphChildren && this._tmpSceneGraphChildren[childIndex]) {
                        const existingChildIntance =
                            this._tmpSceneGraphChildren[childIndex];
                        if (existingChildIntance.GetObjectClass() !== childInst.GetObjectClass()) {
                            childIndex++;
                            continue
                        }
                        if (existingChildIntance.IsDestroyed()) {
                            childIndex++;
                            continue
                        }
                        const newChildData = o["c"][childIndex];
                        this._AddAndSetChildInstance(existingChildIntance.GetWorldInfo(), newChildData, processedExistingWis, false);
                        childIndex++;
                        continue
                    }
                    const objectClass = childInst.GetObjectClass();
                    const childrenCount = this._GetInstancesOfObjectClassCount(childInstances, objectClass);
                    const childrenOfClassCount =
                        owner.GetInstance().GetChildrenOfObjectClass(objectClass).length;
                    if (childrenCount === childrenOfClassCount) {
                        const existingChild = owner.GetInstance().GetChildAt(childIndex);
                        const existingChildWi = existingChild.GetWorldInfo();
                        if (existingChildWi) {
                            if (!processedExistingWis.has(existingChildWi)) existingChildWi._LoadSceneGraphPropertiesFromJson(childData["offsets"]);
                            processedExistingWis.add(existingChildWi)
                        }
                        childIndex++;
                        continue
                    }
                    if (childInst.HasParent()) {
                        const childWi = this._CreateNewChildInstance(childData,
                            opts);
                        this._AddAndSetChildInstance(childWi, childData, processedExistingWis);
                        childIndex++;
                        continue
                    }
                    this._AddAndSetChildInstance(childInst.GetWorldInfo(), childData, processedExistingWis)
                } else {
                    const childWi = this._CreateNewChildInstance(childData, opts);
                    this._AddAndSetChildInstance(childWi, childData, processedExistingWis)
                }
                childIndex++
            }
        }
        _GetFlagsObj(flagsString) {
            const opts = {};
            opts.transformX = flagsString.includes("x");
            opts.transformY = flagsString.includes("y");
            opts.transformWidth = flagsString.includes("w");
            opts.transformHeight =
                flagsString.includes("h");
            opts.transformAngle = flagsString.includes("a");
            opts.transformZElevation = flagsString.includes("z");
            opts.destroyWithParent = flagsString.includes("d");
            opts.transformOpacity = flagsString.includes("o");
            opts.transformVisibility = flagsString.includes("v");
            return opts
        }
        _CreateNewChildInstance(childData, opts) {
            if (!C3.IsFiniteNumber(childData["oci"])) return;
            const owner = this._owner;
            const runtime = owner.GetRuntime();
            let childInstance;
            if (childData["data"]) childInstance = runtime.CreateInstanceFromData(childData["data"],
                owner.GetLayer(), false, 0, 0, false, true);
            else {
                const objectClass = runtime.GetObjectClassByIndex(childData["oci"]);
                childInstance = runtime.CreateInstance(objectClass, owner.GetLayer(), 0, 0, true)
            }
            if (opts && !opts.ignoreMissingInstances);
            if (!childInstance) return;
            const instData = this._GetInstanceData(childData, runtime);
            childInstance.LoadFromJson(instData);
            const childWi = childInstance.GetWorldInfo();
            childWi.GetLayer().SortAndAddInstancesByZIndex(childInstance, true);
            return childWi
        }
        _AddAndSetChildInstance(childWi, childData,
            processedExistingWis, setJson = true) {
            const owner = this._owner;
            owner.AddChild(childWi, this._GetFlagsObj(childData["f"]));
            if (setJson) {
                if (!processedExistingWis.has(childWi)) childWi._LoadSceneGraphPropertiesFromJson(childData["offsets"]);
                processedExistingWis.add(childWi)
            }
            this._MaybeSortChildren()
        }
        _GetInstancesOfObjectClassCount(instances, objectClass) {
            return instances.filter(i => i.GetObjectClass().GetName() === objectClass.GetName()).length
        }
        _GetInstanceData(json, runtime) {
            if (C3.IsFiniteNumber(json["instIndex"])) {
                const objectClass =
                    runtime.GetObjectClassByIndex(json["oci"]);
                const instancesJson = objectClass._GetLoadInstancesJson();
                return instancesJson[json["instIndex"]]
            } else if (C3.IsString(json["inst"])) return JSON.parse(json["inst"]);
            else if (json["inst"]) return json["inst"]
        }
        static GetSceneGraphInstanceDataFromInstance(sourceInstance) {
            let instData = sourceInstance.GetWorldInfo().GetLayer().GetInitialInstanceData(sourceInstance.GetUID());
            if (!instData) return null;
            instData = JSON.parse(JSON.stringify(instData));
            const newSgiData = [];
            for (const child of [...sourceInstance.GetChildren()]) {
                const childWi =
                    child.GetWorldInfo();
                newSgiData.push([childWi.GetLayout().GetSID(), childWi.GetLayer().GetIndex(), child.GetUID(), C3.SceneGraphInfo._GetFlagsNumber(childWi), child.GetObjectClass().IsInContainer() ? 1 : 0, childWi.GetZIndex(), C3.SceneGraphInfo.GetSceneGraphInstanceDataFromInstance(child)])
            }
            if (C3.IsArray(instData[0][14])) instData[0][14][1] = newSgiData;
            else {
                instData[0][14] = [];
                instData[0][14][0] = C3.SceneGraphInfo._GetDefaultFlagsNumber();
                instData[0][14][1] = newSgiData;
                instData[0][14][2] = sourceInstance.GetWorldInfo().GetZIndex()
            }
            return instData
        }
        static _GetFlagsNumber(wi) {
            let flagsNumber =
                0;
            flagsNumber |= Number(wi.GetTransformWithParentVisibility()) << 8;
            flagsNumber |= Number(wi.GetTransformWithParentOpacity()) << 7;
            flagsNumber |= Number(wi.GetTransformWithParentZElevation()) << 6;
            flagsNumber |= Number(wi.GetDestroyWithParent()) << 5;
            flagsNumber |= Number(wi.GetTransformWithParentAngle()) << 4;
            flagsNumber |= Number(wi.GetTransformWithParentHeight()) << 3;
            flagsNumber |= Number(wi.GetTransformWithParentWidth()) << 2;
            flagsNumber |= Number(wi.GetTransformWithParentY()) << 1;
            flagsNumber |= Number(wi.GetTransformWithParentX()) <<
                0;
            return flagsNumber
        }
        static _GetDefaultFlagsNumber(wi) {
            let flagsNumber = 0;
            flagsNumber |= 1 << 8;
            flagsNumber |= 1 << 7;
            flagsNumber |= 1 << 6;
            flagsNumber |= 1 << 5;
            flagsNumber |= 1 << 4;
            flagsNumber |= 1 << 3;
            flagsNumber |= 1 << 2;
            flagsNumber |= 1 << 1;
            flagsNumber |= 1 << 0;
            return flagsNumber
        }
    };

}

// objects/worldInfo.js
{
    'use strict';
    const C3 = self.C3;
    const glMatrix = self.glMatrix;
    const vec3 = glMatrix.vec3;
    const vec4 = glMatrix.vec4;
    const tempRect = C3.New(C3.Rect);
    const tempQuad = C3.New(C3.Quad);
    const bboxChangeEvent = C3.New(C3.Event, "bboxchange", false);
    const tempColor = C3.New(C3.Color, 0, 0, 0, 0);
    const tempCollisionPoly = C3.New(C3.CollisionPoly);
    const DEFAULT_COLOR = C3.New(C3.Color, 1, 1, 1, 1);
    const DEFAULT_RENDER_CELLS = C3.New(C3.Rect, 0, 0, -1, -1);
    const DEFAULT_COLLISION_CELLS = C3.New(C3.Rect, 0, 0, -1, -1);
    const VALID_SET_MESH_POINT_MODES = new Set(["absolute", "relative"]);
    const EMPTY_ARRAY = [];
    let enableUpdateRendererStateGroup = true;
    const FLAG_IS_VISIBLE = 1 << 0;
    const FLAG_BBOX_CHANGED = 1 << 1;
    const FLAG_ENABLE_BBOX_CHANGED_EVENT = 1 << 2;
    const FLAG_COLLISION_ENABLED = 1 << 3;
    const FLAG_COLLISION_CELL_CHANGED = 1 << 4;
    const FLAG_SOLID_FILTER_INCLUSIVE = 1 << 5;
    const FLAG_HAS_ANY_ACTIVE_EFFECT = 1 << 6;
    const FLAG_IS_ROTATABLE = 1 << 7;
    const FLAG_DESTROYED = 1 << 8;
    const FLAG_DESTROY_WITH_PARENT = 1 << 9;
    const FLAG_TRANSFORM_WITH_PARENT_X = 1 << 10;
    const FLAG_TRANSFORM_WITH_PARENT_Y = 1 << 11;
    const FLAG_TRANSFORM_WITH_PARENT_W = 1 << 12;
    const FLAG_TRANSFORM_WITH_PARENT_H = 1 << 13;
    const FLAG_TRANSFORM_WITH_PARENT_A = 1 << 14;
    const FLAG_TRANSFORM_WITH_PARENT_Z_ELEVATION = 1 << 15;
    const FLAG_TRANSFORM_WITH_PARENT_OPACITY = 1 << 22;
    const FLAG_TRANSFORM_WITH_PARENT_VISIBILITY = 1 << 23;
    const MASK_ALL_SCENE_GRAPH_FLAGS = FLAG_DESTROY_WITH_PARENT | FLAG_TRANSFORM_WITH_PARENT_X | FLAG_TRANSFORM_WITH_PARENT_Y | FLAG_TRANSFORM_WITH_PARENT_W | FLAG_TRANSFORM_WITH_PARENT_H | FLAG_TRANSFORM_WITH_PARENT_A | FLAG_TRANSFORM_WITH_PARENT_Z_ELEVATION | FLAG_TRANSFORM_WITH_PARENT_OPACITY | FLAG_TRANSFORM_WITH_PARENT_VISIBILITY;
    const FLAG_MESH_CHANGED = 1 << 16;
    const FLAG_PHYSICS_BODY_CHANGED = 1 << 17;
    const FLAG_SIN_COS_ANGLE_CHANGED = 1 << 18;
    const FLAG_USE_POINTS_SHADER_PROGRAM = 1 << 19;
    const FLAG_DRAW_BACK_FACE_ONLY = 1 << 20;
    const FLAG_DRAW_NON_BACK_FACES_ONLY = 1 << 21;
    const FLAG_BLEND_MODE_BIT_OFFSET = 26;
    const FLAG_BLEND_MODE_MASK = 31 << FLAG_BLEND_MODE_BIT_OFFSET;
    const sceneGraphExportDataMap = new WeakMap;
    const sceneGraphZIndexMap = new WeakMap;
    const needsSceneGraphAfterLoad = new WeakMap;
    C3.WorldInfo = class WorldInfo extends C3.DefendedBase {
        constructor(inst, layer) {
            super();
            this._inst = inst;
            this._objectClass = inst.GetObjectClass();
            this._runtime = inst.GetRuntime();
            this._layer = layer;
            this._zIndex = -1;
            this._flags = FLAG_IS_VISIBLE | FLAG_BBOX_CHANGED | FLAG_COLLISION_ENABLED | FLAG_COLLISION_CELL_CHANGED | FLAG_MESH_CHANGED | FLAG_PHYSICS_BODY_CHANGED;
            if (this._objectClass.GetPlugin().IsRotatable()) this._flags |= FLAG_IS_ROTATABLE;
            this._x = NaN;
            this._y = NaN;
            this._zElevation = NaN;
            this._w = NaN;
            this._h = NaN;
            this._depth =
                NaN;
            this._a = NaN;
            this._sinA = NaN;
            this._cosA = NaN;
            this._ox = NaN;
            this._oy = NaN;
            this._boundingBox = C3.New(C3.Rect);
            this._boundingQuad = C3.New(C3.Quad);
            this._collisionCells = DEFAULT_COLLISION_CELLS;
            this._renderCells = DEFAULT_RENDER_CELLS;
            this._sourceCollisionPoly = null;
            this._transformedPolyInfo = null;
            this._solidFilterTags = null;
            this._color = DEFAULT_COLOR;
            this._colorPremultiplied = DEFAULT_COLOR;
            this._stateGroup = null;
            this._instanceEffectList = null;
            if (this._inst.GetObjectClass().UsesEffects()) this._instanceEffectList =
                C3.New(C3.InstanceEffectList, this._inst, this);
            this._sceneGraphInfo = null;
            this._tmpSceneGraphChildren = null;
            this._tmpSceneGraphChildrenIndexes = null;
            this._after_load = null;
            this._after_load_instance = null;
            this._meshInfo = null
        }
        _MarkDestroyed() {
            this._flags |= FLAG_DESTROYED
        }
        Release() {
            if (this._stateGroup) {
                this._runtime.GetRenderer().ReleaseStateGroup(this._stateGroup);
                this._stateGroup = null
            }
            this._sourceCollisionPoly = null;
            if (this._transformedPolyInfo) {
                this._transformedPolyInfo.poly.Release();
                this._transformedPolyInfo =
                    null
            }
            if (this._solidFilterTags) {
                this._solidFilterTags.clear();
                this._solidFilterTags = null
            }
            this.ReleaseMesh();
            if (this._instanceEffectList) this._instanceEffectList.Release();
            if (this.HasParent()) this.GetParent().RemoveChild(this);
            if (this.HasChildren()) {
                const childrenToRelease = [...this.GetChildren()];
                for (const child of childrenToRelease) this.RemoveChild(child)
            }
            this._ReleaseSceneGraphInfo();
            this._ReleaseTmpSceneGraphInfo();
            sceneGraphExportDataMap.delete(this);
            sceneGraphZIndexMap.delete(this);
            if (this._after_load) {
                this.GetRuntime().Dispatcher().removeEventListener("afterload",
                    this._after_load);
                this._after_load = null
            }
            if (this._after_load_instance) {
                this.GetRuntime().Dispatcher().removeEventListener("afterloadinstance", this._after_load_instance);
                this._after_load_instance = null
            }
            this._inst = null;
            this._objectClass = null;
            this._runtime = null;
            this._layer = null
        }
        Init(data) {
            enableUpdateRendererStateGroup = false;
            this.SetXY(data[0], data[1]);
            this.SetZElevation(data[2]);
            this.SetSize(data[3], data[4]);
            this._depth = 0;
            if (this.IsRotatable()) this.SetAngle(data[6]);
            else this._a = 0;
            tempColor.setFromJSON(data[7]);
            this._SetColor(tempColor);
            this.SetOriginX(data[8]);
            this.SetOriginY(data[9]);
            this.SetBlendMode(data[10]);
            if (this._instanceEffectList) this._instanceEffectList._LoadEffectParameters(data[12]);
            if (data[14]) sceneGraphExportDataMap.set(this, {
                childrenData: data[14][1],
                zIndexData: data[14][2]
            });
            if (data[15]) {
                const meshData = data[15];
                this.CreateMesh(meshData[0], meshData[1]);
                const sourceMesh = this.GetSourceMesh();
                const meshRows = meshData[2];
                for (let y = 0, lenY = meshRows.length; y < lenY; ++y) {
                    const rowData = meshRows[y];
                    for (let x =
                            0, lenX = rowData.length; x < lenX; ++x) {
                        const d = rowData[x];
                        const pt = sourceMesh.GetMeshPointAt(x, y);
                        pt.SetX(d[0]);
                        pt.SetY(d[1]);
                        pt.SetZElevation(d[2]);
                        pt.SetU(d[3]);
                        pt.SetV(d[4])
                    }
                }
            }
            if (data[16]) {
                const templateName = data[16][0];
                const sourceTemplateName = data[16][1];
                const isReplica = !!sourceTemplateName;
                const isTemplate = !isReplica;
                const templateManager = this._runtime.GetTemplateManager();
                if (isReplica && templateManager) templateManager.MapInstanceToTemplateName(this.GetInstance(), sourceTemplateName);
                if (isTemplate &&
                    templateManager) templateManager.MapInstanceToTemplateName(this.GetInstance(), templateName)
            }
            enableUpdateRendererStateGroup = true;
            this._UpdateRendererStateGroup()
        }
        InitNoData() {
            this._x = 0;
            this._y = 0;
            this._zElevation = 0;
            this._w = 0;
            this._h = 0;
            this._depth = 0;
            this._a = 0;
            this._sinA = 0;
            this._cosA = 1;
            this._ox = 0;
            this._oy = 0;
            this._UpdateRendererStateGroup()
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetInstance() {
            return this._inst
        }
        _GetParentOffsetAngle() {
            if (this.GetTransformWithParentAngle()) return this._MaybeReflectAngleForMirrorFlip(this.GetParent()._GetAngleNoReflect() -
                this._sceneGraphInfo.GetParentStartAngle());
            return 0
        }
        SetX(x) {
            x = +x;
            if (this.GetTransformWithParentX()) {
                const sgi = this._sceneGraphInfo;
                const dx = x - this.GetX();
                const da = -this._GetParentOffsetAngle();
                if (da === 0) this._x += dx / sgi.GetParentScaleX();
                else {
                    this._x += Math.cos(da) * dx / sgi.GetParentScaleX();
                    if (this.GetTransformWithParentY()) this._y += Math.sin(da) * dx / sgi.GetParentScaleY()
                }
            } else this._x = x
        }
        OffsetX(x, transformWithSceneGraph = false) {
            x = +x;
            if (transformWithSceneGraph) this._x += x;
            else if (this.GetTransformWithParentX()) this.SetX(this.GetX() +
                x);
            else this._x += x
        }
        GetX() {
            if (this.GetTransformWithParentX()) {
                let x = this._x;
                const sgi = this._sceneGraphInfo;
                const parent = this.GetParent();
                const da = this._GetParentOffsetAngle();
                if (da === 0) x *= sgi.GetParentScaleX();
                else {
                    x = x * sgi.GetParentScaleX() * Math.cos(da);
                    if (this.GetTransformWithParentY()) x -= this._y * sgi.GetParentScaleY() * Math.sin(da)
                }
                return parent.GetX() + x
            } else return this._x
        }
        SetY(y) {
            y = +y;
            if (this.GetTransformWithParentY()) {
                const sgi = this._sceneGraphInfo;
                const dy = y - this.GetY();
                const da = -this._GetParentOffsetAngle();
                if (da === 0) this._y += dy / sgi.GetParentScaleY();
                else {
                    if (this.GetTransformWithParentX()) this._x -= Math.sin(da) * dy / sgi.GetParentScaleX();
                    this._y += Math.cos(da) * dy / sgi.GetParentScaleY()
                }
            } else this._y = y
        }
        OffsetY(y, transformWithSceneGraph = false) {
            y = +y;
            if (transformWithSceneGraph) this._y += y;
            else if (this.GetTransformWithParentY()) this.SetY(this.GetY() + y);
            else this._y += y
        }
        GetY() {
            if (this.GetTransformWithParentY()) {
                let y = this._y;
                const sgi = this._sceneGraphInfo;
                const parent = this.GetParent();
                const da = this._GetParentOffsetAngle();
                if (da === 0) y *= sgi.GetParentScaleY();
                else {
                    y = y * sgi.GetParentScaleY() * Math.cos(da);
                    if (this.GetTransformWithParentX()) y += this._x * sgi.GetParentScaleX() * Math.sin(da)
                }
                return parent.GetY() + y
            } else return this._y
        }
        SetXY(x, y) {
            x = +x;
            y = +y;
            if (this.GetTransformWithParentXOrY()) {
                const isTransformX = this.GetTransformWithParentX();
                const isTransformY = this.GetTransformWithParentY();
                const sgi = this._sceneGraphInfo;
                const dx = x - this.GetX();
                const dy = y - this.GetY();
                const da = -this._GetParentOffsetAngle();
                if (da === 0) {
                    if (isTransformX) this._x +=
                        dx / sgi.GetParentScaleX();
                    else this._x = x;
                    if (isTransformY) this._y += dy / sgi.GetParentScaleY();
                    else this._y = y
                } else {
                    const sinDa = Math.sin(da);
                    const cosDa = Math.cos(da);
                    if (isTransformX)
                        if (isTransformY) this._x += (cosDa * dx - sinDa * dy) / sgi.GetParentScaleX();
                        else this._x += cosDa * dx / sgi.GetParentScaleX();
                    else this._x = x;
                    if (isTransformY)
                        if (isTransformX) this._y += (sinDa * dx + cosDa * dy) / sgi.GetParentScaleY();
                        else this._y += cosDa * dy / sgi.GetParentScaleY();
                    else this._y = y
                }
            } else {
                this._x = x;
                this._y = y
            }
        }
        OffsetXY(x, y) {
            x = +x;
            y = +y;
            if (this.GetTransformWithParentXOrY()) this.SetXY(this.GetX() +
                x, this.GetY() + y);
            else {
                this._x += x;
                this._y += y
            }
        }
        EqualsXY(x, y) {
            return this.GetX() === x && this.GetY() === y
        }
        SetZElevation(z) {
            z = +z;
            if (this.GetTransformWithParentZElevation()) z -= this.GetParent().GetZElevation();
            if (this._zElevation === z) return;
            this._zElevation = z;
            this._UpdateZElevation();
            const layer = this.GetLayer();
            if (this._zElevation !== 0) layer._SetAnyInstanceZElevated();
            layer.SetZIndicesChanged()
        }
        _UpdateZElevation() {
            this._UpdateRendererStateGroup();
            if (this.HasChildren()) {
                const children = this.GetChildren();
                for (let i =
                        0, len = children.length; i < len; i++) {
                    const child = children[i];
                    if (child.GetTransformWithParentZElevation()) child._UpdateZElevation()
                }
            }
        }
        OffsetZElevation(z) {
            this.SetZElevation(this.GetZElevation() + z)
        }
        GetZElevation() {
            if (this.GetTransformWithParentZElevation()) return this.GetParent().GetZElevation() + this._zElevation;
            else return this._zElevation
        }
        GetTotalZElevation() {
            return this.GetLayer().GetZElevation() + this.GetZElevation()
        }
        SetWidth(w) {
            w = +w;
            if (this.GetTransformWithParentWidth()) {
                const ownWidth = this.GetWidth();
                if (ownWidth === 0) this._w = Number.EPSILON;
                else this._w *= w / ownWidth
            } else this._w = w;
            this._MarkSinCosAngleChanged()
        }
        OffsetWidth(w, transformWithSceneGraph) {
            w = +w;
            if (transformWithSceneGraph) this._w += w;
            else if (this.GetTransformWithParentWidth()) this.SetWidth(this.GetWidth() + w);
            else this._w += w;
            this._MarkSinCosAngleChanged()
        }
        GetWidth() {
            if (this.GetTransformWithParentWidth()) {
                const parent = this.GetParent();
                const pw = parent.GetWidth();
                const psw = parent._GetSceneGraphInfo()._GetStartWidth();
                if (psw === Number.EPSILON) return (this._GetSceneGraphInfo()._GetStartWidth() +
                    pw) * this._w;
                return pw * this._w
            } else return this._w
        }
        SetHeight(h) {
            h = +h;
            if (this.GetTransformWithParentHeight()) {
                const ownHeight = this.GetHeight();
                if (ownHeight === 0) this._h = Number.EPSILON;
                else this._h *= h / ownHeight
            } else this._h = h;
            this._MarkSinCosAngleChanged()
        }
        OffsetHeight(h, transformWithSceneGraph) {
            h = +h;
            if (transformWithSceneGraph) this._h += h;
            else if (this.GetTransformWithParentHeight()) this.SetHeight(this.GetHeight() + h);
            else this._h += h;
            this._MarkSinCosAngleChanged()
        }
        GetHeight() {
            if (this.GetTransformWithParentHeight()) {
                const parent =
                    this.GetParent();
                const ph = parent.GetHeight();
                const psh = parent._GetSceneGraphInfo()._GetStartHeight();
                if (psh === Number.EPSILON) return (this._GetSceneGraphInfo()._GetStartHeight() + ph) * this._h;
                return ph * this._h
            } else return this._h
        }
        SetSize(w, h) {
            w = +w;
            h = +h;
            if (this.GetTransformWithParentWidth()) {
                const ownWidth = this.GetWidth();
                if (ownWidth === 0) this._w = Number.EPSILON;
                else this._w *= w / ownWidth
            } else this._w = w;
            if (this.GetTransformWithParentHeight()) {
                const ownHeight = this.GetHeight();
                if (ownHeight === 0) this._h = Number.EPSILON;
                else this._h *= h / ownHeight
            } else this._h = h;
            this._MarkSinCosAngleChanged()
        }
        GetDepth() {
            return this._depth
        }
        SetDepth(d) {
            if (d < 0) throw new RangeError("invalid depth");
            this._depth = d
        }
        GetSceneGraphScale() {
            if (this.HasParent()) {
                const sgi = this._sceneGraphInfo;
                return Math.min(sgi.GetParentScaleX(), sgi.GetParentScaleY())
            } else return 1
        }
        IsRotatable() {
            return (this._flags & FLAG_IS_ROTATABLE) !== 0
        }
        SetAngle(a) {
            a = +a;
            if (!this.IsRotatable()) return;
            if (this.GetTransformWithParentAngle()) a -= this.GetParent().GetAngle();
            a = C3.clampAngle(a);
            if (this._a === a) return;
            this._a = a;
            this._MarkSinCosAngleChanged()
        }
        OffsetAngle(a) {
            a = +a;
            if (a === 0 || !this.IsRotatable()) return;
            this._a = C3.clampAngle(this._a + a);
            this._MarkSinCosAngleChanged()
        }
        _MarkSinCosAngleChanged() {
            this._flags |= FLAG_SIN_COS_ANGLE_CHANGED;
            if (this.HasChildren()) {
                const children = this.GetChildren();
                for (let i = 0, len = children.length; i < len; i++) children[i]._MarkSinCosAngleChanged()
            }
        }
        GetAngle() {
            if (this.GetTransformWithParentAngle() && this.IsRotatable()) return this._MaybeReflectAngleForMirrorFlip(C3.clampAngle(this.GetParent()._GetAngleNoReflect() +
                this._a));
            else return this._a
        }
        _GetAngleNoReflect() {
            if (this.GetTransformWithParentAngle() && this.IsRotatable()) return C3.clampAngle(this.GetParent()._GetAngleNoReflect() + this._a);
            else return this._a
        }
        _MaybeReflectAngleForMirrorFlip(a) {
            if (this.GetTransformWithParentWidth() && this.GetTopParent().GetWidth() < 0) a = C3.clampAngle(C3.angleReflect(a, this.GetTopParent().GetAngle() + Math.PI));
            if (this.GetTransformWithParentHeight() && this.GetTopParent().GetHeight() < 0) a = C3.angleReflect(a, this.GetTopParent().GetAngle());
            return a
        }
        _MaybeUpdateSinCosAngle() {
            const flags = this._flags;
            if ((flags & FLAG_SIN_COS_ANGLE_CHANGED) === 0) return;
            const a = this.GetAngle();
            this._sinA = Math.sin(a);
            this._cosA = Math.cos(a);
            this._flags = flags & ~FLAG_SIN_COS_ANGLE_CHANGED
        }
        GetSinAngle() {
            this._MaybeUpdateSinCosAngle();
            return this._sinA
        }
        GetCosAngle() {
            this._MaybeUpdateSinCosAngle();
            return this._cosA
        }
        SetOriginX(x) {
            this._ox = +x
        }
        OffsetOriginX(x) {
            this._ox += +x
        }
        GetOriginX() {
            return this._ox
        }
        SetOriginY(y) {
            this._oy = +y
        }
        OffsetOriginY(y) {
            this._oy += +y
        }
        GetOriginY() {
            return this._oy
        }
        _SetColor(c) {
            if (this._color.equals(c)) return;
            if (this._color === DEFAULT_COLOR) {
                this._color = C3.New(C3.Color, c);
                this._colorPremultiplied = C3.New(C3.Color, c);
                this._colorPremultiplied.premultiply()
            } else if (c.equalsRgba(1, 1, 1, 1)) {
                this._color = DEFAULT_COLOR;
                this._colorPremultiplied = DEFAULT_COLOR
            } else {
                this._color.set(c);
                this._colorPremultiplied.set(c);
                this._colorPremultiplied.premultiply()
            }
            this._UpdateRendererStateGroup()
        }
        SetOpacity(o) {
            o = C3.clamp(+o, 0, 1);
            if (this.GetTransformWithParentOpacity()) {
                if (this._GetSceneGraphInfo().GetOwnOpacity() === o) return;
                this._GetSceneGraphInfo().SetOwnOpacity(o);
                o = this.GetOpacity()
            } else if (this._color.a === o) return;
            this._SetColorWithOpacity(o)
        }
        _SetOpacityOfChildren() {
            if (!this.HasChildren()) return;
            const children = this.GetChildren();
            for (let i = 0, len = children.length; i < len; i++) {
                const child = children[i];
                child._SetColorWithOpacity(child.GetOpacity())
            }
        }
        _SetColorWithOpacity(o) {
            tempColor.copyRgb(this._color);
            tempColor.a = o;
            this._SetColor(tempColor);
            this._SetOpacityOfChildren()
        }
        OffsetOpacity(o) {
            if (this.GetTransformWithParentOpacity()) this.SetOpacity(this._GetSceneGraphInfo().GetOwnOpacity() +
                o);
            else this.SetOpacity(this.GetOpacity() + o)
        }
        GetOpacity() {
            if (this.GetTransformWithParentOpacity()) return this.GetParent().GetOpacity() * this._GetSceneGraphInfo().GetOwnOpacity();
            else return this._color.a
        }
        SetUnpremultipliedColor(c) {
            if (this._color.equalsIgnoringAlpha(c)) return;
            tempColor.copyRgb(c);
            tempColor.a = this.GetOpacity();
            this._SetColor(tempColor)
        }
        SetUnpremultipliedColorRGB(r, g, b) {
            tempColor.setRgb(r, g, b);
            this.SetUnpremultipliedColor(tempColor)
        }
        OffsetUnpremultipliedColorRGB(r, g, b) {
            if (r === 0 && g ===
                0 && b === 0) return;
            tempColor.copyRgb(this._color);
            tempColor.r += r;
            tempColor.g += g;
            tempColor.b += b;
            this.SetUnpremultipliedColor(tempColor)
        }
        GetUnpremultipliedColor() {
            return this._color
        }
        GetPremultipliedColor() {
            return this._colorPremultiplied
        }
        GetDestroyWithParent() {
            return (this._flags & FLAG_DESTROY_WITH_PARENT) !== 0
        }
        SetDestroyWithParent(d) {
            this._SetFlag(FLAG_DESTROY_WITH_PARENT, d)
        }
        GetTransformWithParentX() {
            return (this._flags & FLAG_TRANSFORM_WITH_PARENT_X) !== 0
        }
        SetTransformWithParentX(tpx) {
            this._SetFlag(FLAG_TRANSFORM_WITH_PARENT_X,
                tpx)
        }
        GetTransformWithParentY() {
            return (this._flags & FLAG_TRANSFORM_WITH_PARENT_Y) !== 0
        }
        GetTransformWithParentXOrY() {
            return (this._flags & (FLAG_TRANSFORM_WITH_PARENT_X | FLAG_TRANSFORM_WITH_PARENT_Y)) !== 0
        }
        SetTransformWithParentY(tpx) {
            this._SetFlag(FLAG_TRANSFORM_WITH_PARENT_Y, tpx)
        }
        GetTransformWithParentWidth() {
            return (this._flags & FLAG_TRANSFORM_WITH_PARENT_W) !== 0
        }
        SetTransformWithParentWidth(tpw) {
            this._SetFlag(FLAG_TRANSFORM_WITH_PARENT_W, tpw)
        }
        GetTransformWithParentHeight() {
            return (this._flags & FLAG_TRANSFORM_WITH_PARENT_H) !==
                0
        }
        SetTransformWithParentHeight(tph) {
            this._SetFlag(FLAG_TRANSFORM_WITH_PARENT_H, tph)
        }
        GetTransformWithParentAngle() {
            return (this._flags & FLAG_TRANSFORM_WITH_PARENT_A) !== 0
        }
        SetTransformWithParentAngle(tpa) {
            this._SetFlag(FLAG_TRANSFORM_WITH_PARENT_A, tpa)
        }
        GetTransformWithParentZElevation() {
            return (this._flags & FLAG_TRANSFORM_WITH_PARENT_Z_ELEVATION) !== 0
        }
        SetTransformWithParentZElevation(tpz) {
            this._SetFlag(FLAG_TRANSFORM_WITH_PARENT_Z_ELEVATION, tpz)
        }
        GetTransformWithParentOpacity() {
            return (this._flags & FLAG_TRANSFORM_WITH_PARENT_OPACITY) !==
                0
        }
        SetTransformWithParentOpacity(tpo) {
            this._SetFlag(FLAG_TRANSFORM_WITH_PARENT_OPACITY, tpo)
        }
        GetTransformWithParentVisibility() {
            return (this._flags & FLAG_TRANSFORM_WITH_PARENT_VISIBILITY) !== 0
        }
        SetTransformWithParentVisibility(tpv) {
            this._SetFlag(FLAG_TRANSFORM_WITH_PARENT_VISIBILITY, tpv)
        }
        _ClearAllSceneGraphFlags() {
            this._flags &= ~MASK_ALL_SCENE_GRAPH_FLAGS
        }
        AddChild(child, opts) {
            if (child === this) return;
            if (child.HasParent()) return;
            if (this._HasChildRecursive(child)) return;
            if (this._HasAnyParent(child)) return;
            const absX =
                child.GetX();
            const absY = child.GetY();
            const absW = child.GetWidth();
            const absH = child.GetHeight();
            const absA = child.GetAngle();
            const absZElevation = child.GetZElevation();
            const absOpacity = child.GetOpacity();
            child._SetParent(this);
            child.SetTransformWithParentX(opts.transformX);
            child.SetTransformWithParentY(opts.transformY);
            child.SetTransformWithParentWidth(opts.transformWidth);
            child.SetTransformWithParentHeight(opts.transformHeight);
            child.SetTransformWithParentAngle(opts.transformAngle);
            child.SetTransformWithParentZElevation(opts.transformZElevation);
            child.SetTransformWithParentOpacity(opts.transformOpacity);
            child.SetTransformWithParentVisibility(opts.transformVisibility);
            child.SetDestroyWithParent(opts.destroyWithParent);
            if (opts.transformX) {
                child._x = absX - this.GetX();
                if (opts.transformWidth) child._x /= this.GetWidth() / this._sceneGraphInfo._GetStartWidth()
            }
            if (opts.transformY) {
                child._y = absY - this.GetY();
                if (opts.transformHeight) child._y /= this.GetHeight() / this._sceneGraphInfo._GetStartHeight()
            }
            if (opts.transformWidth) {
                const pw = this.GetWidth();
                if (pw ===
                    0 || pw === Number.EPSILON) {
                    child._w = 1;
                    child._sceneGraphInfo.SetStartScaleX(1)
                } else {
                    child._w = absW / this.GetWidth();
                    child._sceneGraphInfo.SetStartScaleX(child._w)
                }
            }
            if (opts.transformHeight) {
                const ph = this.GetHeight();
                if (ph === 0 || ph === Number.EPSILON) {
                    child._h = 1;
                    child._sceneGraphInfo.SetStartScaleY(1)
                } else {
                    child._h = absH / this.GetHeight();
                    child._sceneGraphInfo.SetStartScaleY(child._h)
                }
            }
            if (opts.transformAngle) child._a = absA - this.GetAngle();
            if (opts.transformZElevation) child._zElevation = absZElevation - this.GetZElevation();
            if (opts.transformOpacity) child._sceneGraphInfo.SetOwnOpacity(absOpacity);
            if (opts.transformVisibility) child.SetVisible(this.IsVisible());
            this._AddChildToSceneGraphInfo(child);
            this.SetBboxChanged();
            this._SetOpacityOfChildren()
        }
        RemoveChild(child) {
            if (child.GetParent() !== this) return;
            const absX = child.GetX();
            const absY = child.GetY();
            const absW = child.GetWidth();
            const absH = child.GetHeight();
            const absA = child.GetAngle();
            const absZElevation = child.GetZElevation();
            const absOpacity = child.GetOpacity();
            child._SetParent(null);
            child._ClearAllSceneGraphFlags();
            child.SetXY(absX, absY);
            child.SetSize(absW, absH);
            child.SetAngle(absA);
            child.SetZElevation(absZElevation);
            child.SetOpacity(absOpacity);
            this._RemoveChildFromSceneGraphInfo(child);
            this.SetBboxChanged();
            return
        }
        _ResetAllSceneGraphState() {
            this._BuildTmpSceneGraphChildren();
            const children = [...this.children()];
            for (const c of children) this.RemoveChild(c);
            const parent = this.GetParent();
            if (parent) parent.RemoveChild(this);
            this._ClearAllSceneGraphFlags()
        }
        _BuildTmpSceneGraphChildren() {
            if (!this._tmpSceneGraphChildren) {
                const children = [...this.children()];
                if (children.length) {
                    this._tmpSceneGraphChildren = [];
                    this._tmpSceneGraphChildrenIndexes = new WeakMap
                }
                let index = 0;
                for (const c of children) {
                    const inst = c.GetInstance();
                    this._tmpSceneGraphChildren.push(inst);
                    this._tmpSceneGraphChildrenIndexes.set(inst, index);
                    index++
                }
            }
            const parent = this.GetParent();
            if (parent) parent._BuildTmpSceneGraphChildren()
        }
        _ReleaseTmpSceneGraphInfo() {
            if (this._tmpSceneGraphChildren) this._tmpSceneGraphChildren.length = 0;
            this._tmpSceneGraphChildren = null;
            this._tmpSceneGraphChildrenIndexes =
                null;
            needsSceneGraphAfterLoad.delete(this);
            const parent = this.GetParent();
            if (parent && !needsSceneGraphAfterLoad.has(parent)) parent._ReleaseTmpSceneGraphInfo()
        }
        HasParent() {
            return this.GetParent() !== null
        }
        GetParent() {
            const sgi = this._sceneGraphInfo;
            return sgi !== null ? sgi.GetParent() : null
        }
        GetTopParent() {
            let p = this;
            while (p.HasParent()) p = p.GetParent();
            return p
        }* parents() {
            let parent = this.GetParent();
            while (parent) {
                yield parent;
                parent = parent.GetParent()
            }
        }
        HasChild(child) {
            return this.GetChildren().includes(child)
        }
        HasChildren() {
            const sgi =
                this._sceneGraphInfo;
            return sgi !== null ? sgi.HasChildren() : false
        }
        GetChildren() {
            const sgi = this._sceneGraphInfo;
            return sgi !== null ? sgi.GetChildren() : EMPTY_ARRAY
        }
        children() {
            return this.GetChildren()
        }* allChildren() {
            for (const child of this.children()) {
                yield child;
                yield* child.allChildren()
            }
        }
        GetChildCount() {
            return this.GetChildren().length
        }
        GetAllChildCount() {
            return [...this.allChildren()].length
        }
        GetChildAt(index) {
            const children = this.GetChildren();
            index = Math.floor(+index);
            if (index < 0 || index >= children.length) return null;
            return children[index]
        }
        _CreateSceneGraphInfo(parent) {
            if (!this._sceneGraphInfo) this._sceneGraphInfo = C3.New(C3.SceneGraphInfo, this);
            if (parent) this._sceneGraphInfo.SetParent(parent)
        }
        _GetSceneGraphInfo() {
            return this._sceneGraphInfo
        }
        _ReleaseSceneGraphInfo() {
            if (!this._sceneGraphInfo) return;
            this._sceneGraphInfo.Release();
            this._sceneGraphInfo = null
        }
        _SetParent(parent) {
            if (parent) {
                parent._CreateSceneGraphInfo(null);
                this._CreateSceneGraphInfo(parent)
            } else {
                if (this._sceneGraphInfo) this._sceneGraphInfo.SetParent(null);
                if (!this.HasChildren()) this._ReleaseSceneGraphInfo()
            }
        }
        _HasAnyParent(child) {
            if (!this.HasParent()) return false;
            const parent = this.GetParent();
            if (parent === child) return true;
            return parent._HasAnyParent(child)
        }
        _HasChildRecursive(child) {
            if (this.HasChild(child)) return true;
            for (const c of this.GetChildren())
                if (c._HasChildRecursive(child)) return true;
            return false
        }
        _AddChildToSceneGraphInfo(child) {
            this._sceneGraphInfo.GetChildren().push(child)
        }
        _RemoveChildFromSceneGraphInfo(child) {
            const children = this._sceneGraphInfo.GetChildren();
            const index = children.indexOf(child);
            if (index !== -1) children.splice(index, 1);
            if (children.length === 0 && !this.HasParent()) this._ReleaseSceneGraphInfo();
            if (!child.HasChildren()) child._ReleaseSceneGraphInfo()
        }
        GetSceneGraphChildrenExportData() {
            const data = sceneGraphExportDataMap.get(this);
            return data ? data.childrenData : null
        }
        GetSceneGraphZIndexExportData() {
            const data = sceneGraphExportDataMap.get(this);
            return data ? data.zIndexData : NaN
        }
        GetSceneGraphZIndex() {
            const sceneGraphZIndex = sceneGraphZIndexMap.get(this);
            return C3.IsFiniteNumber(sceneGraphZIndex) ?
                sceneGraphZIndex : NaN
        }
        SetSceneGraphZIndex(z) {
            sceneGraphZIndexMap.set(this, z)
        }
        SetUsePointsShaderProgram() {
            this._SetFlag(FLAG_USE_POINTS_SHADER_PROGRAM, true);
            this._UpdateRendererStateGroup()
        }
        _UpdateRendererStateGroup() {
            if (!enableUpdateRendererStateGroup) return;
            const renderer = this._runtime.GetRenderer();
            if (this._stateGroup) renderer.ReleaseStateGroup(this._stateGroup);
            let shaderProgram;
            if ((this._flags & FLAG_USE_POINTS_SHADER_PROGRAM) !== 0) shaderProgram = renderer.GetPointsRenderingProgram() || "<point>";
            else shaderProgram =
                renderer.GetTextureFillShaderProgram() || "<default>";
            this._stateGroup = renderer.AcquireStateGroup(shaderProgram, this.GetBlendMode(), this._colorPremultiplied, this.GetZElevation())
        }
        GetRendererStateGroup() {
            return this._stateGroup
        }
        HasDefaultColor() {
            return this._color === DEFAULT_COLOR
        }
        SetBlendMode(bm) {
            bm = bm | 0;
            if (bm < 0 || bm > 31) throw new RangeError("invalid blend mode");
            if (this.GetBlendMode() === bm) return;
            this._flags = this._flags & ~FLAG_BLEND_MODE_MASK | bm << FLAG_BLEND_MODE_BIT_OFFSET;
            this._UpdateRendererStateGroup()
        }
        GetBlendMode() {
            return (this._flags &
                FLAG_BLEND_MODE_MASK) >> FLAG_BLEND_MODE_BIT_OFFSET
        }
        _SetLayer(layer, updateRenderCell) {
            const doUpdateRenderCell = updateRenderCell && this._layer !== layer;
            if (doUpdateRenderCell) this._RemoveFromRenderCells();
            this._layer = layer;
            if (doUpdateRenderCell) this._UpdateRenderCell();
            if (this.GetZElevation() !== 0) this._layer._SetAnyInstanceZElevated()
        }
        GetLayer() {
            return this._layer
        }
        GetLayout() {
            return this.GetLayer().GetLayout()
        }
        _SetZIndex(z) {
            this._zIndex = z | 0
        }
        GetZIndex() {
            this._layer._UpdateZIndices();
            return this._zIndex
        }
        _GetLastCachedZIndex() {
            return this._zIndex
        }
        _SetFlag(bit,
            enable) {
            if (enable) this._flags |= bit;
            else this._flags &= ~bit
        }
        IsVisible() {
            return (this._flags & FLAG_IS_VISIBLE) !== 0
        }
        SetVisible(v) {
            this._SetFlag(FLAG_IS_VISIBLE, v);
            if (!this.HasChildren()) return;
            for (const child of this.GetChildren())
                if (child.GetTransformWithParentVisibility()) child.SetVisible(v)
        }
        IsCollisionEnabled() {
            return (this._flags & FLAG_COLLISION_ENABLED) !== 0
        }
        SetCollisionEnabled(e) {
            e = !!e;
            if (this.IsCollisionEnabled() === e) return;
            this._SetFlag(FLAG_COLLISION_ENABLED, e);
            if (e) this.SetBboxChanged();
            else this._RemoveFromCollisionCells()
        }
        SetSolidCollisionFilter(isInclusive,
            tags) {
            this._SetFlag(FLAG_SOLID_FILTER_INCLUSIVE, isInclusive);
            if (this._solidFilterTags) this._solidFilterTags.clear();
            if (!tags.trim()) {
                this._solidFilterTags = null;
                return
            }
            if (!this._solidFilterTags) this._solidFilterTags = new Set;
            for (const tag of tags.split(" "))
                if (tag) this._solidFilterTags.add(tag.toLowerCase())
        }
        IsSolidCollisionAllowed(solidTagSet) {
            const isInclusive = (this._flags & FLAG_SOLID_FILTER_INCLUSIVE) !== 0;
            const filterTags = this._solidFilterTags;
            if (!solidTagSet || !filterTags) return !isInclusive;
            for (const tag of filterTags)
                if (solidTagSet.has(tag)) return isInclusive;
            return !isInclusive
        }
        SetBboxChanged() {
            this._flags |= FLAG_BBOX_CHANGED | FLAG_COLLISION_CELL_CHANGED | FLAG_MESH_CHANGED;
            this._objectClass._SetAnyCollisionCellChanged(true);
            this._runtime.UpdateRender();
            if (this._layer.UsesRenderCells()) {
                this.CalculateBbox(this._boundingBox, this._boundingQuad, true);
                this._flags &= ~FLAG_BBOX_CHANGED;
                this._UpdateRenderCell()
            }
            if ((this._flags & FLAG_ENABLE_BBOX_CHANGED_EVENT) !== 0) this._inst.Dispatcher().dispatchEvent(bboxChangeEvent);
            if (this._sceneGraphInfo !== null) {
                const children =
                    this._sceneGraphInfo.GetChildren();
                for (let i = 0, len = children.length; i < len; ++i) children[i].SetBboxChanged()
            }
        }
        CalculateBbox(bbox, bquad, includeMesh) {
            const x = this.GetX();
            const y = this.GetY();
            const w = this.GetWidth();
            const h = this.GetHeight();
            const a = this.GetAngle();
            bbox.setWH(x - this._ox * w, y - this._oy * h, w, h);
            if (includeMesh && this.HasMesh()) this._ExpandBboxForMesh(bbox);
            if (a === 0) bquad.setFromRect(bbox);
            else {
                bbox.offset(-x, -y);
                bquad.setFromRotatedRectPrecalc(bbox, this.GetSinAngle(), this.GetCosAngle());
                bquad.offset(x,
                    y);
                bquad.getBoundingBox(bbox)
            }
            bbox.normalize()
        }
        _UpdateBbox() {
            const flags = this._flags;
            if ((flags & FLAG_BBOX_CHANGED) !== 0) {
                this.CalculateBbox(this._boundingBox, this._boundingQuad, true);
                this._flags = flags & ~FLAG_BBOX_CHANGED
            }
        }
        GetBoundingBox() {
            this._UpdateBbox();
            return this._boundingBox
        }
        GetBoundingQuad() {
            this._UpdateBbox();
            return this._boundingQuad
        }
        PixelRoundQuad(quad) {
            const x = this.GetX();
            const y = this.GetY();
            const ox = Math.round(x) - x;
            const oy = Math.round(y) - y;
            if (ox === 0 && oy === 0) return quad;
            else {
                tempQuad.copy(quad);
                tempQuad.offset(ox, oy);
                return tempQuad
            }
        }
        OverwriteBoundingBox(box) {
            this._boundingBox.copy(box);
            this._boundingQuad.setFromRect(this._boundingBox);
            this._flags &= ~FLAG_BBOX_CHANGED;
            this._UpdateCollisionCell();
            this._UpdateRenderCell()
        }
        SetBboxChangeEventEnabled(e) {
            this._SetFlag(FLAG_ENABLE_BBOX_CHANGED_EVENT, e)
        }
        IsBboxChangeEventEnabled() {
            return (this._flags & FLAG_ENABLE_BBOX_CHANGED_EVENT) !== 0
        }
        IsInViewport(viewport, hasVanishingPointOutsideViewport, isOrthographic) {
            if (hasVanishingPointOutsideViewport && this.GetDepth() !==
                0) return this.IsInViewport3D(this.GetLayer()._GetViewFrustum());
            else return this.GetZElevation() === 0 || isOrthographic ? viewport.intersectsRect(this.GetBoundingBox()) : this._IsInViewport_ZElevated()
        }
        _IsInViewport_ZElevated() {
            const layer = this.GetLayer();
            const totalZElevation = this.GetTotalZElevation();
            if (totalZElevation >= layer.GetCameraZ()) return false;
            layer.GetViewportForZ(totalZElevation, tempRect);
            return tempRect.intersectsRect(this.GetBoundingBox())
        }
        IsInViewport3D(viewFrustum) {
            const bbox = this.GetBoundingBox();
            const minX = bbox.getLeft();
            const maxX = bbox.getRight();
            const minY = bbox.getTop();
            const maxY = bbox.getBottom();
            const minZ = this.GetTotalZElevation();
            const maxZ = minZ + this.GetDepth();
            return viewFrustum.ContainsAABB(minX, minY, minZ, maxX, maxY, maxZ)
        }
        IsInViewport2() {
            const layer = this.GetLayer();
            if (layer.Has3DCamera()) return this.IsInViewport3D(layer._GetViewFrustum());
            else {
                const layout = layer.GetLayout();
                return this.IsInViewport(layer.GetViewport(), layout.HasVanishingPointOutsideViewport(), layout.IsOrthographicProjection())
            }
        }
        _SetDrawBackFaceOnly(e) {
            this._SetFlag(FLAG_DRAW_BACK_FACE_ONLY,
                e)
        }
        _SetDrawNonBackFacesOnly(e) {
            this._SetFlag(FLAG_DRAW_NON_BACK_FACES_ONLY, e)
        }
        IsDrawBackFaceOnly() {
            return (this._flags & FLAG_DRAW_BACK_FACE_ONLY) !== 0
        }
        IsDrawNonBackFacesOnly() {
            return (this._flags & FLAG_DRAW_NON_BACK_FACES_ONLY) !== 0
        }
        SetSourceCollisionPoly(poly) {
            this._sourceCollisionPoly = poly;
            this._DiscardTransformedCollisionPoly();
            if (this.HasMesh()) this._meshInfo.meshPoly = null
        }
        GetSourceCollisionPoly() {
            return this._sourceCollisionPoly
        }
        HasOwnCollisionPoly() {
            return this._sourceCollisionPoly !== null || this.HasMesh()
        }
        GetTransformedCollisionPoly() {
            return this._GetCustomTransformedCollisionPolyPrecalc(this.GetWidth(),
                this.GetHeight(), this.GetAngle(), this.GetSinAngle(), this.GetCosAngle())
        }
        GetCustomTransformedCollisionPoly(w, h, a) {
            let sina = 0;
            let cosa = 1;
            if (a !== 0) {
                sina = Math.sin(a);
                cosa = Math.cos(a)
            }
            return this._GetCustomTransformedCollisionPolyPrecalc(w, h, a, sina, cosa)
        }
        _GetCustomTransformedCollisionPolyPrecalc(w, h, a, sinA, cosA) {
            let tpi = this._transformedPolyInfo;
            if (tpi === null) {
                tpi = {
                    poly: C3.New(C3.CollisionPoly),
                    width: NaN,
                    height: NaN,
                    angle: NaN
                };
                this._transformedPolyInfo = tpi
            }
            const transformedPoly = tpi.poly;
            if (tpi.width ===
                w && tpi.height === h && tpi.angle === a) return transformedPoly;
            const sourcePoly = this._sourceCollisionPoly;
            if (this.HasMesh()) {
                const ox = this.GetOriginX();
                const oy = this.GetOriginY();
                const sourceMesh = this.GetSourceMesh();
                let meshPoly = this._meshInfo.meshPoly;
                if (!meshPoly) {
                    if (sourcePoly) {
                        tempCollisionPoly.copy(sourcePoly);
                        tempCollisionPoly.offset(ox, oy)
                    } else tempCollisionPoly.setDefaultPoints();
                    meshPoly = sourceMesh.InsertPolyMeshVertices(tempCollisionPoly);
                    this._meshInfo.meshPoly = meshPoly
                }
                sourceMesh.TransformCollisionPoly(meshPoly,
                    transformedPoly);
                transformedPoly.offset(-ox, -oy);
                transformedPoly.transformPrecalc(w, h, sinA, cosA)
            } else if (sourcePoly) {
                transformedPoly.copy(sourcePoly);
                transformedPoly.transformPrecalc(w, h, sinA, cosA)
            } else transformedPoly.setFromQuad(this.GetBoundingQuad(), -this.GetX(), -this.GetY());
            tpi.width = w;
            tpi.height = h;
            tpi.angle = a;
            return transformedPoly
        }
        _DiscardTransformedCollisionPoly() {
            this.SetPhysicsBodyChanged(true);
            const tpi = this._transformedPolyInfo;
            if (tpi === null) return;
            tpi.width = NaN
        }
        CreateMesh(hsize, vsize) {
            hsize =
                Math.floor(hsize);
            vsize = Math.floor(vsize);
            if (!this.GetInstance().GetPlugin().SupportsMesh()) throw new Error("object does not support mesh");
            this.ReleaseMesh();
            this._meshInfo = {
                sourceMesh: C3.New(C3.Gfx.Mesh, hsize, vsize),
                transformedMesh: C3.New(C3.Gfx.Mesh, hsize, vsize),
                meshPoly: null
            }
        }
        HasMesh() {
            return this._meshInfo !== null
        }
        GetSourceMesh() {
            if (!this.HasMesh()) throw new Error("no mesh");
            return this._meshInfo.sourceMesh
        }
        GetTransformedMesh() {
            if (!this.HasMesh()) throw new Error("no mesh");
            return this._meshInfo.transformedMesh
        }
        SetMeshChanged(e) {
            this._SetFlag(FLAG_MESH_CHANGED,
                e)
        }
        IsMeshChanged() {
            return (this._flags & FLAG_MESH_CHANGED) !== 0
        }
        SetPhysicsBodyChanged(e) {
            this._SetFlag(FLAG_PHYSICS_BODY_CHANGED, e)
        }
        IsPhysicsBodyChanged() {
            return (this._flags & FLAG_PHYSICS_BODY_CHANGED) !== 0
        }
        _ExpandBboxForMesh(bbox) {
            const sourceMesh = this._meshInfo.sourceMesh;
            const minX = Math.min(sourceMesh.GetMinX(), 0);
            const minY = Math.min(sourceMesh.GetMinY(), 0);
            const maxX = Math.max(sourceMesh.GetMaxX(), 1);
            const maxY = Math.max(sourceMesh.GetMaxY(), 1);
            const w = bbox.width();
            const h = bbox.height();
            bbox.offsetLeft(minX *
                w);
            bbox.offsetTop(minY * h);
            bbox.offsetRight((maxX - 1) * w);
            bbox.offsetBottom((maxY - 1) * h);
            this._depth = sourceMesh.GetMaxZ()
        }
        ReleaseMesh() {
            if (!this._meshInfo) return;
            this._meshInfo.sourceMesh.Release();
            this._meshInfo.transformedMesh.Release();
            this._meshInfo = null;
            this._DiscardTransformedCollisionPoly()
        }
        SetMeshPoint(col, row, opts) {
            col = Math.floor(col);
            row = Math.floor(row);
            const mode = opts.mode || "absolute";
            if (!VALID_SET_MESH_POINT_MODES.has(mode)) throw new Error("invalid mode");
            const isRelative = mode === "relative";
            let posx = opts.x;
            let posy = opts.y;
            const zElevation = opts.zElevation;
            let texu = typeof opts.u === "number" ? opts.u : isRelative ? 0 : -1;
            let texv = typeof opts.v === "number" ? opts.v : isRelative ? 0 : -1;
            if (!this.HasMesh()) return false;
            const sourceMesh = this.GetSourceMesh();
            const p = sourceMesh.GetMeshPointAt(col, row);
            if (p === null) return false;
            let ret = false;
            if (typeof zElevation === "number" && p.GetZElevation() !== zElevation) {
                p.SetZElevation(zElevation);
                ret = true
            }
            if (isRelative) {
                posx += col / (sourceMesh.GetHSize() - 1);
                posy += row / (sourceMesh.GetVSize() -
                    1)
            }
            if (texu === -1 && !isRelative) texu = p.GetU();
            else {
                if (isRelative) texu += col / (sourceMesh.GetHSize() - 1);
                texu = C3.clamp(texu, 0, 1)
            }
            if (texv === -1 && !isRelative) texv = p.GetV();
            else {
                if (isRelative) texv += row / (sourceMesh.GetVSize() - 1);
                texv = C3.clamp(texv, 0, 1)
            }
            if (p.GetX() === posx && p.GetY() === posy && p.GetU() === texu && p.GetV() === texv) return ret;
            p.SetX(posx);
            p.SetY(posy);
            p.SetU(texu);
            p.SetV(texv);
            this._DiscardTransformedCollisionPoly();
            return true
        }
        HasTilemap() {
            return this._inst.HasTilemap()
        }
        ContainsPoint(x, y) {
            if (!this.GetBoundingBox().containsPoint(x,
                    y)) return false;
            if (!this.GetBoundingQuad().containsPoint(x, y)) return false;
            if (this.HasTilemap()) return this._inst.GetSdkInstance().TestPointOverlapTile(x, y);
            if (!this.HasOwnCollisionPoly()) return true;
            return this.GetTransformedCollisionPoly().containsPoint(x - this.GetX(), y - this.GetY())
        }
        _IsCollisionCellChanged() {
            return (this._flags & FLAG_COLLISION_CELL_CHANGED) !== 0
        }
        _UpdateCollisionCell() {
            if (!this._IsCollisionCellChanged() || !this.IsCollisionEnabled() || (this._flags & FLAG_DESTROYED) !== 0) return;
            const bbox =
                this.GetBoundingBox();
            const grid = this._objectClass._GetCollisionCellGrid();
            const collisionCells = this._collisionCells;
            tempRect.set(grid.XToCell(bbox.getLeft()), grid.YToCell(bbox.getTop()), grid.XToCell(bbox.getRight()), grid.YToCell(bbox.getBottom()));
            if (collisionCells.equals(tempRect)) return;
            const inst = this._inst;
            if (collisionCells === DEFAULT_COLLISION_CELLS) {
                grid.Update(inst, null, tempRect);
                this._collisionCells = C3.New(C3.Rect, tempRect)
            } else {
                grid.Update(inst, collisionCells, tempRect);
                collisionCells.copy(tempRect)
            }
            this._flags &=
                ~FLAG_COLLISION_CELL_CHANGED
        }
        _RemoveFromCollisionCells() {
            const collisionCells = this._collisionCells;
            if (collisionCells === DEFAULT_COLLISION_CELLS) return;
            this._objectClass._GetCollisionCellGrid().Update(this._inst, collisionCells, null);
            this._collisionCells = DEFAULT_COLLISION_CELLS
        }
        _UpdateRenderCell() {
            const layer = this.GetLayer();
            if (!layer.UsesRenderCells() || (this._flags & FLAG_DESTROYED) !== 0) return;
            const renderGrid = layer.GetRenderGrid();
            const bbox = this.GetBoundingBox();
            const renderCells = this._renderCells;
            tempRect.set(renderGrid.XToCell(bbox.getLeft()), renderGrid.YToCell(bbox.getTop()), renderGrid.XToCell(bbox.getRight()), renderGrid.YToCell(bbox.getBottom()));
            if (renderCells.equals(tempRect)) return;
            const inst = this._inst;
            if (renderCells === DEFAULT_RENDER_CELLS) {
                renderGrid.Update(inst, null, tempRect);
                this._renderCells = C3.New(C3.Rect, tempRect)
            } else {
                renderGrid.Update(inst, renderCells, tempRect);
                renderCells.copy(tempRect)
            }
            layer.SetRenderListStale()
        }
        _RemoveFromRenderCells() {
            const renderCells = this._renderCells;
            if (renderCells === DEFAULT_RENDER_CELLS) return;
            this.GetLayer().GetRenderGrid().Update(this._inst, renderCells, null);
            this._renderCells = DEFAULT_RENDER_CELLS
        }
        GetRenderCellRange() {
            return this._renderCells
        }
        ZOrderMoveToTop() {
            const inst = this._inst;
            const layer = this._layer;
            const layerInstances = layer._GetInstances();
            if (layerInstances.length && layerInstances.at(-1) === inst) return;
            layer._RemoveInstance(inst, false);
            layer._AddInstance(inst, false);
            this._runtime.UpdateRender()
        }
        ZOrderMoveToBottom() {
            const inst = this._inst;
            const layer = this._layer;
            const layerInstances = layer._GetInstances();
            if (layerInstances.length && layerInstances[0] === inst) return;
            layer._RemoveInstance(inst, false);
            layer._PrependInstance(inst, false);
            this._runtime.UpdateRender()
        }
        ZOrderMoveToLayer(layerMove) {
            const inst = this._inst;
            const curLayer = this._layer;
            if (curLayer.GetLayout() !== layerMove.GetLayout()) throw new Error("layer from different layout");
            if (layerMove === curLayer) return;
            curLayer._RemoveInstance(inst, true);
            this._SetLayer(layerMove);
            layerMove._AddInstance(inst,
                true);
            this._runtime.UpdateRender()
        }
        ZOrderMoveAdjacentToInstance(otherInst, isAfter) {
            const inst = this._inst;
            let didChangeLayer = false;
            const curLayer = this._layer;
            if (otherInst.GetUID() === inst.GetUID()) return;
            const otherWi = otherInst.GetWorldInfo();
            if (!otherWi) throw new Error("expected world instance");
            const otherLayer = otherWi.GetLayer();
            if (curLayer.GetIndex() !== otherLayer.GetIndex()) {
                curLayer._RemoveInstance(inst, true);
                this._SetLayer(otherLayer);
                otherLayer._AddInstance(inst, true);
                didChangeLayer = true
            }
            const didChangeZOrder =
                otherLayer.MoveInstanceAdjacent(inst, otherInst, !!isAfter);
            if (didChangeLayer || didChangeZOrder) this._runtime.UpdateRender()
        }
        GetInstanceEffectList() {
            return this._instanceEffectList
        }
        _SetHasAnyActiveEffect(e) {
            this._SetFlag(FLAG_HAS_ANY_ACTIVE_EFFECT, e)
        }
        HasAnyActiveEffect() {
            return (this._flags & FLAG_HAS_ANY_ACTIVE_EFFECT) !== 0
        }
        _SaveToJson(mode) {
            const o = {
                "x": this.GetX(),
                "y": this.GetY(),
                "w": this.GetWidth(),
                "h": this.GetHeight(),
                "l": this.GetLayer().GetSID(),
                "zi": this.GetZIndex()
            };
            if (this.GetZElevation() !== 0) o["ze"] =
                this.GetZElevation();
            if (this.GetAngle() !== 0) o["a"] = this.GetAngle();
            if (!this.HasDefaultColor()) o["c"] = this._color.toJSON();
            if (this.GetOriginX() !== .5) o["oX"] = this.GetOriginX();
            if (this.GetOriginY() !== .5) o["oY"] = this.GetOriginY();
            if (this.GetBlendMode() !== 0) o["bm"] = this.GetBlendMode();
            if (!this.IsVisible()) o["v"] = this.IsVisible();
            if (!this.IsCollisionEnabled()) o["ce"] = this.IsCollisionEnabled();
            if (this.IsBboxChangeEventEnabled()) o["be"] = this.IsBboxChangeEventEnabled();
            if (this._instanceEffectList) o["fx"] =
                this._instanceEffectList._SaveToJson();
            const isSolidFilterInclusive = (this._flags & FLAG_SOLID_FILTER_INCLUSIVE) !== 0;
            if (isSolidFilterInclusive) o["sfi"] = isSolidFilterInclusive;
            if (this._solidFilterTags) o["sft"] = [...this._solidFilterTags].join(" ");
            if (this._sceneGraphInfo && mode !== "visual-state") {
                o["sgi"] = this._sceneGraphInfo._SaveToJson(mode);
                if (sceneGraphExportDataMap.has(this)) {
                    o["sgcd"] = sceneGraphExportDataMap.get(this).childrenData;
                    o["sgzid"] = sceneGraphExportDataMap.get(this).zIndexData
                }
            }
            if (this.HasMesh()) o["mesh"] =
                this.GetSourceMesh().SaveToJson();
            return o
        }
        _SaveSceneGraphPropertiesToJson() {
            return {
                "x": this._x,
                "y": this._y,
                "z": this._zElevation,
                "w": this._w,
                "h": this._h,
                "a": this._a
            }
        }
        _LoadSceneGraphPropertiesFromJson(o) {
            if (!o) return;
            this._x = o["x"];
            this._y = o["y"];
            this._zElevation = o["z"];
            this._w = o["w"];
            this._h = o["h"];
            this._a = o["a"];
            this._MarkSinCosAngleChanged();
            this.SetBboxChanged()
        }
        _SetupSceneGraphConnectionsOnChangeOfLayout() {
            this._ReleaseTmpSceneGraphInfo();
            this._ResetAllSceneGraphState();
            this._CreateSceneGraphInfo(null);
            if (this._sceneGraphInfo) this._sceneGraphInfo._SetTmpSceneGraphChildren(this._tmpSceneGraphChildren, this._tmpSceneGraphChildrenIndexes)
        }
        _OnBeforeLoad(mode) {
            if (mode !== "visual-state") this._ResetAllSceneGraphState()
        }
        _LoadFromJson(o, mode) {
            enableUpdateRendererStateGroup = false;
            this.SetX(o["x"]);
            this.SetY(o["y"]);
            this.SetWidth(o["w"]);
            this.SetHeight(o["h"]);
            this._SetZIndex(o["zi"]);
            this.SetZElevation(o.hasOwnProperty("ze") ? o["ze"] : 0);
            this.SetAngle(o.hasOwnProperty("a") ? o["a"] : 0);
            if (o.hasOwnProperty("c")) tempColor.setFromJSON(o["c"]);
            else if (o.hasOwnProperty("o")) {
                tempColor.copyRgb(this._color);
                tempColor.a = o["o"]
            } else tempColor.setRgba(1, 1, 1, 1);
            this._SetColor(tempColor);
            this.SetOriginX(o.hasOwnProperty("oX") ? o["oX"] : .5);
            this.SetOriginY(o.hasOwnProperty("oY") ? o["oY"] : .5);
            this.SetBlendMode(o.hasOwnProperty("bm") ? o["bm"] : 0);
            this.SetVisible(o.hasOwnProperty("v") ? o["v"] : true);
            this.SetCollisionEnabled(o.hasOwnProperty("ce") ? o["ce"] : true);
            this.SetBboxChangeEventEnabled(o.hasOwnProperty("be") ? o["be"] : false);
            this.SetSolidCollisionFilter(o.hasOwnProperty("sfi") ?
                o["sfi"] : false, o.hasOwnProperty("sft") ? o["sft"] : "");
            if (this._instanceEffectList && o.hasOwnProperty("fx")) this._instanceEffectList._LoadFromJson(o["fx"]);
            if (!o.hasOwnProperty("sgi") && mode !== "visual-state")
                if (this._tmpSceneGraphChildren)
                    for (const inst of this._tmpSceneGraphChildren) {
                        if (inst.IsDestroyed()) continue;
                        this._runtime.DestroyInstance(inst)
                    }
            if (o.hasOwnProperty("sgi") && mode !== "visual-state") {
                this._CreateSceneGraphInfo(null);
                const sgi = this._sceneGraphInfo;
                const sgiData = o["sgi"];
                sgi._LoadFromJson(sgiData);
                sgi._SetTmpSceneGraphChildren(this._tmpSceneGraphChildren, this._tmpSceneGraphChildrenIndexes);
                needsSceneGraphAfterLoad.set(this, true);
                const runtimeDispatcher = this.GetRuntime().Dispatcher();
                if (this._after_load) runtimeDispatcher.removeEventListener("afterload", this._after_load);
                if (this._after_load_instance) runtimeDispatcher.removeEventListener("afterloadinstance", this._after_load_instance);
                this._after_load = null;
                this._after_load_instance = null;
                this._after_load = (e, opts) => {
                    if (this._after_load) runtimeDispatcher.removeEventListener("afterload",
                        this._after_load);
                    if (this._after_load_instance) runtimeDispatcher.removeEventListener("afterloadinstance", this._after_load_instance);
                    this._after_load_instance = null;
                    this._after_load = null;
                    if ((this._flags & FLAG_DESTROYED) === 0) {
                        sgi._OnAfterLoad(sgiData, opts);
                        sgi._SetTmpSceneGraphChildren(null, null);
                        this._ReleaseTmpSceneGraphInfo();
                        this.SetBboxChanged()
                    }
                };
                this._after_load_instance = e => {
                    if (e["instance"] !== this.GetInstance()) return;
                    this._after_load(e, {
                        ignoreMissingInstances: true
                    })
                };
                runtimeDispatcher.addEventListener("afterload",
                    this._after_load);
                runtimeDispatcher.addEventListener("afterloadinstance", this._after_load_instance);
                if (o["sgcd"] && C3.IsFiniteNumber(o["sgzid"])) sceneGraphExportDataMap.set(this, {
                    childrenData: o["sgcd"],
                    zIndexData: o["sgzid"]
                })
            }
            if (o.hasOwnProperty("mesh")) {
                const meshData = o["mesh"];
                this.CreateMesh(meshData["cols"], meshData["rows"]);
                this.GetSourceMesh().LoadFromJson(meshData)
            } else this.ReleaseMesh();
            this.SetBboxChanged();
            enableUpdateRendererStateGroup = true;
            this._UpdateRendererStateGroup()
        }
    };

}

// objects/behaviorType.js
{
    'use strict';
    const C3 = self.C3;
    C3.BehaviorType = class BehaviorType extends C3.DefendedBase {
        constructor(objectClass, data) {
            super();
            const runtime = objectClass.GetRuntime();
            const pluginManager = runtime.GetPluginManager();
            const BehaviorCtor = runtime.GetObjectReference(data[1]);
            if (!pluginManager.HasBehaviorByConstructorFunction(BehaviorCtor)) pluginManager.CreateBehavior(data);
            this._runtime = runtime;
            this._objectClass = objectClass;
            this._behavior = pluginManager.GetBehaviorByConstructorFunction(BehaviorCtor);
            this._sdkType = null;
            this._instSdkCtor =
                BehaviorCtor.Instance;
            this._sid = data[2];
            this._name = data[0];
            this._jsPropName = this._runtime.GetJsPropName(data[3]);
            this._sdkType = C3.New(BehaviorCtor.Type, this);
            this.OnCreate()
        }
        static Create(objectClass, behaviorTypeData) {
            return C3.New(C3.BehaviorType, objectClass, behaviorTypeData)
        }
        Release() {
            this._runtime = null;
            this._behavior = null;
            this._sdkType.Release();
            this._sdkType = null;
            this._instSdkCtor = null
        }
        GetSdkType() {
            return this._sdkType
        }
        OnCreate() {
            this._sdkType.OnCreate()
        }
        GetRuntime() {
            return this._runtime
        }
        GetObjectClass() {
            return this._objectClass
        }
        GetBehavior() {
            return this._behavior
        }
        GetInstanceSdkCtor() {
            return this._instSdkCtor
        }
        GetName() {
            return this._name
        }
        GetSID() {
            return this._sid
        }
        GetJsPropName() {
            return this._jsPropName
        }
    };

}

// objects/behaviorInstance.js
{
    'use strict';
    const C3 = self.C3;
    const IBehaviorInstance = self.IBehaviorInstance;
    C3.BehaviorInstance = class BehaviorInstance extends C3.DefendedBase {
        constructor(opts) {
            super();
            this._runtime = opts.runtime;
            this._behaviorType = opts.behaviorType;
            this._behavior = this._behaviorType.GetBehavior();
            this._inst = opts.instance;
            this._index = opts.index;
            this._sdkInst = null;
            this._iScriptInterface = null;
            this._behavior._AddInstance(this._inst)
        }
        Release() {
            if (this._iScriptInterface) {
                this._iScriptInterface._Release();
                this._iScriptInterface = null
            }
            this._behavior._RemoveInstance(this._inst);
            this._sdkInst.Release();
            this._sdkInst = null;
            this._runtime = null;
            this._behaviorType = null;
            this._behavior = null;
            this._inst = null
        }
        _CreateSdkInstance(properties) {
            if (this._sdkInst) throw new Error("already got sdk instance");
            this._sdkInst = C3.New(this._behaviorType.GetInstanceSdkCtor(), this, properties)
        }
        GetSdkInstance() {
            return this._sdkInst
        }
        GetObjectInstance() {
            return this._inst
        }
        GetRuntime() {
            return this._runtime
        }
        GetBehaviorType() {
            return this._behaviorType
        }
        GetBehavior() {
            return this._behavior
        }
        _GetIndex() {
            return this._index
        }
        PostCreate() {
            this._sdkInst.PostCreate()
        }
        OnSpriteFrameChanged(prevFrame,
            nextFrame) {
            this._sdkInst.OnSpriteFrameChanged(prevFrame, nextFrame)
        }
        _GetDebuggerProperties() {
            return this._sdkInst.GetDebuggerProperties()
        }
        SaveToJson() {
            return this._sdkInst.SaveToJson()
        }
        LoadFromJson(o) {
            return this._sdkInst.LoadFromJson(o)
        }
        static SortByTickSequence(a, b) {
            const instA = a.GetObjectInstance();
            const instB = b.GetObjectInstance();
            const typeIndexA = instA.GetObjectClass().GetIndex();
            const typeIndexB = instB.GetObjectClass().GetIndex();
            if (typeIndexA !== typeIndexB) return typeIndexA - typeIndexB;
            const seqA =
                instA.GetPUID();
            const seqB = instB.GetPUID();
            if (seqA !== seqB) return seqA - seqB;
            return a.GetBehaviorInstance()._GetIndex() - b.GetBehaviorInstance()._GetIndex()
        }
        _InitScriptInterface() {
            const DefaultScriptClass = IBehaviorInstance;
            const SdkScriptClass = this._sdkInst.GetScriptInterfaceClass();
            const ScriptInterfaceClass = SdkScriptClass || DefaultScriptClass;
            IBehaviorInstance._Init(this);
            this._iScriptInterface = new ScriptInterfaceClass;
            IBehaviorInstance._Init(null);
            if (SdkScriptClass && !(this._iScriptInterface instanceof DefaultScriptClass)) throw new TypeError(`script interface class '${SdkScriptClass.name}' does not extend the right base class '${DefaultScriptClass.name}'`);
            return this._iScriptInterface
        }
        GetScriptInterface() {
            return this._iScriptInterface || this._InitScriptInterface()
        }
        HasScriptInterface() {
            return !!this._iScriptInterface
        }
    };

}

// objects/effectList.js
{
    'use strict';
    const C3 = self.C3;
    C3.EffectList = class EffectList extends C3.DefendedBase {
        constructor(owner, data) {
            super();
            this._owner = owner;
            this._allEffectTypes = [];
            this._activeEffectTypes = [];
            this._effectTypesByName = new Map;
            this._effectParams = [];
            this._effectParamBuffers = [];
            this._allInstanceEffectLists = new Set;
            this._preservesOpaqueness = true;
            for (const d of data) {
                const et = C3.New(C3.EffectType, this, d, this._allEffectTypes.length);
                this._allEffectTypes.push(et);
                this._effectTypesByName.set(et.GetName().toLowerCase(), et);
                if (d.length >= 3) this._effectParams.push(this._LoadSingleEffectParameters(et,
                    d[2]))
            }
            this.GetRuntime()._AddEffectList(this)
        }
        Release() {
            for (const cpb of this._effectParamBuffers) cpb.Release();
            C3.clearArray(this._effectParamBuffers);
            C3.clearArray(this._allEffectTypes);
            C3.clearArray(this._activeEffectTypes);
            this._effectTypesByName.clear();
            C3.clearArray(this._effectParams);
            this._owner = null
        }
        _AddInstanceEffectList(iel) {
            this._allInstanceEffectLists.add(iel)
        }
        _RemoveInstanceEffectList(iel) {
            this._allInstanceEffectLists.delete(iel)
        }
        _InitRenderer(renderer) {
            if (renderer.IsWebGPU()) {
                this._effectParamBuffers =
                    this._allEffectTypes.map(et => {
                        const shaderProgram = et.GetShaderProgram();
                        if (shaderProgram.GetCustomParametersByteSize() > 0) return C3.New(C3.Gfx.WebGPUEffectCustomParamsBuffer, shaderProgram);
                        else return null
                    });
                this._UpdateAllEffectParamBuffers()
            }
            for (const iel of this._allInstanceEffectLists) iel._InitRenderer(renderer)
        }
        PrependEffectTypes(arr) {
            if (!arr.length) return;
            this._allEffectTypes = arr.concat(this._allEffectTypes);
            for (const et of arr) this._effectTypesByName.set(et.GetName().toLowerCase(), et);
            for (let i =
                    0, len = this._allEffectTypes.length; i < len; ++i) this._allEffectTypes[i]._SetIndex(i)
        }
        _LoadSingleEffectParameters(effectType, arr) {
            effectType.SetActive(arr[0]);
            const ret = arr.slice(1);
            for (let i = 0, len = ret.length; i < len; ++i) {
                const p = ret[i];
                if (Array.isArray(p)) {
                    const c = C3.New(C3.Color);
                    c.setFromJSON(p);
                    ret[i] = c
                }
            }
            return ret
        }
        GetOwner() {
            return this._owner
        }
        GetRuntime() {
            return this._owner.GetRuntime()
        }
        UpdateActiveEffects() {
            C3.clearArray(this._activeEffectTypes);
            let preservesOpaqueness = true;
            for (const et of this._allEffectTypes)
                if (et.IsActive()) {
                    this._activeEffectTypes.push(et);
                    if (!et.GetShaderProgram().PreservesOpaqueness()) preservesOpaqueness = false
                }
            this._preservesOpaqueness = preservesOpaqueness
        }
        GetAllEffectTypes() {
            return this._allEffectTypes
        }
        HasAnyEffectType() {
            return this._allEffectTypes.length > 0
        }
        GetEffectTypeByName(name) {
            return this._effectTypesByName.get(name.toLowerCase()) || null
        }
        GetEffectTypeByIndex(index) {
            index = Math.floor(+index);
            if (index < 0 || index >= this._allEffectTypes.length) throw new RangeError("invalid effect type index");
            return this._allEffectTypes[index]
        }
        IsEffectIndexActive(index) {
            return this.GetEffectTypeByIndex(index).IsActive()
        }
        SetEffectIndexActive(index,
            a) {
            this.GetEffectTypeByIndex(index).SetActive(a)
        }
        GetActiveEffectTypes() {
            return this._activeEffectTypes
        }
        HasAnyActiveEffect() {
            return this._activeEffectTypes.length > 0
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        GetEffectParametersForIndex(index) {
            return this._effectParams[index]
        }
        _GetEffectChainShaderParametersForIndex(index) {
            if (index < this._effectParamBuffers.length) return this._effectParamBuffers[index];
            else return this._effectParams[index]
        }
        GetEffectParameter(effectIndex, paramIndex) {
            if (effectIndex <
                0 || effectIndex >= this._effectParams.length) return null;
            const effectParams = this._effectParams[effectIndex];
            if (paramIndex < 0 || paramIndex >= effectParams.length) return null;
            return effectParams[paramIndex]
        }
        SetEffectParameter(effectIndex, paramIndex, value) {
            if (effectIndex < 0 || effectIndex >= this._effectParams.length) return false;
            const effectParams = this._effectParams[effectIndex];
            if (paramIndex < 0 || paramIndex >= effectParams.length) return false;
            const oldValue = effectParams[paramIndex];
            if (oldValue instanceof C3.Color) {
                if (oldValue.equalsIgnoringAlpha(value)) return false;
                oldValue.copyRgb(value)
            } else {
                if (oldValue === value) return false;
                effectParams[paramIndex] = value
            }
            if (effectIndex < this._effectParamBuffers.length) this._effectParamBuffers[effectIndex].SetParameterValue(paramIndex, value);
            return true
        }
        _UpdateAllEffectParamBuffers() {
            const effectParams = this._effectParams;
            const effectParamBuffers = this._effectParamBuffers;
            for (let i = 0, len = Math.min(effectParams.length, effectParamBuffers.length); i < len; ++i) {
                const paramsBuf = effectParamBuffers[i];
                const params = effectParams[i];
                for (let j =
                        0, lenj = params.length; j < lenj; ++j) paramsBuf.SetParameterValue(j, params[j])
            }
        }
        static SaveFxParamToJson(param) {
            if (param && param instanceof C3.Color) return {
                "t": "color",
                "v": param.toJSON()
            };
            else return param
        }
        static LoadFxParamFromJson(o) {
            if (o === null) return NaN;
            else if (typeof o === "object") {
                const type = o["t"];
                if (type === "color") {
                    const color = C3.New(C3.Color);
                    color.setFromJSON(o["v"]);
                    return color
                } else throw new Error("invalid effect parameter type");
            } else return o
        }
        static SaveFxParamsToJson(params) {
            return params.map(C3.EffectList.SaveFxParamToJson)
        }
        static LoadFxParamsFromJson(arr) {
            return arr.map(C3.EffectList.LoadFxParamFromJson)
        }
        SaveToJson() {
            return this._allEffectTypes.map(et =>
                ({
                    "name": et.GetName(),
                    "active": et.IsActive(),
                    "params": C3.EffectList.SaveFxParamsToJson(this._effectParams[et.GetIndex()])
                }))
        }
        LoadFromJson(arr) {
            for (const o of arr) {
                const et = this.GetEffectTypeByName(o["name"]);
                if (!et) continue;
                et.SetActive(o["active"]);
                this._effectParams[et.GetIndex()] = C3.EffectList.LoadFxParamsFromJson(o["params"])
            }
            this.UpdateActiveEffects();
            this._UpdateAllEffectParamBuffers()
        }
    };

}

// objects/effectType.js
{
    'use strict';
    const C3 = self.C3;
    C3.EffectType = class EffectType extends C3.DefendedBase {
        constructor(effectList, data, index) {
            super();
            this._effectList = effectList;
            this._id = data[0];
            this._name = data[1];
            this._index = index;
            this._shaderProgram = null;
            this._isActive = true
        }
        Release() {
            this._effectList = null;
            this._shaderProgram = null
        }
        Clone(effectListOwner) {
            const ret = C3.New(C3.EffectType, effectListOwner, [this._id, this._name], -1);
            ret._shaderProgram = this._shaderProgram;
            ret._isActive = this._isActive;
            return ret
        }
        _InitRenderer(renderer) {
            const shaderProgram = renderer.GetShaderProgramByName(this._id);
            if (!shaderProgram) throw new Error("failed to find shader program '" + this._id + "'");
            this._shaderProgram = shaderProgram
        }
        GetEffectList() {
            return this._effectList
        }
        GetName() {
            return this._name
        }
        _SetIndex(i) {
            this._index = i
        }
        GetIndex() {
            return this._index
        }
        GetOwner() {
            return this._effectList.GetOwner()
        }
        GetRuntime() {
            return this._effectList.GetRuntime()
        }
        SetActive(a) {
            this._isActive = !!a
        }
        IsActive() {
            return this._isActive
        }
        GetShaderProgram() {
            return this._shaderProgram
        }
        GetDefaultParameterValues() {
            const ret = [];
            for (let i = 0,
                    len = this._shaderProgram.GetParameterCount(); i < len; ++i) {
                const type = this._shaderProgram.GetParameterType(i);
                if (type === "float" || type === "percent") ret.push(0);
                else if (type === "color") ret.push(C3.New(C3.Color, 1, 1, 1, 1));
                else throw new TypeError("unknown effect parameter type");
            }
            return ret
        }
    };

}

// objects/instanceEffectList.js
{
    'use strict';
    const C3 = self.C3;
    C3.InstanceEffectList = class InstanceEffectList extends C3.DefendedBase {
        constructor(inst, wi) {
            super();
            this._inst = inst;
            this._wi = wi;
            this._effectList = inst.GetObjectClass().GetEffectList();
            this._needsRebuildSteps = true;
            this._wasDefaultColor = true;
            this._was3D = false;
            this._wasRotatedOrNegativeSize = false;
            this._wasTexRotated = false;
            this._effectChain = C3.New(C3.Gfx.EffectChain, inst.GetRuntime().GetCanvasManager().GetEffectChainManager(), {
                drawContent: (renderer, effectChain) => {
                    const inst = effectChain.GetContentObject();
                    const wi = inst.GetWorldInfo();
                    renderer.SetColor(wi.GetPremultipliedColor());
                    renderer.SetCurrentZ(wi.GetTotalZElevation());
                    inst.Draw(renderer);
                    renderer.SetCurrentZ(0)
                },
                getSourceTextureInfo: inst => {
                    const srcTexRect = inst.GetCurrentTexRect();
                    const [srcWidth, srcHeight] = inst.GetCurrentSurfaceSize();
                    return {
                        srcTexRect,
                        srcWidth,
                        srcHeight
                    }
                },
                getShaderParameters: index => this._GetEffectChainShaderParametersForIndex(index)
            });
            this._activeEffectFlags = [];
            this._activeEffectTypes = [];
            this._preservesOpaqueness = true;
            this._effectParams = [];
            this._effectParamBuffers = [];
            this._InitRenderer(inst.GetRuntime().GetRenderer());
            for (let i = 0, len = this._effectList.GetAllEffectTypes().length; i < len; ++i) this._activeEffectFlags.push(true);
            this.UpdateActiveEffects();
            this._effectList._AddInstanceEffectList(this)
        }
        Release() {
            this._effectList._RemoveInstanceEffectList(this);
            for (const cpb of this._effectParamBuffers)
                if (cpb) cpb.Release();
            C3.clearArray(this._effectParamBuffers);
            this._effectChain.Release();
            this._effectChain = null;
            C3.clearArray(this._activeEffectFlags);
            C3.clearArray(this._activeEffectTypes);
            C3.clearArray(this._effectParams);
            this._inst = null;
            this._effectList = null
        }
        _InitRenderer(renderer) {
            if (renderer.IsWebGPU()) this._effectParamBuffers = this._effectList.GetAllEffectTypes().map(et => {
                const shaderProgram = et.GetShaderProgram();
                if (shaderProgram.GetCustomParametersByteSize() > 0) return C3.New(C3.Gfx.WebGPUEffectCustomParamsBuffer, shaderProgram);
                else return null
            })
        }
        _LoadEffectParameters(data) {
            let index = 0;
            for (const e of data) {
                this._effectParams.push(this._LoadSingleEffectParameters(index,
                    e));
                ++index
            }
            this._UpdateAllEffectParamBuffers();
            this.UpdateActiveEffects()
        }
        _LoadSingleEffectParameters(index, arr) {
            this._activeEffectFlags[index] = arr[0];
            const ret = arr.slice(1);
            for (let i = 0, len = ret.length; i < len; ++i) {
                const p = ret[i];
                if (Array.isArray(p)) {
                    const c = C3.New(C3.Color);
                    c.setFromJSON(p);
                    ret[i] = c
                }
            }
            return ret
        }
        LoadDefaultEffectParameters() {
            for (const effectType of this._effectList.GetAllEffectTypes()) this._effectParams.push(effectType.GetDefaultParameterValues());
            this._UpdateAllEffectParamBuffers()
        }
        GetOwner() {
            return this._owner
        }
        GetEffectList() {
            return this._effectList
        }
        GetEffectChain() {
            this._MaybeRebuildEffectChainSteps();
            return this._effectChain
        }
        GetRuntime() {
            return this._inst.GetRuntime()
        }
        UpdateActiveEffects() {
            C3.clearArray(this._activeEffectTypes);
            const wi = this._wi;
            const allEffectTypes = this._effectList.GetAllEffectTypes();
            const activeEffectTypes = this._activeEffectTypes;
            const activeEffectFlags = this._activeEffectFlags;
            let preservesOpaqueness = true;
            for (let i = 0, len = allEffectTypes.length; i < len; ++i)
                if (activeEffectFlags[i]) {
                    const et = allEffectTypes[i];
                    activeEffectTypes.push(et);
                    if (!et.GetShaderProgram().PreservesOpaqueness()) preservesOpaqueness =
                        false
                }
            this._preservesOpaqueness = preservesOpaqueness;
            wi._SetHasAnyActiveEffect(!!activeEffectTypes.length);
            this._needsRebuildSteps = true
        }
        _MaybeRebuildEffectChainSteps() {
            const inst = this._inst;
            const wi = this._wi;
            const isDefaultColor = wi.HasDefaultColor();
            const is3D = wi.GetDepth() > 0;
            const isRotatedOrNegativeSizeInstance = wi.GetAngle() !== 0 || wi.GetWidth() < 0 || wi.GetHeight() < 0;
            const isTexRotated = inst.IsCurrentTexRotated();
            if (!this._needsRebuildSteps && isDefaultColor === this._wasDefaultColor && is3D === this._was3D &&
                isRotatedOrNegativeSizeInstance === this._wasRotatedOrNegativeSize && isTexRotated === this._wasTexRotated && !this._effectChain.NeedsRebuild()) return;
            this._effectChain.BuildSteps(this._activeEffectTypes.map(e => e.GetShaderProgram()), {
                indexMap: this._activeEffectTypes.map(e => e.GetIndex()),
                forcePreDraw: !isDefaultColor || inst.MustPreDraw(),
                is3D,
                isSourceTextureRotated: isTexRotated,
                isRotatedOrNegativeSizeInstance
            });
            this._needsRebuildSteps = false;
            this._wasDefaultColor = isDefaultColor;
            this._was3D = is3D;
            this._wasRotatedOrNegativeSize =
                isRotatedOrNegativeSizeInstance;
            this._wasTexRotated = isTexRotated
        }
        GetActiveEffectTypes() {
            return this._activeEffectTypes
        }
        GetEffectParametersForIndex(index) {
            return this._effectParams[index]
        }
        _GetEffectChainShaderParametersForIndex(index) {
            if (index < this._effectParamBuffers.length) return this._effectParamBuffers[index];
            else return this._effectParams[index]
        }
        GetEffectParameter(effectIndex, paramIndex) {
            if (effectIndex < 0 || effectIndex >= this._effectParams.length) return null;
            const effectParams = this._effectParams[effectIndex];
            if (paramIndex < 0 || paramIndex >= effectParams.length) return null;
            return effectParams[paramIndex]
        }
        SetEffectParameter(effectIndex, paramIndex, value) {
            if (effectIndex < 0 || effectIndex >= this._effectParams.length) return false;
            const effectParams = this._effectParams[effectIndex];
            if (paramIndex < 0 || paramIndex >= effectParams.length) return false;
            const oldValue = effectParams[paramIndex];
            if (oldValue instanceof C3.Color) {
                if (oldValue.equalsIgnoringAlpha(value)) return false;
                oldValue.copyRgb(value)
            } else {
                if (oldValue === value) return false;
                effectParams[paramIndex] = value
            }
            if (effectIndex < this._effectParamBuffers.length) this._effectParamBuffers[effectIndex].SetParameterValue(paramIndex, value);
            return true
        }
        _UpdateAllEffectParamBuffers() {
            const effectParams = this._effectParams;
            const effectParamBuffers = this._effectParamBuffers;
            for (let i = 0, len = effectParamBuffers.length; i < len; ++i) {
                const paramsBuf = effectParamBuffers[i];
                const params = effectParams[i];
                for (let j = 0, lenj = params.length; j < lenj; ++j) paramsBuf.SetParameterValue(j, params[j])
            }
        }
        PreservesOpaqueness() {
            return this._preservesOpaqueness
        }
        HasAnyActiveBackgroundBlendingEffect() {
            return this._activeEffectTypes.some(et =>
                et.GetShaderProgram().BlendsBackground())
        }
        IsEffectIndexActive(i) {
            return this._activeEffectFlags[i]
        }
        SetEffectIndexActive(i, e) {
            this._activeEffectFlags[i] = !!e
        }
        GetAllEffectTypes() {
            return this._effectList.GetAllEffectTypes()
        }
        _SaveToJson() {
            return this._effectList.GetAllEffectTypes().map(et => ({
                "name": et.GetName(),
                "active": this._activeEffectFlags[et.GetIndex()],
                "params": C3.EffectList.SaveFxParamsToJson(this._effectParams[et.GetIndex()])
            }))
        }
        _LoadFromJson(arr) {
            for (const o of arr) {
                const et = this._effectList.GetEffectTypeByName(o["name"]);
                if (!et) continue;
                this._activeEffectFlags[et.GetIndex()] = o["active"];
                this._effectParams[et.GetIndex()] = C3.EffectList.LoadFxParamsFromJson(o["params"])
            }
            this.UpdateActiveEffects();
            this._UpdateAllEffectParamBuffers()
        }
    };

}

// collisions/collisionEngine.js
{
    'use strict';
    const C3 = self.C3;
    const tempCandidates = [];
    const tileCollRectCandidates = [];
    const tempJumpthruRet = [];
    const tempPolyA = C3.New(C3.CollisionPoly);
    const tempPolyB = C3.New(C3.CollisionPoly);
    const tempQuad = C3.New(C3.Quad);
    const tempRect = C3.New(C3.Rect);
    const tempRect2 = C3.New(C3.Rect);
    let tempPolyC = null;
    let tempRect3 = null;
    let tempQuadB = null;
    C3.CollisionEngine = class CollisionEngine extends C3.DefendedBase {
        constructor(runtime) {
            super();
            this._runtime = runtime;
            this._registeredCollisions = [];
            this._collisionCheckCount = 0;
            this._collisionCheckSec = 0;
            this._polyCheckCount = 0;
            this._polyCheckSec = 0
        }
        Release() {
            this._runtime = null
        }
        _Update1sStats() {
            this._collisionCheckSec = this._collisionCheckCount;
            this._collisionCheckCount = 0;
            this._polyCheckSec = this._polyCheckCount;
            this._polyCheckCount = 0
        }
        Get1secCollisionChecks() {
            return this._collisionCheckSec
        }
        Get1secPolyChecks() {
            return this._polyCheckSec
        }
        RegisterCollision(a,
            b) {
            const aw = a.GetWorldInfo();
            const bw = b.GetWorldInfo();
            if (!aw || !bw) return;
            if (!aw.IsCollisionEnabled() || !bw.IsCollisionEnabled()) return;
            this._registeredCollisions.push([a, b])
        }
        AddRegisteredCollisionCandidates(inst, otherType, arr) {
            for (const [a, b] of this._registeredCollisions) {
                let otherInst = null;
                if (inst === a) otherInst = b;
                else if (inst === b) otherInst = a;
                else continue;
                if (!otherInst.BelongsToObjectClass(otherType)) continue;
                if (!arr.includes(otherInst)) arr.push(otherInst)
            }
        }
        CheckRegisteredCollision(a, b) {
            if (!this._registeredCollisions.length) return false;
            for (const [c, d] of this._registeredCollisions)
                if (a === c && b === d || a === d && b === c) return true;
            return false
        }
        ClearRegisteredCollisions() {
            C3.clearArray(this._registeredCollisions)
        }
        TestOverlap(a, b) {
            if (!a || !b || a === b) return false;
            const aw = a.GetWorldInfo();
            const bw = b.GetWorldInfo();
            if (!aw.IsCollisionEnabled() || !bw.IsCollisionEnabled()) return false;
            this._collisionCheckCount++;
            const layerA = aw.GetLayer();
            const layerB = bw.GetLayer();
            const areLayerTransformsCompatible = layerA.IsTransformCompatibleWith(layerB);
            if (areLayerTransformsCompatible) return this._TestOverlap_SameLayers(aw,
                bw);
            else return this._TestOverlap_DifferentLayers(aw, bw)
        }
        _TestOverlap_SameLayers(aw, bw) {
            if (!aw.GetBoundingBox().intersectsRect(bw.GetBoundingBox())) return false;
            this._polyCheckCount++;
            if (!aw.GetBoundingQuad().intersectsQuad(bw.GetBoundingQuad())) return false;
            if (aw.HasTilemap() && bw.HasTilemap()) return false;
            if (aw.HasTilemap()) return this.TestTilemapOverlap(aw, bw);
            else if (bw.HasTilemap()) return this.TestTilemapOverlap(bw, aw);
            if (!aw.HasOwnCollisionPoly() && !bw.HasOwnCollisionPoly()) return true;
            const polyA =
                aw.GetTransformedCollisionPoly();
            const polyB = bw.GetTransformedCollisionPoly();
            return polyA.intersectsPoly(polyB, bw.GetX() - aw.GetX(), bw.GetY() - aw.GetY())
        }
        _TestOverlap_DifferentLayers(aw, bw) {
            const aIsTileMap = aw.HasTilemap();
            const bIsTileMap = bw.HasTilemap();
            if (aIsTileMap && !bIsTileMap) return this.TestTilemapOverlapDifferentLayers(aw, bw);
            else if (bIsTileMap && !aIsTileMap) return this.TestTilemapOverlapDifferentLayers(bw, aw);
            else if (!bIsTileMap && !aIsTileMap) {
                const layerA = aw.GetLayer();
                const layerB = bw.GetLayer();
                tempPolyA.copy(aw.GetTransformedCollisionPoly());
                tempPolyB.copy(bw.GetTransformedCollisionPoly());
                const ptsArrA = tempPolyA.pointsArr();
                for (let i = 0, len = ptsArrA.length; i < len; i += 2) {
                    const j = i + 1;
                    const x = ptsArrA[i];
                    const y = ptsArrA[j];
                    const [lx, ly] = layerA.LayerToCanvasCss(x + aw.GetX(), y + aw.GetY());
                    ptsArrA[i] = lx;
                    ptsArrA[j] = ly
                }
                const ptsArrB = tempPolyB.pointsArr();
                for (let i = 0, len = ptsArrB.length; i < len; i += 2) {
                    const j = i + 1;
                    const x = ptsArrB[i];
                    const y = ptsArrB[j];
                    const [lx, ly] = layerB.LayerToCanvasCss(x + bw.GetX(), y + bw.GetY());
                    ptsArrB[i] = lx;
                    ptsArrB[j] = ly
                }
                tempPolyA.setBboxChanged();
                tempPolyB.setBboxChanged();
                this._polyCheckCount++;
                return tempPolyA.intersectsPoly(tempPolyB, 0, 0)
            } else return false
        }
        TestTilemapOverlapDifferentLayers(tilemapWi, nonTilemapWi) {
            const tilemapLayer = tilemapWi.GetLayer();
            const nonTilemapLayer = nonTilemapWi.GetLayer();
            if (!tempPolyC) tempPolyC = C3.New(C3.CollisionPoly);
            if (!tempRect3) tempRect3 = C3.New(C3.Rect);
            if (!tempQuadB) tempQuadB = C3.New(C3.Quad);
            const nonTilemapX = nonTilemapWi.GetX();
            const nonTilemapY = nonTilemapWi.GetY();
            const [lx, ly] = nonTilemapLayer.LayerToCanvasCss(nonTilemapX, nonTilemapY);
            const [nonTilemapTransformedX, nonTilemapTransformedY] = tilemapLayer.CanvasCssToLayer(lx, ly);
            const deltaX = nonTilemapTransformedX - nonTilemapX;
            const deltaY = nonTilemapTransformedY - nonTilemapY;
            tempRect3.copy(nonTilemapWi.GetBoundingBox());
            tempRect3.offset(deltaX, deltaY);
            if (!tilemapWi.GetBoundingBox().intersectsRect(tempRect3)) return false;
            tempQuadB.copy(nonTilemapWi.GetBoundingQuad());
            tempQuadB.offset(deltaX, deltaY);
            this._polyCheckCount++;
            if (!tilemapWi.GetBoundingQuad().intersectsQuad(tempQuadB)) return false;
            tempPolyC.copy(nonTilemapWi.GetTransformedCollisionPoly());
            const ptsArrB = tempPolyC.pointsArr();
            for (let i = 0, len = ptsArrB.length; i < len; i += 2) {
                const j = i + 1;
                ptsArrB[i] += deltaX;
                ptsArrB[j] += deltaY
            }
            tempPolyC.setBboxChanged();
            return this.TestTilemapOverlap(tilemapWi, nonTilemapWi, nonTilemapTransformedX, nonTilemapTransformedY, tempPolyC, tempRect3, tempQuadB)
        }
        TestTilemapOverlap(tmWi, wi, transformedWiX, transformedWiY, transformedCollisionPoly, transformedBoundingBox,
            transformedBoundingQuad) {
            const bbox = transformedBoundingBox !== undefined ? transformedBoundingBox : wi.GetBoundingBox();
            const tmX = tmWi.GetX();
            const tmY = tmWi.GetY();
            const tmSdkInst = tmWi.GetInstance().GetSdkInstance();
            const instX = transformedWiX !== undefined ? transformedWiX : wi.GetX();
            const instY = transformedWiY !== undefined ? transformedWiY : wi.GetY();
            const instHasPoly = wi.HasOwnCollisionPoly();
            const instQuad = transformedBoundingQuad !== undefined ? transformedBoundingQuad : wi.GetBoundingQuad();
            const collRects = tileCollRectCandidates;
            tmSdkInst.GetCollisionRectCandidates(bbox, collRects);
            for (let i = 0, len = collRects.length; i < len; ++i) {
                const c = collRects[i];
                const rc = c.GetRect();
                this._collisionCheckCount++;
                if (bbox.intersectsRectOffset(rc, tmX, tmY)) {
                    tempQuad.setFromRect(rc);
                    tempQuad.offset(tmX, tmY);
                    if (tempQuad.intersectsQuad(instQuad))
                        if (instHasPoly) {
                            const instPoly = transformedCollisionPoly !== undefined ? transformedCollisionPoly : wi.GetTransformedCollisionPoly();
                            let instOffX = instX;
                            let instOffY = instY;
                            if (transformedCollisionPoly !== undefined) {
                                instOffX =
                                    wi.GetX();
                                instOffY = wi.GetY()
                            }
                            const tilePoly = c.GetPoly();
                            if (tilePoly) {
                                this._polyCheckCount++;
                                if (tilePoly.intersectsPoly(instPoly, instOffX - (tmX + rc.getLeft()), instOffY - (tmY + rc.getTop()))) {
                                    C3.clearArray(collRects);
                                    return true
                                }
                            } else {
                                tempPolyA.setFromQuad(tempQuad, 0, 0);
                                if (tempPolyA.intersectsPoly(instPoly, instOffX, instOffY)) {
                                    C3.clearArray(collRects);
                                    return true
                                }
                            }
                        } else {
                            const tilePoly = c.GetPoly();
                            if (tilePoly) {
                                tempPolyA.setFromQuad(instQuad, 0, 0);
                                if (tilePoly.intersectsPoly(tempPolyA, -(tmX + rc.getLeft()), -(tmY +
                                        rc.getTop()))) {
                                    C3.clearArray(collRects);
                                    return true
                                }
                            } else {
                                C3.clearArray(collRects);
                                return true
                            }
                        }
                }
            }
            C3.clearArray(collRects);
            return false
        }
        TestAndSelectCanvasPointOverlap(objectClass, ptx, pty, isInverted) {
            const sol = objectClass.GetCurrentSol();
            const currentEvent = this._runtime.GetCurrentEvent();
            if (!currentEvent) throw new Error("cannot call outside event");
            const isOrBlock = currentEvent.IsOrBlock();
            const interactiveLayersCache = new Map;
            const isLayerInteractive = layer => {
                let ret = interactiveLayersCache.get(layer);
                if (typeof ret === "undefined") {
                    ret = layer.IsSelfAndParentsInteractive();
                    interactiveLayersCache.set(layer, ret)
                }
                return ret
            };
            if (sol.IsSelectAll()) {
                if (!isInverted) {
                    sol._SetSelectAll(false);
                    C3.clearArray(sol._GetOwnInstances())
                }
                for (const inst of objectClass.GetInstances()) {
                    const wi = inst.GetWorldInfo();
                    const layer = wi.GetLayer();
                    let containsPoint = false;
                    if (isLayerInteractive(layer) && wi.IsInViewport2()) {
                        const [lx, ly] = layer.CanvasCssToLayer(ptx, pty, wi.GetTotalZElevation());
                        containsPoint = wi.ContainsPoint(lx, ly)
                    }
                    if (containsPoint)
                        if (isInverted) return false;
                        else sol._PushInstance(inst);
                    else if (isOrBlock) sol._PushElseInstance(inst)
                }
            } else {
                let arr;
                let isPickingElseInstances = false;
                if (isOrBlock)
                    if (this._runtime.IsCurrentConditionFirst() && !sol._GetOwnElseInstances().length && sol._GetOwnInstances().length) arr = sol._GetOwnInstances();
                    else {
                        arr = sol._GetOwnElseInstances();
                        isPickingElseInstances = true
                    }
                else arr = sol._GetOwnInstances();
                let j = 0;
                for (let i = 0, len = arr.length; i < len; ++i) {
                    const inst = arr[i];
                    const wi = inst.GetWorldInfo();
                    const layer = wi.GetLayer();
                    let containsPoint =
                        false;
                    if (isLayerInteractive(layer) && wi.IsInViewport2()) {
                        const [lx, ly] = layer.CanvasCssToLayer(ptx, pty, wi.GetTotalZElevation());
                        containsPoint = wi.ContainsPoint(lx, ly)
                    }
                    if (containsPoint)
                        if (isInverted) return false;
                        else if (isPickingElseInstances) sol._PushInstance(inst);
                    else arr[j++] = inst;
                    else if (isPickingElseInstances) arr[j++] = inst;
                    else if (isOrBlock) sol._PushElseInstance(inst)
                }
                if (!isInverted) arr.length = j
            }
            objectClass.ApplySolToContainer();
            interactiveLayersCache.clear();
            if (isInverted) return true;
            else return sol.HasAnyInstances()
        }
        GetCollisionCandidates(layer,
            rtype, bbox, candidates) {
            const isParallaxed = layer ? layer.GetParallaxX() !== 1 || layer.GetParallaxY() !== 1 : false;
            if (rtype.IsFamily())
                for (const memberType of rtype.GetFamilyMembers())
                    if (isParallaxed || memberType.IsAnyInstanceParallaxed()) C3.appendArray(candidates, memberType.GetInstances());
                    else {
                        memberType._UpdateAllCollisionCells();
                        memberType._GetCollisionCellGrid().QueryRange(bbox, candidates)
                    }
            else if (isParallaxed || rtype.IsAnyInstanceParallaxed()) C3.appendArray(candidates, rtype.GetInstances());
            else {
                rtype._UpdateAllCollisionCells();
                rtype._GetCollisionCellGrid().QueryRange(bbox, candidates)
            }
        }
        GetObjectClassesCollisionCandidates(layer, objectClasses, bbox, candidates) {
            for (const objectClass of objectClasses) this.GetCollisionCandidates(layer, objectClass, bbox, candidates)
        }
        GetSolidCollisionCandidates(layer, bbox, candidates) {
            const solidBehavior = this._runtime.GetSolidBehavior();
            if (!solidBehavior) return;
            this.GetObjectClassesCollisionCandidates(layer, solidBehavior.GetObjectClasses(), bbox, candidates)
        }
        GetJumpthruCollisionCandidates(layer, bbox,
            candidates) {
            const jumpthruBehavior = this._runtime.GetJumpthruBehavior();
            if (!jumpthruBehavior) return;
            this.GetObjectClassesCollisionCandidates(layer, jumpthruBehavior.GetObjectClasses(), bbox, candidates)
        }
        IsSolidCollisionAllowed(solidInst, inst) {
            return solidInst._IsSolidEnabled() && (!inst || inst.GetWorldInfo().IsSolidCollisionAllowed(solidInst.GetSavedDataMap().get("solidTags")))
        }
        TestOverlapSolid(inst) {
            const wi = inst.GetWorldInfo();
            this.GetSolidCollisionCandidates(wi.GetLayer(), wi.GetBoundingBox(), tempCandidates);
            for (const s of tempCandidates) {
                if (!this.IsSolidCollisionAllowed(s, inst)) continue;
                if (this.TestOverlap(inst, s)) {
                    C3.clearArray(tempCandidates);
                    return s
                }
            }
            C3.clearArray(tempCandidates);
            return null
        }
        TestRectOverlapSolid(rect, inst) {
            this.GetSolidCollisionCandidates(null, rect, tempCandidates);
            for (const s of tempCandidates) {
                if (!this.IsSolidCollisionAllowed(s, inst)) continue;
                if (this.TestRectOverlap(rect, s)) {
                    C3.clearArray(tempCandidates);
                    return s
                }
            }
            C3.clearArray(tempCandidates);
            return null
        }
        TestOverlapJumpthru(inst,
            all) {
            let ret = null;
            if (all) {
                ret = tempJumpthruRet;
                C3.clearArray(ret)
            }
            const wi = inst.GetWorldInfo();
            this.GetJumpthruCollisionCandidates(wi.GetLayer(), wi.GetBoundingBox(), tempCandidates);
            for (const j of tempCandidates) {
                if (!j._IsJumpthruEnabled()) continue;
                if (this.TestOverlap(inst, j))
                    if (all) ret.push(j);
                    else {
                        C3.clearArray(tempCandidates);
                        return j
                    }
            }
            C3.clearArray(tempCandidates);
            return ret
        }
        PushOut(inst, xdir, ydir, dist, otherInst) {
            dist = dist || 50;
            const wi = inst.GetWorldInfo();
            const oldX = wi.GetX();
            const oldY = wi.GetY();
            for (let i = 0; i < dist; ++i) {
                wi.SetXY(oldX + xdir * i, oldY + ydir * i);
                wi.SetBboxChanged();
                if (!this.TestOverlap(inst, otherInst)) return true
            }
            wi.SetXY(oldX, oldY);
            wi.SetBboxChanged();
            return false
        }
        PushOutSolid(inst, xdir, ydir, dist, includeJumpthrus, specificJumpthru) {
            dist = dist || 50;
            const wi = inst.GetWorldInfo();
            const oldX = wi.GetX();
            const oldY = wi.GetY();
            let lastOverlapped = null;
            let secondLastOverlapped = null;
            for (let i = 0; i < dist; ++i) {
                wi.SetXY(oldX + xdir * i, oldY + ydir * i);
                wi.SetBboxChanged();
                if (!this.TestOverlap(inst, lastOverlapped)) {
                    lastOverlapped =
                        this.TestOverlapSolid(inst);
                    if (lastOverlapped) secondLastOverlapped = lastOverlapped;
                    else {
                        if (includeJumpthrus) {
                            if (specificJumpthru) lastOverlapped = this.TestOverlap(inst, specificJumpthru) ? specificJumpthru : null;
                            else lastOverlapped = this.TestOverlapJumpthru(inst);
                            if (lastOverlapped) secondLastOverlapped = lastOverlapped
                        }
                        if (!lastOverlapped) {
                            if (secondLastOverlapped) this.PushInFractional(inst, xdir, ydir, secondLastOverlapped, 16, true);
                            return true
                        }
                    }
                }
            }
            wi.SetXY(oldX, oldY);
            wi.SetBboxChanged();
            return false
        }
        PushOutSolidAxis(inst,
            xdir, ydir, dist) {
            dist = dist || 50;
            const wi = inst.GetWorldInfo();
            const oldX = wi.GetX();
            const oldY = wi.GetY();
            let lastOverlapped = null;
            let secondLastOverlapped = null;
            for (let i = 0; i < dist; ++i)
                for (let which = 0; which < 2; ++which) {
                    const sign = which * 2 - 1;
                    wi.SetXY(oldX + xdir * i * sign, oldY + ydir * i * sign);
                    wi.SetBboxChanged();
                    if (!this.TestOverlap(inst, lastOverlapped)) {
                        lastOverlapped = this.TestOverlapSolid(inst);
                        if (lastOverlapped) secondLastOverlapped = lastOverlapped;
                        else {
                            if (secondLastOverlapped) this.PushInFractional(inst, xdir * sign,
                                ydir * sign, secondLastOverlapped, 16, true);
                            return true
                        }
                    }
                }
            wi.SetXY(oldX, oldY);
            wi.SetBboxChanged();
            return false
        }
        PushInFractional(inst, xdir, ydir, otherInst, limit, includeAnySolid) {
            let divisor = 2;
            let forward = false;
            let overlapping = false;
            const wi = inst.GetWorldInfo();
            let bestX = wi.GetX();
            let bestY = wi.GetY();
            while (divisor <= limit) {
                const frac = 1 / divisor;
                divisor *= 2;
                wi.OffsetXY(xdir * frac * (forward ? 1 : -1), ydir * frac * (forward ? 1 : -1));
                wi.SetBboxChanged();
                if (this.TestOverlap(inst, otherInst) || includeAnySolid && this.TestOverlapSolid(inst)) {
                    forward =
                        true;
                    overlapping = true
                } else {
                    forward = false;
                    overlapping = false;
                    bestX = wi.GetX();
                    bestY = wi.GetY()
                }
            }
            if (overlapping) {
                wi.SetXY(bestX, bestY);
                wi.SetBboxChanged()
            }
        }
        PushOutSolidNearest(inst, maxDist = 100) {
            let dist = 0;
            const wi = inst.GetWorldInfo();
            const oldX = wi.GetX();
            const oldY = wi.GetY();
            let dir = 0;
            let lastOverlapped = this.TestOverlapSolid(inst);
            if (!lastOverlapped) return true;
            while (dist <= maxDist) {
                let dx = 0;
                let dy = 0;
                switch (dir) {
                    case 0:
                        dx = 0;
                        dy = -1;
                        dist++;
                        break;
                    case 1:
                        dx = 1;
                        dy = -1;
                        break;
                    case 2:
                        dx = 1;
                        dy = 0;
                        break;
                    case 3:
                        dx = 1;
                        dy =
                            1;
                        break;
                    case 4:
                        dx = 0;
                        dy = 1;
                        break;
                    case 5:
                        dx = -1;
                        dy = 1;
                        break;
                    case 6:
                        dx = -1;
                        dy = 0;
                        break;
                    case 7:
                        dx = -1;
                        dy = -1;
                        break
                }
                dir = (dir + 1) % 8;
                wi.SetXY(Math.floor(oldX + dx * dist), Math.floor(oldY + dy * dist));
                wi.SetBboxChanged();
                if (!this.TestOverlap(inst, lastOverlapped)) {
                    lastOverlapped = this.TestOverlapSolid(inst);
                    if (!lastOverlapped) return true
                }
            }
            wi.SetXY(oldX, oldY);
            wi.SetBboxChanged();
            return false
        }
        CalculateBounceAngle(inst, startX, startY, otherInst) {
            const wi = inst.GetWorldInfo();
            const oldX = wi.GetX();
            const oldY = wi.GetY();
            const radius =
                Math.max(10, C3.distanceTo(startX, startY, oldX, oldY));
            const startAngle = C3.angleTo(startX, startY, oldX, oldY);
            const firstInst = otherInst || this.TestOverlapSolid(inst);
            if (!firstInst) return C3.clampAngle(startAngle + Math.PI);
            let curInst = firstInst;
            let anticlockwiseFreeAngle = 0;
            let clockwiseFreeAngle = 0;
            const increment = C3.toRadians(5);
            let i;
            for (i = 1; i < 36; ++i) {
                const curAngle = startAngle - i * increment;
                wi.SetXY(startX + Math.cos(curAngle) * radius, startY + Math.sin(curAngle) * radius);
                wi.SetBboxChanged();
                if (!this.TestOverlap(inst,
                        curInst)) {
                    curInst = otherInst ? null : this.TestOverlapSolid(inst);
                    if (!curInst) {
                        anticlockwiseFreeAngle = curAngle;
                        break
                    }
                }
            }
            if (i === 36) anticlockwiseFreeAngle = C3.clampAngle(startAngle + Math.PI);
            curInst = firstInst;
            for (i = 1; i < 36; ++i) {
                const curAngle = startAngle + i * increment;
                wi.SetXY(startX + Math.cos(curAngle) * radius, startY + Math.sin(curAngle) * radius);
                wi.SetBboxChanged();
                if (!this.TestOverlap(inst, curInst)) {
                    curInst = otherInst ? null : this.TestOverlapSolid(inst);
                    if (!curInst) {
                        clockwiseFreeAngle = curAngle;
                        break
                    }
                }
            }
            if (i === 36) clockwiseFreeAngle =
                C3.clampAngle(startAngle + Math.PI);
            wi.SetXY(oldX, oldY);
            wi.SetBboxChanged();
            if (clockwiseFreeAngle === anticlockwiseFreeAngle) return clockwiseFreeAngle;
            const halfDiff = C3.angleDiff(clockwiseFreeAngle, anticlockwiseFreeAngle) / 2;
            let normal;
            if (C3.angleClockwise(clockwiseFreeAngle, anticlockwiseFreeAngle)) normal = C3.clampAngle(anticlockwiseFreeAngle + halfDiff + Math.PI);
            else normal = C3.clampAngle(clockwiseFreeAngle + halfDiff);
            const vx = Math.cos(startAngle);
            const vy = Math.sin(startAngle);
            const nx = Math.cos(normal);
            const ny =
                Math.sin(normal);
            const v_dot_n = vx * nx + vy * ny;
            const rx = vx - 2 * v_dot_n * nx;
            const ry = vy - 2 * v_dot_n * ny;
            return C3.angleTo(0, 0, rx, ry)
        }
        TestSegmentOverlap(x1, y1, x2, y2, inst) {
            if (!inst) return false;
            const wi = inst.GetWorldInfo();
            if (!wi.IsCollisionEnabled()) return false;
            this._collisionCheckCount++;
            tempRect.set(Math.min(x1, x2), Math.min(y1, y2), Math.max(x1, x2), Math.max(y1, y2));
            if (!wi.GetBoundingBox().intersectsRect(tempRect)) return false;
            if (inst.HasTilemap()) return this._TestSegmentOverlapTilemap(x1, y1, x2, y2, inst, wi);
            this._polyCheckCount++;
            if (!wi.GetBoundingQuad().intersectsSegment(x1, y1, x2, y2)) return false;
            if (!wi.HasOwnCollisionPoly()) return true;
            const poly = wi.GetTransformedCollisionPoly();
            return poly.intersectsSegment(wi.GetX(), wi.GetY(), x1, y1, x2, y2)
        }
        _TestSegmentOverlapTilemap(x1, y1, x2, y2, inst, wi) {
            const tmX = wi.GetX();
            const tmY = wi.GetY();
            const sdkInst = inst.GetSdkInstance();
            const collRects = tileCollRectCandidates;
            tempRect2.set(x1, y1, x2, y2);
            tempRect2.normalize();
            sdkInst.GetCollisionRectCandidates(tempRect2, collRects);
            for (let i = 0, len =
                    collRects.length; i < len; ++i) {
                const c = collRects[i];
                const tileRc = c.GetRect();
                this._collisionCheckCount++;
                if (tempRect.intersectsRectOffset(tileRc, tmX, tmY)) {
                    tempQuad.setFromRect(tileRc);
                    tempQuad.offset(tmX, tmY);
                    if (tempQuad.intersectsSegment(x1, y1, x2, y2)) {
                        const tilePoly = c.GetPoly();
                        if (tilePoly) {
                            this._polyCheckCount++;
                            if (tilePoly.intersectsSegment(tmX + tileRc.getLeft(), tmY + tileRc.getTop(), x1, y1, x2, y2)) {
                                C3.clearArray(collRects);
                                return true
                            }
                        } else {
                            C3.clearArray(collRects);
                            return true
                        }
                    }
                }
            }
            C3.clearArray(collRects);
            return false
        }
        TestRectOverlap(rect, inst) {
            if (!inst) return false;
            const wi = inst.GetWorldInfo();
            if (!wi.IsCollisionEnabled()) return false;
            this._collisionCheckCount++;
            if (!wi.GetBoundingBox().intersectsRect(rect)) return false;
            if (inst.HasTilemap()) return this._TestRectOverlapTilemap(rect, inst, wi);
            this._polyCheckCount++;
            tempQuad.setFromRect(rect);
            if (!wi.GetBoundingQuad().intersectsQuad(tempQuad)) return false;
            if (!wi.HasOwnCollisionPoly()) return true;
            const polyA = tempPolyA;
            polyA.setFromRect(rect, wi.GetX(), wi.GetY());
            const polyB = wi.GetTransformedCollisionPoly();
            return polyA.intersectsPoly(polyB, 0, 0)
        }
        _TestRectOverlapTilemap(rect, inst, wi) {
            const tmX = wi.GetX();
            const tmY = wi.GetY();
            const sdkInst = inst.GetSdkInstance();
            const collRects = tileCollRectCandidates;
            sdkInst.GetCollisionRectCandidates(rect, collRects);
            for (let i = 0, len = collRects.length; i < len; ++i) {
                const c = collRects[i];
                const tileRc = c.GetRect();
                this._collisionCheckCount++;
                if (rect.intersectsRectOffset(tileRc, tmX, tmY)) {
                    const tilePoly = c.GetPoly();
                    if (tilePoly) {
                        this._polyCheckCount++;
                        tempPolyA.setFromRect(rect, 0, 0);
                        if (tilePoly.intersectsPoly(tempPolyA, -(tmX + tileRc.getLeft()), -(tmY + tileRc.getTop()))) {
                            C3.clearArray(collRects);
                            return true
                        }
                    } else {
                        C3.clearArray(collRects);
                        return true
                    }
                }
            }
            C3.clearArray(collRects);
            return false
        }
        TestRayIntersectsInstance(inst, ray) {
            if (!inst) return;
            const wi = inst.GetWorldInfo();
            if (!wi.IsCollisionEnabled()) return;
            this._collisionCheckCount++;
            if (!wi.GetBoundingBox().intersectsRect(ray.rect)) return;
            if (inst.HasTilemap()) {
                this._TestRayIntersectsTilemap(inst, wi, ray);
                return
            }
            this._polyCheckCount++;
            if (wi.HasOwnCollisionPoly()) ray.TestInstancePoly(inst, wi.GetX(), wi.GetY(), wi.GetTransformedCollisionPoly());
            else ray.TestInstanceQuad(inst, wi.GetBoundingQuad())
        }
        _TestRayIntersectsTilemap(inst, wi, ray) {
            const xOffset = wi.GetX();
            const yOffset = wi.GetY();
            const collRects = tileCollRectCandidates;
            inst.GetSdkInstance().GetCollisionRectCandidates(ray.rect, collRects);
            for (let i = 0, l = collRects.length; i < l; i++) {
                const c = collRects[i];
                const tileRc = c.GetRect();
                this._collisionCheckCount++;
                if (ray.rect.intersectsRectOffset(tileRc,
                        xOffset, yOffset)) {
                    const tilePoly = c.GetPoly();
                    this._polyCheckCount++;
                    if (tilePoly) ray.TestInstancePoly(inst, xOffset + tileRc.getLeft(), yOffset + tileRc.getTop(), tilePoly);
                    else ray.TestInstanceRect(inst, wi.GetX(), wi.GetY(), tileRc)
                }
            }
            C3.clearArray(collRects)
        }
    };

}

// collisions/sparseGrid.js
{
    'use strict';
    const C3 = self.C3;
    C3.SparseGrid = class SparseGrid extends C3.DefendedBase {
        constructor(cellWidth, cellHeight) {
            super();
            this._cellWidth = cellWidth;
            this._cellHeight = cellHeight;
            this._cells = C3.New(C3.PairMap)
        }
        Release() {
            this._cells.Release();
            this._cells = null
        }
        GetCell(x, y, createIfMissing) {
            let ret = this._cells.Get(x, y);
            if (ret) return ret;
            else if (createIfMissing) {
                ret = C3.New(C3.GridCell, this, x, y);
                this._cells.Set(x, y, ret);
                return ret
            } else return null
        }
        XToCell(x) {
            const ret = Math.floor(x / this._cellWidth);
            return isFinite(ret) ? ret : 0
        }
        YToCell(y) {
            const ret =
                Math.floor(y / this._cellHeight);
            return isFinite(ret) ? ret : 0
        }
        Update(inst, oldRange, newRange) {
            if (oldRange)
                for (let x = oldRange.getLeft(), lenx = oldRange.getRight(); x <= lenx; ++x)
                    for (let y = oldRange.getTop(), leny = oldRange.getBottom(); y <= leny; ++y) {
                        if (newRange && newRange.containsPoint(x, y)) continue;
                        const cell = this.GetCell(x, y, false);
                        if (!cell) continue;
                        cell.Remove(inst);
                        if (cell.IsEmpty()) this._cells.Delete(x, y)
                    }
            if (newRange)
                for (let x = newRange.getLeft(), lenx = newRange.getRight(); x <= lenx; ++x)
                    for (let y = newRange.getTop(),
                            leny = newRange.getBottom(); y <= leny; ++y) {
                        if (oldRange && oldRange.containsPoint(x, y)) continue;
                        this.GetCell(x, y, true).Insert(inst)
                    }
        }
        QueryRange(rc, result) {
            let x = this.XToCell(rc.getLeft());
            const ystart = this.YToCell(rc.getTop());
            const lenx = this.XToCell(rc.getRight());
            const leny = this.YToCell(rc.getBottom());
            if (!isFinite(lenx) || !isFinite(leny)) return;
            for (; x <= lenx; ++x)
                for (let y = ystart; y <= leny; ++y) {
                    const cell = this.GetCell(x, y, false);
                    if (!cell) continue;
                    cell.Dump(result)
                }
        }
    };

}

// collisions/gridCell.js
{
    'use strict';
    const C3 = self.C3;
    C3.GridCell = class GridCell extends C3.DefendedBase {
        constructor(grid, x, y) {
            super();
            this._grid = grid;
            this._x = x;
            this._y = y;
            this._instances = C3.New(C3.ArraySet)
        }
        Release() {
            this._instances.Release();
            this._instances = null;
            this._grid = null
        }
        IsEmpty() {
            return this._instances.IsEmpty()
        }
        Insert(inst) {
            this._instances.Add(inst)
        }
        Remove(inst) {
            this._instances.Delete(inst)
        }
        Dump(result) {
            C3.appendArray(result, this._instances.GetArray())
        }
    };

}

// collisions/ray.js
{
    'use strict';
    const C3 = self.C3;
    const PADDING = 1E-6;
    const NO_HIT = 2;
    C3.Ray = class Ray {
        constructor() {
            this.x1 = 0;
            this.y1 = 0;
            this.x2 = 0;
            this.y2 = 0;
            this.dx = 0;
            this.dy = 0;
            this.rect = new C3.Rect;
            this.hitFraction = NO_HIT;
            this.hitUid = null;
            this.hitNormal = 0;
            this.hitNormalDx = 0;
            this.hitNormalDy = 0;
            this.hitX = 0;
            this.hitY = 0;
            this.distance = 0;
            this.normalX = 1;
            this.normalY = 0;
            this.reflectionX = 1;
            this.reflectionY = 0
        }
        DidCollide() {
            return this.hitFraction < 1 + PADDING
        }
        Reset() {
            this.hitFraction = NO_HIT
        }
        Set(x1, y1, x2, y2) {
            this.x1 = x1;
            this.y1 = y1;
            this.x2 = x2;
            this.y2 = y2;
            this.dx = x2 - x1;
            this.dy = y2 - y1;
            this.rect.set(x1,
                y1, x2, y2);
            this.rect.normalize();
            this.hitFraction = NO_HIT;
            this.hitUid = null;
            this.hitNormal = 0;
            this.hitNormalDx = 0;
            this.hitNormalDy = 0;
            this.hitX = 0;
            this.hitY = 0;
            this.distance = 0;
            this.normalX = 1;
            this.normalY = 0;
            this.reflectionX = 1;
            this.reflectionY = 0;
            return this
        }
        Complete() {
            if (this.DidCollide() === false) return;
            const dx = this.dx * this.hitFraction;
            const dy = this.dy * this.hitFraction;
            const length = Math.hypot(dx, dy);
            const dirx = dx / length;
            const diry = dy / length;
            this.distance = length - PADDING;
            this.hitX = this.x1 + dirx * this.distance;
            this.hitY = this.y1 + diry * this.distance;
            this.hitNormal = Math.atan2(this.hitNormalDy, this.hitNormalDx) + Math.PI / 2;
            this.normalX = Math.cos(this.hitNormal);
            this.normalY = Math.sin(this.hitNormal);
            const dot = dirx * this.normalX + diry * this.normalY;
            this.reflectionX = dirx - 2 * this.normalX * dot;
            this.reflectionY = diry - 2 * this.normalY * dot;
            if (dot > 0) {
                const PI = Math.PI;
                this.hitNormal = C3.clampAngle(this.hitNormal + PI);
                this.normalX = -this.normalX;
                this.normalY = -this.normalY
            }
        }
        TestInstanceSegment(inst, sx1, sy1, sx2, sy2) {
            const t = C3.rayIntersect(this.x1,
                this.y1, this.x2, this.y2, sx1, sy1, sx2, sy2);
            if (t >= 0 && t < this.hitFraction) {
                this.hitFraction = t;
                this.hitUid = inst.GetUID();
                this.hitNormalDx = sx1 - sx2;
                this.hitNormalDy = sy1 - sy2
            }
        }
        TestInstanceRect(inst, offX, offY, rect) {
            const lt = offX + rect.getLeft(),
                rt = offX + rect.getRight(),
                tp = offY + rect.getTop(),
                bm = offY + rect.getBottom();
            this.TestInstanceSegment(inst, lt, tp, rt, tp);
            this.TestInstanceSegment(inst, rt, tp, rt, bm);
            this.TestInstanceSegment(inst, rt, bm, lt, bm);
            this.TestInstanceSegment(inst, lt, bm, lt, tp)
        }
        TestInstanceQuad(inst, quad) {
            const tlX =
                quad.getTlx(),
                tlY = quad.getTly(),
                trX = quad.getTrx(),
                trY = quad.getTry(),
                brX = quad.getBrx(),
                brY = quad.getBry(),
                blX = quad.getBlx(),
                blY = quad.getBly();
            this.TestInstanceSegment(inst, tlX, tlY, trX, trY);
            this.TestInstanceSegment(inst, trX, trY, brX, brY);
            this.TestInstanceSegment(inst, brX, brY, blX, blY);
            this.TestInstanceSegment(inst, blX, blY, tlX, tlY)
        }
        TestInstancePoly(inst, offX, offY, poly) {
            const points = poly.pointsArr();
            for (let i = 0, l = points.length; i < l; i += 2) {
                const ii = (i + 2) % l;
                const x1 = points[i] + offX;
                const y1 = points[i + 1] + offY;
                const x2 = points[ii] + offX;
                const y2 = points[ii + 1] + offY;
                this.TestInstanceSegment(inst, x1, y1, x2, y2)
            }
        }
    };

}

// canvasManager.js
{
    'use strict';
    const C3 = self.C3;
    const VALID_FULLSCREEN_MODES = new Set(["off", "crop", "scale-inner", "scale-outer", "letterbox-scale", "letterbox-integer-scale"]);
    const VALID_FULLSCREEN_SCALING_QUALITIES = new Set(["high", "low"]);
    const glMatrix = self.glMatrix;
    const mat4 = glMatrix.mat4;
    const vec3 = glMatrix.vec3;
    const tempProjection = mat4.create();
    const PERCENTTEXT_WIDTH = 300;
    const PERCENTTEXT_HEIGHT = 200;
    const PROGRESSBAR_WIDTH = 120;
    const PROGRESSBAR_HEIGHT = 8;
    const tempQuad = C3.New(C3.Quad);
    const tempRect = C3.New(C3.Rect);
    const SPLASH_MIN_DISPLAY_TIME = 3E3;
    const SPLASH_AFTER_FADEOUT_WAIT_TIME = 200;
    const SPLASH_FADE_DURATION = 300;
    C3.CanvasManager = class CanvasManager extends C3.DefendedBase {
        constructor(runtime) {
            super();
            this._runtime = runtime;
            this._canvas = null;
            this._isWebGPUEnabled = false;
            this._webglRenderer = null;
            this._webgpuRenderer = null;
            this._gpuPreference = "high-performance";
            this._isLimitedToWebGL1 = false;
            this._windowInnerWidth = 0;
            this._windowInnerHeight = 0;
            this._canvasCssWidth = 0;
            this._canvasCssHeight = 0;
            this._canvasDeviceWidth = 0;
            this._canvasDeviceHeight = 0;
            this._canvasCssOffsetX = 0;
            this._canvasCssOffsetY = 0;
            this._zAxisScale = "normalized";
            this._fieldOfView = 0;
            this._zNear = 1;
            this._zFar = 1E4;
            this._enableMipmaps = true;
            this._textureAnisotropy = 0;
            this._drawWidth = 0;
            this._drawHeight = 0;
            this._fullscreenMode = "letterbox-scale";
            this._documentFullscreenMode = "letterbox-scale";
            this._deviceTransformOffX = 0;
            this._deviceTransformOffY = 0;
            this._defaultProjectionMatrix = mat4.create();
            this._wantFullscreenScalingQuality = "high";
            this._fullscreenScalingQuality = this._wantFullscreenScalingQuality;
            this._isDocumentFullscreen = false;
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets = new Set;
            this._shaderData = self["C3_Shaders"];
            this._effectChainManager = C3.New(C3.Gfx.EffectChainManager, {
                getDrawSize: () => [this.GetDrawWidth(), this.GetDrawHeight()],
                getRenderTarget: () => this.GetEffectCompositorRenderTarget(),
                releaseRenderTarget: rt => this.ReleaseEffectCompositorRenderTarget(rt),
                getTime: () => this.GetRuntime().GetGameTime(),
                redraw: () => this.GetRuntime().UpdateRender()
            });
            this._gpuTimeStartFrame = 0;
            this._gpuTimeEndFrame = 0;
            this._gpuLastUtilisation = NaN;
            this._gpuFrameTimingsBuffer =
                null;
            this._layersGpuProfile = new Map;
            this._gpuCurUtilisation = NaN;
            this._webgpuFrameTimings = new Map;
            this._snapshotFormat = "";
            this._snapshotQuality = 1;
            this._snapshotArea = C3.New(C3.Rect);
            this._snapshotUrl = "";
            this._snapshotPromise = null;
            this._snapshotResolve = null;
            this._isPastingToDrawingCanvas = 0;
            this._loaderStartTime = 0;
            this._rafId = -1;
            this._loadingProgress = 0;
            this._loadingprogress_handler = e => this._loadingProgress = e.progress;
            this._percentText = null;
            this._splashTextures = {
                logo: null,
                powered: null,
                website: null
            };
            this._splashFrameNumber =
                0;
            this._splashFadeInFinishTime = 0;
            this._splashFadeOutStartTime = 0;
            this._splashState = "fade-in";
            this._splashDoneResolve = null;
            this._splashDonePromise = new Promise(resolve => this._splashDoneResolve = resolve)
        }
        _SetGPUPowerPreference(pref) {
            this._gpuPreference = pref
        }
        _SetWebGPUEnabled(e) {
            this._isWebGPUEnabled = !!e
        }
        _SetZAxisScale(s) {
            this._zAxisScale = s
        }
        _SetFieldOfView(f) {
            this._fieldOfView = f
        }
        _SetZDistances(zNear, zFar) {
            this._zNear = zNear;
            this._zFar = zFar
        }
        _SetLimitedToWebGL1(l) {
            this._isLimitedToWebGL1 = !!l
        }
        async CreateCanvas(opts) {
            this._canvas =
                opts["canvas"];
            this._runtime.AddDOMComponentMessageHandler("runtime", "window-resize", e => this._OnWindowResize(e));
            this._runtime.AddDOMComponentMessageHandler("runtime", "fullscreenchange", e => this._OnFullscreenChange(e));
            this._runtime.AddDOMComponentMessageHandler("runtime", "fullscreenerror", e => this._OnFullscreenError(e));
            this._canvas.addEventListener("webglcontextlost", e => this._OnWebGLContextLost(e));
            this._canvas.addEventListener("webglcontextrestored", e => this._OnWebGLContextRestored(e));
            this._isDocumentFullscreen = !!opts["isFullscreen"];
            const useWebGPU = navigator["gpu"] && this._isWebGPUEnabled;
            let hasMajorPerformanceCaveat = false;
            if (useWebGPU) try {
                await this._InitWebGPUContext(true)
            } catch (err) {
                this._MaybeLogRendererError("WebGPU", err);
                this._webgpuRenderer = null
            }
            if (!this.GetRenderer()) try {
                await this._InitWebGLContext(true)
            } catch (err) {
                this._MaybeLogRendererError("WebGL", err);
                this._webglRenderer = null
            }
            if (!this.GetRenderer()) hasMajorPerformanceCaveat = true;
            if (!this.GetRenderer() && useWebGPU) try {
                await this._InitWebGPUContext(false)
            } catch (err) {
                this._MaybeLogRendererError("WebGPU",
                    err);
                this._webgpuRenderer = null
            }
            if (!this.GetRenderer()) try {
                await this._InitWebGLContext(false)
            } catch (err) {
                this._MaybeLogRendererError("WebGL", err);
                this._webglRenderer = null
            }
            const renderer = this.GetRenderer();
            if (!renderer) throw new Error("failed to acquire a renderer - check WebGL or WebGPU is supported");
            renderer.SetHasMajorPerformanceCaveat(hasMajorPerformanceCaveat);
            if (this._webgpuRenderer) {
                this._webgpuRenderer.ondevicelost = () => this._OnWebGPUDeviceLost();
                this._webgpuRenderer.ondevicerestored = () => this._OnWebGPUDeviceRestored()
            }
            if (this._zAxisScale ===
                "normalized") renderer.SetZAxisScaleNormalized();
            else {
                renderer.SetZAxisScaleRegular();
                renderer.SetFovY(this._fieldOfView)
            }
            this.SetSize(opts["windowInnerWidth"], opts["windowInnerHeight"], true);
            await this._InitRenderer()
        }
        _MaybeLogRendererError(rendererType, err) {
            if (err && typeof err.message === "string" && err.message.startsWith("renderer-unavailable")) return;
            console.error(`Error creating ${rendererType} renderer: `, err)
        }
        async _InitWebGPUContext(failIfMajorPerformanceCaveat) {
            const rendererOpts = {
                powerPreference: this._gpuPreference,
                depth: this._runtime.Uses3DFeatures(),
                failIfMajorPerformanceCaveat,
                usesBackgroundBlending: this._runtime.UsesAnyBackgroundBlending(),
                canSampleBackbuffer: this._runtime.UsesAnyCrossSampling(),
                canSampleDepth: this._runtime.UsesAnyDepthSampling(),
                nearZ: this._zNear,
                farZ: this._zFar
            };
            this._webgpuRenderer = C3.New(C3.Gfx.WebGPURenderer);
            await this._webgpuRenderer.Create(this._canvas, rendererOpts)
        }
        async _InitWebGLContext(failIfMajorPerformanceCaveat) {
            const rendererOpts = {
                powerPreference: this._gpuPreference,
                enableGpuProfiling: true,
                depth: this._runtime.Uses3DFeatures(),
                canSampleDepth: this._runtime.UsesAnyDepthSampling(),
                failIfMajorPerformanceCaveat,
                nearZ: this._zNear,
                farZ: this._zFar
            };
            if (this._isLimitedToWebGL1) rendererOpts.maxWebGLVersion = 1;
            if (C3.Platform.OS === "Android" && C3.Platform.BrowserEngine === "Chromium" && C3.Platform.BrowserVersionNumber < 75) {
                console.warn("[Construct] Disabling WebGL 2 because this device appears to be affected by crbug.com/934823. Install software updates to avoid this.");
                rendererOpts.maxWebGLVersion = 1
            }
            if (this._runtime.GetCompositingMode() ===
                "standard") rendererOpts.alpha = true;
            else {
                rendererOpts.alpha = false;
                rendererOpts.lowLatency = true
            }
            this._webglRenderer = C3.New(C3.Gfx.WebGLRenderer, this._canvas, rendererOpts);
            await this._webglRenderer.InitState()
        }
        async _InitWebGPU() {
            if (this._shaderData) {
                const promises = [];
                for (const [id, data] of Object.entries(this._shaderData)) {
                    data.src = data.wgsl;
                    const vertexSrc = C3.Gfx.WebGPUShaderProgram.GetDefaultVertexShaderSource();
                    promises.push(this._webgpuRenderer.CreateShaderProgram(Object.assign({
                            vertexSrc,
                            name: id
                        },
                        data)))
                }
                await Promise.all(promises)
            }
        }
        async _InitWebGL() {
            if (this._shaderData) {
                const promises = [];
                for (const [id, data] of Object.entries(this._shaderData)) {
                    let vertexSrc;
                    if (data.glslWebGL2 && this._webglRenderer.GetWebGLVersionNumber() >= 2) {
                        data.src = data.glslWebGL2;
                        vertexSrc = C3.Gfx.WebGLShaderProgram.GetDefaultVertexShaderSource_WebGL2()
                    } else {
                        if (!data.glsl) throw new Error(`shader '${id}' does not support WebGL 1`);
                        data.src = data.glsl;
                        vertexSrc = C3.Gfx.WebGLShaderProgram.GetDefaultVertexShaderSource()
                    }
                    promises.push(this._webglRenderer.CreateShaderProgram(Object.assign({
                        vertexSrc,
                        name: id
                    }, data)))
                }
                await Promise.all(promises);
                this._webglRenderer.ResetLastProgram();
                this._webglRenderer.SetTextureFillMode()
            }
            if (this._webglRenderer.SupportsGPUProfiling()) this._gpuFrameTimingsBuffer = C3.New(C3.Gfx.WebGLQueryResultBuffer, this._webglRenderer)
        }
        async _InitRenderer() {
            if (this._webgpuRenderer) await this._InitWebGPU();
            else if (this._webglRenderer) await this._InitWebGL();
            const renderer = this.GetRenderer();
            renderer.SetMipmapsEnabled(this._enableMipmaps);
            if (renderer.SupportsGPUProfiling()) this._gpuLastUtilisation =
                0;
            for (const effectList of this._runtime._GetAllEffectLists()) {
                for (const effectType of effectList.GetAllEffectTypes()) effectType._InitRenderer(renderer);
                effectList._InitRenderer(renderer);
                effectList.UpdateActiveEffects()
            }
        }
        Release() {
            this._runtime = null;
            this._webglRenderer = null;
            this._canvas = null
        }
        _OnWindowResize(e) {
            const runtime = this._runtime;
            if (runtime.IsExportToVideo()) return;
            const dpr = e["devicePixelRatio"];
            if (runtime.IsInWorker()) self.devicePixelRatio = dpr;
            runtime._SetDevicePixelRatio(dpr);
            this._isDocumentFullscreen = !!e["isFullscreen"];
            this.SetSize(e["innerWidth"], e["innerHeight"]);
            runtime.UpdateRender();
            const ev = new C3.Event("window-resize");
            ev.data = e;
            runtime.Dispatcher().dispatchEventAndWaitAsyncSequential(ev);
            const ev2 = new C3.Event("resize");
            ev2.cssWidth = this.GetCssWidth();
            ev2.cssHeight = this.GetCssHeight();
            ev2.deviceWidth = this.GetDeviceWidth();
            ev2.deviceHeight = this.GetDeviceHeight();
            runtime.DispatchUserScriptEvent(ev2);
            if (runtime.IsDebug() && (runtime.HitBreakpoint() || self.C3Debugger.IsDebuggerPaused())) runtime.Render()
        }
        _OnFullscreenChange(e) {
            this._isDocumentFullscreen = !!e["isFullscreen"];
            this.SetSize(e["innerWidth"], e["innerHeight"], true);
            this._runtime.UpdateRender()
        }
        _OnFullscreenError(e) {
            this._isDocumentFullscreen = !!e["isFullscreen"];
            this.SetSize(e["innerWidth"], e["innerHeight"], true);
            this._runtime.UpdateRender()
        }
        SetSize(availableWidth, availableHeight, force = false) {
            availableWidth = Math.floor(availableWidth);
            availableHeight = Math.floor(availableHeight);
            if (availableWidth <= 0 || availableHeight <= 0) throw new Error("invalid size");
            if (this._windowInnerWidth === availableWidth &&
                this._windowInnerHeight === availableHeight && !force) return;
            this._windowInnerWidth = availableWidth;
            this._windowInnerHeight = availableHeight;
            const fullscreenMode = this.GetCurrentFullscreenMode();
            if (fullscreenMode === "letterbox-scale") this._CalculateLetterboxScale(availableWidth, availableHeight);
            else if (fullscreenMode === "letterbox-integer-scale") this._CalculateLetterboxIntegerScale(availableWidth, availableHeight);
            else if (fullscreenMode === "off") this._CalculateFixedSizeCanvas(availableWidth, availableHeight);
            else this._CalculateFullsizeCanvas(availableWidth, availableHeight);
            this._UpdateFullscreenScalingQuality(fullscreenMode);
            this._canvas.width = this._canvasDeviceWidth;
            this._canvas.height = this._canvasDeviceHeight;
            this._runtime.PostComponentMessageToDOM("canvas", "update-size", {
                "marginLeft": this._canvasCssOffsetX,
                "marginTop": this._canvasCssOffsetY,
                "styleWidth": this._canvasCssWidth,
                "styleHeight": this._canvasCssHeight,
                "displayScale": this.GetDisplayScale()
            });
            const renderer = this.GetRenderer();
            renderer.SetSize(this._canvasDeviceWidth,
                this._canvasDeviceHeight, true);
            for (const rt of this._availableAdditionalRenderTargets) renderer.DeleteRenderTarget(rt);
            C3.clearArray(this._availableAdditionalRenderTargets);
            renderer.CalculatePerspectiveMatrix(this._defaultProjectionMatrix, this.GetDrawWidth() / this.GetDrawHeight());
            const layoutManager = this._runtime.GetLayoutManager();
            layoutManager.SetAllLayerProjectionChanged();
            layoutManager.SetAllLayerMVChanged()
        }
        GetDefaultProjectionMatrix() {
            return this._defaultProjectionMatrix
        }
        _CalculateLetterboxScale(availableWidth,
            availableHeight) {
            const dpr = this._runtime.GetDevicePixelRatio();
            const originalViewportWidth = this._runtime.GetOriginalViewportWidth();
            const originalViewportHeight = this._runtime.GetOriginalViewportHeight();
            const originalAspectRatio = originalViewportWidth / originalViewportHeight;
            const availableAspectRatio = availableWidth / availableHeight;
            if (availableAspectRatio > originalAspectRatio) {
                const letterboxedWidth = availableHeight * originalAspectRatio;
                this._canvasCssWidth = Math.round(letterboxedWidth);
                this._canvasCssHeight =
                    availableHeight;
                this._canvasCssOffsetX = Math.floor((availableWidth - this._canvasCssWidth) / 2);
                this._canvasCssOffsetY = 0
            } else {
                const letterboxedHeight = availableWidth / originalAspectRatio;
                this._canvasCssWidth = availableWidth;
                this._canvasCssHeight = Math.round(letterboxedHeight);
                this._canvasCssOffsetX = 0;
                this._canvasCssOffsetY = Math.floor((availableHeight - this._canvasCssHeight) / 2)
            }
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth * dpr);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * dpr);
            this._runtime.SetViewportSize(originalViewportWidth,
                originalViewportHeight)
        }
        _CalculateLetterboxIntegerScale(availableWidth, availableHeight) {
            const dpr = this._runtime.GetDevicePixelRatio();
            if (dpr !== 1) {
                availableWidth += 1;
                availableHeight += 1
            }
            const originalViewportWidth = this._runtime.GetOriginalViewportWidth();
            const originalViewportHeight = this._runtime.GetOriginalViewportHeight();
            const originalAspectRatio = originalViewportWidth / originalViewportHeight;
            const availableAspectRatio = availableWidth / availableHeight;
            let intScale;
            if (availableAspectRatio > originalAspectRatio) {
                const letterboxedWidth =
                    availableHeight * originalAspectRatio;
                intScale = letterboxedWidth * dpr / originalViewportWidth
            } else {
                const letterboxedHeight = availableWidth / originalAspectRatio;
                intScale = letterboxedHeight * dpr / originalViewportHeight
            }
            if (intScale > 1) intScale = Math.floor(intScale);
            else if (intScale < 1) intScale = 1 / Math.ceil(1 / intScale);
            this._canvasDeviceWidth = Math.round(originalViewportWidth * intScale);
            this._canvasDeviceHeight = Math.round(originalViewportHeight * intScale);
            this._canvasCssWidth = this._canvasDeviceWidth / dpr;
            this._canvasCssHeight =
                this._canvasDeviceHeight / dpr;
            this._canvasCssOffsetX = Math.max(Math.floor((availableWidth - this._canvasCssWidth) / 2), 0);
            this._canvasCssOffsetY = Math.max(Math.floor((availableHeight - this._canvasCssHeight) / 2), 0);
            this._runtime.SetViewportSize(originalViewportWidth, originalViewportHeight)
        }
        _CalculateFullsizeCanvas(availableWidth, availableHeight) {
            const dpr = this._runtime.GetDevicePixelRatio();
            this._canvasCssWidth = availableWidth;
            this._canvasCssHeight = availableHeight;
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth *
                dpr);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * dpr);
            this._canvasCssOffsetX = 0;
            this._canvasCssOffsetY = 0;
            const displayScale = this.GetDisplayScale();
            this._runtime.SetViewportSize(this._canvasCssWidth / displayScale, this._canvasCssHeight / displayScale)
        }
        _CalculateFixedSizeCanvas(availableWidth, availableHeight) {
            const dpr = this._runtime.GetDevicePixelRatio();
            this._canvasCssWidth = this._runtime.GetViewportWidth();
            this._canvasCssHeight = this._runtime.GetViewportHeight();
            this._canvasDeviceWidth = Math.round(this._canvasCssWidth *
                dpr);
            this._canvasDeviceHeight = Math.round(this._canvasCssHeight * dpr);
            if (this.IsDocumentFullscreen()) {
                this._canvasCssOffsetX = Math.floor((availableWidth - this._canvasCssWidth) / 2);
                this._canvasCssOffsetY = Math.floor((availableHeight - this._canvasCssHeight) / 2)
            } else {
                this._canvasCssOffsetX = 0;
                this._canvasCssOffsetY = 0
            }
            this._runtime.SetViewportSize(this._runtime.GetViewportWidth(), this._runtime.GetViewportHeight())
        }
        _UpdateFullscreenScalingQuality(fullscreenMode) {
            if (this._wantFullscreenScalingQuality === "high") {
                this._drawWidth =
                    this._canvasDeviceWidth;
                this._drawHeight = this._canvasDeviceHeight;
                this._fullscreenScalingQuality = "high"
            } else {
                let viewportWidth, viewportHeight;
                if (this.GetCurrentFullscreenMode() === "off") {
                    viewportWidth = this._runtime.GetViewportWidth();
                    viewportHeight = this._runtime.GetViewportHeight()
                } else {
                    viewportWidth = this._runtime.GetOriginalViewportWidth();
                    viewportHeight = this._runtime.GetOriginalViewportHeight()
                }
                if (this._canvasDeviceWidth < viewportWidth || this._canvasDeviceHeight < viewportHeight) {
                    this._drawWidth = this._canvasDeviceWidth;
                    this._drawHeight = this._canvasDeviceHeight;
                    this._fullscreenScalingQuality = "high"
                } else {
                    this._drawWidth = viewportWidth;
                    this._drawHeight = viewportHeight;
                    this._fullscreenScalingQuality = "low";
                    if (fullscreenMode === "scale-inner") {
                        const originalAspectRatio = viewportWidth / viewportHeight;
                        const currentAspectRatio = this._windowInnerWidth / this._windowInnerHeight;
                        if (currentAspectRatio < originalAspectRatio) this._drawWidth = this._drawHeight * currentAspectRatio;
                        else if (currentAspectRatio > originalAspectRatio) this._drawHeight =
                            this._drawWidth / currentAspectRatio
                    } else if (fullscreenMode === "scale-outer") {
                        const originalAspectRatio = viewportWidth / viewportHeight;
                        const currentAspectRatio = this._windowInnerWidth / this._windowInnerHeight;
                        if (currentAspectRatio > originalAspectRatio) this._drawWidth = this._drawHeight * currentAspectRatio;
                        else if (currentAspectRatio < originalAspectRatio) this._drawHeight = this._drawWidth / currentAspectRatio
                    }
                }
            }
        }
        GetRuntime() {
            return this._runtime
        }
        GetCanvas() {
            return this._canvas
        }
        GetEffectChainManager() {
            return this._effectChainManager
        }
        IsDocumentFullscreen() {
            return this._isDocumentFullscreen
        }
        SetFullscreenMode(m) {
            if (!VALID_FULLSCREEN_MODES.has(m)) throw new Error("invalid fullscreen mode");
            this._fullscreenMode = m;
            const layoutManager = this._runtime.GetLayoutManager();
            layoutManager.SetAllLayerProjectionChanged();
            layoutManager.SetAllLayerMVChanged()
        }
        GetFullscreenMode() {
            return this._fullscreenMode
        }
        SetDocumentFullscreenMode(m) {
            if (!VALID_FULLSCREEN_MODES.has(m)) throw new Error("invalid fullscreen mode");
            this._documentFullscreenMode = m;
            const layoutManager = this._runtime.GetLayoutManager();
            layoutManager.SetAllLayerProjectionChanged();
            layoutManager.SetAllLayerMVChanged()
        }
        GetDocumentFullscreenMode() {
            return this._documentFullscreenMode
        }
        GetCurrentFullscreenMode() {
            if (this.IsDocumentFullscreen()) return this.GetDocumentFullscreenMode();
            else return this.GetFullscreenMode()
        }
        SetFullscreenScalingQuality(q) {
            if (!VALID_FULLSCREEN_SCALING_QUALITIES.has(q)) throw new Error("invalid fullscreen scaling quality");
            this._wantFullscreenScalingQuality = q;
            this._runtime.GetLayoutManager().SetAllLayerProjectionChanged()
        }
        GetSetFullscreenScalingQuality() {
            return this._wantFullscreenScalingQuality
        }
        GetCurrentFullscreenScalingQuality() {
            return this._fullscreenScalingQuality
        }
        static _FullscreenModeNumberToString(n) {
            switch (n) {
                case 0:
                    return "off";
                case 1:
                    return "crop";
                case 2:
                    return "scale-inner";
                case 3:
                    return "scale-outer";
                case 4:
                    return "letterbox-scale";
                case 5:
                    return "letterbox-integer-scale";
                default:
                    throw new Error("invalid fullscreen mode");
            }
        }
        GetLastWidth() {
            return this._windowInnerWidth
        }
        GetLastHeight() {
            return this._windowInnerHeight
        }
        GetDrawWidth() {
            return this._drawWidth
        }
        GetDrawHeight() {
            return this._drawHeight
        }
        SetMipmapsEnabled(e) {
            this._enableMipmaps = !!e
        }
        _SetTextureAnisotropy(a) {
            this._textureAnisotropy = a
        }
        GetTextureAnisotropy() {
            return this._textureAnisotropy
        }
        IsRendererContextLost() {
            return this.GetRenderer().IsContextLost()
        }
        _OnWebGLContextLost(e) {
            console.log("[Construct] WebGL context lost");
            e.preventDefault();
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets.clear();
            this._effectChainManager.OnContextLost();
            this._webglRenderer.OnContextLost();
            this._runtime._OnRendererContextLost()
        }
        _OnWebGPUDeviceLost() {
            console.log("[Construct] WebGPU device lost");
            this._availableAdditionalRenderTargets = [];
            this._usedAdditionalRenderTargets.clear();
            this._effectChainManager.OnContextLost();
            this._runtime._OnRendererContextLost()
        }
        async _OnWebGLContextRestored(e) {
            await this._webglRenderer.OnContextRestored();
            await this._InitRenderer();
            await this._runtime._OnRendererContextRestored();
            console.log("[Construct] WebGL context restored")
        }
        async _OnWebGPUDeviceRestored() {
            await this._InitRenderer();
            await this._runtime._OnRendererContextRestored();
            console.log("[Construct] WebGPU device restored")
        }
        GetWebGLRenderer() {
            return this._webglRenderer
        }
        GetWebGPURenderer() {
            return this._webgpuRenderer
        }
        GetRenderer() {
            return this._webgpuRenderer || this._webglRenderer
        }
        GetRenderScale() {
            if (this._fullscreenScalingQuality === "low") return 1 /
                this._runtime.GetDevicePixelRatio();
            return this.GetDisplayScale()
        }
        GetDisplayScale() {
            const fullscreenMode = this.GetCurrentFullscreenMode();
            if (fullscreenMode === "off" || fullscreenMode === "crop") return 1;
            const originalViewportWidth = this._runtime.GetOriginalViewportWidth();
            const originalViewportHeight = this._runtime.GetOriginalViewportHeight();
            const originalAspectRatio = originalViewportWidth / originalViewportHeight;
            const currentAspectRatio = this._canvasDeviceWidth / this._canvasDeviceHeight;
            if (fullscreenMode !==
                "scale-inner" && currentAspectRatio > originalAspectRatio || fullscreenMode === "scale-inner" && currentAspectRatio < originalAspectRatio) return this._canvasCssHeight / originalViewportHeight;
            else return this._canvasCssWidth / originalViewportWidth
        }
        GetEffectLayerScaleParam() {
            if (this.GetCurrentFullscreenScalingQuality() === "low") return 1;
            else return this.GetDisplayScale()
        }
        GetEffectDevicePixelRatioParam() {
            if (this.GetCurrentFullscreenScalingQuality() === "low") return 1;
            else return this._runtime.GetDevicePixelRatio()
        }
        SetDeviceTransformOffset(x,
            y) {
            this._deviceTransformOffX = x;
            this._deviceTransformOffY = y
        }
        SetDeviceTransform(renderer, w, h, updateProjection = true) {
            w = w || this._drawWidth;
            h = h || this._drawHeight;
            const scrollX = w / 2 + this._deviceTransformOffX;
            const scrollY = h / 2 + this._deviceTransformOffY;
            if (updateProjection) {
                let projectionMatrix = this.GetDefaultProjectionMatrix();
                if (w !== this._drawWidth || h !== this._drawHeight) {
                    renderer.CalculatePerspectiveMatrix(tempProjection, w / h);
                    projectionMatrix = tempProjection
                }
                renderer.SetProjectionMatrix(projectionMatrix)
            }
            const tempMat4 =
                renderer.CalculateLookAtModelView2(scrollX, scrollY, renderer.GetDefaultCameraZ(h), scrollX, scrollY, 0, h);
            renderer.SetModelViewMatrix(tempMat4)
        }
        SetCssTransform(renderer, updateProjection = true) {
            const width = this.GetCssWidth();
            const height = this.GetCssHeight();
            const scrollX = width / 2;
            const scrollY = height / 2;
            if (updateProjection) renderer.SetProjectionMatrix(this.GetDefaultProjectionMatrix());
            const tempMat4 = renderer.CalculateLookAtModelView2(scrollX, scrollY, renderer.GetDefaultCameraZ(height), scrollX, scrollY, 0, height);
            renderer.SetModelViewMatrix(tempMat4)
        }
        GetDeviceWidth() {
            return this._canvasDeviceWidth
        }
        GetDeviceHeight() {
            return this._canvasDeviceHeight
        }
        GetCssWidth() {
            return this._canvasCssWidth
        }
        GetCssHeight() {
            return this._canvasCssHeight
        }
        GetCanvasClientX() {
            return this._canvasCssOffsetX
        }
        GetCanvasClientY() {
            return this._canvasCssOffsetY
        }
        GetAdditionalRenderTarget(opts) {
            opts.depth = this._runtime.Uses3DFeatures();
            const arr = this._availableAdditionalRenderTargets;
            const useIndex = arr.findIndex(rt => rt.IsCompatibleWithOptions(opts));
            let ret;
            if (useIndex !== -1) {
                ret = arr[useIndex];
                arr.splice(useIndex, 1)
            } else ret = this.GetRenderer().CreateRenderTarget(opts);
            this._usedAdditionalRenderTargets.add(ret);
            return ret
        }
        ReleaseAdditionalRenderTarget(renderTarget) {
            if (!this._usedAdditionalRenderTargets.has(renderTarget)) throw new Error("render target not in use");
            this._usedAdditionalRenderTargets.delete(renderTarget);
            this._availableAdditionalRenderTargets.push(renderTarget)
        }
        GetEffectCompositorRenderTarget() {
            const opts = {
                sampling: this._runtime.GetSampling()
            };
            if (this.GetCurrentFullscreenScalingQuality() === "low") {
                opts.width = this.GetDrawWidth();
                opts.height = this.GetDrawHeight()
            }
            return this.GetAdditionalRenderTarget(opts)
        }
        ReleaseEffectCompositorRenderTarget(renderTarget) {
            this.ReleaseAdditionalRenderTarget(renderTarget)
        }* activeLayersGpuProfiles() {
            for (const layout of this._runtime.GetLayoutManager().runningLayouts())
                for (const layer of layout.GetLayers()) {
                    const p = this._layersGpuProfile.get(layer);
                    if (p) yield p
                }
        }
        GetLayerTimingsBuffer(layer) {
            if (!this.GetRenderer().SupportsGPUProfiling()) return null;
            let p = this._layersGpuProfile.get(layer);
            if (!p) {
                p = {
                    name: layer.GetName(),
                    timingsBuffer: C3.New(C3.Gfx.WebGLQueryResultBuffer, this._webglRenderer),
                    curUtilisation: 0,
                    lastUtilisation: 0
                };
                this._layersGpuProfile.set(layer, p)
            }
            return p.timingsBuffer
        }
        _Update1sFrameRange() {
            const renderer = this.GetRenderer();
            if (!renderer.SupportsGPUProfiling()) return;
            if (this._gpuTimeEndFrame === 0) {
                this._gpuTimeEndFrame = renderer.GetFrameNumber();
                this._gpuCurUtilisation = NaN;
                for (const p of this.activeLayersGpuProfiles()) p.curUtilisation =
                    NaN
            }
        }
        _UpdateTick() {
            if (this._webglRenderer && this._webglRenderer.SupportsGPUProfiling()) this._UpdateTick_WebGL();
            if (this._webgpuRenderer && this._webgpuRenderer.SupportsGPUProfiling()) this._UpdateTick_WebGPU()
        }
        _UpdateTick_WebGL() {
            if (!isNaN(this._gpuCurUtilisation)) return;
            this._gpuCurUtilisation = this._gpuFrameTimingsBuffer.GetFrameRangeResultSum(this._gpuTimeStartFrame, this._gpuTimeEndFrame);
            if (isNaN(this._gpuCurUtilisation)) return;
            if (this._runtime.IsDebug())
                for (const p of this.activeLayersGpuProfiles()) {
                    p.curUtilisation =
                        p.timingsBuffer.GetFrameRangeResultSum(this._gpuTimeStartFrame, this._gpuTimeEndFrame);
                    if (isNaN(p.curUtilisation)) return
                }
            this._gpuFrameTimingsBuffer.DeleteAllBeforeFrameNumber(this._gpuTimeEndFrame);
            this._gpuLastUtilisation = Math.min(this._gpuCurUtilisation, 1);
            if (this._runtime.IsDebug()) {
                for (const p of this.activeLayersGpuProfiles()) {
                    p.timingsBuffer.DeleteAllBeforeFrameNumber(this._gpuTimeEndFrame);
                    p.lastUtilisation = Math.min(p.curUtilisation, 1)
                }
                self.C3Debugger.UpdateGPUProfile(this._gpuLastUtilisation, [...this.activeLayersGpuProfiles()])
            }
            this._gpuTimeStartFrame = this._gpuTimeEndFrame;
            this._gpuTimeEndFrame = 0
        }
        GetGPUFrameTimingsBuffer() {
            return this._gpuFrameTimingsBuffer
        }
        _UpdateTick_WebGPU() {
            if (this._gpuTimeEndFrame === 0) return;
            for (let frameNumber = this._gpuTimeStartFrame; frameNumber < this._gpuTimeEndFrame; ++frameNumber) {
                const frameTiming = this._webgpuFrameTimings.get(frameNumber);
                if (frameTiming && !frameTiming.HasResult()) return
            }
            const layout = this._runtime.GetMainRunningLayout();
            const profileResults = C3.MakeFilledArray(layout.GetLayerCount() +
                1, 0);
            for (let frameNumber = this._gpuTimeStartFrame; frameNumber < this._gpuTimeEndFrame; ++frameNumber) {
                const frameTiming = this._webgpuFrameTimings.get(frameNumber);
                if (!frameTiming) continue;
                const results = frameTiming.GetResult();
                for (let i = 0, len = Math.min(profileResults.length, results.length / 2); i < len; ++i) {
                    const start64 = results[i * 2];
                    const end64 = results[i * 2 + 1];
                    if (Number(start64) === 0 || Number(end64) === 0) {
                        profileResults[i] = NaN;
                        continue
                    }
                    const diff64 = end64 - start64;
                    const duration = Number(diff64) / 1E9;
                    profileResults[i] +=
                        duration
                }
            }
            this._gpuLastUtilisation = C3.clamp(profileResults[0], 0, 1);
            if (this._runtime.IsDebug()) {
                const layerProfiles = [];
                const layers = layout.GetLayers();
                for (let i = 0, len = Math.min(layers.length, profileResults.length - 1); i < len; ++i) layerProfiles.push({
                    name: layers[i].GetName(),
                    lastUtilisation: C3.clamp(profileResults[i + 1], 0, 1)
                });
                self.C3Debugger.UpdateGPUProfile(this._gpuLastUtilisation, layerProfiles)
            }
            for (let frameNumber = this._gpuTimeStartFrame; frameNumber < this._gpuTimeEndFrame; ++frameNumber) this._webgpuFrameTimings.delete(frameNumber);
            this._gpuTimeStartFrame = this._gpuTimeEndFrame;
            this._gpuTimeEndFrame = 0
        }
        _AddWebGPUFrameTiming(frameTiming) {
            this._webgpuFrameTimings.set(this._webgpuRenderer.GetFrameNumber(), frameTiming)
        }
        GetGPUUtilisation() {
            return this._gpuLastUtilisation
        }
        SnapshotCanvas(format, quality, x, y, width, height) {
            this._snapshotFormat = format;
            this._snapshotQuality = quality;
            this._snapshotArea.setWH(x, y, width, height);
            if (this._snapshotPromise) return this._snapshotPromise;
            this._snapshotPromise = new Promise(resolve => {
                this._snapshotResolve =
                    resolve
            });
            return this._snapshotPromise
        }
        _MaybeTakeSnapshot() {
            if (!this._snapshotFormat) return;
            let canvas = this._canvas;
            const snapArea = this._snapshotArea;
            const x = C3.clamp(Math.floor(snapArea.getLeft()), 0, canvas.width);
            const y = C3.clamp(Math.floor(snapArea.getTop()), 0, canvas.height);
            let w = snapArea.width();
            if (w === 0) w = canvas.width - x;
            else w = C3.clamp(Math.floor(w), 0, canvas.width - x);
            let h = snapArea.height();
            if (h === 0) h = canvas.height - y;
            else h = C3.clamp(Math.floor(h), 0, canvas.height - y);
            if ((x !== 0 || y !== 0 || w !== canvas.width ||
                    h !== canvas.height) && (w > 0 && h > 0)) {
                canvas = C3.CreateCanvas(w, h);
                const ctx = canvas.getContext("2d");
                ctx.drawImage(this._canvas, x, y, w, h, 0, 0, w, h)
            }
            C3.CanvasToBlob(canvas, this._snapshotFormat, this._snapshotQuality).then(blob => {
                if (this._snapshotUrl) URL.revokeObjectURL(this._snapshotUrl);
                this._snapshotUrl = URL.createObjectURL(blob);
                this._snapshotPromise = null;
                this._snapshotResolve(this._snapshotUrl)
            });
            this._snapshotFormat = "";
            this._snapshotQuality = 1
        }
        GetCanvasSnapshotUrl() {
            return this._snapshotUrl
        }
        SetIsPastingToDrawingCanvas(p) {
            if (p) this._isPastingToDrawingCanvas++;
            else this._isPastingToDrawingCanvas--
        }
        IsPastingToDrawingCanvas() {
            return this._isPastingToDrawingCanvas > 0
        }
        InitLoadingScreen(loaderStyle) {
            const renderer = this.GetRenderer();
            if (loaderStyle === 2) {
                this._percentText = C3.New(C3.Gfx.RendererText, this.GetRenderer());
                this._percentText.SetFontName("Arial");
                this._percentText.SetFontSize(16);
                this._percentText.SetHorizontalAlignment("center");
                this._percentText.SetVerticalAlignment("center");
                this._percentText.SetSize(PERCENTTEXT_WIDTH, PERCENTTEXT_HEIGHT)
            } else if (loaderStyle ===
                0) {
                const loadingLogoAsset = this._runtime.GetLoadingLogoAsset();
                if (loadingLogoAsset) loadingLogoAsset.LoadStaticTexture(renderer).catch(err => console.warn(`[C3 runtime] Failed to create texture for loading logo: `, err))
            } else if (loaderStyle === 4) {
                this._LoadSvgSplashImage("splash-images/splash-logo.svg").then(tex => {
                    if (this._splashState === "done") renderer.DeleteTexture(tex);
                    else this._splashTextures.logo = tex
                }).catch(err => console.warn("Failed to load splash image: ", err));
                this._LoadBitmapSplashImage("splash-images/splash-poweredby-512.png").then(tex => {
                    if (this._splashState === "done") renderer.DeleteTexture(tex);
                    else this._splashTextures.powered = tex
                }).catch(err => console.warn("Failed to load splash image: ", err));
                this._LoadBitmapSplashImage("splash-images/splash-website-512.png").then(tex => {
                    if (this._splashState === "done") renderer.DeleteTexture(tex);
                    else this._splashTextures.website = tex
                }).catch(err => console.warn("Failed to load splash image: ", err))
            }
        }
        async _LoadSvgSplashImage(url) {
            url = (new URL(url, this._runtime.GetRuntimeBaseURL())).toString();
            const blob =
                await C3.FetchBlob(url);
            const drawable = await this._runtime.RasterSvgImage(blob, 2048, 2048);
            return await this.GetRenderer().CreateStaticTextureAsync(drawable, {
                mipMapQuality: "high"
            })
        }
        async _LoadBitmapSplashImage(url) {
            url = (new URL(url, this._runtime.GetRuntimeBaseURL())).toString();
            const blob = await C3.FetchBlob(url);
            return await this.GetRenderer().CreateStaticTextureAsync(blob, {
                mipMapQuality: "high"
            })
        }
        HideCordovaSplashScreen() {
            this._runtime.PostComponentMessageToDOM("runtime", "hide-cordova-splash")
        }
        StartLoadingScreen() {
            this._loaderStartTime =
                Date.now();
            this._runtime.Dispatcher().addEventListener("loadingprogress", this._loadingprogress_handler);
            this._rafId = requestAnimationFrame(() => this._DrawLoadingScreen());
            const loaderStyle = this._runtime.GetLoaderStyle();
            if (loaderStyle !== 3) this.HideCordovaSplashScreen()
        }
        async EndLoadingScreen() {
            const renderer = this.GetRenderer();
            this._loadingProgress = 1;
            const loaderStyle = this._runtime.GetLoaderStyle();
            if (loaderStyle === 4) await this._splashDonePromise;
            this._splashDoneResolve = null;
            this._splashDonePromise =
                null;
            if (this._rafId !== -1) {
                cancelAnimationFrame(this._rafId);
                this._rafId = -1
            }
            this._runtime.Dispatcher().removeEventListener("loadingprogress", this._loadingprogress_handler);
            this._loadingprogress_handler = null;
            if (this._percentText) {
                this._percentText.Release();
                this._percentText = null
            }
            this._runtime.ReleaseLoadingLogoAsset();
            renderer.Start();
            if (this._splashTextures.logo) {
                renderer.DeleteTexture(this._splashTextures.logo);
                this._splashTextures.logo = null
            }
            if (this._splashTextures.powered) {
                renderer.DeleteTexture(this._splashTextures.powered);
                this._splashTextures.powered = null
            }
            if (this._splashTextures.website) {
                renderer.DeleteTexture(this._splashTextures.website);
                this._splashTextures.website = null
            }
            renderer.ClearRgba(0, 0, 0, 0);
            renderer.Finish();
            this._splashState = "done";
            this._gpuTimeStartFrame = renderer.GetFrameNumber();
            if (loaderStyle === 3) this.HideCordovaSplashScreen()
        }
        _DrawLoadingScreen() {
            if (this._rafId === -1) return;
            const renderer = this.GetRenderer();
            renderer.Start();
            this._rafId = -1;
            const hasHadError = this._runtime.GetAssetManager().HasHadErrorLoading();
            const loaderStyle = this._runtime.GetLoaderStyle();
            if (loaderStyle !== 3) {
                this.SetCssTransform(renderer);
                renderer.ClearRgba(0, 0, 0, 0);
                renderer.ResetColor();
                renderer.SetTextureFillMode();
                renderer.SetTexture(null)
            }
            if (loaderStyle === 0) this._DrawProgressBarAndLogoLoadingScreen(hasHadError);
            else if (loaderStyle === 1) this._DrawProgressBarLoadingScreen(hasHadError, PROGRESSBAR_WIDTH, 0);
            else if (loaderStyle === 2) this._DrawPercentTextLoadingScreen(hasHadError);
            else if (loaderStyle === 3) C3.noop();
            else if (loaderStyle === 4) this._DrawSplashLoadingScreen(hasHadError);
            else throw new Error("invalid loader style");
            renderer.Finish();
            this._rafId = requestAnimationFrame(() => this._DrawLoadingScreen())
        }
        _DrawPercentTextLoadingScreen(hasHadError) {
            if (hasHadError) this._percentText.SetColorRgb(1, 0, 0);
            else this._percentText.SetColorRgb(.6, .6, .6);
            this._percentText.SetText(Math.round(this._loadingProgress * 100) + "%");
            const midX = this._canvasCssWidth / 2;
            const midY = this._canvasCssHeight / 2;
            const hw = PERCENTTEXT_WIDTH / 2;
            const hh = PERCENTTEXT_HEIGHT / 2;
            tempQuad.setRect(midX - hw, midY - hh, midX +
                hw, midY + hh);
            const renderer = this.GetRenderer();
            renderer.SetTexture(this._percentText.GetTexture());
            renderer.Quad3(tempQuad, this._percentText.GetTexRect())
        }
        _DrawProgressBarLoadingScreen(hasHadError, width, yOff) {
            const renderer = this.GetRenderer();
            const height = PROGRESSBAR_HEIGHT;
            renderer.SetColorFillMode();
            if (hasHadError) renderer.SetColorRgba(1, 0, 0, 1);
            else renderer.SetColorRgba(.118, .565, 1, 1);
            const midX = this._canvasCssWidth / 2;
            const midY = this._canvasCssHeight / 2;
            const hw = width / 2;
            const hh = height / 2;
            tempRect.setWH(midX -
                hw, midY - hh + yOff, Math.floor(width * this._loadingProgress), height);
            renderer.Rect(tempRect);
            tempRect.setWH(midX - hw, midY - hh + yOff, width, height);
            tempRect.offset(-.5, -.5);
            tempRect.inflate(.5, .5);
            renderer.SetColorRgba(0, 0, 0, 1);
            renderer.LineRect2(tempRect);
            tempRect.inflate(1, 1);
            renderer.SetColorRgba(1, 1, 1, 1);
            renderer.LineRect2(tempRect)
        }
        _DrawProgressBarAndLogoLoadingScreen(hasHadError) {
            const renderer = this.GetRenderer();
            const loadingLogoAsset = this._runtime.GetLoadingLogoAsset();
            if (!loadingLogoAsset) {
                this._DrawProgressBarLoadingScreen(hasHadError,
                    PROGRESSBAR_WIDTH, 0);
                return
            }
            const logoTexture = loadingLogoAsset.GetTexture();
            if (!logoTexture) {
                this._DrawProgressBarLoadingScreen(hasHadError, PROGRESSBAR_WIDTH, 0);
                return
            }
            const logoW = logoTexture.GetWidth();
            const logoH = logoTexture.GetHeight();
            const midX = this._canvasCssWidth / 2;
            const midY = this._canvasCssHeight / 2;
            const hw = logoW / 2;
            const hh = logoH / 2;
            tempQuad.setRect(midX - hw, midY - hh, midX + hw, midY + hh);
            renderer.SetTexture(logoTexture);
            renderer.Quad(tempQuad);
            this._DrawProgressBarLoadingScreen(hasHadError, logoW,
                hh + 16)
        }
        _DrawSplashLoadingScreen(hasHadError) {
            const renderer = this.GetRenderer();
            const logoTex = this._splashTextures.logo;
            const poweredTex = this._splashTextures.powered;
            const websiteTex = this._splashTextures.website;
            const nowTime = Date.now();
            if (this._splashFrameNumber === 0) this._loaderStartTime = nowTime;
            const allowQuickSplash = this._runtime.IsPreview() || this._runtime.IsFBInstantAvailable() && !this._runtime.IsCordova();
            const splashAfterFadeOutWait = allowQuickSplash ? 0 : SPLASH_AFTER_FADEOUT_WAIT_TIME;
            const splashMinDisplayTime =
                allowQuickSplash ? 0 : SPLASH_MIN_DISPLAY_TIME;
            let a = 1;
            if (this._splashState === "fade-in") a = Math.min((nowTime - this._loaderStartTime) / SPLASH_FADE_DURATION, 1);
            else if (this._splashState === "fade-out") a = Math.max(1 - (nowTime - this._splashFadeOutStartTime) / SPLASH_FADE_DURATION, 0);
            renderer.SetColorFillMode();
            renderer.SetColorRgba(.231 * a, .251 * a, .271 * a, a);
            tempRect.set(0, 0, this._canvasCssWidth, this._canvasCssHeight);
            renderer.Rect(tempRect);
            const w = Math.ceil(this._canvasCssWidth);
            const h = Math.ceil(this._canvasCssHeight);
            let drawW, drawH;
            if (this._canvasCssHeight > 256) {
                renderer.SetColorRgba(.302 * a, .334 * a, .365 * a, a);
                drawW = w;
                drawH = Math.max(h * .005, 2);
                tempRect.setWH(0, h * .8 - drawH / 2, drawW, drawH);
                renderer.Rect(tempRect);
                if (hasHadError) renderer.SetColorRgba(a, 0, 0, a);
                else renderer.SetColorRgba(.161 * a, .953 * a, .816 * a, a);
                drawW = w * this._loadingProgress;
                tempRect.setWH(w * .5 - drawW / 2, h * .8 - drawH / 2, drawW, drawH);
                renderer.Rect(tempRect);
                renderer.SetColorRgba(a, a, a, a);
                renderer.SetTextureFillMode();
                if (poweredTex) {
                    drawW = C3.clamp(h * .22, 105, w * .6) *
                        1.5;
                    drawH = drawW / 8;
                    tempRect.setWH(w * .5 - drawW / 2, h * .2 - drawH / 2, drawW, drawH);
                    renderer.SetTexture(poweredTex);
                    renderer.Rect(tempRect)
                }
                if (logoTex) {
                    drawW = Math.min(h * .395, w * .95);
                    drawH = drawW;
                    tempRect.setWH(w * .5 - drawW / 2, h * .485 - drawH / 2, drawW, drawH);
                    renderer.SetTexture(logoTex);
                    renderer.Rect(tempRect)
                }
                if (websiteTex) {
                    drawW = C3.clamp(h * .22, 105, w * .6) * 1.5;
                    drawH = drawW / 8;
                    tempRect.setWH(w * .5 - drawW / 2, h * .868 - drawH / 2, drawW, drawH);
                    renderer.SetTexture(websiteTex);
                    renderer.Rect(tempRect)
                }
            } else {
                renderer.SetColorRgba(.302 * a,
                    .334 * a, .365 * a, a);
                drawW = w;
                drawH = Math.max(h * .005, 2);
                tempRect.setWH(0, h * .85 - drawH / 2, drawW, drawH);
                renderer.Rect(tempRect);
                if (hasHadError) renderer.SetColorRgba(a, 0, 0, a);
                else renderer.SetColorRgba(.161 * a, .953 * a, .816 * a, a);
                drawW = w * this._loadingProgress;
                tempRect.setWH(w * .5 - drawW / 2, h * .85 - drawH / 2, drawW, drawH);
                renderer.Rect(tempRect);
                renderer.SetColorRgba(a, a, a, a);
                renderer.SetTextureFillMode();
                if (logoTex) {
                    drawW = h * .55;
                    drawH = drawW;
                    tempRect.setWH(w * .5 - drawW / 2, h * .45 - drawH / 2, drawW, drawH);
                    renderer.SetTexture(logoTex);
                    renderer.Rect(tempRect)
                }
            }
            this._splashFrameNumber++;
            if (this._splashState === "fade-in" && nowTime - this._loaderStartTime >= SPLASH_FADE_DURATION && this._splashFrameNumber >= 2) {
                this._splashState = "wait";
                this._splashFadeInFinishTime = nowTime
            }
            if (this._splashState === "wait" && nowTime - this._splashFadeInFinishTime >= splashMinDisplayTime && this._loadingProgress >= 1) {
                this._splashState = "fade-out";
                this._splashFadeOutStartTime = nowTime
            }
            if (this._splashState === "fade-out" && nowTime - this._splashFadeOutStartTime >= SPLASH_FADE_DURATION +
                splashAfterFadeOutWait || allowQuickSplash && this._loadingProgress >= 1 && nowTime - this._loaderStartTime < 500) this._splashDoneResolve()
        }
    };

}

// runtime.js
{
    'use strict';
    const C3 = self.C3;
    const C3Debugger = self.C3Debugger;
    const assert = self.assert;
    const DEFAULT_RUNTIME_OPTS = {
        "messagePort": null,
        "runtimeBaseUrl": "",
        "headless": false,
        "hasDom": true,
        "isInWorker": false,
        "useAudio": true,
        "projectData": "",
        "exportType": ""
    };
    let ife = true;
    C3.Runtime = class C3Runtime extends C3.DefendedBase {
        constructor(opts) {
            opts = Object.assign({}, DEFAULT_RUNTIME_OPTS, opts);
            super();
            this._messagePort = opts["messagePort"];
            this._runtimeBaseUrl = opts["runtimeBaseUrl"];
            this._previewUrl = opts["previewUrl"];
            this._isHeadless = !!opts["headless"];
            this._hasDom = !!opts["hasDom"];
            this._isInWorker = !!opts["isInWorker"];
            ife = opts["ife"];
            this._useAudio = !!opts["useAudio"];
            this._exportType = opts["exportType"];
            this._isiOSCordova = !!opts["isiOSCordova"];
            this._isiOSWebView = !!opts["isiOSWebView"];
            this._isFBInstantAvailable = !!opts["isFBInstantAvailable"];
            this._opusWasmScriptUrl = opts["opusWasmScriptUrl"];
            this._opusWasmBinaryUrl = opts["opusWasmBinaryUrl"];
            this._isDebug = !!(this._exportType === "preview" && opts["isDebug"]);
            this._breakpointsEnabled = this._isDebug;
            this._isDebugging = this._isDebug;
            this._debuggingDisabled = 0;
            this._additionalLoadPromises = [];
            this._additionalCreatePromises = [];
            this._isUsingCreatePromises = false;
            this._projectName = "";
            this._projectVersion = "";
            this._projectUniqueId = "";
            this._appId =
                "";
            this._originalViewportWidth = 0;
            this._originalViewportHeight = 0;
            this._devicePixelRatio = self.devicePixelRatio;
            this._parallaxXorigin = 0;
            this._parallaxYorigin = 0;
            this._viewportWidth = 0;
            this._viewportHeight = 0;
            this._loaderStyle = 0;
            this._usesLoaderLayout = false;
            this._isLoading = true;
            this._usesAnyBackgroundBlending = false;
            this._usesAnyCrossSampling = false;
            this._usesAnyDepthSampling = false;
            this._loadingLogoAsset = null;
            this._assetManager = C3.New(C3.AssetManager, this, opts);
            this._layoutManager = C3.New(C3.LayoutManager,
                this);
            this._eventSheetManager = C3.New(C3.EventSheetManager, this);
            this._pluginManager = C3.New(C3.PluginManager, this);
            this._collisionEngine = C3.New(C3.CollisionEngine, this);
            this._timelineManager = C3.New(C3.TimelineManager, this);
            this._transitionManager = C3.New(C3.TransitionManager, this);
            this._templateManager = C3.New(C3.TemplateManager, this);
            this._allObjectClasses = [];
            this._objectClassesByName = new Map;
            this._objectClassesBySid = new Map;
            this._familyCount = 0;
            this._allContainers = [];
            this._allEffectLists = [];
            this._currentLayoutStack = [];
            this._instancesPendingCreate = [];
            this._instancesPendingDestroy = new Map;
            this._hasPendingInstances = false;
            this._isFlushingPendingInstances = false;
            this._objectCount = 0;
            this._nextUid = 0;
            this._instancesByUid = new Map;
            this._instancesToReleaseAtEndOfTick = new Set;
            this._instancesToReleaseAffectedObjectClasses = new Set;
            this._objectReferenceTable = [];
            this._jsPropNameTable = [];
            this._canvasManager = null;
            this._uses3dFeatures = false;
            this._framerateMode = "vsync";
            this._compositingMode = "standard";
            this._sampling = "trilinear";
            this._isPixelRoundingEnabled = false;
            this._needRender = true;
            this._pauseOnBlur = false;
            this._isPausedOnBlur = false;
            this._exportToVideo = null;
            this._tickCallbacks = {
                normal: timestamp => {
                    this._rafId = -1;
                    this._ruafId = -1;
                    this.Tick(timestamp)
                },
                tickOnly: timestamp => {
                    this._ruafId = -1;
                    this.Tick(timestamp, false, "skip-render")
                },
                renderOnly: () => {
                    this._rafId = -1;
                    this.Render()
                }
            };
            this._rafId = -1;
            this._ruafId = -1;
            this._tickCount = 0;
            this._tickCountNoSave = 0;
            this._hasStarted = false;
            this._isInTick = false;
            this._hasStartedTicking = false;
            this._isLayoutFirstTick =
                true;
            this._suspendCount = 0;
            this._scheduleTriggersThrottle = new C3.PromiseThrottle(1);
            this._randomNumberCallback = () => Math.random();
            this._startTime = 0;
            this._lastTickTime = 0;
            this._dtRaw = 0;
            this._dt1 = 0;
            this._dt = 0;
            this._timeScale = 1;
            this._minimumFramerate = 30;
            this._gameTime = C3.New(C3.KahanSum);
            this._gameTimeRaw = C3.New(C3.KahanSum);
            this._wallTime = C3.New(C3.KahanSum);
            this._instanceTimes = new Map;
            this._fpsFrameCount = -1;
            this._fpsLastTime = 0;
            this._fps = 0;
            this._mainThreadTimeCounter = 0;
            this._mainThreadTime = 0;
            this._isLoadingState =
                false;
            this._saveToSlotName = "";
            this._loadFromSlotName = "";
            this._loadFromJson = null;
            this._lastSaveJson = "";
            this._projectStorage = null;
            this._savegamesStorage = null;
            this._dispatcher = C3.New(C3.Event.Dispatcher);
            this._domEventHandlers = new Map;
            this._pendingResponsePromises = new Map;
            this._nextDomResponseId = 0;
            this._didRequestDeviceOrientationEvent = false;
            this._didRequestDeviceMotionEvent = false;
            this._isReadyToHandleEvents = false;
            this._waitingToHandleEvents = [];
            this._eventObjects = {
                "pretick": C3.New(C3.Event, "pretick",
                    false),
                "tick": C3.New(C3.Event, "tick", false),
                "tick2": C3.New(C3.Event, "tick2", false),
                "instancedestroy": C3.New(C3.Event, "instancedestroy", false),
                "beforelayoutchange": C3.New(C3.Event, "beforelayoutchange", false),
                "layoutchange": C3.New(C3.Event, "layoutchange", false)
            };
            this._eventObjects["instancedestroy"].instance = null;
            this._userScriptDispatcher = C3.New(C3.Event.Dispatcher);
            this._userScriptEventObjects = null;
            this._behInstsToTick = C3.New(C3.RedBlackSet, C3.BehaviorInstance.SortByTickSequence);
            this._behInstsToPostTick =
                C3.New(C3.RedBlackSet, C3.BehaviorInstance.SortByTickSequence);
            this._behInstsToTick2 = C3.New(C3.RedBlackSet, C3.BehaviorInstance.SortByTickSequence);
            this._jobScheduler = C3.New(C3.JobSchedulerRuntime, this, opts["jobScheduler"]);
            if (opts["canvas"]) this._canvasManager = C3.New(C3.CanvasManager, this);
            this._messagePort.onmessage = e => this["_OnMessageFromDOM"](e.data);
            this.AddDOMComponentMessageHandler("runtime", "visibilitychange", e => this._OnVisibilityChange(e));
            this.AddDOMComponentMessageHandler("runtime", "opus-decode",
                e => this._WasmDecodeWebMOpus(e["arrayBuffer"]));
            this.AddDOMComponentMessageHandler("runtime", "get-remote-preview-status-info", () => this._GetRemotePreviewStatusInfo());
            this.AddDOMComponentMessageHandler("runtime", "js-invoke-function", e => this._InvokeFunctionFromJS(e));
            this.AddDOMComponentMessageHandler("runtime", "go-to-last-error-script", self["goToLastErrorScript"]);
            this.AddDOMComponentMessageHandler("runtime", "offline-audio-render-completed", e => this._OnOfflineAudioRenderCompleted(e));
            this._dispatcher.addEventListener("window-blur",
                e => this._OnWindowBlur(e));
            this._dispatcher.addEventListener("window-focus", () => this._OnWindowFocus());
            this._timelineManager.AddRuntimeListeners();
            this._templateManager.AddRuntimeListeners();
            this._iRuntime = null;
            this._interfaceMap = new WeakMap;
            this._commonScriptInterfaces = {
                keyboard: null,
                mouse: null,
                touch: null
            }
        }
        static Create(opts) {
            return C3.New(C3.Runtime, opts)
        }
        Release() {
            C3.clearArray(this._allObjectClasses);
            this._objectClassesByName.clear();
            this._objectClassesBySid.clear();
            this._layoutManager.Release();
            this._layoutManager = null;
            this._eventSheetManager.Release();
            this._eventSheetManager = null;
            this._pluginManager.Release();
            this._pluginManager = null;
            this._assetManager.Release();
            this._assetManager = null;
            this._collisionEngine.Release();
            this._collisionEngine = null;
            this._timelineManager.Release();
            this._timelineManager = null;
            this._transitionManager.Release();
            this._transitionManager = null;
            this._templateManager.Release();
            this._templateManager = null;
            if (this._canvasManager) {
                this._canvasManager.Release();
                this._canvasManager =
                    null
            }
            this._dispatcher.Release();
            this._dispatcher = null;
            this._tickEvent = null
        }["_OnMessageFromDOM"](data) {
            const type = data["type"];
            if (type === "event") this._OnEventFromDOM(data);
            else if (type === "result") this._OnResultFromDOM(data);
            else throw new Error(`unknown message '${type}'`);
        }
        _OnEventFromDOM(e) {
            if (!this._isReadyToHandleEvents) {
                this._waitingToHandleEvents.push(e);
                return
            }
            const component = e["component"];
            const handler = e["handler"];
            const data = e["data"];
            const dispatchOpts = e["dispatchOpts"];
            const dispatchRuntimeEvent = !!(dispatchOpts && dispatchOpts["dispatchRuntimeEvent"]);
            const dispatchUserScriptEvent = !!(dispatchOpts && dispatchOpts["dispatchUserScriptEvent"]);
            const responseId = e["responseId"];
            if (component === "runtime") {
                if (dispatchRuntimeEvent) {
                    const event = new C3.Event(handler);
                    event.data = data;
                    this._dispatcher.dispatchEventAndWaitAsyncSequential(event)
                }
                if (dispatchUserScriptEvent) {
                    const event = new C3.Event(handler, true);
                    for (const [key, value] of Object.entries(data)) event[key] = value;
                    this.DispatchUserScriptEvent(event)
                }
            }
            const handlerMap =
                this._domEventHandlers.get(component);
            if (!handlerMap) {
                if (!dispatchRuntimeEvent && !dispatchUserScriptEvent) console.warn(`[Runtime] No DOM event handlers for component '${component}'`);
                return
            }
            const func = handlerMap.get(handler);
            if (!func) {
                if (!dispatchRuntimeEvent && !dispatchUserScriptEvent) console.warn(`[Runtime] No DOM handler '${handler}' for component '${component}'`);
                return
            }
            let ret = null;
            try {
                ret = func(data)
            } catch (err) {
                console.error(`Exception in '${component}' handler '${handler}':`, err);
                if (responseId !==
                    null) this._PostResultToDOM(responseId, false, "" + err);
                return
            }
            if (responseId !== null)
                if (ret && ret.then) ret.then(result => this._PostResultToDOM(responseId, true, result)).catch(err => {
                    console.error(`Rejection from '${component}' handler '${handler}':`, err);
                    this._PostResultToDOM(responseId, false, "" + err)
                });
                else this._PostResultToDOM(responseId, true, ret)
        }
        _PostResultToDOM(responseId, isOk, result) {
            this._messagePort.postMessage({
                "type": "result",
                "responseId": responseId,
                "isOk": isOk,
                "result": result
            })
        }
        _OnResultFromDOM(data) {
            const responseId =
                data["responseId"];
            const isOk = data["isOk"];
            const result = data["result"];
            const pendingPromise = this._pendingResponsePromises.get(responseId);
            if (isOk) pendingPromise.resolve(result);
            else pendingPromise.reject(result);
            this._pendingResponsePromises.delete(responseId)
        }
        AddDOMComponentMessageHandler(component, handler, func) {
            let handlerMap = this._domEventHandlers.get(component);
            if (!handlerMap) {
                handlerMap = new Map;
                this._domEventHandlers.set(component, handlerMap)
            }
            if (handlerMap.has(handler)) throw new Error(`[Runtime] Component '${component}' already has handler '${handler}'`);
            handlerMap.set(handler, func)
        }
        PostComponentMessageToDOM(component, handler, data, transfer) {
            this._messagePort.postMessage({
                "type": "event",
                "component": component,
                "handler": handler,
                "data": data,
                "responseId": null
            }, transfer)
        }
        PostComponentMessageToDOMAsync(component, handler, data, transfer) {
            const responseId = this._nextDomResponseId++;
            const ret = new Promise((resolve, reject) => {
                this._pendingResponsePromises.set(responseId, {
                    resolve,
                    reject
                })
            });
            this._messagePort.postMessage({
                "type": "event",
                "component": component,
                "handler": handler,
                "data": data,
                "responseId": responseId
            }, transfer);
            return ret
        }
        PostToDebugger(data) {
            if (!this.IsDebug()) throw new Error("not in debug mode");
            this.PostComponentMessageToDOM("runtime", "post-to-debugger", data)
        }
        async Init(opts) {
            if (this.IsDebug()) await C3Debugger.Init(this);
            else if (self.C3Debugger) self.C3Debugger.InitPreview(this);
            const [o] = await Promise.all([this._assetManager.FetchJson("data.json"), this._MaybeLoadOpusDecoder(), this._jobScheduler.Init()]);
            await this._LoadDataJson(o);
            await this._InitialiseCanvas(opts);
            if (!this.IsPreview()) console.info("Made with Construct, the game and app creator :: https://www.construct.net");
            if (this.GetWebGLRenderer()) {
                const webglRenderer = this.GetWebGLRenderer();
                console.info(`[C3 runtime] Hosted in ${this.IsInWorker()?"worker":"DOM"}, rendering with WebGL ${webglRenderer.GetWebGLVersionNumber()} [${webglRenderer.GetUnmaskedRenderer()}] (${webglRenderer.IsDesynchronized()?"desynchronized":"standard"} compositing)`)
            } else if (this.GetWebGPURenderer()) console.info(`[C3 runtime] Hosted in ${this.IsInWorker()?
"worker":"DOM"}, rendering with experimental WebGPU [${this.GetWebGPURenderer().GetBasicAdapterInfoString()}]`);
            if (this.GetRenderer().HasMajorPerformanceCaveat()) console.warn("[C3 runtime] The renderer indicates a major performance caveat. Software rendering may be in use. This can result in significantly degraded performance.");
            this._isReadyToHandleEvents = true;
            for (const e of this._waitingToHandleEvents) this._OnEventFromDOM(e);
            C3.clearArray(this._waitingToHandleEvents);
            if (this._canvasManager) this._canvasManager.StartLoadingScreen();
            for (const f of opts["runOnStartupFunctions"]) this._additionalLoadPromises.push(this._RunOnStartupFunction(f));
            await Promise.all([this._assetManager.WaitForAllToLoad(), ...this._additionalLoadPromises]);
            C3.clearArray(this._additionalLoadPromises);
            if (this._assetManager.HasHadErrorLoading()) {
                if (this._canvasManager) this._canvasManager.HideCordovaSplashScreen();
                return
            }
            if (this._canvasManager) await this._canvasManager.EndLoadingScreen();
            await this._dispatcher.dispatchEventAndWaitAsync(new C3.Event("beforeruntimestart"));
            await this.Start();
            this._messagePort.postMessage({
                "type": "runtime-ready"
            });
            return this
        }
        async _RunOnStartupFunction(f) {
            try {
                await f(this._iRuntime)
            } catch (err) {
                console.error("[C3 runtime] Error in runOnStartup function: ", err)
            }
        }
        async _LoadDataJson(o) {
            const projectData = o["project"];
            this._projectName = projectData[0];
            this._projectVersion = projectData[16];
            this._projectUniqueId = projectData[31];
            this._appId = projectData[38];
            const loadingLogoFilename = projectData[39] || "loading-logo.png";
            this._isPixelRoundingEnabled = !!projectData[9];
            this._originalViewportWidth = this._viewportWidth = projectData[10];
            this._originalViewportHeight = this._viewportHeight = projectData[11];
            this._parallaxXorigin = this._originalViewportWidth / 2;
            this._parallaxYorigin = this._originalViewportHeight / 2;
            this._compositingMode = projectData[36];
            this._framerateMode = projectData[37];
            if (this._compositingMode === "low-latency" && this.IsAndroidWebView() && C3.Platform.BrowserVersionNumber <= 77) {
                console.warn("[C3 runtime] Desynchronized (low-latency) compositing is enabled, but is disabled in the Android WebView <=77 due to crbug.com/1008842. Reverting to synchronized (standard) compositing.");
                this._compositingMode = "standard"
            }
            this._uses3dFeatures = !!projectData[40];
            this._sampling = projectData[14];
            this._usesAnyBackgroundBlending = projectData[15];
            this._usesAnyCrossSampling = projectData[42];
            this._usesAnyDepthSampling = projectData[17];
            this._usesLoaderLayout = !!projectData[18];
            this._loaderStyle = projectData[19];
            this._nextUid = projectData[21];
            this._pauseOnBlur = projectData[22];
            const assetManager = this._assetManager;
            assetManager._SetFileStructure(projectData[45]);
            assetManager._SetAudioFiles(projectData[7],
                projectData[25]);
            assetManager._SetMediaSubfolder(projectData[8]);
            assetManager._SetFontsSubfolder(projectData[32]);
            assetManager._SetIconsSubfolder(projectData[28]);
            assetManager._SetWebFonts(projectData[29]);
            if (this._loaderStyle === 0) {
                let url = "";
                if (this.IsPreview()) {
                    if (assetManager._HasLocalUrlBlob(loadingLogoFilename)) url = assetManager.GetLocalUrlAsBlobUrl(loadingLogoFilename)
                } else if (assetManager.GetFileStructure() === "flat") url = assetManager.GetIconsSubfolder() + loadingLogoFilename;
                else url = loadingLogoFilename;
                if (url) this._loadingLogoAsset = assetManager.LoadImage({
                    url
                })
            }
            if (this._canvasManager) {
                this._canvasManager.SetFullscreenMode(C3.CanvasManager._FullscreenModeNumberToString(projectData[12]));
                this._canvasManager.SetFullscreenScalingQuality(projectData[23] ? "high" : "low");
                this._canvasManager.SetMipmapsEnabled(projectData[24] !== 0);
                this._canvasManager._SetGPUPowerPreference(projectData[34]);
                this._canvasManager._SetTextureAnisotropy(projectData[41]);
                this._canvasManager._SetWebGPUEnabled(projectData[13]);
                this._canvasManager._SetZAxisScale(projectData[30]);
                this._canvasManager._SetZDistances(projectData[46], projectData[47]);
                this._canvasManager._SetFieldOfView(projectData[26]);
                this._canvasManager._SetLimitedToWebGL1(projectData[48])
            }
            const exportToVideoOpts = projectData[43];
            if (exportToVideoOpts) await this._LoadExportToVideoData(exportToVideoOpts);
            this._pluginManager.CreateSystemPlugin();
            this._objectReferenceTable = self.C3_GetObjectRefTable();
            for (const pluginData of projectData[2]) this._pluginManager.CreatePlugin(pluginData);
            this._objectReferenceTable = self.C3_GetObjectRefTable();
            this._LoadJsPropNameTable();
            for (const objectClassData of projectData[3]) {
                const objectClass = C3.ObjectClass.Create(this, this._allObjectClasses.length, objectClassData);
                this._allObjectClasses.push(objectClass);
                this._objectClassesByName.set(objectClass.GetName().toLowerCase(), objectClass);
                this._objectClassesBySid.set(objectClass.GetSID(), objectClass)
            }
            for (const familyData of projectData[4]) {
                const familyType = this._allObjectClasses[familyData[0]];
                familyType._LoadFamily(familyData)
            }
            for (const containerData of projectData[27]) {
                const containerTypes =
                    containerData.map(index => this._allObjectClasses[index]);
                this._allContainers.push(C3.New(C3.Container, this, containerTypes))
            }
            for (const objectClass of this._allObjectClasses) objectClass._OnAfterCreate();
            for (const layoutData of projectData[5]) this._layoutManager.Create(layoutData);
            const firstLayoutName = projectData[1];
            if (firstLayoutName) {
                const firstLayout = this._layoutManager.GetLayoutByName(firstLayoutName);
                if (firstLayout) this._layoutManager.SetFirstLayout(firstLayout)
            }
            for (const timelineData of projectData[33]) this._timelineManager.Create(timelineData);
            for (const transitionData of projectData[35]) this._transitionManager.Create(transitionData);
            for (const templateInstanceData of projectData[44]) this._templateManager.Create(templateInstanceData);
            if (!this._templateManager.HasTemplates()) {
                this._templateManager.Release();
                this._templateManager = null
            }
            this._InitScriptInterfaces();
            for (const eventSheetData of projectData[6]) this._eventSheetManager.Create(eventSheetData);
            this._eventSheetManager._PostInit();
            this._InitGlobalVariableScriptInterface();
            C3.clearArray(this._objectReferenceTable);
            this.FlushPendingInstances();
            let targetOrientation = "any";
            const orientations = projectData[20];
            if (orientations === 1) targetOrientation = "portrait";
            else if (orientations === 2) targetOrientation = "landscape";
            this.PostComponentMessageToDOM("runtime", "set-target-orientation", {
                "targetOrientation": targetOrientation
            })
        }
        async _LoadExportToVideoData(exportToVideoOpts) {
            const format = exportToVideoOpts["format"];
            if (format === "image-sequence") this._exportToVideo = new self.C3ExportToImageSequence(this, exportToVideoOpts);
            else if (format ===
                "image-sequence-gif") this._exportToVideo = new self.C3ExportToGIF(this, exportToVideoOpts);
            else if (format === "webm") this._exportToVideo = new self.C3ExportToWebMVideo(this, exportToVideoOpts);
            else if (format === "mp4") this._exportToVideo = new self.C3ExportToMP4Video(this, exportToVideoOpts);
            else;
            this._framerateMode = "unlimited-frame";
            this._canvasManager.SetFullscreenMode("off");
            this._devicePixelRatio = 1;
            self.devicePixelRatio = 1;
            await this.PostComponentMessageToDOMAsync("runtime", "set-exporting-to-video", {
                "message": this._exportToVideo.GetExportingMessageForPercent(0),
                "duration": this._exportToVideo.GetDuration()
            })
        }
        GetLoaderStyle() {
            return this._loaderStyle
        }
        IsExportToVideo() {
            return this._exportToVideo !== null
        }
        GetExportVideoDuration() {
            return this._exportToVideo.GetDuration()
        }
        GetExportVideoFramerate() {
            return this._exportToVideo.GetFramerate()
        }
        _InitExportToVideo() {
            return this._exportToVideo.Init({
                width: this._canvasManager.GetDeviceWidth(),
                height: this._canvasManager.GetDeviceHeight()
            })
        }
        _ExportToVideoAddFrame() {
            const time = this._tickCount / this.GetExportVideoFramerate();
            return this._exportToVideo.AddFrame(this._canvasManager.GetCanvas(), time)
        }
        _ExportToVideoAddKeyframe() {
            if (this._exportToVideo) this._exportToVideo.AddKeyframe()
        }
        _OnOfflineAudioRenderCompleted(e) {
            this._exportToVideo.OnOfflineAudioRenderCompleted(e)
        }
        _ExportToVideoFinish() {
            return this._exportToVideo.Finish()
        }
        IsFBInstantAvailable() {
            return this._isFBInstantAvailable
        }
        IsLoading() {
            return this._isLoading
        }
        AddLoadPromise(promise) {
            this._additionalLoadPromises.push(promise)
        }
        SetUsingCreatePromises(e) {
            this._isUsingCreatePromises = !!e
        }
        AddCreatePromise(promise) {
            if (!this._isUsingCreatePromises) return;
            this._additionalCreatePromises.push(promise)
        }
        GetCreatePromises() {
            return this._additionalCreatePromises
        }
        _GetNextFamilyIndex() {
            return this._familyCount++
        }
        GetFamilyCount() {
            return this._familyCount
        }
        _AddEffectList(el) {
            this._allEffectLists.push(el)
        }
        _GetAllEffectLists() {
            return this._allEffectLists
        }
        async _InitialiseCanvas(opts) {
            if (!this._canvasManager) return;
            await this._canvasManager.CreateCanvas(opts);
            this._canvasManager.InitLoadingScreen(this._loaderStyle)
        }
        async _MaybeLoadOpusDecoder() {
            if (this._assetManager.IsAudioFormatSupported("audio/webm; codecs=opus")) return;
            let wasmBlob = null;
            let wasmBuffer = null;
            try {
                if (this.IsiOSCordova() && this._assetManager.IsFileProtocol()) wasmBuffer = await this._assetManager.CordovaFetchLocalFileAsArrayBuffer(this._opusWasmBinaryUrl);
                else wasmBuffer = await this._assetManager.FetchArrayBuffer(this._opusWasmBinaryUrl)
            } catch (err) {
                console.info("Failed to fetch Opus decoder WASM; assuming project has no Opus audio.", err);
                return
            }
            if (wasmBuffer) this.AddJobWorkerBuffer(wasmBuffer, "opus-decoder-wasm");
            else this.AddJobWorkerBlob(wasmBlob, "opus-decoder-wasm");
            await this.AddJobWorkerScripts([this._opusWasmScriptUrl])
        }
        async _WasmDecodeWebMOpus(arrayBuffer) {
            const result = await this.AddJob("OpusDecode", {
                "arrayBuffer": arrayBuffer
            }, [arrayBuffer]);
            return result
        }
        async Start() {
            this._hasStarted = true;
            this._startTime = Date.now();
            if (this._usesLoaderLayout) {
                for (const objectClass of this._allObjectClasses)
                    if (!objectClass.IsFamily() && !objectClass.IsOnLoaderLayout() && objectClass.IsWorldType()) objectClass.OnCreate();
                this._assetManager.WaitForAllToLoad().then(() => {
                    this._isLoading =
                        false;
                    this._OnLoadFinished()
                })
            } else this._isLoading = false;
            this._assetManager.SetInitialLoadFinished();
            if (this.IsDebug()) C3Debugger.RuntimeInit(ife);
            for (const layout of this._layoutManager.GetAllLayouts()) layout._CreateGlobalNonWorlds();
            if (this.IsExportToVideo()) await this._InitExportToVideo();
            const firstLayout = this._layoutManager.GetFirstLayout();
            await firstLayout._Load(null, this.GetRenderer());
            await firstLayout._StartRunning(true);
            this._fpsLastTime = performance.now();
            if (!this._usesLoaderLayout) this._OnLoadFinished();
            const state = await this.PostComponentMessageToDOMAsync("runtime", "before-start-ticking");
            if (state["isSuspended"] && !this.IsExportToVideo()) this._suspendCount++;
            else this.Tick()
        }
        _OnLoadFinished() {
            this.Trigger(C3.Plugins.System.Cnds.OnLoadFinished, null, null);
            this.PostComponentMessageToDOM("runtime", "register-sw")
        }
        GetObjectReference(index) {
            index = Math.floor(index);
            const objRefTable = this._objectReferenceTable;
            if (index < 0 || index >= objRefTable.length) throw new Error("invalid object reference");
            return objRefTable[index]
        }
        _LoadJsPropNameTable() {
            for (const entry of self.C3_JsPropNameTable) {
                const propName =
                    C3.first(Object.keys(entry));
                this._jsPropNameTable.push(propName)
            }
        }
        GetJsPropName(index) {
            index = Math.floor(index);
            const jsPropNameTable = this._jsPropNameTable;
            if (index < 0 || index >= jsPropNameTable.length) throw new Error("invalid prop reference");
            return jsPropNameTable[index]
        }
        HasDOM() {
            return this._hasDom
        }
        IsHeadless() {
            return this._isHeadless
        }
        IsInWorker() {
            return this._isInWorker
        }
        GetRuntimeBaseURL() {
            return this._runtimeBaseUrl
        }
        GetPreviewURL() {
            return this._previewUrl
        }
        GetEventSheetManager() {
            return this._eventSheetManager
        }
        GetEventStack() {
            return this._eventSheetManager.GetEventStack()
        }
        GetCurrentEventStackFrame() {
            return this._eventSheetManager.GetCurrentEventStackFrame()
        }
        GetCurrentEvent() {
            return this._eventSheetManager.GetCurrentEvent()
        }
        GetCurrentCondition() {
            return this._eventSheetManager.GetCurrentCondition()
        }
        IsCurrentConditionFirst() {
            return this.GetCurrentEventStackFrame().GetConditionIndex() ===
                0
        }
        GetCurrentAction() {
            return this._eventSheetManager.GetCurrentAction()
        }
        GetPluginManager() {
            return this._pluginManager
        }
        GetSystemPlugin() {
            return this._pluginManager.GetSystemPlugin()
        }
        GetObjectClassByIndex(i) {
            i = Math.floor(i);
            if (i < 0 || i >= this._allObjectClasses.length) throw new RangeError("invalid index");
            return this._allObjectClasses[i]
        }
        GetObjectClassByName(name) {
            return this._objectClassesByName.get(name.toLowerCase()) || null
        }
        GetObjectClassBySID(sid) {
            return this._objectClassesBySid.get(sid) || null
        }
        GetSingleGlobalObjectClassByCtor(ctor) {
            const plugin =
                this._pluginManager.GetPluginByConstructorFunction(ctor);
            if (!plugin) return null;
            return plugin.GetSingleGlobalObjectClass()
        }
        GetAllObjectClasses() {
            return this._allObjectClasses
        }* allInstances() {
            for (const objectClass of this._allObjectClasses) {
                if (objectClass.IsFamily()) continue;
                yield* objectClass.instances()
            }
        }
        Dispatcher() {
            return this._dispatcher
        }
        UserScriptDispatcher() {
            return this._userScriptDispatcher
        }
        DispatchUserScriptEvent(e) {
            e.runtime = this.GetIRuntime();
            const shouldTime = this.IsDebug() && !this._eventSheetManager.IsInEventEngine();
            if (shouldTime) C3Debugger.StartMeasuringScriptTime();
            this._userScriptDispatcher.dispatchEvent(e);
            if (shouldTime) C3Debugger.AddScriptTime()
        }
        DispatchUserScriptEventAsyncWait(e) {
            e.runtime = this.GetIRuntime();
            return this._userScriptDispatcher.dispatchEventAndWaitAsync(e)
        }
        GetOriginalViewportWidth() {
            return this._originalViewportWidth
        }
        GetOriginalViewportHeight() {
            return this._originalViewportHeight
        }
        SetOriginalViewportSize(w, h) {
            if (this._originalViewportWidth === w && this._originalViewportHeight === h) return;
            this._originalViewportWidth =
                w;
            this._originalViewportHeight = h;
            const layoutManager = this.GetLayoutManager();
            layoutManager.SetAllLayerProjectionChanged();
            layoutManager.SetAllLayerMVChanged()
        }
        GetViewportWidth() {
            return this._viewportWidth
        }
        GetViewportHeight() {
            return this._viewportHeight
        }
        SetViewportSize(w, h) {
            if (this._viewportWidth === w && this._viewportHeight === h) return;
            this._viewportWidth = w;
            this._viewportHeight = h;
            const layoutManager = this.GetLayoutManager();
            layoutManager.SetAllLayerProjectionChanged();
            layoutManager.SetAllLayerMVChanged()
        }
        _SetDevicePixelRatio(r) {
            if (this.IsExportToVideo()) return;
            this._devicePixelRatio = r
        }
        GetDevicePixelRatio() {
            return this._devicePixelRatio
        }
        GetParallaxXOrigin() {
            return this._parallaxXorigin
        }
        GetParallaxYOrigin() {
            return this._parallaxYorigin
        }
        GetCanvasManager() {
            return this._canvasManager
        }
        GetDrawWidth() {
            if (!this._canvasManager) return this._viewportWidth;
            return this._canvasManager.GetDrawWidth()
        }
        GetDrawHeight() {
            if (!this._canvasManager) return this._viewportHeight;
            return this._canvasManager.GetDrawHeight()
        }
        GetRenderScale() {
            if (!this._canvasManager) return 1;
            return this._canvasManager.GetRenderScale()
        }
        GetDisplayScale() {
            if (!this._canvasManager) return 1;
            return this._canvasManager.GetDisplayScale()
        }
        GetEffectLayerScaleParam() {
            if (!this._canvasManager) return 1;
            return this._canvasManager.GetEffectLayerScaleParam()
        }
        GetEffectDevicePixelRatioParam() {
            if (!this._canvasManager) return 1;
            return this._canvasManager.GetEffectDevicePixelRatioParam()
        }
        GetCanvasClientX() {
            if (!this._canvasManager) return 0;
            return this._canvasManager.GetCanvasClientX()
        }
        GetCanvasClientY() {
            if (!this._canvasManager) return 0;
            return this._canvasManager.GetCanvasClientY()
        }
        GetCanvasCssWidth() {
            if (!this._canvasManager) return 0;
            return this._canvasManager.GetCssWidth()
        }
        GetCanvasCssHeight() {
            if (!this._canvasManager) return 0;
            return this._canvasManager.GetCssHeight()
        }
        GetFullscreenMode() {
            if (!this._canvasManager) return "off";
            return this._canvasManager.GetFullscreenMode()
        }
        GetAdditionalRenderTarget(opts) {
            if (!this._canvasManager) return null;
            return this._canvasManager.GetAdditionalRenderTarget(opts)
        }
        ReleaseAdditionalRenderTarget(renderTarget) {
            if (!this._canvasManager) return;
            this._canvasManager.ReleaseAdditionalRenderTarget(renderTarget)
        }
        UsesAnyBackgroundBlending() {
            return this._usesAnyBackgroundBlending
        }
        UsesAnyCrossSampling() {
            return this._usesAnyCrossSampling
        }
        UsesAnyDepthSampling() {
            return this._usesAnyDepthSampling
        }
        GetGPUUtilisation() {
            if (!this._canvasManager) return NaN;
            return this._canvasManager.GetGPUUtilisation()
        }
        IsLinearSampling() {
            return this.GetSampling() !== "nearest"
        }
        GetFramerateMode() {
            return this._framerateMode
        }
        GetCompositingMode() {
            return this._compositingMode
        }
        GetSampling() {
            return this._sampling
        }
        UsesLoaderLayout() {
            return this._usesLoaderLayout
        }
        GetLoadingLogoAsset() {
            return this._loadingLogoAsset
        }
        ReleaseLoadingLogoAsset() {
            if (this._loadingLogoAsset) {
                this._loadingLogoAsset.Release();
                this._loadingLogoAsset = null
            }
        }
        GetLayoutManager() {
            return this._layoutManager
        }
        GetMainRunningLayout() {
            return this._layoutManager.GetMainRunningLayout()
        }
        GetTimelineManager() {
            return this._timelineManager
        }
        GetTransitionManager() {
            return this._transitionManager
        }
        GetTemplateManager() {
            return this._templateManager
        }
        GetAssetManager() {
            return this._assetManager
        }
        LoadImage(opts) {
            return this._assetManager.LoadImage(opts)
        }
        CreateInstance(objectClass,
            layer, x, y, createHierarchy, templateName) {
            if (templateName && this._templateManager) {
                const templateData = this._templateManager.GetTemplateData(objectClass, templateName);
                if (templateData) {
                    const inst = this.CreateInstanceFromData(templateData, layer, false, x, y, false, createHierarchy, undefined, createHierarchy);
                    this._templateManager.MapInstanceToTemplateName(inst, templateName);
                    return inst
                }
            }
            return this.CreateInstanceFromData(objectClass, layer, false, x, y, false, createHierarchy, undefined, createHierarchy)
        }
        CreateInstanceFromData(instData_or_objectClass,
            layer, isStartupInstance, x, y, skipSiblings, createHierarchy, previousInstance, creatingHierarchy) {
            let instData = null;
            let objectClass = null;
            if (instData_or_objectClass instanceof C3.ObjectClass) {
                objectClass = instData_or_objectClass;
                if (objectClass.IsFamily()) {
                    const members = objectClass.GetFamilyMembers();
                    const i = Math.floor(this.Random() * members.length);
                    objectClass = members[i]
                }
                instData = objectClass.GetDefaultInstanceData()
            } else {
                instData = instData_or_objectClass;
                objectClass = this.GetObjectClassByIndex(instData[1])
            }
            const isWorld =
                objectClass.GetPlugin().IsWorldType();
            if (this._isLoading && isWorld && !objectClass.IsOnLoaderLayout()) return null;
            const originalLayer = layer;
            if (!isWorld) layer = null;
            let uid;
            if (isStartupInstance && !skipSiblings && instData && !this._instancesByUid.has(instData[2])) uid = instData[2];
            else uid = this._nextUid++;
            const worldData = instData ? instData[0] : null;
            const inst = C3.New(C3.Instance, {
                runtime: this,
                objectType: objectClass,
                layer: layer,
                worldData,
                instVarData: instData ? instData[3] : null,
                uid: uid
            });
            this._instancesByUid.set(uid,
                inst);
            let wi = null;
            if (isWorld) {
                wi = inst.GetWorldInfo();
                if (typeof x !== "undefined" && typeof y !== "undefined") {
                    wi.SetX(x);
                    wi.SetY(y)
                }
                objectClass._SetAnyCollisionCellChanged(true)
            }
            if (layer) {
                if (!creatingHierarchy) layer._AddInstance(inst, true);
                if (layer.GetParallaxX() !== 1 || layer.GetParallaxY() !== 1) objectClass._SetAnyInstanceParallaxed(true);
                layer.GetLayout().MaybeLoadTexturesFor(objectClass)
            }
            this._objectCount++;
            let needsSiblingCreation = true;
            if (previousInstance) {
                const previousObjectClass = previousInstance.GetObjectClass();
                if (previousObjectClass.IsInContainer() && objectClass.IsInContainer()) {
                    const container = objectClass.GetContainer();
                    const previousContainer = previousObjectClass.GetContainer();
                    if (container === previousContainer) needsSiblingCreation = false
                }
            }
            if (objectClass.IsInContainer() && !isStartupInstance && !skipSiblings && needsSiblingCreation) {
                for (const containerType of objectClass.GetContainer().objectTypes()) {
                    if (containerType === objectClass) continue;
                    const siblingInst = this.CreateInstanceFromData(containerType, originalLayer,
                        false, wi ? wi.GetX() : x, wi ? wi.GetY() : y, true, false, undefined, creatingHierarchy);
                    inst._AddSibling(siblingInst)
                }
                for (const s of inst.siblings()) {
                    s._AddSibling(inst);
                    for (const s2 of inst.siblings())
                        if (s !== s2) s._AddSibling(s2)
                }
            }
            if (isWorld && !isStartupInstance && !!createHierarchy) this._CreateChildInstancesFromData(inst, worldData, wi, layer, x, y, creatingHierarchy);
            if (objectClass.IsInContainer() && !isStartupInstance && !skipSiblings && !!createHierarchy)
                for (const sibling of inst.siblings()) {
                    const swi = sibling.GetWorldInfo();
                    if (!swi) continue;
                    const siblingPlugin = sibling.GetPlugin();
                    const sWorldData = sibling.GetObjectClass().GetDefaultInstanceData()[0];
                    if (siblingPlugin.IsWorldType()) this._CreateChildInstancesFromData(sibling, sWorldData, swi, layer, swi.GetX(), swi.GetY(), creatingHierarchy);
                    else this._CreateChildInstancesFromData(sibling, sWorldData, swi, layer, undefined, undefined, creatingHierarchy)
                }
            if (!skipSiblings && !!createHierarchy) {
                if (typeof x === "undefined") x = worldData[0];
                if (typeof y === "undefined") y = worldData[1];
                const pwi = wi.GetTopParent();
                const newX = x - wi.GetX() + pwi.GetX();
                const newY = y - wi.GetY() + pwi.GetY();
                pwi.SetXY(newX, newY)
            }
            objectClass._SetIIDsStale();
            const instPropertyData = instData ? C3.cloneArray(instData[5]) : null;
            const behPropertyData = instData ? instData[4].map(bp => C3.cloneArray(bp)) : null;
            const hasTilemap = isWorld && worldData && worldData[13];
            if (hasTilemap) inst._SetHasTilemap();
            inst._CreateSdkInstance(instPropertyData, behPropertyData);
            if (hasTilemap) {
                const tilemapData = worldData[13];
                inst.GetSdkInstance().LoadTilemapData(tilemapData[2],
                    tilemapData[0], tilemapData[1])
            }
            this._instancesPendingCreate.push(inst);
            this._hasPendingInstances = true;
            if (this.IsDebug()) C3Debugger.InstanceCreated(inst);
            return inst
        }
        _CreateChildInstancesFromData(parentInstance, parentWorldData, parentWorldInfo, layer, x, y, creatingHierarchy) {
            const parentZIndex = parentWorldInfo.GetSceneGraphZIndexExportData();
            const childrenData = parentWorldInfo.GetSceneGraphChildrenExportData();
            parentInstance.GetWorldInfo().SetSceneGraphZIndex(parentZIndex);
            if (!childrenData) return;
            if (typeof x ===
                "undefined") x = parentWorldData[0];
            if (typeof y === "undefined") y = parentWorldData[1];
            const sceneGraphSiblings = new Set;
            const parentX = parentWorldData[0];
            const parentY = parentWorldData[1];
            for (const childData of childrenData) {
                const childLayoutSID = childData[0];
                const childLayerIndex = childData[1];
                const childUID = childData[2];
                const childFlags = childData[3];
                const childIsInContainer = !!childData[4];
                const childZIndex = childData[5];
                const uniqueInstanceData = childData[6];
                let childInstData;
                if (uniqueInstanceData) childInstData =
                    uniqueInstanceData;
                else {
                    const layout = this._layoutManager.GetLayoutBySID(childLayoutSID);
                    const l = layout.GetLayer(childLayerIndex);
                    childInstData = l.GetInitialInstanceData(childUID)
                }
                const childObjectClass = this.GetObjectClassByIndex(childInstData[1]);
                const hasSibling = parentInstance.HasSibling(childObjectClass);
                const siblingProcessed = sceneGraphSiblings.has(childObjectClass);
                if (hasSibling && !siblingProcessed && childIsInContainer) {
                    const childInst = parentInstance.GetSibling(childObjectClass);
                    const childX = x + childInstData[0][0] -
                        parentX;
                    const childY = y + childInstData[0][1] - parentY;
                    childInst.GetWorldInfo().SetXY(childX, childY);
                    childInst.GetWorldInfo().SetSceneGraphZIndex(childZIndex);
                    parentInstance.AddChild(childInst, {
                        transformX: !!(childFlags >> 0 & 1),
                        transformY: !!(childFlags >> 1 & 1),
                        transformWidth: !!(childFlags >> 2 & 1),
                        transformHeight: !!(childFlags >> 3 & 1),
                        transformAngle: !!(childFlags >> 4 & 1),
                        destroyWithParent: !!(childFlags >> 5 & 1),
                        transformZElevation: !!(childFlags >> 6 & 1),
                        transformOpacity: !!(childFlags >> 7 & 1),
                        transformVisibility: !!(childFlags >>
                            8 & 1)
                    });
                    sceneGraphSiblings.add(childObjectClass)
                } else {
                    const childX = x + childInstData[0][0] - parentX;
                    const childY = y + childInstData[0][1] - parentY;
                    const childInst = this.CreateInstanceFromData(childInstData, layer, false, childX, childY, false, true, parentInstance, creatingHierarchy);
                    childInst.GetWorldInfo().SetSceneGraphZIndex(childZIndex);
                    parentInstance.AddChild(childInst, {
                        transformX: !!(childFlags >> 0 & 1),
                        transformY: !!(childFlags >> 1 & 1),
                        transformWidth: !!(childFlags >> 2 & 1),
                        transformHeight: !!(childFlags >> 3 & 1),
                        transformAngle: !!(childFlags >>
                            4 & 1),
                        destroyWithParent: !!(childFlags >> 5 & 1),
                        transformZElevation: !!(childFlags >> 6 & 1),
                        transformOpacity: !!(childFlags >> 7 & 1),
                        transformVisibility: !!(childFlags >> 8 & 1)
                    })
                }
            }
        }
        DestroyInstance(inst) {
            if (this._instancesToReleaseAtEndOfTick.has(inst)) return;
            const objectClass = inst.GetObjectClass();
            let s = this._instancesPendingDestroy.get(objectClass);
            if (s) {
                if (s.has(inst)) return;
                s.add(inst)
            } else {
                s = new Set;
                s.add(inst);
                this._instancesPendingDestroy.set(objectClass, s)
            }
            if (this.IsDebug()) C3Debugger.InstanceDestroyed(inst);
            inst._MarkDestroyed();
            this._hasPendingInstances = true;
            if (inst.IsInContainer())
                for (const s of inst.siblings()) this.DestroyInstance(s);
            for (const c of inst.children())
                if (c.GetDestroyWithParent()) this.DestroyInstance(c);
            if (!this._layoutManager.IsEndingLayout() && !this._isLoadingState) {
                const eventSheetManager = this.GetEventSheetManager();
                eventSheetManager.BlockFlushingInstances(true);
                inst._TriggerOnDestroyed();
                eventSheetManager.BlockFlushingInstances(false)
            }
            inst._FireDestroyedScriptEvents(this._layoutManager.IsEndingLayout())
        }
        FlushPendingInstances() {
            if (!this._hasPendingInstances) return;
            this._isFlushingPendingInstances = true;
            this._FlushInstancesPendingCreate();
            this._FlushInstancesPendingDestroy();
            this._isFlushingPendingInstances = false;
            this._hasPendingInstances = false;
            this.UpdateRender()
        }
        _FlushInstancesPendingCreate() {
            for (const inst of this._instancesPendingCreate) {
                const objectType = inst.GetObjectClass();
                objectType._AddInstance(inst);
                for (const family of objectType.GetFamilies()) {
                    family._AddInstance(inst);
                    family._SetIIDsStale()
                }
            }
            C3.clearArray(this._instancesPendingCreate)
        }
        _FlushInstancesPendingDestroy() {
            this._dispatcher.SetDelayRemoveEventsEnabled(true);
            for (const [objectClass, s] of this._instancesPendingDestroy.entries()) {
                this._FlushInstancesPendingDestroyForObjectClass(objectClass, s);
                s.clear()
            }
            this._instancesPendingDestroy.clear();
            this._dispatcher.SetDelayRemoveEventsEnabled(false)
        }
        _FlushInstancesPendingDestroyForObjectClass(objectClass, s) {
            for (const inst of s) {
                const instanceDestroyEvent = this._eventObjects["instancedestroy"];
                instanceDestroyEvent.instance = inst;
                this._dispatcher.dispatchEvent(instanceDestroyEvent);
                this._instancesByUid.delete(inst.GetUID());
                this._instanceTimes.delete(inst);
                const wi = inst.GetWorldInfo();
                if (wi) {
                    wi._RemoveFromCollisionCells();
                    wi._RemoveFromRenderCells();
                    wi._MarkDestroyed()
                }
                this._instancesToReleaseAtEndOfTick.add(inst);
                this._objectCount--
            }
            C3.arrayRemoveAllInSet(objectClass.GetInstances(), s);
            objectClass._SetIIDsStale();
            this._instancesToReleaseAffectedObjectClasses.add(objectClass);
            if (objectClass.GetInstances().length === 0) objectClass._SetAnyInstanceParallaxed(false);
            for (const family of objectClass.GetFamilies()) {
                C3.arrayRemoveAllInSet(family.GetInstances(),
                    s);
                family._SetIIDsStale();
                this._instancesToReleaseAffectedObjectClasses.add(family)
            }
            if (objectClass.GetPlugin().IsWorldType()) {
                const layers = new Set([...s].map(i => i.GetWorldInfo().GetLayer()));
                for (const layer of layers) layer._RemoveAllInstancesInSet(s)
            }
        }
        _GetInstancesPendingCreate() {
            return this._instancesPendingCreate
        }* instancesPendingCreateForObjectClass(objectClass) {
            for (const inst of this._GetInstancesPendingCreate())
                if (objectClass.IsFamily()) {
                    if (inst.GetObjectClass().BelongsToFamily(objectClass)) yield inst
                } else if (inst.GetObjectClass() ===
                objectClass) yield inst
        }
        _GetNewUID() {
            return this._nextUid++
        }
        _MapInstanceByUID(uid, inst) {
            this._instancesByUid.set(uid, inst)
        }
        _OnRendererContextLost() {
            this._dispatcher.dispatchEvent(C3.New(C3.Event, "renderercontextlost"));
            this.SetSuspended(true);
            for (const objectClass of this._allObjectClasses)
                if (!objectClass.IsFamily() && objectClass.HasLoadedTextures()) objectClass.ReleaseTextures();
            const runningLayout = this.GetMainRunningLayout();
            if (runningLayout) runningLayout._OnRendererContextLost();
            C3.ImageInfo.OnRendererContextLost();
            C3.ImageAsset.OnRendererContextLost()
        }
        async _OnRendererContextRestored() {
            await this.GetMainRunningLayout()._Load(null, this.GetRenderer());
            this._dispatcher.dispatchEvent(C3.New(C3.Event, "renderercontextrestored"));
            this.SetSuspended(false);
            this.UpdateRender()
        }
        _OnVisibilityChange(e) {
            this.SetSuspended(e["hidden"])
        }
        _OnWindowBlur(e) {
            if (!this.IsPreview() || !this._pauseOnBlur || C3.Platform.IsMobile) return;
            if (!e.data["parentHasFocus"]) {
                this.SetSuspended(true);
                this._isPausedOnBlur = true
            }
        }
        _OnWindowFocus() {
            if (!this._isPausedOnBlur) return;
            this.SetSuspended(false);
            this._isPausedOnBlur = false
        }
        _RequestAnimationFrame() {
            const tickCallbacks = this._tickCallbacks;
            if (this._framerateMode === "vsync") {
                if (this._rafId === -1) this._rafId = self.requestAnimationFrame(tickCallbacks.normal)
            } else if (this._framerateMode === "unlimited-tick") {
                if (this._ruafId === -1) this._ruafId = C3.RequestUnlimitedAnimationFrame(tickCallbacks.tickOnly);
                if (this._rafId === -1) this._rafId = self.requestAnimationFrame(tickCallbacks.renderOnly)
            } else if (this._ruafId === -1) this._ruafId = C3.RequestUnlimitedAnimationFrame(tickCallbacks.normal)
        }
        _CancelAnimationFrame() {
            if (this._rafId !==
                -1) {
                self.cancelAnimationFrame(this._rafId);
                this._rafId = -1
            }
            if (this._ruafId !== -1) {
                C3.CancelUnlimitedAnimationFrame(this._ruafId);
                this._ruafId = -1
            }
        }
        IsSuspended() {
            return this._suspendCount > 0
        }
        SetSuspended(s) {
            if (this.IsExportToVideo()) return;
            const wasSuspended = this.IsSuspended();
            this._suspendCount += s ? 1 : -1;
            if (this._suspendCount < 0) this._suspendCount = 0;
            const isSuspended = this.IsSuspended();
            if (!wasSuspended && isSuspended) {
                console.log("[Construct] Suspending");
                this._CancelAnimationFrame();
                this._dispatcher.dispatchEvent(C3.New(C3.Event,
                    "suspend"));
                this.Trigger(C3.Plugins.System.Cnds.OnSuspend, null, null)
            } else if (wasSuspended && !isSuspended) {
                console.log("[Construct] Resuming");
                const now = performance.now();
                this._lastTickTime = now;
                this._fpsLastTime = now;
                this._fpsFrameCount = 0;
                this._fps = 0;
                this._mainThreadTime = 0;
                this._mainThreadTimeCounter = 0;
                this._dispatcher.dispatchEvent(C3.New(C3.Event, "resume"));
                this.Trigger(C3.Plugins.System.Cnds.OnResume, null, null);
                if (!this.HitBreakpoint()) this.Tick(now)
            }
        }
        _AddBehInstToTick(behSdkInst) {
            this._behInstsToTick.Add(behSdkInst)
        }
        _AddBehInstToPostTick(behSdkInst) {
            this._behInstsToPostTick.Add(behSdkInst)
        }
        _AddBehInstToTick2(behSdkInst) {
            this._behInstsToTick2.Add(behSdkInst)
        }
        _RemoveBehInstToTick(behSdkInst) {
            this._behInstsToTick.Remove(behSdkInst)
        }
        _RemoveBehInstToPostTick(behSdkInst) {
            this._behInstsToPostTick.Remove(behSdkInst)
        }
        _RemoveBehInstToTick2(behSdkInst) {
            this._behInstsToTick2.Remove(behSdkInst)
        }
        _BehaviorTick() {
            this._behInstsToTick.SetQueueingEnabled(true);
            for (const bi of this._behInstsToTick) bi.Tick();
            this._behInstsToTick.SetQueueingEnabled(false)
        }
        _BehaviorPostTick() {
            this._behInstsToPostTick.SetQueueingEnabled(true);
            for (const bi of this._behInstsToPostTick) bi.PostTick();
            this._behInstsToPostTick.SetQueueingEnabled(false)
        }
        _BehaviorTick2() {
            this._behInstsToTick2.SetQueueingEnabled(true);
            for (const bi of this._behInstsToTick2) bi.Tick2();
            this._behInstsToTick2.SetQueueingEnabled(false)
        }* _DebugBehaviorTick() {
            this._behInstsToTick.SetQueueingEnabled(true);
            for (const bi of this._behInstsToTick) {
                const ret =
                    bi.Tick();
                if (C3.IsIterator(ret)) yield* ret
            }
            this._behInstsToTick.SetQueueingEnabled(false)
        }* _DebugBehaviorPostTick() {
            this._behInstsToPostTick.SetQueueingEnabled(true);
            for (const bi of this._behInstsToPostTick) {
                const ret = bi.PostTick();
                if (C3.IsIterator(ret)) yield* ret
            }
            this._behInstsToPostTick.SetQueueingEnabled(false)
        }* _DebugBehaviorTick2() {
            this._behInstsToTick2.SetQueueingEnabled(true);
            for (const bi of this._behInstsToTick2) {
                const ret = bi.Tick2();
                if (C3.IsIterator(ret)) yield* ret
            }
            this._behInstsToTick2.SetQueueingEnabled(false)
        }
        async Tick(timestamp,
            isDebugStep, mode) {
            this._hasStartedTicking = true;
            const isBackgroundWake = mode === "background-wake";
            const shouldRender = mode !== "background-wake" && mode !== "skip-render";
            if (!this._hasStarted || this.IsSuspended() && !isDebugStep && !isBackgroundWake) return;
            const startTime = performance.now();
            this._isInTick = true;
            this._MeasureDt(timestamp || 0);
            const beforePreTickRet = this.Step_BeforePreTick();
            if (this.IsDebugging()) await beforePreTickRet;
            const pretickRet = this._dispatcher.dispatchEventAndWait_AsyncOptional(this._eventObjects["pretick"]);
            if (pretickRet instanceof Promise) await pretickRet;
            const afterPreTickRet = this.Step_AfterPreTick();
            if (this.IsDebugging()) await afterPreTickRet;
            if (this._NeedsHandleSaveOrLoad()) await this._HandleSaveOrLoad();
            if (this.GetLayoutManager().IsPendingChangeMainLayout()) await this._MaybeChangeLayout();
            const runEventsRet = this.Step_RunEventsEtc();
            if (this.IsDebugging()) await runEventsRet;
            if (shouldRender) this.Render();
            if (this.IsExportToVideo()) {
                await this._ExportToVideoAddFrame();
                if (this.GetGameTime() >= this.GetExportVideoDuration()) {
                    this._ExportToVideoFinish();
                    return
                }
            }
            if (!this.IsSuspended() && !isBackgroundWake) this._RequestAnimationFrame();
            this._tickCount++;
            this._tickCountNoSave++;
            this._isInTick = false;
            this._mainThreadTimeCounter += performance.now() - startTime
        }
        async Step_BeforePreTick() {
            const eventSheetManager = this._eventSheetManager;
            const isDebug = this.IsDebug();
            this.FlushPendingInstances();
            eventSheetManager.BlockFlushingInstances(true);
            this.PushCurrentLayout(this.GetMainRunningLayout());
            if (isDebug) C3Debugger.StartMeasuringTime();
            if (this.IsDebugging()) await eventSheetManager.DebugRunScheduledWaits();
            else eventSheetManager.RunScheduledWaits();
            if (isDebug) C3Debugger.AddEventsTime();
            this.PopCurrentLayout();
            eventSheetManager.BlockFlushingInstances(false);
            this.FlushPendingInstances();
            eventSheetManager.BlockFlushingInstances(true)
        }
        async Step_AfterPreTick() {
            const isDebug = this.IsDebug();
            const isDebugging = this.IsDebugging();
            const dispatcher = this._dispatcher;
            const eventObjects = this._eventObjects;
            const userScriptEventObjects = this._userScriptEventObjects;
            if (isDebug) C3Debugger.StartMeasuringTime();
            if (isDebugging) await this.DebugIterateAndBreak(this._DebugBehaviorTick());
            else this._BehaviorTick();
            if (isDebugging) await this.DebugIterateAndBreak(this._DebugBehaviorPostTick());
            else this._BehaviorPostTick();
            if (isDebug) C3Debugger.AddBehaviorTickTime();
            if (isDebug) C3Debugger.StartMeasuringTime();
            if (isDebugging) await this.DebugFireGeneratorEventAndBreak(eventObjects["tick"]);
            else dispatcher.dispatchEvent(eventObjects["tick"]);
            if (isDebug) C3Debugger.AddPluginTickTime();
            this._eventSheetManager.BlockFlushingInstances(false);
            this.DispatchUserScriptEvent(userScriptEventObjects["tick"])
        }
        async Step_RunEventsEtc() {
            const eventSheetManager =
                this._eventSheetManager;
            const dispatcher = this._dispatcher;
            const eventObjects = this._eventObjects;
            const isDebug = this.IsDebug();
            const isDebugging = this.IsDebugging();
            if (isDebug) C3Debugger.StartMeasuringTime();
            if (isDebugging) await eventSheetManager.DebugRunEvents(this._layoutManager);
            else eventSheetManager.RunEvents(this._layoutManager);
            if (isDebug) C3Debugger.AddEventsTime();
            this._collisionEngine.ClearRegisteredCollisions();
            this._ReleaseInstancesAtEndOfTick();
            this._isLayoutFirstTick = false;
            eventSheetManager.BlockFlushingInstances(true);
            if (isDebug) C3Debugger.StartMeasuringTime();
            if (isDebugging) await this.DebugIterateAndBreak(this._DebugBehaviorTick2());
            else this._BehaviorTick2();
            if (isDebug) C3Debugger.AddBehaviorTickTime();
            if (isDebug) C3Debugger.StartMeasuringTime();
            if (isDebugging) await this.DebugFireGeneratorEventAndBreak(eventObjects["tick2"]);
            else dispatcher.dispatchEvent(eventObjects["tick2"]);
            if (isDebug) C3Debugger.AddPluginTickTime();
            eventSheetManager.BlockFlushingInstances(false);
            if (isDebugging) await eventSheetManager.RunQueuedDebugTriggersAsync()
        }
        _ReleaseInstancesAtEndOfTick() {
            if (this._instancesToReleaseAtEndOfTick.size ===
                0) return;
            const dispatcher = this._dispatcher;
            dispatcher.SetDelayRemoveEventsEnabled(true);
            for (const objectClass of this._instancesToReleaseAffectedObjectClasses) objectClass.GetSolStack().RemoveInstances(this._instancesToReleaseAtEndOfTick);
            this._instancesToReleaseAffectedObjectClasses.clear();
            this._eventSheetManager.RemoveInstancesFromScheduledWaits(this._instancesToReleaseAtEndOfTick);
            for (const inst of this._instancesToReleaseAtEndOfTick) inst.Release();
            this._instancesToReleaseAtEndOfTick.clear();
            dispatcher.SetDelayRemoveEventsEnabled(false)
        }
        async _MaybeChangeLayout() {
            const layoutManager =
                this.GetLayoutManager();
            let i = 0;
            while (layoutManager.IsPendingChangeMainLayout() && i++ < 10) await this._DoChangeLayout(layoutManager.GetPendingChangeMainLayout())
        }
        _MeasureDt(timestamp) {
            let dtRaw = 0;
            if (this.IsExportToVideo()) {
                dtRaw = 1 / this.GetExportVideoFramerate();
                this._dtRaw = dtRaw;
                this._dt1 = dtRaw
            } else if (this._lastTickTime !== 0) {
                const msDiff = Math.max(timestamp - this._lastTickTime, 0);
                dtRaw = msDiff / 1E3;
                if (dtRaw > .5) dtRaw = 0;
                this._dtRaw = dtRaw;
                const maxDt1 = 1 / this._minimumFramerate;
                this._dt1 = Math.min(dtRaw, maxDt1)
            }
            this._lastTickTime =
                timestamp;
            this._dt = this._dt1 * this._timeScale;
            this._gameTime.Add(this._dt);
            this._gameTimeRaw.Add(dtRaw * this._timeScale);
            this._wallTime.Add(this._dt1);
            for (const [inst, instTime] of this._instanceTimes) instTime.Add(this._dt1 * inst.GetTimeScale());
            if (this._canvasManager) this._canvasManager._UpdateTick();
            if (timestamp - this._fpsLastTime >= 1E3) {
                this._fpsLastTime += 1E3;
                if (timestamp - this._fpsLastTime >= 1E3) this._fpsLastTime = timestamp;
                this._fps = this._fpsFrameCount;
                this._fpsFrameCount = 0;
                this._mainThreadTime = Math.min(this._mainThreadTimeCounter /
                    1E3, 1);
                this._mainThreadTimeCounter = 0;
                if (this._canvasManager) this._canvasManager._Update1sFrameRange();
                this._collisionEngine._Update1sStats();
                if (this.IsDebug()) C3Debugger.Update1sPerfStats()
            }
            this._fpsFrameCount++
        }
        _SetTrackingInstanceTime(inst, enable) {
            if (enable) {
                if (!this._instanceTimes.has(inst)) {
                    const instTime = C3.New(C3.KahanSum);
                    instTime.Copy(this._gameTime);
                    this._instanceTimes.set(inst, instTime)
                }
            } else this._instanceTimes.delete(inst)
        }
        _GetInstanceGameTime(inst) {
            const instTime = this._instanceTimes.get(inst);
            return instTime ? instTime.Get() : this.GetGameTime()
        }
        async _DoChangeLayout(changeToLayout) {
            const dispatcher = this._dispatcher;
            const layoutManager = this.GetLayoutManager();
            const prevLayout = layoutManager.GetMainRunningLayout();
            await prevLayout._StopRunning();
            prevLayout._Unload(changeToLayout, this.GetRenderer());
            if (prevLayout === changeToLayout) this._eventSheetManager.ClearAllScheduledWaits();
            this._collisionEngine.ClearRegisteredCollisions();
            this._ReleaseInstancesAtEndOfTick();
            dispatcher.dispatchEvent(this._eventObjects["beforelayoutchange"]);
            C3.Asyncify.SetHighThroughputMode(true);
            await changeToLayout._Load(prevLayout, this.GetRenderer());
            C3.Asyncify.SetHighThroughputMode(false);
            await changeToLayout._StartRunning(false);
            dispatcher.dispatchEvent(this._eventObjects["layoutchange"]);
            this.UpdateRender();
            this._isLayoutFirstTick = true;
            this.FlushPendingInstances();
            this._ExportToVideoAddKeyframe()
        }
        UpdateRender() {
            this._needRender = true
        }
        GetWebGLRenderer() {
            if (!this._canvasManager) return null;
            return this._canvasManager.GetWebGLRenderer()
        }
        GetWebGPURenderer() {
            if (!this._canvasManager) return null;
            return this._canvasManager.GetWebGPURenderer()
        }
        GetRenderer() {
            if (!this._canvasManager) return null;
            return this._canvasManager.GetRenderer()
        }
        Render() {
            const canvasManager = this._canvasManager;
            if (!canvasManager || canvasManager.IsRendererContextLost()) return;
            const renderer = this.GetRenderer();
            const supportsGPUProfiling = renderer.SupportsGPUProfiling();
            const isWebGLProfiling = supportsGPUProfiling && renderer.IsWebGL();
            const isWebGPUProfiling = supportsGPUProfiling && renderer.IsWebGPU();
            if (isWebGLProfiling) renderer.CheckForQueryResults();
            if (!this._needRender && !this.IsExportToVideo()) {
                renderer.IncrementFrameNumber();
                return
            }
            const layout = this._layoutManager.GetMainRunningLayout();
            renderer.Start();
            const isDebug = this.IsDebug();
            if (isDebug) C3Debugger.StartMeasuringTime();
            this._needRender = false;
            let webglFrameQuery = null;
            if (isWebGLProfiling) {
                webglFrameQuery = canvasManager.GetGPUFrameTimingsBuffer().AddTimeElapsedQuery();
                renderer.StartQuery(webglFrameQuery)
            }
            let webgpuFrameTimings = null;
            if (isWebGPUProfiling) {
                webgpuFrameTimings = renderer.StartFrameTiming((1 +
                    layout.GetLayerCount()) * 2);
                renderer.WriteTimestamp(0)
            }
            if (this.Uses3DFeatures() && canvasManager.GetCurrentFullscreenScalingQuality() === "low") renderer.SetFixedSizeDepthBuffer(canvasManager.GetDrawWidth(), canvasManager.GetDrawHeight());
            else renderer.SetAutoSizeDepthBuffer();
            this._Render(this.GetRenderer(), layout);
            if (webglFrameQuery) renderer.EndQuery(webglFrameQuery);
            if (isWebGPUProfiling) {
                renderer.WriteTimestamp(1);
                this._canvasManager._AddWebGPUFrameTiming(webgpuFrameTimings)
            }
            renderer.Finish();
            if (isDebug) {
                C3Debugger.AddDrawCallsTime();
                C3Debugger.UpdateInspectHighlight()
            }
            if (canvasManager) canvasManager._MaybeTakeSnapshot()
        }
        _Render(renderer, layout) {
            renderer.SetTextureFillMode();
            renderer.SetAlphaBlend();
            renderer.SetColorRgba(1, 1, 1, 1);
            renderer.SetRenderTarget(null);
            renderer.SetTexture(null);
            renderer.SetDepthEnabled(this.Uses3DFeatures());
            layout.Draw(renderer)
        }
        Trigger(method, inst, behaviorType) {
            if (!this._hasStarted) return false;
            const isTopLevel = !this._isInTick && !this._eventSheetManager.IsInTrigger();
            let startTime = 0;
            if (isTopLevel) startTime =
                performance.now();
            const isDebug = this.IsDebug();
            if (isDebug) this.SetDebuggingEnabled(false);
            const ret = this._eventSheetManager._Trigger(this._layoutManager, method, inst, behaviorType);
            if (isTopLevel) {
                const triggerTime = performance.now() - startTime;
                this._mainThreadTimeCounter += triggerTime;
                if (isDebug) C3Debugger.AddTriggersTime(triggerTime)
            }
            if (isDebug) this.SetDebuggingEnabled(true);
            return ret
        }
        DebugTrigger(method, inst, behaviorType) {
            if (!this.IsDebug()) return this.Trigger(method, inst, behaviorType);
            if (this.HitBreakpoint()) throw new Error("called DebugTrigger() while stopped on breakpoint");
            if (!this._isInTick && !this._eventSheetManager.IsInTrigger()) throw new Error("called DebugTrigger() outside of event code - use TriggerAsync() instead");
            return this._eventSheetManager._DebugTrigger(this._layoutManager, method, inst, behaviorType)
        }
        async TriggerAsync(method, inst, behaviorType) {
            if (!this.IsDebugging()) return this.Trigger(method, inst, behaviorType);
            if (!this._hasStarted) return false;
            if (this.HitBreakpoint()) return this._eventSheetManager.QueueDebugTrigger(method, inst, behaviorType);
            if (!this.GetMainRunningLayout()) return this._eventSheetManager.QueueTrigger(method,
                inst, behaviorType);
            const startTime = performance.now();
            const iter = this._eventSheetManager._DebugTrigger(this._layoutManager, method, inst, behaviorType);
            let result = iter.next();
            while (!result.done) {
                await this.DebugBreak(result.value);
                result = iter.next()
            }
            if (!this.IsSuspended() && !this._eventSheetManager.IsInTrigger()) {
                await this._eventSheetManager.RunQueuedDebugTriggersAsync();
                if (this._hasStartedTicking && !this._isInTick) this._RequestAnimationFrame()
            }
            this._mainThreadTimeCounter += performance.now() - startTime;
            return result.value
        }
        FastTrigger(method, inst, value) {
            const isDebug = this.IsDebug();
            if (isDebug) this.SetDebuggingEnabled(false);
            const ret = this._eventSheetManager._FastTrigger(this._layoutManager, method, inst, value);
            if (isDebug) this.SetDebuggingEnabled(true);
            return ret
        }
        DebugFastTrigger(method, inst, value) {
            return this._eventSheetManager._DebugFastTrigger(this._layoutManager, method, inst, value)
        }
        ScheduleTriggers(f) {
            return this._scheduleTriggersThrottle.Add(f)
        }
        PushCurrentLayout(layout) {
            this._currentLayoutStack.push(layout)
        }
        PopCurrentLayout() {
            if (!this._currentLayoutStack.length) throw new Error("layout stack empty");
            this._currentLayoutStack.pop()
        }
        GetCurrentLayout() {
            if (!this._currentLayoutStack.length) return this.GetMainRunningLayout();
            return this._currentLayoutStack.at(-1)
        }
        GetDt(inst) {
            if (!inst || inst.GetTimeScale() === -1) return this._dt;
            return this._dt1 * inst.GetTimeScale()
        }
        _GetDtFast() {
            return this._dt
        }
        GetDt1() {
            return this._dt1
        }
        GetDtRaw() {
            return this._dtRaw
        }
        GetTimeScale() {
            return this._timeScale
        }
        SetTimeScale(ts) {
            if (isNaN(ts) || ts < 0) ts = 0;
            this._timeScale = ts
        }
        SetMinimumFramerate(fps) {
            this._minimumFramerate = C3.clamp(fps,
                1, 120)
        }
        GetMinimumFramerate() {
            return this._minimumFramerate
        }
        GetFPS() {
            return this._fps
        }
        GetMainThreadTime() {
            return this._mainThreadTime
        }
        GetStartTime() {
            return this._startTime
        }
        GetGameTime() {
            return this._gameTime.Get()
        }
        GetGameTimeRaw() {
            return this._gameTimeRaw.Get()
        }
        GetWallTime() {
            return this._wallTime.Get()
        }
        GetTickCount() {
            return this._tickCount
        }
        GetTickCountNoSave() {
            return this._tickCountNoSave
        }
        GetObjectCount() {
            return this._objectCount
        }
        GetProjectName() {
            return this._projectName
        }
        GetProjectVersion() {
            return this._projectVersion
        }
        GetProjectUniqueId() {
            return this._projectUniqueId
        }
        GetAppId() {
            return this._appId
        }
        GetInstanceByUID(uid) {
            if (this._isLoadingState) throw new Error("cannot call while loading state - wait until afterload event");
            return this._instancesByUid.get(uid) || null
        }
        _RefreshUidMap() {
            this._instancesByUid.clear();
            for (const objectClass of this._allObjectClasses) {
                if (objectClass.IsFamily()) continue;
                for (const inst of objectClass.GetInstances()) this._instancesByUid.set(inst.GetUID(), inst)
            }
        }
        IsPreview() {
            return this._exportType === "preview"
        }
        IsDebug() {
            return this._isDebug
        }
        GetExportType() {
            return this._exportType
        }
        IsCordova() {
            return this._exportType === "cordova"
        }
        IsAndroidWebView() {
            return C3.Platform.OS === "Android" && (this._exportType ===
                "cordova" || this._exportType === "playable-ad" || this._exportType === "instant-games")
        }
        IsiOSCordova() {
            return this._isiOSCordova
        }
        IsiOSWebView() {
            return this._isiOSWebView
        }
        GetCollisionEngine() {
            return this._collisionEngine
        }
        GetSolidBehavior() {
            return this._pluginManager.GetSolidBehavior()
        }
        GetJumpthruBehavior() {
            return this._pluginManager.GetJumpthruBehavior()
        }
        Uses3DFeatures() {
            return this._uses3dFeatures
        }
        GetZScaleFactor() {
            return this.GetRenderer().GetZAxisScaleFactor(this.GetViewportHeight())
        }
        GetDefaultCameraZ(viewH) {
            return this.GetRenderer().GetDefaultCameraZ(viewH ||
                this.GetViewportHeight())
        }
        IsLayoutFirstTick() {
            return this._isLayoutFirstTick
        }
        SetPixelRoundingEnabled(e) {
            e = !!e;
            if (this._isPixelRoundingEnabled === e) return;
            this._isPixelRoundingEnabled = e;
            this.GetLayoutManager().SetAllLayerMVChanged();
            this.UpdateRender()
        }
        IsPixelRoundingEnabled() {
            return this._isPixelRoundingEnabled
        }
        SaveToSlot(slotName) {
            this._saveToSlotName = slotName
        }
        LoadFromSlot(slotName) {
            this._loadFromSlotName = slotName
        }
        LoadFromJsonString(str) {
            this._loadFromJson = str
        }
        GetLastSaveJsonString() {
            return this._lastSaveJson
        }
        _NeedsHandleSaveOrLoad() {
            return !!(this._saveToSlotName ||
                this._loadFromSlotName || this._loadFromJson !== null)
        }
        async _HandleSaveOrLoad() {
            if (this._saveToSlotName) {
                this.FlushPendingInstances();
                await this._DoSaveToSlot(this._saveToSlotName);
                this._ClearSaveOrLoad()
            }
            if (this._loadFromSlotName) {
                await this._DoLoadFromSlot(this._loadFromSlotName);
                this._ClearSaveOrLoad();
                if (this.IsDebug()) C3Debugger.StepIfPausedInDebugger()
            }
            if (this._loadFromJson !== null) {
                this.FlushPendingInstances();
                try {
                    await this._DoLoadFromJsonString(this._loadFromJson);
                    this._lastSaveJson = this._loadFromJson;
                    await this.TriggerAsync(C3.Plugins.System.Cnds.OnLoadComplete, null);
                    this._lastSaveJson = ""
                } catch (err) {
                    console.error("[Construct] Failed to load state from JSON string: ", err);
                    await this.TriggerAsync(C3.Plugins.System.Cnds.OnLoadFailed, null)
                }
                this._ClearSaveOrLoad()
            }
        }
        _ClearSaveOrLoad() {
            this._saveToSlotName = "";
            this._loadFromSlotName = "";
            this._loadFromJson = null
        }
        _GetProjectStorage() {
            if (!this._projectStorage) this._projectStorage = localforage.createInstance({
                name: "c3-localstorage-" + this.GetProjectUniqueId(),
                description: this.GetProjectName()
            });
            return this._projectStorage
        }
        _GetSavegamesStorage() {
            if (!this._savegamesStorage) this._savegamesStorage = localforage.createInstance({
                name: "c3-savegames-" + this.GetProjectUniqueId(),
                description: this.GetProjectName()
            });
            return this._savegamesStorage
        }
        async _DoSaveToSlot(slotName) {
            const saveJson = await this._SaveToJsonString();
            try {
                await this._GetSavegamesStorage().setItem(slotName, saveJson);
                console.log("[Construct] Saved state to storage (" + saveJson.length + " chars)");
                this._lastSaveJson =
                    saveJson;
                await this.TriggerAsync(C3.Plugins.System.Cnds.OnSaveComplete, null);
                this._lastSaveJson = ""
            } catch (err) {
                console.error("[Construct] Failed to save state to storage: ", err);
                await this.TriggerAsync(C3.Plugins.System.Cnds.OnSaveFailed, null)
            }
        }
        async _DoLoadFromSlot(slotName) {
            try {
                const loadJson = await this._GetSavegamesStorage().getItem(slotName);
                if (!loadJson) throw new Error("empty slot");
                console.log("[Construct] Loaded state from storage (" + loadJson.length + " chars)");
                await this._DoLoadFromJsonString(loadJson);
                this._lastSaveJson = loadJson;
                await this.TriggerAsync(C3.Plugins.System.Cnds.OnLoadComplete, null);
                this._lastSaveJson = ""
            } catch (err) {
                console.error("[Construct] Failed to load state from storage: ", err);
                await this.TriggerAsync(C3.Plugins.System.Cnds.OnLoadFailed, null)
            }
        }
        async _SaveToJsonString() {
            const o = {
                "c3save": true,
                "version": 1,
                "rt": {
                    "time": this.GetGameTime(),
                    "timeRaw": this.GetGameTimeRaw(),
                    "walltime": this.GetWallTime(),
                    "timescale": this.GetTimeScale(),
                    "tickcount": this.GetTickCount(),
                    "next_uid": this._nextUid,
                    "running_layout": this.GetMainRunningLayout().GetSID(),
                    "start_time_offset": Date.now() - this._startTime
                },
                "types": {},
                "layouts": {},
                "events": this._eventSheetManager._SaveToJson(),
                "timelines": this._timelineManager._SaveToJson(),
                "user_script_data": null
            };
            for (const objectClass of this._allObjectClasses) {
                if (objectClass.IsFamily() || objectClass.HasNoSaveBehavior()) continue;
                o["types"][objectClass.GetSID().toString()] = objectClass._SaveToJson()
            }
            for (const layout of this._layoutManager.GetAllLayouts()) o["layouts"][layout.GetSID().toString()] =
                layout._SaveToJson();
            const saveEvent = this._CreateUserScriptEvent("save");
            saveEvent.saveData = null;
            await this.DispatchUserScriptEventAsyncWait(saveEvent);
            o["user_script_data"] = saveEvent.saveData;
            return JSON.stringify(o)
        }
        IsLoadingState() {
            return this._isLoadingState
        }
        async _DoLoadFromJsonString(jsonStr) {
            const layoutManager = this.GetLayoutManager();
            const o = JSON.parse(jsonStr);
            if (o["c2save"]) throw new Error("C2 saves are incompatible with C3 runtime");
            if (!o["c3save"]) throw new Error("not valid C3 save data");
            if (o["version"] > 1) throw new Error("C3 save data from future version");
            this._dispatcher.dispatchEvent(C3.New(C3.Event, "beforeload"));
            for (const inst of this.allInstances()) {
                const objectClass = inst.GetObjectClass();
                if (objectClass.HasNoSaveBehavior()) continue;
                inst._OnBeforeLoad()
            }
            const rt = o["rt"];
            this._gameTime.Set(rt["time"]);
            if (rt.hasOwnProperty("timeRaw")) this._gameTimeRaw.Set(rt["timeRaw"]);
            this._wallTime.Set(rt["walltime"]);
            this._timeScale = rt["timescale"];
            this._tickCount = rt["tickcount"];
            this._startTime =
                Date.now() - rt["start_time_offset"];
            const layoutSid = rt["running_layout"];
            this._isLoadingState = true;
            let changedLayout = false;
            if (layoutSid !== this.GetMainRunningLayout().GetSID()) {
                const changeToLayout = layoutManager.GetLayoutBySID(layoutSid);
                if (changeToLayout) {
                    await this._DoChangeLayout(changeToLayout);
                    changedLayout = true
                } else return
            }
            for (const [sidStr, data] of Object.entries(o["types"])) {
                const sid = parseInt(sidStr, 10);
                const objectClass = this.GetObjectClassBySID(sid);
                if (!objectClass || objectClass.IsFamily() ||
                    objectClass.HasNoSaveBehavior()) continue;
                objectClass._LoadFromJson(data)
            }
            this.FlushPendingInstances();
            this._RefreshUidMap();
            this._isLoadingState = false;
            if (changedLayout) {
                for (const inst of this.allInstances()) inst.SetupInitialSceneGraphConnections();
                for (const [sidStr, data] of Object.entries(o["types"])) {
                    const sid = parseInt(sidStr, 10);
                    const objectClass = this.GetObjectClassBySID(sid);
                    if (!objectClass || objectClass.IsFamily() || objectClass.HasNoSaveBehavior()) continue;
                    objectClass._SetupSceneGraphConnectionsOnChangeOfLayout(data)
                }
            }
            this._nextUid =
                rt["next_uid"];
            for (const [sidStr, data] of Object.entries(o["layouts"])) {
                const sid = parseInt(sidStr, 10);
                const layout = layoutManager.GetLayoutBySID(sid);
                if (!layout) continue;
                layout._LoadFromJson(data)
            }
            this._eventSheetManager._LoadFromJson(o["events"]);
            for (const objectClass of this._allObjectClasses) {
                if (objectClass.IsFamily() || !objectClass.IsInContainer()) continue;
                for (const inst of objectClass.GetInstances()) {
                    const iid = inst.GetIID();
                    for (const otherType of objectClass.GetContainer().objectTypes()) {
                        if (otherType ===
                            objectClass) continue;
                        const otherInstances = otherType.GetInstances();
                        if (iid < 0 || iid >= otherInstances.length) throw new Error("missing sibling instance");
                        inst._AddSibling(otherInstances[iid])
                    }
                }
            }
            this._timelineManager._LoadFromJson(o["timelines"]);
            layoutManager.SetAllLayerProjectionChanged();
            layoutManager.SetAllLayerMVChanged();
            this._dispatcher.dispatchEvent(C3.New(C3.Event, "afterload"));
            for (const [sidStr, data] of Object.entries(o["types"])) {
                const sid = parseInt(sidStr, 10);
                const objectClass = this.GetObjectClassBySID(sid);
                if (objectClass) objectClass._ClearLoadInstancesJson()
            }
            const loadEvent = this._CreateUserScriptEvent("load");
            loadEvent.saveData = o["user_script_data"];
            await this.DispatchUserScriptEventAsyncWait(loadEvent);
            this.UpdateRender()
        }
        async AddJobWorkerScripts(scripts) {
            const loadUrls = await Promise.all(scripts.map(async url => {
                const isCrossOrigin = C3.IsAbsoluteURL(url) && (new URL(url)).origin !== location.origin;
                const isCordovaFileProtocol = this.IsCordova() && this._assetManager.IsFileProtocol();
                if (isCrossOrigin || isCordovaFileProtocol ||
                    this.IsPreview() || this.GetExportType() === "playable-ad") {
                    const blob = await this._assetManager.FetchBlob(url);
                    return URL.createObjectURL(blob)
                } else if (C3.IsRelativeURL(url)) return (new URL(url, this._runtimeBaseUrl)).toString();
                else return url
            }));
            this._jobScheduler.ImportScriptsToJobWorkers(loadUrls)
        }
        AddJobWorkerBlob(blob, id) {
            this._jobScheduler.SendBlobToJobWorkers(blob, id)
        }
        AddJobWorkerBuffer(buffer, id) {
            this._jobScheduler.SendBufferToJobWorkers(buffer, id)
        }
        AddJob(type, params, transferables, maxWorkerNum) {
            return this._jobScheduler.AddJob(type,
                params, transferables, null, null, maxWorkerNum)
        }
        BroadcastJob(type, params, transferables, maxWorkerNum) {
            return this._jobScheduler.BroadcastJob(type, params, transferables, maxWorkerNum)
        }
        GetMaxNumJobWorkers() {
            return this._jobScheduler.GetMaxNumWorkers()
        }
        InvokeDownload(url, filename) {
            this.PostComponentMessageToDOM("runtime", "invoke-download", {
                "url": url,
                "filename": filename
            })
        }
        async RasterSvgImage(blob, imageWidth, imageHeight, surfaceWidth, surfaceHeight, imageBitmapOpts) {
            surfaceWidth = surfaceWidth || imageWidth;
            surfaceHeight =
                surfaceHeight || imageHeight;
            if (this.IsInWorker()) {
                const result = await this.PostComponentMessageToDOMAsync("runtime", "raster-svg-image", {
                    "blob": blob,
                    "imageWidth": imageWidth,
                    "imageHeight": imageHeight,
                    "surfaceWidth": surfaceWidth,
                    "surfaceHeight": surfaceHeight,
                    "imageBitmapOpts": imageBitmapOpts
                });
                return result["imageBitmap"]
            } else {
                const canvas = await self["C3_RasterSvgImageBlob"](blob, imageWidth, imageHeight, surfaceWidth, surfaceHeight);
                if (imageBitmapOpts) return await self.createImageBitmap(canvas, imageBitmapOpts);
                else return canvas
            }
        }
        async GetSvgImageSize(blob) {
            if (this.IsInWorker()) return await this.PostComponentMessageToDOMAsync("runtime", "get-svg-image-size", {
                "blob": blob
            });
            else return await self["C3_GetSvgImageSize"](blob)
        }
        RequestDeviceOrientationEvent() {
            if (this._didRequestDeviceOrientationEvent) return;
            this._didRequestDeviceOrientationEvent = true;
            this.PostComponentMessageToDOM("runtime", "enable-device-orientation")
        }
        RequestDeviceMotionEvent() {
            if (this._didRequestDeviceMotionEvent) return;
            this._didRequestDeviceMotionEvent =
                true;
            this.PostComponentMessageToDOM("runtime", "enable-device-motion")
        }
        Random() {
            return this._randomNumberCallback()
        }
        SetRandomNumberGeneratorCallback(f) {
            this._randomNumberCallback = f
        }
        _GetRemotePreviewStatusInfo() {
            const renderer = this.GetRenderer();
            return {
                "fps": this.GetFPS(),
                "cpu": this.GetMainThreadTime(),
                "gpu": this.GetGPUUtilisation(),
                "layout": this.GetMainRunningLayout() ? this.GetMainRunningLayout().GetName() : "",
                "renderer": renderer.IsWebGL() ? renderer.GetUnmaskedRenderer() : renderer.GetBasicAdapterInfoString()
            }
        }
        HitBreakpoint() {
            if (!this.IsDebug()) return false;
            return C3Debugger.HitBreakpoint()
        }
        DebugBreak(eventObject) {
            if (!this.IsDebugging()) return Promise.resolve();
            return C3Debugger.DebugBreak(eventObject)
        }
        DebugBreakNext() {
            if (!this.IsDebugging()) return false;
            return C3Debugger.BreakNext()
        }
        SetDebugBreakpointsEnabled(e) {
            this._breakpointsEnabled = !!e;
            this._UpdateDebuggingFlag()
        }
        AreDebugBreakpointsEnabled() {
            return this._breakpointsEnabled
        }
        IsDebugging() {
            return this._isDebugging
        }
        SetDebuggingEnabled(d) {
            if (d) this._debuggingDisabled--;
            else this._debuggingDisabled++;
            this._UpdateDebuggingFlag()
        }
        _UpdateDebuggingFlag() {
            this._isDebugging = this.IsDebug() && this._breakpointsEnabled && this._debuggingDisabled === 0
        }
        IsCPUProfiling() {
            return this.IsDebug() && C3Debugger.IsCPUProfiling()
        }
        IsGPUProfiling() {
            return this.IsDebug() && this.GetRenderer().SupportsGPUProfiling() && C3Debugger.IsGPUProfiling()
        }
        async DebugIterateAndBreak(iter) {
            if (!iter) return;
            for (const breakEventObject of iter) await this.DebugBreak(breakEventObject)
        }
        DebugFireGeneratorEventAndBreak(event) {
            return this.DebugIterateAndBreak(this._dispatcher.dispatchGeneratorEvent(event))
        }
        _InvokeFunctionFromJS(e) {
            return this._eventSheetManager._InvokeFunctionFromJS(e["name"],
                e["params"])
        }
        GetIRuntime() {
            return this._iRuntime
        }
        _CreateUserScriptEvent(name) {
            const e = C3.New(C3.Event, name, false);
            e.runtime = this._iRuntime;
            return e
        }
        _InitScriptInterfaces() {
            const objectDescriptors = {};
            for (const objectClass of this._allObjectClasses) objectDescriptors[objectClass.GetJsPropName()] = {
                value: objectClass.GetIObjectClass(),
                enumerable: true,
                writable: false
            };
            const objects = Object.create(Object.prototype, objectDescriptors);
            this._iRuntime = new self.IRuntime(this, objects);
            this._userScriptEventObjects = {
                "tick": this._CreateUserScriptEvent("tick")
            }
        }
        _InitGlobalVariableScriptInterface() {
            const globalVarDescriptors = {};
            for (const globalVar of this.GetEventSheetManager().GetAllGlobalVariables()) globalVarDescriptors[globalVar.GetJsPropName()] = globalVar._GetScriptInterfaceDescriptor();
            this._iRuntime._InitGlobalVars(globalVarDescriptors)
        }
        _GetCommonScriptInterfaces() {
            return this._commonScriptInterfaces
        }
        _MapScriptInterface(interface_, class_) {
            this._interfaceMap.set(interface_, class_)
        }
        _UnwrapScriptInterface(interface_) {
            return this._interfaceMap.get(interface_)
        }
        _UnwrapIObjectClass(iObjectClass) {
            if (!(iObjectClass instanceof self.IObjectClass)) throw new TypeError("expected IObjectClass");
            const objectClass = this._UnwrapScriptInterface(iObjectClass);
            if (!objectClass || !(objectClass instanceof C3.ObjectClass)) throw new Error("invalid IObjectClass");
            return objectClass
        }
        _UnwrapIWorldInstance(iinst) {
            if (!(iinst instanceof self.IWorldInstance)) throw new TypeError("expected IWorldInstance");
            const inst = this._UnwrapScriptInterface(iinst);
            if (!inst || !(inst instanceof C3.Instance)) throw new Error("invalid IInstance");
            return inst
        }
    };
    self["C3_CreateRuntime"] = C3.Runtime.Create;
    self["C3_InitRuntime"] = (runtime, opts) => runtime.Init(opts);

}

// workers/jobSchedulerRuntime.js
{
    'use strict';
    const C3 = self.C3;
    C3.JobSchedulerRuntime = class JobSchedulerRuntime extends C3.DefendedBase {
        constructor(runtime, data) {
            super();
            this._runtime = runtime;
            this._jobPromises = new Map;
            this._nextJobId = 0;
            this._inputPort = data["inputPort"];
            data["outputPort"].onmessage = e => this._OnJobWorkerMessage(e);
            this._maxNumWorkers = data["maxNumWorkers"];
            this._jobWorkerCount = 1;
            this._isCreatingWorker = false;
            this._hadErrorCreatingWorker = false
        }
        async Init() {}
        GetMaxNumWorkers() {
            return this._maxNumWorkers
        }
        ImportScriptsToJobWorkers(scripts) {
            this._inputPort.postMessage({
                "type": "_import_scripts",
                "scripts": scripts
            })
        }
        SendBlobToJobWorkers(blob,
            id) {
            this._inputPort.postMessage({
                "type": "_send_blob",
                "blob": blob,
                "id": id
            })
        }
        SendBufferToJobWorkers(buffer, id) {
            this._inputPort.postMessage({
                "type": "_send_buffer",
                "buffer": buffer,
                "id": id
            }, [buffer])
        }
        AddJob(type, params, transferables, progressHandler, abortDisposable, maxWorkerNum) {
            if (!transferables) transferables = [];
            if (typeof maxWorkerNum === "number") {
                maxWorkerNum = Math.floor(maxWorkerNum);
                if (maxWorkerNum <= 0) throw new Error("invalid maxWorkerNum");
            }
            const jobId = this._nextJobId++;
            const job = {
                "type": type,
                "isBroadcast": false,
                "maxWorkerNum": maxWorkerNum,
                "jobId": jobId,
                "params": params,
                "transferables": transferables
            };
            const promise = new Promise((resolve, reject) => {
                this._jobPromises.set(jobId, {
                    resolve: resolve,
                    progress: progressHandler,
                    reject: reject,
                    cancelled: false,
                    maxWorkerNum
                })
            });
            if (abortDisposable) abortDisposable.SetAction(() => this._CancelJob(jobId));
            this._inputPort.postMessage(job, transferables);
            this._MaybeCreateExtraWorker();
            return promise
        }
        BroadcastJob(type, params, transferables, maxWorkerNum) {
            if (!transferables) transferables = [];
            if (typeof maxWorkerNum === "number") {
                maxWorkerNum = Math.floor(maxWorkerNum);
                if (maxWorkerNum <= 0) throw new Error("invalid maxWorkerNum");
            }
            const jobId = this._nextJobId++;
            const job = {
                "type": type,
                "isBroadcast": true,
                "maxWorkerNum": maxWorkerNum,
                "jobId": jobId,
                "params": params,
                "transferables": transferables
            };
            this._inputPort.postMessage(job, transferables)
        }
        _CancelJob(jobId) {
            const job = this._jobPromises.get(jobId);
            if (job) {
                job.cancelled = true;
                job.resolve = null;
                job.progress = null;
                job.reject = null;
                this._inputPort.postMessage({
                    "type": "_cancel",
                    "jobId": jobId
                })
            }
        }
        _OnJobWorkerMessage(e) {
            const msg = e.data;
            const type = msg["type"];
            const id = msg["jobId"];
            switch (type) {
                case "result":
                    this._OnJobResult(id, msg["result"]);
                    break;
                case "progress":
                    this._OnJobProgress(id, msg["progress"]);
                    break;
                case "error":
                    this._OnJobError(id, msg["error"]);
                    break;
                case "ready":
                    this._OnJobWorkerReady();
                    break;
                default:
                    throw new Error(`unknown message from worker '${type}'`);
            }
        }
        _OnJobResult(jobId, result) {
            const p = this._jobPromises.get(jobId);
            if (!p) throw new Error("invalid job ID");
            if (!p.cancelled) p.resolve(result);
            this._jobPromises.delete(jobId)
        }
        _OnJobProgress(jobId, progress) {
            const p = this._jobPromises.get(jobId);
            if (!p) throw new Error("invalid job ID");
            if (!p.cancelled && p.progress) p.progress(progress)
        }
        _OnJobError(jobId, error) {
            const p = this._jobPromises.get(jobId);
            if (!p) throw new Error("invalid job ID");
            if (!p.cancelled) p.reject(error);
            this._jobPromises.delete(jobId)
        }
        _OnJobWorkerReady() {
            if (!this._isCreatingWorker) return;
            this._isCreatingWorker = false;
            this._jobWorkerCount++;
            if (this._jobWorkerCount <
                this._maxNumWorkers) this._MaybeCreateExtraWorker();
            else this._inputPort.postMessage({
                "type": "_no_more_workers"
            })
        }
        _GetWorkerCountNeededForPendingJobs() {
            let needWorkerCount = 0;
            const sortedJobList = [...this._jobPromises.values()].sort((a, b) => {
                const an = a.maxWorkerNum || Infinity;
                const bn = b.maxWorkerNum || Infinity;
                return an - bn
            });
            for (const job of sortedJobList) {
                const maxWorkerNum = job.maxWorkerNum || Infinity;
                if (needWorkerCount < maxWorkerNum) needWorkerCount++
            }
            return needWorkerCount
        }
        async _MaybeCreateExtraWorker() {
            if (this._jobWorkerCount >=
                this._maxNumWorkers || this._isCreatingWorker || this._hadErrorCreatingWorker || this._GetWorkerCountNeededForPendingJobs() <= this._jobWorkerCount) return;
            try {
                this._isCreatingWorker = true;
                const result = await this._runtime.PostComponentMessageToDOMAsync("runtime", "create-job-worker");
                result["outputPort"].onmessage = e => this._OnJobWorkerMessage(e)
            } catch (err) {
                this._hadErrorCreatingWorker = true;
                this._isCreatingWorker = false;
                console.error(`[Construct] Failed to create job worker; stopping creating any more (created ${this._jobWorkerCount} so far)`,
                    err)
            }
        }
    };

}

{
    self["C3_Shaders"] = {};
    self["C3_Shaders"]["inverse"] = {
        glsl: "varying mediump vec2 vTex;\nuniform lowp sampler2D samplerFront;\nuniform lowp float intensity;\nvoid main(void)\n{\nlowp vec4 front = texture2D(samplerFront, vTex);\nlowp vec3 inverse = vec3(front.a - front.rgb);\ngl_FragColor = vec4(mix(front.rgb, inverse, intensity), front.a);\n}",
        glslWebGL2: "",
        wgsl: "%%SAMPLERFRONT_BINDING%% var samplerFront : sampler;\n%%TEXTUREFRONT_BINDING%% var textureFront : texture_2d<f32>;\nstruct ShaderParams {\nintensity : f32\n};\n%%SHADERPARAMS_BINDING%% var<uniform> shaderParams : ShaderParams;\n%%FRAGMENTINPUT_STRUCT%%\n%%FRAGMENTOUTPUT_STRUCT%%\n@fragment\nfn main(input : FragmentInput) -> FragmentOutput\n{\nvar front : vec4<f32> = textureSample(textureFront, samplerFront, input.fragUV);\nvar inverse : vec3<f32> = vec3<f32>(front.a) - front.rgb;\nvar output : FragmentOutput;\noutput.color = vec4<f32>(mix(front.rgb, inverse, shaderParams.intensity), front.a);\nreturn output;\n}",
        blendsBackground: false,
        usesDepth: false,
        extendBoxHorizontal: 0,
        extendBoxVertical: 0,
        crossSampling: false,
        mustPreDraw: false,
        preservesOpaqueness: true,
        animated: false,
        parameters: [
            ["intensity", 0, "percent"]
        ]
    };
    self["C3_Shaders"]["tint"] = {
        glsl: "varying mediump vec2 vTex;\nuniform lowp sampler2D samplerFront;\nuniform lowp vec3 tintColor;\nvoid main(void)\n{\nlowp vec4 front = texture2D(samplerFront, vTex);\ngl_FragColor = front * vec4(tintColor.r, tintColor.g, tintColor.b, 1.0);\n}",
        glslWebGL2: "",
        wgsl: "%%SAMPLERFRONT_BINDING%% var samplerFront : sampler;\n%%TEXTUREFRONT_BINDING%% var textureFront : texture_2d<f32>;\nstruct ShaderParams {\ntintColor : vec3<f32>\n};\n%%SHADERPARAMS_BINDING%% var<uniform> shaderParams : ShaderParams;\n%%FRAGMENTINPUT_STRUCT%%\n%%FRAGMENTOUTPUT_STRUCT%%\n@fragment\nfn main(input : FragmentInput) -> FragmentOutput {\nvar front : vec4<f32> = textureSample(textureFront, samplerFront, input.fragUV);\nvar output : FragmentOutput;\noutput.color = front * vec4<f32>(shaderParams.tintColor, 1.0);\nreturn output;\n}",
        blendsBackground: false,
        usesDepth: false,
        extendBoxHorizontal: 0,
        extendBoxVertical: 0,
        crossSampling: false,
        mustPreDraw: false,
        preservesOpaqueness: true,
        animated: false,
        parameters: [
            ["tintColor", 0, "color"]
        ]
    };
    self["C3_Shaders"]["hardlight"] = {
        glsl: "varying mediump vec2 vTex;\nuniform lowp sampler2D samplerFront;\nuniform mediump vec2 srcStart;\nuniform mediump vec2 srcEnd;\nuniform lowp sampler2D samplerBack;\nuniform mediump vec2 destStart;\nuniform mediump vec2 destEnd;\nvoid main(void)\n{\nlowp vec4 front = texture2D(samplerFront, vTex);\nmediump vec2 tex = (vTex - srcStart) / (srcEnd - srcStart);\nlowp vec4 back = texture2D(samplerBack, mix(destStart, destEnd, tex));\nif (front.r * 0.299 + front.g * 0.587 + front.b * 0.114 <= 0.5)\n{\nfront *= back * 2.0;\n}\nelse\n{\nfront.rgb = 1.0 - ((1.0 - (2.0 * front.rgb - 1.0)) * (1.0 - back.rgb * front.a));\n}\ngl_FragColor = front;\n}",
        glslWebGL2: "",
        wgsl: "%%SAMPLERFRONT_BINDING%% var samplerFront : sampler;\n%%TEXTUREFRONT_BINDING%% var textureFront : texture_2d<f32>;\n%%SAMPLERBACK_BINDING%% var samplerBack : sampler;\n%%TEXTUREBACK_BINDING%% var textureBack : texture_2d<f32>;\n%%C3_UTILITY_FUNCTIONS%%\n%%FRAGMENTINPUT_STRUCT%%\n%%FRAGMENTOUTPUT_STRUCT%%\n@fragment\nfn main(input : FragmentInput) -> FragmentOutput\n{\nvar front : vec4<f32> = textureSample(textureFront, samplerFront, input.fragUV);\nvar back : vec4<f32> = textureSample(textureBack, samplerBack, c3_getBackUV(input.fragPos.xy, textureBack));\nvar output : FragmentOutput;\noutput.color = select(\nvec4<f32>(\n1.0 - ((1.0 - (2.0 * front.rgb - 1.0)) * (1.0 - back.rgb * front.a)),\nfront.a\n),\nfront * back * 2.0,\nc3_grayscale(front.rgb) <= 0.5\n);\nreturn output;\n}",
        blendsBackground: true,
        usesDepth: false,
        extendBoxHorizontal: 0,
        extendBoxVertical: 0,
        crossSampling: false,
        mustPreDraw: false,
        preservesOpaqueness: false,
        animated: false,
        parameters: []
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        let cacheRegex = null;
        let lastRegex = "";
        let lastFlags = "";
        let regexMatches = [];
        let lastMatchesStr = "";
        let lastMatchesRegex = "";
        let lastMatchesFlags = "";
        const forEachStack = C3.New(C3.ArrayStack);

        function ForEachOrdered_SortInstances(a, b) {
            const va = a[1];
            const vb = b[1];
            if (typeof va === "number" && typeof vb === "number") return va - vb;
            else {
                const sa = "" + va;
                const sb = "" + vb;
                if (sa < sb) return -1;
                else if (sa > sb) return 1;
                else return 0
            }
        }
        C3.Plugins.System = class SystemPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts);
                this._loopStack = this._runtime.GetEventSheetManager().GetLoopStack();
                this._eventStack = this._runtime.GetEventSheetManager().GetEventStack();
                this._imagesLoadingTotal = 0;
                this._imagesLoadingComplete = 0;
                this._functionMaps = new Map;
                this._signalTags = []
            }
            Release() {
                super.Release()
            }
            UpdateRender() {
                this._runtime.UpdateRender()
            }
            Trigger(method) {
                this._runtime.Trigger(method, null, null)
            }
            GetRegex(regex, flags) {
                if (!cacheRegex || regex !== lastRegex || flags !== lastFlags) {
                    cacheRegex = new RegExp(regex, flags);
                    lastRegex = regex;
                    lastFlags =
                        flags
                }
                cacheRegex.lastIndex = 0;
                return cacheRegex
            }
            GetRegexMatches(str, regex, flags) {
                if (str === lastMatchesStr && regex === lastMatchesRegex && flags === lastMatchesFlags) return regexMatches;
                const cacheRegex = this.GetRegex(regex, flags);
                regexMatches = str.match(cacheRegex);
                lastMatchesStr = str;
                lastMatchesRegex = regex;
                lastMatchesFlags = flags;
                return regexMatches
            }
            async _LoadTexturesForObjectClasses(layout, objectClasses) {
                if (!objectClasses.length) return;
                this._imagesLoadingTotal += objectClasses.length;
                const promises = [];
                for (const oc of objectClasses) promises.push(layout.MaybeLoadTexturesFor(oc));
                await C3.PromiseAllWithProgress(promises, () => {
                    this._imagesLoadingComplete++
                });
                this._imagesLoadingComplete++;
                if (this._imagesLoadingComplete === this._imagesLoadingTotal) {
                    this._imagesLoadingComplete = 0;
                    this._imagesLoadingTotal = 0;
                    this._runtime.Trigger(C3.Plugins.System.Cnds.OnImageLoadingComplete, null, null)
                }
            }
            _UnloadTexturesForObjectClasses(layout, objectClasses) {
                for (const oc of objectClasses)
                    if (oc.GetInstanceCount() === 0) layout.MaybeUnloadTexturesFor(oc)
            }
            _GetForEachStack() {
                return forEachStack
            }
            _Repeat(count) {
                const eventSheetManager =
                    this._runtime.GetEventSheetManager();
                const eventStack = eventSheetManager.GetEventStack();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const currentEvent = oldFrame.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiers();
                const isSolModifierAfterCnds = oldFrame.IsSolModifierAfterCnds();
                const newFrame = eventStack.Push(currentEvent);
                const loopStack = eventSheetManager.GetLoopStack();
                const loop = loopStack.Push();
                loop.SetEnd(count);
                if (isSolModifierAfterCnds)
                    for (let i = 0; i < count && !loop.IsStopped(); ++i) {
                        eventSheetManager.PushCopySol(solModifiers);
                        loop.SetIndex(i);
                        currentEvent.Retrigger(oldFrame, newFrame);
                        eventSheetManager.PopSol(solModifiers)
                    } else
                        for (let i = 0; i < count && !loop.IsStopped(); ++i) {
                            loop.SetIndex(i);
                            currentEvent.Retrigger(oldFrame, newFrame)
                        }
                eventStack.Pop();
                loopStack.Pop();
                return false
            }* _DebugRepeat(count) {
                const eventSheetManager = this._runtime.GetEventSheetManager();
                const eventStack = eventSheetManager.GetEventStack();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const currentEvent = oldFrame.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiers();
                const isSolModifierAfterCnds = oldFrame.IsSolModifierAfterCnds();
                const newFrame = eventStack.Push(currentEvent);
                const loopStack = eventSheetManager.GetLoopStack();
                const loop = loopStack.Push();
                loop.SetEnd(count);
                if (isSolModifierAfterCnds)
                    for (let i = 0; i < count && !loop.IsStopped(); ++i) {
                        eventSheetManager.PushCopySol(solModifiers);
                        loop.SetIndex(i);
                        yield* currentEvent.DebugRetrigger(oldFrame, newFrame);
                        eventSheetManager.PopSol(solModifiers)
                    } else
                        for (let i = 0; i < count && !loop.IsStopped(); ++i) {
                            loop.SetIndex(i);
                            yield* currentEvent.DebugRetrigger(oldFrame,
                                newFrame)
                        }
                eventStack.Pop();
                loopStack.Pop();
                return false
            }
            _While() {
                const eventSheetManager = this._runtime.GetEventSheetManager();
                const eventStack = eventSheetManager.GetEventStack();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const currentEvent = oldFrame.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiers();
                const isSolModifierAfterCnds = oldFrame.IsSolModifierAfterCnds();
                const newFrame = eventStack.Push(currentEvent);
                const loopStack = eventSheetManager.GetLoopStack();
                const loop = loopStack.Push();
                if (isSolModifierAfterCnds)
                    for (let i = 0; !loop.IsStopped(); ++i) {
                        eventSheetManager.PushCopySol(solModifiers);
                        loop.SetIndex(i);
                        if (!currentEvent.Retrigger(oldFrame, newFrame)) loop.Stop();
                        eventSheetManager.PopSol(solModifiers)
                    } else
                        for (let i = 0; !loop.IsStopped(); ++i) {
                            loop.SetIndex(i);
                            if (!currentEvent.Retrigger(oldFrame, newFrame)) loop.Stop()
                        }
                eventStack.Pop();
                loopStack.Pop();
                return false
            }* _DebugWhile() {
                const eventSheetManager = this._runtime.GetEventSheetManager();
                const eventStack = eventSheetManager.GetEventStack();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const currentEvent = oldFrame.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiers();
                const isSolModifierAfterCnds = oldFrame.IsSolModifierAfterCnds();
                const newFrame = eventStack.Push(currentEvent);
                const loopStack = eventSheetManager.GetLoopStack();
                const loop = loopStack.Push();
                if (isSolModifierAfterCnds)
                    for (let i = 0; !loop.IsStopped(); ++i) {
                        eventSheetManager.PushCopySol(solModifiers);
                        loop.SetIndex(i);
                        const ret = yield* currentEvent.DebugRetrigger(oldFrame,
                            newFrame);
                        if (!ret) loop.Stop();
                        eventSheetManager.PopSol(solModifiers)
                    } else
                        for (let i = 0; !loop.IsStopped(); ++i) {
                            loop.SetIndex(i);
                            const ret = yield* currentEvent.DebugRetrigger(oldFrame, newFrame);
                            if (!ret) loop.Stop()
                        }
                eventStack.Pop();
                loopStack.Pop();
                return false
            }
            _For(name, start, end) {
                const eventSheetManager = this._runtime.GetEventSheetManager();
                const eventStack = eventSheetManager.GetEventStack();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const currentEvent = oldFrame.GetCurrentEvent();
                const solModifiers =
                    currentEvent.GetSolModifiers();
                const isSolModifierAfterCnds = oldFrame.IsSolModifierAfterCnds();
                const newFrame = eventStack.Push(currentEvent);
                const loopStack = eventSheetManager.GetLoopStack();
                const loop = loopStack.Push();
                loop.SetName(name);
                loop.SetEnd(end);
                if (end < start)
                    if (isSolModifierAfterCnds)
                        for (let i = start; i >= end && !loop.IsStopped(); --i) {
                            eventSheetManager.PushCopySol(solModifiers);
                            loop.SetIndex(i);
                            currentEvent.Retrigger(oldFrame, newFrame);
                            eventSheetManager.PopSol(solModifiers)
                        } else
                            for (let i = start; i >=
                                end && !loop.IsStopped(); --i) {
                                loop.SetIndex(i);
                                currentEvent.Retrigger(oldFrame, newFrame)
                            } else if (isSolModifierAfterCnds)
                                for (let i = start; i <= end && !loop.IsStopped(); ++i) {
                                    eventSheetManager.PushCopySol(solModifiers);
                                    loop.SetIndex(i);
                                    currentEvent.Retrigger(oldFrame, newFrame);
                                    eventSheetManager.PopSol(solModifiers)
                                } else
                                    for (let i = start; i <= end && !loop.IsStopped(); ++i) {
                                        loop.SetIndex(i);
                                        currentEvent.Retrigger(oldFrame, newFrame)
                                    }
                eventStack.Pop();
                loopStack.Pop();
                return false
            }* _DebugFor(name, start, end) {
                const eventSheetManager =
                    this._runtime.GetEventSheetManager();
                const eventStack = eventSheetManager.GetEventStack();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const currentEvent = oldFrame.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiers();
                const isSolModifierAfterCnds = oldFrame.IsSolModifierAfterCnds();
                const newFrame = eventStack.Push(currentEvent);
                const loopStack = eventSheetManager.GetLoopStack();
                const loop = loopStack.Push();
                loop.SetName(name);
                loop.SetEnd(end);
                if (end < start)
                    if (isSolModifierAfterCnds)
                        for (let i =
                                start; i >= end && !loop.IsStopped(); --i) {
                            eventSheetManager.PushCopySol(solModifiers);
                            loop.SetIndex(i);
                            yield* currentEvent.DebugRetrigger(oldFrame, newFrame);
                            eventSheetManager.PopSol(solModifiers)
                        } else
                            for (let i = start; i >= end && !loop.IsStopped(); --i) {
                                loop.SetIndex(i);
                                yield* currentEvent.DebugRetrigger(oldFrame, newFrame)
                            } else if (isSolModifierAfterCnds)
                                for (let i = start; i <= end && !loop.IsStopped(); ++i) {
                                    eventSheetManager.PushCopySol(solModifiers);
                                    loop.SetIndex(i);
                                    yield* currentEvent.DebugRetrigger(oldFrame, newFrame);
                                    eventSheetManager.PopSol(solModifiers)
                                } else
                                    for (let i = start; i <= end && !loop.IsStopped(); ++i) {
                                        loop.SetIndex(i);
                                        yield* currentEvent.DebugRetrigger(oldFrame, newFrame)
                                    }
                eventStack.Pop();
                loopStack.Pop();
                return false
            }
            _ForEach(objectClass) {
                const eventSheetManager = this._runtime.GetEventSheetManager();
                const eventStack = eventSheetManager.GetEventStack();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const currentEvent = oldFrame.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiers();
                const isSolModifierAfterCnds =
                    oldFrame.IsSolModifierAfterCnds();
                const newFrame = eventStack.Push(currentEvent);
                const loopStack = eventSheetManager.GetLoopStack();
                const loop = loopStack.Push();
                const isInContainer = objectClass.IsInContainer();
                const sol = objectClass.GetCurrentSol();
                const instances = forEachStack.Push();
                C3.shallowAssignArray(instances, sol.GetInstances());
                loop.SetEnd(instances.length);
                if (isSolModifierAfterCnds)
                    for (let i = 0, len = instances.length; i < len && !loop.IsStopped(); ++i) {
                        eventSheetManager.PushCopySol(solModifiers);
                        const inst =
                            instances[i];
                        objectClass.GetCurrentSol().SetSinglePicked(inst);
                        if (isInContainer) inst.SetSiblingsSinglePicked();
                        loop.SetIndex(i);
                        currentEvent.Retrigger(oldFrame, newFrame);
                        eventSheetManager.PopSol(solModifiers)
                    } else {
                        sol._SetSelectAll(false);
                        const solInstances = sol._GetOwnInstances();
                        C3.clearArray(solInstances);
                        solInstances.push(null);
                        for (let i = 0, len = instances.length; i < len && !loop.IsStopped(); ++i) {
                            const inst = instances[i];
                            solInstances[0] = inst;
                            if (isInContainer) inst.SetSiblingsSinglePicked();
                            loop.SetIndex(i);
                            currentEvent.Retrigger(oldFrame, newFrame)
                        }
                    }
                eventStack.Pop();
                loopStack.Pop();
                C3.clearArray(instances);
                forEachStack.Pop();
                return false
            }* _DebugForEach(objectClass) {
                const eventSheetManager = this._runtime.GetEventSheetManager();
                const eventStack = eventSheetManager.GetEventStack();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const currentEvent = oldFrame.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiers();
                const isSolModifierAfterCnds = oldFrame.IsSolModifierAfterCnds();
                const newFrame = eventStack.Push(currentEvent);
                const loopStack = eventSheetManager.GetLoopStack();
                const loop = loopStack.Push();
                const isInContainer = objectClass.IsInContainer();
                const sol = objectClass.GetCurrentSol();
                const instances = forEachStack.Push();
                C3.shallowAssignArray(instances, sol.GetInstances());
                loop.SetEnd(instances.length);
                if (isSolModifierAfterCnds)
                    for (let i = 0, len = instances.length; i < len && !loop.IsStopped(); ++i) {
                        eventSheetManager.PushCopySol(solModifiers);
                        const inst = instances[i];
                        objectClass.GetCurrentSol().SetSinglePicked(inst);
                        if (isInContainer) inst.SetSiblingsSinglePicked();
                        loop.SetIndex(i);
                        yield* currentEvent.DebugRetrigger(oldFrame, newFrame);
                        eventSheetManager.PopSol(solModifiers)
                    } else {
                        sol._SetSelectAll(false);
                        const solInstances = sol._GetOwnInstances();
                        C3.clearArray(solInstances);
                        solInstances.push(null);
                        for (let i = 0, len = instances.length; i < len && !loop.IsStopped(); ++i) {
                            const inst = instances[i];
                            solInstances[0] = inst;
                            if (isInContainer) inst.SetSiblingsSinglePicked();
                            loop.SetIndex(i);
                            yield* currentEvent.DebugRetrigger(oldFrame, newFrame)
                        }
                    }
                eventStack.Pop();
                loopStack.Pop();
                C3.clearArray(instances);
                forEachStack.Pop();
                return false
            }
            _ForEachOrdered(objectClass, order) {
                const eventSheetManager = this._runtime.GetEventSheetManager();
                const eventStack = eventSheetManager.GetEventStack();
                const cnd = eventSheetManager.GetCurrentCondition();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const currentEvent = oldFrame.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiers();
                const isSolModifierAfterCnds = oldFrame.IsSolModifierAfterCnds();
                const newFrame = eventStack.Push(currentEvent);
                const loopStack = eventSheetManager.GetLoopStack();
                const loop = loopStack.Push();
                const isInContainer = objectClass.IsInContainer();
                const sol = objectClass.GetCurrentSol();
                const instancesData = forEachStack.Push();
                C3.clearArray(instancesData);
                const iterInstances = sol.GetInstances();
                loop.SetEnd(iterInstances.length);
                for (let i = 0, len = iterInstances.length; i < len; ++i) instancesData.push([iterInstances[i], cnd.ReevaluateParameter(1, i)]);
                instancesData.sort(ForEachOrdered_SortInstances);
                if (order === 1) instancesData.reverse();
                if (isSolModifierAfterCnds)
                    for (let i = 0, len = instancesData.length; i <
                        len && !loop.IsStopped(); ++i) {
                        eventSheetManager.PushCopySol(solModifiers);
                        const inst = instancesData[i][0];
                        objectClass.GetCurrentSol().SetSinglePicked(inst);
                        if (isInContainer) inst.SetSiblingsSinglePicked();
                        loop.SetIndex(i);
                        currentEvent.Retrigger(oldFrame, newFrame);
                        eventSheetManager.PopSol(solModifiers)
                    } else {
                        sol._SetSelectAll(false);
                        const solInstances = sol._GetOwnInstances();
                        C3.clearArray(solInstances);
                        solInstances.push(null);
                        for (let i = 0, len = instancesData.length; i < len && !loop.IsStopped(); ++i) {
                            const inst =
                                instancesData[i][0];
                            solInstances[0] = inst;
                            if (isInContainer) inst.SetSiblingsSinglePicked();
                            loop.SetIndex(i);
                            currentEvent.Retrigger(oldFrame, newFrame)
                        }
                    }
                eventStack.Pop();
                loopStack.Pop();
                C3.clearArray(instancesData);
                forEachStack.Pop();
                return false
            }* _DebugForEachOrdered(objectClass, order) {
                const eventSheetManager = this._runtime.GetEventSheetManager();
                const eventStack = eventSheetManager.GetEventStack();
                const cnd = eventSheetManager.GetCurrentCondition();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const currentEvent =
                    oldFrame.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiers();
                const isSolModifierAfterCnds = oldFrame.IsSolModifierAfterCnds();
                const newFrame = eventStack.Push(currentEvent);
                const loopStack = eventSheetManager.GetLoopStack();
                const loop = loopStack.Push();
                const isInContainer = objectClass.IsInContainer();
                const sol = objectClass.GetCurrentSol();
                const instancesData = forEachStack.Push();
                C3.clearArray(instancesData);
                const iterInstances = sol.GetInstances();
                loop.SetEnd(iterInstances.length);
                for (let i = 0,
                        len = iterInstances.length; i < len; ++i) instancesData.push([iterInstances[i], cnd.ReevaluateParameter(1, i)]);
                instancesData.sort(ForEachOrdered_SortInstances);
                if (order === 1) instancesData.reverse();
                if (isSolModifierAfterCnds)
                    for (let i = 0, len = instancesData.length; i < len && !loop.IsStopped(); ++i) {
                        eventSheetManager.PushCopySol(solModifiers);
                        const inst = instancesData[i][0];
                        objectClass.GetCurrentSol().SetSinglePicked(inst);
                        if (isInContainer) inst.SetSiblingsSinglePicked();
                        loop.SetIndex(i);
                        yield* currentEvent.DebugRetrigger(oldFrame,
                            newFrame);
                        eventSheetManager.PopSol(solModifiers)
                    } else {
                        sol._SetSelectAll(false);
                        const solInstances = sol._GetOwnInstances();
                        C3.clearArray(solInstances);
                        solInstances.push(null);
                        for (let i = 0, len = instancesData.length; i < len && !loop.IsStopped(); ++i) {
                            const inst = instancesData[i][0];
                            solInstances[0] = inst;
                            if (isInContainer) inst.SetSiblingsSinglePicked();
                            loop.SetIndex(i);
                            yield* currentEvent.DebugRetrigger(oldFrame, newFrame)
                        }
                    }
                eventStack.Pop();
                loopStack.Pop();
                C3.clearArray(instancesData);
                forEachStack.Pop();
                return false
            }
            _GetFunctionMap(name,
                createIfMissing) {
                let ret = this._functionMaps.get(name);
                if (ret) return ret;
                if (!createIfMissing) return null;
                ret = {
                    defaultFunc: null,
                    strMap: new Map
                };
                this._functionMaps.set(name, ret);
                return ret
            }
            _DoCallMappedFunction(eventSheetManager, functionBlock, paramResults, hasAnySolModifiers, solModifiers) {
                functionBlock.GetEventBlock().RunAsMappedFunctionCall(paramResults, functionBlock.IsCopyPicked());
                if (hasAnySolModifiers) eventSheetManager.PopSol(solModifiers)
            }* _DebugDoCallMappedFunction(eventSheetManager, functionBlock,
                paramResults, hasAnySolModifiers, solModifiers) {
                yield* functionBlock.GetEventBlock().DebugRunAsMappedFunctionCall(paramResults, functionBlock.IsCopyPicked());
                if (hasAnySolModifiers) eventSheetManager.PopSol(solModifiers)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.System.Type = class SystemType extends C3.DefendedBase {
            constructor(objectClass) {
                super();
                this._objectClass = objectClass;
                this._runtime = objectClass.GetRuntime();
                this._plugin = objectClass.GetPlugin()
            }
            OnCreate() {}
            Release() {
                this._objectClass = null;
                this._runtime = null;
                this._plugin = null
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.System.Instance = class SystemInstance extends C3.DefendedBase {
            constructor(inst, properties) {
                super();
                this._inst = inst;
                this._objectClass = this._inst.GetObjectClass();
                this._sdkType = this._objectClass.GetSdkType();
                this._runtime = this._inst.GetRuntime()
            }
            Release() {
                this._inst = null;
                this._objectClass = null;
                this._sdkType = null;
                this._runtime = null
            }
        }
    } {
        const C3 = self.C3;
        const tmpPickArray = [];
        C3.Plugins.System.Cnds = {
            EveryTick() {
                return true
            },
            OnLayoutStart() {
                return true
            },
            OnLayoutEnd() {
                return true
            },
            OnSuspend() {
                return true
            },
            OnResume() {
                return true
            },
            IsSuspended() {
                return this._runtime.IsSuspended()
            },
            Else() {
                const frame = this._runtime.GetCurrentEventStackFrame();
                if (frame.GetElseBranchRan()) return false;
                else return !frame.GetLastEventTrue()
            },
            TriggerOnce() {
                const cnd = this._runtime.GetCurrentCondition();
                const cndSavedData = cnd.GetSavedDataMap();
                let lastTick = cndSavedData.get("TriggerOnce_lastTick");
                if (typeof lastTick === "undefined") {
                    lastTick = -1;
                    cndSavedData.set("TriggerOnce_lastTick", -1)
                }
                const curTick = this._runtime.GetTickCount();
                cndSavedData.set("TriggerOnce_lastTick", curTick);
                return this._runtime.IsLayoutFirstTick() || lastTick !== curTick - 1
            },
            Every(seconds) {
                const cnd = this._runtime.GetCurrentCondition();
                const cndSavedData = cnd.GetSavedDataMap();
                const lastTime = cndSavedData.get("Every_lastTime") || 0;
                const curTime = this._runtime.GetGameTime();
                if (!cndSavedData.has("Every_seconds")) cndSavedData.set("Every_seconds",
                    seconds);
                const thisSeconds = cndSavedData.get("Every_seconds");
                if (curTime >= lastTime + thisSeconds) {
                    cndSavedData.set("Every_lastTime", lastTime + thisSeconds);
                    if (curTime >= cndSavedData.get("Every_lastTime") + .04) cndSavedData.set("Every_lastTime", curTime);
                    cndSavedData.set("Every_seconds", seconds);
                    return true
                } else if (curTime < lastTime - .1) cndSavedData.set("Every_lastTime", curTime);
                return false
            },
            IsGroupActive(groupName) {
                const eventGroup = this._runtime.GetEventSheetManager().GetEventGroupByName(groupName);
                return eventGroup &&
                    eventGroup.IsGroupActive()
            },
            IsPreview() {
                return this._runtime.IsPreview()
            },
            IsMobile() {
                return C3.Platform.IsMobile
            },
            OnLoadFinished() {
                return true
            },
            OnCanvasSnapshot() {
                return true
            },
            EffectsSupported() {
                return true
            },
            OnSaveComplete() {
                return true
            },
            OnSaveFailed() {
                return true
            },
            OnLoadComplete() {
                return true
            },
            OnLoadFailed() {
                return true
            },
            ObjectUIDExists(uid) {
                return !!this._runtime.GetInstanceByUID(uid)
            },
            IsOnPlatform(p) {
                switch (p) {
                    case 0:
                        return C3.Platform.Context === "browser";
                    case 1:
                        return C3.Platform.OS === "iOS";
                    case 2:
                        return C3.Platform.OS ===
                            "Android";
                    case 8:
                        return C3.Platform.Context === "cordova";
                    case 9:
                        return this._runtime.GetExportType() === "scirra-arcade";
                    case 10:
                        return C3.Platform.Context === "nwjs";
                    case 13:
                        return this._runtime.GetExportType() === "windows-uwp";
                    default:
                        return false
                }
            },
            RegexTest(str, regex, flags) {
                const cacheRegex = this.GetRegex(regex, flags);
                return cacheRegex.test(str)
            },
            Compare(x, cmp, y) {
                return C3.compare(x, cmp, y)
            },
            CompareBetween(x, a, b) {
                return x >= a && x <= b
            },
            CompareVar(ev, cmp, val) {
                return C3.compare(ev.GetValue(), cmp, val)
            },
            CompareBoolVar(ev) {
                return !!ev.GetValue()
            },
            CompareTime(cmp, t) {
                const gameTime = this._runtime.GetGameTime();
                if (cmp === 0) {
                    const cnd = this._runtime.GetCurrentCondition();
                    const cndSavedData = cnd.GetSavedDataMap();
                    if (!cndSavedData.get("CompareTime_executed"))
                        if (gameTime >= t) {
                            cndSavedData.set("CompareTime_executed", true);
                            return true
                        }
                    return false
                } else return C3.compare(gameTime, cmp, t)
            },
            IsNaN(n) {
                return isNaN(n)
            },
            AngleWithin(a1, within, a2) {
                return C3.angleDiff(C3.toRadians(a1), C3.toRadians(a2)) <= C3.toRadians(within)
            },
            IsClockwiseFrom(a1, a2) {
                return C3.angleClockwise(C3.toRadians(a1),
                    C3.toRadians(a2))
            },
            IsBetweenAngles(a, la, ua) {
                let angle = C3.toRadians(a);
                let lower = C3.toRadians(la);
                let upper = C3.toRadians(ua);
                let obtuse = !C3.angleClockwise(upper, lower);
                if (obtuse) return !(!C3.angleClockwise(angle, lower) && C3.angleClockwise(angle, upper));
                else return C3.angleClockwise(angle, lower) && !C3.angleClockwise(angle, upper)
            },
            IsValueType(v, t) {
                if (typeof v === "number") return t === 0;
                else return t === 1
            },
            EvaluateExpression(v) {
                return !!v
            },
            OnSignal(tag) {
                return tag.toLowerCase() === this._signalTags.at(-1)
            },
            PickByComparison(objectClass,
                exp, cmp, val) {
                if (!objectClass) return false;
                const forEachStack = this._GetForEachStack();
                const tempInstances = forEachStack.Push();
                const sol = objectClass.GetCurrentSol();
                C3.shallowAssignArray(tempInstances, sol.GetInstances());
                if (sol.IsSelectAll()) C3.clearArray(sol._GetOwnElseInstances());
                const cnd = this._runtime.GetCurrentCondition();
                let k = 0;
                for (let i = 0, len = tempInstances.length; i < len; ++i) {
                    const inst = tempInstances[i];
                    tempInstances[k] = inst;
                    exp = cnd.ReevaluateParameter(1, i);
                    val = cnd.ReevaluateParameter(3, i);
                    if (C3.compare(exp,
                            cmp, val)) ++k;
                    else sol._PushElseInstance(inst)
                }
                C3.truncateArray(tempInstances, k);
                sol.SetArrayPicked(tempInstances);
                const ret = !!tempInstances.length;
                C3.clearArray(tempInstances);
                forEachStack.Pop();
                objectClass.ApplySolToContainer();
                return ret
            },
            PickByEvaluate(objectClass, exp) {
                if (!objectClass) return false;
                const forEachStack = this._GetForEachStack();
                const tempInstances = forEachStack.Push();
                const sol = objectClass.GetCurrentSol();
                C3.shallowAssignArray(tempInstances, sol.GetInstances());
                if (sol.IsSelectAll()) C3.clearArray(sol._GetOwnElseInstances());
                const cnd = this._runtime.GetCurrentCondition();
                let k = 0;
                for (let i = 0, len = tempInstances.length; i < len; ++i) {
                    const inst = tempInstances[i];
                    tempInstances[k] = inst;
                    exp = cnd.ReevaluateParameter(1, i);
                    if (exp) ++k;
                    else sol._PushElseInstance(inst)
                }
                C3.truncateArray(tempInstances, k);
                sol.SetArrayPicked(tempInstances);
                const ret = !!tempInstances.length;
                C3.clearArray(tempInstances);
                forEachStack.Pop();
                objectClass.ApplySolToContainer();
                return ret
            },
            PickNth(objectClass, index) {
                if (!objectClass) return false;
                const sol = objectClass.GetCurrentSol();
                const instances = sol.GetInstances();
                index = Math.floor(index);
                if (index >= instances.length) return false;
                const inst = instances[index];
                sol.PickOne(inst);
                objectClass.ApplySolToContainer();
                return true
            },
            PickRandom(objectClass) {
                if (!objectClass) return false;
                const sol = objectClass.GetCurrentSol();
                const instances = sol.GetInstances();
                const index = Math.floor(this._runtime.Random() * instances.length);
                if (index >= instances.length) return false;
                const inst = instances[index];
                sol.PickOne(inst);
                objectClass.ApplySolToContainer();
                return true
            },
            PickAll(objectClass) {
                if (!objectClass) return false;
                if (!objectClass.GetInstanceCount()) return false;
                const sol = objectClass.GetCurrentSol();
                sol._SetSelectAll(true);
                objectClass.ApplySolToContainer();
                return true
            },
            PickOverlappingPoint(objectClass, x, y) {
                if (!objectClass) return false;
                const sol = objectClass.GetCurrentSol();
                const instances = sol.GetInstances();
                const currentEvent = this._runtime.GetCurrentEvent();
                const isOrBlock = currentEvent.IsOrBlock();
                const isInverted = this._runtime.GetCurrentCondition().IsInverted();
                if (sol.IsSelectAll()) {
                    C3.shallowAssignArray(tmpPickArray, instances);
                    sol.ClearArrays();
                    sol._SetSelectAll(false)
                } else if (isOrBlock) {
                    C3.shallowAssignArray(tmpPickArray, sol._GetOwnElseInstances());
                    C3.clearArray(sol._GetOwnElseInstances())
                } else {
                    C3.shallowAssignArray(tmpPickArray, sol._GetOwnInstances());
                    C3.clearArray(sol._GetOwnInstances())
                }
                for (let i = 0, len = tmpPickArray.length; i < len; ++i) {
                    const inst = tmpPickArray[i];
                    if (C3.xor(inst.GetWorldInfo().ContainsPoint(x, y), isInverted)) sol._PushInstance(inst);
                    else sol._PushElseInstance(inst)
                }
                objectClass.ApplySolToContainer();
                return C3.xor(!!sol._GetOwnInstances().length, isInverted)
            },
            PickLastCreated(objectClass) {
                if (!objectClass) return false;
                const isFamily = objectClass.IsFamily();
                let pick = null;
                const instancesPendingCreate = this._runtime._GetInstancesPendingCreate();
                for (let i = instancesPendingCreate.length - 1; i >= 0; --i) {
                    const inst = instancesPendingCreate[i];
                    if (isFamily) {
                        if (inst.GetObjectClass().BelongsToFamily(objectClass)) {
                            pick = inst;
                            break
                        }
                    } else if (inst.GetObjectClass() === objectClass) {
                        pick = inst;
                        break
                    }
                }
                if (!pick) {
                    const instances =
                        objectClass.GetInstances();
                    if (instances.length) pick = instances.at(-1)
                }
                if (!pick) return false;
                const sol = objectClass.GetCurrentSol();
                sol.PickOne(pick);
                objectClass.ApplySolToContainer();
                return true
            },
            Repeat(count) {
                if (this._runtime.IsDebugging()) return this._DebugRepeat(count);
                else return this._Repeat(count)
            },
            While() {
                if (this._runtime.IsDebugging()) return this._DebugWhile();
                else return this._While()
            },
            For(name, start, end) {
                if (this._runtime.IsDebugging()) return this._DebugFor(name, start, end);
                else return this._For(name,
                    start, end)
            },
            ForEach(objectClass) {
                if (this._runtime.IsDebugging()) return this._DebugForEach(objectClass);
                else return this._ForEach(objectClass)
            },
            ForEachOrdered(objectClass, expression, order) {
                if (this._runtime.IsDebugging()) return this._DebugForEachOrdered(objectClass, order);
                else return this._ForEachOrdered(objectClass, order)
            },
            LayerVisible(layer) {
                return layer ? layer.IsVisible() : false
            },
            LayerInteractive(layer) {
                return layer ? layer.IsSelfAndParentsInteractive() : false
            },
            LayerEmpty(layer) {
                return layer ? !layer.GetInstanceCount() :
                    false
            },
            LayerCmpOpacity(layer, cmp, o) {
                if (!layer) return false;
                return C3.compare(layer.GetOpacity() * 100, cmp, o)
            },
            OnImageLoadingComplete() {
                return true
            },
            IsLoadingImages() {
                return this._imagesLoadingTotal > 0
            },
            TemplateExists(objectClass, template) {
                const templateManager = this._runtime.GetTemplateManager();
                if (!templateManager) return false;
                if (!template) return false;
                return !!templateManager.GetTemplateData(objectClass, template)
            }
        }
    } {
        const C3 = self.C3;

        function SortZOrderList(a, b) {
            const layerA = a[0];
            const layerB = b[0];
            const diff = layerA - layerB;
            if (diff !== 0) return diff;
            const indexA = a[1];
            const indexB = b[1];
            return indexA - indexB
        }

        function SortInstancesByValue(a, b) {
            return a[1] - b[1]
        }
        const tempZOrderList = [];
        const tempInstValues = [];
        const tempRect = C3.New(C3.Rect);
        const tempColor = C3.New(C3.Color);
        C3.Plugins.System.Acts = {
            SetVar(ev, x) {
                ev.SetValue(x)
            },
            AddVar(ev, x) {
                if (ev.IsNumber() && typeof x !== "number") x = parseFloat(x);
                ev.SetValue(ev.GetValue() + x)
            },
            SubVar(ev, x) {
                if (!ev.IsNumber()) return;
                ev.SetValue(ev.GetValue() - x)
            },
            SetBoolVar(ev, x) {
                ev.SetValue(!!x)
            },
            ToggleBoolVar(ev) {
                ev.SetValue(!ev.GetValue())
            },
            ResetGlobals() {
                this._runtime.GetEventSheetManager().ResetAllGlobalsToInitialValue()
            },
            CreateObject(objectClass, layer, x, y, createHierarchy, template) {
                if (!objectClass || !layer) return;
                const inst = this._runtime.CreateInstance(objectClass, layer, x, y, createHierarchy, template);
                if (!inst) return;
                if (createHierarchy) layer.SortAndAddInstancesByZIndex(inst);
                const eventSheetManager =
                    this._runtime.GetEventSheetManager();
                eventSheetManager.BlockFlushingInstances(true);
                inst._TriggerOnCreatedOnSelfAndRelated();
                eventSheetManager.BlockFlushingInstances(false);
                const pickMap = new Map;
                inst.CollectInstancesToPick(pickMap, objectClass, createHierarchy);
                for (const [pickObjectClass, instSet] of pickMap) pickObjectClass.GetCurrentSol().SetSetPicked(instSet)
            },
            CreateObjectByName(objectClassName, layer, x, y, createHierarchy, template) {
                if (!objectClassName || !layer) return;
                const objectClass = this._runtime.GetObjectClassByName(objectClassName);
                if (!objectClass) return;
                C3.Plugins.System.Acts.CreateObject.call(this, objectClass, layer, x, y, createHierarchy, template)
            },
            RecreateInitialObjects(objectClass, x1, y1, x2, y2, sourceLayoutName, sourceLayerParam, offsetX, offsetY, createHierarchy) {
                if (!objectClass) return;
                let sourceLayout = this._runtime.GetCurrentLayout();
                if (sourceLayoutName) {
                    const lookupLayout = this._runtime.GetLayoutManager().GetLayoutByName(sourceLayoutName);
                    if (lookupLayout) sourceLayout = lookupLayout;
                    else return
                }
                let sourceLayer = null;
                if (typeof sourceLayerParam !==
                    "number" || sourceLayerParam >= 0) {
                    sourceLayer = sourceLayout.GetLayer(sourceLayerParam);
                    if (!sourceLayer) return
                }
                tempRect.set(x1, y1, x2, y2);
                const allCreatedInstances = sourceLayout.RecreateInitialObjects(objectClass, tempRect, sourceLayer, offsetX, offsetY, createHierarchy);
                objectClass.GetCurrentSol().SetArrayPicked(allCreatedInstances);
                objectClass.ApplySolToContainer()
            },
            StopLoop() {
                const loopStack = this._loopStack;
                if (!loopStack.IsInLoop()) return;
                loopStack.GetCurrent().Stop()
            },
            SetGroupActive(groupName, a) {
                const group =
                    this._runtime.GetEventSheetManager().GetEventGroupByName(groupName);
                if (!group) return;
                if (a === 0) group.SetGroupActive(false);
                else if (a === 1) group.SetGroupActive(true);
                else group.SetGroupActive(!group.IsGroupActive())
            },
            SetTimescale(ts) {
                this._runtime.SetTimeScale(ts)
            },
            SetObjectTimescale(objectClass, ts) {
                if (ts < 0) ts = 0;
                if (!objectClass) return;
                const sol = objectClass.GetCurrentSol();
                const instances = sol.GetInstances();
                for (const inst of instances) inst.SetTimeScale(ts)
            },
            RestoreObjectTimescale(objectClass) {
                if (!objectClass) return;
                const sol = objectClass.GetCurrentSol();
                const instances = sol.GetInstances();
                for (const inst of instances) inst.RestoreTimeScale()
            },
            Wait(seconds) {
                if (seconds < 0) return;
                this._runtime.GetEventSheetManager().AddScheduledWait().InitTimer(seconds);
                return true
            },
            WaitForSignal(tag) {
                this._runtime.GetEventSheetManager().AddScheduledWait().InitSignal(tag);
                return true
            },
            WaitForPreviousActions() {
                const eventSheetManager = this._runtime.GetEventSheetManager();
                eventSheetManager.AddScheduledWait().InitPromise(eventSheetManager.GetPromiseForAllAsyncActions());
                return true
            },
            Signal(tag) {
                const lowerTag = tag.toLowerCase();
                this._signalTags.push(lowerTag);
                this._runtime.Trigger(C3.Plugins.System.Cnds.OnSignal, null);
                this._signalTags.pop();
                for (const w of this._runtime.GetEventSheetManager().scheduledWaits())
                    if (w.IsSignal() && w.GetSignalTag() === lowerTag) w.SetSignalled()
            },
            async SnapshotCanvas(format, quality, x, y, width, height) {
                const canvasManager = this._runtime.GetCanvasManager();
                if (!canvasManager) return;
                this.UpdateRender();
                await canvasManager.SnapshotCanvas(format ===
                    0 ? "image/png" : "image/jpeg", quality / 100, x, y, width, height);
                await this._runtime.TriggerAsync(C3.Plugins.System.Cnds.OnCanvasSnapshot, null)
            },
            SetCanvasSize(w, h) {
                if (w <= 0 || h <= 0) return;
                this._runtime.SetViewportSize(w, h);
                this._runtime.GetCurrentLayout().BoundScrolling();
                const canvasManager = this._runtime.GetCanvasManager();
                if (!canvasManager) return;
                if (canvasManager.GetCurrentFullscreenMode() === "off") canvasManager.SetSize(canvasManager.GetLastWidth(), canvasManager.GetLastHeight(), true);
                else {
                    this._runtime.SetOriginalViewportSize(w,
                        h);
                    canvasManager.SetSize(canvasManager.GetLastWidth(), canvasManager.GetLastHeight(), true)
                }
                this._runtime.UpdateRender()
            },
            SetFullscreenQuality(q) {
                const canvasManager = this._runtime.GetCanvasManager();
                if (!canvasManager) return;
                if (canvasManager.GetCurrentFullscreenMode() === "off") return;
                canvasManager.SetFullscreenScalingQuality(q !== 0 ? "high" : "low");
                canvasManager.SetSize(canvasManager.GetLastWidth(), canvasManager.GetLastHeight(), true)
            },
            SaveState(slot) {
                this._runtime.SaveToSlot(slot)
            },
            LoadState(slot) {
                this._runtime.LoadFromSlot(slot)
            },
            LoadStateJSON(jsonStr) {
                this._runtime.LoadFromJsonString(jsonStr)
            },
            SetHalfFramerateMode(m) {},
            ResetPersisted() {
                for (const layout of this._runtime.GetLayoutManager().GetAllLayouts()) layout.ResetPersistData()
            },
            SetPixelRounding(m) {
                this._runtime.SetPixelRoundingEnabled(m !== 0)
            },
            SetMinimumFramerate(fps) {
                this._runtime.SetMinimumFramerate(fps)
            },
            SortZOrderByInstVar(objectClass, instVar) {
                if (!objectClass) return;
                const sol = objectClass.GetCurrentSol();
                const pickedInstances = sol.GetInstances();
                const zOrderList = tempZOrderList;
                const instValues = tempInstValues;
                const layout = this._runtime.GetCurrentLayout();
                const isFamily = objectClass.IsFamily();
                const familyIndex = objectClass.GetFamilyIndex();
                for (let i = 0, len = pickedInstances.length; i < len; ++i) {
                    const inst = pickedInstances[i];
                    const wi = inst.GetWorldInfo();
                    if (!wi) continue;
                    let value;
                    if (isFamily) value = inst.GetInstanceVariableValue(instVar + inst.GetObjectClass().GetFamilyInstanceVariableOffset(familyIndex));
                    else value = inst.GetInstanceVariableValue(instVar);
                    zOrderList.push([wi.GetLayer().GetIndex(),
                        wi.GetZIndex()
                    ]);
                    instValues.push([inst, value])
                }
                if (!zOrderList.length) return;
                zOrderList.sort(SortZOrderList);
                instValues.sort(SortInstancesByValue);
                let anyChanged = false;
                for (let i = 0, len = zOrderList.length; i < len; ++i) {
                    const inst = instValues[i][0];
                    const layer = layout.GetLayerByIndex(zOrderList[i][0]);
                    const toZ = zOrderList[i][1];
                    const layerInstances = layer._GetInstances();
                    if (layerInstances[toZ] !== inst) {
                        layerInstances[toZ] = inst;
                        inst.GetWorldInfo()._SetLayer(layer, true);
                        layer.SetZIndicesChanged();
                        anyChanged = true
                    }
                }
                if (anyChanged) this._runtime.UpdateRender();
                C3.clearArray(tempZOrderList);
                C3.clearArray(tempInstValues)
            },
            GoToLayout(layout) {
                if (this._runtime.IsLoading()) return;
                const layoutManager = this._runtime.GetLayoutManager();
                if (layoutManager.IsPendingChangeMainLayout()) return;
                layoutManager.ChangeMainLayout(layout)
            },
            GoToLayoutByName(layoutName) {
                if (this._runtime.IsLoading()) return;
                const layoutManager = this._runtime.GetLayoutManager();
                if (layoutManager.IsPendingChangeMainLayout()) return;
                const toLayout = layoutManager.GetLayoutByName(layoutName);
                if (toLayout) layoutManager.ChangeMainLayout(toLayout)
            },
            NextPrevLayout(prev) {
                if (this._runtime.IsLoading()) return;
                const layoutManager = this._runtime.GetLayoutManager();
                if (layoutManager.IsPendingChangeMainLayout()) return;
                const allLayouts = layoutManager.GetAllLayouts();
                const index = allLayouts.indexOf(layoutManager.GetMainRunningLayout());
                if (prev && index === 0) return;
                if (!prev && index === allLayouts.length - 1) return;
                const toLayout = allLayouts[index + (prev ? -1 : 1)];
                layoutManager.ChangeMainLayout(toLayout)
            },
            RestartLayout() {
                if (this._runtime.IsLoading()) return;
                const layoutManager =
                    this._runtime.GetLayoutManager();
                if (layoutManager.IsPendingChangeMainLayout()) return;
                layoutManager.ChangeMainLayout(layoutManager.GetMainRunningLayout());
                this._runtime.GetEventSheetManager().ResetAllGroupsInitialActivation()
            },
            SetLayerVisible(layer, v) {
                if (!layer) return;
                layer.SetVisible(v)
            },
            SetLayerInteractive(layer, i) {
                if (!layer) return;
                layer.SetInteractive(i)
            },
            SetLayerOpacity(layer, o) {
                if (!layer) return;
                layer.SetOpacity(o / 100)
            },
            SetLayerScale(layer, s) {
                if (!layer) return;
                layer.SetOwnScale(s)
            },
            SetLayerScaleRate(layer,
                r) {
                if (!layer) return;
                layer.SetScaleRate(r)
            },
            SetLayerAngle(layer, a) {
                if (!layer) return;
                layer.SetAngle(C3.toRadians(+a))
            },
            SetLayerScroll(layer, scrollX, scrollY) {
                if (!layer) return;
                layer.SetOwnScrollPositionEnabled(true);
                layer.SetScrollX(scrollX);
                layer.SetScrollY(scrollY)
            },
            RestoreLayerScroll(layer) {
                if (!layer) return;
                layer.SetOwnScrollPositionEnabled(false)
            },
            SetLayerParallax(layer, px, py) {
                if (!layer) return;
                layer.SetParallax(px / 100, py / 100)
            },
            SetLayerZElevation(layer, z) {
                if (!layer) return;
                layer.SetZElevation(+z)
            },
            SetLayerBackground(layer, rgb) {
                if (!layer) return;
                tempColor.setFromRgbValue(rgb);
                tempColor.clamp();
                const layerBgColor = layer.GetBackgroundColor();
                if (layerBgColor.equalsIgnoringAlpha(tempColor)) return;
                layerBgColor.copyRgb(tempColor);
                this.UpdateRender()
            },
            SetLayerTransparent(layer, t) {
                if (!layer) return;
                layer.SetTransparent(t)
            },
            SetLayerBlendMode(layer, bm) {
                if (!layer) return;
                layer.SetBlendMode(bm)
            },
            SetLayerEffectEnabled(layer, enabled, effectName) {
                if (!layer) return;
                const effectList = layer.GetEffectList();
                const effectType =
                    effectList.GetEffectTypeByName(effectName);
                if (!effectType) return;
                const e = enabled === 1;
                if (effectType.IsActive() === e) return;
                effectType.SetActive(e);
                layer.UpdateActiveEffects();
                this._runtime.UpdateRender()
            },
            SetLayerEffectParam(layer, effectName, paramIndex, value) {
                if (!layer) return;
                const effectList = layer.GetEffectList();
                const effectType = effectList.GetEffectTypeByName(effectName);
                if (!effectType) return;
                paramIndex = Math.floor(paramIndex);
                const paramType = effectType.GetShaderProgram().GetParameterType(paramIndex);
                if (!paramType) return;
                if (paramType === "color") {
                    tempColor.setFromRgbValue(value);
                    value = tempColor
                } else if (paramType === "percent") value /= 100;
                const didChange = effectList.SetEffectParameter(effectType.GetIndex(), paramIndex, value);
                if (didChange && effectType.IsActive()) this._runtime.UpdateRender()
            },
            SetLayerForceOwnTexture(layer, f) {
                if (!layer) return;
                layer.SetForceOwnTexture(f)
            },
            SetLayoutScale(s) {
                this._runtime.GetCurrentLayout().SetScale(+s)
            },
            SetLayoutAngle(a) {
                this._runtime.GetCurrentLayout().SetAngle(C3.toRadians(+a))
            },
            SetLayoutEffectEnabled(enabled, effectName) {
                const layout = this._runtime.GetCurrentLayout();
                const effectList = layout.GetEffectList();
                const effectType = effectList.GetEffectTypeByName(effectName);
                if (!effectType) return;
                const e = enabled === 1;
                if (effectType.IsActive() === e) return;
                effectType.SetActive(e);
                layout.UpdateActiveEffects();
                this._runtime.UpdateRender()
            },
            SetLayoutEffectParam(effectName, paramIndex, value) {
                const layout = this._runtime.GetCurrentLayout();
                const effectList = layout.GetEffectList();
                const effectType =
                    effectList.GetEffectTypeByName(effectName);
                if (!effectType) return;
                paramIndex = Math.floor(paramIndex);
                const paramType = effectType.GetShaderProgram().GetParameterType(paramIndex);
                if (!paramType) return;
                if (paramType === "color") {
                    tempColor.setFromRgbValue(value);
                    value = tempColor
                } else if (paramType === "percent") value /= 100;
                const didChange = effectList.SetEffectParameter(effectType.GetIndex(), paramIndex, value);
                if (didChange && effectType.IsActive()) this._runtime.UpdateRender()
            },
            SetLayoutVanishingPoint(vpX, vpY) {
                const layout =
                    this._runtime.GetCurrentLayout();
                layout.SetVanishingPointXY(vpX / 100, vpY / 100)
            },
            SetLayoutProjection(p) {
                const layout = this._runtime.GetCurrentLayout();
                if (p === 0) layout.SetPerspectiveProjection();
                else layout.SetOrthographicProjection()
            },
            ScrollX(x) {
                const layout = this._runtime.GetCurrentLayout();
                layout.SetScrollX(x)
            },
            ScrollY(y) {
                const layout = this._runtime.GetCurrentLayout();
                layout.SetScrollY(y)
            },
            Scroll(x, y) {
                const layout = this._runtime.GetCurrentLayout();
                layout.SetScrollX(x);
                layout.SetScrollY(y)
            },
            ScrollToObject(objectClass) {
                if (!objectClass) return;
                const inst = objectClass.GetFirstPicked();
                if (!inst) return;
                const wi = inst.GetWorldInfo();
                if (!wi) return;
                const layout = this._runtime.GetCurrentLayout();
                layout.SetScrollX(wi.GetX());
                layout.SetScrollY(wi.GetY())
            },
            async LoadObjectTextures(objectClass) {
                const layout = this._runtime.GetMainRunningLayout();
                if (!layout || !objectClass || this._runtime.IsLoading()) return;
                const objectClasses = objectClass.IsFamily() ? objectClass.GetFamilyMembers() : [objectClass];
                await this._LoadTexturesForObjectClasses(layout, objectClasses)
            },
            async LoadObjectTexturesByName(objectClassName) {
                await C3.Plugins.System.Acts.LoadObjectTextures.call(this, this._runtime.GetObjectClassByName(objectClassName))
            },
            UnloadObjectTextures(objectClass) {
                const layout = this._runtime.GetMainRunningLayout();
                if (!layout || !objectClass) return;
                const objectClasses = objectClass.IsFamily() ? objectClass.GetFamilyMembers() : [objectClass];
                this._UnloadTexturesForObjectClasses(layout, objectClasses)
            },
            UnloadObjectTexturesByName(objectClassName) {
                C3.Plugins.System.Acts.UnloadObjectTextures.call(this,
                    this._runtime.GetObjectClassByName(objectClassName))
            },
            UnloadUnusedTextures() {
                const layout = this._runtime.GetMainRunningLayout();
                if (!layout) return;
                const objectClasses = layout._GetTextureLoadedObjectTypes();
                this._UnloadTexturesForObjectClasses(layout, objectClasses)
            },
            async LoadLayoutTextures(loadLayout) {
                const curLayout = this._runtime.GetMainRunningLayout();
                if (!loadLayout || !curLayout || this._runtime.IsLoading()) return;
                await this._LoadTexturesForObjectClasses(curLayout, loadLayout._GetInitialObjectClasses())
            },
            async LoadLayoutTexturesByName(layoutName) {
                const curLayout = this._runtime.GetMainRunningLayout();
                const loadLayout = this._runtime.GetLayoutManager().GetLayoutByName(layoutName);
                if (!loadLayout || !curLayout || this._runtime.IsLoading()) return;
                await this._LoadTexturesForObjectClasses(curLayout, loadLayout._GetInitialObjectClasses())
            },
            SetFunctionReturnValue(v) {
                const frame = this._eventStack.GetCurrentExpFuncStackFrame();
                if (!frame) return;
                switch (frame.GetFunctionReturnType()) {
                    case 1:
                        if (typeof v === "number") frame.SetFunctionReturnValue(v);
                        break;
                    case 2:
                        if (typeof v === "string") frame.SetFunctionReturnValue(v);
                        break;
                    case 3:
                        frame.SetFunctionReturnValue(v);
                        break
                }
            },
            MapFunction(name, str, functionBlock) {
                const mapEntry = this._GetFunctionMap(name.toLowerCase(), true);
                const strMap = mapEntry.strMap;
                const lowerStr = str.toLowerCase();
                if (strMap.has(lowerStr)) console.warn(`[Construct] Function map '${name}' string '${str}' already in map; overwriting entry`);
                const firstFunctionBlock = C3.first(strMap.values()) || mapEntry.defaultFunc;
                if (firstFunctionBlock) {
                    const firstReturnsValue =
                        firstFunctionBlock.GetReturnType() !== 0;
                    const curReturnsValue = functionBlock.GetReturnType() !== 0;
                    if (firstReturnsValue !== curReturnsValue) {
                        console.error(`[Construct] Function map '${name}' string '${str}' function return type not compatible with other functions in the map; entry ignored`);
                        return
                    }
                }
                strMap.set(lowerStr, functionBlock)
            },
            MapFunctionDefault(name, functionBlock) {
                const mapEntry = this._GetFunctionMap(name.toLowerCase(), true);
                if (mapEntry.defaultFunc) console.warn(`[Construct] Function map '${name}' already has a default; overwriting entry`);
                const firstFunctionBlock = C3.first(mapEntry.strMap.values()) || mapEntry.defaultFunc;
                if (firstFunctionBlock) {
                    const firstReturnsValue = firstFunctionBlock.GetReturnType() !== 0;
                    const curReturnsValue = functionBlock.GetReturnType() !== 0;
                    if (firstReturnsValue !== curReturnsValue) {
                        console.error(`[Construct] Function map '${name}' default: function return type not compatible with other functions in the map; entry ignored`);
                        return
                    }
                }
                mapEntry.defaultFunc = functionBlock
            },
            CallMappedFunction(name, str, forwardParams) {
                forwardParams =
                    Math.floor(forwardParams);
                const mapEntry = this._GetFunctionMap(name.toLowerCase(), false);
                if (!mapEntry) {
                    console.warn(`[Construct] Call mapped function: map name '${name}' not found; call ignored`);
                    return
                }
                let functionBlock = mapEntry.strMap.get(str.toLowerCase());
                if (!functionBlock)
                    if (mapEntry.defaultFunc) {
                        functionBlock = mapEntry.defaultFunc;
                        forwardParams = 0
                    } else {
                        console.warn(`[Construct] Call mapped function: no function associated with map '${name}' string '${str}'; call ignored (consider setting a default)`);
                        return
                    }
                if (!functionBlock.IsEnabled()) return;
                if (functionBlock.GetReturnType() !== 0) {
                    console.warn(`[Construct] Call mapped function: map '${name}' string '${str}' has a return type so cannot be called`);
                    return
                }
                const runtime = this._runtime;
                const eventSheetManager = runtime.GetEventSheetManager();
                const currentEvent = eventSheetManager.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiersIncludingParents();
                const hasAnySolModifiers = solModifiers.length > 0;
                if (hasAnySolModifiers)
                    if (functionBlock.IsCopyPicked()) eventSheetManager.PushCopySol(solModifiers);
                    else eventSheetManager.PushCleanSol(solModifiers);
                const paramResults = [];
                const callerFunctionBlock = eventSheetManager.FindFirstFunctionBlockParent(currentEvent);
                if (callerFunctionBlock) {
                    const callerParameters = callerFunctionBlock.GetFunctionParameters();
                    for (let i = forwardParams, len = callerParameters.length; i < len; ++i) paramResults.push(callerParameters[i].GetValue())
                }
                const calleeParameters = functionBlock.GetFunctionParameters();
                for (let i = paramResults.length, len = calleeParameters.length; i < len; ++i) paramResults.push(calleeParameters[i].GetInitialValue());
                if (runtime.IsDebugging()) return this._DebugDoCallMappedFunction(eventSheetManager, functionBlock, paramResults, hasAnySolModifiers, solModifiers);
                else return this._DoCallMappedFunction(eventSheetManager, functionBlock, paramResults, hasAnySolModifiers, solModifiers)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.System.Exps = {
            int: function(x) {
                if (typeof x === "string") {
                    x = parseInt(x, 10);
                    if (isNaN(x)) x = 0
                }
                return Math.floor(x)
            },
            float: function(x) {
                if (typeof x === "string") {
                    x = parseFloat(x);
                    if (isNaN(x)) x = 0
                }
                return x
            },
            str(x) {
                return x.toString()
            },
            len(x) {
                if (typeof x === "string") return x.length;
                else return 0
            },
            random(a, b) {
                if (typeof b === "undefined") return this._runtime.Random() * a;
                else return this._runtime.Random() * (b - a) + a
            },
            choose(...args) {
                const index = Math.floor(this._runtime.Random() * args.length);
                return args[index]
            },
            chooseindex(index, ...args) {
                if (typeof index !== "number") index = 0;
                index = C3.clamp(Math.floor(index), 0, args.length - 1);
                return args[index]
            },
            pi() {
                return Math.PI
            },
            infinity() {
                return Infinity
            },
            sqrt(v) {
                return Math.sqrt(v)
            },
            abs(v) {
                return Math.abs(v)
            },
            round(v) {
                return Math.round(v)
            },
            roundtodp(v, dp) {
                dp = Math.max(Math.floor(dp), 0);
                const m = Math.pow(10, dp);
                return Math.round((v + Number.EPSILON) * m) / m
            },
            floor(v) {
                return Math.floor(v)
            },
            ceil(v) {
                return Math.ceil(v)
            },
            sign(v) {
                return Math.sign(v)
            },
            sin(x) {
                return Math.sin(C3.toRadians(x))
            },
            cos(x) {
                return Math.cos(C3.toRadians(x))
            },
            tan(x) {
                return Math.tan(C3.toRadians(x))
            },
            asin(x) {
                return C3.toDegrees(Math.asin(x))
            },
            acos(x) {
                return C3.toDegrees(Math.acos(x))
            },
            atan(x) {
                return C3.toDegrees(Math.atan(x))
            },
            exp(x) {
                return Math.exp(x)
            },
            ln(x) {
                return Math.log(x)
            },
            log10(x) {
                return Math.log(x) / Math.LN10
            },
            max(...args) {
                let ret = args[0];
                if (typeof ret !== "number") ret = 0;
                for (let i = 1, len = args.length; i < len; ++i) {
                    let n = args[i];
                    if (typeof n !== "number") continue;
                    if (ret < n) ret = n
                }
                return ret
            },
            min(...args) {
                let ret = args[0];
                if (typeof ret !== "number") ret = 0;
                for (let i = 1, len = args.length; i < len; ++i) {
                    let n = args[i];
                    if (typeof n !== "number") continue;
                    if (ret > n) ret = n
                }
                return ret
            },
            clamp(x, l, u) {
                return C3.clamp(x, l, u)
            },
            distance(x1, y1, x2, y2) {
                return C3.distanceTo(x1, y1, x2, y2)
            },
            angle(x1, y1, x2, y2) {
                return C3.toDegrees(C3.angleTo(x1, y1, x2, y2))
            },
            lerp(a, b, x) {
                return C3.lerp(a, b, x)
            },
            unlerp(a, b, y) {
                return C3.unlerp(a, b, y)
            },
            qarp(a, b, c, x) {
                return C3.qarp(a, b, c, x)
            },
            cubic(a, b, c, d, x) {
                return C3.cubic(a, b, c, d, x)
            },
            cosp(a, b, x) {
                return C3.cosp(a, b, x)
            },
            anglediff(a,
                b) {
                return C3.toDegrees(C3.angleDiff(C3.toRadians(a), C3.toRadians(b)))
            },
            anglelerp(a, b, x) {
                return C3.toDegrees(C3.angleLerp(C3.toRadians(a), C3.toRadians(b), x))
            },
            anglerotate(a, b, c) {
                return C3.toDegrees(C3.angleRotate(C3.toRadians(a), C3.toRadians(b), C3.toRadians(c)))
            },
            setbit(n, b, v) {
                n = n | 0;
                b = b | 0;
                v = v !== 0 ? 1 : 0;
                return n & ~(1 << b) | v << b
            },
            togglebit(n, b) {
                n = n | 0;
                b = b | 0;
                return n ^ 1 << b
            },
            getbit(n, b) {
                n = n | 0;
                b = b | 0;
                return n & 1 << b ? 1 : 0
            },
            newline() {
                return "\n"
            },
            uppercase(s) {
                return typeof s === "string" ? s.toUpperCase() : ""
            },
            lowercase(s) {
                return typeof s ===
                    "string" ? s.toLowerCase() : ""
            },
            left(text, n) {
                return typeof text === "string" ? text.substr(0, n) : ""
            },
            mid(text, index, count) {
                if (typeof text !== "string") return "";
                if (count < 0) return text.substr(index);
                else return text.substr(index, count)
            },
            right(text, n) {
                return typeof text === "string" ? text.substr(Math.max(text.length - n, 0)) : ""
            },
            trim(text) {
                return typeof text === "string" ? text.trim() : ""
            },
            tokenat(text, index, sep) {
                if (typeof text !== "string" || typeof sep !== "string") return "";
                let arr = text.split(sep);
                index = Math.floor(index);
                if (index <
                    0 || index >= arr.length) return "";
                return arr[index]
            },
            tokencount(text, sep) {
                if (typeof text !== "string" || typeof sep !== "string" || !text.length) return 0;
                return text.split(sep).length
            },
            find(text, searchStr) {
                if (typeof text === "string" && typeof searchStr === "string") return text.search(new RegExp(C3.EscapeRegex(searchStr), "i"));
                else return -1
            },
            findcase(text, searchStr) {
                if (typeof text === "string" && typeof searchStr === "string") return text.search(new RegExp(C3.EscapeRegex(searchStr), ""));
                else return -1
            },
            replace(text, find, replace) {
                if (typeof text ===
                    "string" && typeof find === "string" && typeof replace === "string") return text.replace(new RegExp(C3.EscapeRegex(find), "gi"), replace);
                else return typeof text === "string" ? text : ""
            },
            regexsearch(text, regex, flags) {
                const cacheRegex = this.GetRegex(regex, flags);
                return text ? text.search(cacheRegex) : -1
            },
            regexreplace(text, regex, flags, replace) {
                const cacheRegex = this.GetRegex(regex, flags);
                return text ? text.replace(cacheRegex, replace) : ""
            },
            regexmatchcount(text, regex, flags) {
                const matches = this.GetRegexMatches(text.toString(),
                    regex, flags);
                return matches ? matches.length : 0
            },
            regexmatchat(text, regex, flags, index) {
                index = Math.floor(index);
                const matches = this.GetRegexMatches(text.toString(), regex, flags);
                if (!matches || index < 0 || index >= matches.length) return "";
                else return matches[index]
            },
            zeropad(n, d) {
                let s = n < 0 ? "-" : "";
                if (n < 0) n = -n;
                const zeroes = d - n.toString().length;
                s += "0".repeat(Math.max(zeroes, 0));
                return s + n.toString()
            },
            urlencode(s) {
                return encodeURIComponent(s)
            },
            urldecode(s) {
                return decodeURIComponent(s)
            },
            dt() {
                return this._runtime._GetDtFast()
            },
            timescale() {
                return this._runtime.GetTimeScale()
            },
            wallclocktime() {
                return (Date.now() - this._runtime.GetStartTime()) / 1E3
            },
            unixtime() {
                return Date.now()
            },
            time() {
                return this._runtime.GetGameTime()
            },
            tickcount() {
                return this._runtime.GetTickCount()
            },
            objectcount() {
                return this._runtime.GetObjectCount()
            },
            fps() {
                return this._runtime.GetFPS()
            },
            cpuutilisation() {
                return this._runtime.GetMainThreadTime()
            },
            gpuutilisation() {
                return this._runtime.GetGPUUtilisation()
            },
            windowwidth() {
                return this._runtime.GetCanvasManager().GetDeviceWidth()
            },
            windowheight() {
                return this._runtime.GetCanvasManager().GetDeviceHeight()
            },
            originalwindowwidth() {
                return this._runtime.GetOriginalViewportWidth()
            },
            originalwindowheight() {
                return this._runtime.GetOriginalViewportHeight()
            },
            originalviewportwidth() {
                return this._runtime.GetOriginalViewportWidth()
            },
            originalviewportheight() {
                return this._runtime.GetOriginalViewportHeight()
            },
            scrollx() {
                return this._runtime.GetCurrentLayout().GetScrollX()
            },
            scrolly() {
                return this._runtime.GetCurrentLayout().GetScrollY()
            },
            layoutname() {
                return this._runtime.GetCurrentLayout().GetName()
            },
            layoutscale() {
                return this._runtime.GetCurrentLayout().GetScale()
            },
            layoutangle() {
                return C3.toDegrees(this._runtime.GetCurrentLayout().GetAngle())
            },
            layoutwidth() {
                return this._runtime.GetCurrentLayout().GetWidth()
            },
            layoutheight() {
                return this._runtime.GetCurrentLayout().GetHeight()
            },
            vanishingpointx() {
                return this._runtime.GetCurrentLayout().GetVanishingPointX() * 100
            },
            vanishingpointy() {
                return this._runtime.GetCurrentLayout().GetVanishingPointY() * 100
            },
            viewportleft(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetViewport3D().getLeft() : 0
            },
            viewporttop(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetViewport3D().getTop() : 0
            },
            viewportright(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetViewport3D().getRight() : 0
            },
            viewportbottom(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetViewport3D().getBottom() : 0
            },
            viewportwidth(layerParam) {
                const layer =
                    this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetViewport3D().width() : 0
            },
            viewportheight(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetViewport3D().height() : 0
            },
            viewportmidx(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                if (layer) {
                    const vp = layer.GetViewport3D();
                    return (vp.getLeft() + vp.getRight()) / 2
                } else return 0
            },
            viewportmidy(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                if (layer) {
                    const vp = layer.GetViewport3D();
                    return (vp.getTop() + vp.getBottom()) / 2
                } else return 0
            },
            canvastolayerx(layerParam, x, y) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.CanvasCssToLayer(x, y)[0] : 0
            },
            canvastolayery(layerParam, x, y) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.CanvasCssToLayer(x, y)[1] : 0
            },
            layertocanvasx(layerParam, x, y) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.LayerToCanvasCss(x,
                    y)[0] : 0
            },
            layertocanvasy(layerParam, x, y) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.LayerToCanvasCss(x, y)[1] : 0
            },
            layertolayerx(fromLayerParam, toLayerParam, x, y) {
                const layout = this._runtime.GetCurrentLayout();
                const fromLayer = layout.GetLayer(fromLayerParam);
                const toLayer = layout.GetLayer(toLayerParam);
                if (!fromLayer || !toLayer || fromLayer === toLayer) return x;
                const [canvasX, canvasY] = fromLayer.LayerToCanvasCss(x, y);
                return toLayer.CanvasCssToLayer(canvasX, canvasY)[0]
            },
            layertolayery(fromLayerParam, toLayerParam, x, y) {
                const layout = this._runtime.GetCurrentLayout();
                const fromLayer = layout.GetLayer(fromLayerParam);
                const toLayer = layout.GetLayer(toLayerParam);
                if (!fromLayer || !toLayer || fromLayer === toLayer) return y;
                const [canvasX, canvasY] = fromLayer.LayerToCanvasCss(x, y);
                return toLayer.CanvasCssToLayer(canvasX, canvasY)[1]
            },
            layerscale(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetOwnScale() : 0
            },
            layerangle(layerParam) {
                const layer =
                    this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? C3.toDegrees(layer.GetOwnAngle()) : 0
            },
            layeropacity(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetOpacity() * 100 : 0
            },
            layerscalerate(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetScaleRate() : 0
            },
            layerscrollx(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetScrollX() : 0
            },
            layerscrolly(layerParam) {
                const layer =
                    this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetScrollY() : 0
            },
            layerparallaxx(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetParallaxX() * 100 : 0
            },
            layerparallaxy(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetParallaxY() * 100 : 0
            },
            layerzelevation(layerParam) {
                const layer = this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetZElevation() : 0
            },
            layerindex(layerParam) {
                const layer =
                    this._runtime.GetCurrentLayout().GetLayer(layerParam);
                return layer ? layer.GetIndex() : -1
            },
            canvassnapshot() {
                const canvasManager = this._runtime.GetCanvasManager();
                if (!canvasManager) return "";
                return canvasManager.GetCanvasSnapshotUrl()
            },
            loopindex(name) {
                const loopStack = this._loopStack;
                if (!loopStack.IsInLoop()) return 0;
                if (name) {
                    const loop = loopStack.FindByName(name);
                    return loop ? loop.GetIndex() : 0
                } else return loopStack.GetCurrent().GetIndex()
            },
            savestatejson() {
                return this._runtime.GetLastSaveJsonString()
            },
            callmapped(name,
                str, ...paramResults) {
                const mapEntry = this._GetFunctionMap(name.toLowerCase(), false);
                if (!mapEntry) {
                    console.warn(`[Construct] Call mapped function: map name '${name}' not found; returning 0`);
                    return 0
                }
                let functionBlock = mapEntry.strMap.get(str.toLowerCase());
                if (!functionBlock)
                    if (mapEntry.defaultFunc) functionBlock = mapEntry.defaultFunc;
                    else {
                        console.warn(`[Construct] Call mapped function: no function associated with map '${name}' string '${str}'; returning 0 (consider setting a default)`);
                        return 0
                    }
                const returnType =
                    functionBlock.GetReturnType();
                const defaultReturnValue = functionBlock.GetDefaultReturnValue();
                if (returnType === 0) {
                    console.warn(`[Construct] Call mapped function: map '${name}' string '${str}' has no return type so cannot be called from an expression; returning 0`);
                    return 0
                }
                if (!functionBlock.IsEnabled()) return defaultReturnValue;
                const runtime = this._runtime;
                const eventSheetManager = runtime.GetEventSheetManager();
                const currentEvent = eventSheetManager.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiersIncludingParents();
                const hasAnySolModifiers = solModifiers.length > 0;
                if (hasAnySolModifiers)
                    if (functionBlock.IsCopyPicked()) eventSheetManager.PushCopySol(solModifiers);
                    else eventSheetManager.PushCleanSol(solModifiers);
                const calleeParameters = functionBlock.GetFunctionParameters();
                for (let i = paramResults.length, len = calleeParameters.length; i < len; ++i) paramResults.push(calleeParameters[i].GetInitialValue());
                const callEventBlock = functionBlock.GetEventBlock();
                const returnValue = callEventBlock.RunAsExpressionFunctionCall(callEventBlock.GetSolModifiersIncludingParents(),
                    functionBlock.IsCopyPicked(), returnType, defaultReturnValue, ...paramResults);
                if (hasAnySolModifiers) eventSheetManager.PopSol(solModifiers);
                return returnValue
            },
            loadingprogress() {
                return this._runtime.GetAssetManager().GetLoadProgress()
            },
            imageloadingprogress() {
                if (this._imagesLoadingTotal === 0) return 1;
                return this._imagesLoadingComplete / this._imagesLoadingTotal
            },
            renderer() {
                if (this._runtime.GetWebGPURenderer()) return "webgpu";
                else return "webgl"
            },
            rendererdetail() {
                if (this._runtime.GetWebGPURenderer()) return this._runtime.GetWebGPURenderer().GetBasicAdapterInfoString();
                else return this._runtime.GetWebGLRenderer().GetUnmaskedRenderer()
            },
            imagememoryusage() {
                let ret = this._runtime.GetRenderer().GetEstimatedTextureMemoryUsage();
                return Math.round(100 * ret / (1024 * 1024)) / 100
            },
            rgb(r, g, b) {
                return C3.PackRGB(r, g, b)
            },
            rgbex(r, g, b) {
                return C3.PackRGBEx(r / 100, g / 100, b / 100)
            },
            rgba(r, g, b, a) {
                return C3.PackRGBAEx(r / 100, g / 100, b / 100, a / 100)
            },
            rgbex255(r, g, b) {
                return C3.PackRGBEx(r / 255, g / 255, b / 255)
            },
            rgba255(r, g, b, a) {
                return C3.PackRGBAEx(r / 255, g / 255, b / 255, a / 255)
            },
            projectname() {
                return this._runtime.GetProjectName()
            },
            projectversion() {
                return this._runtime.GetProjectVersion()
            },
            currenteventsheetname() {
                return this._runtime.GetCurrentEvent().GetEventSheet().GetName()
            },
            currenteventnumber() {
                return this._runtime.GetCurrentEvent().GetDisplayNumber()
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Plugins.Arr = class ArrayPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Arr.Type = class ArrayType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const IInstance = self.IInstance;

        function ResizeArray(arr, len, data) {
            if (len < arr.length) C3.truncateArray(arr, len);
            else if (len > arr.length)
                if (typeof data === "function")
                    for (let i = arr.length; i < len; ++i) arr.push(data());
                else
                    for (let i = arr.length; i < len; ++i) arr.push(data)
        }
        C3.Plugins.Arr.Instance = class ArrayInstance extends C3.SDKInstanceBase {
            constructor(inst, properties) {
                super(inst);
                this._cx = 10;
                this._cy = 1;
                this._cz = 1;
                this._arr = null;
                this._forX = [];
                this._forY = [];
                this._forZ = [];
                this._forDepth = -1;
                if (properties) {
                    this._cx = properties[0];
                    this._cy = properties[1];
                    this._cz = properties[2]
                }
                this._arr = C3.MakeFilledArray(this._cx, () => C3.MakeFilledArray(this._cy, () => C3.MakeFilledArray(this._cz, 0)))
            }
            Release() {
                this._arr = null;
                super.Release()
            }
            At(x, y, z) {
                x = Math.floor(x);
                y = Math.floor(y);
                z = Math.floor(z);
                if (x >= 0 && x < this._cx && y >= 0 && y < this._cy && z >= 0 && z < this._cz) return this._arr[x][y][z];
                else return 0
            }
            Set(x, y, z, val) {
                x = Math.floor(x);
                y = Math.floor(y);
                z = Math.floor(z);
                if (x >= 0 && x < this._cx && y >= 0 && y < this._cy && z >= 0 && z < this._cz) this._arr[x][y][z] =
                    val
            }
            SetSize(w, h, d) {
                w = Math.floor(w);
                h = Math.floor(h);
                d = Math.floor(d);
                if (w < 0) w = 0;
                if (h < 0) h = 0;
                if (d < 0) d = 0;
                if (this._cx === w && this._cy === h && this._cz === d) return;
                this._cx = w;
                this._cy = h;
                this._cz = d;
                const arr = this._arr;
                ResizeArray(arr, w, () => C3.MakeFilledArray(h, () => C3.MakeFilledArray(d, 0)));
                for (let x = 0; x < w; ++x) {
                    ResizeArray(arr[x], h, () => C3.MakeFilledArray(d, 0));
                    for (let y = 0; y < h; ++y) ResizeArray(arr[x][y], d, 0)
                }
            }
            GetWidth() {
                return this._cx
            }
            GetHeight() {
                return this._cy
            }
            GetDepth() {
                return this._cz
            }
            _ShuffleHelper(axis, len,
                x, y, z) {
                while (len > 0) {
                    const i = Math.floor(this._runtime.Random() * len);
                    --len;
                    if (axis === 0) {
                        const v1 = this.At(len, y, z);
                        const v2 = this.At(i, y, z);
                        this.Set(len, y, z, v2);
                        this.Set(i, y, z, v1)
                    } else if (axis === 1) {
                        const v1 = this.At(x, len, z);
                        const v2 = this.At(x, i, z);
                        this.Set(x, len, z, v2);
                        this.Set(x, i, z, v1)
                    } else if (axis === 2) {
                        const v1 = this.At(x, y, len);
                        const v2 = this.At(x, y, i);
                        this.Set(x, y, len, v2);
                        this.Set(x, y, i, v1)
                    }
                }
            }
            GetDebuggerProperties() {
                const prefix = "plugins.arr.debugger";
                const propsPrefix = "plugins.arr.properties";
                const ret = [{
                    title: prefix + ".array-properties.title",
                    properties: [{
                        name: propsPrefix + ".width.name",
                        value: this._cx,
                        onedit: v => this.SetSize(v, this._cy, this._cz)
                    }, {
                        name: propsPrefix + ".height.name",
                        value: this._cy,
                        onedit: v => this.SetSize(this._cx, v, this._cz)
                    }, {
                        name: propsPrefix + ".depth.name",
                        value: this._cz,
                        onedit: v => this.SetSize(this._cx, this._cy, v)
                    }, {
                        name: propsPrefix + ".elements.name",
                        value: this._cx * this._cy * this._cz
                    }]
                }];
                const dataProps = [];
                if (this._cy === 1 && this._cz === 1)
                    for (let x = 0; x < this._cx; ++x) dataProps.push({
                        name: "$" +
                            x,
                        value: this._arr[x][0][0],
                        onedit: v => this._arr[x][0][0] = v
                    });
                else
                    for (let x = 0; x < this._cx; ++x) dataProps.push({
                        name: "$" + x,
                        value: this._arr[x].toString()
                    });
                if (dataProps.length) ret.push({
                    title: prefix + ".array-data.title",
                    properties: dataProps
                });
                return ret
            }
            GetAsJsonString() {
                return JSON.stringify({
                    "c2array": true,
                    "size": [this._cx, this._cy, this._cz],
                    "data": this._arr
                })
            }
            SaveToJson() {
                return {
                    "size": [this._cx, this._cy, this._cz],
                    "data": this._arr
                }
            }
            LoadFromJson(o) {
                const sz = o["size"];
                this._cx = sz[0];
                this._cy = sz[1];
                this._cz =
                    sz[2];
                this._arr = o["data"]
            }
            _GetForX() {
                if (this._forDepth >= 0 && this._forDepth < this._forX.length) return this._forX[this._forDepth];
                else return 0
            }
            _GetForY() {
                if (this._forDepth >= 0 && this._forDepth < this._forY.length) return this._forY[this._forDepth];
                else return 0
            }
            _GetForZ() {
                if (this._forDepth >= 0 && this._forDepth < this._forZ.length) return this._forZ[this._forDepth];
                else return 0
            }
            GetScriptInterfaceClass() {
                return self.IArrayInstance
            }
        };
        const map = new WeakMap;
        self.IArrayInstance = class IArrayInstance extends IInstance {
            constructor() {
                super();
                map.set(this, IInstance._GetInitInst().GetSdkInstance())
            }
            get width() {
                return map.get(this).GetWidth()
            }
            get height() {
                return map.get(this).GetHeight()
            }
            get depth() {
                return map.get(this).GetDepth()
            }
            setSize(w, h = 1, d = 1) {
                C3X.RequireFiniteNumber(w);
                C3X.RequireFiniteNumber(h);
                C3X.RequireFiniteNumber(d);
                map.get(this).SetSize(w, h, d)
            }
            getAt(x, y = 0, z = 0) {
                C3X.RequireFiniteNumber(x);
                C3X.RequireFiniteNumber(y);
                C3X.RequireFiniteNumber(z);
                return map.get(this).At(x, y, z)
            }
            setAt(val, x, y = 0, z = 0) {
                C3X.RequireFiniteNumber(x);
                C3X.RequireFiniteNumber(y);
                C3X.RequireFiniteNumber(z);
                if (typeof val !== "number" && typeof val !== "string") throw new TypeError("invalid type");
                map.get(this).Set(x, y, z, val)
            }
        }
    } {
        const C3 = self.C3;

        function DoForEachTrigger(eventSheetManager, currentEvent, solModifiers, oldFrame, newFrame) {
            eventSheetManager.PushCopySol(solModifiers);
            currentEvent.Retrigger(oldFrame, newFrame);
            eventSheetManager.PopSol(solModifiers)
        }
        C3.Plugins.Arr.Cnds = {
            CompareX(x, cmp, val) {
                return C3.compare(this.At(x, 0, 0), cmp, val)
            },
            CompareXY(x, y, cmp, val) {
                return C3.compare(this.At(x, y, 0), cmp, val)
            },
            CompareXYZ(x, y, z, cmp, val) {
                return C3.compare(this.At(x, y, z), cmp, val)
            },
            ArrForEach(dims) {
                const runtime = this._runtime;
                const eventSheetManager =
                    runtime.GetEventSheetManager();
                const currentEvent = runtime.GetCurrentEvent();
                const solModifiers = currentEvent.GetSolModifiers();
                const eventStack = runtime.GetEventStack();
                const oldFrame = eventStack.GetCurrentStackFrame();
                const newFrame = eventStack.Push(currentEvent);
                const forDepth = ++this._forDepth;
                const forX = this._forX;
                const forY = this._forY;
                const forZ = this._forZ;
                const cx = this._cx;
                const cy = this._cy;
                const cz = this._cz;
                if (forDepth === this._forX.length) {
                    forX.push(0);
                    forY.push(0);
                    forZ.push(0)
                } else {
                    forX[forDepth] =
                        0;
                    forY[forDepth] = 0;
                    forZ[forDepth] = 0
                }
                runtime.SetDebuggingEnabled(false);
                if (dims === 0)
                    for (let x = 0; x < cx; ++x)
                        for (let y = 0; y < cy; ++y)
                            for (let z = 0; z < cz; ++z) {
                                forX[forDepth] = x;
                                forY[forDepth] = y;
                                forZ[forDepth] = z;
                                DoForEachTrigger(eventSheetManager, currentEvent, solModifiers, oldFrame, newFrame)
                            } else if (dims === 1)
                                for (let x = 0; x < cx; ++x)
                                    for (let y = 0; y < cy; ++y) {
                                        forX[forDepth] = x;
                                        forY[forDepth] = y;
                                        DoForEachTrigger(eventSheetManager, currentEvent, solModifiers, oldFrame, newFrame)
                                    } else
                                        for (let x = 0; x < cx; ++x) {
                                            forX[forDepth] = x;
                                            DoForEachTrigger(eventSheetManager,
                                                currentEvent, solModifiers, oldFrame, newFrame)
                                        }
                runtime.SetDebuggingEnabled(true);
                this._forDepth--;
                eventStack.Pop();
                return false
            },
            CompareCurrent(cmp, val) {
                return C3.compare(this.At(this._GetForX(), this._GetForY(), this._GetForZ()), cmp, val)
            },
            Contains(val) {
                const cx = this._cx;
                const cy = this._cy;
                const cz = this._cz;
                const arr = this._arr;
                for (let x = 0; x < cx; ++x)
                    for (let y = 0; y < cy; ++y)
                        for (let z = 0; z < cz; ++z)
                            if (arr[x][y][z] === val) return true;
                return false
            },
            IsEmpty() {
                return this._cx === 0 || this._cy === 0 || this._cz === 0
            },
            CompareSize(axis,
                cmp, val) {
                let s = 0;
                switch (axis) {
                    case 0:
                        s = this._cx;
                        break;
                    case 1:
                        s = this._cy;
                        break;
                    case 2:
                        s = this._cz;
                        break
                }
                return C3.compare(s, cmp, val)
            }
        }
    } {
        const C3 = self.C3;

        function CompareValues(va, vb) {
            if (typeof va === "number" && typeof vb === "number") return va - vb;
            else {
                const sa = va.toString();
                const sb = vb.toString();
                if (sa < sb) return -1;
                else if (sa > sb) return 1;
                else return 0
            }
        }
        C3.Plugins.Arr.Acts = {
            Clear(v) {
                const cx = this._cx;
                const cy = this._cy;
                const cz = this._cz;
                const arr = this._arr;
                for (let x = 0; x < cx; ++x)
                    for (let y = 0; y < cy; ++y)
                        for (let z = 0; z < cz; ++z) arr[x][y][z] = v
            },
            SetSize(w, h, d) {
                this.SetSize(w, h, d)
            },
            SetX(x, val) {
                this.Set(x, 0, 0, val)
            },
            SetXY(x, y, val) {
                this.Set(x, y, 0, val)
            },
            SetXYZ(x, y, z, val) {
                this.Set(x, y, z, val)
            },
            Push(where, value, axis) {
                const cx = this._cx;
                const cy = this._cy;
                const cz = this._cz;
                const arr = this._arr;
                if (axis === 0) {
                    const add = C3.MakeFilledArray(cy, () => C3.MakeFilledArray(cz, value));
                    if (where === 0) arr.push(add);
                    else arr.unshift(add);
                    this._cx++
                } else if (axis === 1) {
                    for (let x = 0; x < cx; ++x) {
                        const add = C3.MakeFilledArray(cz, value);
                        if (where === 0) arr[x].push(add);
                        else arr[x].unshift(add)
                    }
                    this._cy++
                } else {
                    for (let x = 0; x < cx; ++x)
                        for (let y = 0; y < cy; ++y)
                            if (where === 0) arr[x][y].push(value);
                            else arr[x][y].unshift(value);
                    this._cz++
                }
            },
            Pop(where, axis) {
                const cx = this._cx;
                const cy = this._cy;
                const cz = this._cz;
                const arr = this._arr;
                if (axis === 0) {
                    if (cx === 0) return;
                    if (where === 0) arr.pop();
                    else arr.shift();
                    this._cx--
                } else if (axis === 1) {
                    if (cy === 0) return;
                    for (let x = 0; x < cx; ++x)
                        if (where === 0) arr[x].pop();
                        else arr[x].shift();
                    this._cy--
                } else {
                    if (cz === 0) return;
                    for (let x = 0; x < cx; ++x)
                        for (let y = 0; y < cy; ++y)
                            if (where === 0) arr[x][y].pop();
                            else arr[x][y].shift();
                    this._cz--
                }
            },
            Reverse(axis) {
                const cx = this._cx;
                const cy = this._cy;
                const cz = this._cz;
                const arr = this._arr;
                if (cx === 0 || cy === 0 || cz === 0) return;
                if (axis === 0) arr.reverse();
                else if (axis === 1)
                    for (let x = 0; x < cx; ++x) arr[x].reverse();
                else
                    for (let x = 0; x < cx; ++x)
                        for (let y = 0; y < cy; ++y) arr[x][y].reverse()
            },
            Sort(axis) {
                const cx = this._cx;
                const cy = this._cy;
                const cz = this._cz;
                const arr = this._arr;
                if (cx === 0 || cy === 0 || cz === 0) return;
                if (axis === 0) arr.sort((a, b) => CompareValues(a[0][0], b[0][0]));
                else if (axis === 1)
                    for (let x = 0; x < cx; ++x) arr[x].sort((a, b) => CompareValues(a[0], b[0]));
                else
                    for (let x = 0; x < cx; ++x)
                        for (let y =
                                0; y < cy; ++y) arr[x][y].sort(CompareValues)
            },
            Shuffle(axis) {
                const cx = this._cx;
                const cy = this._cy;
                const cz = this._cz;
                if (cx === 0 || cy === 0 || cz === 0) return;
                if (axis === 0)
                    for (let y = 0; y < cy; ++y)
                        for (let z = 0; z < cz; ++z) this._ShuffleHelper(axis, cx, 0, y, z);
                else if (axis === 1)
                    for (let x = 0; x < cx; ++x)
                        for (let z = 0; z < cz; ++z) this._ShuffleHelper(axis, cy, x, 0, z);
                else
                    for (let x = 0; x < cx; ++x)
                        for (let y = 0; y < cy; ++y) this._ShuffleHelper(axis, cz, x, y, 0)
            },
            Delete(index, axis) {
                index = Math.floor(index);
                if (index < 0) return;
                const cx = this._cx;
                const cy = this._cy;
                const cz = this._cz;
                const arr = this._arr;
                if (axis === 0) {
                    if (index >= cx) return;
                    arr.splice(index, 1);
                    this._cx--
                } else if (axis === 1) {
                    if (index >= cy) return;
                    for (let x = 0; x < cx; ++x) arr[x].splice(index, 1);
                    this._cy--
                } else {
                    if (index >= cz) return;
                    for (let x = 0; x < cx; ++x)
                        for (let y = 0; y < cy; ++y) arr[x][y].splice(index, 1);
                    this._cz--
                }
            },
            Insert(value, index, axis) {
                index = Math.floor(index);
                if (index < 0) return;
                const cx = this._cx;
                const cy = this._cy;
                const cz = this._cz;
                const arr = this._arr;
                if (axis === 0) {
                    if (index > cx) return;
                    arr.splice(index, 0, C3.MakeFilledArray(cy,
                        () => C3.MakeFilledArray(cz, value)));
                    this._cx++
                } else if (axis === 1) {
                    if (index > cy) return;
                    for (let x = 0; x < cx; ++x) arr[x].splice(index, 0, C3.MakeFilledArray(cz, value));
                    this._cy++
                } else {
                    if (index > cz) return;
                    for (let x = 0; x < cx; ++x)
                        for (let y = 0; y < cy; ++y) arr[x][y].splice(index, 0, value);
                    this._cz++
                }
            },
            SplitString(str, sep, type) {
                const parts = str.split(sep);
                this.SetSize(parts.length, 1, 1);
                for (let i = 0, len = parts.length; i < len; ++i) {
                    let v = parts[i];
                    if (type === 0) {
                        if (String(Number(v)) === v) v = Number(v)
                    } else if (type === 2) v = Number(v);
                    this.Set(i,
                        0, 0, v)
                }
            },
            JSONLoad(json) {
                let o = null;
                try {
                    o = JSON.parse(json)
                } catch (err) {
                    console.error("[Construct] Failed to parse JSON: ", err);
                    return
                }
                if (!o["c2array"]) return;
                const sz = o["size"];
                this._cx = sz[0];
                this._cy = sz[1];
                this._cz = sz[2];
                this._arr = o["data"]
            },
            JSONDownload(filename) {
                const url = URL.createObjectURL(new Blob([this.GetAsJsonString()], {
                    type: "application/json"
                }));
                this._runtime.InvokeDownload(url, filename)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Arr.Exps = {
            At(x, y, z) {
                return this.At(x, y || 0, z || 0)
            },
            Width() {
                return this._cx
            },
            Height() {
                return this._cy
            },
            Depth() {
                return this._cz
            },
            CurX() {
                return this._GetForX()
            },
            CurY() {
                return this._GetForY()
            },
            CurZ() {
                return this._GetForZ()
            },
            CurValue() {
                return this.At(this._GetForX(), this._GetForY(), this._GetForZ())
            },
            Front() {
                return this.At(0, 0, 0)
            },
            Back() {
                return this.At(this._cx - 1, 0, 0)
            },
            IndexOf(v) {
                const arr = this._arr;
                for (let x = 0, len = this._cx; x < len; ++x)
                    if (arr[x][0][0] === v) return x;
                return -1
            },
            LastIndexOf(v) {
                const arr =
                    this._arr;
                for (let x = this._cx - 1; x >= 0; --x)
                    if (arr[x][0][0] === v) return x;
                return -1
            },
            JoinString(sep) {
                let arr = [];
                for (let x = 0; x < this._cx; ++x) arr.push(this.At(x, 0, 0));
                return arr.join(sep)
            },
            AsJSON() {
                return this.GetAsJsonString()
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        const actionPromises = [];
        C3.Plugins.Audio = class AudioPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            _AddActionPromise(promise) {
                actionPromises.push(promise)
            }
            static async WaitForAllActionPromises() {
                await Promise.all(actionPromises);
                C3.clearArray(actionPromises)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        C3.Plugins.Audio.Type = class AudioType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
            GetScriptInterfaceClass() {
                return self.IAudioObjectType
            }
        };

        function GetAudioDOMInterface() {
            if (self["C3Audio_DOMInterface"]) return self["C3Audio_DOMInterface"];
            else throw new Error("audio scripting API cannot be used here - make sure the project is using DOM mode, not worker mode");
        }
        self.IAudioObjectType = class IAudioObjectType extends self.IObjectClass {
            constructor(objectType) {
                super(objectType)
            }
            get audioContext() {
                return GetAudioDOMInterface().GetAudioContext()
            }
            get destinationNode() {
                return GetAudioDOMInterface().GetDestinationNode()
            }
        }
    } {
        const C3 = self.C3;
        const DOM_COMPONENT_ID = "audio";
        const LATENCY_HINTS = ["interactive", "balanced", "playback"];
        C3.Plugins.Audio.Instance = class AudioInstance extends C3.SDKInstanceBase {
            constructor(inst, properties) {
                super(inst, DOM_COMPONENT_ID);
                this._nextPlayTime = 0;
                this._triggerTags = [];
                this._enableMultiTags = true;
                this._timeScaleMode = 0;
                this._saveLoadMode = 0;
                this._playInBackground = false;
                this._panningModel = 1;
                this._distanceModel = 1;
                this._listenerPos = [this._runtime.GetViewportWidth() / 2, this._runtime.GetViewportHeight() /
                    2, 600
                ];
                this._listenerForwardVec = [0, 0, -1];
                this._listenerUpVec = [0, 1, 0];
                this._referenceDistance = 600;
                this._maxDistance = 1E4;
                this._rolloffFactor = 1;
                this._listenerInst = null;
                this._loadListenerUid = -1;
                this._masterVolume = 1;
                this._isSilent = false;
                this._sampleRate = 0;
                this._audioContextState = "suspended";
                this._outputLatency = 0;
                this._effectCount = new Map;
                this._preloadTotal = 0;
                this._preloadCount = 0;
                this._bufferMetadata = new Map;
                this._remoteUrls = new Map;
                let latencyHint = "interactive";
                if (properties) {
                    this._timeScaleMode = properties[0];
                    this._saveLoadMode = properties[1];
                    this._playInBackground = properties[2];
                    latencyHint = LATENCY_HINTS[properties[3]];
                    this._enableMultiTags = properties[4];
                    this._panningModel = properties[5];
                    this._distanceModel = properties[6];
                    this._listenerPos[2] = properties[7];
                    this._referenceDistance = properties[8];
                    this._maxDistance = properties[9];
                    this._rolloffFactor = properties[10]
                }
                this._lastAIState = [];
                this._lastFxState = [];
                this._lastAnalysersData = [];
                this.AddDOMMessageHandlers([
                    ["state", e => this._OnUpdateState(e)],
                    ["audiocontext-state",
                        e => this._OnAudioContextStateChanged(e)
                    ],
                    ["fxstate", e => this._OnUpdateFxState(e)],
                    ["trigger", e => this._OnTrigger(e)],
                    ["buffer-metadata", e => this._OnBufferMetadata(e)]
                ]);
                const rt = this.GetRuntime().Dispatcher();
                this._disposables = new C3.CompositeDisposable(C3.Disposable.From(rt, "instancedestroy", e => this._OnInstanceDestroyed(e.instance)), C3.Disposable.From(rt, "afterload", () => this._OnAfterLoad()), C3.Disposable.From(rt, "suspend", () => this._OnSuspend()), C3.Disposable.From(rt, "resume", () => this._OnResume()));
                this._runtime.AddLoadPromise(this.PostToDOMAsync("create-audio-context", {
                    "preloadList": this._runtime.GetAssetManager().GetAudioToPreload().map(o => ({
                        "originalUrl": o.originalUrl,
                        "url": o.url,
                        "type": o.type,
                        "fileSize": o.fileSize
                    })),
                    "isiOSCordova": this._runtime.IsiOSCordova(),
                    "isSafari": C3.Platform.Browser === "Safari",
                    "timeScaleMode": this._timeScaleMode,
                    "latencyHint": latencyHint,
                    "panningModel": this._panningModel,
                    "distanceModel": this._distanceModel,
                    "refDistance": this._referenceDistance,
                    "maxDistance": this._maxDistance,
                    "rolloffFactor": this._rolloffFactor,
                    "listenerPos": this._listenerPos
                }).then(info => {
                    this._sampleRate = info["sampleRate"];
                    this._audioContextState = info["audioContextState"];
                    this._outputLatency = info["outputLatency"]
                }));
                this._StartTicking()
            }
            Release() {
                this._listenerInst = null;
                super.Release()
            }
            _SplitTags(tagStr) {
                if (this._enableMultiTags) return tagStr.split(" ").filter(s => !!s);
                else return tagStr ? [tagStr] : []
            }
            _MatchTagLists(tagArr1, tagArr2) {
                for (const t2 of tagArr2) {
                    let found = false;
                    for (const t1 of tagArr1)
                        if (C3.equalsNoCase(t1, t2)) {
                            found = true;
                            break
                        }
                    if (!found) return false
                }
                return true
            }
            _MatchTagListToStr(tagArr,
                tagStr) {
                return this._MatchTagLists(tagArr, this._SplitTags(tagStr))
            }
            _AddActionPromise(promise) {
                this.GetPlugin()._AddActionPromise(promise)
            }
            _OnInstanceDestroyed(inst) {
                if (this._listenerInst === inst) this._listenerInst = null
            }
            DbToLinearNoCap(x) {
                return Math.pow(10, x / 20)
            }
            DbToLinear(x) {
                const v = this.DbToLinearNoCap(x);
                if (!isFinite(v)) return 0;
                return Math.max(Math.min(v, 1), 0)
            }
            LinearToDbNoCap(x) {
                return Math.log(x) / Math.log(10) * 20
            }
            LinearToDb(x) {
                return this.LinearToDbNoCap(Math.max(Math.min(x, 1), 0))
            }
            _OnSuspend() {
                if (this._playInBackground) return;
                this.PostToDOM("set-suspended", {
                    "isSuspended": true
                })
            }
            _OnResume() {
                if (this._playInBackground) return;
                this.PostToDOM("set-suspended", {
                    "isSuspended": false
                })
            }
            _OnUpdateState(e) {
                const tickCount = e["tickCount"];
                this._outputLatency = e["outputLatency"];
                const preservePlaceholders = this._lastAIState.filter(ai => ai.hasOwnProperty("placeholder") && (ai["placeholder"] > tickCount || ai["placeholder"] === -1));
                this._lastAIState = e["audioInstances"];
                this._lastAnalysersData = e["analysers"];
                if (preservePlaceholders.length > 0) C3.appendArray(this._lastAIState,
                    preservePlaceholders)
            }
            _OnBufferMetadata(e) {
                this._bufferMetadata.set(e["originalUrl"], {
                    duration: e["duration"]
                })
            }
            _OnAudioContextStateChanged(e) {
                this._audioContextState = e["audioContextState"]
            }
            GetAudioContextState() {
                if (this._runtime.IsExportToVideo()) return "running";
                else return this._audioContextState
            }
            _OnUpdateFxState(e) {
                this._lastFxState = e["fxstate"]
            }
            _GetFirstAudioStateByTags(tagStr) {
                const tagArr = this._SplitTags(tagStr);
                for (const a of this._lastAIState)
                    if (this._MatchTagLists(a["tags"], tagArr)) return a;
                return null
            }
            _IsTagPlaying(tagStr) {
                const tagArr = this._SplitTags(tagStr);
                return this._lastAIState.some(ai => this._MatchTagLists(ai["tags"], tagArr) && ai["isPlaying"])
            }
            _MaybeMarkAsPlaying(originalUrl, tagStr, isMusic, isLooping, vol) {
                if (this._IsTagPlaying(tagStr)) return null;
                const bufferMeta = this._bufferMetadata.get(originalUrl);
                const state = {
                    "tags": this._SplitTags(tagStr),
                    "duration": bufferMeta ? bufferMeta.duration : 0,
                    "volume": vol,
                    "isPlaying": true,
                    "playbackTime": 0,
                    "playbackRate": 1,
                    "uid": -1,
                    "bufferOriginalUrl": originalUrl,
                    "bufferUrl": "",
                    "bufferType": "",
                    "isMusic": isMusic,
                    "isLooping": isLooping,
                    "isMuted": false,
                    "resumePosition": 0,
                    "pan": null,
                    "placeholder": -1
                };
                this._lastAIState.push(state);
                return state
            }
            async _OnTrigger(e) {
                const type = e["type"];
                this._triggerTags = e["tags"];
                const aiId = e["aiid"];
                if (type === "ended") {
                    for (const aiState of this._lastAIState)
                        if (aiState["aiid"] === aiId) {
                            aiState["isPlaying"] = false;
                            break
                        }
                    await this.TriggerAsync(C3.Plugins.Audio.Cnds.OnEnded)
                } else if (type === "fade-ended") await this.TriggerAsync(C3.Plugins.Audio.Cnds.OnFadeEnded)
            }
            _MatchTriggerTag(tagStr) {
                return this._MatchTagListToStr(this._triggerTags,
                    tagStr)
            }
            Tick() {
                const o = {
                    "timeScale": this._runtime.GetTimeScale(),
                    "gameTime": this._runtime.GetGameTimeRaw(),
                    "instPans": this.GetInstancePans(),
                    "tickCount": this._runtime.GetTickCountNoSave()
                };
                if (this._listenerInst) {
                    const wi = this._listenerInst.GetWorldInfo();
                    this._listenerPos[0] = wi.GetX();
                    this._listenerPos[1] = wi.GetY();
                    o["listenerPos"] = this._listenerPos;
                    o["listenerOrientation"] = [...this._listenerForwardVec, ...this._listenerUpVec]
                }
                this.PostToDOM("tick", o)
            }
            rotatePtAround(px, py, a, ox, oy) {
                if (a === 0) return [px,
                    py
                ];
                const sin_a = Math.sin(a);
                const cos_a = Math.cos(a);
                px -= ox;
                py -= oy;
                const left_sin_a = px * sin_a;
                const top_sin_a = py * sin_a;
                const left_cos_a = px * cos_a;
                const top_cos_a = py * cos_a;
                px = left_cos_a - top_sin_a;
                py = top_cos_a + left_sin_a;
                px += ox;
                py += oy;
                return [px, py]
            }
            GetInstancePans() {
                return this._lastAIState.filter(ai => ai["uid"] !== -1).map(ai => this._runtime.GetInstanceByUID(ai["uid"])).filter(inst => inst).map(inst => {
                    const wi = inst.GetWorldInfo();
                    const layerAngle = wi.GetLayer().GetAngle();
                    const [x, y] = this.rotatePtAround(wi.GetX(),
                        wi.GetY(), -layerAngle, this._listenerPos[0], this._listenerPos[1]);
                    return {
                        "uid": inst.GetUID(),
                        "x": x,
                        "y": y,
                        "z": wi.GetTotalZElevation(),
                        "angle": wi.GetAngle() - layerAngle
                    }
                })
            }
            GetAnalyserData(tagStr, index) {
                for (const o of this._lastAnalysersData)
                    if (o.index === index && C3.equalsNoCase(o["tag"], tagStr)) return o;
                return null
            }
            _IncrementEffectCount(tagStr) {
                for (const tag of this._SplitTags(tagStr)) {
                    const lowerTag = tag.toLowerCase();
                    this._effectCount.set(lowerTag, (this._effectCount.get(lowerTag) || 0) + 1)
                }
            }
            _ShouldSave(ai) {
                if (ai.hasOwnProperty("placeholder")) return false;
                if (this._saveLoadMode === 3) return false;
                else if (ai["isMusic"] && this._saveLoadMode === 1) return false;
                else if (!ai["isMusic"] && this._saveLoadMode === 2) return false;
                else return true
            }
            SaveToJson() {
                return {
                    "isSilent": this._isSilent,
                    "masterVolume": this._masterVolume,
                    "listenerZ": this._listenerPos[2],
                    "listenerForwardVec": this._listenerForwardVec,
                    "listenerUpVec": this._listenerUpVec,
                    "listenerUid": this._listenerInst ? this._listenerInst.GetUID() : -1,
                    "remoteUrls": [...this._remoteUrls.entries()],
                    "playing": this._lastAIState.filter(ai =>
                        this._ShouldSave(ai)),
                    "effects": this._lastFxState,
                    "analysers": this._lastAnalysersData
                }
            }
            LoadFromJson(o) {
                this._isSilent = o["isSilent"];
                this._masterVolume = o["masterVolume"];
                this._listenerPos[2] = o["listenerZ"];
                this._listenerInst = null;
                this._loadListenerUid = o["listenerUid"];
                if (o.hasOwnProperty("listenerForwardVec")) this._listenerForwardVec = o["listenerForwardVec"];
                else this._listenerForwardVec = [0, 0, -1];
                if (o.hasOwnProperty("listenerUpVec")) this._listenerUpVec = o["listenerUpVec"];
                else this._listenerUpVec = [0,
                    1, 0
                ];
                this._remoteUrls.clear();
                if (o["remoteUrls"])
                    for (const [k, v] of o["remoteUrls"]) this._remoteUrls.set(k, v);
                this._lastAIState = o["playing"];
                for (const a of this._lastAIState)
                    if (a.hasOwnProperty("tag") && !a.hasOwnProperty("tags")) a["tags"] = [a["tag"]].filter(s => !!s);
                this._lastFxState = o["effects"];
                this._lastAnalysersData = o["analysers"]
            }
            _OnAfterLoad() {
                if (this._loadListenerUid !== -1) {
                    this._listenerInst = this._runtime.GetInstanceByUID(this._loadListenerUid);
                    this._loadListenerUid = -1;
                    if (this._listenerInst) {
                        const wi =
                            this._listenerInst.GetWorldInfo();
                        this._listenerPos[0] = wi.GetX();
                        this._listenerPos[1] = wi.GetY()
                    }
                }
                for (const ai of this._lastAIState) {
                    const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(ai["bufferOriginalUrl"]);
                    if (info) {
                        ai["bufferUrl"] = info.url;
                        ai["bufferType"] = info.type
                    } else ai["bufferUrl"] = null
                }
                for (const fxChainData of Object.values(this._lastFxState))
                    for (const fxData of fxChainData)
                        if (fxData.hasOwnProperty("bufferOriginalUrl")) {
                            const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(fxData["bufferOriginalUrl"]);
                            if (info) {
                                fxData["bufferUrl"] = info.url;
                                fxData["bufferType"] = info.type
                            }
                        }
                this.PostToDOM("load-state", {
                    "saveLoadMode": this._saveLoadMode,
                    "timeScale": this._runtime.GetTimeScale(),
                    "gameTime": this._runtime.GetGameTimeRaw(),
                    "listenerPos": this._listenerPos,
                    "listenerOrientation": [...this._listenerForwardVec, ...this._listenerUpVec],
                    "isSilent": this._isSilent,
                    "masterVolume": this._masterVolume,
                    "playing": this._lastAIState.filter(ai => ai["bufferUrl"] !== null),
                    "effects": this._lastFxState
                })
            }
            GetDebuggerProperties() {
                const fxProps = [];
                for (const [tag, fxChainData] of Object.entries(this._lastFxState)) fxProps.push({
                    name: "$" + tag,
                    value: fxChainData.map(d => d["type"]).join(", ")
                });
                const prefix = "plugins.audio.debugger";
                return [{
                    title: prefix + ".tag-effects",
                    properties: fxProps
                }, {
                    title: prefix + ".currently-playing",
                    properties: [{
                        name: prefix + ".currently-playing-count",
                        value: this._lastAIState.length
                    }, ...this._lastAIState.map((s, index) => ({
                        name: "$#" + index,
                        value: `${s["bufferOriginalUrl"]} ("${s["tags"]}") ${Math.round(s["playbackTime"]*10)/10} / ${Math.round(s["duration"]*
10)/10}`
                    }))]
                }]
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Audio.Cnds = {
            OnEnded(tagStr) {
                return this._MatchTriggerTag(tagStr)
            },
            OnFadeEnded(tagStr) {
                return this._MatchTriggerTag(tagStr)
            },
            PreloadsComplete() {
                return this._preloadCount === this._preloadTotal
            },
            AdvancedAudioSupported() {
                return true
            },
            IsSilent() {
                return this._isSilent
            },
            IsAnyPlaying() {
                for (const ai of this._lastAIState)
                    if (ai["isPlaying"]) return true;
                return false
            },
            IsTagPlaying(tagStr) {
                return this._IsTagPlaying(tagStr)
            }
        }
    } {
        const C3 = self.C3;
        const FILTER_TYPES = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "peaking", "notch", "allpass"];
        C3.Plugins.Audio.Acts = {
            Play(file, looping, vol, stereoPan, tagStr) {
                const ret = C3.Plugins.Audio.Acts._DoPlay.call(this, file, looping, vol, stereoPan, tagStr);
                this._AddActionPromise(ret);
                return ret
            },
            PlayFromTimeline(file, vol, tagStr, startOffset) {
                C3.Plugins.Audio.Acts._DoPlay.call(this, file, 0, vol, 0, tagStr, startOffset)
            },
            async _DoPlay(file, looping, vol, stereoPan, tagStr, startOffset) {
                if (this._isSilent) return;
                const isMusic = file[1];
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(file[0]);
                if (!info) return;
                const nextPlayTime = this._nextPlayTime;
                this._nextPlayTime = 0;
                const state = this._MaybeMarkAsPlaying(file[0], tagStr, isMusic, looping !== 0, this.DbToLinear(vol));
                try {
                    await this.PostToDOMAsync("play", {
                        "originalUrl": file[0],
                        "url": info.url,
                        "type": info.type,
                        "isMusic": isMusic,
                        "tags": this._SplitTags(tagStr),
                        "isLooping": looping !== 0,
                        "vol": this.DbToLinear(vol),
                        "stereoPan": C3.clamp(stereoPan / 100, -1, 1),
                        "pos": startOffset ||
                            0,
                        "off": nextPlayTime,
                        "trueClock": !!self["C3_GetAudioContextCurrentTime"]
                    })
                } finally {
                    if (state) state["placeholder"] = this._runtime.GetTickCountNoSave()
                }
            },
            async PlayAtPosition(file, looping, vol, x, y, z, angle, innerAngle, outerAngle, outerGain, tagStr) {
                if (this._isSilent) return;
                const isMusic = file[1];
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(file[0]);
                if (!info) return;
                const nextPlayTime = this._nextPlayTime;
                this._nextPlayTime = 0;
                const state = this._MaybeMarkAsPlaying(file[0], tagStr, isMusic, looping !==
                    0, this.DbToLinear(vol));
                try {
                    await this.PostToDOMAsync("play", {
                        "originalUrl": file[0],
                        "url": info.url,
                        "type": info.type,
                        "isMusic": isMusic,
                        "tags": this._SplitTags(tagStr),
                        "isLooping": looping !== 0,
                        "vol": this.DbToLinear(vol),
                        "pos": 0,
                        "off": nextPlayTime,
                        "trueClock": !!self["C3_GetAudioContextCurrentTime"],
                        "panning": {
                            "x": x,
                            "y": y,
                            "z": z,
                            "angle": C3.toRadians(angle),
                            "innerAngle": C3.toRadians(innerAngle),
                            "outerAngle": C3.toRadians(outerAngle),
                            "outerGain": this.DbToLinear(outerGain)
                        }
                    })
                } finally {
                    if (state) state["placeholder"] =
                        this._runtime.GetTickCountNoSave()
                }
            },
            async PlayAtObject(file, looping, vol, objectClass, innerAngle, outerAngle, outerGain, tagStr) {
                if (this._isSilent) return;
                if (!objectClass) return;
                const inst = objectClass.GetFirstPicked();
                if (!inst || !inst.GetWorldInfo()) return;
                const wi = inst.GetWorldInfo();
                const layerAngle = wi.GetLayer().GetAngle();
                const [x, y] = this.rotatePtAround(wi.GetX(), wi.GetY(), -layerAngle, this._listenerPos[0], this._listenerPos[1]);
                const isMusic = file[1];
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(file[0]);
                if (!info) return;
                const nextPlayTime = this._nextPlayTime;
                this._nextPlayTime = 0;
                const state = this._MaybeMarkAsPlaying(file[0], tagStr, isMusic, looping !== 0, this.DbToLinear(vol));
                try {
                    await this.PostToDOMAsync("play", {
                        "originalUrl": file[0],
                        "url": info.url,
                        "type": info.type,
                        "isMusic": isMusic,
                        "tags": this._SplitTags(tagStr),
                        "isLooping": looping !== 0,
                        "vol": this.DbToLinear(vol),
                        "pos": 0,
                        "off": nextPlayTime,
                        "trueClock": !!self["C3_GetAudioContextCurrentTime"],
                        "panning": {
                            "x": x,
                            "y": y,
                            "z": wi.GetTotalZElevation(),
                            "angle": wi.GetAngle() -
                                layerAngle,
                            "innerAngle": C3.toRadians(innerAngle),
                            "outerAngle": C3.toRadians(outerAngle),
                            "outerGain": this.DbToLinear(outerGain),
                            "uid": inst.GetUID()
                        }
                    })
                } finally {
                    if (state) state["placeholder"] = this._runtime.GetTickCountNoSave()
                }
            },
            async PlayByName(folder, filename, looping, vol, stereoPan, tagStr) {
                if (this._isSilent) return;
                const isMusic = folder === 1;
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(filename) || this._remoteUrls.get(filename.toLowerCase());
                if (!info) return;
                const nextPlayTime = this._nextPlayTime;
                this._nextPlayTime = 0;
                const state = this._MaybeMarkAsPlaying(filename, tagStr, isMusic, looping !== 0, this.DbToLinear(vol));
                try {
                    await this.PostToDOMAsync("play", {
                        "originalUrl": filename,
                        "url": info.url,
                        "type": info.type,
                        "isMusic": isMusic,
                        "tags": this._SplitTags(tagStr),
                        "isLooping": looping !== 0,
                        "vol": this.DbToLinear(vol),
                        "stereoPan": C3.clamp(stereoPan / 100, -1, 1),
                        "pos": 0,
                        "off": nextPlayTime,
                        "trueClock": !!self["C3_GetAudioContextCurrentTime"]
                    })
                } finally {
                    if (state) state["placeholder"] = this._runtime.GetTickCountNoSave()
                }
            },
            async PlayAtPositionByName(folder, filename, looping, vol, x, y, z, angle, innerAngle, outerAngle, outerGain, tagStr) {
                if (this._isSilent) return;
                const isMusic = folder === 1;
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(filename) || this._remoteUrls.get(filename.toLowerCase());
                if (!info) return;
                const nextPlayTime = this._nextPlayTime;
                this._nextPlayTime = 0;
                const state = this._MaybeMarkAsPlaying(filename, tagStr, isMusic, looping !== 0, this.DbToLinear(vol));
                try {
                    await this.PostToDOMAsync("play", {
                        "originalUrl": filename,
                        "url": info.url,
                        "type": info.type,
                        "isMusic": isMusic,
                        "tags": this._SplitTags(tagStr),
                        "isLooping": looping !== 0,
                        "vol": this.DbToLinear(vol),
                        "pos": 0,
                        "off": nextPlayTime,
                        "trueClock": !!self["C3_GetAudioContextCurrentTime"],
                        "panning": {
                            "x": x,
                            "y": y,
                            "z": z,
                            "angle": C3.toRadians(angle),
                            "innerAngle": C3.toRadians(innerAngle),
                            "outerAngle": C3.toRadians(outerAngle),
                            "outerGain": this.DbToLinear(outerGain)
                        }
                    })
                } finally {
                    if (state) state["placeholder"] = this._runtime.GetTickCountNoSave()
                }
            },
            async PlayAtObjectByName(folder, filename,
                looping, vol, objectClass, innerAngle, outerAngle, outerGain, tagStr) {
                if (this._isSilent) return;
                if (this._isSilent) return;
                if (!objectClass) return;
                const inst = objectClass.GetFirstPicked();
                if (!inst || !inst.GetWorldInfo()) return;
                const wi = inst.GetWorldInfo();
                const layerAngle = wi.GetLayer().GetAngle();
                const [x, y] = this.rotatePtAround(wi.GetX(), wi.GetY(), -layerAngle, this._listenerPos[0], this._listenerPos[1]);
                const isMusic = folder === 1;
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(filename) || this._remoteUrls.get(filename.toLowerCase());
                if (!info) return;
                const nextPlayTime = this._nextPlayTime;
                this._nextPlayTime = 0;
                const state = this._MaybeMarkAsPlaying(filename, tagStr, isMusic, looping !== 0, this.DbToLinear(vol));
                try {
                    await this.PostToDOMAsync("play", {
                        "originalUrl": filename,
                        "url": info.url,
                        "type": info.type,
                        "isMusic": isMusic,
                        "tags": this._SplitTags(tagStr),
                        "isLooping": looping !== 0,
                        "vol": this.DbToLinear(vol),
                        "pos": 0,
                        "off": nextPlayTime,
                        "trueClock": !!self["C3_GetAudioContextCurrentTime"],
                        "panning": {
                            "x": x,
                            "y": y,
                            "z": wi.GetTotalZElevation(),
                            "angle": wi.GetAngle() -
                                layerAngle,
                            "innerAngle": C3.toRadians(innerAngle),
                            "outerAngle": C3.toRadians(outerAngle),
                            "outerGain": this.DbToLinear(outerGain),
                            "uid": inst.GetUID()
                        }
                    })
                } finally {
                    if (state) state["placeholder"] = this._runtime.GetTickCountNoSave()
                }
            },
            SetLooping(tagStr, looping) {
                this.PostToDOM("set-looping", {
                    "tags": this._SplitTags(tagStr),
                    "isLooping": looping === 0
                })
            },
            SetMuted(tagStr, muted) {
                this.PostToDOM("set-muted", {
                    "tags": this._SplitTags(tagStr),
                    "isMuted": muted === 0
                })
            },
            SetVolume(tagStr, vol) {
                this.PostToDOM("set-volume", {
                    "tags": this._SplitTags(tagStr),
                    "vol": this.DbToLinear(vol)
                })
            },
            FadeVolume(tagStr, vol, duration, ending) {
                this.PostToDOM("fade-volume", {
                    "tags": this._SplitTags(tagStr),
                    "vol": this.DbToLinear(vol),
                    "duration": duration,
                    "stopOnEnd": ending === 0
                })
            },
            SetStereoPan(tagStr, p) {
                this.PostToDOM("set-stereo-pan", {
                    "tags": this._SplitTags(tagStr),
                    "p": C3.clamp(p / 100, -1, 1)
                })
            },
            async Preload(file) {
                const isMusic = file[1];
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(file[0]);
                if (!info) return;
                this._preloadTotal++;
                await this.PostToDOMAsync("preload", {
                    "originalUrl": file[0],
                    "url": info.url,
                    "type": info.type,
                    "isMusic": isMusic
                });
                this._preloadCount++
            },
            async PreloadByName(folder, filename) {
                const isMusic = folder === 1;
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(filename) || this._remoteUrls.get(filename.toLowerCase());
                if (!info) return;
                this._preloadTotal++;
                await this.PostToDOMAsync("preload", {
                    "originalUrl": filename,
                    "url": info.url,
                    "type": info.type,
                    "isMusic": isMusic
                });
                this._preloadCount++
            },
            SetPlaybackRate(tagStr, rate) {
                this.PostToDOM("set-playback-rate", {
                    "tags": this._SplitTags(tagStr),
                    "rate": Math.max(rate, 0)
                })
            },
            Stop(tagStr) {
                this.PostToDOM("stop", {
                    "tags": this._SplitTags(tagStr)
                })
            },
            StopAll() {
                this.PostToDOM("stop-all")
            },
            SetPaused(tagStr, state) {
                this.PostToDOM("set-paused", {
                    "tags": this._SplitTags(tagStr),
                    "paused": state === 0
                })
            },
            Seek(tagStr, pos) {
                this.PostToDOM("seek", {
                    "tags": this._SplitTags(tagStr),
                    "pos": pos
                })
            },
            SetSilent(s) {
                if (s === 2) s = this._isSilent ? 1 : 0;
                s = s === 0;
                if (this._isSilent === s) return;
                this._isSilent = s;
                this.PostToDOM("set-silent", {
                    "isSilent": s
                })
            },
            SetMasterVolume(vol) {
                const mv =
                    this.DbToLinear(vol);
                if (this._masterVolume === mv) return;
                this._masterVolume = mv;
                this.PostToDOM("set-master-volume", {
                    "vol": mv
                })
            },
            AddFilterEffect(tagStr, type, freq, detune, q, gain, mix) {
                const typeStr = FILTER_TYPES[type];
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "filter",
                    "tags": this._SplitTags(tagStr),
                    "params": [typeStr, freq, detune, q, gain, C3.clamp(mix / 100, 0, 1)]
                })
            },
            AddDelayEffect(tagStr, delay, gain, mix) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "delay",
                    "tags": this._SplitTags(tagStr),
                    "params": [delay, this.DbToLinear(gain), C3.clamp(mix / 100, 0, 1)]
                })
            },
            AddFlangerEffect(tagStr, delay, modulation, freq, feedback, mix) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "flanger",
                    "tags": this._SplitTags(tagStr),
                    "params": [delay / 1E3, modulation / 1E3, freq, feedback / 100, C3.clamp(mix / 100, 0, 1)]
                })
            },
            AddPhaserEffect(tagStr, freq, detune, q, mod, modfreq, mix) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "phaser",
                    "tags": this._SplitTags(tagStr),
                    "params": [freq, detune, q, mod, modfreq, C3.clamp(mix / 100, 0, 1)]
                })
            },
            AddConvolutionEffect(tagStr, file, norm, mix) {
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(file[0]);
                if (!info) return;
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "convolution",
                    "tags": this._SplitTags(tagStr),
                    "bufferOriginalUrl": file[0],
                    "bufferUrl": info.url,
                    "bufferType": info.type,
                    "params": [norm === 0, C3.clamp(mix / 100, 0, 1)]
                })
            },
            AddGainEffect(tagStr, g) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "gain",
                    "tags": this._SplitTags(tagStr),
                    "params": [this.DbToLinear(g)]
                })
            },
            AddStereoPanEffect(tagStr, g) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "stereopan",
                    "tags": this._SplitTags(tagStr),
                    "params": [C3.clamp(g / 100, -1, 1)]
                })
            },
            AddMuteEffect(tagStr) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "gain",
                    "tags": this._SplitTags(tagStr),
                    "params": [0]
                })
            },
            AddTremoloEffect(tagStr, freq, mix) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "tremolo",
                    "tags": this._SplitTags(tagStr),
                    "params": [freq, C3.clamp(mix / 100, 0, 1)]
                })
            },
            AddRingModEffect(tagStr, freq, mix) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "ringmod",
                    "tags": this._SplitTags(tagStr),
                    "params": [freq, C3.clamp(mix / 100, 0, 1)]
                })
            },
            AddDistortionEffect(tagStr, threshold, headroom, drive, makeupgain, mix) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "distortion",
                    "tags": this._SplitTags(tagStr),
                    "params": [this.DbToLinearNoCap(threshold),
                        this.DbToLinearNoCap(headroom), drive, this.DbToLinearNoCap(makeupgain), C3.clamp(mix / 100, 0, 1)
                    ]
                })
            },
            AddCompressorEffect(tagStr, threshold, knee, ratio, attack, release) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "compressor",
                    "tags": this._SplitTags(tagStr),
                    "params": [threshold, knee, ratio, attack / 1E3, release / 1E3]
                })
            },
            AddAnalyserEffect(tagStr, fftSize, smoothing) {
                this._IncrementEffectCount(tagStr);
                this.PostToDOM("add-effect", {
                    "type": "analyser",
                    "tags": this._SplitTags(tagStr),
                    "params": [fftSize,
                        smoothing
                    ]
                })
            },
            RemoveEffects(tagStr) {
                const tagArr = this._SplitTags(tagStr);
                for (const tag of tagArr) this._effectCount.set(tag.toLowerCase(), 0);
                this.PostToDOM("remove-effects", {
                    "tags": tagArr
                });
                this._lastFxState = {}
            },
            SetEffectParameter(tagStr, index, param, value, ramp, time) {
                this.PostToDOM("set-effect-param", {
                    "tags": this._SplitTags(tagStr),
                    "index": Math.floor(index),
                    "param": param,
                    "value": value,
                    "ramp": ramp,
                    "time": time
                })
            },
            SetListenerObject(objectClass) {
                if (!objectClass) return;
                const inst = objectClass.GetFirstPicked();
                if (!inst || !inst.GetWorldInfo()) return;
                this._listenerInst = inst
            },
            SetListenerZ(z) {
                this._listenerPos[2] = z
            },
            SetListenerOrientation(fx, fy, fz, ux, uy, uz) {
                this._listenerForwardVec[0] = fx;
                this._listenerForwardVec[1] = fy;
                this._listenerForwardVec[2] = -fz;
                this._listenerUpVec[0] = ux;
                this._listenerUpVec[1] = uy;
                this._listenerUpVec[2] = -uz
            },
            ScheduleNextPlay(t) {
                this._nextPlayTime = Math.max(t, 0)
            },
            UnloadAudio(file) {
                const isMusic = file[1];
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(file[0]);
                if (!info) return;
                this.PostToDOM("unload", {
                    "url": info.url,
                    "type": info.type,
                    "isMusic": isMusic
                })
            },
            UnloadAudioByName(folder, filename) {
                const isMusic = folder === 1;
                const info = this._runtime.GetAssetManager().GetProjectAudioFileUrl(filename) || this._remoteUrls.get(filename.toLowerCase());
                if (!info) return;
                this.PostToDOM("unload", {
                    "url": info.url,
                    "type": info.type,
                    "isMusic": isMusic
                })
            },
            UnloadAll() {
                this.PostToDOM("unload-all")
            },
            AddRemoteURL(url, type, name) {
                this._remoteUrls.set(name.toLowerCase(), {
                    url,
                    type
                })
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Audio.Exps = {
            Duration(tagStr) {
                const a = this._GetFirstAudioStateByTags(tagStr);
                return a ? a["duration"] : 0
            },
            PlaybackTime(tagStr) {
                const a = this._GetFirstAudioStateByTags(tagStr);
                return a ? a["playbackTime"] : 0
            },
            PlaybackRate(tagStr) {
                const a = this._GetFirstAudioStateByTags(tagStr);
                return a ? a["playbackRate"] : 0
            },
            Volume(tagStr) {
                const a = this._GetFirstAudioStateByTags(tagStr);
                return a ? this.LinearToDb(a["volume"]) : 0
            },
            MasterVolume() {
                return this.LinearToDb(this._masterVolume)
            },
            EffectCount(tag) {
                return this._effectCount.get(tag.toLowerCase()) ||
                    0
            },
            AnalyserFreqBinCount(tagStr, index) {
                const o = this.GetAnalyserData(tagStr, Math.floor(index));
                return o ? o["binCount"] : 0
            },
            AnalyserFreqBinAt(tagStr, index, bin) {
                const o = this.GetAnalyserData(tagStr, Math.floor(index));
                if (!o) return 0;
                bin = Math.floor(bin);
                if (bin < 0 || bin >= o["binCount"]) return 0;
                return o["freqBins"][bin]
            },
            AnalyserPeakLevel(tagStr, index) {
                const o = this.GetAnalyserData(tagStr, Math.floor(index));
                return o ? o["peak"] : 0
            },
            AnalyserRMSLevel(tagStr, index) {
                const o = this.GetAnalyserData(tagStr, Math.floor(index));
                return o ? o["rms"] : 0
            },
            SampleRate() {
                return this._sampleRate
            },
            CurrentTime() {
                if (self["C3_GetAudioContextCurrentTime"]) return self["C3_GetAudioContextCurrentTime"]();
                else return performance.now() / 1E3
            },
            OutputLatency() {
                return this._outputLatency
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Plugins.Browser = class BrowserPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Browser.Type = class BrowserType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const DOM_COMPONENT_ID = "browser";
        C3.Plugins.Browser.Instance = class BrowserInstance extends C3.SDKInstanceBase {
            constructor(inst, properties) {
                super(inst, DOM_COMPONENT_ID);
                this._initLocationStr = "";
                this._isOnline = false;
                this._referrer = "";
                this._docTitle = "";
                this._isCookieEnabled = false;
                this._screenWidth = 0;
                this._screenHeight = 0;
                this._windowOuterWidth = 0;
                this._windowOuterHeight = 0;
                this._isConstructArcade = false;
                this._cssStyleMap = new Map;
                this.AddDOMMessageHandlers([
                    ["online-state", e => this._OnOnlineStateChanged(e)],
                    ["backbutton", () => this._OnBackButton()],
                    ["sw-message", e => this._OnSWMessage(e)],
                    ["hashchange", e => this._OnHashChange(e)]
                ]);
                const rt = this.GetRuntime().Dispatcher();
                this._disposables = new C3.CompositeDisposable(C3.Disposable.From(rt, "afterfirstlayoutstart", () => this._OnAfterFirstLayoutStart()), C3.Disposable.From(rt, "window-resize", () => this._OnWindowResize()), C3.Disposable.From(rt, "suspend", () => this._OnSuspend()), C3.Disposable.From(rt, "resume", () => this._OnResume()));
                this._runtime.AddLoadPromise(this.PostToDOMAsync("get-initial-state", {
                    "exportType": this._runtime.GetExportType()
                }).then(data => {
                    this._initLocationStr = data["location"];
                    this._isOnline = data["isOnline"];
                    this._referrer = data["referrer"];
                    this._docTitle = data["title"];
                    this._isCookieEnabled = data["isCookieEnabled"];
                    this._screenWidth = data["screenWidth"];
                    this._screenHeight = data["screenHeight"];
                    this._windowOuterWidth = data["windowOuterWidth"];
                    this._windowOuterHeight = data["windowOuterHeight"];
                    this._isConstructArcade = data["isConstructArcade"]
                }))
            }
            Release() {
                super.Release()
            }
            _OnAfterFirstLayoutStart() {
                this.PostToDOM("ready-for-sw-messages")
            }
            async _OnOnlineStateChanged(e) {
                const isOnline = !!e["isOnline"];
                if (this._isOnline === isOnline) return;
                this._isOnline = isOnline;
                if (this._isOnline) await this.TriggerAsync(C3.Plugins.Browser.Cnds.OnOnline);
                else await this.TriggerAsync(C3.Plugins.Browser.Cnds.OnOffline)
            }
            async _OnWindowResize() {
                await this.TriggerAsync(C3.Plugins.Browser.Cnds.OnResize)
            }
            _OnSuspend() {
                this.Trigger(C3.Plugins.Browser.Cnds.OnPageHidden)
            }
            _OnResume() {
                this.Trigger(C3.Plugins.Browser.Cnds.OnPageVisible)
            }
            async _OnBackButton() {
                await this.TriggerAsync(C3.Plugins.Browser.Cnds.OnBackButton)
            }
            _OnSWMessage(e) {
                const messageType =
                    e["type"];
                if (messageType === "downloading-update") this.Trigger(C3.Plugins.Browser.Cnds.OnUpdateFound);
                else if (messageType === "update-ready" || messageType === "update-pending") this.Trigger(C3.Plugins.Browser.Cnds.OnUpdateReady);
                else if (messageType === "offline-ready") this.Trigger(C3.Plugins.Browser.Cnds.OnOfflineReady)
            }
            _OnHashChange(e) {
                this._initLocationStr = e["location"];
                this.Trigger(C3.Plugins.Browser.Cnds.OnHashChange)
            }
            GetDebuggerProperties() {
                const prefix = "plugins.browser.debugger";
                return [{
                    title: "plugins.browser.name",
                    properties: [{
                        name: prefix + ".user-agent",
                        value: navigator.userAgent
                    }, {
                        name: prefix + ".is-online",
                        value: this._isOnline
                    }, {
                        name: prefix + ".is-fullscreen",
                        value: this._runtime.GetCanvasManager().IsDocumentFullscreen()
                    }]
                }]
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Browser.Cnds = {
            IsOnline() {
                return this._isOnline
            },
            OnOnline() {
                return true
            },
            OnOffline() {
                return true
            },
            OnResize() {
                return true
            },
            CookiesEnabled() {
                return this._isCookieEnabled
            },
            IsFullscreen() {
                return this._runtime.GetCanvasManager().IsDocumentFullscreen()
            },
            OnBackButton() {
                return true
            },
            IsPortraitLandscape(p) {
                const lastInnerWidth = this._runtime.GetCanvasManager().GetLastWidth();
                const lastInnerHeight = this._runtime.GetCanvasManager().GetLastHeight();
                const current = lastInnerWidth <= lastInnerHeight ?
                    0 : 1;
                return current === p
            },
            OnUpdateFound() {
                return true
            },
            OnUpdateReady() {
                return true
            },
            OnOfflineReady() {
                return true
            },
            OnHashChange() {
                return true
            },
            PageVisible() {
                return !this._runtime.IsSuspended()
            },
            OnPageHidden() {
                return true
            },
            OnPageVisible() {
                return true
            },
            HasJava() {
                return false
            },
            IsDownloadingUpdate() {
                return false
            },
            OnMenuButton() {
                return false
            },
            OnSearchButton() {
                return false
            },
            IsMetered() {
                return false
            },
            IsCharging() {
                return true
            },
            SupportsFullscreen() {
                return true
            }
        }
    } {
        const C3 = self.C3;
        const ORIENTATIONS = ["portrait", "landscape", "portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        C3.Plugins.Browser.Acts = {
            Alert(message) {
                this.PostToDOM("alert", {
                    "message": message.toString()
                })
            },
            Close() {
                if (this._isConstructArcade) return;
                if (this._runtime.IsDebug()) self.C3Debugger.CloseWindow();
                else this.PostToDOM("close")
            },
            Focus() {
                this.PostToDOM("set-focus", {
                    "isFocus": true
                })
            },
            Blur() {
                this.PostToDOM("set-focus", {
                    "isFocus": false
                })
            },
            GoBack() {
                if (this._isConstructArcade) return;
                this.PostToDOM("navigate", {
                    "type": "back"
                })
            },
            GoForward() {
                if (this._isConstructArcade) return;
                this.PostToDOM("navigate", {
                    "type": "forward"
                })
            },
            GoHome() {},
            Reload() {
                if (this._isConstructArcade) return;
                if (this._runtime.IsDebug()) this._runtime.PostToDebugger({
                    "type": "reload"
                });
                else this.PostToDOM("navigate", {
                    "type": "reload"
                })
            },
            GoToURL(url, target) {
                this._PostToDOMMaybeSync("navigate", {
                    "type": "url",
                    "url": url,
                    "target": target,
                    "exportType": this._runtime.GetExportType()
                })
            },
            GoToURLWindow(url, tag) {
                this._PostToDOMMaybeSync("navigate", {
                    "type": "new-window",
                    "url": url,
                    "tag": tag,
                    "exportType": this._runtime.GetExportType()
                })
            },
            RequestFullScreen(mode, navUi) {
                if (mode >= 2) mode += 1;
                if (mode === 6) mode = 2;
                if (mode === 1) mode = 0;
                const modeStr = C3.CanvasManager._FullscreenModeNumberToString(mode);
                this._runtime.GetCanvasManager().SetDocumentFullscreenMode(modeStr);
                this._PostToDOMMaybeSync("request-fullscreen", {
                    "navUI": navUi
                })
            },
            CancelFullScreen() {
                this._PostToDOMMaybeSync("exit-fullscreen")
            },
            Vibrate(pattern) {
                const arr = pattern.split(",");
                for (let i = 0, len = arr.length; i <
                    len; ++i) arr[i] = parseInt(arr[i], 10);
                this._PostToDOMMaybeSync("vibrate", {
                    "pattern": arr
                })
            },
            async InvokeDownload(url, filename) {
                if (!url || !filename) return;
                const urlToDownload = await this._runtime.GetAssetManager().GetProjectFileUrl(url);
                this._runtime.InvokeDownload(urlToDownload, filename)
            },
            InvokeDownloadString(str, mimeType, filename) {
                if (!filename) return;
                const dataUri = `data:${mimeType},${encodeURIComponent(str)}`;
                this._runtime.InvokeDownload(dataUri, filename)
            },
            ConsoleLog(type, msg) {
                msg = msg.toString();
                if (type ===
                    0) console.log(msg);
                else if (type === 1) console.warn(msg);
                else if (type === 2) console.error(msg)
            },
            ConsoleGroup(name) {
                console.group(name)
            },
            ConsoleGroupEnd() {
                console.groupEnd()
            },
            ExecJs(jsStr) {
                try {
                    eval(jsStr)
                } catch (err) {
                    console.error("Error executing JavaScript: ", err)
                }
            },
            LockOrientation(o) {
                o = Math.floor(o);
                if (o < 0 || o >= ORIENTATIONS.length) return;
                const orientation = ORIENTATIONS[o];
                this._PostToDOMMaybeSync("lock-orientation", {
                    "orientation": orientation
                })
            },
            UnlockOrientation() {
                this._PostToDOMMaybeSync("unlock-orientation")
            },
            LoadStyleSheet(url) {
                this._runtime.GetAssetManager().LoadStyleSheet(url)
            },
            async SetDocumentCSSStyle(propName, value, selector, type) {
                await this.PostToDOMAsync("set-document-css-style", {
                    "prop": C3.CSSToCamelCase(propName),
                    "value": value,
                    "selector": selector,
                    "is-all": type !== 0
                })
            },
            async GetDocumentCSSStyle(propName, selector, tag) {
                const ret = await this.PostToDOMAsync("get-document-css-style", {
                    "prop": propName,
                    "selector": selector
                });
                if (ret["isOk"]) this._cssStyleMap.set(tag.toLowerCase(), ret["result"].trim())
            },
            SetHash(h) {
                this.PostToDOM("set-hash", {
                    "hash": h
                })
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Browser.Exps = {
            URL() {
                if (this._runtime.IsInWorker()) return this._initLocationStr;
                else return location.toString()
            },
            Protocol() {
                if (this._runtime.IsInWorker()) return (new URL(this._initLocationStr)).protocol;
                else return location.protocol
            },
            Domain() {
                if (this._runtime.IsInWorker()) return (new URL(this._initLocationStr)).hostname;
                else return location.hostname
            },
            Port() {
                if (this._runtime.IsInWorker()) return (new URL(this._initLocationStr)).port;
                else return location.port
            },
            PathName() {
                if (this._runtime.IsInWorker()) return (new URL(this._initLocationStr)).pathname;
                else return location.pathname
            },
            Hash() {
                if (this._runtime.IsInWorker()) return (new URL(this._initLocationStr)).hash;
                else return location.hash
            },
            QueryString() {
                if (this._runtime.IsInWorker()) return (new URL(this._initLocationStr)).search;
                else return location.search
            },
            QueryParam(param) {
                const search = this._runtime.IsInWorker() ? (new URL(this._initLocationStr)).search : location.search;
                const match = RegExp("[?&]" + param + "=([^&]*)").exec(search);
                if (match) return decodeURIComponent(match[1].replace(/\+/g, " "));
                else return ""
            },
            Referrer() {
                return this._referrer
            },
            Title() {
                return this._docTitle
            },
            Language() {
                return navigator.language
            },
            Platform() {
                return navigator.platform
            },
            UserAgent() {
                return navigator.userAgent
            },
            ExecJS(jsStr) {
                let result = 0;
                try {
                    result = eval(jsStr)
                } catch (err) {
                    console.error("Error executing JavaScript: ", err)
                }
                if (typeof result === "number" || typeof result === "string") return result;
                if (typeof result === "boolean") return result ? 1 : 0;
                else return 0
            },
            CSSStyleValue(tag) {
                return this._cssStyleMap.get(tag) || ""
            },
            Name() {
                return navigator.appName
            },
            Version() {
                return navigator.appVersion
            },
            Product() {
                return navigator.product
            },
            Vendor() {
                return navigator.vendor
            },
            BatteryLevel() {
                return 1
            },
            BatteryTimeLeft() {
                return Infinity
            },
            Bandwidth() {
                const connection = navigator["connection"];
                if (connection) return connection["downlink"] || connection["downlinkMax"] || connection["bandwidth"] || Infinity;
                else return Infinity
            },
            ConnectionType() {
                const connection = navigator["connection"];
                if (connection) return connection["type"] || "unknown";
                else return "unknown"
            },
            DevicePixelRatio() {
                return self.devicePixelRatio
            },
            ScreenWidth() {
                return this._screenWidth
            },
            ScreenHeight() {
                return this._screenHeight
            },
            WindowInnerWidth() {
                return this._runtime.GetCanvasManager().GetLastWidth()
            },
            WindowInnerHeight() {
                return this._runtime.GetCanvasManager().GetLastHeight()
            },
            WindowOuterWidth() {
                return this._windowOuterWidth
            },
            WindowOuterHeight() {
                return this._windowOuterWidth
            }
        }
    };

}

{
    "use strict";
    C3.Plugins.Eponesh_GameScore = class extends C3.SDKPluginBase {
        constructor(e) {
            super(e, "Eponesh_GameScore")
        }
        Release() {
            super.Release()
        }
    };
}

{
    "use strict";
    C3.Plugins.Eponesh_GameScore.Type = class extends C3.SDKTypeBase {
        constructor(e) {
            super(e)
        }
        Release() {
            super.Release()
        }
        OnCreate() {}
    };
}

{
    "use strict"; {
        const a = "https://gs.eponesh.com/sdk";
        C3.Plugins.Eponesh_GameScore.Instance = class extends C3.SDKInstanceBase {
            constructor(e, t) {
                if (super(e), this.mappers = {
                        language: ["en", "ru", "fr", "it", "de", "es", "zh", "pt", "ko", "ja", "tr", "ar", "hi", "id"],
                        avatarGenerator: ["dicebear_retro", "dicebear_identicon", "dicebear_human", "dicebear_micah", "dicebear_bottts", "icotar", "robohash_robots", "robohash_cats"],
                        order: ["default", "DESC", "ASC"],
                        withMe: ["none", "first", "last"],
                        platform: ["YANDEX", "VK", "NONE", "OK", "GAME_MONETIZE", "CRAZY_GAMES", "GAME_DISTRIBUTION", "SMARTMARKET", "GAMEPIX", "POKI", "VK_PLAY"],
                        documentTypes: ["PLAYER_PRIVACY_POLICY"],
                        documentFormat: ["HTML", "TXT", "RAW"],
                        variablesTypes: ["stats", "data", "flag", "image", "file", "doc_html"],
                        compare: [(e, t) => e === t, (e, t) => e !== t, (e, t) => e < t, (e, t) => e <= t, (e, t) => t < e, (e, t) => t <= e]
                    }, this.etos = function(e) {
                        return "string" == typeof e ? e : "message" in e ? e.message : String(e)
                    }, this.conditions = C3.Plugins.Eponesh_GameScore.Cnds, this.actions = C3.Plugins.Eponesh_GameScore.Acts, this.handleResult = (e, t) => {
                        this.isLastActionSuccess = !!e, t && (this.lastError = this.etos(t), console.warn(t))
                    }, this.awaiters = {
                        player: {},
                        gp: {}
                    }, this.awaiters.gp.ready = new Promise((e, t) => {
                        this.awaiters.gp.done = e, this.awaiters.gp.abort = t
                    }), this.awaiters.player.ready = new Promise((e, t) => {
                        this.awaiters.player.done = e, this.awaiters.player.abort = t
                    }), this.leaderboard = [], this.leaderboardInfo = {}, this.leaderboardRecords = {}, this.currentLeaderboardIndex = 0, this.currentLeaderboardPlayer = {}, this.lastLeaderboardTag = "", this.lastLeaderboardVariant = "", this.lastLeaderboardPlayerRatingTag = "", this.leaderboardPlayerPosition = 0, this.currentPlayerFieldKey = "", this.currentPlayerFieldType = "", this.currentPlayerFieldName = "", this.currentPlayerFieldValue = "", this.currentPlayerFieldVariantValue = "", this.currentPlayerFieldVariantName = "", this.currentPlayerFieldVariantIndex = 0, this.achievements = [], this.achievementsGroups = [], this.playerAchievements = [], this.currentAchievementIndex = 0, this.currentAchievement = {}, this.currentAchievementsGroupIndex = 0, this.currentAchievementsGroupId = 0, this.currentAchievementsGroupTag = "", this.currentAchievementsGroupName = "", this.currentAchievementsGroupDescription = "", this.currentPlayerAchievementIndex = 0, this.currentPlayerAchievementId = 0, this.currentPlayerAchievementUnlockDate = "", this.isUnlockAchievementSuccess = !1, this.unlockAchievementError = "", this.isSetProgressAchievementSuccess = !1, this.setProgressAchievementError = "", this.products = [], this.playerPurchases = [], this.currentProductIndex = 0, this.currentProduct = {
                        id: 0,
                        tag: "",
                        name: "",
                        description: "",
                        icon: "",
                        iconSmall: "",
                        price: 0,
                        currency: "",
                        currencySymbol: ""
                    }, this.currentProductPurchases = 0, this.currentPurchaseIndex = 0, this.currentPurchase = {
                        id: 0,
                        tag: "",
                        createdAt: "",
                        expiredAt: "",
                        subscribed: !1
                    }, this.isSubscribeProductSuccess = !1, this.isUnsubscribeProductSuccess = !1, this.isPurchaseProductSuccess = !1, this.purchaseProductError = "", this.purchasedProductId = 0, this.purchasedProductTag = "", this.isConsumeProductSuccess = !1, this.consumeProductError = "", this.consumedProductId = 0, this.consumedProductTag = "", this.isLastAdSuccess = !1, this.isLastShareSuccess = !1, this.isLastCommunityJoinSuccess = !1, this.isLastAddShortcutSuccess = !1, this.isReady = !1, this.isPlayerReady = !1, this.gamesCollection = {
                        id: 0,
                        tag: "",
                        name: "",
                        description: "",
                        games: []
                    }, this.currentGameIndex = 0, this.currentGameId = 0, this.currentGameName = "", this.currentGameDescription = "", this.currentGameIcon = "", this.currentGameUrl = "", this.gamesCollectionFetchError = "", this.lastGamesCollectionIdOrTag = "", this.document = {
                        type: "",
                        content: ""
                    }, this.lastDocumentType = "", this.documentFetchError = "", this.lastError = "", this.isLastActionSuccess = !1, this.shareLink = "", this.shareParams = {}, this.images = [], this.canLoadMoreImages = !1, this.currentImageIndex = 0, this.currentImageTagIndex = 0, this.currentImageTag = "", this.lastImageTempUrl = "", this.currentImage = {
                        id: "",
                        playerId: 0,
                        width: 0,
                        height: 0,
                        src: "",
                        tags: []
                    }, this.files = [], this.lastFileContent = "", this.canLoadMoreFiles = !1, this.currentFileIndex = 0, this.currentFileTagIndex = 0, this.currentFileTag = "", this.lastFileTempUrl = "", this.currentFile = {
                        id: "",
                        playerId: 0,
                        name: "",
                        size: 0,
                        src: "",
                        tags: []
                    }, this.currentVariableIndex = 0, this.currentVariable = {
                        key: "",
                        type: "",
                        value: ""
                    }, this.currentPlayersIndex = 0, this.lastPlayersTag = "", this.currentPlayersPlayer = {
                        state: {},
                        achievements: [],
                        purchases: []
                    }, this.projectId = Number(t[0] || 0), this.publicToken = t[1], this.showPreloaderOnStart = t[2], this.shouldWaitPlayerOnLoad = t[3], this.isEnabled = t[4], this._runtime.AddLoadPromise(this.awaiters.gp.ready), this.shouldWaitPlayerOnLoad && this._runtime.AddLoadPromise(this.awaiters.player.ready), !this.isEnabled) return this.onError("[GamePush] disabled"), this.awaiters.gp.done(), void this.awaiters.player.done();
                this._runtime.Dispatcher().addEventListener("afterfirstlayoutstart", () => {
                    const e = this._runtime.GetIRuntime();
                    e && (e.GameScore = this.gp, e.GamePush = this.gp), this.isReady && this.Trigger(this.conditions.OnReady), this.isPlayerReady && this.Trigger(this.conditions.OnPlayerReady), this.gp.gameStart()
                }), this.loadLib()
            }
            onError(e) {
                console.warn(e);
                e = () => Promise.resolve({});
                this.awaiters.gp.done(), this.awaiters.player.done(), this.gp = {
                    on() {},
                    changeLanguage: e,
                    changeAvatarGenerator: e,
                    loadOverlay: e,
                    pause: e,
                    resume: e,
                    gameStart: e,
                    gameplayStart: e,
                    gameplayStop: e,
                    isDev: !1,
                    isPaused: !1,
                    isGameplay: !1,
                    language: "en",
                    avatarGenerator: "dicebear_retro",
                    app: {
                        on() {},
                        title: "",
                        description: "",
                        image: "",
                        url: "",
                        canAddShortcut: !1,
                        addShortcut: e
                    },
                    analytics: {
                        on() {},
                        hit() {},
                        goal() {}
                    },
                    platform: {
                        on() {},
                        hasIntegratedAuth: !1,
                        type: "NONE"
                    },
                    socials: {
                        isSupportsNativeShare: !1,
                        isSupportsNativePosts: !1,
                        isSupportsNativeInvite: !1,
                        share: e,
                        post: e,
                        invite: e
                    },
                    leaderboard: {
                        on() {},
                        open: e,
                        fetch: e,
                        fetchScoped: e,
                        fetchPlayerRating: e,
                        fetchPlayerRatingScoped: e
                    },
                    achievements: {
                        on() {},
                        has() {},
                        open: e,
                        fetch: e,
                        unlock: e,
                        setProgress: e
                    },
                    gamesCollections: {
                        on() {},
                        open: e,
                        fetch: e
                    },
                    documents: {
                        on() {},
                        open: e,
                        fetch: e
                    },
                    variables: {
                        list: [],
                        on() {},
                        fetch: e,
                        get: e,
                        has: e,
                        type: e
                    },
                    images: {
                        canUpload: !1,
                        list: [],
                        on() {},
                        upload: e,
                        uploadUrl: e,
                        fetch: e,
                        fetchMore: e,
                        chooseFile: e,
                        resize: e
                    },
                    files: {
                        canUpload: !1,
                        list: [],
                        on() {},
                        upload: e,
                        uploadUrl: e,
                        uploadContent: e,
                        loadContent: e,
                        fetch: e,
                        fetchMore: e,
                        chooseFile: e
                    },
                    payments: {
                        isAvailable: !1,
                        purchases: [],
                        on() {},
                        has() {},
                        fetchProducts: e,
                        purchase: e,
                        consume: e
                    },
                    fullscreen: {
                        isEnabled: !1,
                        on() {},
                        open() {},
                        close() {},
                        toggle() {}
                    },
                    ads: {
                        isFullscreenAvailable: !1,
                        isRewardedAvailable: !1,
                        isPreloaderAvailable: !1,
                        isStickyAvailable: !1,
                        isAdblockEnabled: !1,
                        on() {},
                        showFullscreen: e,
                        showRewardedVideo: e,
                        showPreloader: e,
                        showSticky: e,
                        closeSticky: e,
                        refreshSticky: e
                    },
                    player: {
                        isStub: !0,
                        isLoggedIn: !1,
                        id: 0,
                        name: "",
                        avatar: "",
                        on() {},
                        sync: e,
                        load: e,
                        login: e,
                        fetchFields: e,
                        getField: e,
                        getFieldName: e,
                        getFieldVariantName: e,
                        add: e,
                        has: e,
                        get: e,
                        set: e,
                        toggle: e,
                        reset: e,
                        remove: e,
                        toJSON: () => ({}),
                        fields: []
                    },
                    players: {
                        on() {},
                        fetch: e
                    }
                }, this.isReady = !0, this.Trigger(this.conditions.OnReady), this.isPlayerReady = !0, this.Trigger(this.conditions.OnPlayerReady)
            }
            loadLib() {
                try {
                    window.onGPInit = e => e.ready.then(() => this.init(e)).catch(e => this.onError(e)), e = document, t = e.getElementsByTagName("script")[0], (e = e.createElement("script")).src = `${a}/gamepush.js?projectId=${this.projectId}&publicToken=${this.publicToken}&callback=onGPInit`, e.async = !0, e.onerror = e => this.onError(e), t.parentNode.insertBefore(e, t)
                } catch (e) {
                    console.error(e), this.onError(e)
                }
                var e, t
            }
            init(e) {
                this.gp = e;
                const t = this._runtime.GetIRuntime();
                t && (t.GameScore = this.gp, t.GamePush = this.gp), this.gp.player.on("ready", () => {
                    this.isPlayerReady = !0, this.awaiters.player.done(), this.Trigger(this.conditions.OnPlayerReady)
                }), this.gp.player.on("change", () => this.Trigger(this.conditions.OnPlayerChange)), this.gp.player.on("sync", e => {
                    this.handleResult(e), this.Trigger(e ? this.conditions.OnPlayerSyncComplete : this.conditions.OnPlayerSyncError)
                }), this.gp.player.on("load", e => {
                    this.handleResult(e), this.Trigger(e ? this.conditions.OnPlayerLoadComplete : this.conditions.OnPlayerLoadError)
                }), this.gp.player.on("login", e => {
                    this.handleResult(e), this.Trigger(e ? this.conditions.OnPlayerLoginComplete : this.conditions.OnPlayerLoginError)
                }), this.gp.player.on("fetchFields", e => {
                    this.handleResult(e), this.Trigger(e ? this.conditions.OnPlayerFetchFieldsComplete : this.conditions.OnPlayerFetchFieldsError)
                }), this.gp.socials.makeShareUrl && (this.shareLink = this.gp.socials.makeShareUrl({})), this.gp.leaderboard.on("open", () => this.Trigger(this.conditions.OnLeaderboardOpen)), this.gp.achievements.on("open", () => this.Trigger(this.conditions.OnAchievementsOpen)), this.gp.achievements.on("close", () => this.Trigger(this.conditions.OnAchievementsClose)), this.gp.gamesCollections.on("open", () => this.Trigger(this.conditions.OnGamesCollectionsOpen)), this.gp.gamesCollections.on("close", () => this.Trigger(this.conditions.OnGamesCollectionsClose)), this.gp.documents.on("open", () => this.Trigger(this.conditions.OnDocumentsOpen)), this.gp.documents.on("close", () => this.Trigger(this.conditions.OnDocumentsClose)), this.gp.fullscreen.on("open", () => this.Trigger(this.conditions.OnFullscreenOpen)), this.gp.fullscreen.on("close", () => this.Trigger(this.conditions.OnFullscreenClose)), this.gp.fullscreen.on("change", () => this.Trigger(this.conditions.OnFullscreenChange)), this.gp.ads.on("start", () => this.Trigger(this.conditions.OnAdsStart)), this.gp.ads.on("close", e => {
                    this.handleResult(e), this.isLastAdSuccess = e, this.Trigger(this.conditions.OnAdsClose)
                }), this.gp.ads.on("fullscreen:start", () => this.Trigger(this.conditions.OnAdsFullscreenStart)), this.gp.ads.on("fullscreen:close", () => this.Trigger(this.conditions.OnAdsFullscreenClose)), this.gp.ads.on("preloader:start", () => this.Trigger(this.conditions.OnAdsPreloaderStart)), this.gp.ads.on("preloader:close", () => this.Trigger(this.conditions.OnAdsPreloaderClose)), this.gp.ads.on("rewarded:start", () => this.Trigger(this.conditions.OnAdsRewardedStart)), this.gp.ads.on("rewarded:close", () => this.Trigger(this.conditions.OnAdsRewardedClose)), this.gp.ads.on("rewarded:reward", () => this.Trigger(this.conditions.OnAdsRewardedReward)), this.gp.ads.on("sticky:start", () => this.Trigger(this.conditions.OnAdsStickyStart)), this.gp.ads.on("sticky:close", () => this.Trigger(this.conditions.OnAdsStickyClose)), this.gp.ads.on("sticky:refresh", () => this.Trigger(this.conditions.OnAdsStickyRefresh)), this.gp.ads.on("sticky:render", () => this.Trigger(this.conditions.OnAdsStickyRender)), this.gp.socials.on("share", e => {
                    this.handleResult(e), this.isLastShareSuccess = e, this.Trigger(this.conditions.OnSocialsShare)
                }), this.gp.socials.on("post", e => {
                    this.handleResult(e), this.isLastShareSuccess = e, this.Trigger(this.conditions.OnSocialsPost)
                }), this.gp.socials.on("invite", e => {
                    this.handleResult(e), this.isLastShareSuccess = e, this.Trigger(this.conditions.OnSocialsInvite)
                }), this.gp.socials.on("joinCommunity", e => {
                    this.handleResult(e), this.isLastCommunityJoinSuccess = e, this.Trigger(this.conditions.OnSocialsJoinCommunity)
                }), this.gp.app.on("addShortcut", e => {
                    this.handleResult(e), this.isLastAddShortcutSuccess = e, this.Trigger(this.conditions.OnAppAddShortcut)
                }), this.gp.on("change:language", () => this.Trigger(this.conditions.OnChangeLanguage)), this.gp.on("change:avatarGenerator", () => this.Trigger(this.conditions.OnChangeAvatarGenerator)), this.gp.on("overlay:ready", () => this.Trigger(this.conditions.OnOverlayReady)), this.gp.on("pause", () => this.Trigger(this.conditions.OnPause)), this.gp.on("resume", () => this.Trigger(this.conditions.OnResume)), this.gp.on("gameplayStart", () => this.Trigger(this.conditions.OnGameplayStart)), this.gp.on("gameplayStop", () => this.Trigger(this.conditions.OnGameplayStop)), this.gp.channels.on("event", e => {
                    this.curEvent = e
                }), this.gp.channels.on("event:connect", () => {
                    this.Trigger(this.conditions.OnEvent), this.Trigger(this.conditions.OnEventConnect)
                }), this.isReady = !0, this.Trigger(this.conditions.OnReady), this.awaiters.gp.done(), this.showPreloaderOnStart && this.gp.ads.showPreloader()
            }
            Release() {
                super.Release()
            }
            SaveToJson() {
                return {
                    leaderboard: this.leaderboard,
                    leaderboardInfo: this.leaderboardInfo,
                    leaderboardRecords: this.leaderboardRecords,
                    currentLeaderboardIndex: this.currentLeaderboardIndex,
                    currentLeaderboardPlayer: this.currentLeaderboardPlayer,
                    lastLeaderboardTag: this.lastLeaderboardTag,
                    lastLeaderboardVariant: this.lastLeaderboardVariant,
                    lastLeaderboardPlayerRatingTag: this.lastLeaderboardPlayerRatingTag,
                    leaderboardPlayerPosition: this.leaderboardPlayerPosition,
                    currentPlayerFieldKey: this.currentPlayerFieldKey,
                    currentPlayerFieldType: this.currentPlayerFieldType,
                    currentPlayerFieldName: this.currentPlayerFieldName,
                    currentPlayerFieldValue: this.currentPlayerFieldValue,
                    currentPlayerFieldVariantValue: this.currentPlayerFieldVariantValue,
                    currentPlayerFieldVariantName: this.currentPlayerFieldVariantName,
                    currentPlayerFieldVariantIndex: this.currentPlayerFieldVariantIndex,
                    isLastAdSuccess: this.isLastAdSuccess,
                    isLastShareSuccess: this.isLastShareSuccess,
                    isLastCommunityJoinSuccess: this.isLastCommunityJoinSuccess,
                    isLastAddShortcutSuccess: this.isLastAddShortcutSuccess,
                    isReady: this.isReady,
                    isPlayerReady: this.isPlayerReady,
                    achievements: this.achievements,
                    achievementsGroups: this.achievementsGroups,
                    playerAchievements: this.playerAchievements,
                    currentAchievementIndex: this.currentAchievementIndex,
                    currentAchievement: this.currentAchievement,
                    currentAchievementsGroupIndex: this.currentAchievementsGroupIndex,
                    currentAchievementsGroupId: this.currentAchievementsGroupId,
                    currentAchievementsGroupTag: this.currentAchievementsGroupTag,
                    currentAchievementsGroupName: this.currentAchievementsGroupName,
                    currentAchievementsGroupDescription: this.currentAchievementsGroupDescription,
                    currentPlayerAchievementIndex: this.currentPlayerAchievementIndex,
                    currentPlayerAchievementId: this.currentPlayerAchievementId,
                    currentPlayerAchievementUnlockDate: this.currentPlayerAchievementUnlockDate,
                    isUnlockAchievementSuccess: this.isUnlockAchievementSuccess,
                    unlockAchievementError: this.unlockAchievementError,
                    products: this.products,
                    playerPurchases: this.playerPurchases,
                    currentProductIndex: this.currentProductIndex,
                    currentProduct: this.currentProduct,
                    currentProductPurchases: this.currentProductPurchases,
                    currentPurchaseIndex: this.currentPurchaseIndex,
                    currentPurchase: this.currentPurchase,
                    lastPlayersTag: this.lastPlayersTag,
                    currentPlayersIndex: this.currentPlayersIndex,
                    currentPlayersPlayer: this.currentPlayersPlayer,
                    isSubscribeProductSuccess: this.isSubscribeProductSuccess,
                    isUnsubscribeProductSuccess: this.isUnsubscribeProductSuccess,
                    isPurchaseProductSuccess: this.isPurchaseProductSuccess,
                    purchaseProductError: this.purchaseProductError,
                    purchasedProductId: this.purchasedProductId,
                    purchasedProductTag: this.purchasedProductTag,
                    isConsumeProductSuccess: this.isConsumeProductSuccess,
                    consumeProductError: this.consumeProductError,
                    consumedProductId: this.consumedProductId,
                    consumedProductTag: this.consumedProductTag,
                    gamesCollection: this.gamesCollection,
                    currentGameIndex: this.currentGameIndex,
                    currentGameId: this.currentGameId,
                    currentGameName: this.currentGameName,
                    currentGameDescription: this.currentGameDescription,
                    currentGameIcon: this.currentGameIcon,
                    currentGameUrl: this.currentGameUrl,
                    gamesCollectionFetchError: this.gamesCollectionFetchError,
                    lastGamesCollectionIdOrTag: this.lastGamesCollectionIdOrTag,
                    document: this.document,
                    lastDocumentType: this.lastDocumentType,
                    documentFetchError: this.documentFetchError,
                    lastError: this.lastError,
                    isLastActionSuccess: this.isLastActionSuccess,
                    images: this.images,
                    canLoadMoreImages: this.canLoadMoreImages,
                    currentImage: this.currentImage,
                    lastImageTempUrl: this.lastImageTempUrl,
                    currentImageIndex: this.currentImageIndex,
                    currentImageTagIndex: this.currentImageTagIndex,
                    currentImageTag: this.currentImageTag,
                    files: this.files,
                    lastFileContent: this.lastFileContent,
                    canLoadMoreFiles: this.canLoadMoreFiles,
                    currentFile: this.currentFile,
                    lastFileTempUrl: this.lastFileTempUrl,
                    currentFileIndex: this.currentFileIndex,
                    currentFileTagIndex: this.currentFileTagIndex,
                    currentFileTag: this.currentFileTag,
                    currentVariableIndex: this.currentVariableIndex,
                    currentVariable: this.currentVariable
                }
            }
            LoadFromJson(e) {
                this.leaderboard = e.leaderboard, this.leaderboardInfo = e.leaderboardInfo || {}, this.leaderboardRecords = e.leaderboardRecords || {}, this.currentLeaderboardIndex = e.currentLeaderboardIndex, this.currentLeaderboardPlayer = e.currentLeaderboardPlayer || {}, this.lastLeaderboardTag = e.lastLeaderboardTag, this.lastLeaderboardVariant = e.lastLeaderboardVariant, this.lastLeaderboardPlayerRatingTag = e.lastLeaderboardPlayerRatingTag, this.leaderboardPlayerPosition = e.leaderboardPlayerPosition || 0, this.currentPlayerFieldKey = e.currentPlayerFieldKey, this.currentPlayerFieldType = e.currentPlayerFieldType, this.currentPlayerFieldName = e.currentPlayerFieldName, this.currentPlayerFieldValue = e.currentPlayerFieldValue, this.currentPlayerFieldVariantValue = e.currentPlayerFieldVariantValue, this.currentPlayerFieldVariantName = e.currentPlayerFieldVariantName, this.currentPlayerFieldVariantIndex = e.currentPlayerFieldVariantIndex, this.isLastAdSuccess = e.isLastAdSuccess, this.isLastShareSuccess = e.isLastShareSuccess, this.isLastCommunityJoinSuccess = e.isLastCommunityJoinSuccess, this.isLastAddShortcutSuccess = e.isLastAddShortcutSuccess, this.isReady = e.isReady, this.isPlayerReady = e.isPlayerReady, this.achievements = e.achievements || [], this.achievementsGroups = e.achievementsGroups || [], this.playerAchievements = e.playerAchievements || [], this.currentAchievementIndex = e.currentAchievementIndex || 0, this.currentAchievement = e.currentAchievement || {}, this.currentAchievementsGroupIndex = e.currentAchievementsGroupIndex || 0, this.currentAchievementsGroupId = e.currentAchievementsGroupId || 0, this.currentAchievementsGroupTag = e.currentAchievementsGroupTag || "", this.currentAchievementsGroupName = e.currentAchievementsGroupName || "", this.currentAchievementsGroupDescription = e.currentAchievementsGroupDescription || "", this.currentPlayerAchievementIndex = e.currentPlayerAchievementIndex || 0, this.currentPlayerAchievementId = e.currentPlayerAchievementId || 0, this.currentPlayerAchievementUnlockDate = e.currentPlayerAchievementUnlockDate || "", this.isUnlockAchievementSuccess = e.isUnlockAchievementSuccess || !1, this.unlockAchievementError = e.unlockAchievementError || "", this.products = e.products || [], this.playerPurchases = e.playerPurchases || [], this.currentProductIndex = e.currentProductIndex || 0, this.currentProduct = e.currentProduct || {
                    id: e.currentProduct.id || 0,
                    tag: e.currentProduct.tag || "",
                    name: e.currentProduct.name || "",
                    description: e.currentProduct.description || "",
                    icon: e.currentProduct.icon || "",
                    iconSmall: e.currentProduct.iconSmall || "",
                    price: e.currentProduct.price || 0,
                    currency: e.currentProduct.currency || "",
                    currencySymbol: e.currentProduct.currencySymbol || ""
                }, this.currentProductPurchases = e.currentProductPurchases || 0, this.currentPurchaseIndex = e.currentPurchaseIndex || 0, this.currentPurchase = e.currentPurchase || {
                    id: 0,
                    tag: "",
                    createdAt: ""
                }, this.lastPlayersTag = e.lastPlayersTag, this.currentPlayersIndex = e.currenPlayersIndex || 0, this.currentPlayersPlayer = e.currentPlayersPlayer || {
                    state: {},
                    achievements: [],
                    purchases: []
                }, this.isSubscribeProductSuccess = e.isSubscribeProductSuccess || !1, this.isUnsubscribeProductSuccess = e.isUnsubscribeProductSuccess || !1, this.isPurchaseProductSuccess = e.isPurchaseProductSuccess || !1, this.purchaseProductError = e.purchaseProductError || "", this.purchasedProductId = e.purchasedProductId || 0, this.purchasedProductTag = e.purchasedProductTag || "", this.isConsumeProductSuccess = e.isConsumeProductSuccess || !1, this.consumeProductError = e.consumeProductError || "", this.consumedProductId = e.consumedProductId || 0, this.consumedProductTag = e.consumedProductTag || "", this.gamesCollection = e.gamesCollection || {
                    id: 0,
                    tag: "",
                    name: "",
                    description: "",
                    games: []
                }, this.currentGameIndex = e.currentGameIndex || 0, this.currentGameId = e.currentGameId || 0, this.currentGameName = e.currentGameName || "", this.currentGameDescription = e.currentGameDescription || "", this.currentGameIcon = e.currentGameIcon || "", this.currentGameUrl = e.currentGameUrl || "", this.gamesCollectionFetchError = e.gamesCollectionFetchError || "", this.lastGamesCollectionIdOrTag = e.lastGamesCollectionIdOrTag || "", this.document = e.document || {
                    type: "",
                    content: ""
                }, this.lastDocumentType = e.lastDocumentType || "", this.documentFetchError = e.documentFetchError || "", this.lastError = e.lastError || "", this.isLastActionSuccess = e.isLastActionSuccess || !1, this.images = e.images || [], this.canLoadMoreImages = e.canLoadMoreImages || !1, this.currentImageIndex = e.currentImageIndex || 0, this.currentImageTagIndex = e.currentImageTagIndex || 0, this.currentImageTag = e.currentImageTag || "", this.currentImage = e.currentImage || {
                    id: "",
                    playerId: 0,
                    width: 0,
                    height: 0,
                    src: "",
                    tags: []
                }, this.files = e.files || [], this.lastFileContent = e.lastFileContent || "", this.canLoadMoreFiles = e.canLoadMoreFiles || !1, this.currentFileIndex = e.currentFileIndex || 0, this.currentFileTagIndex = e.currentFileTagIndex || 0, this.currentFileTag = e.currentFileTag || "", this.currentFile = e.currentFile || {
                    id: "",
                    playerId: 0,
                    name: "",
                    size: 0,
                    src: "",
                    tags: []
                }, this.currentVariableIndex = e.currentVariableIndex || 0, this.currentVariable = e.currentVariable || {
                    key: "",
                    type: "",
                    value: ""
                }
            }
            GetDebuggerProperties() {
                return this.isPlayerReady ? [{
                    title: "GS - Base",
                    properties: [{
                        name: "Language",
                        value: this.gp.language
                    }, {
                        name: "Avatar Generator",
                        value: this.gp.avatarGenerator
                    }, {
                        name: "Platform",
                        value: this.gp.platform.type
                    }, {
                        name: "Last Error",
                        value: this.lastError
                    }, {
                        name: "Is Last Action Success",
                        value: this.isLastActionSuccess
                    }, {
                        name: "Is Mobile",
                        value: this.gp.isMobile
                    }, {
                        name: "Is Dev",
                        value: this.gp.isDev
                    }, {
                        name: "Is Paused",
                        value: this.gp.isPaused
                    }, {
                        name: "Is Gameplay",
                        value: this.gp.isGameplay
                    }, {
                        name: "Is Allowed Origin",
                        value: this.gp.isAllowedOrigin
                    }]
                }, {
                    title: "GS - Ads",
                    properties: [{
                        name: "Last Ad Success",
                        value: this.isLastAdSuccess
                    }, {
                        name: "Adblock Enabled",
                        value: this.gp.ads.isAdblockEnabled
                    }]
                }, {
                    title: "GS - Leaderboards",
                    properties: [{
                        name: "Player Position",
                        value: this.leaderboardPlayerPosition
                    }]
                }, {
                    title: "GS - Player",
                    properties: [{
                        name: "ID",
                        value: this.gp.player.id
                    }, {
                        name: "Logged In By Platform",
                        value: this.gp.player.isLoggedInByPlatform
                    }, {
                        name: "Is Stub",
                        value: this.gp.player.isStub
                    }, ...this.gp.player.fields.map(t => ({
                        name: this.gp.player.getFieldName(t.key),
                        value: this.gp.player.get(t.key),
                        onedit: e => this.CallAction(this.actions.PlayerSet, t.key, e)
                    }))]
                }, {
                    title: "GS - Achievements - Current",
                    properties: [{
                        name: "Index",
                        value: this.currentAchievementIndex
                    }, {
                        name: "ID",
                        value: this.currentAchievement.id
                    }, {
                        name: "Tag",
                        value: this.currentAchievement.tag
                    }, {
                        name: "Name",
                        value: this.currentAchievement.name
                    }, {
                        name: "Description",
                        value: this.currentAchievement.description
                    }, {
                        name: "Rare",
                        value: this.currentAchievement.rare
                    }, {
                        name: "Unlocked",
                        value: this.currentAchievement.unlocked
                    }, {
                        name: "Icon",
                        value: this.currentAchievement.icon
                    }, {
                        name: "Icon Small",
                        value: this.currentAchievement.iconSmall
                    }, {
                        name: "Locked Icon",
                        value: this.currentAchievement.lockedIcon
                    }, {
                        name: "Locked Icon Small",
                        value: this.currentAchievement.lockedIconSmall
                    }, {
                        name: "Progress",
                        value: this.currentAchievement.progress
                    }, {
                        name: "Max Progress",
                        value: this.currentAchievement.maxProgress
                    }, {
                        name: "Progress Step",
                        value: this.currentAchievement.progressStep
                    }, {
                        name: "Locked Visible",
                        value: this.currentAchievement.lockedVisible
                    }, {
                        name: "Locked Description Visible",
                        value: this.currentAchievement.lockedDescriptionVisible
                    }]
                }, {
                    title: "GS - Achievements Groups Loop",
                    properties: [{
                        name: "Current Achievements Group Index",
                        value: this.currentAchievementsGroupIndex
                    }, {
                        name: "Current Achievements Group ID",
                        value: this.currentAchievementsGroupId
                    }, {
                        name: "Current Achievements Group Tag",
                        value: this.currentAchievementsGroupTag
                    }, {
                        name: "Current Achievements Group Name",
                        value: this.currentAchievementsGroupName
                    }, {
                        name: "Current Achievements Group Description",
                        value: this.currentAchievementsGroupDescription
                    }]
                }, {
                    title: "GS - Player Achievements Loop",
                    properties: [{
                        name: "Current Player Achievement Index",
                        value: this.currentPlayerAchievementIndex
                    }, {
                        name: "Current Player Achievement ID",
                        value: this.currentPlayerAchievementId
                    }, {
                        name: "Current Player Achievement Unlock Date",
                        value: this.currentPlayerAchievementUnlockDate
                    }]
                }, {
                    title: "GS - Products Loop",
                    properties: [{
                        name: "Current Product Index",
                        value: this.currentProductIndex
                    }, {
                        name: "Current Product ID",
                        value: this.currentProduct.id
                    }, {
                        name: "Current Product Tag",
                        value: this.currentProduct.tag
                    }, {
                        name: "Current Product Name",
                        value: this.currentProduct.name
                    }, {
                        name: "Current Product Description",
                        value: this.currentProduct.description
                    }, {
                        name: "Current Product Icon",
                        value: this.currentProduct.icon
                    }, {
                        name: "Current Product Icon Small",
                        value: this.currentProduct.iconSmall
                    }, {
                        name: "Current Product Icon",
                        value: this.currentProduct.icon
                    }, {
                        name: "Current Product Price",
                        value: this.currentProduct.price
                    }, {
                        name: "Current Product Currency",
                        value: this.currentProduct.currency
                    }, {
                        name: "Current Product CurrencySymbol",
                        value: this.currentProduct.currencySymbol
                    }, {
                        name: "Current Product Purchases",
                        value: this.currentProductPurchases
                    }]
                }, {
                    title: "GS - Purchased Product",
                    properties: [{
                        name: "Is purchase successful",
                        value: this.isPurchaseProductSuccess
                    }, {
                        name: "Purchase error",
                        value: this.purchaseProductError
                    }, {
                        name: "Purchased Product ID",
                        value: this.purchasedProductId
                    }, {
                        name: "Purchased Product Tag",
                        value: this.purchasedProductTag
                    }]
                }, {
                    title: "GS - Consumed Product",
                    properties: [{
                        name: "Is consume successful",
                        value: this.isConsumeProductSuccess
                    }, {
                        name: "Consume error",
                        value: this.consumeProductError
                    }, {
                        name: "Consumed Product ID",
                        value: this.consumedProductId
                    }, {
                        name: "Consumed Product Tag",
                        value: this.consumedProductTag
                    }]
                }, {
                    title: "GS - Last Games Collection",
                    properties: [{
                        name: "Collection ID",
                        value: this.gamesCollection.id
                    }, {
                        name: "Collection Tag",
                        value: this.gamesCollection.tag
                    }, {
                        name: "Collection Name",
                        value: this.gamesCollection.name
                    }, {
                        name: "Collection Description",
                        value: this.gamesCollection.description
                    }, {
                        name: "Fetch Error",
                        value: this.gamesCollectionFetchError
                    }]
                }, {
                    title: "GS - Games in Collection",
                    properties: [{
                        name: "Current Game Index",
                        value: this.currentGameIndex
                    }, {
                        name: "Current Game ID",
                        value: this.currentGameId
                    }, {
                        name: "Current Game Name",
                        value: this.currentGameName
                    }, {
                        name: "Current Game Description",
                        value: this.currentGameDescription
                    }, {
                        name: "Current Game Icon",
                        value: this.currentGameIcon
                    }, {
                        name: "Current Game Url",
                        value: this.currentGameUrl
                    }]
                }, {
                    title: "GS - Documents",
                    properties: [{
                        name: "Document Type",
                        value: this.document.type
                    }, {
                        name: "Document Content",
                        value: this.document.content
                    }, {
                        name: "Fetch Error",
                        value: this.documentFetchError
                    }]
                }] : []
            }
        }
    }
}

{
    "use strict";

    function each(e, r, t) {
        const s = e.GetEventSheetManager(),
            n = e.GetCurrentEvent(),
            a = n.GetSolModifiers(),
            i = e.GetEventStack(),
            u = i.GetCurrentStackFrame(),
            c = i.Push(n);
        r.forEach((e, r) => {
            t(e, r), s.PushCopySol(a), n.Retrigger(u, c), s.PopSol(a)
        }), i.Pop()
    }
    C3.Plugins.Eponesh_GameScore.Cnds = {
        OnPlayerChange() {
            return !0
        },
        OnPlayerSyncComplete() {
            return !0
        },
        OnPlayerSyncError() {
            return !0
        },
        OnPlayerLoadComplete() {
            return !0
        },
        OnPlayerLoadError() {
            return !0
        },
        OnPlayerLoginComplete() {
            return !0
        },
        OnPlayerLoginError() {
            return !0
        },
        OnPlayerFetchFieldsComplete() {
            return !0
        },
        OnPlayerFetchFieldsError() {
            return !0
        },
        OnPlayerReady() {
            return !0
        },
        IsPlayerReady() {
            return this.isPlayerReady
        },
        IsPlayerStub() {
            return this.gp.player.isStub
        },
        IsPlayerLoggedIn() {
            return this.gp.player.isLoggedIn
        },
        PlayerHasKey(e) {
            return this.gp.player.has(e)
        },
        PlayerFieldIsEnum(e) {
            return this.gp.player.getField(e).variants.length
        },
        PlayerCompareScore(e, r) {
            return this.mappers.compare[e](this.gp.player.score, r)
        },
        PlayerCompare(e, r, t) {
            return this.mappers.compare[r](this.gp.player.get(e), t)
        },
        PlayerEachField() {
            return each(this._runtime, this.gp.player.fields, e => {
                this.currentPlayerFieldKey = e.key, this.currentPlayerFieldType = e.type, this.currentPlayerFieldName = e.name, this.currentPlayerFieldValue = this.gp.player.get(e.key)
            }), !1
        },
        PlayerEachFieldVariant(e) {
            return each(this._runtime, this.gp.player.getField(e).variants, (e, r) => {
                this.currentPlayerFieldVariantValue = e.value, this.currentPlayerFieldVariantName = e.name, this.currentPlayerFieldVariantIndex = r
            }), !1
        },
        OnLeaderboardOpen() {
            return !0
        },
        OnLeaderboardFetch(e) {
            return this.lastLeaderboardTag === e
        },
        OnLeaderboardAnyFetch() {
            return !0
        },
        OnLeaderboardFetchError(e) {
            return this.lastLeaderboardTag === e
        },
        OnLeaderboardAnyFetchError() {
            return !0
        },
        OnLeaderboardFetchPlayer(e) {
            return this.lastLeaderboardPlayerRatingTag === e
        },
        OnLeaderboardAnyFetchPlayer() {
            return !0
        },
        OnLeaderboardFetchPlayerError(e) {
            return this.lastLeaderboardPlayerRatingTag === e
        },
        OnLeaderboardAnyFetchPlayerError() {
            return !0
        },
        OnLeaderboardPublishRecord() {
            return !0
        },
        OnLeaderboardPublishRecordError() {
            return !0
        },
        LeaderboardEachPlayer() {
            return each(this._runtime, this.leaderboard, (e, r) => {
                this.currentLeaderboardIndex = r, this.currentLeaderboardPlayer = e
            }), !1
        },
        OnAchievementsOpen() {
            return !0
        },
        OnAchievementsClose() {
            return !0
        },
        OnAchievementsFetch() {
            return !0
        },
        OnAchievementsFetchError() {
            return !0
        },
        OnAchievementsUnlock(e) {
            var r = parseInt(e, 10) || 0;
            return this.currentAchievement.tag === e || this.currentAchievement.id === r
        },
        OnAchievementsAnyUnlock() {
            return !0
        },
        OnAchievementsAnyUnlockError() {
            return !0
        },
        OnAchievementsSetProgress(e) {
            var r = parseInt(e, 10) || 0;
            return this.currentAchievement.tag === e || this.currentAchievement.id === r
        },
        OnAchievementsAnySetProgress() {
            return !0
        },
        OnAchievementsAnySetProgressError() {
            return !0
        },
        AchievementsEachAchievement() {
            return each(this._runtime, this.achievements, (r, e) => {
                this.currentAchievementIndex = e, this.currentAchievement = r;
                e = this.playerAchievements.find(e => e.achievementId === r.id);
                e && (this.currentAchievement.unlocked = e.unlocked, this.currentAchievement.progress = e.progress)
            }), !1
        },
        AchievementsEachAchievementInGroup(r) {
            const t = parseInt(r, 10) || 0,
                e = this.achievementsGroups.find(e => e.tag === r || e.id === t);
            var s = e ? e.achievements.reduce((e, r) => {
                var t = this.achievements.find(e => e.id === r);
                return t && e.push(t), e
            }, []) : [];
            return each(this._runtime, s, (r, e) => {
                this.currentAchievementIndex = e, this.currentAchievement = r;
                e = this.playerAchievements.find(e => e.achievementId === r.id);
                e && (this.currentAchievement.unlocked = e.unlocked, this.currentAchievement.progress = e.progress)
            }), !1
        },
        AchievementsEachAchievementsGroup() {
            return each(this._runtime, this.achievementsGroups, (e, r) => {
                this.currentAchievementsGroupIndex = r, this.currentAchievementsGroupId = e.id, this.currentAchievementsGroupTag = e.tag, this.currentAchievementsGroupName = e.name, this.currentAchievementsGroupDescription = e.description
            }), !1
        },
        AchievementsEachPlayerAchievements() {
            return each(this._runtime, this.gp.achievements.unlockedList, (e, r) => {
                this.currentPlayerAchievementIndex = r, this.currentPlayerAchievementId = e.id, this.currentPlayerAchievementUnlockDate = e.createdAt
            }), !1
        },
        IsAchievementsCurAchievementUnlocked() {
            return this.currentAchievement.unlocked
        },
        IsAchievementsCurAchievementLockedVisible() {
            return !!this.currentAchievement.isLockedVisible
        },
        IsAchievementsCurAchievementLockedDescriptionVisible() {
            return !!this.currentAchievement.isLockedDescriptionVisible
        },
        IsAchievementsUnlockSuccessful() {
            return this.isUnlockAchievementSuccess
        },
        AchievementsIsUnlocked(e) {
            return this.gp.achievements.has(e)
        },
        OnPaymentsFetchProducts() {
            return !0
        },
        OnPaymentsFetchProductsError() {
            return !0
        },
        OnEventConnect() {
            return !0
        },
        OnPaymentsPurchase(e) {
            var r = parseInt(e, 10) || 0;
            return this.purchasedProductTag === e || this.purchasedProductId === r
        },
        OnPaymentsPurchaseError(e) {
            var r = parseInt(e, 10) || 0;
            return this.purchasedProductTag === e || this.purchasedProductId === r
        },
        OnPaymentsAnyPurchase() {
            return !0
        },
        OnPaymentsAnyPurchaseError() {
            return !0
        },
        OnPaymentsConsume(e) {
            var r = parseInt(e, 10) || 0;
            return this.consumedProductTag === e || this.consumedProductId === r
        },
        OnPaymentsConsumeError(e) {
            var r = parseInt(e, 10) || 0;
            return this.consumedProductTag === e || this.consumedProductId === r
        },
        OnPaymentsAnyConsume() {
            return !0
        },
        OnPaymentsAnyConsumeError() {
            return !0
        },
        OnPaymentsSubscribe(e) {
            var r = parseInt(e, 10) || 0;
            return this.purchasedProductTag === e || this.purchasedProductId === r
        },
        OnPaymentsSubscribeError(e) {
            var r = parseInt(e, 10) || 0;
            return this.purchasedProductTag === e || this.purchasedProductId === r
        },
        OnPaymentsAnySubscribe() {
            return !0
        },
        OnPaymentsAnySubscribeError() {
            return !0
        },
        OnPaymentsUnsubscribe(e) {
            var r = parseInt(e, 10) || 0;
            return this.purchasedProductTag === e || this.purchasedProductId === r
        },
        OnPaymentsUnsubscribeError(e) {
            var r = parseInt(e, 10) || 0;
            return this.purchasedProductTag === e || this.purchasedProductId === r
        },
        OnPaymentsAnyUnsubscribe() {
            return !0
        },
        OnPaymentsAnyUnsubscribeError() {
            return !0
        },
        PaymentsEachProduct() {
            return each(this._runtime, this.products, (r, e) => {
                this.currentProductIndex = e, this.currentProduct = r, this.currentProductPurchases = this.playerPurchases.filter(e => e.productId === r.id).length
            }), !1
        },
        PaymentsEachPurchase() {
            return each(this._runtime, this.gp.payments.purchases, (e, r) => {
                this.currentPurchaseIndex = r, this.currentPurchase = e
            }), !1
        },
        IsPaymentsCurProductPurchased() {
            return 0 < this.currentProductPurchases
        },
        IsPaymentsPurchaseSuccessful() {
            return this.isPurchaseProductSuccess
        },
        IsPaymentsConsumeSuccessful() {
            return this.isConsumeProductSuccess
        },
        IsPaymentsSubscribeSuccessful() {
            return this.isSubscribeProductSuccess
        },
        IsPaymentsUnsubscribeSuccessful() {
            return this.isUnsubscribeProductSuccess
        },
        PaymentsIsPurchased(e) {
            return this.gp.payments.has(e)
        },
        PaymentsIsSubscribed(e) {
            e = this.gp.payments.getPurchase(e);
            return e && e.subscribed || !1
        },
        IsPaymentsAvailable() {
            return this.gp.payments.isAvailable
        },
        IsSubscriptionsAvailable() {
            return this.gp.payments.isSubscriptionsAvailable
        },
        OnImagesFetch() {
            return !0
        },
        OnImagesFetchError() {
            return !0
        },
        OnImagesFetchMore() {
            return !0
        },
        OnImagesFetchMoreError() {
            return !0
        },
        OnImagesUpload() {
            return !0
        },
        OnImagesUploadError() {
            return !0
        },
        OnImagesChoose() {
            return !0
        },
        OnImagesChooseError() {
            return !0
        },
        ImagesEachImage() {
            return each(this._runtime, this.images, (e, r) => {
                this.currentImageIndex = r, this.currentImage = e
            }), !1
        },
        ImagesEachTag(r) {
            var e = this.images.find(e => e.id === r),
                e = e ? e.tags : [];
            return each(this._runtime, e || [], (e, r) => {
                this.currentImageTagIndex = r, this.currentImageTag = e
            }), !1
        },
        ImagesCanLoadMore() {
            return this.canLoadMoreImages
        },
        ImagesCanUpload() {
            return this.gp.images.canUpload
        },
        OnFilesFetch() {
            return !0
        },
        OnFilesFetchError() {
            return !0
        },
        OnFilesFetchMore() {
            return !0
        },
        OnFilesFetchMoreError() {
            return !0
        },
        OnFilesUpload() {
            return !0
        },
        OnFilesUploadError() {
            return !0
        },
        OnFilesLoadContent() {
            return !0
        },
        OnFilesLoadContentError() {
            return !0
        },
        OnFilesChoose() {
            return !0
        },
        OnFilesChooseError() {
            return !0
        },
        FilesEachFile() {
            return each(this._runtime, this.files, (e, r) => {
                this.currentFileIndex = r, this.currentFile = e
            }), !1
        },
        FilesEachTag(r) {
            var e = this.files.find(e => e.id === r),
                e = e ? e.tags : [];
            return each(this._runtime, e || [], (e, r) => {
                this.currentFileTagIndex = r, this.currentFileTag = e
            }), !1
        },
        FilesCanLoadMore() {
            return this.canLoadMoreFiles
        },
        FilesCanUpload() {
            return this.gp.files.canUpload
        },
        OnVariablesFetch() {
            return !0
        },
        OnVariablesFetchError() {
            return !0
        },
        VariablesEachVariable() {
            return each(this._runtime, this.gp.variables.list, (e, r) => {
                this.currentVariableIndex = r, this.currentVariable = e
            }), !1
        },
        VariablesCompare(e, r, t) {
            return this.mappers.compare[r](this.gp.variables.get(e), t)
        },
        VariablesCompareType(e, r) {
            return this.gp.variables.type(e) === this.mappers.variablesTypes[r]
        },
        VariablesHas(e) {
            return this.gp.variables.has(e)
        },
        OnFullscreenOpen() {
            return !0
        },
        OnFullscreenClose() {
            return !0
        },
        OnFullscreenChange() {
            return !0
        },
        IsFullscreenMode() {
            return this.gp.fullscreen.isEnabled
        },
        OnAdsStart() {
            return !0
        },
        OnAdsClose() {
            return !0
        },
        OnAdsFullscreenStart() {
            return !0
        },
        OnAdsFullscreenClose() {
            return !0
        },
        OnAdsPreloaderStart() {
            return !0
        },
        OnAdsPreloaderClose() {
            return !0
        },
        OnAdsRewardedStart() {
            return !0
        },
        OnAdsRewardedClose() {
            return !0
        },
        OnAdsRewardedReward() {
            return !0
        },
        OnAdsStickyStart() {
            return !0
        },
        OnAdsStickyClose() {
            return !0
        },
        OnAdsStickyRefresh() {
            return !0
        },
        OnAdsStickyRender() {
            return !0
        },
        IsAdsFullscreenAvailable() {
            return this.gp.ads.isFullscreenAvailable
        },
        IsAdsRewardedAvailable() {
            return this.gp.ads.isRewardedAvailable
        },
        IsAdsPreloaderAvailable() {
            return this.gp.ads.isPreloaderAvailable
        },
        IsAdsStickyAvailable() {
            return this.gp.ads.isStickyAvailable
        },
        IsAdsFullscreenPlaying() {
            return this.gp.ads.isFullscreenPlaying
        },
        IsAdsRewardedPlaying() {
            return this.gp.ads.isRewardedPlaying
        },
        IsAdsPreloaderPlaying() {
            return this.gp.ads.isPreloaderPlaying
        },
        IsAdsStickyPlaying() {
            return this.gp.ads.isStickyPlaying
        },
        IsAdsAdblockEnabled() {
            return this.gp.ads.isAdblockEnabled
        },
        IsAdsLastAdSuccess() {
            return Boolean(this.isLastAdSuccess)
        },
        OnChangeLanguage() {
            return !0
        },
        OnChangeAvatarGenerator() {
            return !0
        },
        OnOverlayReady() {
            return !0
        },
        IsDev() {
            return this.gp.isDev
        },
        IsMobile() {
            return this.gp.isMobile
        },
        IsAllowedOrigin() {
            return this.gp.isAllowedOrigin
        },
        Language(e) {
            return this.gp.language === this.mappers.language[e]
        },
        OnPause() {
            return !0
        },
        OnResume() {
            return !0
        },
        IsPaused() {
            return this.gp.isPaused
        },
        OnGameplayStart() {
            return !0
        },
        OnGameplayStop() {
            return !0
        },
        IsGameplay() {
            return this.gp.isGameplay
        },
        HasPlatformIntegratedAuth() {
            return this.gp.platform.hasIntegratedAuth
        },
        PlatformType(e) {
            return this.gp.platform.type === this.mappers.platform[e]
        },
        IsExternalLinksAllowedOnPlatform() {
            return this.gp.platform.isExternalLinksAllowed
        },
        OnSocialsShare() {
            return !0
        },
        OnSocialsPost() {
            return !0
        },
        OnSocialsInvite() {
            return !0
        },
        OnSocialsJoinCommunity() {
            return !0
        },
        IsSocialsLastShareSuccess() {
            return this.isLastShareSuccess
        },
        IsSocialsLastCommunityJoinSuccess() {
            return this.isLastCommunityJoinSuccess
        },
        IsSocialsSupportsShare() {
            return this.gp.socials.isSupportsShare
        },
        IsSocialsSupportsNativeShare() {
            return this.gp.socials.isSupportsNativeShare
        },
        IsSocialsSupportsNativePosts() {
            return this.gp.socials.isSupportsNativePosts
        },
        IsSocialsSupportsNativeInvite() {
            return this.gp.socials.isSupportsNativeInvite
        },
        IsSocialsSupportsNativeCommunityJoin() {
            return this.gp.socials.isSupportsNativeCommunityJoin
        },
        SocialsCanJoinCommunity() {
            return this.gp.socials.canJoinCommunity
        },
        OnAppAddShortcut() {
            return !0
        },
        IsAppLastAddShortcutSuccess() {
            return this.isLastAddShortcutSuccess
        },
        AppCanAddShortcut() {
            return this.gp.app.canAddShortcut
        },
        OnGamesCollectionsOpen() {
            return !0
        },
        OnGamesCollectionsClose() {
            return !0
        },
        OnGamesCollectionsFetchAny() {
            return !0
        },
        OnGamesCollectionsFetchAnyError() {
            return !0
        },
        OnGamesCollectionsFetch(e) {
            return this.lastGamesCollectionIdOrTag === e
        },
        OnGamesCollectionsFetchError(e) {
            return this.lastGamesCollectionIdOrTag === e
        },
        GamesCollectionsEachGame() {
            return each(this._runtime, this.gamesCollection.games, (e, r) => {
                this.currentGameIndex = r, this.currentGameId = e.id, this.currentGameName = e.name, this.currentGameDescription = e.description, this.currentGameIcon = e.icon, this.currentGameUrl = e.url
            }), !1
        },
        IsGamesCollectionsAvailable() {
            return this.gp.gamesCollections.isAvailable
        },
        OnDocumentsOpen() {
            return !0
        },
        OnDocumentsClose() {
            return !0
        },
        OnDocumentsFetchAny() {
            return !0
        },
        OnDocumentsFetchAnyError() {
            return !0
        },
        OnDocumentsFetch(e) {
            return this.lastDocumentType === this.mappers.documentTypes[e]
        },
        OnDocumentsFetchError(e) {
            return this.lastDocumentType === this.mappers.documentTypes[e]
        },
        OnPlayersFetch(e) {
            return this.lastPlayersTag === e
        },
        OnPlayersAnyFetch() {
            return !0
        },
        OnPlayersFetchError(e) {
            return this.lastPlayersTag === e
        },
        OnPlayersAnyFetchError() {
            return !0
        },
        PlayersEachPlayer() {
            return each(this._runtime, this.playersList, (e, r) => {
                this.currentPlayersIndex = r, this.currentPlayersPlayer = e
            }), !1
        },
        PlayersEachPlayerAchievement() {
            return each(this._runtime, this.currentPlayersPlayer.achievements, (e, r) => {
                this.currentPlayerAchievementIndex = r, this.currentPlayerAchievementId = e.id, this.currentPlayerAchievementUnlockDate = e.createdAt
            }), !1
        },
        PlayersEachPlayerPurchase() {
            return each(this._runtime, this.currentPlayersPlayer.purchases, (e, r) => {
                this.currentPurchaseIndex = r, this.currentPurchase = e
            }), !1
        },
        IsLastActionSuccess() {
            return this.isLastActionSuccess
        },
        OnLoadJsonError() {
            return !0
        }
    };
}

{
    "use strict";

    function stoarr(e = "", t = String) {
        return String(e).split(",").map(e => t(e.trim())).filter(e => e)
    }
    C3.Plugins.Eponesh_GameScore.Acts = {
        PlayerSetName(e) {
            this.gp.player.name = e
        },
        PlayerSetAvatar(e) {
            this.gp.player.avatar = e
        },
        PlayerSetScore(e) {
            this.gp.player.score = e
        },
        PlayerAddScore(e) {
            this.gp.player.score += e
        },
        PlayerSet(e, t) {
            this.gp.player.set(e, t)
        },
        PlayerSetFlag(e, t) {
            this.gp.player.set(e, !t)
        },
        PlayerAdd(e, t) {
            this.gp.player.add(e, t)
        },
        PlayerToggle(e) {
            this.gp.player.toggle(e)
        },
        PlayerReset() {
            this.gp.player.reset()
        },
        PlayerRemove() {
            this.gp.player.remove()
        },
        PlayerSync(e = !1) {
            return this.gp.player.sync({
                override: e
            })
        },
        PlayerLoad() {
            return this.gp.player.load()
        },
        PlayerLogin() {
            return this.gp.player.login()
        },
        PlayerFetchFields() {
            return this.gp.player.fetchFields()
        },
        PlayerWaitForReady() {
            return this.awaiters.player.ready
        },
        LeaderboardOpen(e, t, s, r, i, a) {
            return this.gp.leaderboard.open({
                id: this.gp.player.id,
                orderBy: stoarr(e),
                order: 0 === t ? "DESC" : "ASC",
                limit: s,
                withMe: this.mappers.withMe[r],
                includeFields: stoarr(i),
                displayFields: stoarr(a)
            }).catch(e => {
                this.handleResult(!1, e)
            })
        },
        LeaderboardFetch(t, e, s, r, i, a) {
            return this.gp.leaderboard.fetch({
                id: this.gp.player.id,
                orderBy: stoarr(e),
                order: 0 === s ? "DESC" : "ASC",
                limit: r,
                withMe: this.mappers.withMe[i],
                includeFields: stoarr(a)
            }).then(e => {
                this.lastLeaderboardTag = t, this.lastLeaderboardVariant = "default", this.leaderboardInfo = e.leaderboard, this.leaderboard = e.players, this.handleResult(!0), this.Trigger(this.conditions.OnLeaderboardFetch), this.Trigger(this.conditions.OnLeaderboardAnyFetch)
            }).catch(e => {
                this.handleResult(!1, e), this.lastLeaderboardTag = t, this.lastLeaderboardVariant = "default", this.Trigger(this.conditions.OnLeaderboardFetchError), this.Trigger(this.conditions.OnLeaderboardAnyFetchError)
            })
        },
        LeaderboardFetchPlayerRating(t, e, s) {
            return this.gp.leaderboard.fetchPlayerRating({
                id: this.gp.player.id,
                orderBy: stoarr(e),
                order: 0 === s ? "DESC" : "ASC"
            }).then(e => {
                this.lastLeaderboardTag = t, this.lastLeaderboardVariant = "default", this.lastLeaderboardPlayerRatingTag = t, this.currentLeaderboardPlayer = Object.assign(this.gp.player.toJSON(), e.player), this.leaderboardPlayerPosition = e.player.position, this.handleResult(!0), this.Trigger(this.conditions.OnLeaderboardFetchPlayer), this.Trigger(this.conditions.OnLeaderboardAnyFetchPlayer)
            }).catch(e => {
                this.handleResult(!1, e), this.lastLeaderboardTag = t, this.lastLeaderboardVariant = "default", this.lastLeaderboardPlayerRatingTag = t, this.Trigger(this.conditions.OnLeaderboardFetchPlayerError), this.Trigger(this.conditions.OnLeaderboardAnyFetchPlayerError)
            })
        },
        LeaderboardOpenScoped(e, t, s, r, i, a, h) {
            e = {
                id: parseInt(e, 10) || 0,
                tag: e,
                variant: t,
                limit: r,
                order: this.mappers.order[s],
                withMe: this.mappers.withMe[i],
                includeFields: stoarr(a),
                displayFields: stoarr(h)
            };
            return this.gp.leaderboard.openScoped(e).catch(console.warn)
        },
        LeaderboardFetchScoped(t, s, e, r, i, a) {
            r = {
                id: parseInt(t, 10) || 0,
                tag: t,
                variant: s,
                limit: r,
                order: this.mappers.order[e],
                withMe: this.mappers.withMe[i],
                includeFields: stoarr(a)
            };
            return this.gp.leaderboard.fetchScoped(r).then(e => {
                this.lastLeaderboardTag = t, this.lastLeaderboardVariant = s, this.leaderboardInfo = e.leaderboard, this.leaderboard = e.players, this.handleResult(!0), this.Trigger(this.conditions.OnLeaderboardFetch), this.Trigger(this.conditions.OnLeaderboardAnyFetch)
            }).catch(e => {
                this.handleResult(!1, e), this.lastLeaderboardTag = t, this.lastLeaderboardVariant = s, this.Trigger(this.conditions.OnLeaderboardFetchError), this.Trigger(this.conditions.OnLeaderboardAnyFetchError)
            })
        },
        LeaderboardFetchPlayerRatingScoped(t, s, e) {
            e = {
                id: parseInt(t, 10) || 0,
                tag: t,
                variant: s,
                order: this.mappers.order[e]
            };
            return this.gp.leaderboard.fetchPlayerRatingScoped(e).then(e => {
                this.lastLeaderboardPlayerRatingTag = t, this.lastLeaderboardTag = t, this.lastLeaderboardVariant = s, this.currentLeaderboardPlayer = Object.assign(this.gp.player.toJSON(), e.player), this.leaderboardPlayerPosition = e.player.position, this.handleResult(!0), this.Trigger(this.conditions.OnLeaderboardFetchPlayer), this.Trigger(this.conditions.OnLeaderboardAnyFetchPlayer)
            }).catch(e => {
                this.handleResult(!1, e), this.lastLeaderboardPlayerRatingTag = t, this.lastLeaderboardTag = t, this.lastLeaderboardVariant = s, this.Trigger(this.conditions.OnLeaderboardFetchPlayerError), this.Trigger(this.conditions.OnLeaderboardAnyFetchPlayerError)
            })
        },
        LeaderboardPublishRecord(t, s, e) {
            var r = this.leaderboardRecords[t],
                r = r ? r[s] : null,
                i = parseInt(t, 10) || 0;
            return this.gp.leaderboard.publishRecord({
                id: i,
                tag: t,
                variant: s,
                override: e,
                record: r
            }).then(e => {
                this.lastLeaderboardTag = t, this.lastLeaderboardVariant = s, this.lastLeaderboardPlayerRatingTag = t, this.leaderboardPlayerPosition = e.player.position, this.currentLeaderboardPlayer = Object.assign(this.gp.player.toJSON(), e.player), this.handleResult(!0), this.Trigger(this.conditions.OnLeaderboardPublishRecord)
            }).catch(e => {
                this.handleResult(!1, e), this.lastLeaderboardTag = t, this.lastLeaderboardVariant = s, this.lastLeaderboardPlayerRatingTag = t, this.Trigger(this.conditions.OnLeaderboardPublishRecordError)
            })
        },
        LeaderboardSetRecord(e, t, s, r) {
            this.leaderboardRecords[e] || (this.leaderboardRecords[e] = {}), this.leaderboardRecords[e][t] || (this.leaderboardRecords[e][t] = {}), this.leaderboardRecords[e][t][s] = r
        },
        AchievementsOpen() {
            return this.gp.achievements.open().catch(console.warn)
        },
        AchievementsFetch() {
            return this.gp.achievements.fetch().then(e => {
                this.achievements = e.achievements, this.achievementsGroups = e.achievementsGroups, this.playerAchievements = e.playerAchievements, this.handleResult(!0), this.Trigger(this.conditions.OnAchievementsFetch)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnAchievementsFetchError)
            })
        },
        AchievementsUnlock(e) {
            var t = parseInt(e, 10) || 0;
            return this.gp.achievements.unlock(0 < t ? {
                id: t
            } : {
                tag: e
            }).then(e => {
                this.isUnlockAchievementSuccess = e.success, this.unlockAchievementError = e.error || "", this.handleResult(e.success, e.error);
                var t = e.achievement || {};
                if (this.currentAchievementIndex = 0, this.currentAchievement = t, e.success) return this.Trigger(this.conditions.OnAchievementsUnlock), void this.Trigger(this.conditions.OnAchievementsAnyUnlock);
                this.Trigger(this.conditions.OnAchievementsAnyUnlockError)
            }).catch(e => {
                this.isUnlockAchievementSuccess = !1, this.unlockAchievementError = this.etos(e), this.handleResult(!1, e), this.Trigger(this.conditions.OnAchievementsAnyUnlockError)
            })
        },
        AchievementsSetProgress(e, t) {
            t = Number(t);
            var s = parseInt(e, 10) || 0;
            return this.gp.achievements.setProgress(0 < s ? {
                id: s,
                progress: t
            } : {
                tag: e,
                progress: t
            }).then(e => {
                this.handleResult(e.success, e.error);
                var t = e.achievement || {};
                if (this.currentAchievementIndex = 0, this.currentAchievement = t, e.success) return this.Trigger(this.conditions.OnAchievementsSetProgress), void this.Trigger(this.conditions.OnAchievementsAnySetProgress);
                this.Trigger(this.conditions.OnAchievementsAnySetProgressError)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnAchievementsAnySetProgressError)
            })
        },
        PaymentsFetchProducts() {
            return this.gp.payments.fetchProducts().then(e => {
                this.products = e.products, this.playerPurchases = e.playerPurchases, this.handleResult(!0), this.Trigger(this.conditions.OnPaymentsFetchProducts)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnPaymentsFetchProductsError)
            })
        },
        PaymentsPurchase(e) {
            var t = parseInt(e, 10) || 0;
            return this.gp.payments.purchase(0 < t ? {
                id: t
            } : {
                tag: e
            }).then(e => {
                this.isPurchaseProductSuccess = e.success, this.purchaseProductError = e.error || "", this.handleResult(e.success, e.error);
                var t = e.product || {};
                if (this.purchasedProductId = t.id || 0, this.purchasedProductTag = t.tag || "", e.success) return this.Trigger(this.conditions.OnPaymentsPurchase), void this.Trigger(this.conditions.OnPaymentsAnyPurchase);
                this.Trigger(this.conditions.OnPaymentsPurchaseError), this.Trigger(this.conditions.OnPaymentsAnyPurchaseError)
            }).catch(e => {
                this.isPurchaseProductSuccess = !1, this.purchaseProductError = this.etos(e), this.handleResult(!1, e), this.Trigger(this.conditions.OnPaymentsPurchaseError), this.Trigger(this.conditions.OnPaymentsAnyPurchaseError)
            })
        },
        PaymentsConsume(e) {
            var t = parseInt(e, 10) || 0;
            return this.gp.payments.consume(0 < t ? {
                id: t
            } : {
                tag: e
            }).then(e => {
                this.isConsumeProductSuccess = e.success, this.consumeProductError = e.error || "", this.handleResult(e.success, e.error);
                var t = e.product || {};
                if (this.consumedProductId = t.id || 0, this.consumedProductTag = t.tag || "", e.success) return this.Trigger(this.conditions.OnPaymentsConsume), void this.Trigger(this.conditions.OnPaymentsAnyConsume);
                this.Trigger(this.conditions.OnPaymentsConsumeError), this.Trigger(this.conditions.OnPaymentsAnyConsumeError)
            }).catch(e => {
                this.isConsumeProductSuccess = !1, this.consumeProductError = this.etos(e), this.handleResult(!1, e), this.Trigger(this.conditions.OnPaymentsConsumeError), this.Trigger(this.conditions.OnPaymentsAnyConsumeError)
            })
        },
        PaymentsSubscribe(e) {
            var t = parseInt(e, 10) || 0;
            return this.gp.payments.subscribe(0 < t ? {
                id: t
            } : {
                tag: e
            }).then(e => {
                this.isSubscribeProductSuccess = e.success, this.handleResult(e.success, e.error);
                var t = e.product || {},
                    s = e.purchase || {};
                if (this.currentPurchase = s, this.currentProduct = t, this.currentProductPurchases = 1, this.purchasedProductId = t.id || 0, this.purchasedProductTag = t.tag || "", e.success) return this.Trigger(this.conditions.OnPaymentsSubscribe), void this.Trigger(this.conditions.OnPaymentsAnySubscribe);
                this.Trigger(this.conditions.OnPaymentsSubscribeError), this.Trigger(this.conditions.OnPaymentsAnySubscribeError)
            }).catch(e => {
                this.isSubscribeProductSuccess = !1, this.handleResult(!1, e), this.Trigger(this.conditions.OnPaymentsSubscribeError), this.Trigger(this.conditions.OnPaymentsAnySubscribeError)
            })
        },
        PaymentsUnsubscribe(e) {
            var t = parseInt(e, 10) || 0;
            return this.gp.payments.unsubscribe(0 < t ? {
                id: t
            } : {
                tag: e
            }).then(e => {
                this.isUnsubscribeProductSuccess = e.success, this.handleResult(e.success, e.error);
                var t = e.product || {},
                    s = e.purchase || {};
                if (this.currentPurchase = s, this.currentProduct = t, this.currentProductPurchases = 1, this.purchasedProductId = t.id || 0, this.purchasedProductTag = t.tag || "", e.success) return this.Trigger(this.conditions.OnPaymentsUnsubscribe), void this.Trigger(this.conditions.OnPaymentsAnyUnsubscribe);
                this.Trigger(this.conditions.OnPaymentsUnsubscribeError), this.Trigger(this.conditions.OnPaymentsAnyUnsubscribeError)
            }).catch(e => {
                this.isUnsubscribeProductSuccess = !1, this.handleResult(!1, e), this.Trigger(this.conditions.OnPaymentsUnsubscribeError), this.Trigger(this.conditions.OnPaymentsAnySubscribeError)
            })
        },
        ImagesFetch(e, t, s, r) {
            return this.gp.images.fetch({
                playerId: t,
                limit: s,
                offset: r,
                tags: stoarr(e)
            }).then(e => {
                this.images = e.items, this.canLoadMoreImages = e.canLoadMore, this.handleResult(!0), this.Trigger(this.conditions.OnImagesFetch)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnImagesFetchError)
            })
        },
        ImagesFetchMore(e, t, s) {
            return this.gp.images.fetchMore({
                playerId: t,
                limit: s,
                tags: stoarr(e)
            }).then(e => {
                this.images = e.items, this.canLoadMoreImages = e.canLoadMore, this.handleResult(!0), this.Trigger(this.conditions.OnImagesFetchMore)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnImagesFetchMoreError)
            })
        },
        ImagesUpload(e) {
            return this.gp.images.upload({
                tags: stoarr(e)
            }).then(e => {
                this.currentImage = e || {}, this.handleResult(!0), this.Trigger(this.conditions.OnImagesUpload)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnImagesUploadError)
            })
        },
        ImagesUploadUrl(e, t) {
            return this.gp.images.uploadUrl({
                url: e,
                tags: stoarr(t)
            }).then(e => {
                this.currentImage = e || {}, this.handleResult(!0), this.Trigger(this.conditions.OnImagesUpload)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnImagesUploadError)
            })
        },
        ImagesChooseFile() {
            return this.gp.images.chooseFile().then(e => {
                this.lastImageTempUrl = e.tempUrl, this.handleResult(!0), this.Trigger(this.conditions.OnImagesChoose)
            }).catch(e => {
                this.handleResult(!1, e), this.lastImageTempUrl = "", this.isLastActionSuccess = !1, this.Trigger(this.conditions.OnImagesChooseError)
            })
        },
        FilesFetch(e, t, s, r) {
            return this.gp.files.fetch({
                playerId: t,
                limit: s,
                offset: r,
                tags: stoarr(e)
            }).then(e => {
                this.files = e.items, this.canLoadMoreFiles = e.canLoadMore, this.handleResult(!0), this.Trigger(this.conditions.OnFilesFetch)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnFilesFetchError)
            })
        },
        FilesFetchMore(e, t, s) {
            return this.gp.files.fetchMore({
                playerId: t,
                limit: s,
                tags: stoarr(e)
            }).then(e => {
                this.files = e.items, this.canLoadMoreFiles = e.canLoadMore, this.handleResult(!0), this.Trigger(this.conditions.OnFilesFetchMore)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnFilesFetchMoreError)
            })
        },
        FilesUpload(e) {
            return this.gp.files.upload({
                tags: stoarr(e)
            }).then(e => {
                this.currentFile = e || {}, this.handleResult(!0), this.Trigger(this.conditions.OnFilesUpload)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnFilesUploadError)
            })
        },
        FilesUploadUrl(e, t, s) {
            return this.gp.files.uploadUrl({
                url: e,
                filename: t,
                tags: stoarr(s)
            }).then(e => {
                this.currentFile = e || {}, this.handleResult(!0), this.Trigger(this.conditions.OnFilesUpload)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnFilesUploadError)
            })
        },
        FilesUploadContent(e, t, s) {
            return this.gp.files.uploadContent({
                content: e,
                filename: t,
                tags: stoarr(s)
            }).then(e => {
                this.currentFile = e || {}, this.handleResult(!0), this.Trigger(this.conditions.OnFilesUpload)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnFilesUploadError)
            })
        },
        FilesLoadContent(e) {
            return this.gp.files.loadContent(e).then(e => {
                this.lastFileContent = e, this.handleResult(!0), this.Trigger(this.conditions.OnFilesLoadContent)
            }).catch(e => {
                this.lastFileContent = "", this.handleResult(!1, e), this.Trigger(this.conditions.OnFilesLoadContentError)
            })
        },
        FilesChooseFile(e) {
            return this.gp.files.chooseFile(e).then(e => {
                this.lastFileTempUrl = e.tempUrl, this.handleResult(!0), this.Trigger(this.conditions.OnFilesChoose)
            }).catch(e => {
                this.handleResult(!1, e), this.lastFileTempUrl = "", this.isLastActionSuccess = !1, this.Trigger(this.conditions.OnFilesChooseError)
            })
        },
        VariablesFetch() {
            return this.gp.variables.fetch().then(() => {
                this.handleResult(!0), this.Trigger(this.conditions.OnVariablesFetch)
            }).catch(e => {
                this.handleResult(!1, e), this.Trigger(this.conditions.OnVariablesFetchError)
            })
        },
        FullscreenOpen() {
            return this.gp.fullscreen.open()
        },
        FullscreenClose() {
            return this.gp.fullscreen.close()
        },
        FullscreenToggle() {
            return this.gp.fullscreen.toggle()
        },
        AdsShowFullscreen() {
            return this.gp.ads.showFullscreen()
        },
        AdsShowRewarded() {
            return this.gp.ads.showRewardedVideo()
        },
        AdsShowPreloader() {
            return this.gp.ads.showPreloader()
        },
        AdsShowSticky() {
            return this.gp.ads.showSticky()
        },
        AdsCloseSticky() {
            return this.gp.ads.closeSticky()
        },
        AdsRefreshSticky() {
            return this.gp.ads.refreshSticky()
        },
        AnalyticsHit(e) {
            return this.gp.analytics.hit(e)
        },
        AnalyticsGoal(e, t) {
            return this.gp.analytics.goal(e, t)
        },
        SocialsShare(e, t, s) {
            return this.gp.socials.share({
                text: e,
                url: t,
                image: s
            })
        },
        SocialsPost(e, t, s) {
            return this.gp.socials.post({
                text: e,
                url: t,
                image: s
            })
        },
        SocialsInvite(e, t, s) {
            return this.gp.socials.invite({
                text: e,
                url: t,
                image: s
            })
        },
        SocialsJoinCommunity() {
            return this.gp.socials.joinCommunity()
        },
        GamesCollectionsOpen(e) {
            var t = parseInt(e, 10) || 0;
            return this.gp.gamesCollections.open(0 < t ? {
                id: t
            } : {
                tag: e || "ANY"
            })
        },
        GamesCollectionsFetch(t) {
            var e = parseInt(t, 10) || 0;
            return this.gp.gamesCollections.fetch(0 < e ? {
                id: e
            } : {
                tag: t
            }).then(e => {
                this.lastGamesCollectionIdOrTag = t, this.gamesCollection = e, this.Trigger(this.conditions.OnGamesCollectionsFetch), this.Trigger(this.conditions.OnGamesCollectionsFetchAny)
            }).catch(e => {
                this.handleResult(!1, e), this.lastGamesCollectionIdOrTag = t, this.gamesCollectionFetchError = e && e.message || "", this.Trigger(this.conditions.OnGamesCollectionsFetchError), this.Trigger(this.conditions.OnGamesCollectionsFetchAnyError)
            })
        },
        DocumentsOpen(e) {
            e = this.mappers.documentTypes[e];
            return this.gp.documents.open({
                type: e
            })
        },
        DocumentsFetch(e, t) {
            const s = this.mappers.documentTypes[e];
            e = this.mappers.documentFormat[t];
            return this.gp.documents.fetch({
                type: s,
                format: e
            }).then(e => {
                this.lastDocumentType = s, this.document = e, this.Trigger(this.conditions.OnDocumentsFetch), this.Trigger(this.conditions.OnDocumentsFetchAny)
            }).catch(e => {
                this.handleResult(!1, e), this.documentFetchError = this.etos(e), this.lastDocumentType = s, this.Trigger(this.conditions.OnDocumentsFetchError), this.Trigger(this.conditions.OnDocumentsFetchAnyError)
            })
        },
        PlayersFetch(t, e) {
            return this.gp.players.fetch({
                ids: stoarr(e, Number)
            }).then(e => {
                this.lastPlayersTag = t, this.playersList = e.players, this.handleResult(!0), this.Trigger(this.conditions.OnPlayersFetch), this.Trigger(this.conditions.OnPlayersAnyFetch)
            }).catch(e => {
                this.lastPlayersTag = t, this.handleResult(!1, e), this.Trigger(this.conditions.OnPlayersFetchError), this.Trigger(this.conditions.OnPlayersAnyFetchError)
            })
        },
        PlayersFetchOne(t, e) {
            return this.gp.players.fetch({
                ids: [Number(e)]
            }).then(e => {
                this.lastPlayersTag = t, e.players[0] ? (this.playersList = e.players, this.currentPlayersIndex = 0, this.currentPlayersPlayer = e.players[0], this.handleResult(!0), this.Trigger(this.conditions.OnPlayersFetch), this.Trigger(this.conditions.OnPlayersAnyFetch)) : (this.handleResult(!1, new Error("player_not_found")), this.Trigger(this.conditions.OnPlayersFetchError), this.Trigger(this.conditions.OnPlayersAnyFetchError))
            }).catch(e => {
                this.lastPlayersTag = t, this.handleResult(!1, e), this.Trigger(this.conditions.OnPlayersFetchError), this.Trigger(this.conditions.OnPlayersAnyFetchError)
            })
        },
        AppAddShortcut() {
            return this.gp.app.addShortcut()
        },
        ChangeLanguage(e) {
            return this.gp.changeLanguage(this.mappers.language[e])
        },
        ChangeLanguageByCode(e = "") {
            return this.gp.changeLanguage(e.toLowerCase())
        },
        ChangeAvatarGenerator(e) {
            return this.gp.changeAvatarGenerator(this.mappers.avatarGenerator[e])
        },
        SetBackground(e, t, s) {
            return this.gp.setBackground({
                url: e,
                blur: t,
                fade: s
            })
        },
        LoadOverlay() {
            return this.gp.loadOverlay()
        },
        Pause() {
            return this.gp.pause()
        },
        Resume() {
            return this.gp.resume()
        },
        GameplayStart() {
            return this.gp.gameplayStart()
        },
        GameplayStop() {
            return this.gp.gameplayStop()
        },
        SocialsAddShareUrlParam(e, t) {
            this.shareParams[e] = t, this.shareLink = this.gp.socials.makeShareUrl(this.shareParams)
        },
        SocialsResetShareParams() {
            this.shareParams = {}, this.shareLink = this.gp.socials.makeShareUrl(this.shareParams)
        },
        LoadFromJSON(e) {
            try {
                var t = JSON.parse(e);
                if (!("isReady" in t)) throw new Error("Data was corrupted");
                this.LoadFromJson(t)
            } catch (e) {
                this.Trigger(this.conditions.OnLoadJsonError)
            }
        }
    };
}

{
    "use strict";
    C3.Plugins.Eponesh_GameScore.Exps = {
        PlayerID() {
            return this.gp.player.id
        },
        PlayerScore() {
            return this.gp.player.score
        },
        PlayerName() {
            return this.gp.player.name
        },
        PlayerAvatar() {
            return this.gp.player.avatar
        },
        PlayerGet(e) {
            return this.gp.player.get(e)
        },
        PlayerHas(e) {
            return this.gp.player.is(e)
        },
        PlayerFieldName(e) {
            return this.gp.player.getFieldName(e)
        },
        PlayerFieldVariantName(e, r) {
            return this.gp.player.getFieldVariantName(e, r)
        },
        PlayerGetFieldVariantAt(e, r) {
            e = this.gp.player.getField(e).variants[r];
            return e ? e.value : ""
        },
        PlayerGetFieldVariantIndex(e, r) {
            return this.gp.player.getField(e).variants.findIndex(e => e.value === r)
        },
        PlayerCurFieldKey() {
            return this.currentPlayerFieldKey || ""
        },
        PlayerCurFieldType() {
            return this.currentPlayerFieldType || ""
        },
        PlayerCurFieldName() {
            return this.currentPlayerFieldName || ""
        },
        PlayerCurFieldValue() {
            return "string" == typeof this.currentPlayerFieldValue ? this.currentPlayerFieldValue : Number(this.currentPlayerFieldValue || 0)
        },
        PlayerCurFieldVariantValue() {
            return "string" == typeof this.currentPlayerFieldVariantValue ? this.currentPlayerFieldVariantValue : Number(this.currentPlayerFieldVariantValue || 0)
        },
        PlayerCurFieldVariantName() {
            return this.currentPlayerFieldVariantName || ""
        },
        PlayerCurFieldVariantIndex() {
            return this.currentPlayerFieldVariantIndex || 0
        },
        LeaderboardCurPlayerName() {
            return this.currentLeaderboardPlayer.name || ""
        },
        LeaderboardCurPlayerAvatar() {
            return this.currentLeaderboardPlayer.avatar || ""
        },
        LeaderboardCurPlayerID() {
            return this.currentLeaderboardPlayer.id || 0
        },
        LeaderboardCurPlayerScore() {
            return this.currentLeaderboardPlayer.score || 0
        },
        LeaderboardCurPlayerPosition() {
            return this.currentLeaderboardPlayer.position || 0
        },
        LeaderboardCurPlayerIndex() {
            return this.currentLeaderboardIndex || 0
        },
        LeaderboardCurPlayerField(e) {
            return e in this.currentLeaderboardPlayer ? this.currentLeaderboardPlayer[e] : 0
        },
        LeaderboardPlayerFieldAt(e, r) {
            e = this.leaderboard[e];
            return e && r in e ? e[r] : 0
        },
        LeaderboardPlayerPosition() {
            return this.leaderboardPlayerPosition || 0
        },
        LastLeaderboardTag() {
            return this.lastLeaderboardTag
        },
        LastLeaderboardVariant() {
            return this.lastLeaderboardVariant
        },
        IsFullscreenMode() {
            return Number(this.gp.fullscreen.isEnabled)
        },
        Language() {
            return this.gp.language
        },
        AvatarGenerator() {
            return this.gp.avatarGenerator
        },
        ServerTime() {
            return this.gp.serverTime
        },
        ServerTimeUnix() {
            return new Date(this.gp.serverTime).getTime()
        },
        IsPaused() {
            return this.gp.isPaused
        },
        IsGameplay() {
            return this.gp.isGameplay
        },
        PlatformType() {
            return this.gp.platform.type
        },
        AppTitle() {
            return this.gp.app.title
        },
        AppDescription() {
            return this.gp.app.description
        },
        AppImage() {
            return this.gp.app.image
        },
        AppUrl() {
            return this.gp.app.url
        },
        AchievementsTotalAchievements() {
            return this.achievements.length
        },
        AchievementsTotalAchievementsGroups() {
            return this.achievementsGroups.length
        },
        AchievementsTotalPlayerAchievements() {
            return this.playerAchievements.length
        },
        AchievementsCurAchievementIndex() {
            return this.currentAchievementIndex
        },
        AchievementsCurAchievementID() {
            return this.currentAchievement.id
        },
        AchievementsCurAchievementTag() {
            return this.currentAchievement.tag
        },
        AchievementsCurAchievementName() {
            return this.currentAchievement.name
        },
        AchievementsCurAchievementDescription() {
            return this.currentAchievement.description
        },
        AchievementsCurAchievementIcon() {
            return this.currentAchievement.icon
        },
        AchievementsCurAchievementIconSmall() {
            return this.currentAchievement.iconSmall
        },
        AchievementsCurAchievementRare() {
            return this.currentAchievement.rare
        },
        AchievementsCurAchievementUnlocked() {
            return this.currentAchievement.unlocked
        },
        AchievementsCurAchievementLockedIcon() {
            return this.currentAchievement.lockedIcon
        },
        AchievementsCurAchievementLockedIconSmall() {
            return this.currentAchievement.lockedIconSmall
        },
        AchievementsCurAchievementProgress() {
            return this.currentAchievement.progress
        },
        AchievementsCurAchievementMaxProgress() {
            return this.currentAchievement.maxProgress
        },
        AchievementsCurAchievementProgressStep() {
            return this.currentAchievement.progressStep
        },
        AchievementsCurAchievementsGroupIndex() {
            return this.currentAchievementsGroupIndex
        },
        AchievementsCurAchievementsGroupID() {
            return this.currentAchievementsGroupID
        },
        AchievementsCurAchievementsGroupTag() {
            return this.currentAchievementsGroupTag
        },
        AchievementsCurAchievementsGroupName() {
            return this.currentAchievementsGroupName
        },
        AchievementsCurAchievementsGroupDescription() {
            return this.currentAchievementsGroupDescription
        },
        AchievementsCurPlayerAchievementIndex() {
            return this.currentPlayerAchievementIndex
        },
        AchievementsCurPlayerAchievementID() {
            return this.currentPlayerAchievementId
        },
        AchievementsCurPlayerAchievementUnlockDate() {
            return this.currentPlayerAchievementUnlockDate
        },
        AchievementsUnlockedAchievementSuccess() {
            return this.isUnlockAchievementSuccess
        },
        AchievementsUnlockedAchievementError() {
            return this.unlockAchievementError
        },
        AchievementsUnlockedAchievementID() {
            return this.currentAchievement.id
        },
        AchievementsUnlockedAchievementTag() {
            return this.currentAchievement.tag
        },
        AchievementsUnlockedAchievementName() {
            return this.currentAchievement.name
        },
        AchievementsUnlockedAchievementDescription() {
            return this.currentAchievement.description
        },
        AchievementsUnlockedAchievementIcon() {
            return this.currentAchievement.icon
        },
        AchievementsUnlockedAchievementIconSmall() {
            return this.currentAchievement.iconSmall
        },
        AchievementsUnlockedAchievementRare() {
            return this.currentAchievement.rare
        },
        AchievementsGetProgress(e) {
            return this.gp.achievements.getProgress(e)
        },
        SocialsCommunityLink() {
            return this.gp.socials.communityLink
        },
        SocialsGetShareParam(e) {
            return this.gp.socials.getShareParam(e)
        },
        SocialsShareLink() {
            return this.shareLink
        },
        PaymentsCurProductIndex() {
            return this.currentProductIndex
        },
        PaymentsCurProductID() {
            return this.currentProduct.id
        },
        PaymentsCurProductTag() {
            return this.currentProduct.tag
        },
        PaymentsCurProductName() {
            return this.currentProduct.name
        },
        PaymentsCurProductDescription() {
            return this.currentProduct.description
        },
        PaymentsCurProductIcon() {
            return this.currentProduct.icon
        },
        PaymentsCurProductIconSmall() {
            return this.currentProduct.iconSmall
        },
        PaymentsCurProductPrice() {
            return this.currentProduct.price
        },
        PaymentsCurProductCurrency() {
            return this.currentProduct.currency
        },
        PaymentsCurProductCurrencySymbol() {
            return this.currentProduct.currencySymbol
        },
        PaymentsCurProductPurchases() {
            return this.currentProductPurchases
        },
        PaymentsCurPurchaseIndex() {
            return this.currentPurchaseIndex
        },
        PaymentsCurPurchaseID() {
            return this.currentPurchase.id || 0
        },
        PaymentsCurPurchaseTag() {
            return this.currentPurchase.tag || ""
        },
        PaymentsCurPurchaseDate() {
            return this.currentPurchase.createdAt || ""
        },
        PaymentsCurPurchaseExpirationDate() {
            return this.currentPurchase.expiredAt || ""
        },
        PaymentsCurPurchaseSubscribed() {
            return Number(this.currentPurchase.subscribed || !1) || 0
        },
        PaymentsPurchasedProductSuccess() {
            return this.isPurchaseProductSuccess
        },
        PaymentsPurchasedProductError() {
            return this.purchaseProductError
        },
        PaymentsPurchasedProductID() {
            return this.purchasedProductID
        },
        PaymentsPurchasedProductTag() {
            return this.purchasedProductTag
        },
        PaymentsConsumedProductSuccess() {
            return this.isConsumeProductSuccess
        },
        PaymentsConsumedProductError() {
            return this.consumeProductError
        },
        PaymentsConsumedProductID() {
            return this.consumedProductID
        },
        PaymentsConsumedProductTag() {
            return this.consumedProductTag
        },
        PaymentsPurchaseDate(e) {
            e = this.gp.payments.getPurchase(e);
            return e && e.createdAt || ""
        },
        PaymentsExpirationDate(e) {
            e = this.gp.payments.getPurchase(e);
            return e && e.expiredAt || ""
        },
        ImagesCurImageIndex() {
            return this.currentImageIndex
        },
        ImagesCurImageID() {
            return this.currentImage.id || ""
        },
        ImagesCurImageSrc() {
            return this.currentImage.src || ""
        },
        ImagesCurImageWidth() {
            return this.currentImage.width || 0
        },
        ImagesCurImageHeight() {
            return this.currentImage.height || 0
        },
        ImagesCurImagePlayerID() {
            return this.currentImage.playerId || 0
        },
        ImagesCurImageTagIndex() {
            return this.currentImageTagIndex
        },
        ImagesCurImageTag() {
            return this.currentImageTag || ""
        },
        ImagesTempFileUrl() {
            return this.lastImageTempUrl || ""
        },
        ImagesResize(e, r, t, n) {
            return this.gp.images.resize(e, r, t, n)
        },
        FilesCurFileIndex() {
            return this.currentFileIndex
        },
        FilesCurFileID() {
            return this.currentFile.id || ""
        },
        FilesCurFileSrc() {
            return this.currentFile.src || ""
        },
        FilesCurFileName() {
            return this.currentFile.name || ""
        },
        FilesCurFileSize() {
            return this.currentFile.size || 0
        },
        FilesCurFilePlayerID() {
            return this.currentFile.playerId || 0
        },
        FilesCurFileTagIndex() {
            return this.currentFileTagIndex
        },
        FilesCurFileTag() {
            return this.currentFileTag || ""
        },
        FilesTempFileUrl() {
            return this.lastFileTempUrl || ""
        },
        FilesLastFileContent() {
            return this.lastFileContent || ""
        },
        GamesCollectionsCollectionID() {
            return this.gamesCollection.id
        },
        GamesCollectionsCollectionTag() {
            return this.gamesCollection.tag
        },
        GamesCollectionsCollectionName() {
            return this.gamesCollection.name
        },
        GamesCollectionsCollectionDescription() {
            return this.gamesCollection.description
        },
        GamesCollectionsCurGameIndex() {
            return this.currentGameIndex
        },
        GamesCollectionsCurGameID() {
            return this.currentGameId
        },
        GamesCollectionsCurGameTag() {
            return this.currentGameTag
        },
        GamesCollectionsCurGameName() {
            return this.currentGameName
        },
        GamesCollectionsCurGameDescription() {
            return this.currentGameDescription
        },
        GamesCollectionsCurGameIcon() {
            return this.currentGameIcon
        },
        GamesCollectionsCurGameUrl() {
            return this.currentGameUrl
        },
        GamesCollectionsFetchError() {
            return this.gamesCollectionFetchError
        },
        DocumentsDocumentType() {
            return this.document.type
        },
        DocumentsDocumentContent() {
            return this.document.content
        },
        DocumentsFetchError() {
            return this.documentFetchError
        },
        VariablesGet(e) {
            return this.gp.variables.get(e)
        },
        VariablesHas(e) {
            return Number(this.gp.variables.has(e))
        },
        VariablesType(e) {
            return this.gp.variables.type(e)
        },
        VariablesCurIndex() {
            return this.currentVariableIndex || 0
        },
        VariablesCurKey() {
            return this.currentVariable.key || ""
        },
        VariablesCurType() {
            return this.currentVariable.type || ""
        },
        VariablesCurValue() {
            return this.currentVariable.value || ""
        },
        PlayersCurPlayerName() {
            return this.currentPlayersPlayer.state.name || ""
        },
        PlayersCurPlayerAvatar() {
            return this.currentPlayersPlayer.state.avatar || ""
        },
        PlayersCurPlayerID() {
            return this.currentPlayersPlayer.state.id || 0
        },
        PlayersCurPlayerScore() {
            return this.currentPlayersPlayer.state.score || 0
        },
        PlayersCurPlayerIndex() {
            return this.currentPlayersIndex || 0
        },
        PlayersCurPlayerField(e) {
            return this.currentPlayersPlayer && e in this.currentPlayersPlayer.state ? this.currentPlayersPlayer.state[e] : 0
        },
        PlayersPlayerFieldAt(e, r) {
            e = this.playersList[e];
            return e && r in e.state ? e.state[r] : 0
        },
        LastPlayersTag() {
            return this.lastPlayersTag
        },
        LastError() {
            return this.lastError
        },
        IsLastActionSuccess() {
            return Number(this.isLastActionSuccess)
        },
        AsJSON() {
            return JSON.stringify(this.SaveToJson())
        }
    };
}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Plugins.Keyboard = class KeyboardPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        C3.Plugins.Keyboard.Type = class KeyboardType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
            GetScriptInterfaceClass() {
                return self.IKeyboardObjectType
            }
        };
        let keyboardObjectType = null;

        function GetKeyboardSdkInstance() {
            return keyboardObjectType.GetSingleGlobalInstance().GetSdkInstance()
        }
        self.IKeyboardObjectType = class IKeyboardObjectType extends self.IObjectClass {
            constructor(objectType) {
                super(objectType);
                keyboardObjectType =
                    objectType;
                objectType.GetRuntime()._GetCommonScriptInterfaces().keyboard = this
            }
            isKeyDown(keyOrCode) {
                const keyboardInst = GetKeyboardSdkInstance();
                if (typeof keyOrCode === "string") return keyboardInst.IsKeyDown(keyOrCode);
                else if (typeof keyOrCode === "number") return keyboardInst.IsKeyCodeDown(keyOrCode);
                else throw new TypeError("expected string or number");
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Keyboard.Instance = class KeyboardInstance extends C3.SDKInstanceBase {
            constructor(inst, properties) {
                super(inst);
                this._keysDownByString = new Set;
                this._keysDownByWhich = new Set;
                this._triggerWhich = 0;
                this._triggerString = "";
                this._triggerTypedKey = "";
                const rt = this.GetRuntime().Dispatcher();
                this._disposables = new C3.CompositeDisposable(C3.Disposable.From(rt, "keydown", e => this._OnKeyDown(e.data)), C3.Disposable.From(rt, "keyup", e => this._OnKeyUp(e.data)), C3.Disposable.From(rt, "window-blur",
                    () => this._OnWindowOrKeyboardBlur()), C3.Disposable.From(rt, "keyboard-blur", () => this._OnWindowOrKeyboardBlur()))
            }
            Release() {
                super.Release()
            }
            _OnKeyDown(e) {
                const which = e["which"];
                const keyString = e["code"] || which.toString();
                const typedKey = e["key"];
                if (this._keysDownByString.has(keyString)) return;
                this._keysDownByString.add(keyString);
                this._keysDownByWhich.add(which);
                this._triggerString = keyString;
                this._triggerWhich = which;
                this._triggerTypedKey = typedKey;
                this.Trigger(C3.Plugins.Keyboard.Cnds.OnAnyKey);
                this.Trigger(C3.Plugins.Keyboard.Cnds.OnKey);
                this.Trigger(C3.Plugins.Keyboard.Cnds.OnLeftRightKeyPressed);
                this.Trigger(C3.Plugins.Keyboard.Cnds.OnKeyCode)
            }
            _OnKeyUp(e) {
                const which = e["which"];
                const keyString = e["code"] || which.toString();
                const typedKey = e["key"];
                this._keysDownByString.delete(keyString);
                this._keysDownByWhich.delete(which);
                this._triggerString = keyString;
                this._triggerWhich = which;
                this._triggerTypedKey = typedKey;
                this.Trigger(C3.Plugins.Keyboard.Cnds.OnAnyKeyReleased);
                this.Trigger(C3.Plugins.Keyboard.Cnds.OnKeyReleased);
                this.Trigger(C3.Plugins.Keyboard.Cnds.OnLeftRightKeyReleased);
                this.Trigger(C3.Plugins.Keyboard.Cnds.OnKeyCodeReleased)
            }
            _OnWindowOrKeyboardBlur() {
                for (const which of this._keysDownByWhich) {
                    this._keysDownByWhich.delete(which);
                    this._triggerWhich = which;
                    this.Trigger(C3.Plugins.Keyboard.Cnds.OnAnyKeyReleased);
                    this.Trigger(C3.Plugins.Keyboard.Cnds.OnKeyReleased);
                    this.Trigger(C3.Plugins.Keyboard.Cnds.OnKeyCodeReleased)
                }
                this._keysDownByString.clear()
            }
            IsKeyDown(str) {
                return this._keysDownByString.has(str)
            }
            IsKeyCodeDown(which) {
                return this._keysDownByWhich.has(which)
            }
            SaveToJson() {
                return {
                    "tk": this._triggerWhich,
                    "tkk": this._triggerTypedKey
                }
            }
            LoadFromJson(o) {
                this._triggerWhich = o["tk"];
                if (o.hasOwnProperty("tkk")) this._triggerTypedKey = o["tkk"]
            }
            GetDebuggerProperties() {
                const prefix = "plugins.keyboard";
                return [{
                    title: prefix + ".name",
                    properties: [{
                        name: prefix + ".debugger.last-key-code",
                        value: this._triggerWhich
                    }, {
                        name: prefix + ".debugger.last-key-string",
                        value: C3.Plugins.Keyboard.Exps.StringFromKeyCode(this._triggerWhich)
                    }, {
                        name: prefix + ".debugger.last-typed-key",
                        value: this._triggerTypedKey
                    }]
                }]
            }
        }
    } {
        const C3 = self.C3;
        const LEFTRIGHT_KEY_STRINGS = ["ShiftLeft", "ShiftRight", "ControlLeft", "ControlRight", "AltLeft", "AltRight", "MetaLeft", "MetaRight"];
        C3.Plugins.Keyboard.Cnds = {
            IsKeyDown(which) {
                return this._keysDownByWhich.has(which)
            },
            OnKey(which) {
                return this._triggerWhich === which
            },
            OnAnyKey() {
                return true
            },
            OnAnyKeyReleased() {
                return true
            },
            OnKeyReleased(which) {
                return this._triggerWhich === which
            },
            IsKeyCodeDown(which) {
                which = Math.floor(which);
                return this._keysDownByWhich.has(which)
            },
            OnKeyCode(which) {
                return this._triggerWhich ===
                    which
            },
            OnKeyCodeReleased(which) {
                return this._triggerWhich === which
            },
            OnLeftRightKeyPressed(index) {
                const keyString = LEFTRIGHT_KEY_STRINGS[index];
                return this._triggerString === keyString
            },
            OnLeftRightKeyReleased(index) {
                const keyString = LEFTRIGHT_KEY_STRINGS[index];
                return this._triggerString === keyString
            },
            IsLeftRightKeyDown(index) {
                const keyString = LEFTRIGHT_KEY_STRINGS[index];
                return this._keysDownByString.has(keyString)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Keyboard.Acts = {}
    } {
        const C3 = self.C3;

        function StringFromCharCode(kc) {
            kc = Math.floor(kc);
            switch (kc) {
                case 8:
                    return "backspace";
                case 9:
                    return "tab";
                case 13:
                    return "enter";
                case 16:
                    return "shift";
                case 17:
                    return "control";
                case 18:
                    return "alt";
                case 19:
                    return "pause";
                case 20:
                    return "capslock";
                case 27:
                    return "esc";
                case 33:
                    return "pageup";
                case 34:
                    return "pagedown";
                case 35:
                    return "end";
                case 36:
                    return "home";
                case 37:
                    return "\u2190";
                case 38:
                    return "\u2191";
                case 39:
                    return "\u2192";
                case 40:
                    return "\u2193";
                case 45:
                    return "insert";
                case 46:
                    return "del";
                case 91:
                    return "left window key";
                case 92:
                    return "right window key";
                case 93:
                    return "select";
                case 96:
                    return "numpad 0";
                case 97:
                    return "numpad 1";
                case 98:
                    return "numpad 2";
                case 99:
                    return "numpad 3";
                case 100:
                    return "numpad 4";
                case 101:
                    return "numpad 5";
                case 102:
                    return "numpad 6";
                case 103:
                    return "numpad 7";
                case 104:
                    return "numpad 8";
                case 105:
                    return "numpad 9";
                case 106:
                    return "numpad *";
                case 107:
                    return "numpad +";
                case 109:
                    return "numpad -";
                case 110:
                    return "numpad .";
                case 111:
                    return "numpad /";
                case 112:
                    return "F1";
                case 113:
                    return "F2";
                case 114:
                    return "F3";
                case 115:
                    return "F4";
                case 116:
                    return "F5";
                case 117:
                    return "F6";
                case 118:
                    return "F7";
                case 119:
                    return "F8";
                case 120:
                    return "F9";
                case 121:
                    return "F10";
                case 122:
                    return "F11";
                case 123:
                    return "F12";
                case 144:
                    return "numlock";
                case 145:
                    return "scroll lock";
                case 186:
                    return ";";
                case 187:
                    return "=";
                case 188:
                    return ",";
                case 189:
                    return "-";
                case 190:
                    return ".";
                case 191:
                    return "/";
                case 192:
                    return "'";
                case 219:
                    return "[";
                case 220:
                    return "\\";
                case 221:
                    return "]";
                case 222:
                    return "#";
                case 223:
                    return "`";
                default:
                    return String.fromCharCode(kc)
            }
        }
        C3.Plugins.Keyboard.Exps = {
            LastKeyCode() {
                return this._triggerWhich
            },
            StringFromKeyCode(kc) {
                return StringFromCharCode(kc)
            },
            TypedKey() {
                return this._triggerTypedKey
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Plugins.PlatformInfo = class PlatformInfoPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.PlatformInfo.Type = class PlatformInfoType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const DOM_COMPONENT_ID = "platform-info";
        C3.Plugins.PlatformInfo.Instance = class PlatformInfoInstance extends C3.SDKInstanceBase {
            constructor(inst, properties) {
                super(inst, DOM_COMPONENT_ID);
                this._screenWidth = 0;
                this._screenHeight = 0;
                this._windowOuterWidth = 0;
                this._windowOuterHeight = 0;
                this._safeAreaInset = [0, 0, 0, 0];
                this._supportsWakeLock = false;
                this._isWakeLockActive = false;
                this._isNwjs = false;
                this.AddDOMMessageHandlers([
                    ["window-resize", e => this._OnWindowResize(e)],
                    ["wake-lock-acquired", e => this._OnWakeLockAcquired(e)],
                    ["wake-lock-error", e => this._OnWakeLockError(e)],
                    ["wake-lock-released", e => this._OnWakeLockReleased(e)]
                ]);
                if (navigator.connection) navigator.connection.addEventListener("change", () => this._OnNetworkChange());
                this._runtime.AddLoadPromise(this.PostToDOMAsync("get-initial-state").then(data => {
                    this._screenWidth = data["screenWidth"];
                    this._screenHeight = data["screenHeight"];
                    this._windowOuterWidth = data["windowOuterWidth"];
                    this._windowOuterHeight = data["windowOuterHeight"];
                    this._safeAreaInset = data["safeAreaInset"];
                    this._supportsWakeLock = data["supportsWakeLock"];
                    this._isNwjs = data["isNwjs"]
                }))
            }
            Release() {
                super.Release()
            }
            _OnWindowResize(e) {
                this._windowOuterWidth = e["windowOuterWidth"];
                this._windowOuterHeight = e["windowOuterHeight"];
                this._safeAreaInset = e["safeAreaInset"]
            }
            async _OnNetworkChange() {
                await this.TriggerAsync(C3.Plugins.PlatformInfo.Cnds.OnNetworkChange)
            }
            async _OnWakeLockAcquired() {
                this._isWakeLockActive = true;
                await this.TriggerAsync(C3.Plugins.PlatformInfo.Cnds.OnWakeLockAcquired)
            }
            async _OnWakeLockError() {
                this._isWakeLockActive =
                    false;
                await this.TriggerAsync(C3.Plugins.PlatformInfo.Cnds.OnWakeLockError)
            }
            async _OnWakeLockReleased() {
                this._isWakeLockActive = false;
                await this.TriggerAsync(C3.Plugins.PlatformInfo.Cnds.OnWakeLockReleased)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.PlatformInfo.Cnds = {
            IsOnMobile() {
                return C3.Platform.IsMobile
            },
            IsOnWindows() {
                return C3.Platform.OS === "Windows"
            },
            IsOnMacOS() {
                return C3.Platform.OS === "macOS"
            },
            IsOnLinux() {
                return C3.Platform.OS === "Linux"
            },
            IsOnChromeOS() {
                return C3.Platform.OS === "Chrome OS"
            },
            IsOnAndroid() {
                return C3.Platform.OS === "Android"
            },
            IsOniOS() {
                return C3.Platform.OS === "iOS"
            },
            IsWebExport() {
                const exportType = this._runtime.GetExportType();
                return exportType === "html5" || exportType === "scirra-arcade" || exportType ===
                    "preview" || exportType === "instant-games"
            },
            IsCordovaExport() {
                return this._runtime.IsCordova()
            },
            IsNWjsExport() {
                return this._runtime.GetExportType() === "nwjs" || this._isNwjs
            },
            IsWindowsUWPExport() {
                return this._runtime.GetExportType() === "windows-uwp"
            },
            IsWindowsWebView2Export() {
                return this._runtime.GetExportType() === "windows-webview2"
            },
            IsMacOSWKWebView2Export() {
                return this._runtime.GetExportType() === "macos-wkwebview"
            },
            OnNetworkChange() {
                return true
            },
            OnWakeLockAcquired() {
                return true
            },
            OnWakeLockError() {
                return true
            },
            OnWakeLockReleased() {
                return true
            },
            IsWakeLockActive() {
                return this._isWakeLockActive
            },
            IsWakeLockSupported() {
                return this._supportsWakeLock
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.PlatformInfo.Acts = {
            RequestWakeLock() {
                if (!this._supportsWakeLock) return;
                this._PostToDOMMaybeSync("request-wake-lock")
            },
            ReleaseWakeLock() {
                if (!this._supportsWakeLock) return;
                this._isWakeLockActive = false;
                this.PostToDOM("release-wake-lock")
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.PlatformInfo.Exps = {
            Renderer() {
                let ret = "";
                if (this._runtime.GetWebGPURenderer()) ret = "webgpu";
                else ret = "webgl" + this._runtime.GetWebGLRenderer().GetWebGLVersionNumber();
                if (this._runtime.GetRenderer().HasMajorPerformanceCaveat()) ret += "-software";
                return ret
            },
            RendererDetail() {
                if (this._runtime.GetWebGPURenderer()) return this._runtime.GetWebGPURenderer().GetBasicAdapterInfoString();
                else return this._runtime.GetWebGLRenderer().GetUnmaskedRenderer()
            },
            DevicePixelRatio() {
                return self.devicePixelRatio
            },
            ScreenWidth() {
                return this._screenWidth
            },
            ScreenHeight() {
                return this._screenHeight
            },
            WindowInnerWidth() {
                return this._runtime.GetCanvasManager().GetLastWidth()
            },
            WindowInnerHeight() {
                return this._runtime.GetCanvasManager().GetLastHeight()
            },
            WindowOuterWidth() {
                return this._windowOuterWidth
            },
            WindowOuterHeight() {
                return this._windowOuterHeight
            },
            CanvasCssWidth() {
                return this._runtime.GetCanvasManager().GetCssWidth()
            },
            CanvasCssHeight() {
                return this._runtime.GetCanvasManager().GetCssHeight()
            },
            CanvasDeviceWidth() {
                return this._runtime.GetCanvasManager().GetDeviceWidth()
            },
            CanvasDeviceHeight() {
                return this._runtime.GetCanvasManager().GetDeviceHeight()
            },
            Downlink() {
                if (navigator.connection) return navigator.connection["downlink"] || 0;
                else return 0
            },
            DownlinkMax() {
                if (navigator.connection) return navigator.connection["downlinkMax"] || 0;
                else return 0
            },
            ConnectionType() {
                if (navigator.connection) return navigator.connection["type"] || "unknown";
                else return "unknown"
            },
            ConnectionEffectiveType() {
                if (navigator.connection) return navigator.connection["effectiveType"] || "unknown";
                else return "unknown"
            },
            ConnectionRTT() {
                if (navigator.connection) return navigator.connection["rtt"] || 0;
                else return 0
            },
            HardwareConcurrency() {
                return navigator.hardwareConcurrency || 0
            },
            DeviceMemory() {
                return navigator.deviceMemory || 0
            },
            SafeAreaInsetTop() {
                return this._safeAreaInset[0]
            },
            SafeAreaInsetRight() {
                return this._safeAreaInset[1]
            },
            SafeAreaInsetBottom() {
                return this._safeAreaInset[2]
            },
            SafeAreaInsetLeft() {
                return this._safeAreaInset[3]
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Plugins.Spritefont2 = class SpriteFontPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Spritefont2.Type = class SpriteFontType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass);
                this._spriteFont = C3.New(self.SpriteFont)
            }
            Release() {
                super.Release()
            }
            OnCreate() {
                this.GetImageInfo().LoadAsset(this._runtime)
            }
            LoadTextures(renderer) {
                return this.GetImageInfo().LoadStaticTexture(renderer, {
                    sampling: this._runtime.GetSampling()
                })
            }
            ReleaseTextures() {
                this.GetImageInfo().ReleaseTexture()
            }
            GetSpriteFont() {
                return this._spriteFont
            }
            UpdateSettings(characterWidth, characterHeight,
                characterSet, spacingData) {
                const imageInfo = this.GetImageInfo();
                const sf = this._spriteFont;
                sf.SetWidth(imageInfo.GetWidth());
                sf.SetHeight(imageInfo.GetHeight());
                sf.SetCharacterWidth(characterWidth);
                sf.SetCharacterHeight(characterHeight);
                sf.SetCharacterSet(characterSet);
                sf.SetSpacingData(spacingData);
                sf.UpdateCharacterMap()
            }
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const tempVec2 = C3.New(C3.Vector2);
        const TEXT = 0;
        const ENABLE_BBCODE = 1;
        const CHARACTER_WIDTH = 2;
        const CHARACTER_HEIGHT = 3;
        const CHARACTER_SET = 4;
        const SPACING_DATA = 5;
        const SCALE = 6;
        const CHARACTER_SPACING = 7;
        const LINE_HEIGHT = 8;
        const HORIZONTAL_ALIGNMENT = 9;
        const VERTICAL_ALIGNMENT = 10;
        const WRAPPING = 11;
        const INITIALLY_VISIBLE = 12;
        const ORIGIN = 13;
        const READ_ALOUD = 14;
        const HORIZONTAL_ALIGNMENTS = ["left", "center", "right"];
        const VERTICAL_ALIGNMENTS = ["top", "center", "bottom"];
        const WORD_WRAP = 0;
        const CHARACTER_WRAP = 1;
        C3.Plugins.Spritefont2.Instance = class SpriteFontInstance extends C3.SDKWorldInstanceBase {
            constructor(inst, properties) {
                super(inst);
                this._text = "";
                this._enableBBcode = true;
                this._characterWidth = 16;
                this._characterHeight = 16;
                this._characterSet = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789.,;:?!-_~#\"'&()[]|`\\/@\u00b0+=*$\u00a3\u20ac<>";
                let spacingData = "";
                this._characterScale = 1;
                this._characterSpacing = 0;
                this._lineHeight = 0;
                this._horizontalAlign = 0;
                this._verticalAlign =
                    0;
                this._wrapByWord = true;
                this._readAloud = false;
                this._screenReaderText = null;
                this._spriteFontText = null;
                this._typewriterStartTime = -1;
                this._typewriterEndTime = -1;
                this._typewriterLength = 0;
                if (properties) {
                    this._text = properties[0];
                    this._enableBBcode = properties[1];
                    this._characterWidth = properties[2];
                    this._characterHeight = properties[3];
                    this._characterSet = properties[4];
                    spacingData = properties[5];
                    this._characterScale = properties[6];
                    this._characterSpacing = properties[7];
                    this._lineHeight = properties[8];
                    this._horizontalAlign =
                        properties[9];
                    this._verticalAlign = properties[10];
                    this._wrapByWord = properties[11] === 0;
                    const wi = this.GetWorldInfo();
                    wi.SetVisible(properties[12]);
                    this._readAloud = !!properties[READ_ALOUD]
                }
                this._sdkType.UpdateSettings(this._characterWidth, this._characterHeight, this._characterSet, spacingData);
                this._spriteFontText = C3.New(self.SpriteFontText, this._sdkType.GetSpriteFont());
                const wi = this.GetWorldInfo();
                this._spriteFontText.SetSize(wi.GetWidth(), wi.GetHeight());
                this._UpdateSettings();
                this._UpdateScreenReaderText();
                this._inst.SetMustMitigateZFighting()
            }
            Release() {
                this._CancelTypewriter();
                if (this._screenReaderText) {
                    this._screenReaderText.Release();
                    this._screenReaderText = null
                }
                this._spriteFontText.Release();
                this._spriteFontText = null;
                super.Release()
            }
            _UpdateSettings() {
                const sft = this._spriteFontText;
                if (!sft) return;
                sft.SetBBCodeEnabled(this._enableBBcode);
                sft.SetText(this._text);
                sft.SetWordWrapMode(this._wrapByWord ? "word" : "character");
                sft.SetHorizontalAlign(HORIZONTAL_ALIGNMENTS[this._horizontalAlign]);
                sft.SetVerticalAlign(VERTICAL_ALIGNMENTS[this._verticalAlign]);
                sft.SetSpacing(this._characterSpacing);
                sft.SetLineHeight(this._lineHeight)
            }
            _UpdateScreenReaderText() {
                if (this._readAloud) {
                    let text = this._text;
                    if (this._enableBBcode) text = C3.BBString.StripAnyTags(text);
                    if (this._screenReaderText) this._screenReaderText.SetText(text);
                    else this._screenReaderText = C3.New(C3.ScreenReaderText, this._runtime, text)
                } else if (this._screenReaderText) {
                    this._screenReaderText.Release();
                    this._screenReaderText = null
                }
            }
            Draw(renderer) {
                const imageInfo = this._objectClass.GetImageInfo();
                const texture =
                    imageInfo.GetTexture();
                if (!texture) return;
                renderer.SetTexture(texture);
                const wi = this.GetWorldInfo();
                let q = wi.GetBoundingQuad();
                const sft = this._spriteFontText;
                sft.SetScale(this._characterScale);
                sft.SetSceneGraphScale(wi.GetSceneGraphScale());
                if (this._runtime.IsPixelRoundingEnabled()) q = wi.PixelRoundQuad(q);
                sft.SetSize(wi.GetWidth(), wi.GetHeight());
                sft.GetSpriteFont().SetTexRect(imageInfo.GetTexRect());
                sft.SetColor(wi.GetUnpremultipliedColor());
                sft.Draw(renderer, q.getTlx(), q.getTly(), wi.GetAngle())
            }
            SaveToJson() {
                const ret = {
                    "t": this._text,
                    "ebbc": this._enableBBcode,
                    "csc": this._characterScale,
                    "csp": this._characterSpacing,
                    "lh": this._lineHeight,
                    "ha": this._horizontalAlign,
                    "va": this._verticalAlign,
                    "w": this._wrapByWord,
                    "cw": this._sdkType.GetSpriteFont().GetCharacterWidth(),
                    "ch": this._sdkType.GetSpriteFont().GetCharacterHeight(),
                    "cs": this._sdkType.GetSpriteFont().GetCharacterSet(),
                    "sd": this._sdkType.GetSpriteFont().GetSpacingData()
                };
                if (this._typewriterEndTime !== -1) ret["tw"] = {
                    "st": this._typewriterStartTime,
                    "en": this._typewriterEndTime,
                    "l": this._typewriterLength
                };
                return ret
            }
            LoadFromJson(o) {
                this._CancelTypewriter();
                this._text = o["t"];
                this._enableBBcode = o["ebbc"];
                this._characterScale = o["csc"];
                this._characterSpacing = o["csp"];
                this._lineHeight = o["lh"];
                this._horizontalAlign = o["ha"];
                this._verticalAlign = o["va"];
                this._wrapByWord = o["w"];
                if (o.hasOwnProperty("tw")) {
                    const tw = o["tw"];
                    this._typewriterStartTime = tw["st"];
                    this._typewriterEndTime = tw["en"];
                    this._typewriterLength = o["l"]
                }
                const spriteFont = this._sdkType.GetSpriteFont();
                spriteFont.SetCharacterWidth(o["cw"]);
                spriteFont.SetCharacterHeight(o["ch"]);
                spriteFont.SetCharacterSet(o["cs"]);
                spriteFont.SetSpacingData(o["sd"]);
                this._UpdateSettings();
                this._UpdateScreenReaderText();
                if (this._typewriterEndTime !== -1) this._StartTicking()
            }
            GetPropertyValueByIndex(index) {
                switch (index) {
                    case TEXT:
                        return this.GetText();
                    case ENABLE_BBCODE:
                        return this._enableBBcode;
                    case CHARACTER_WIDTH:
                        return this._sdkType.GetSpriteFont().GetCharacterWidth();
                    case CHARACTER_HEIGHT:
                        return this._sdkType.GetSpriteFont().GetCharacterHeight();
                    case CHARACTER_SET:
                        return this._sdkType.GetSpriteFont().GetCharacterSet();
                    case SPACING_DATA:
                        return this._sdkType.GetSpriteFont().GetSpacingData();
                    case SCALE:
                        return this._GetScale();
                    case CHARACTER_SPACING:
                        return this._GetCharacterSpacing();
                    case LINE_HEIGHT:
                        return this._GetLineHeight();
                    case HORIZONTAL_ALIGNMENT:
                        return this._GetHAlign();
                    case VERTICAL_ALIGNMENT:
                        return this._GetVAlign();
                    case WRAPPING:
                        return this._IsWrapByWord() ? CHARACTER_WRAP : WORD_WRAP
                }
            }
            SetPropertyValueByIndex(index, value) {
                switch (index) {
                    case TEXT:
                        this._SetText(value);
                        break;
                    case ENABLE_BBCODE:
                        if (this._enableBBcode ===
                            !!value) return;
                        this._enableBBcode = !!value;
                        this._UpdateSettings();
                        break;
                    case CHARACTER_WIDTH:
                        this._sdkType.GetSpriteFont().SetCharacterWidth(value);
                        break;
                    case CHARACTER_HEIGHT:
                        this._sdkType.GetSpriteFont().SetCharacterHeight(value);
                        break;
                    case CHARACTER_SET:
                        this._sdkType.GetSpriteFont().SetCharacterSet(value);
                        break;
                    case SPACING_DATA:
                        this._sdkType.GetSpriteFont().SetSpacingData(value);
                        break;
                    case SCALE:
                        this._SetScale(value);
                        break;
                    case CHARACTER_SPACING:
                        this._SetCharacterSpacing(value);
                        break;
                    case LINE_HEIGHT:
                        this._SetLineHeight(value);
                        break;
                    case HORIZONTAL_ALIGNMENT:
                        this._SetHAlign(value);
                        break;
                    case VERTICAL_ALIGNMENT:
                        this._SetVAlign(value);
                        break;
                    case WRAPPING:
                        this._SetWrapByWord(value === WORD_WRAP);
                        break
                }
            }
            _SetText(text) {
                if (this._text === text) return;
                this._text = text;
                this._spriteFontText.SetText(text);
                this._UpdateScreenReaderText();
                this._runtime.UpdateRender()
            }
            GetText() {
                return this._text
            }
            _StartTypewriter(text, duration) {
                this._SetText(text);
                this._typewriterStartTime = this._runtime.GetWallTime();
                this._typewriterEndTime = this._typewriterStartTime +
                    duration / this.GetInstance().GetActiveTimeScale();
                this._typewriterLength = C3.CountGraphemes(C3.BBString.StripAnyTags(text));
                this._spriteFontText.SetDrawMaxCharacterCount(0);
                this._StartTicking()
            }
            _CancelTypewriter() {
                this._typewriterStartTime = -1;
                this._typewriterEndTime = -1;
                this._typewriterLength = 0;
                this._spriteFontText.SetDrawMaxCharacterCount(-1);
                this._StopTicking()
            }
            _FinishTypewriter() {
                if (this._typewriterEndTime === -1) return;
                this._CancelTypewriter();
                this.Trigger(C3.Plugins.Spritefont2.Cnds.OnTypewriterTextFinished);
                this._runtime.UpdateRender()
            }
            _SetScale(s) {
                if (this._characterScale === s) return;
                this._characterScale = s;
                this._spriteFontText.SetScale(this._characterScale);
                this._runtime.UpdateRender()
            }
            _GetScale() {
                return this._characterScale
            }
            _SetCharacterSpacing(s) {
                if (this._characterSpacing === s) return;
                this._characterSpacing = s;
                this._spriteFontText.SetSpacing(this._characterSpacing);
                this._runtime.UpdateRender()
            }
            _GetCharacterSpacing() {
                return this._characterSpacing
            }
            _SetLineHeight(h) {
                if (this._lineHeight === h) return;
                this._lineHeight =
                    h;
                this._spriteFontText.SetLineHeight(this._lineHeight);
                this._runtime.UpdateRender()
            }
            _GetLineHeight() {
                return this._lineHeight
            }
            _SetHAlign(h) {
                if (this._horizontalAlign === h) return;
                this._horizontalAlign = h;
                this._UpdateSettings();
                this._runtime.UpdateRender()
            }
            _GetHAlign() {
                return this._horizontalAlign
            }
            _SetVAlign(v) {
                if (this._verticalAlign === v) return;
                this._verticalAlign = v;
                this._UpdateSettings();
                this._runtime.UpdateRender()
            }
            _GetVAlign() {
                return this._verticalAlign
            }
            _SetWrapByWord(w) {
                w = !!w;
                if (this._wrapByWord ===
                    w) return;
                this._wrapByWord = w;
                this._UpdateSettings();
                this._runtime.UpdateRender()
            }
            _IsWrapByWord() {
                return this._wrapByWord
            }
            _SetReadAloud(r) {
                this._readAloud = !!r;
                this._UpdateScreenReaderText()
            }
            _IsReadAloud() {
                return this._readAloud
            }
            _GetTextWidth() {
                const wi = this.GetWorldInfo();
                this._spriteFontText.SetSize(wi.GetWidth(), wi.GetHeight());
                this._spriteFontText.SetScale(this._characterScale);
                return this._spriteFontText.GetTextWidth()
            }
            _GetTextHeight() {
                const wi = this.GetWorldInfo();
                this._spriteFontText.SetSize(wi.GetWidth(),
                    wi.GetHeight());
                this._spriteFontText.SetScale(this._characterScale);
                return this._spriteFontText.GetTextHeight()
            }
            _GetTagAtPosition(x, y) {
                const wi = this.GetWorldInfo();
                tempVec2.set(x - wi.GetX(), y - wi.GetY());
                tempVec2.rotate(-wi.GetAngle());
                tempVec2.offset(wi.GetWidth() * wi.GetOriginX(), wi.GetHeight() * wi.GetOriginY());
                const frag = this._spriteFontText.HitTestFragment(tempVec2.getX(), tempVec2.getY());
                if (frag) {
                    const fragTagStyle = this._spriteFontText._GetStyleTag(frag.styles, "tag");
                    if (fragTagStyle) return fragTagStyle.param
                }
                return ""
            }
            _HasTagAtPosition(tag,
                x, y) {
                const hitTag = this._GetTagAtPosition(x, y);
                return hitTag && C3.equalsNoCase(tag, hitTag)
            }
            _GetTagPosition(tag, index) {
                index = Math.floor(index);
                const frag = this._spriteFontText.FindFragmentWithTag(tag, index);
                if (!frag) return null;
                const wi = this.GetWorldInfo();
                tempVec2.set(frag.penX, frag.penY);
                tempVec2.offset(-wi.GetWidth() * wi.GetOriginX(), -wi.GetHeight() * wi.GetOriginY());
                tempVec2.rotate(wi.GetAngle());
                tempVec2.offset(wi.GetX(), wi.GetY());
                return {
                    x: tempVec2.getX(),
                    y: tempVec2.getY(),
                    width: frag.width,
                    height: frag.height
                }
            }
            _GetTagCount(tag) {
                return this._spriteFontText.CountFragmentsWithTag(tag)
            }
            Tick() {
                const wallTime =
                    this._runtime.GetWallTime();
                if (wallTime >= this._typewriterEndTime) {
                    this._CancelTypewriter();
                    this.Trigger(C3.Plugins.Spritefont2.Cnds.OnTypewriterTextFinished);
                    this._runtime.UpdateRender()
                } else {
                    let displayLength = C3.relerp(this._typewriterStartTime, this._typewriterEndTime, wallTime, 0, this._typewriterLength);
                    displayLength = Math.floor(displayLength);
                    if (displayLength !== this._spriteFontText.GetDrawMaxCharacterCount()) {
                        this._spriteFontText.SetDrawMaxCharacterCount(displayLength);
                        this._runtime.UpdateRender()
                    }
                }
            }
            GetDebuggerProperties() {
                const prefix =
                    "plugins.spritefont2";
                return [{
                    title: prefix + ".name",
                    properties: [{
                        name: prefix + ".properties.text.name",
                        value: this.GetText(),
                        onedit: v => this._SetText(v)
                    }, {
                        name: prefix + ".properties.scale.name",
                        value: this._GetScale(),
                        onedit: v => this._SetScale(v)
                    }, {
                        name: prefix + ".properties.character-spacing.name",
                        value: this._GetCharacterSpacing(),
                        onedit: v => this._SetCharacterSpacing(v)
                    }, {
                        name: prefix + ".properties.line-height.name",
                        value: this._GetLineHeight(),
                        onedit: v => this._SetLineHeight(v)
                    }]
                }]
            }
            GetScriptInterfaceClass() {
                return self.ISpriteFontInstance
            }
        };
        const map = new WeakMap;
        const SCRIPT_HORIZONTAL_ALIGNMENTS = new Map([
            ["left", 0],
            ["center", 1],
            ["right", 2]
        ]);
        const SCRIPT_VERTICAL_ALIGNMENTS = new Map([
            ["top", 0],
            ["center", 1],
            ["bottom", 2]
        ]);
        const SCRIPT_WRAP_MODES = new Map([
            ["word", true],
            ["character", false]
        ]);
        self.ISpriteFontInstance = class ISpriteFontInstance extends self.IWorldInstance {
            constructor() {
                super();
                map.set(this, self.IInstance._GetInitInst().GetSdkInstance())
            }
            get text() {
                return map.get(this).GetText()
            }
            set text(str) {
                C3X.RequireString(str);
                const inst =
                    map.get(this);
                inst._CancelTypewriter();
                inst._SetText(str)
            }
            typewriterText(str, duration) {
                C3X.RequireString(str);
                C3X.RequireFiniteNumber(duration);
                const inst = map.get(this);
                inst._CancelTypewriter();
                inst._StartTypewriter(str, duration)
            }
            typewriterFinish() {
                map.get(this)._FinishTypewriter()
            }
            set characterScale(s) {
                C3X.RequireFiniteNumber(s);
                map.get(this)._SetScale(s)
            }
            get characterScale() {
                return map.get(this)._GetScale()
            }
            set characterSpacing(s) {
                C3X.RequireFiniteNumber(s);
                map.get(this)._SetCharacterSpacing(s)
            }
            get characterSpacing() {
                return map.get(this)._GetCharacterSpacing()
            }
            set lineHeight(lho) {
                C3X.RequireFiniteNumber(lho);
                map.get(this)._SetLineHeight(lho)
            }
            get lineHeight() {
                return map.get(this)._GetLineHeight()
            }
            set horizontalAlign(str) {
                C3X.RequireString(str);
                const h = SCRIPT_HORIZONTAL_ALIGNMENTS.get(str);
                if (typeof h === "undefined") throw new Error("invalid mode");
                map.get(this)._SetHAlign(h)
            }
            get horizontalAlign() {
                return HORIZONTAL_ALIGNMENTS[map.get(this)._GetHAlign()]
            }
            set verticalAlign(str) {
                C3X.RequireString(str);
                const v = SCRIPT_VERTICAL_ALIGNMENTS.get(str);
                if (typeof v === "undefined") throw new Error("invalid mode");
                map.get(this)._SetVAlign(v)
            }
            get verticalAlign() {
                return VERTICAL_ALIGNMENTS[map.get(this)._GetVAlign()]
            }
            set wordWrapMode(str) {
                C3X.RequireString(str);
                const isWrapByWord = SCRIPT_WRAP_MODES.get(str);
                if (typeof isWrapByWord === "undefined") throw new Error("invalid mode");
                map.get(this)._SetWrapByWord(isWrapByWord)
            }
            get wordWrapMode() {
                return map.get(this)._IsWrapByWord() ? "word" : "character"
            }
            set readAloud(r) {
                map.get(this)._SetReadAloud(!!r)
            }
            get readAloud() {
                return map.get(this)._IsReadAloud()
            }
            get textWidth() {
                return map.get(this)._GetTextWidth()
            }
            get textHeight() {
                return map.get(this)._GetTextHeight()
            }
            getTextSize() {
                const inst = map.get(this);
                return [inst._GetTextWidth(),
                    inst._GetTextHeight()
                ]
            }
            hasTagAtPosition(tag, x, y) {
                C3X.RequireString(tag);
                C3X.RequireFiniteNumber(x);
                C3X.RequireFiniteNumber(y);
                return map.get(this)._HasTagAtPosition(tag, x, y)
            }
            getTagAtPosition(x, y) {
                C3X.RequireFiniteNumber(x);
                C3X.RequireFiniteNumber(y);
                return map.get(this)._GetTagAtPosition(x, y)
            }
            getTagPositionAndSize(tag, index = 0) {
                C3X.RequireString(tag);
                C3X.RequireFiniteNumber(index);
                return map.get(this)._GetTagPosition(tag, index)
            }
            getTagCount(tag) {
                C3X.RequireString(tag);
                return map.get(this)._GetTagCount(tag)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Spritefont2.Cnds = {
            CompareText(text, caseSensitive) {
                if (caseSensitive) return this._text === text;
                else return C3.equalsNoCase(this._text, text)
            },
            IsRunningTypewriterText() {
                return this._typewriterEndTime !== -1
            },
            OnTypewriterTextFinished() {
                return true
            },
            HasTagAtPosition(tag, x, y) {
                return this._HasTagAtPosition(tag, x, y)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Spritefont2.Acts = {
            SetText(param) {
                this._CancelTypewriter();
                if (typeof param === "number" && param < 1E9) param = Math.round(param * 1E10) / 1E10;
                this._SetText(param.toString())
            },
            AppendText(param) {
                this._CancelTypewriter();
                if (typeof param === "number" && param < 1E9) param = Math.round(param * 1E10) / 1E10;
                param = param.toString();
                if (!param) return;
                this._SetText(this._text + param)
            },
            TypewriterText(param, duration) {
                this._CancelTypewriter();
                if (typeof param === "number" && param < 1E9) param = Math.round(param * 1E10) /
                    1E10;
                this._StartTypewriter(param.toString(), duration)
            },
            TypewriterFinish() {
                this._FinishTypewriter()
            },
            SetScale(s) {
                this._SetScale(s)
            },
            SetCharacterSpacing(s) {
                this._SetCharacterSpacing(s)
            },
            SetLineHeight(h) {
                this._SetLineHeight(h)
            },
            SetCharacterWidth(chars, width) {
                let didAnyChange = false;
                const spriteFont = this._sdkType.GetSpriteFont();
                for (const ch of chars)
                    if (ch === " ") {
                        spriteFont.SetSpaceWidth(width);
                        didAnyChange = true
                    } else {
                        const sfc = spriteFont.GetCharacter(ch);
                        if (sfc) {
                            sfc.SetDisplayWidth(width);
                            didAnyChange =
                                true
                        }
                    }
                if (didAnyChange) spriteFont.SetCharacterWidthsChanged();
                this._runtime.UpdateRender()
            },
            SetEffect(effect) {
                this.GetWorldInfo().SetBlendMode(effect);
                this._runtime.UpdateRender()
            },
            SetHAlign(h) {
                this._SetHAlign(h)
            },
            SetVAlign(v) {
                this._SetVAlign(v)
            },
            SetWrapping(w) {
                this._SetWrapByWord(w === 0)
            },
            SetReadAloud(r) {
                this._SetReadAloud(r)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Spritefont2.Exps = {
            CharacterWidth(ch) {
                const sfc = this._sdkType.GetSpriteFont().GetCharacter(ch);
                if (sfc) return sfc.GetDisplayWidth();
                else return this._sdkType.GetSpriteFont().GetCharacterWidth()
            },
            CharacterHeight() {
                return this._characterHeight
            },
            CharacterScale() {
                return this._characterScale
            },
            CharacterSpacing() {
                return this._characterSpacing
            },
            LineHeight() {
                return this._lineHeight
            },
            Text() {
                return this._text
            },
            PlainText() {
                if (this._enableBBcode) return C3.BBString.StripAnyTags(this._text);
                else return this._text
            },
            TextWidth() {
                return this._GetTextWidth()
            },
            TextHeight() {
                return this._GetTextHeight()
            },
            TagAtPosition(x, y) {
                return this._GetTagAtPosition(x, y)
            },
            TagCount(tag) {
                return this._GetTagCount(tag)
            },
            TagX(tag, index) {
                const ret = this._GetTagPosition(tag, index);
                return ret ? ret.x : 0
            },
            TagY(tag, index) {
                const ret = this._GetTagPosition(tag, index);
                return ret ? ret.y : 0
            },
            TagWidth(tag, index) {
                const ret = this._GetTagPosition(tag, index);
                return ret ? ret.width : 0
            },
            TagHeight(tag, index) {
                const ret = this._GetTagPosition(tag,
                    index);
                return ret ? ret.height : 0
            }
        }
    };

}

{
    'use strict';
    const C3 = self.C3;
    self.SpriteFontCharacter = class SpriteFontCharacter {
        constructor(spriteFont, char, x, y) {
            let charWidth = spriteFont.GetCharacterWidth();
            let charHeight = spriteFont.GetCharacterHeight();
            this._spriteFont = spriteFont;
            this._char = char;
            this._pxRect = new C3.Rect(x, y, x + charWidth, y + charHeight);
            this._texRect = new C3.Rect;
            this._displayWidth = -1;
            this._UpdateTexRect()
        }
        Release() {
            this._spriteFont = null;
            this._pxRect = null;
            this._texRect = null
        }
        _UpdateTexRect() {
            let w = this._spriteFont.GetWidth();
            let h = this._spriteFont.GetHeight();
            this._texRect.copy(this._pxRect);
            this._texRect.divide(w, h);
            this._texRect.lerpInto(this._spriteFont.GetTexRect())
        }
        GetSpriteFont() {
            return this._spriteFont
        }
        GetChar() {
            return this._char
        }
        GetTexRect() {
            return this._texRect
        }
        SetDisplayWidth(w) {
            this._displayWidth = w
        }
        GetDisplayWidth() {
            if (this._displayWidth < 0) return this._spriteFont.GetCharacterWidth();
            else return this._displayWidth
        }
    };

}

{
    'use strict';
    const C3 = self.C3;
    const tmpRect = new C3.Rect;
    const tmpQuad = new C3.Quad;
    const tmpColor = new C3.Color;
    const VALID_HORIZ_ALIGNMENTS = new Set(["left", "center", "right"]);
    const VALID_VERT_ALIGNMENTS = new Set(["top", "center", "bottom"]);
    const VALID_WORD_WRAP_MODES = new Set(["word", "character"]);
    self.SpriteFontText = class SpriteFontText {
        constructor(spriteFont) {
            this._spriteFont = spriteFont;
            this._cssWidth = 0;
            this._cssHeight = 0;
            this._text = "";
            this._isBBcodeEnabled = false;
            this._bbString = null;
            this._wrappedText = C3.New(C3.WordWrap);
            this._wrapMode = "word";
            this._wrapChanged = false;
            this._horizontalAlign = "left";
            this._verticalAlign = "top";
            this._scale = 1;
            this._sceneGraphScale = 1;
            this._spacing = 0;
            this._lineHeight = 0;
            this._color = C3.New(C3.Color);
            this._drawMaxCharCount = -1;
            this._drawCharCount = 0;
            this._measureTextCallback =
                (str, styles) => this._MeasureText(str, styles);
            this._spriteFont._AddSpriteFontText(this)
        }
        Release() {
            this._spriteFont._RemoveSpriteFontText(this);
            this._color = null;
            this._measureTextCallback = null;
            this._wrappedText.Clear();
            this._wrappedText = null;
            this._spriteFont = null;
            this._bbString = null
        }
        _MeasureText(chArr, styles) {
            const scaleStyle = this._GetStyleTag(styles, "scale");
            const scale = (scaleStyle ? parseFloat(scaleStyle.param) : this._scale) * this._sceneGraphScale;
            const scaleXStyle = this._GetStyleTag(styles, "scalex");
            const scaleX =
                (scaleXStyle ? parseFloat(scaleXStyle.param) : 1) * scale;
            const scaleYStyle = this._GetStyleTag(styles, "scaley");
            const scaleY = (scaleYStyle ? parseFloat(scaleYStyle.param) : 1) * scale;
            const lineTotalHeight = this._spriteFont.GetCharacterHeight() * scaleY + this._lineHeight;
            const spriteFont = this.GetSpriteFont();
            const defaultCharWidth = spriteFont.GetCharacterWidth() * scaleX;
            const spacing = this.GetSpacing();
            if (spriteFont.HasAnyCustomWidths()) {
                let strLen = 0;
                let totalWidth = 0;
                for (const ch of chArr) {
                    let charWidth = defaultCharWidth;
                    const sfc = spriteFont.GetCharacter(ch);
                    if (sfc) charWidth = sfc.GetDisplayWidth() * scaleX;
                    else if (ch === " ") charWidth = spriteFont.GetSpaceWidth() * scaleX;
                    totalWidth += charWidth;
                    ++strLen
                }
                return {
                    width: totalWidth + strLen * spacing,
                    height: lineTotalHeight
                }
            } else {
                const strLen = chArr.length;
                const spaceCount = Math.max(strLen, 0);
                return {
                    width: defaultCharWidth * strLen + spaceCount * spacing,
                    height: lineTotalHeight
                }
            }
        }
        _SetWrapChanged() {
            this._wrapChanged = true;
            this._wrappedText.Clear()
        }
        SetSize(cssWidth, cssHeight) {
            if (cssWidth <= 0 || cssHeight <=
                0) return;
            if (this._cssWidth === cssWidth && this._cssHeight === cssHeight) return;
            if (this._cssWidth !== cssWidth) this._SetWrapChanged();
            this._cssWidth = cssWidth;
            this._cssHeight = cssHeight
        }
        SetDrawMaxCharacterCount(n) {
            this._drawMaxCharCount = Math.floor(n)
        }
        GetDrawMaxCharacterCount() {
            return this._drawMaxCharCount
        }
        _GetStyleTag(styles, tag) {
            for (let i = styles.length - 1; i >= 0; --i) {
                const s = styles[i];
                if (s.tag === tag) return s
            }
            return null
        }
        _HasStyleTag(styles, tag) {
            return !!this._GetStyleTag(styles, tag)
        }
        HitTestFragment(x, y) {
            const lines =
                this._wrappedText.GetLines();
            for (const line of lines)
                if (y > line.penY && y < line.penY + line.height)
                    for (const frag of line.fragments)
                        if (x >= frag.penX && x < frag.penX + frag.width) return frag;
            return null
        }* fragmentsWithTag(tag) {
            const lines = this._wrappedText.GetLines();
            for (const line of lines)
                for (const frag of line.fragments) {
                    const tagStyle = this._GetStyleTag(frag.styles, "tag");
                    if (tagStyle && C3.equalsNoCase(tagStyle.param, tag)) yield frag
                }
        }
        FindFragmentWithTag(tag, index) {
            for (const frag of this.fragmentsWithTag(tag))
                if (index ===
                    0) return frag;
                else --index;
            return null
        }
        CountFragmentsWithTag(tag) {
            let count = 0;
            for (const frag of this.fragmentsWithTag(tag)) ++count;
            return count
        }
        _MaybeWrapText() {
            if (!this._wrapChanged) return;
            if (this._isBBcodeEnabled && (!this._bbString || this._bbString.toString() !== this._text)) this._bbString = new C3.BBString(this._text, {
                noEscape: true
            });
            const endOfLineMargin = -this.GetSpacing();
            this._wrappedText.WordWrap(this._isBBcodeEnabled ? this._bbString.toFragmentList() : this._text, this._measureTextCallback, this._cssWidth,
                this._wrapMode, endOfLineMargin);
            this._wrapChanged = false
        }
        Draw(renderer, offX, offY, angle) {
            this._MaybeWrapText();
            this._drawCharCount = 0;
            let penY = 0;
            const lineSpaceHeight = this._lineHeight;
            const lines = C3.cloneArray(this._wrappedText.GetLines());
            const sin_a = Math.sin(angle);
            const cos_a = Math.cos(angle);
            const linesTotalHeight = lines.reduce((a, v) => a + v.height, 0) - lineSpaceHeight;
            if (this._verticalAlign === "center") penY = Math.max(Math.floor(this._cssHeight / 2 - linesTotalHeight / 2), 0);
            else if (this._verticalAlign === "bottom") penY =
                Math.floor(this._cssHeight - linesTotalHeight);
            for (let i = 0, len = lines.length; i < len; ++i) {
                const line = lines[i];
                const curLineTextHeight = line.height;
                if (i > 0 && penY > this._cssHeight - (curLineTextHeight - lineSpaceHeight)) break;
                if (penY >= 0) this._DrawLine(renderer, line, offX, offY, penY, sin_a, cos_a);
                penY += curLineTextHeight
            }
        }
        _DrawLine(renderer, line, offX, offY, penY, sin_a, cos_a) {
            const lineHeight = line.height;
            let penX = 0;
            if (this._horizontalAlign === "center") penX = Math.max(Math.floor((this._cssWidth - line.width) / 2), 0);
            else if (this._horizontalAlign ===
                "right") penX = Math.max(Math.floor(this._cssWidth - line.width), 0);
            line.penX = penX;
            line.penY = penY;
            for (const frag of line.fragments) {
                this._DrawFragment(renderer, frag, offX, offY, penX, penY, sin_a, cos_a, lineHeight);
                penX += frag.width
            }
        }
        _DrawFragment(renderer, frag, offX, offY, penX, penY, sin_a, cos_a, lineHeight) {
            frag.penX = penX;
            frag.penY = penY;
            let chArr = frag.chArr;
            let fragWidth = frag.width;
            const styles = frag.styles;
            if (this._drawMaxCharCount !== -1) {
                if (this._drawCharCount >= this._drawMaxCharCount) return;
                if (this._drawCharCount +
                    chArr.length > this._drawMaxCharCount) {
                    chArr = chArr.slice(0, this._drawMaxCharCount - this._drawCharCount);
                    fragWidth = this._MeasureText(chArr, styles).width
                }
                this._drawCharCount += chArr.length
            }
            const backgroundStyle = this._GetStyleTag(styles, "background");
            if (C3.IsCharArrayAllWhitespace(chArr) && !backgroundStyle || this._HasStyleTag(styles, "hide")) return;
            const scaleStyle = this._GetStyleTag(styles, "scale");
            const scale = (scaleStyle ? parseFloat(scaleStyle.param) : this._scale) * this._sceneGraphScale;
            const scaleXStyle = this._GetStyleTag(styles,
                "scalex");
            const scaleX = (scaleXStyle ? parseFloat(scaleXStyle.param) : 1) * scale;
            const scaleYStyle = this._GetStyleTag(styles, "scaley");
            const scaleY = (scaleYStyle ? parseFloat(scaleYStyle.param) : 1) * scale;
            const charHeight = this._spriteFont.GetCharacterHeight() * scaleY;
            const lineSpaceHeight = this._lineHeight;
            penY += lineHeight - lineSpaceHeight - charHeight;
            const offsetXStyle = this._GetStyleTag(styles, "offsetx");
            penX += offsetXStyle ? parseFloat(offsetXStyle.param) : 0;
            const offsetYStyle = this._GetStyleTag(styles, "offsety");
            penY +=
                offsetYStyle ? parseFloat(offsetYStyle.param) : 0;
            if (backgroundStyle) {
                renderer.SetColorFillMode();
                tmpColor.parseString(backgroundStyle.param);
                tmpColor.setA(1);
                renderer.SetColor(tmpColor);
                tmpRect.set(penX, penY, penX + fragWidth, penY + charHeight);
                if (tmpRect.getRight() > this._cssWidth) tmpRect.setRight(this._cssWidth);
                tmpQuad.setFromRotatedRectPrecalc(tmpRect, sin_a, cos_a);
                tmpQuad.offset(offX, offY);
                renderer.Quad(tmpQuad);
                renderer.SetTextureFillMode()
            }
            const colorStyle = this._GetStyleTag(styles, "color");
            if (colorStyle) {
                tmpColor.parseString(colorStyle.param);
                tmpColor.setA(this._color.getA())
            } else tmpColor.copy(this._color);
            const opacityStyle = this._GetStyleTag(styles, "opacity");
            if (opacityStyle) tmpColor.setA(tmpColor.getA() * parseFloat(opacityStyle.param) / 100);
            tmpColor.premultiply();
            renderer.SetColor(tmpColor);
            const drawCharWidth = this._spriteFont.GetCharacterWidth() * scaleX;
            const endOfLineMargin = Math.abs(this.GetSpacing());
            for (const ch of chArr) {
                const sfc = this._spriteFont.GetCharacter(ch);
                if (sfc) {
                    const layoutCharWidth = sfc.GetDisplayWidth() * scaleX;
                    if (penX +
                        layoutCharWidth > this._cssWidth + endOfLineMargin + 1E-5) return;
                    tmpRect.set(penX, penY, penX + drawCharWidth, penY + charHeight);
                    tmpQuad.setFromRotatedRectPrecalc(tmpRect, sin_a, cos_a);
                    tmpQuad.offset(offX, offY);
                    renderer.Quad3(tmpQuad, sfc.GetTexRect());
                    penX += layoutCharWidth + this._spacing
                } else penX += this._spriteFont.GetSpaceWidth() * scaleX + this._spacing
            }
        }
        GetSpriteFont() {
            return this._spriteFont
        }
        SetBBCodeEnabled(e) {
            e = !!e;
            if (this._isBBcodeEnabled === e) return;
            this._isBBcodeEnabled = e;
            this._SetWrapChanged()
        }
        IsBBCodeEnabled() {
            return this._isBBcodeEnabled
        }
        SetText(text) {
            if (this._text ===
                text) return;
            this._text = text;
            this._SetWrapChanged()
        }
        SetWordWrapMode(w) {
            if (!VALID_WORD_WRAP_MODES.has(w)) throw new Error("invalid word wrap mode");
            if (this._wrapMode === w) return;
            this._wrapMode = w;
            this._SetWrapChanged()
        }
        SetHorizontalAlign(a) {
            if (!VALID_HORIZ_ALIGNMENTS.has(a)) throw new Error("invalid alignment");
            this._horizontalAlign = a
        }
        SetVerticalAlign(a) {
            if (!VALID_VERT_ALIGNMENTS.has(a)) throw new Error("invalid alignment");
            this._verticalAlign = a
        }
        SetScale(s) {
            if (this._scale === s) return;
            this._scale = s;
            this._SetWrapChanged()
        }
        GetScale() {
            return this._scale
        }
        SetSceneGraphScale(s) {
            if (this._sceneGraphScale ===
                s) return;
            this._sceneGraphScale = s;
            this._SetWrapChanged()
        }
        GetSceneGraphScale() {
            return this._sceneGraphScale
        }
        SetSpacing(s) {
            if (this._spacing === s) return;
            this._spacing = s;
            this._SetWrapChanged()
        }
        GetSpacing() {
            return this._spacing
        }
        SetLineHeight(h) {
            this._lineHeight = h;
            this._SetWrapChanged()
        }
        GetLineHeight() {
            return this._lineHeight
        }
        SetOpacity(o) {
            o = C3.clamp(o, 0, 1);
            this._color.a = o
        }
        SetColor(c) {
            if (this._color.equals(c)) return;
            this._color.copy(c)
        }
        GetColor() {
            return this._color
        }
        GetTextWidth() {
            this._MaybeWrapText();
            return this._wrappedText.GetMaxLineWidth()
        }
        GetTextHeight() {
            this._MaybeWrapText();
            const lineTextHeight = this._spriteFont.GetCharacterHeight() * this._scale;
            const lineSpaceHeight = this._lineHeight;
            const lineTotalHeight = lineTextHeight + lineSpaceHeight;
            return this._wrappedText.GetLineCount() * lineTotalHeight - lineSpaceHeight
        }
    };

}

{
    'use strict';
    const C3 = self.C3;
    const SpriteFontText = self.SpriteFontText;
    const DEFAULT_SPRITEFONT_OPTS = {
        width: 256,
        height: 256,
        characterWidth: 16,
        characterHeight: 16,
        characterSet: ""
    };
    self.SpriteFont = class SpriteFont {
        constructor(opts) {
            opts = Object.assign({}, DEFAULT_SPRITEFONT_OPTS, opts);
            if (opts.width <= 0 || opts.height <= 0 || opts.characterWidth <= 0 || opts.characterHeight <= 0) throw new Error("invalid size");
            this._width = opts.width;
            this._height = opts.height;
            this._characterWidth = opts.characterWidth;
            this._characterHeight = opts.characterHeight;
            this._characterSet = opts.characterSet;
            this._spacingData = "";
            this._spacingParsed = null;
            this._hasAnyCustomWidths = false;
            this._spaceWidth = -1;
            this._texRect = new C3.Rect(0,
                0, 1, 1);
            this._characterMap = new Map;
            this._mapChanged = true;
            this._allTexts = new Set
        }
        Release() {
            this._texRect = null;
            this._ReleaseCharacters();
            this._characterMap = null;
            if (this._allTexts) this._allTexts.clear();
            this._allTexts = null
        }
        _ReleaseCharacters() {
            for (let c of this._characterMap.values()) c.Release();
            this._characterMap.clear()
        }
        _AddSpriteFontText(sft) {
            this._allTexts.add(sft)
        }
        _RemoveSpriteFontText(sft) {
            this._allTexts.delete(sft)
        }
        UpdateCharacterMap() {
            if (!this._mapChanged) return;
            this._ReleaseCharacters();
            let charSetArr =
                C3.SplitGraphemes(this._characterSet);
            let cols = Math.floor(this._width / this._characterWidth);
            let rows = Math.floor(this._height / this._characterHeight);
            let last = cols * rows;
            for (let i = 0, len = charSetArr.length; i < len; ++i) {
                if (i >= last) break;
                let char = charSetArr[i];
                if (this._characterMap.has(char)) continue;
                let x = i % cols;
                let y = Math.floor(i / cols);
                this._characterMap.set(char, C3.New(self.SpriteFontCharacter, this, char, x * this._characterWidth, y * this._characterHeight))
            }
            this._hasAnyCustomWidths = false;
            this._spaceWidth = -1;
            if (Array.isArray(this._spacingParsed))
                for (let entry of this._spacingParsed) {
                    if (!Array.isArray(entry)) continue;
                    if (entry.length !== 2) continue;
                    let charWidth = entry[0];
                    let str = entry[1];
                    if (typeof charWidth !== "number" || !isFinite(charWidth) || typeof str !== "string") continue;
                    if (charWidth === this._characterWidth) continue;
                    for (let ch of str) {
                        let sfc = this._characterMap.get(ch);
                        if (sfc) {
                            sfc.SetDisplayWidth(charWidth);
                            this._hasAnyCustomWidths = true
                        } else if (ch === " ") {
                            this._spaceWidth = charWidth;
                            this._hasAnyCustomWidths =
                                true
                        }
                    }
                }
            this._mapChanged = false;
            for (let sft of this._allTexts) sft._SetWrapChanged()
        }
        SetCharacterWidthsChanged() {
            this._hasAnyCustomWidths = true;
            for (const sft of this._allTexts) sft._SetWrapChanged()
        }
        GetCharacter(ch) {
            this.UpdateCharacterMap();
            return this._characterMap.get(ch) || null
        }
        HasAnyCustomWidths() {
            return this._hasAnyCustomWidths
        }
        SetWidth(w) {
            w = Math.floor(w);
            if (w <= 0) throw new Error("invalid size");
            if (this._width === w) return;
            this._width = w;
            this._mapChanged = true
        }
        GetWidth() {
            return this._width
        }
        SetHeight(h) {
            h =
                Math.floor(h);
            if (h <= 0) throw new Error("invalid size");
            if (this._height === h) return;
            this._height = h;
            this._mapChanged = true
        }
        GetHeight() {
            return this._height
        }
        SetTexRect(rc) {
            if (this._texRect.equals(rc)) return;
            this._texRect.copy(rc);
            for (const sfc of this._characterMap.values()) sfc._UpdateTexRect()
        }
        GetTexRect() {
            return this._texRect
        }
        SetCharacterWidth(w) {
            w = Math.floor(w);
            if (w <= 0) throw new Error("invalid size");
            if (this._characterWidth === w) return;
            this._characterWidth = w;
            this._mapChanged = true
        }
        GetCharacterWidth() {
            return this._characterWidth
        }
        SetCharacterHeight(h) {
            h =
                Math.floor(h);
            if (h <= 0) throw new Error("invalid size");
            if (this._characterHeight === h) return;
            this._characterHeight = h;
            this._mapChanged = true
        }
        GetCharacterHeight() {
            return this._characterHeight
        }
        SetCharacterSet(s) {
            if (this._characterSet === s) return;
            this._characterSet = s;
            this._mapChanged = true
        }
        GetCharacterSet() {
            return this._characterSet
        }
        SetSpacingData(s) {
            if (this._spacingData === s) return;
            this._spacingData = s;
            this._mapChanged = true;
            this._spacingParsed = null;
            if (this._spacingData.length) try {
                this._spacingParsed = JSON.parse(this._spacingData)
            } catch (e) {
                this._spacingParsed =
                    null
            }
        }
        GetSpacingData() {
            return this._spacingData
        }
        SetSpaceWidth(w) {
            if (w < 0) w = -1;
            if (this._spaceWidth === w) return;
            this._spaceWidth = w;
            if (this._spaceWidth >= 0) this._hasAnyCustomWidths = true
        }
        GetSpaceWidth() {
            if (this._spaceWidth < 0) return this._characterWidth;
            else return this._spaceWidth
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Plugins.Touch = class TouchPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        C3.Plugins.Touch.Type = class TouchType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
            GetScriptInterfaceClass() {
                return self.ITouchObjectType
            }
        };
        let touchObjectType = null;

        function GetTouchSdkInstance() {
            return touchObjectType.GetSingleGlobalInstance().GetSdkInstance()
        }
        self.ITouchObjectType = class ITouchObjectType extends self.IObjectClass {
            constructor(objectType) {
                super(objectType);
                touchObjectType = objectType;
                objectType.GetRuntime()._GetCommonScriptInterfaces().touch =
                    this
            }
            requestPermission(type) {
                C3X.RequireString(type);
                const touchInst = GetTouchSdkInstance();
                if (type === "orientation") return touchInst._RequestPermission(0);
                else if (type === "motion") return touchInst._RequestPermission(1);
                else throw new Error("invalid type");
            }
        }
    } {
        const C3 = self.C3;
        const DOM_COMPONENT_ID = "touch";
        C3.Plugins.Touch.Instance = class TouchInstance extends C3.SDKInstanceBase {
            constructor(inst, properties) {
                super(inst, DOM_COMPONENT_ID);
                this._touches = new Map;
                this._useMouseInput = false;
                this._isMouseDown = false;
                this._orientCompassHeading = 0;
                this._orientAlpha = 0;
                this._orientBeta = 0;
                this._orientGamma = 0;
                this._accX = 0;
                this._accY = 0;
                this._accZ = 0;
                this._accWithGX = 0;
                this._accWithGY = 0;
                this._accWithGZ = 0;
                this._triggerIndex = 0;
                this._triggerId = 0;
                this._triggerPermission = 0;
                this._curTouchX =
                    0;
                this._curTouchY = 0;
                this._getTouchIndex = 0;
                this._permissionPromises = [];
                if (properties) this._useMouseInput = properties[0];
                this.AddDOMMessageHandler("permission-result", e => this._OnPermissionResult(e));
                const rt = this.GetRuntime().Dispatcher();
                this._disposables = new C3.CompositeDisposable(C3.Disposable.From(rt, "pointerdown", e => this._OnPointerDown(e.data)), C3.Disposable.From(rt, "pointermove", e => this._OnPointerMove(e.data)), C3.Disposable.From(rt, "pointerup", e => this._OnPointerUp(e.data, false)), C3.Disposable.From(rt,
                    "pointercancel", e => this._OnPointerUp(e.data, true)), C3.Disposable.From(rt, "deviceorientation", e => this._OnDeviceOrientation(e.data)), C3.Disposable.From(rt, "deviceorientationabsolute", e => this._OnDeviceOrientationAbsolute(e.data)), C3.Disposable.From(rt, "devicemotion", e => this._OnDeviceMotion(e.data)), C3.Disposable.From(rt, "tick2", e => this._OnTick2()))
            }
            Release() {
                this._touches.clear();
                super.Release()
            }
            _OnPointerDown(e) {
                if (e["pointerType"] === "mouse")
                    if (this._useMouseInput) this._isMouseDown = true;
                    else return;
                const pointerId = e["pointerId"];
                if (this._touches.has(pointerId)) return;
                const x = e["pageX"] - this._runtime.GetCanvasClientX();
                const y = e["pageY"] - this._runtime.GetCanvasClientY();
                const nowTime = performance.now();
                const index = this._touches.size;
                this._triggerIndex = index;
                this._triggerId = pointerId;
                const touchInfo = C3.New(C3.Plugins.Touch.TouchInfo);
                touchInfo.Init(nowTime, x, y, pointerId, index);
                this._touches.set(pointerId, touchInfo);
                this.Trigger(C3.Plugins.Touch.Cnds.OnNthTouchStart);
                this.Trigger(C3.Plugins.Touch.Cnds.OnTouchStart);
                this._curTouchX = x;
                this._curTouchY = y;
                this.Trigger(C3.Plugins.Touch.Cnds.OnTouchObject)
            }
            _OnPointerMove(e) {
                if (e["pointerType"] === "mouse" && !this._isMouseDown) return;
                const touchInfo = this._touches.get(e["pointerId"]);
                if (!touchInfo) return;
                const nowTime = performance.now();
                if (nowTime - touchInfo.GetTime() < 2) return;
                const x = e["pageX"] - this._runtime.GetCanvasClientX();
                const y = e["pageY"] - this._runtime.GetCanvasClientY();
                touchInfo.Update(nowTime, x, y, e["width"], e["height"], e["pressure"])
            }
            _OnPointerUp(e, isCancel) {
                if (e["pointerType"] ===
                    "mouse")
                    if (this._isMouseDown) this._isMouseDown = false;
                    else return;
                const nowTime = performance.now();
                const pointerId = e["pointerId"];
                const touchInfo = this._touches.get(pointerId);
                if (!touchInfo) return;
                this._triggerIndex = touchInfo.GetStartIndex();
                this._triggerId = touchInfo.GetId();
                this.Trigger(C3.Plugins.Touch.Cnds.OnNthTouchEnd);
                this.Trigger(C3.Plugins.Touch.Cnds.OnTouchEnd);
                if (!isCancel) {
                    const tap = touchInfo.ShouldTriggerTap(nowTime);
                    if (tap === "single-tap") {
                        this.Trigger(C3.Plugins.Touch.Cnds.OnTapGesture);
                        this._curTouchX = touchInfo.GetX();
                        this._curTouchY = touchInfo.GetY();
                        this.Trigger(C3.Plugins.Touch.Cnds.OnTapGestureObject)
                    } else if (tap === "double-tap") {
                        this.Trigger(C3.Plugins.Touch.Cnds.OnDoubleTapGesture);
                        this._curTouchX = touchInfo.GetX();
                        this._curTouchY = touchInfo.GetY();
                        this.Trigger(C3.Plugins.Touch.Cnds.OnDoubleTapGestureObject)
                    }
                }
                touchInfo.Release();
                this._touches.delete(pointerId)
            }
            _RequestPermission(type) {
                this._PostToDOMMaybeSync("request-permission", {
                    "type": type
                });
                return new Promise((resolve, reject) => {
                    this._permissionPromises.push({
                        type,
                        resolve,
                        reject
                    })
                })
            }
            _OnPermissionResult(e) {
                const isGranted = e["result"];
                const type = e["type"];
                this._triggerPermission = type;
                const toResolve = this._permissionPromises.filter(o => o.type === type);
                for (const o of toResolve) o.resolve(isGranted ? "granted" : "denied");
                this._permissionPromises = this._permissionPromises.filter(o => o.type !== type);
                if (isGranted) {
                    this.Trigger(C3.Plugins.Touch.Cnds.OnPermissionGranted);
                    if (type === 0) this._runtime.RequestDeviceOrientationEvent();
                    else this._runtime.RequestDeviceMotionEvent()
                } else this.Trigger(C3.Plugins.Touch.Cnds.OnPermissionDenied)
            }
            _OnDeviceOrientation(e) {
                if (typeof e["webkitCompassHeading"] ===
                    "number") this._orientCompassHeading = e["webkitCompassHeading"];
                else if (e["absolute"]) this._orientCompassHeading = e["alpha"];
                this._orientAlpha = e["alpha"];
                this._orientBeta = e["beta"];
                this._orientGamma = e["gamma"]
            }
            _OnDeviceOrientationAbsolute(e) {
                this._orientCompassHeading = e["alpha"]
            }
            _OnDeviceMotion(e) {
                const acc = e["acceleration"];
                if (acc) {
                    this._accX = acc["x"];
                    this._accY = acc["y"];
                    this._accZ = acc["z"]
                }
                const withG = e["accelerationIncludingGravity"];
                if (withG) {
                    this._accWithGX = withG["x"];
                    this._accWithGY = withG["y"];
                    this._accWithGZ = withG["z"]
                }
            }
            _OnTick2() {
                const nowTime = performance.now();
                let index = 0;
                for (const touchInfo of this._touches.values()) {
                    if (touchInfo.GetTime() <= nowTime - 50) touchInfo._SetLastTime(nowTime);
                    if (touchInfo.ShouldTriggerHold(nowTime)) {
                        this._triggerIndex = touchInfo.GetStartIndex();
                        this._triggerId = touchInfo.GetId();
                        this._getTouchIndex = index;
                        this.Trigger(C3.Plugins.Touch.Cnds.OnHoldGesture);
                        this._curTouchX = touchInfo.GetX();
                        this._curTouchY = touchInfo.GetY();
                        this.Trigger(C3.Plugins.Touch.Cnds.OnHoldGestureObject);
                        this._getTouchIndex = 0
                    }++index
                }
            }
            _GetTouchByIndex(index) {
                index = Math.floor(index);
                for (const touchInfo of this._touches.values()) {
                    if (index === 0) return touchInfo;
                    --index
                }
                return null
            }
            _IsClientPosOnCanvas(touchX, touchY) {
                return touchX >= 0 && touchY >= 0 && touchX < this._runtime.GetCanvasCssWidth() && touchY < this._runtime.GetCanvasCssHeight()
            }
            GetDebuggerProperties() {
                const prefix = "plugins.touch.debugger";
                return [{
                    title: prefix + ".touches",
                    properties: [...this._touches.values()].map(ti => ({
                        name: "$" + ti.GetId(),
                        value: ti.GetX() +
                            ", " + ti.GetY()
                    }))
                }]
            }
        }
    } {
        const C3 = self.C3;
        const tempArr = [];
        C3.Plugins.Touch.Cnds = {
            OnTouchStart() {
                return true
            },
            OnTouchEnd() {
                return true
            },
            IsInTouch() {
                return this._touches.size > 0
            },
            OnTouchObject(objectClass) {
                if (!objectClass) return false;
                if (!this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY)) return false;
                return this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(objectClass, this._curTouchX, this._curTouchY, false)
            },
            IsTouchingObject(objectClass) {
                if (!objectClass) return false;
                const interactiveLayersCache = new Map;
                const isLayerInteractive = layer => {
                    let ret = interactiveLayersCache.get(layer);
                    if (typeof ret === "undefined") {
                        ret = layer.IsSelfAndParentsInteractive();
                        interactiveLayersCache.set(layer, ret)
                    }
                    return ret
                };
                const sol = objectClass.GetCurrentSol();
                const instances = sol.GetInstances();
                for (const inst of instances) {
                    const wi = inst.GetWorldInfo();
                    const layer = wi.GetLayer();
                    if (!isLayerInteractive(layer) || !wi.IsInViewport2()) continue;
                    for (const touchInfo of this._touches.values()) {
                        if (!this._IsClientPosOnCanvas(touchInfo.GetX(),
                                touchInfo.GetY())) continue;
                        const [px, py] = layer.CanvasCssToLayer(touchInfo.GetX(), touchInfo.GetY(), wi.GetTotalZElevation());
                        if (wi.ContainsPoint(px, py)) {
                            tempArr.push(inst);
                            break
                        }
                    }
                }
                interactiveLayersCache.clear();
                if (tempArr.length) {
                    sol.SetArrayPicked(tempArr);
                    objectClass.ApplySolToContainer();
                    C3.clearArray(tempArr);
                    return true
                } else return false
            },
            CompareTouchSpeed(index, cmp, s) {
                const touchInfo = this._GetTouchByIndex(index);
                if (!touchInfo) return false;
                return C3.compare(touchInfo.GetSpeed(), cmp, s)
            },
            OrientationSupported() {
                return true
            },
            MotionSupported() {
                return true
            },
            CompareOrientation(orientation, cmp, a) {
                this._runtime.RequestDeviceOrientationEvent();
                let v = 0;
                if (orientation === 0) v = this._orientAlpha;
                else if (orientation === 1) v = this._orientBeta;
                else v = this._orientGamma;
                return C3.compare(v, cmp, a)
            },
            CompareAcceleration(a, cmp, x) {
                this._runtime.RequestDeviceMotionEvent();
                let v = 0;
                if (a === 0) v = this._accWithGX;
                else if (a === 1) v = this._accWithGY;
                else if (a === 2) v = this._accWithGZ;
                else if (a === 3) v = this._accX;
                else if (a === 4) v = this._accY;
                else v = this._accZ;
                return C3.compare(v,
                    cmp, x)
            },
            OnNthTouchStart(index) {
                index = Math.floor(index);
                return index === this._triggerIndex
            },
            OnNthTouchEnd(index) {
                index = Math.floor(index);
                return index === this._triggerIndex
            },
            HasNthTouch(index) {
                index = Math.floor(index);
                return this._touches.size >= index + 1
            },
            OnHoldGesture() {
                return true
            },
            OnTapGesture() {
                return true
            },
            OnDoubleTapGesture() {
                return true
            },
            OnHoldGestureObject(objectClass) {
                if (!objectClass) return false;
                if (!this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY)) return false;
                return this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(objectClass,
                    this._curTouchX, this._curTouchY, false)
            },
            OnTapGestureObject(objectClass) {
                if (!objectClass) return false;
                if (!this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY)) return false;
                return this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(objectClass, this._curTouchX, this._curTouchY, false)
            },
            OnDoubleTapGestureObject(objectClass) {
                if (!objectClass) return false;
                if (!this._IsClientPosOnCanvas(this._curTouchX, this._curTouchY)) return false;
                return this._runtime.GetCollisionEngine().TestAndSelectCanvasPointOverlap(objectClass,
                    this._curTouchX, this._curTouchY, false)
            },
            OnPermissionGranted(type) {
                return this._triggerPermission === type
            },
            OnPermissionDenied(type) {
                return this._triggerPermission === type
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Touch.Acts = {
            RequestPermission(type) {
                this._RequestPermission(type)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Touch.Exps = {
            TouchCount() {
                return this._touches.size
            },
            X(layerParam) {
                const touchInfo = this._GetTouchByIndex(this._getTouchIndex);
                if (!touchInfo) return 0;
                return touchInfo.GetPositionForLayer(this._runtime.GetCurrentLayout(), layerParam, true)
            },
            Y(layerParam) {
                const touchInfo = this._GetTouchByIndex(this._getTouchIndex);
                if (!touchInfo) return 0;
                return touchInfo.GetPositionForLayer(this._runtime.GetCurrentLayout(), layerParam, false)
            },
            XAt(index, layerParam) {
                const touchInfo = this._GetTouchByIndex(index);
                if (!touchInfo) return 0;
                return touchInfo.GetPositionForLayer(this._runtime.GetCurrentLayout(), layerParam, true)
            },
            YAt(index, layerParam) {
                const touchInfo = this._GetTouchByIndex(index);
                if (!touchInfo) return 0;
                return touchInfo.GetPositionForLayer(this._runtime.GetCurrentLayout(), layerParam, false)
            },
            XForID(id, layerParam) {
                const touchInfo = this._touches.get(id);
                if (!touchInfo) return 0;
                return touchInfo.GetPositionForLayer(this._runtime.GetCurrentLayout(), layerParam, true)
            },
            YForID(id, layerParam) {
                const touchInfo = this._touches.get(id);
                if (!touchInfo) return 0;
                return touchInfo.GetPositionForLayer(this._runtime.GetCurrentLayout(), layerParam, false)
            },
            AbsoluteX() {
                const touchInfo = this._GetTouchByIndex(0);
                if (touchInfo) return touchInfo.GetX();
                else return 0
            },
            AbsoluteY() {
                const touchInfo = this._GetTouchByIndex(0);
                if (touchInfo) return touchInfo.GetY();
                else return 0
            },
            AbsoluteXAt(index) {
                const touchInfo = this._GetTouchByIndex(index);
                if (touchInfo) return touchInfo.GetX();
                else return 0
            },
            AbsoluteYAt(index) {
                const touchInfo = this._GetTouchByIndex(index);
                if (touchInfo) return touchInfo.GetY();
                else return 0
            },
            AbsoluteXForID(id) {
                const touchInfo = this._touches.get(id);
                if (touchInfo) return touchInfo.GetX();
                else return 0
            },
            AbsoluteYForID(id) {
                const touchInfo = this._touches.get(id);
                if (touchInfo) return touchInfo.GetY();
                else return 0
            },
            SpeedAt(index) {
                const touchInfo = this._GetTouchByIndex(index);
                if (touchInfo) return touchInfo.GetSpeed();
                else return 0
            },
            SpeedForID(id) {
                const touchInfo = this._touches.get(id);
                if (touchInfo) return touchInfo.GetSpeed();
                else return 0
            },
            AngleAt(index) {
                const touchInfo =
                    this._GetTouchByIndex(index);
                if (touchInfo) return C3.toDegrees(touchInfo.GetAngle());
                else return 0
            },
            AngleForID(id) {
                const touchInfo = this._touches.get(id);
                if (touchInfo) return C3.toDegrees(touchInfo.GetAngle());
                else return 0
            },
            CompassHeading() {
                this._runtime.RequestDeviceOrientationEvent();
                return this._orientCompassHeading
            },
            Alpha() {
                this._runtime.RequestDeviceOrientationEvent();
                return this._orientAlpha
            },
            Beta() {
                this._runtime.RequestDeviceOrientationEvent();
                return this._orientBeta
            },
            Gamma() {
                this._runtime.RequestDeviceOrientationEvent();
                return this._orientGamma
            },
            AccelerationXWithG() {
                this._runtime.RequestDeviceMotionEvent();
                return this._accWithGX
            },
            AccelerationYWithG() {
                this._runtime.RequestDeviceMotionEvent();
                return this._accWithGY
            },
            AccelerationZWithG() {
                this._runtime.RequestDeviceMotionEvent();
                return this._accWithGZ
            },
            AccelerationX() {
                this._runtime.RequestDeviceMotionEvent();
                return this._accX
            },
            AccelerationY() {
                this._runtime.RequestDeviceMotionEvent();
                return this._accY
            },
            AccelerationZ() {
                this._runtime.RequestDeviceMotionEvent();
                return this._accZ
            },
            TouchIndex() {
                return this._triggerIndex
            },
            TouchID() {
                return this._triggerId
            },
            WidthForID(id) {
                const touchInfo = this._touches.get(id);
                if (touchInfo) return touchInfo.GetWidth();
                else return 0
            },
            HeightForID(id) {
                const touchInfo = this._touches.get(id);
                if (touchInfo) return touchInfo.GetHeight();
                else return 0
            },
            PressureForID(id) {
                const touchInfo = this._touches.get(id);
                if (touchInfo) return touchInfo.GetPressure();
                else return 0
            }
        }
    };

}

{
    'use strict';
    const C3 = self.C3;
    const GESTURE_HOLD_THRESHOLD = 15;
    const GESTURE_HOLD_TIMEOUT = 500;
    const GESTURE_TAP_TIMEOUT = 333;
    const GESTURE_DOUBLETAP_THRESHOLD = 25;
    let lastTapX = -1E3;
    let lastTapY = -1E3;
    let lastTapTime = -1E4;
    C3.Plugins.Touch.TouchInfo = class TouchInfo extends C3.DefendedBase {
        constructor() {
            super();
            this._pointerId = 0;
            this._startIndex = 0;
            this._startTime = 0;
            this._time = 0;
            this._lastTime = 0;
            this._startX = 0;
            this._startY = 0;
            this._x = 0;
            this._y = 0;
            this._lastX = 0;
            this._lastY = 0;
            this._width = 0;
            this._height = 0;
            this._pressure = 0;
            this._hasTriggeredHold = false;
            this._isTooFarForHold = false
        }
        Release() {}
        Init(nowTime, x, y, id, index) {
            this._pointerId = id;
            this._startIndex = index;
            this._time = nowTime;
            this._lastTime = nowTime;
            this._startTime = nowTime;
            this._startX = x;
            this._startY = y;
            this._x = x;
            this._y = y;
            this._lastX = x;
            this._lastY = y
        }
        Update(nowTime, x, y, width, height, pressure) {
            this._lastTime = this._time;
            this._time = nowTime;
            this._lastX = this._x;
            this._lastY = this._y;
            this._x = x;
            this._y = y;
            this._width = width;
            this._height = height;
            this._pressure = pressure;
            if (!this._isTooFarForHold && C3.distanceTo(this._startX, this._startY, this._x, this._y) >= GESTURE_HOLD_THRESHOLD) this._isTooFarForHold = true
        }
        GetId() {
            return this._pointerId
        }
        GetStartIndex() {
            return this._startIndex
        }
        GetTime() {
            return this._time
        }
        _SetLastTime(t) {
            this._lastTime =
                t
        }
        GetX() {
            return this._x
        }
        GetY() {
            return this._y
        }
        GetSpeed() {
            const dist = C3.distanceTo(this._x, this._y, this._lastX, this._lastY);
            const dt = (this._time - this._lastTime) / 1E3;
            if (dt > 0) return dist / dt;
            else return 0
        }
        GetAngle() {
            return C3.angleTo(this._lastX, this._lastY, this._x, this._y)
        }
        GetWidth() {
            return this._width
        }
        GetHeight() {
            return this._height
        }
        GetPressure() {
            return this._pressure
        }
        ShouldTriggerHold(nowTime) {
            if (this._hasTriggeredHold) return false;
            if (nowTime - this._startTime >= GESTURE_HOLD_TIMEOUT && !this._isTooFarForHold &&
                C3.distanceTo(this._startX, this._startY, this._x, this._y) < GESTURE_HOLD_THRESHOLD) {
                this._hasTriggeredHold = true;
                return true
            }
            return false
        }
        ShouldTriggerTap(nowTime) {
            if (this._hasTriggeredHold) return "";
            if (nowTime - this._startTime <= GESTURE_TAP_TIMEOUT && !this._isTooFarForHold && C3.distanceTo(this._startX, this._startY, this._x, this._y) < GESTURE_HOLD_THRESHOLD)
                if (nowTime - lastTapTime <= GESTURE_TAP_TIMEOUT * 2 && C3.distanceTo(lastTapX, lastTapY, this._x, this._y) < GESTURE_DOUBLETAP_THRESHOLD) {
                    lastTapX = -1E3;
                    lastTapY = -1E3;
                    lastTapTime = -1E4;
                    return "double-tap"
                } else {
                    lastTapX = this._x;
                    lastTapY = this._y;
                    lastTapTime = nowTime;
                    return "single-tap"
                }
            return ""
        }
        GetPositionForLayer(layout, layerNameOrNumber, getx) {
            if (typeof layerNameOrNumber === "undefined") {
                const layer = layout.GetLayerByIndex(0);
                return layer.CanvasCssToLayer_DefaultTransform(this._x, this._y)[getx ? 0 : 1]
            } else {
                const layer = layout.GetLayer(layerNameOrNumber);
                if (layer) return layer.CanvasCssToLayer(this._x, this._y)[getx ? 0 : 1];
                else return 0
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Plugins.TiledBg = class TiledBgPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;

        function WrapModeToStr(wrapMode) {
            switch (wrapMode) {
                case 0:
                    return "clamp-to-edge";
                case 1:
                    return "repeat";
                case 2:
                    return "mirror-repeat"
            }
            return "repeat"
        }
        C3.Plugins.TiledBg.Type = class TiledBgType extends C3.SDKTypeBase {
            constructor(objectClass, exportData) {
                super(objectClass);
                this._wrapX = "repeat";
                this._wrapY = "repeat";
                if (exportData) {
                    this._wrapX = WrapModeToStr(exportData[0]);
                    this._wrapY = WrapModeToStr(exportData[1])
                }
            }
            Release() {
                super.Release()
            }
            OnCreate() {
                this.GetImageInfo().LoadAsset(this._runtime)
            }
            LoadTextures(renderer) {
                return this.GetImageInfo().LoadStaticTexture(renderer, {
                    sampling: this._runtime.GetSampling(),
                    wrapX: this._wrapX,
                    wrapY: this._wrapY
                })
            }
            ReleaseTextures() {
                this.GetImageInfo().ReleaseTexture()
            }
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const INITIALLY_VISIBLE = 0;
        const ORIGIN = 1;
        const IMAGE_OFFSET_X = 4;
        const IMAGE_OFFSET_Y = 5;
        const IMAGE_SCALE_X = 6;
        const IMAGE_SCALE_Y = 7;
        const IMAGE_ANGLE = 8;
        const ENABLE_TILE_RANDOMIZATION = 9;
        const TILE_XRANDOM = 10;
        const TILE_YRANDOM = 11;
        const TILE_ANGLERANDOM = 12;
        const TILE_BLENDMARGINX = 13;
        const TILE_BLENDMARGINY = 14;
        const tempRect = C3.New(C3.Rect);
        const tempQuad = C3.New(C3.Quad);
        const rcTex = C3.New(C3.Rect);
        const qTex = C3.New(C3.Quad);
        C3.Plugins.TiledBg.Instance = class TiledBgInstance extends C3.SDKWorldInstanceBase {
            constructor(inst,
                properties) {
                super(inst);
                this._imageOffsetX = 0;
                this._imageOffsetY = 0;
                this._imageScaleX = 1;
                this._imageScaleY = 1;
                this._imageAngle = 0;
                this._enableTileRandomization = false;
                this._tileXRandom = 0;
                this._tileYRandom = 0;
                this._tileAngleRandom = 0;
                this._tileBlendMarginX = 0;
                this._tileBlendMarginY = 0;
                this._ownImageInfo = null;
                if (properties) {
                    this.GetWorldInfo().SetVisible(!!properties[INITIALLY_VISIBLE]);
                    this._imageOffsetX = properties[IMAGE_OFFSET_X];
                    this._imageOffsetY = properties[IMAGE_OFFSET_Y];
                    this._imageScaleX = properties[IMAGE_SCALE_X];
                    this._imageScaleY = properties[IMAGE_SCALE_Y];
                    this._imageAngle = C3.toRadians(properties[IMAGE_ANGLE]);
                    this._enableTileRandomization = !!properties[ENABLE_TILE_RANDOMIZATION];
                    this._tileXRandom = properties[TILE_XRANDOM];
                    this._tileYRandom = properties[TILE_YRANDOM];
                    this._tileAngleRandom = properties[TILE_ANGLERANDOM];
                    this._tileBlendMarginX = properties[TILE_BLENDMARGINX];
                    this._tileBlendMarginY = properties[TILE_BLENDMARGINY]
                }
            }
            Release() {
                this._ReleaseOwnImage();
                super.Release()
            }
            _ReleaseOwnImage() {
                if (this._ownImageInfo) {
                    this._ownImageInfo.Release();
                    this._ownImageInfo = null
                }
            }
            CalculateTextureCoordsFor3DFace(areaWidth, areaHeight, outQuad) {
                const imageInfo = this.GetCurrentImageInfo();
                const imageWidth = imageInfo.GetWidth();
                const imageHeight = imageInfo.GetHeight();
                const imageOffsetX = this._imageOffsetX / imageWidth;
                const imageOffsetY = this._imageOffsetY / imageHeight;
                const imageAngle = this._imageAngle;
                rcTex.set(0, 0, areaWidth / (imageWidth * this._imageScaleX), areaHeight / (imageHeight * this._imageScaleY));
                rcTex.offset(-imageOffsetX, -imageOffsetY);
                if (imageAngle === 0) outQuad.setFromRect(rcTex);
                else outQuad.setFromRotatedRect(rcTex, -imageAngle)
            }
            SetTilingShaderProgram(renderer) {
                if (this._enableTileRandomization) {
                    const imageInfo = this.GetCurrentImageInfo();
                    renderer.SetTileRandomizationMode();
                    renderer.SetTileRandomizationInfo(imageInfo.GetWidth() * this._imageScaleX, imageInfo.GetHeight() * this._imageScaleY, this._tileXRandom, this._tileYRandom, this._tileAngleRandom, this._tileBlendMarginX, this._tileBlendMarginY)
                } else renderer.SetTextureFillMode()
            }
            Draw(renderer) {
                const imageInfo = this.GetCurrentImageInfo();
                const texture = imageInfo.GetTexture();
                if (texture === null) return;
                this.SetTilingShaderProgram(renderer);
                renderer.SetTexture(texture);
                const imageWidth = imageInfo.GetWidth();
                const imageHeight = imageInfo.GetHeight();
                const imageOffsetX = this._imageOffsetX / imageWidth;
                const imageOffsetY = this._imageOffsetY / imageHeight;
                const wi = this.GetWorldInfo();
                rcTex.set(0, 0, wi.GetWidth() / (imageWidth * this._imageScaleX), wi.GetHeight() / (imageHeight * this._imageScaleY));
                rcTex.offset(-imageOffsetX, -imageOffsetY);
                if (wi.HasMesh()) this._DrawMesh(wi,
                    renderer);
                else this._DrawStandard(wi, renderer)
            }
            _DrawStandard(wi, renderer) {
                let quad = wi.GetBoundingQuad();
                if (this._runtime.IsPixelRoundingEnabled()) quad = wi.PixelRoundQuad(quad);
                if (this._imageAngle === 0) renderer.Quad3(quad, rcTex);
                else {
                    qTex.setFromRotatedRect(rcTex, -this._imageAngle);
                    renderer.Quad4(quad, qTex)
                }
            }
            _DrawMesh(wi, renderer) {
                const transformedMesh = wi.GetTransformedMesh();
                if (wi.IsMeshChanged()) {
                    wi.CalculateBbox(tempRect, tempQuad, false);
                    let quad = tempQuad;
                    if (this._runtime.IsPixelRoundingEnabled()) quad =
                        wi.PixelRoundQuad(quad);
                    let texCoords = rcTex;
                    if (this._imageAngle !== 0) {
                        qTex.setFromRotatedRect(rcTex, -this._imageAngle);
                        texCoords = qTex
                    }
                    transformedMesh.CalculateTransformedMesh(wi.GetSourceMesh(), quad, texCoords);
                    wi.SetMeshChanged(false)
                }
                transformedMesh.Draw(renderer)
            }
            GetCurrentImageInfo() {
                return this._ownImageInfo || this._objectClass.GetImageInfo()
            }
            IsOriginalSizeKnown() {
                return true
            }
            GetTexture() {
                return this.GetCurrentImageInfo().GetTexture()
            }
            _SetMeshChanged() {
                this.GetWorldInfo().SetMeshChanged(true)
            }
            _SetImageOffsetX(x) {
                if (this._imageOffsetX ===
                    x) return;
                this._imageOffsetX = x;
                this._runtime.UpdateRender();
                this._SetMeshChanged()
            }
            _GetImageOffsetX() {
                return this._imageOffsetX
            }
            _SetImageOffsetY(y) {
                if (this._imageOffsetY === y) return;
                this._imageOffsetY = y;
                this._runtime.UpdateRender();
                this._SetMeshChanged()
            }
            _GetImageOffsetY() {
                return this._imageOffsetY
            }
            _SetImageScaleX(x) {
                if (this._imageScaleX === x) return;
                this._imageScaleX = x;
                this._runtime.UpdateRender();
                this._SetMeshChanged()
            }
            _GetImageScaleX() {
                return this._imageScaleX
            }
            _SetImageScaleY(y) {
                if (this._imageScaleY ===
                    y) return;
                this._imageScaleY = y;
                this._runtime.UpdateRender();
                this._SetMeshChanged()
            }
            _GetImageScaleY() {
                return this._imageScaleY
            }
            _SetImageAngle(a) {
                if (this._imageAngle === a) return;
                this._imageAngle = a;
                this._runtime.UpdateRender();
                this._SetMeshChanged()
            }
            _GetImageAngle() {
                return this._imageAngle
            }
            _SetTileRandomizationEnabled(e) {
                e = !!e;
                if (this._enableTileRandomization === e) return;
                this._enableTileRandomization = e;
                this._runtime.UpdateRender()
            }
            _IsTileRandomizationEnabled() {
                return this._enableTileRandomization
            }
            _SetTileXRandom(x) {
                if (this._tileXRandom ===
                    x) return;
                this._tileXRandom = x;
                if (this._IsTileRandomizationEnabled()) this._runtime.UpdateRender()
            }
            _GetTileXRandom() {
                return this._tileXRandom
            }
            _SetTileYRandom(y) {
                if (this._tileYRandom === y) return;
                this._tileYRandom = y;
                if (this._IsTileRandomizationEnabled()) this._runtime.UpdateRender()
            }
            _GetTileYRandom() {
                return this._tileYRandom
            }
            _SetTileAngleRandom(a) {
                if (this._tileAngleRandom === a) return;
                this._tileAngleRandom = a;
                if (this._IsTileRandomizationEnabled()) this._runtime.UpdateRender()
            }
            _GetTileAngleRandom() {
                return this._tileAngleRandom
            }
            _SetTileBlendMarginX(x) {
                if (this._tileBlendMarginX ===
                    x) return;
                this._tileBlendMarginX = x;
                if (this._IsTileRandomizationEnabled()) this._runtime.UpdateRender()
            }
            _GetTileBlendMarginX() {
                return this._tileBlendMarginX
            }
            _SetTileBlendMarginY(y) {
                if (this._tileBlendMarginY === y) return;
                this._tileBlendMarginY = y;
                if (this._IsTileRandomizationEnabled()) this._runtime.UpdateRender()
            }
            _GetTileBlendMarginY() {
                return this._tileBlendMarginY
            }
            GetDebuggerProperties() {
                const propsPrefix = "plugins.tiledbg.properties";
                return [{
                    title: propsPrefix + ".image-transform.name",
                    properties: [{
                        name: propsPrefix +
                            ".image-offset-x.name",
                        value: this._GetImageOffsetX(),
                        onedit: v => this._SetImageOffsetX(v)
                    }, {
                        name: propsPrefix + ".image-offset-y.name",
                        value: this._GetImageOffsetY(),
                        onedit: v => this._SetImageOffsetY(v)
                    }, {
                        name: propsPrefix + ".image-scale-x.name",
                        value: this._GetImageScaleX() * 100,
                        onedit: v => this._SetImageScaleX(v / 100)
                    }, {
                        name: propsPrefix + ".image-scale-y.name",
                        value: this._GetImageScaleY() * 100,
                        onedit: v => this._SetImageScaleY(v / 100)
                    }, {
                        name: propsPrefix + ".image-angle.name",
                        value: C3.toDegrees(this._GetImageAngle()),
                        onedit: v =>
                            this._SetImageAngle(C3.toRadians(v))
                    }]
                }, {
                    title: propsPrefix + ".tile-randomization.name",
                    properties: [{
                        name: propsPrefix + ".enable-tile-randomization.name",
                        value: this._IsTileRandomizationEnabled(),
                        onedit: v => this._SetTileRandomizationEnabled(v)
                    }, {
                        name: propsPrefix + ".x-random.name",
                        value: this._GetTileXRandom() * 100,
                        onedit: v => this._SetTileXRandom(v / 100)
                    }, {
                        name: propsPrefix + ".y-random.name",
                        value: this._GetTileYRandom() * 100,
                        onedit: v => this._SetTileYRandom(v / 100)
                    }, {
                        name: propsPrefix + ".angle-random.name",
                        value: this._GetTileAngleRandom() *
                            100,
                        onedit: v => this._SetTileAngleRandom(v / 100)
                    }, {
                        name: propsPrefix + ".blend-margin-x.name",
                        value: this._GetTileBlendMarginX() * 100,
                        onedit: v => this._SetTileBlendMarginX(v / 100)
                    }, {
                        name: propsPrefix + ".blend-margin-y.name",
                        value: this._GetTileBlendMarginY() * 100,
                        onedit: v => this._SetTileBlendMarginY(v / 100)
                    }]
                }]
            }
            GetPropertyValueByIndex(index) {
                switch (index) {
                    case IMAGE_OFFSET_X:
                        return this._GetImageOffsetX();
                    case IMAGE_OFFSET_Y:
                        return this._GetImageOffsetY();
                    case IMAGE_SCALE_X:
                        return this._GetImageScaleX();
                    case IMAGE_SCALE_Y:
                        return this._GetImageScaleY();
                    case IMAGE_ANGLE:
                        return this._GetImageAngle();
                    case ENABLE_TILE_RANDOMIZATION:
                        return this._IsTileRandomizationEnabled();
                    case TILE_XRANDOM:
                        return this._GetTileXRandom();
                    case TILE_YRANDOM:
                        return this._GetTileYRandom();
                    case TILE_ANGLERANDOM:
                        return this._GetTileAngleRandom();
                    case TILE_BLENDMARGINX:
                        return this._GetTileBlendMarginX();
                    case TILE_BLENDMARGINY:
                        return this._GetTileBlendMarginY()
                }
            }
            SetPropertyValueByIndex(index, value) {
                switch (index) {
                    case IMAGE_OFFSET_X:
                        this._SetImageOffsetX(value);
                        break;
                    case IMAGE_OFFSET_Y:
                        this._SetImageOffsetY(value);
                        break;
                    case IMAGE_SCALE_X:
                        this._SetImageScaleX(value);
                        break;
                    case IMAGE_SCALE_Y:
                        this._SetImageScaleY(value);
                        break;
                    case IMAGE_ANGLE:
                        this._SetImageAngle(value);
                        break;
                    case ENABLE_TILE_RANDOMIZATION:
                        this._SetTileRandomizationEnabled(!!value);
                        break;
                    case TILE_XRANDOM:
                        this._SetTileXRandom(value);
                        break;
                    case TILE_YRANDOM:
                        this._SetTileYRandom(value);
                        break;
                    case TILE_ANGLERANDOM:
                        this._SetTileAngleRandom(value);
                        break;
                    case TILE_BLENDMARGINX:
                        this._SetTileBlendMarginX(value);
                        break;
                    case TILE_BLENDMARGINY:
                        this._SetTileBlendMarginY(value);
                        break
                }
            }
            GetScriptInterfaceClass() {
                return self.ITiledBackgroundInstance
            }
        };
        const map = new WeakMap;
        self.ITiledBackgroundInstance = class ITiledBackgroundInstance extends self.IWorldInstance {
            constructor() {
                super();
                map.set(this, self.IInstance._GetInitInst().GetSdkInstance())
            }
            set imageOffsetX(x) {
                C3X.RequireFiniteNumber(x);
                map.get(this)._SetImageOffsetX(x)
            }
            get imageOffsetX() {
                return map.get(this)._GetImageOffsetX()
            }
            set imageOffsetY(y) {
                C3X.RequireFiniteNumber(y);
                map.get(this)._SetImageOffsetY(y)
            }
            get imageOffsetY() {
                return map.get(this)._GetImageOffsetY()
            }
            setImageOffset(x,
                y) {
                C3X.RequireFiniteNumber(x);
                C3X.RequireFiniteNumber(y);
                const inst = map.get(this);
                inst._SetImageOffsetX(x);
                inst._SetImageOffsetY(y)
            }
            getImageOffset() {
                const inst = map.get(this);
                return [inst._GetImageOffsetX(), inst._GetImageOffsetY()]
            }
            set imageScaleX(x) {
                C3X.RequireFiniteNumber(x);
                map.get(this)._SetImageScaleX(x)
            }
            get imageScaleX() {
                return map.get(this)._GetImageScaleX()
            }
            set imageScaleY(y) {
                C3X.RequireFiniteNumber(y);
                map.get(this)._SetImageScaleY(y)
            }
            get imageScaleY() {
                return map.get(this)._GetImageScaleY()
            }
            setImageScale(x,
                y) {
                C3X.RequireFiniteNumber(x);
                C3X.RequireFiniteNumber(y);
                const inst = map.get(this);
                inst._SetImageScaleX(x);
                inst._SetImageScaleY(y)
            }
            getImageScale() {
                const inst = map.get(this);
                return [inst._GetImageScaleX(), inst._GetImageScaleY()]
            }
            set imageAngle(a) {
                C3X.RequireFiniteNumber(a);
                map.get(this)._SetImageAngle(a)
            }
            get imageAngle() {
                return map.get(this)._GetImageAngle()
            }
            set imageAngleDegrees(a) {
                C3X.RequireFiniteNumber(a);
                map.get(this)._SetImageAngle(C3.toRadians(a))
            }
            get imageAngleDegrees() {
                return C3.toDegrees(map.get(this)._GetImageAngle())
            }
            get imageWidth() {
                return map.get(this).GetCurrentImageInfo().GetWidth()
            }
            get imageHeight() {
                return map.get(this).GetCurrentImageInfo().GetHeight()
            }
            getImageSize() {
                const imageInfo =
                    map.get(this).GetCurrentImageInfo();
                return [imageInfo.GetWidth(), imageInfo.GetHeight()]
            }
            set enableTileRandomization(e) {
                map.get(this)._SetTileRandomizationEnabled(!!e)
            }
            get enableTileRandomization() {
                return map.get(this)._IsTileRandomizationEnabled()
            }
            set tileXRandom(x) {
                C3X.RequireFiniteNumber(x);
                map.get(this)._SetTileXRandom(x)
            }
            get tileXRandom() {
                return map.get(this)._GetTileXRandom()
            }
            set tileYRandom(y) {
                C3X.RequireFiniteNumber(y);
                map.get(this)._SetTileYRandom(y)
            }
            get tileYRandom() {
                return map.get(this)._GetTileYRandom()
            }
            setTileRandom(x,
                y) {
                C3X.RequireFiniteNumber(x);
                C3X.RequireFiniteNumber(y);
                const inst = map.get(this);
                inst._SetTileXRandom(x);
                inst._SetTileYRandom(y)
            }
            getTileRandom() {
                const inst = map.get(this);
                return [inst._GetTileXRandom(), inst._GetTileYRandom()]
            }
            set tileAngleRandom(a) {
                C3X.RequireFiniteNumber(a);
                map.get(this)._SetTileAngleRandom(a)
            }
            get tileAngleRandom() {
                return map.get(this)._GetTileAngleRandom()
            }
            set tileBlendMarginX(x) {
                C3X.RequireFiniteNumber(x);
                map.get(this)._SetTileBlendMarginX(x)
            }
            get tileBlendMarginX() {
                return map.get(this)._GetTileBlendMarginX()
            }
            set tileBlendMarginY(y) {
                C3X.RequireFiniteNumber(y);
                map.get(this)._SetTileBlendMarginY(y)
            }
            get tileBlendMarginY() {
                return map.get(this)._GetTileBlendMarginY()
            }
            setTileBlendMargin(x, y) {
                C3X.RequireFiniteNumber(x);
                C3X.RequireFiniteNumber(y);
                const inst = map.get(this);
                inst._SetTileBlendMarginX(x);
                inst._SetTileBlendMarginY(y)
            }
            getTileBlendMargin() {
                const inst = map.get(this);
                return [inst._GetTileBlendMarginX(), inst._GetTileBlendMarginY()]
            }
            async replaceImage(blob) {
                C3X.RequireInstanceOf(blob, Blob);
                const sdkInst = map.get(this);
                const runtime = sdkInst.GetRuntime();
                const imageInfo =
                    C3.New(C3.ImageInfo);
                imageInfo.LoadDynamicBlobAsset(runtime, blob);
                await imageInfo.LoadStaticTexture(runtime.GetRenderer(), {
                    sampling: runtime.GetSampling(),
                    wrapX: "repeat",
                    wrapY: "repeat"
                });
                if (sdkInst.WasReleased()) {
                    imageInfo.Release();
                    return
                }
                sdkInst._ReleaseOwnImage();
                sdkInst._ownImageInfo = imageInfo;
                runtime.UpdateRender()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.TiledBg.Cnds = {
            OnURLLoaded() {
                return true
            },
            OnURLFailed() {
                return true
            },
            IsTileRandomizationEnabled() {
                return this._IsTileRandomizationEnabled()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.TiledBg.Acts = {
            SetImageOffsetX(x) {
                this._SetImageOffsetX(x)
            },
            SetImageOffsetY(y) {
                this._SetImageOffsetY(y)
            },
            SetImageScaleX(x) {
                this._SetImageScaleX(x / 100)
            },
            SetImageScaleY(y) {
                this._SetImageScaleY(y / 100)
            },
            SetImageAngle(a) {
                this._SetImageAngle(C3.toRadians(a))
            },
            SetTileRandomizationEnabled(e) {
                this._SetTileRandomizationEnabled(e)
            },
            SetTilePosRandom(x, y) {
                this._SetTileXRandom(x / 100);
                this._SetTileYRandom(y / 100)
            },
            SetTileAngleRandom(a) {
                this._SetTileAngleRandom(a / 100)
            },
            SetTileBlendMargin(x,
                y) {
                this._SetTileBlendMarginX(x / 100);
                this._SetTileBlendMarginY(y / 100)
            },
            SetEffect(effect) {
                this.GetWorldInfo().SetBlendMode(effect);
                this._runtime.UpdateRender()
            },
            async LoadURL(url, crossOrigin) {
                if (this._ownImageInfo && this._ownImageInfo.GetURL() === url) return;
                const runtime = this._runtime;
                const imageInfo = C3.New(C3.ImageInfo);
                try {
                    await imageInfo.LoadDynamicAsset(runtime, url);
                    if (!imageInfo.IsLoaded()) throw new Error("image failed to load");
                    if (this.WasReleased()) {
                        imageInfo.Release();
                        return null
                    }
                    const texture =
                        await imageInfo.LoadStaticTexture(runtime.GetRenderer(), {
                            sampling: runtime.GetSampling(),
                            wrapX: "repeat",
                            wrapY: "repeat"
                        });
                    if (!texture) return
                } catch (err) {
                    console.error("Load image from URL failed: ", err);
                    if (!this.WasReleased()) this.Trigger(C3.Plugins.TiledBg.Cnds.OnURLFailed);
                    return
                }
                if (this.WasReleased()) {
                    imageInfo.Release();
                    return
                }
                this._ReleaseOwnImage();
                this._ownImageInfo = imageInfo;
                runtime.UpdateRender();
                await this.TriggerAsync(C3.Plugins.TiledBg.Cnds.OnURLLoaded)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.TiledBg.Exps = {
            ImageWidth() {
                return this.GetCurrentImageInfo().GetWidth()
            },
            ImageHeight() {
                return this.GetCurrentImageInfo().GetHeight()
            },
            ImageOffsetX() {
                return this._imageOffsetX
            },
            ImageOffsetY() {
                return this._imageOffsetY
            },
            ImageScaleX() {
                return this._imageScaleX * 100
            },
            ImageScaleY() {
                return this._imageScaleY * 100
            },
            ImageAngle() {
                return C3.toDegrees(this._imageAngle)
            },
            TileXRandom() {
                return this._GetTileXRandom() * 100
            },
            TileYRandom() {
                return this._GetTileYRandom() * 100
            },
            TileAngleRandom() {
                return this._GetTileAngleRandom() *
                    100
            },
            TileBlendMarginX() {
                return this._GetTileBlendMarginX() * 100
            },
            TileBlendMarginY() {
                return this._GetTileBlendMarginY() * 100
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Plugins.Sprite = class SpritePlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        const spawnPickStack = [];
        C3.Plugins.Sprite.Type = class SpriteType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass);
                this._animations = objectClass.GetAnimations()
            }
            Release() {
                C3.clearArray(this._animations);
                super.Release()
            }
            OnCreate() {
                for (const a of this._animations) a.LoadAllAssets(this._runtime)
            }
            LoadTextures(renderer) {
                const opts = {
                    sampling: this._runtime.GetSampling()
                };
                return Promise.all(this._animations.map(a => a.LoadAllTextures(renderer, opts)))
            }
            ReleaseTextures() {
                for (const a of this._animations) a.ReleaseAllTextures()
            }
            OnDynamicTextureLoadComplete() {
                this._UpdateAllCurrentTexture()
            }
            _UpdateAllCurrentTexture() {
                for (const inst of this._objectClass.instancesIncludingPendingCreate()) inst.GetSdkInstance()._UpdateCurrentTexture()
            }
            FinishCondition(doPick) {
                C3.Plugins.Sprite.FinishCollisionCondition(this,
                    doPick)
            }
            BeforeRunAction(method) {
                spawnPickStack.push({
                    objectClass: null,
                    createHierarchy: false,
                    instances: []
                })
            }
            _SpawnPickInstance(objectClass, inst, createHierarchy) {
                const entry = spawnPickStack.at(-1);
                entry.objectClass = objectClass;
                entry.createHierarchy = createHierarchy;
                entry.instances.push(inst)
            }
            AfterRunAction(method) {
                const entry = spawnPickStack.pop();
                const objectClass = entry.objectClass;
                const createHierarchy = entry.createHierarchy;
                if (!objectClass) return;
                const pickMap = new Map;
                for (const inst of entry.instances) inst.CollectInstancesToPick(pickMap,
                    objectClass, createHierarchy);
                for (const [pickObjectClass, instSet] of pickMap) pickObjectClass.GetCurrentSol().SetSetPicked(instSet)
            }
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const INITIALLY_VISIBLE = 0;
        const INITIAL_ANIMATION = 1;
        const INITIAL_FRAME = 2;
        const ENABLE_COLLISIONS = 3;
        const tempRect = C3.New(C3.Rect);
        const tempQuad = C3.New(C3.Quad);
        const tempVec2 = C3.New(C3.Vector2);
        const FLAG_PLAYING_FORWARDS = 1 << 0;
        const FLAG_ANIMATION_PLAYING = 1 << 1;
        const FLAG_ANIMATION_TRIGGER = 1 << 2;
        C3.Plugins.Sprite.Instance = class SpriteInstance extends C3.SDKWorldInstanceBase {
            constructor(inst, properties) {
                super(inst);
                let initiallyVisible = true;
                let initialAnimation =
                    "";
                let initialFrame = 0;
                let collisionEnabled = true;
                if (properties) {
                    initiallyVisible = !!properties[INITIALLY_VISIBLE];
                    initialAnimation = properties[INITIAL_ANIMATION];
                    initialFrame = properties[INITIAL_FRAME];
                    collisionEnabled = properties[ENABLE_COLLISIONS]
                }
                this._currentAnimation = this._objectClass.GetAnimationByName(initialAnimation) || this._objectClass.GetAnimations()[0];
                this._currentFrameIndex = C3.clamp(initialFrame, 0, this._currentAnimation.GetFrameCount() - 1);
                this._currentAnimationFrame = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
                const initialImageInfo = this._currentAnimationFrame.GetImageInfo();
                this._currentTexture = initialImageInfo.GetTexture();
                this._currentRcTex = initialImageInfo.GetTexRect();
                this._currentQuadTex = initialImageInfo.GetTexQuad();
                this.HandleRendererContextLoss();
                inst.SetFlag(FLAG_ANIMATION_PLAYING, true);
                inst.SetFlag(FLAG_PLAYING_FORWARDS, this._currentAnimation.GetSpeed() >= 0);
                this._currentAnimationSpeed = Math.abs(this._currentAnimation.GetSpeed());
                this._currentAnimationRepeatTo = this._currentAnimation.GetRepeatTo();
                this._animationTimer = C3.New(C3.KahanSum);
                this._frameStartTime = 0;
                this._animationRepeats = 0;
                this._animTriggerName = "";
                this._changeAnimFrameIndex = -1;
                this._changeAnimationName = "";
                this._changeAnimationFrom = 0;
                const wi = this.GetWorldInfo();
                this._bquadRef = wi.GetBoundingQuad();
                wi.SetVisible(initiallyVisible);
                wi.SetCollisionEnabled(collisionEnabled);
                wi.SetOriginX(this._currentAnimationFrame.GetOriginX());
                wi.SetOriginY(this._currentAnimationFrame.GetOriginY());
                wi.SetSourceCollisionPoly(this._currentAnimationFrame.GetCollisionPoly());
                wi.SetBboxChanged();
                if ((this._objectClass.GetAnimationCount() !== 1 || this._objectClass.GetAnimations()[0].GetFrameCount() !== 1) && this._currentAnimationSpeed !== 0) this._StartTicking()
            }
            Release() {
                this._currentAnimation = null;
                this._currentAnimationFrame = null;
                this._currentTexture = null;
                this._animationTimer = null;
                super.Release()
            }
            GetCurrentImageInfo() {
                return this._currentAnimationFrame.GetImageInfo()
            }
            IsOriginalSizeKnown() {
                return true
            }
            OnRendererContextLost() {
                this._currentTexture = null
            }
            OnRendererContextRestored() {
                this._UpdateCurrentTexture()
            }
            Draw(renderer) {
                const texture =
                    this._currentTexture;
                if (texture === null) return;
                renderer.SetTexture(texture);
                const wi = this.GetWorldInfo();
                if (wi.HasMesh()) this._DrawMesh(wi, renderer);
                else this._DrawStandard(wi, renderer)
            }
            _DrawStandard(wi, renderer) {
                let quad = this._bquadRef;
                if (this._runtime.IsPixelRoundingEnabled()) quad = wi.PixelRoundQuad(quad);
                renderer.Quad4(quad, this._currentQuadTex)
            }
            _DrawMesh(wi, renderer) {
                const transformedMesh = wi.GetTransformedMesh();
                if (wi.IsMeshChanged()) {
                    wi.CalculateBbox(tempRect, tempQuad, false);
                    let quad = tempQuad;
                    if (this._runtime.IsPixelRoundingEnabled()) quad = wi.PixelRoundQuad(quad);
                    transformedMesh.CalculateTransformedMesh(wi.GetSourceMesh(), quad, this._currentQuadTex);
                    wi.SetMeshChanged(false)
                }
                transformedMesh.Draw(renderer)
            }
            GetAnimationTime() {
                return this._animationTimer.Get()
            }
            IsAnimationPlaying() {
                return this._inst.GetFlag(FLAG_ANIMATION_PLAYING)
            }
            SetAnimationPlaying(e) {
                this._inst.SetFlag(FLAG_ANIMATION_PLAYING, e)
            }
            IsPlayingForwards() {
                return this._inst.GetFlag(FLAG_PLAYING_FORWARDS)
            }
            SetPlayingForwards(e) {
                this._inst.SetFlag(FLAG_PLAYING_FORWARDS,
                    e)
            }
            IsInAnimationTrigger() {
                return this._inst.GetFlag(FLAG_ANIMATION_TRIGGER)
            }
            SetInAnimationTrigger(e) {
                this._inst.SetFlag(FLAG_ANIMATION_TRIGGER, e)
            }
            Tick() {
                if (this._changeAnimationName) this._DoChangeAnimation();
                if (this._changeAnimFrameIndex >= 0) this._DoChangeAnimFrame();
                const currentAnimationSpeed = this._currentAnimationSpeed;
                if (!this.IsAnimationPlaying() || currentAnimationSpeed === 0) {
                    this._StopTicking();
                    return
                }
                const dt = this._runtime.GetDt(this._inst);
                this._animationTimer.Add(dt);
                const now = this.GetAnimationTime();
                const prevFrame = this._currentAnimationFrame;
                const currentFrameTime = prevFrame.GetDuration() / currentAnimationSpeed;
                if (now < this._frameStartTime + currentFrameTime) return;
                const currentAnimation = this._currentAnimation;
                const repeatTo = this._currentAnimationRepeatTo;
                const frameCount = currentAnimation.GetFrameCount();
                const repeatCount = currentAnimation.GetRepeatCount();
                const isLooping = currentAnimation.IsLooping();
                const isPingPong = currentAnimation.IsPingPong();
                if (this.IsPlayingForwards()) this._currentFrameIndex++;
                else this._currentFrameIndex--;
                this._frameStartTime += currentFrameTime;
                if (this._currentFrameIndex >= frameCount)
                    if (isPingPong) {
                        this.SetPlayingForwards(false);
                        this._currentFrameIndex = frameCount - 2
                    } else if (isLooping) this._currentFrameIndex = repeatTo;
                else {
                    this._animationRepeats++;
                    if (this._animationRepeats >= repeatCount) this._FinishAnimation(false);
                    else this._currentFrameIndex = repeatTo
                }
                if (this._currentFrameIndex < 0)
                    if (isPingPong) {
                        this._currentFrameIndex = 1;
                        this.SetPlayingForwards(true);
                        if (!isLooping) {
                            this._animationRepeats++;
                            if (this._animationRepeats >= repeatCount) this._FinishAnimation(true)
                        }
                    } else if (isLooping) this._currentFrameIndex = repeatTo;
                else {
                    this._animationRepeats++;
                    if (this._animationRepeats >= repeatCount) this._FinishAnimation(true);
                    else this._currentFrameIndex = repeatTo
                }
                this._currentFrameIndex = C3.clamp(this._currentFrameIndex, 0, frameCount - 1);
                const nextFrame = currentAnimation.GetFrameAt(this._currentFrameIndex);
                if (now > this._frameStartTime + nextFrame.GetDuration() / currentAnimationSpeed) this._frameStartTime = now;
                this._OnFrameChanged(prevFrame,
                    nextFrame)
            }
            _FinishAnimation(reverse) {
                this._currentFrameIndex = reverse ? 0 : this._currentAnimation.GetFrameCount() - 1;
                this.SetAnimationPlaying(false);
                this._animTriggerName = this._currentAnimation.GetName();
                this.SetInAnimationTrigger(true);
                this.DispatchScriptEvent("animationend", false, {
                    animationName: this._animTriggerName
                });
                this.Trigger(C3.Plugins.Sprite.Cnds.OnAnyAnimFinished);
                this.Trigger(C3.Plugins.Sprite.Cnds.OnAnimFinished);
                this.SetInAnimationTrigger(false);
                this._animationRepeats = 0
            }
            _OnFrameChanged(prevFrame,
                nextFrame, opts) {
                if (prevFrame === nextFrame) return;
                const wi = this.GetWorldInfo();
                const prevImage = prevFrame.GetImageInfo();
                const nextImage = nextFrame.GetImageInfo();
                const oldW = prevImage.GetWidth();
                const oldH = prevImage.GetHeight();
                const newW = nextImage.GetWidth();
                const newH = nextImage.GetHeight();
                if (opts && opts.onFrameChange) opts.onFrameChange(wi, oldW, oldH, newW, newH);
                else {
                    if (oldW !== newW) wi.SetWidth(wi.GetWidth() * (newW / oldW));
                    if (oldH !== newH) wi.SetHeight(wi.GetHeight() * (newH / oldH))
                }
                wi.SetOriginX(nextFrame.GetOriginX());
                wi.SetOriginY(nextFrame.GetOriginY());
                wi.SetSourceCollisionPoly(nextFrame.GetCollisionPoly());
                wi.SetBboxChanged();
                this._currentAnimationFrame = nextFrame;
                this._currentTexture = nextImage.GetTexture();
                this._currentRcTex = nextImage.GetTexRect();
                this._currentQuadTex = nextImage.GetTexQuad();
                const behaviorInstances = this.GetInstance().GetBehaviorInstances();
                for (let i = 0, len = behaviorInstances.length; i < len; ++i) behaviorInstances[i].OnSpriteFrameChanged(prevFrame, nextFrame);
                this.DispatchScriptEvent("framechange",
                    false, {
                        animationName: this._currentAnimation.GetName(),
                        animationFrame: this._currentFrameIndex
                    });
                this.Trigger(C3.Plugins.Sprite.Cnds.OnFrameChanged);
                this._runtime.UpdateRender()
            }
            _StartAnim(from) {
                this.SetAnimationPlaying(true);
                this._frameStartTime = this.GetAnimationTime();
                if (from === 1 && this._currentFrameIndex !== 0) {
                    this._changeAnimFrameIndex = 0;
                    if (!this.IsInAnimationTrigger()) this._DoChangeAnimFrame()
                }
                this._StartTicking()
            }
            _SetAnim(animName, from) {
                this._changeAnimationName = animName;
                this._changeAnimationFrom =
                    from;
                this._StartTicking();
                if (!this.IsInAnimationTrigger()) this._DoChangeAnimation()
            }
            _GetCurrentAnimation() {
                return this._currentAnimation
            }
            _GetCurrentAnimationName() {
                if (this._changeAnimationName) return this._changeAnimationName;
                else return this._currentAnimation.GetName()
            }
            _SetAnimFrame(frameNum) {
                if (!isFinite(frameNum)) return;
                this._changeAnimFrameIndex = frameNum;
                if (!this.IsInAnimationTrigger()) this._DoChangeAnimFrame()
            }
            _GetAnimFrame() {
                return this._currentFrameIndex
            }
            _SetAnimSpeed(s) {
                this._currentAnimationSpeed =
                    Math.abs(s);
                this.SetPlayingForwards(s >= 0);
                if (this._currentAnimationSpeed > 0) this._StartTicking()
            }
            _GetAnimSpeed() {
                return this.IsPlayingForwards() ? this._currentAnimationSpeed : -this._currentAnimationSpeed
            }
            _SetAnimRepeatToFrame(f) {
                f = C3.clamp(Math.floor(f), 0, this._currentAnimation.GetFrameCount() - 1);
                this._currentAnimationRepeatTo = f
            }
            _GetAnimRepeatToFrame() {
                return this._currentAnimationRepeatTo
            }
            _DoChangeAnimation(opts) {
                const prevFrame = this._currentAnimationFrame;
                const animation = this._objectClass.GetAnimationByName(this._changeAnimationName);
                this._changeAnimationName = "";
                if (!animation) return;
                if (animation === this._currentAnimation && this.IsAnimationPlaying()) return;
                this._currentAnimation = animation;
                this.SetPlayingForwards(animation.GetSpeed() >= 0);
                this._currentAnimationSpeed = Math.abs(animation.GetSpeed());
                this._currentAnimationRepeatTo = animation.GetRepeatTo();
                this._currentFrameIndex = C3.clamp(this._currentFrameIndex, 0, this._currentAnimation.GetFrameCount() - 1);
                if (this._changeAnimationFrom === 1) this._currentFrameIndex = 0;
                this.SetAnimationPlaying(true);
                this._frameStartTime = this.GetAnimationTime();
                const nextFrame = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
                this._OnFrameChanged(prevFrame, nextFrame, opts)
            }
            _DoChangeAnimFrame() {
                const prevFrame = this._currentAnimationFrame;
                const prevFrameIndex = this._currentFrameIndex;
                this._currentFrameIndex = C3.clamp(Math.floor(this._changeAnimFrameIndex), 0, this._currentAnimation.GetFrameCount() - 1);
                this._changeAnimFrameIndex = -1;
                if (prevFrameIndex === this._currentFrameIndex) return;
                const nextFrame = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
                this._OnFrameChanged(prevFrame, nextFrame);
                this._frameStartTime = this.GetAnimationTime()
            }
            _UpdateCurrentTexture() {
                const curImageInfo = this._currentAnimationFrame.GetImageInfo();
                this._currentTexture = curImageInfo.GetTexture();
                this._currentRcTex = curImageInfo.GetTexRect();
                this._currentQuadTex = curImageInfo.GetTexQuad();
                this.GetWorldInfo().SetMeshChanged(true)
            }
            GetTexture() {
                return this._currentTexture
            }
            GetTexRect() {
                return this._currentRcTex
            }
            GetTexQuad() {
                return this._currentQuadTex
            }
            GetImagePointCount() {
                return this._currentAnimationFrame.GetImagePointCount()
            }
            GetImagePoint(nameOrIndex) {
                const frame =
                    this._currentAnimationFrame;
                const wi = this.GetWorldInfo();
                let ip = null;
                if (typeof nameOrIndex === "string") ip = frame.GetImagePointByName(nameOrIndex);
                else if (typeof nameOrIndex === "number") ip = frame.GetImagePointByIndex(nameOrIndex - 1);
                else throw new TypeError("expected string or number");
                let ptZ = wi.GetTotalZElevation();
                if (!ip) return [wi.GetX(), wi.GetY(), ptZ];
                tempVec2.copy(ip.GetVec2());
                if (wi.HasMesh()) {
                    const [tx, ty, tz] = wi.GetSourceMesh().TransformPoint(tempVec2.getX(), tempVec2.getY());
                    tempVec2.set(tx, ty);
                    ptZ += tz
                }
                tempVec2.offset(-frame.GetOriginX(), -frame.GetOriginY());
                tempVec2.scale(wi.GetWidth(), wi.GetHeight());
                tempVec2.rotate(wi.GetAngle());
                tempVec2.offset(wi.GetX(), wi.GetY());
                return [tempVec2.getX(), tempVec2.getY(), ptZ]
            }
            GetCollisionPolyPointCount() {
                return this.GetWorldInfo().GetTransformedCollisionPoly().pointCount()
            }
            GetCollisionPolyPoint(index) {
                index = Math.floor(index);
                const wi = this.GetWorldInfo();
                const poly = wi.GetTransformedCollisionPoly();
                const pointCount = poly.pointCount();
                if (index === pointCount) index =
                    0;
                if (index < 0 || index >= pointCount) return [0, 0];
                const pointsArr = poly.pointsArr();
                return [pointsArr[index * 2 + 0] + wi.GetX(), pointsArr[index * 2 + 1] + wi.GetY()]
            }
            GetDebuggerProperties() {
                const Acts = C3.Plugins.Sprite.Acts;
                const prefix = "plugins.sprite.debugger.animation-properties";
                return [{
                    title: prefix + ".title",
                    properties: [{
                        name: prefix + ".current-animation",
                        value: this._currentAnimation.GetName(),
                        onedit: v => this.CallAction(Acts.SetAnim, v, 0)
                    }, {
                        name: prefix + ".current-frame",
                        value: this._currentFrameIndex,
                        onedit: v => this.CallAction(Acts.SetAnimFrame,
                            v)
                    }, {
                        name: prefix + ".is-playing",
                        value: this.IsAnimationPlaying(),
                        onedit: v => v ? this.CallAction(Acts.StartAnim, 0) : this.CallAction(Acts.StopAnim)
                    }, {
                        name: prefix + ".speed",
                        value: this._currentAnimationSpeed,
                        onedit: v => this.CallAction(Acts.SetAnimSpeed, v)
                    }, {
                        name: prefix + ".repeats",
                        value: this._animationRepeats,
                        onedit: v => this._animationRepeats = v
                    }]
                }]
            }
            SaveToJson() {
                const o = {
                    "a": this._currentAnimation.GetSID()
                };
                if (this._frameStartTime !== 0) o["fs"] = this._frameStartTime;
                const animTime = this.GetAnimationTime();
                if (animTime !==
                    0) o["at"] = animTime;
                if (this._currentFrameIndex !== 0) o["f"] = this._currentFrameIndex;
                if (this._currentAnimationSpeed !== 0) o["cas"] = this._currentAnimationSpeed;
                if (this._animationRepeats !== 1) o["ar"] = this._animationRepeats;
                if (this._currentAnimationRepeatTo !== 0) o["rt"] = this._currentAnimationRepeatTo;
                if (!this.IsAnimationPlaying()) o["ap"] = this.IsAnimationPlaying();
                if (!this.IsPlayingForwards()) o["af"] = this.IsPlayingForwards();
                const wi = this.GetWorldInfo();
                if (wi.IsCollisionEnabled()) o["ce"] = wi.IsCollisionEnabled();
                return o
            }
            LoadFromJson(o) {
                const anim = this.GetObjectClass().GetAnimationBySID(o["a"]);
                if (anim) this._currentAnimation = anim;
                this._frameStartTime = o.hasOwnProperty("fs") ? o["fs"] : 0;
                this._animationTimer.Set(o.hasOwnProperty("at") ? o["at"] : 0);
                const frameIndex = o.hasOwnProperty("f") ? o["f"] : 0;
                this._currentFrameIndex = C3.clamp(frameIndex, 0, this._currentAnimation.GetFrameCount() - 1);
                this._currentAnimationSpeed = o.hasOwnProperty("cas") ? o["cas"] : 0;
                this._animationRepeats = o.hasOwnProperty("ar") ? o["ar"] : 1;
                const repeatToIndex =
                    o.hasOwnProperty("rt") ? o["rt"] : 0;
                this._currentAnimationRepeatTo = C3.clamp(repeatToIndex, 0, this._currentAnimation.GetFrameCount() - 1);
                this.SetAnimationPlaying(o.hasOwnProperty("ap") ? !!o["ap"] : true);
                this.SetPlayingForwards(o.hasOwnProperty("af") ? !!o["af"] : true);
                const nextFrame = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
                this._currentAnimationFrame = nextFrame;
                this._UpdateCurrentTexture();
                const wi = this.GetWorldInfo();
                wi.SetOriginX(nextFrame.GetOriginX());
                wi.SetOriginY(nextFrame.GetOriginY());
                wi.SetSourceCollisionPoly(nextFrame.GetCollisionPoly());
                wi.SetCollisionEnabled(!!o["ce"]);
                if (this.IsAnimationPlaying()) this._StartTicking()
            }
            GetPropertyValueByIndex(index) {
                const wi = this.GetWorldInfo();
                switch (index) {
                    case ENABLE_COLLISIONS:
                        return wi.IsCollisionEnabled();
                    case INITIAL_FRAME:
                        return C3.clamp(this._currentFrameIndex, 0, this._currentAnimation.GetFrameCount() - 1);
                    case INITIAL_ANIMATION:
                        return this._currentAnimation.GetName()
                }
            }
            SetPropertyValueByIndex(index, value, opts) {
                const wi = this.GetWorldInfo();
                switch (index) {
                    case ENABLE_COLLISIONS:
                        wi.SetCollisionEnabled(!!value);
                        break;
                    case INITIAL_FRAME:
                        this.SetAnimationPlaying(false);
                        const totalFrames = this._currentAnimation.GetFrameCount() - 1;
                        const nextIndex = value = C3.clamp(value, 0, totalFrames);
                        const prevFrame = this._currentAnimation.GetFrameAt(this._currentFrameIndex);
                        const nextFrame = this._currentAnimation.GetFrameAt(nextIndex);
                        this._OnFrameChanged(prevFrame, nextFrame, opts);
                        this._currentFrameIndex = C3.clamp(nextIndex, 0, totalFrames);
                        break;
                    case INITIAL_ANIMATION:
                        this._changeAnimationName =
                            value;
                        this._DoChangeAnimation(opts);
                        break
                }
            }
            GetScriptInterfaceClass() {
                return self.ISpriteInstance
            }
        };
        const map = new WeakMap;
        const ANIM_FROM_MODES = new Map([
            ["current-frame", 0],
            ["beginning", 1]
        ]);
        self.ISpriteInstance = class ISpriteInstance extends self.IWorldInstance {
            constructor() {
                super();
                map.set(this, self.IInstance._GetInitInst().GetSdkInstance())
            }
            getImagePointCount() {
                return map.get(this).GetImagePointCount()
            }
            getImagePointX(nameOrIndex) {
                return this.getImagePoint(nameOrIndex)[0]
            }
            getImagePointY(nameOrIndex) {
                return this.getImagePoint(nameOrIndex)[1]
            }
            getImagePointZ(nameOrIndex) {
                return this.getImagePoint(nameOrIndex)[2]
            }
            getImagePoint(nameOrIndex) {
                if (typeof nameOrIndex !==
                    "string" && typeof nameOrIndex !== "number") throw new TypeError("expected string or number");
                return map.get(this).GetImagePoint(nameOrIndex)
            }
            getPolyPointCount() {
                return map.get(this).GetCollisionPolyPointCount()
            }
            getPolyPointX(index) {
                C3X.RequireFiniteNumber(index);
                return map.get(this).GetCollisionPolyPoint(index)[0]
            }
            getPolyPointY(index) {
                C3X.RequireFiniteNumber(index);
                return map.get(this).GetCollisionPolyPoint(index)[1]
            }
            getPolyPoint(index) {
                C3X.RequireFiniteNumber(index);
                return map.get(this).GetCollisionPolyPoint(index)
            }
            stopAnimation() {
                map.get(this).SetAnimationPlaying(false)
            }
            startAnimation(from =
                "current-frame") {
                C3X.RequireString(from);
                const f = ANIM_FROM_MODES.get(from);
                if (typeof f === "undefined") throw new Error("invalid mode");
                map.get(this)._StartAnim(f)
            }
            setAnimation(name, from = "beginning") {
                C3X.RequireString(name);
                C3X.RequireString(from);
                const f = ANIM_FROM_MODES.get(from);
                if (typeof f === "undefined") throw new Error("invalid mode");
                const inst = map.get(this);
                if (!inst.GetObjectClass().GetAnimationByName(name)) throw new Error(`animation name "${name}" does not exist`);
                inst._SetAnim(name, f)
            }
            getAnimation(name) {
                C3X.RequireString(name);
                const a = map.get(this).GetObjectClass().GetAnimationByName(name);
                return a ? a.GetIAnimation() : null
            }
            get animation() {
                return map.get(this)._GetCurrentAnimation().GetIAnimation()
            }
            get animationName() {
                return map.get(this)._GetCurrentAnimationName()
            }
            set animationFrame(frameIndex) {
                C3X.RequireFiniteNumber(frameIndex);
                map.get(this)._SetAnimFrame(frameIndex)
            }
            get animationFrame() {
                return map.get(this)._GetAnimFrame()
            }
            set animationSpeed(s) {
                C3X.RequireFiniteNumber(s);
                map.get(this)._SetAnimSpeed(s)
            }
            get animationSpeed() {
                return map.get(this)._GetAnimSpeed()
            }
            set animationRepeatToFrame(f) {
                C3X.RequireFiniteNumber(f);
                map.get(this)._SetAnimRepeatToFrame(f)
            }
            get animationRepeatToFrame() {
                return map.get(this)._GetAnimRepeatToFrame()
            }
            get imageWidth() {
                return map.get(this).GetCurrentImageInfo().GetWidth()
            }
            get imageHeight() {
                return map.get(this).GetCurrentImageInfo().GetHeight()
            }
            getImageSize() {
                const imageInfo = map.get(this).GetCurrentImageInfo();
                return [imageInfo.GetWidth(), imageInfo.GetHeight()]
            }
            async replaceCurrentAnimationFrame(blob) {
                C3X.RequireInstanceOf(blob, Blob);
                const sdkInst = map.get(this);
                const runtime = sdkInst.GetRuntime();
                const curImageInfo = sdkInst.GetCurrentImageInfo();
                const imageInfo = C3.New(C3.ImageInfo);
                imageInfo.LoadDynamicBlobAsset(runtime, blob);
                await imageInfo.LoadStaticTexture(runtime.GetRenderer(), {
                    sampling: runtime.GetSampling()
                });
                if (sdkInst.WasReleased()) {
                    imageInfo.Release();
                    return
                }
                curImageInfo.ReplaceWith(imageInfo);
                sdkInst.GetSdkType()._UpdateAllCurrentTexture();
                runtime.UpdateRender()
            }
            setSolidCollisionFilter(isInclusive, tags) {
                C3X.RequireString(tags);
                map.get(this).GetWorldInfo().SetSolidCollisionFilter(!!isInclusive,
                    tags)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Sprite.Cnds = {
            IsAnimPlaying(animName) {
                return C3.equalsNoCase(this._GetCurrentAnimationName(), animName)
            },
            CompareFrame(cmp, frameNum) {
                return C3.compare(this._currentFrameIndex, cmp, frameNum)
            },
            CompareAnimSpeed(cmp, x) {
                return C3.compare(this._GetAnimSpeed(), cmp, x)
            },
            OnAnimFinished(animName) {
                return C3.equalsNoCase(this._animTriggerName, animName)
            },
            OnAnyAnimFinished() {
                return true
            },
            OnFrameChanged() {
                return true
            },
            IsMirrored() {
                return this.GetWorldInfo().GetWidth() < 0
            },
            IsFlipped() {
                return this.GetWorldInfo().GetHeight() < 0
            },
            OnURLLoaded() {
                return true
            },
            OnURLFailed() {
                return true
            },
            IsCollisionEnabled() {
                return this.GetWorldInfo().IsCollisionEnabled()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Sprite.Acts = {
            Spawn(objectClass, layer, imgPt, createHierarchy) {
                if (!objectClass || !layer) return;
                const [imgPtX, imgPtY] = this.GetImagePoint(imgPt);
                const inst = this._runtime.CreateInstance(objectClass, layer, imgPtX, imgPtY, createHierarchy);
                if (!inst) return;
                if (createHierarchy) layer.SortAndAddInstancesByZIndex(inst);
                if (objectClass.GetPlugin().IsRotatable()) {
                    const instWi = inst.GetWorldInfo();
                    instWi.SetAngle(this.GetWorldInfo().GetAngle());
                    instWi.SetBboxChanged()
                }
                const eventSheetManager =
                    this._runtime.GetEventSheetManager();
                eventSheetManager.BlockFlushingInstances(true);
                inst._TriggerOnCreatedOnSelfAndRelated();
                eventSheetManager.BlockFlushingInstances(false);
                if (objectClass !== this.GetObjectClass()) this._sdkType._SpawnPickInstance(objectClass, inst, createHierarchy)
            },
            StopAnim() {
                this.SetAnimationPlaying(false)
            },
            StartAnim(from) {
                this._StartAnim(from)
            },
            SetAnim(animName, from) {
                this._SetAnim(animName, from)
            },
            SetAnimFrame(frameNum) {
                this._SetAnimFrame(frameNum)
            },
            SetAnimSpeed(s) {
                this._SetAnimSpeed(s)
            },
            SetAnimRepeatToFrame(f) {
                this._SetAnimRepeatToFrame(f)
            },
            SetMirrored(m) {
                const wi = this.GetWorldInfo();
                const oldW = wi.GetWidth();
                const newW = Math.abs(oldW) * (m === 0 ? -1 : 1);
                if (oldW === newW) return;
                wi.SetWidth(newW);
                wi.SetBboxChanged()
            },
            SetFlipped(f) {
                const wi = this.GetWorldInfo();
                const oldH = wi.GetHeight();
                const newH = Math.abs(oldH) * (f === 0 ? -1 : 1);
                if (oldH === newH) return;
                wi.SetHeight(newH);
                wi.SetBboxChanged()
            },
            SetScale(s) {
                const frame = this._currentAnimationFrame;
                const imageInfo = frame.GetImageInfo();
                const wi = this.GetWorldInfo();
                const mirrorFactor = wi.GetWidth() < 0 ? -1 : 1;
                const flipFactor = wi.GetHeight() < 0 ? -1 : 1;
                const newWidth = imageInfo.GetWidth() * s * mirrorFactor;
                const newHeight = imageInfo.GetHeight() * s * flipFactor;
                if (wi.GetWidth() !== newWidth || wi.GetHeight() !== newHeight) {
                    wi.SetSize(newWidth, newHeight);
                    wi.SetBboxChanged()
                }
            },
            async LoadURL(url, resize, crossOrigin) {
                const curAnimFrame = this._currentAnimationFrame;
                const curImageInfo = curAnimFrame.GetImageInfo();
                const wi = this.GetWorldInfo();
                const runtime = this._runtime;
                const sdkType = this._sdkType;
                if (curImageInfo.GetURL() === url) {
                    if (resize === 0) {
                        wi.SetSize(curImageInfo.GetWidth(), curImageInfo.GetHeight());
                        wi.SetBboxChanged()
                    }
                    this.Trigger(C3.Plugins.Sprite.Cnds.OnURLLoaded);
                    return
                }
                const imageInfo = C3.New(C3.ImageInfo);
                try {
                    await imageInfo.LoadDynamicAsset(runtime, url);
                    if (!imageInfo.IsLoaded()) throw new Error("image failed to load");
                    if (this.WasReleased()) {
                        imageInfo.Release();
                        return
                    }
                    await imageInfo.LoadStaticTexture(runtime.GetRenderer(), {
                        sampling: runtime.GetSampling()
                    })
                } catch (err) {
                    console.error("Load image from URL failed: ",
                        err);
                    if (!this.WasReleased()) this.Trigger(C3.Plugins.Sprite.Cnds.OnURLFailed);
                    return
                }
                if (this.WasReleased()) {
                    imageInfo.Release();
                    return
                }
                curImageInfo.ReplaceWith(imageInfo);
                sdkType._UpdateAllCurrentTexture();
                runtime.UpdateRender();
                if (resize === 0) {
                    wi.SetSize(curImageInfo.GetWidth(), curImageInfo.GetHeight());
                    wi.SetBboxChanged()
                }
                await this.TriggerAsync(C3.Plugins.Sprite.Cnds.OnURLLoaded)
            },
            SetCollisions(e) {
                this.GetWorldInfo().SetCollisionEnabled(e)
            },
            SetSolidCollisionFilter(mode, tags) {
                this.GetWorldInfo().SetSolidCollisionFilter(mode ===
                    0, tags)
            },
            SetEffect(effect) {
                this.GetWorldInfo().SetBlendMode(effect);
                this._runtime.UpdateRender()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Sprite.Exps = {
            AnimationFrame() {
                return this._currentFrameIndex
            },
            AnimationFrameCount() {
                return this._currentAnimation.GetFrameCount()
            },
            AnimationName() {
                return this._currentAnimation.GetName()
            },
            AnimationSpeed() {
                return this._GetAnimSpeed()
            },
            OriginalAnimationSpeed() {
                return this._currentAnimation.GetSpeed()
            },
            ImagePointX(imgpt) {
                return this.GetImagePoint(imgpt)[0]
            },
            ImagePointY(imgpt) {
                return this.GetImagePoint(imgpt)[1]
            },
            ImagePointZ(imgpt) {
                return this.GetImagePoint(imgpt)[2]
            },
            ImagePointCount() {
                return this.GetImagePointCount()
            },
            ImageWidth() {
                return this.GetCurrentImageInfo().GetWidth()
            },
            ImageHeight() {
                return this.GetCurrentImageInfo().GetHeight()
            },
            PolyPointXAt(i) {
                return this.GetCollisionPolyPoint(i)[0]
            },
            PolyPointYAt(i) {
                return this.GetCollisionPolyPoint(i)[1]
            },
            PolyPointCount() {
                return this.GetCollisionPolyPointCount()
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Plugins.Particles = class ParticlesPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Particles.Type = class ParticlesType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass)
            }
            Release() {
                super.Release()
            }
            OnCreate() {
                this.GetImageInfo().LoadAsset(this._runtime)
            }
            LoadTextures(renderer) {
                return this.GetImageInfo().LoadStaticTexture(renderer, {
                    sampling: this._runtime.GetSampling()
                })
            }
            ReleaseTextures() {
                this.GetImageInfo().ReleaseTexture()
            }
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const RATE = 0;
        const SPRAY_CONE = 1;
        const TYPE = 2;
        const SPAWNOBJECTCLASS = 3;
        const INITIALLY_VISIBLE = 4;
        const SPEED = 5;
        const SIZE = 6;
        const OPACITY = 7;
        const GROW_RATE = 8;
        const X_RANDOMISER = 9;
        const Y_RANDOMISER = 10;
        const INITIAL_SPEED_RANDOMISER = 11;
        const SIZE_RANDOMISER = 12;
        const GROW_RATE_RANDOMISER = 13;
        const ACCELERATION = 14;
        const GRAVITY = 15;
        const ANGLE_RANDOMISER = 16;
        const LIFE_SPEED_RANDOMISER = 17;
        const OPACITY_RANDOMISER = 18;
        const DESTROY_MODE = 19;
        const TIMEOUT = 20;
        const CONTINUOUS =
            0;
        const ONE_SHOT = 1;
        const tempRect = C3.New(C3.Rect);
        C3.Plugins.Particles.Instance = class ParticlesInstance extends C3.SDKWorldInstanceBase {
            constructor(inst, properties) {
                super(inst);
                this._isFirstTick = true;
                const pe = C3.New(self.ParticleEngine);
                this._particleEngine = pe;
                pe.ononeshotfinish = () => this._OnOneShotFinish();
                this._spawnObjectClass = null;
                this._particleUpdateCallback = (inst, dx, dy, dSize, dAngle, dOpacity) => this._OnParticleUpdate(inst, dx, dy, dSize, dAngle, dOpacity);
                this._particleDestroyCallback = inst => this._OnParticleDestroy(inst);
                this._hasAnyDefaultParticle = true;
                let isInitiallyVisible = true;
                if (properties) {
                    pe.SetRate(properties[RATE]);
                    pe.SetSprayCone(C3.toRadians(properties[SPRAY_CONE]));
                    pe.SetSprayType(properties[TYPE] ? "one-shot" : "continuous-spray");
                    this._SetParticleObjectClass(this._runtime.GetObjectClassBySID(properties[SPAWNOBJECTCLASS]));
                    isInitiallyVisible = properties[INITIALLY_VISIBLE];
                    pe.SetInitSpeed(properties[SPEED]);
                    pe.SetInitSize(properties[SIZE]);
                    pe.SetInitOpacity(properties[OPACITY] / 100);
                    pe.SetGrowRate(properties[GROW_RATE]);
                    pe.SetInitXRandom(properties[X_RANDOMISER]);
                    pe.SetInitYRandom(properties[Y_RANDOMISER]);
                    pe.SetInitSpeedRandom(properties[INITIAL_SPEED_RANDOMISER]);
                    pe.SetInitSizeRandom(properties[SIZE_RANDOMISER]);
                    pe.SetGrowRandom(properties[GROW_RATE_RANDOMISER]);
                    pe.SetAcceleration(properties[ACCELERATION]);
                    pe.SetGravity(properties[GRAVITY]);
                    pe.SetLifeAngleRandom(properties[ANGLE_RANDOMISER]);
                    pe.SetLifeSpeedRandom(properties[LIFE_SPEED_RANDOMISER]);
                    pe.SetLifeOpacityRandom(properties[OPACITY_RANDOMISER]);
                    pe.SetDestroyModeIndex(properties[DESTROY_MODE]);
                    pe.SetTimeout(properties[TIMEOUT])
                }
                this._UpdateEngineParameters();
                if (this._spawnObjectClass) this._hasAnyDefaultParticle = false;
                if (pe.GetSprayType() === "one-shot") pe.CreateOneShotSpray();
                else pe.SetSpraying(true);
                const wi = this.GetWorldInfo();
                wi.SetVisible(isInitiallyVisible);
                wi.SetBboxChangeEventEnabled(true);
                this._inst.Dispatcher().addEventListener("bboxchange", () => {
                    wi.OverwriteBoundingBox(this._particleEngine.GetBoundingBox())
                });
                if (this.GetRuntime().GetRenderer().IsWebGPU()) wi.SetUsePointsShaderProgram();
                this._afterLoad = e => this._OnAfterLoad(e);
                this.GetRuntime().Dispatcher().addEventListener("afterload", this._afterLoad);
                this._StartTicking()
            }
            Release() {
                this.GetRuntime().Dispatcher().removeEventListener("afterload", this._afterLoad);
                this._afterLoad = null;
                this._particleEngine.Release();
                this._particleEngine = null;
                this._particleUpdateCallback = null;
                this._particleDestroyCallback = null;
                super.Release()
            }
            GetParticleEngine() {
                return this._particleEngine
            }
            _SetRate(r) {
                this._particleEngine.SetRate(r);
                if (this._particleEngine.GetSprayType() ===
                    "one-shot" && this._isFirstTick) this._particleEngine.SetParticleCount(r)
            }
            _SetParticleObjectClass(objectClass) {
                if (objectClass === this.GetObjectClass()) objectClass = null;
                if (objectClass === this._spawnObjectClass) return;
                this._spawnObjectClass = objectClass;
                this._particleEngine.onparticlecreate = objectClass ? p => this._OnParticleCreate(p) : null;
                if (!this._spawnObjectClass) this._hasAnyDefaultParticle = true
            }
            _UpdateEngineParameters() {
                const pe = this._particleEngine;
                const wi = this.GetWorldInfo();
                pe.SetMasterOpacity(wi.GetOpacity());
                pe.SetPixelRounding(this._runtime.IsPixelRoundingEnabled());
                pe.SetSpawnX(wi.GetX());
                pe.SetSpawnY(wi.GetY());
                pe.SetSpawnAngle(wi.GetAngle());
                pe.SetInitSizeScale(Math.abs(wi.GetSceneGraphScale()))
            }
            _OnOneShotFinish() {
                this._runtime.DestroyInstance(this._inst)
            }
            Draw(renderer) {
                if (!this._hasAnyDefaultParticle) return;
                const imageInfo = this._objectClass.GetImageInfo();
                const texture = imageInfo.GetTexture();
                if (!texture) return;
                const wi = this.GetWorldInfo();
                const layer = wi.GetLayer();
                const viewport = tempRect;
                if (this._runtime.GetCanvasManager().IsPastingToDrawingCanvas()) viewport.set(-Infinity, -Infinity, Infinity, Infinity);
                else if (layer.Has3DCamera()) layer.CalculateViewport3D(wi.GetTotalZElevation(), viewport);
                else layer.GetViewportForZ(wi.GetTotalZElevation(), viewport);
                renderer.SetTexture(texture);
                const zScaleFactor = layer.Get2DScaleFactorToZ(wi.GetTotalZElevation());
                this._particleEngine.SetParticleScale(layer.GetRenderScale() * zScaleFactor);
                this._particleEngine.Draw(renderer, imageInfo.GetTexQuad(), viewport, layer.Has3DCamera())
            }
            SaveToJson() {
                const pe = this._particleEngine;
                return {
                    "r": pe.GetRate(),
                    "sc": pe.GetSprayCone(),
                    "st": pe.GetSprayType(),
                    "isp": pe.GetInitSpeed(),
                    "isz": pe.GetInitSize(),
                    "io": pe.GetInitOpacity(),
                    "gr": pe.GetGrowRate(),
                    "xr": pe.GetInitXRandom(),
                    "yr": pe.GetInitYRandom(),
                    "spr": pe.GetInitSpeedRandom(),
                    "szr": pe.GetInitSizeRandom(),
                    "grnd": pe.GetGrowRandom(),
                    "acc": pe.GetAcceleration(),
                    "g": pe.GetGravity(),
                    "lar": pe.GetLifeAngleRandom(),
                    "lsr": pe.GetLifeSpeedRandom(),
                    "lor": pe.GetLifeOpacityRandom(),
                    "dm": pe.GetDestroyModeIndex(),
                    "to": pe.GetTimeout(),
                    "s": pe.IsSpraying(),
                    "pcc": pe._GetCreateCounter(),
                    "ft": this._isFirstTick,
                    "soc": this._spawnObjectClass ? this._spawnObjectClass.GetSID() : null,
                    "p": pe.GetParticles().map(p => p.toJSON())
                }
            }
            LoadFromJson(o, mode) {
                const pe = this._particleEngine;
                pe.SetRate(o["r"]);
                pe.SetSprayCone(o["sc"]);
                pe.SetSprayType(o["st"]);
                pe.SetInitSpeed(o["isp"]);
                pe.SetInitSize(o["isz"]);
                pe.SetInitOpacity(o["io"]);
                pe.SetGrowRate(o["gr"]);
                pe.SetInitXRandom(o["xr"]);
                pe.SetInitYRandom(o["yr"]);
                pe.SetInitSpeedRandom(o["spr"]);
                pe.SetInitSizeRandom(o["szr"]);
                pe.SetGrowRandom(o["grnd"]);
                pe.SetAcceleration(o["acc"]);
                pe.SetGravity(o["g"]);
                pe.SetLifeAngleRandom(o["lar"]);
                pe.SetLifeSpeedRandom(o["lsr"]);
                pe.SetLifeOpacityRandom(o["lor"]);
                pe.SetDestroyModeIndex(o["dm"]);
                pe.SetTimeout(o["to"]);
                pe.SetSpraying(o["s"]);
                pe._SetCreateCounter(o["pcc"]);
                this._isFirstTick = o["ft"];
                if (o.hasOwnProperty("soc")) {
                    const objectClass = this.GetRuntime().GetObjectClassBySID(o["soc"]);
                    if (objectClass) this._SetParticleObjectClass(objectClass)
                }
                const particlesData = o["p"];
                pe.SetParticleCount(particlesData.length);
                const particles = pe.GetParticles();
                for (let i = 0, len = particles.length; i < len; ++i) particles[i].setFromJSON(particlesData[i]);
                if (mode === "state" && this._spawnObjectClass) {
                    pe.UpdateAllParticlesUserData();
                    pe.ApplyParticleDataToUserData(this)
                }
            }
            _OnAfterLoad() {
                const pe = this._particleEngine;
                pe.UpdateAllParticlesUserData();
                pe.ApplyParticleDataToUserData(this);
                if (pe.GetSprayType() !== "one-shot") return;
                const particles = pe.GetParticles();
                for (let i = 0, len = particles.length; i < len; ++i) {
                    const particle = particles[i];
                    const currentUserData = particle.GetUserData();
                    if (!currentUserData) continue;
                    const worldInfo = currentUserData.GetWorldInfo();
                    if (!worldInfo) continue;
                    const instance = worldInfo.GetInstance();
                    if (!instance) continue;
                    const savedUid = particle.GetUserDataUID();
                    const currentUid = instance.GetUID();
                    if (typeof savedUid === "number" && typeof currentUid === "number" && savedUid === currentUid) continue;
                    const runtime = this.GetRuntime();
                    const inst = runtime.GetInstanceByUID(savedUid);
                    if (inst) runtime.DestroyInstance(inst)
                }
            }
            Tick() {
                const dt = this._runtime.GetDt(this._inst);
                this._UpdateEngineParameters();
                if (this._isFirstTick && this._particleEngine.GetSprayType() === "one-shot") this._particleEngine.ReInitAllParticles();
                this._particleEngine.Tick(dt);
                if (this._particleEngine.IsSpraying()) this._runtime.UpdateRender();
                this.GetWorldInfo().SetBboxChanged();
                this._isFirstTick = false
            }
            _FastForward(time) {
                const FF_DT = 1 / 60;
                if (this._isFirstTick && this._particleEngine.GetSprayType() === "one-shot") this._particleEngine.ReInitAllParticles();
                while (time > 0) {
                    this._particleEngine.Tick(FF_DT);
                    time -= FF_DT
                }
                if (this._particleEngine.IsSpraying()) this._runtime.UpdateRender();
                this.GetWorldInfo().SetBboxChanged();
                this._isFirstTick = false
            }
            _OnParticleCreate(p) {
                const inst = this._runtime.CreateInstance(this._spawnObjectClass, this.GetWorldInfo().GetLayer(), p.GetX(), p.GetY());
                const wi = inst.GetWorldInfo();
                wi.SetSize(p.GetSize(), p.GetSize());
                wi.SetAngle(p.GetAngle());
                wi.SetOpacity(p.GetOpacity());
                wi.SetUnpremultipliedColor(this.GetWorldInfo().GetUnpremultipliedColor());
                wi.SetBboxChanged();
                wi.ZOrderMoveAdjacentToInstance(this.GetInstance(), true);
                inst._TriggerOnCreated();
                p.SetUpdateCallback(this._particleUpdateCallback);
                p.SetDestroyCallback(this._particleDestroyCallback);
                return inst
            }
            _OnParticleUpdate(inst, dx, dy, dSize, dAngle, dOpacity) {
                if (inst.IsDestroyed()) return;
                const wi = inst.GetWorldInfo();
                wi.OffsetXY(dx, dy);
                wi.SetSize(wi.GetWidth() + dSize, wi.GetHeight() + dSize);
                wi.SetAngle(wi.GetAngle() + dAngle);
                wi.SetOpacity(wi.GetOpacity() + dOpacity);
                wi.SetBboxChanged()
            }
            _OnParticleDestroy(inst) {
                if (inst.IsDestroyed()) return;
                this._runtime.DestroyInstance(inst)
            }
            GetPropertyValueByIndex(index) {
                const pe = this._particleEngine;
                switch (index) {
                    case RATE:
                        return pe.GetRate();
                    case SPRAY_CONE:
                        return C3.toDegrees(pe.GetSprayCone());
                    case TYPE:
                        return pe.GetSprayType() === "one-shot" ? ONE_SHOT : CONTINUOUS;
                    case SPEED:
                        return pe.GetInitSpeed();
                    case SIZE:
                        return pe.GetInitSize();
                    case OPACITY:
                        return pe.GetInitOpacity() * 100;
                    case GROW_RATE:
                        return pe.GetGrowRate();
                    case X_RANDOMISER:
                        return pe.GetInitXRandom();
                    case Y_RANDOMISER:
                        return pe.GetInitYRandom();
                    case INITIAL_SPEED_RANDOMISER:
                        return pe.GetInitSpeedRandom();
                    case SIZE_RANDOMISER:
                        return pe.GetInitSizeRandom();
                    case GROW_RATE_RANDOMISER:
                        return pe.GetGrowRandom();
                    case ACCELERATION:
                        return pe.GetAcceleration();
                    case GRAVITY:
                        return pe.GetGravity();
                    case ANGLE_RANDOMISER:
                        return pe.GetLifeAngleRandom();
                    case LIFE_SPEED_RANDOMISER:
                        return pe.GetLifeSpeedRandom();
                    case OPACITY_RANDOMISER:
                        return pe.GetLifeOpacityRandom();
                    case DESTROY_MODE:
                        return pe.GetDestroyModeIndex();
                    case TIMEOUT:
                        return pe.GetTimeout()
                }
            }
            SetPropertyValueByIndex(index, value) {
                const pe = this._particleEngine;
                switch (index) {
                    case RATE:
                        pe.SetRate(value);
                        break;
                    case SPRAY_CONE:
                        pe.SetSprayCone(C3.toRadians(value));
                        break;
                    case TYPE:
                        pe.SetSprayType(value ? "one-shot" : "continuous-spray");
                        break;
                    case SPEED:
                        pe.SetInitSpeed(value);
                        break;
                    case SIZE:
                        pe.SetInitSize(value);
                        break;
                    case OPACITY:
                        pe.SetInitOpacity(value / 100);
                        break;
                    case GROW_RATE:
                        pe.SetGrowRate(value);
                        break;
                    case X_RANDOMISER:
                        pe.SetInitXRandom(value);
                        break;
                    case Y_RANDOMISER:
                        pe.SetInitYRandom(value);
                        break;
                    case INITIAL_SPEED_RANDOMISER:
                        pe.SetInitSpeedRandom(value);
                        break;
                    case SIZE_RANDOMISER:
                        pe.SetInitSizeRandom(value);
                        break;
                    case GROW_RATE_RANDOMISER:
                        pe.SetGrowRandom(value);
                        break;
                    case ACCELERATION:
                        pe.SetAcceleration(value);
                        break;
                    case GRAVITY:
                        pe.SetGravity(value);
                        break;
                    case ANGLE_RANDOMISER:
                        pe.SetLifeAngleRandom(value);
                        break;
                    case LIFE_SPEED_RANDOMISER:
                        pe.SetLifeSpeedRandom(value);
                        break;
                    case OPACITY_RANDOMISER:
                        pe.SetLifeOpacityRandom(value);
                        break;
                    case DESTROY_MODE:
                        pe.SetDestroyModeIndex(value);
                        break;
                    case TIMEOUT:
                        pe.SetTimeout(value);
                        break
                }
            }
            GetDebuggerProperties() {
                const prefix = "plugins.particles";
                const propPrefix = prefix + ".properties";
                const dbgPrefix = prefix + ".debugger";
                const pe = this._particleEngine;
                return [{
                    title: prefix + ".name",
                    properties: [{
                            name: dbgPrefix + ".particle-count",
                            value: pe.GetParticleCount()
                        }, {
                            name: propPrefix + ".type.name",
                            value: [propPrefix + ".type.items." + pe.GetSprayType()]
                        }, {
                            name: dbgPrefix + ".is-spraying",
                            value: pe.IsSpraying(),
                            onedit: v => pe.SetSpraying(v)
                        }, {
                            name: propPrefix + ".rate.name",
                            value: pe.GetRate(),
                            onedit: v => pe.SetRate(v)
                        }, {
                            name: propPrefix + ".spray-cone.name",
                            value: C3.toDegrees(pe.GetSprayCone()),
                            onedit: v => pe.SetSprayCone(C3.toRadians(v))
                        }, {
                            name: propPrefix +
                                ".speed.name",
                            value: pe.GetInitSpeed(),
                            onedit: v => pe.SetInitSpeed(v)
                        }, {
                            name: propPrefix + ".size.name",
                            value: pe.GetInitSize(),
                            onedit: v => pe.SetInitSize(v)
                        }, {
                            name: propPrefix + ".opacity.name",
                            value: pe.GetInitOpacity(),
                            onedit: v => pe.SetInitOpacity(v)
                        }, {
                            name: propPrefix + ".grow-rate.name",
                            value: pe.GetGrowRate(),
                            onedit: v => pe.SetGrowRate(v)
                        }, {
                            name: propPrefix + ".x-randomiser.name",
                            value: pe.GetInitXRandom(),
                            onedit: v => pe.SetInitXRandom(v)
                        }, {
                            name: propPrefix + ".y-randomiser.name",
                            value: pe.GetInitYRandom(),
                            onedit: v => pe.SetInitYRandom(v)
                        },
                        {
                            name: propPrefix + ".initial-speed-randomiser.name",
                            value: pe.GetInitSpeedRandom(),
                            onedit: v => pe.SetInitSpeedRandom(v)
                        }, {
                            name: propPrefix + ".size-randomiser.name",
                            value: pe.GetInitSizeRandom(),
                            onedit: v => pe.SetInitSizeRandom(v)
                        }, {
                            name: propPrefix + ".grow-rate-randomiser.name",
                            value: pe.GetGrowRandom(),
                            onedit: v => pe.SetGrowRandom(v)
                        }, {
                            name: propPrefix + ".acceleration.name",
                            value: pe.GetAcceleration(),
                            onedit: v => pe.SetAcceleration(v)
                        }, {
                            name: propPrefix + ".gravity.name",
                            value: pe.GetGravity(),
                            onedit: v => pe.SetGravity(v)
                        },
                        {
                            name: propPrefix + ".angle-randomiser.name",
                            value: pe.GetLifeAngleRandom(),
                            onedit: v => pe.SetLifeAngleRandom(v)
                        }, {
                            name: propPrefix + ".life-speed-randomiser.name",
                            value: pe.GetLifeSpeedRandom(),
                            onedit: v => pe.SetLifeSpeedRandom(v)
                        }, {
                            name: propPrefix + ".opacity-randomiser.name",
                            value: pe.GetLifeOpacityRandom(),
                            onedit: v => pe.SetLifeOpacityRandom(v)
                        }, {
                            name: propPrefix + ".timeout.name",
                            value: pe.GetTimeout(),
                            onedit: v => pe.SetTimeout(v)
                        }
                    ]
                }]
            }
            GetScriptInterfaceClass() {
                return self.IParticlesInstance
            }
        };
        const map = new WeakMap;

        function GetParticleEngine(iinst) {
            return map.get(iinst).GetParticleEngine()
        }
        self.IParticlesInstance = class IParticlesInstance extends self.IWorldInstance {
            constructor() {
                super();
                map.set(this, self.IInstance._GetInitInst().GetSdkInstance())
            }
            set isSpraying(s) {
                GetParticleEngine(this).SetSpraying(!!s)
            }
            get isSpraying() {
                return GetParticleEngine(this).IsSpraying()
            }
            set rate(r) {
                C3X.RequireFiniteNumber(r);
                map.get(this)._SetRate(r)
            }
            get rate() {
                return GetParticleEngine(this).GetRate()
            }
            set sprayCone(c) {
                C3X.RequireFiniteNumber(c);
                GetParticleEngine(this).SetSprayCone(c)
            }
            get sprayCone() {
                return GetParticleEngine(this).GetSprayCone()
            }
            set initSpeed(s) {
                C3X.RequireFiniteNumber(s);
                GetParticleEngine(this).SetInitSpeed(s)
            }
            get initSpeed() {
                return GetParticleEngine(this).GetInitSpeed()
            }
            set initSize(s) {
                C3X.RequireFiniteNumber(s);
                GetParticleEngine(this).SetInitSize(s)
            }
            get initSize() {
                return GetParticleEngine(this).GetInitSize()
            }
            set initOpacity(o) {
                C3X.RequireFiniteNumber(o);
                GetParticleEngine(this).SetInitOpacity(o)
            }
            get initOpacity() {
                return GetParticleEngine(this).GetInitOpacity()
            }
            set initXRandom(x) {
                C3X.RequireFiniteNumber(x);
                GetParticleEngine(this).SetInitXRandom(x)
            }
            get initXRandom() {
                return GetParticleEngine(this).GetInitXRandom()
            }
            set initYRandom(y) {
                C3X.RequireFiniteNumber(y);
                GetParticleEngine(this).SetInitYRandom(y)
            }
            get initYRandom() {
                return GetParticleEngine(this).GetInitYRandom()
            }
            set initSpeedRandom(s) {
                C3X.RequireFiniteNumber(s);
                GetParticleEngine(this).SetInitSpeedRandom(s)
            }
            get initSpeedRandom() {
                return GetParticleEngine(this).GetInitSpeedRandom()
            }
            set initSizeRandom(s) {
                C3X.RequireFiniteNumber(s);
                GetParticleEngine(this).SetInitSizeRandom(s)
            }
            get initSizeRandom() {
                return GetParticleEngine(this).GetInitSizeRandom()
            }
            set initGrowRate(r) {
                C3X.RequireFiniteNumber(r);
                GetParticleEngine(this).SetGrowRate(r)
            }
            get initGrowRate() {
                return GetParticleEngine(this).GetGrowRate()
            }
            set initGrowRandom(r) {
                C3X.RequireFiniteNumber(r);
                GetParticleEngine(this).SetGrowRandom(r)
            }
            get initGrowRandom() {
                return GetParticleEngine(this).GetGrowRandom()
            }
            set acceleration(a) {
                C3X.RequireFiniteNumber(a);
                GetParticleEngine(this).SetAcceleration(a)
            }
            get acceleration() {
                return GetParticleEngine(this).GetAcceleration()
            }
            set gravity(g) {
                C3X.RequireFiniteNumber(g);
                GetParticleEngine(this).SetGravity(g)
            }
            get gravity() {
                return GetParticleEngine(this).GetGravity()
            }
            set lifeAngleRandom(r) {
                C3X.RequireFiniteNumber(r);
                GetParticleEngine(this).SetLifeAngleRandom(r)
            }
            get lifeAngleRandom() {
                return GetParticleEngine(this).GetLifeAngleRandom()
            }
            set lifeSpeedRandom(r) {
                C3X.RequireFiniteNumber(r);
                GetParticleEngine(this).SetLifeSpeedRandom(r)
            }
            get lifeSpeedRandom() {
                return GetParticleEngine(this).GetLifeSpeedRandom()
            }
            set lifeOpacityRandom(r) {
                C3X.RequireFiniteNumber(r);
                GetParticleEngine(this).SetLifeOpacityRandom(r)
            }
            get lifeOpacityRandom() {
                return GetParticleEngine(this).GetLifeOpacityRandom()
            }
            set timeout(t) {
                C3X.RequireFiniteNumber(t);
                GetParticleEngine(this).SetTimeout(t)
            }
            get timeout() {
                return GetParticleEngine(this).GetTimeout()
            }
            fastForward(time) {
                C3X.RequireFiniteNumber(time);
                map.get(this)._FastForward(time)
            }
            setParticleObjectClass(iObjectClass) {
                const inst = map.get(this);
                if (iObjectClass) inst._SetParticleObjectClass(inst.GetRuntime()._UnwrapIObjectClass(iObjectClass));
                else inst._SetParticleObjectClass(null)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Particles.Cnds = {
            IsSpraying() {
                return this._particleEngine.IsSpraying()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Particles.Acts = {
            SetSpraying(s) {
                this._particleEngine.SetSpraying(s !== 0)
            },
            SetRate(r) {
                this._SetRate(r)
            },
            SetParticleObject(objectClass) {
                this._SetParticleObjectClass(objectClass)
            },
            UnsetParticleObject() {
                this._SetParticleObjectClass(null)
            },
            SetSprayCone(c) {
                this._particleEngine.SetSprayCone(C3.toRadians(c))
            },
            SetInitSpeed(x) {
                this._particleEngine.SetInitSpeed(x)
            },
            SetInitSize(x) {
                this._particleEngine.SetInitSize(x)
            },
            SetInitOpacity(x) {
                this._particleEngine.SetInitOpacity(x / 100)
            },
            SetGrowRate(x) {
                this._particleEngine.SetGrowRate(x)
            },
            SetXRandomiser(x) {
                this._particleEngine.SetInitXRandom(x)
            },
            SetYRandomiser(x) {
                this._particleEngine.SetInitYRandom(x)
            },
            SetSpeedRandomiser(x) {
                this._particleEngine.SetInitSpeedRandom(x)
            },
            SetSizeRandomiser(x) {
                this._particleEngine.SetInitSizeRandom(x)
            },
            SetGrowRateRandomiser(x) {
                this._particleEngine.SetGrowRandom(x)
            },
            SetParticleAcc(x) {
                this._particleEngine.SetAcceleration(x)
            },
            SetGravity(x) {
                this._particleEngine.SetGravity(x)
            },
            SetAngleRandomiser(x) {
                this._particleEngine.SetLifeAngleRandom(x)
            },
            SetLifeSpeedRandomiser(x) {
                this._particleEngine.SetLifeSpeedRandom(x)
            },
            SetOpacityRandomiser(x) {
                this._particleEngine.SetLifeOpacityRandom(x)
            },
            SetTimeout(x) {
                this._particleEngine.SetTimeout(x)
            },
            FastForward(time) {
                this._FastForward(time)
            },
            SetEffect(effect) {
                this.GetWorldInfo().SetBlendMode(effect);
                this._runtime.UpdateRender()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.Particles.Exps = {
            ParticleCount() {
                return this._particleEngine.GetParticleCount()
            },
            Rate() {
                return this._particleEngine.GetRate()
            },
            SprayCone() {
                return C3.toDegrees(this._particleEngine.GetSprayCone())
            },
            InitSpeed() {
                return this._particleEngine.GetInitSpeed()
            },
            InitSize() {
                return this._particleEngine.GetInitSize()
            },
            InitOpacity() {
                return this._particleEngine.GetInitOpacity() * 100
            },
            InitGrowRate() {
                return this._particleEngine.GetGrowRate()
            },
            XRandom() {
                return this._particleEngine.GetInitXRandom()
            },
            YRandom() {
                return this._particleEngine.GetInitYRandom()
            },
            InitSizeRandom() {
                return this._particleEngine.GetInitSizeRandom()
            },
            InitSpeedRandom() {
                return this._particleEngine.GetInitSpeedRandom()
            },
            InitGrowRandom() {
                return this._particleEngine.GetGrowRandom()
            },
            ParticleAcceleration() {
                return this._particleEngine.GetAcceleration()
            },
            Gravity() {
                return this._particleEngine.GetGravity()
            },
            ParticleAngleRandom() {
                return this._particleEngine.GetLifeAngleRandom()
            },
            ParticleSpeedRandom() {
                return this._particleEngine.GetLifeSpeedRandom()
            },
            ParticleOpacityRandom() {
                return this._particleEngine.GetLifeOpacityRandom()
            },
            Timeout() {
                return this._particleEngine.GetTimeout()
            }
        }
    };

}

{
    'use strict';
    const C3 = self.C3;
    const inactiveParticles = [];
    const MAX_RECYCLE_PARTICLES = 1E3;
    const VALID_SPRAY_TYPES = new Set(["continuous-spray", "one-shot"]);
    const DESTROY_MODES = ["fade-to-invisible", "timeout-expired", "particle-stopped"];
    const tempRect = C3.New(C3.Rect);
    self.ParticleEngine = class ParticleEngine {
        constructor() {
            this._rate = 0;
            this._sprayCone = 0;
            this._sprayType = "continuous-spray";
            this._isSpraying = false;
            this._masterOpacity = 0;
            this._isPixelRounding = false;
            this._spawnX = 0;
            this._spawnY = 0;
            this._spawnAngle = 0;
            this._initSpeed = 0;
            this._initSize = 0;
            this._initSizeScale = 1;
            this._initOpacity = 0;
            this._growRate = 0;
            this._xRandom = 0;
            this._yRandom = 0;
            this._initSpeedRandom = 0;
            this._initSizeRandom = 0;
            this._growRandom = 0;
            this._acceleration = 0;
            this._gravity = 0;
            this._lifeAngleRandom = 0;
            this._lifeSpeedRandom =
                0;
            this._lifeOpacityRandom = 0;
            this._destroyMode = 0;
            this._timeout = 0;
            this._createCounter = 0;
            this._particleScale = 1;
            this.ononeshotfinish = null;
            this.onparticlecreate = null;
            this._particles = [];
            this._boundingBox = new C3.Rect;
            this._color = new C3.Color
        }
        Release() {
            this.Cancel();
            C3.clearArray(this._particles);
            this._particles = null;
            this.ononeshotfinish = null;
            this.onparticlecreate = null;
            this._boundingBox = null;
            this._color = null
        }
        Cancel() {
            const particles = this._particles;
            for (let i = 0, len = particles.length; i < len; ++i) particles[i].Destroy();
            C3.appendArray(inactiveParticles, particles);
            C3.clearArray(particles);
            if (inactiveParticles.length > MAX_RECYCLE_PARTICLES) C3.truncateArray(inactiveParticles, MAX_RECYCLE_PARTICLES);
            this._isSpraying = false
        }
        CreateOneShotSpray() {
            for (let i = 0, len = this._rate; i < len; ++i) this._CreateParticle();
            if (this._particles.length) this._isSpraying = true
        }
        _CreateParticle() {
            let ret = null;
            if (inactiveParticles.length) {
                ret = inactiveParticles.pop();
                ret.SetEngine(this)
            } else ret = C3.New(self.Particle, this);
            this._particles.push(ret);
            ret.Init(this.onparticlecreate);
            return ret
        }
        ReInitAllParticles() {
            const particles = this._particles;
            const onparticlecreate = this.onparticlecreate;
            for (let i = 0, len = particles.length; i < len; ++i) particles[i].Init(onparticlecreate)
        }
        UpdateAllParticlesUserData() {
            const particles = this._particles;
            const onparticlecreate = this.onparticlecreate;
            for (let i = 0, len = particles.length; i < len; ++i) particles[i].UpdateUserData(onparticlecreate)
        }
        ApplyParticleDataToUserData(inst) {
            const particles = this._particles;
            for (let i = 0, len = particles.length; i < len; ++i) {
                const particle =
                    particles[i];
                const userData = particle.GetUserData();
                if (userData) {
                    const wi = userData.GetWorldInfo();
                    wi.SetX(particle.GetX());
                    wi.SetY(particle.GetY());
                    wi.SetSize(particle.GetSize(), particle.GetSize());
                    wi.SetOpacity(particle.GetOpacity());
                    wi.SetAngle(particle.GetAngle());
                    wi.SetUnpremultipliedColor(inst.GetWorldInfo().GetUnpremultipliedColor());
                    wi.SetBboxChanged()
                }
            }
        }
        SetParticleCount(c) {
            const particles = this._particles;
            if (c < particles.length) {
                const diff = particles.length - c;
                for (let i = 0; i < diff; ++i) {
                    const p = particles.pop();
                    p.Destroy();
                    inactiveParticles.push(p)
                }
                if (inactiveParticles.length > MAX_RECYCLE_PARTICLES) C3.truncateArray(inactiveParticles, MAX_RECYCLE_PARTICLES)
            } else if (c > particles.length) {
                const diff = c - particles.length;
                for (let i = 0; i < diff; ++i) this._CreateParticle()
            }
        }
        GetParticles() {
            return this._particles
        }
        GetParticleCount() {
            return this._particles.length
        }
        Tick(dt) {
            this._SpawnContinuous(dt);
            this._TickParticles(dt);
            this._MaybeFinishOneShot()
        }
        _SpawnContinuous(dt) {
            if (this._sprayType === "continuous-spray" && this._isSpraying) {
                this._createCounter +=
                    dt * this._rate;
                const n = Math.floor(this._createCounter);
                this._createCounter -= n;
                for (let i = 0; i < n; ++i) this._CreateParticle()
            }
        }
        _SetCreateCounter(c) {
            this._createCounter = c
        }
        _GetCreateCounter() {
            return this._createCounter
        }
        _TickParticles(dt) {
            const bbox = this._boundingBox;
            bbox.set(this._spawnX, this._spawnY, this._spawnX, this._spawnY);
            const particles = this._particles;
            let j = 0;
            for (let i = 0, len = particles.length; i < len; ++i) {
                const p = particles[i];
                particles[j] = p;
                p.Tick(dt);
                if (p.IsActive()) {
                    ++j;
                    bbox.expandToContain(p.GetBoundingBox())
                } else {
                    p.Destroy();
                    inactiveParticles.push(p)
                }
            }
            C3.truncateArray(particles, j);
            if (inactiveParticles.length > MAX_RECYCLE_PARTICLES) C3.truncateArray(inactiveParticles, MAX_RECYCLE_PARTICLES)
        }
        _MaybeFinishOneShot() {
            if (this._sprayType === "one-shot" && this._particles.length === 0 && this._isSpraying) {
                if (this.ononeshotfinish) this.ononeshotfinish();
                this._isSpraying = false
            }
        }
        Draw(renderer, texQuad, viewport, forceQuads) {
            tempRect.set(texQuad.getTlx(), texQuad.getTly(), texQuad.getBrx(), texQuad.getBry());
            renderer.StartRenderingPoints(tempRect);
            this._color.copy(renderer.GetColor());
            const particles = this._particles;
            for (let i = 0, len = particles.length; i < len; ++i) {
                const p = particles[i];
                if (viewport.intersectsRect(p.GetBoundingBox())) p.Draw(renderer, texQuad, forceQuads)
            }
            renderer.FinishRenderingPoints()
        }
        GetColor() {
            return this._color
        }
        SetRate(r) {
            this._rate = +r
        }
        GetRate() {
            return this._rate
        }
        SetSprayCone(c) {
            this._sprayCone = +c
        }
        GetSprayCone() {
            return this._sprayCone
        }
        SetSprayType(type) {
            if (!VALID_SPRAY_TYPES.has(type)) throw new Error("invalid spray type");
            this._sprayType =
                type
        }
        GetSprayType() {
            return this._sprayType
        }
        SetSpraying(s) {
            this._isSpraying = !!s
        }
        IsSpraying() {
            return this._isSpraying
        }
        SetMasterOpacity(o) {
            this._masterOpacity = +o
        }
        GetMasterOpacity() {
            return this._masterOpacity
        }
        SetPixelRounding(r) {
            this._isPixelRounding = !!r
        }
        IsPixelRounding() {
            return this._isPixelRounding
        }
        SetSpawnX(x) {
            this._spawnX = +x
        }
        GetSpawnX() {
            return this._spawnX
        }
        SetSpawnY(y) {
            this._spawnY = +y
        }
        GetSpawnY() {
            return this._spawnY
        }
        SetSpawnAngle(a) {
            this._spawnAngle = +a
        }
        GetInitAngle() {
            return this._spawnAngle
        }
        SetInitSpeed(s) {
            this._initSpeed = +s
        }
        GetInitSpeed() {
            return this._initSpeed
        }
        SetInitSize(s) {
            this._initSize = +s
        }
        GetInitSize() {
            return this._initSize
        }
        SetInitSizeScale(s) {
            this._initSizeScale = +s
        }
        GetInitSizeScale() {
            return this._initSizeScale
        }
        SetInitOpacity(o) {
            this._initOpacity = +o
        }
        GetInitOpacity() {
            return this._initOpacity
        }
        SetGrowRate(g) {
            this._growRate = +g
        }
        GetGrowRate() {
            return this._growRate
        }
        SetInitXRandom(x) {
            this._xRandom = +x
        }
        GetInitXRandom() {
            return this._xRandom
        }
        SetInitYRandom(y) {
            this._yRandom = +y
        }
        GetInitYRandom() {
            return this._yRandom
        }
        SetInitSpeedRandom(s) {
            this._initSpeedRandom = +s
        }
        GetInitSpeedRandom() {
            return this._initSpeedRandom
        }
        SetInitSizeRandom(s) {
            this._initSizeRandom = +s
        }
        GetInitSizeRandom() {
            return this._initSizeRandom
        }
        SetGrowRandom(g) {
            this._growRandom = +g
        }
        GetGrowRandom() {
            return this._growRandom
        }
        SetAcceleration(a) {
            this._acceleration = +a
        }
        GetAcceleration() {
            return this._acceleration
        }
        SetGravity(g) {
            this._gravity = +g
        }
        GetGravity() {
            return this._gravity
        }
        SetLifeAngleRandom(a) {
            this._lifeAngleRandom = +a
        }
        GetLifeAngleRandom() {
            return this._lifeAngleRandom
        }
        SetLifeSpeedRandom(s) {
            this._lifeSpeedRandom = +s
        }
        GetLifeSpeedRandom() {
            return this._lifeSpeedRandom
        }
        SetLifeOpacityRandom(o) {
            this._lifeOpacityRandom = +o
        }
        GetLifeOpacityRandom() {
            return this._lifeOpacityRandom
        }
        SetDestroyMode(m) {
            let i = DESTROY_MODES.indexOf(m);
            if (i === -1) throw new Error("invalid destroy mode");
            this._destroyMode = i
        }
        SetDestroyModeIndex(i) {
            this.SetDestroyMode(DESTROY_MODES[i])
        }
        GetDestroyMode() {
            return DESTROY_MODES[this._destroyMode]
        }
        GetDestroyModeIndex() {
            return this._destroyMode
        }
        SetTimeout(t) {
            this._timeout = +t
        }
        GetTimeout() {
            return this._timeout
        }
        SetParticleScale(s) {
            this._particleScale = +s
        }
        GetParticleScale() {
            return this._particleScale
        }
        GetBoundingBox() {
            return this._boundingBox
        }
    };

}

{
    'use strict';
    const C3 = self.C3;
    const ParticleEngine = self.ParticleEngine;

    function randomOffset(x) {
        return Math.random() * x - x / 2
    }
    const tmpQuad = new C3.Quad;
    const tmpColor = new C3.Color;
    const DPR = self.devicePixelRatio || 1;
    let didChangeColor = false;
    self.Particle = class Particle {
        constructor(engine) {
            this._engine = engine;
            this._isActive = false;
            this._x = 0;
            this._y = 0;
            this._speed = 0;
            this._angle = 0;
            this._opacity = 1;
            this._lastOpacity = 0;
            this._grow = 0;
            this._size = 0;
            this._halfSize = 0;
            this._gs = 0;
            this._age = 0;
            this._bbox = new C3.Rect;
            this._userData = null;
            this._userDataUid = NaN;
            this._updateCallback = null;
            this._destroyCallback = null
        }
        SetEngine(engine) {
            this._engine = engine
        }
        Init(particleCreateCallback) {
            const engine = this._engine;
            this._isActive = true;
            this._x = engine.GetSpawnX() + randomOffset(engine.GetInitXRandom());
            this._y = engine.GetSpawnY() + randomOffset(engine.GetInitYRandom());
            this._speed = engine.GetInitSpeed() + randomOffset(engine.GetInitSpeedRandom());
            this._angle = engine.GetInitAngle() + randomOffset(engine.GetSprayCone());
            this._opacity = engine.GetInitOpacity();
            this._lastOpacity = this._opacity;
            this._size = (engine.GetInitSize() + randomOffset(engine.GetInitSizeRandom())) * engine.GetInitSizeScale();
            this._halfSize = this._size / 2;
            this._grow = engine.GetGrowRate() + randomOffset(engine.GetGrowRandom());
            this._gs = 0;
            this._age = 0;
            this._UpdateBoundingBox();
            if (particleCreateCallback) {
                if (!this._userData) this._userData = particleCreateCallback(this)
            } else {
                this._userData = null;
                this._updateCallback = null;
                this._destroyCallback = null
            }
        }
        UpdateUserData(particleCreateCallback) {
            if (particleCreateCallback) {
                if (!this._userData || this._userData.IsDestroyed()) this._userData = particleCreateCallback(this)
            } else {
                this._userData = null;
                this._updateCallback = null;
                this._destroyCallback = null
            }
        }
        SetUpdateCallback(f) {
            this._updateCallback = f
        }
        SetDestroyCallback(f) {
            this._destroyCallback =
                f
        }
        Destroy() {
            const particleDestroyCallback = this._destroyCallback;
            if (particleDestroyCallback) particleDestroyCallback(this._userData);
            this._userData = null;
            this._updateCallback = null;
            this._destroyCallback = null
        }
        toJSON() {
            let uid;
            if (this._userData) uid = this._userData.GetWorldInfo().GetInstance().GetUID();
            return [this._x, this._y, this._speed, this._angle, this._opacity, this._grow, this._size, this._gs, this._age, uid]
        }
        setFromJSON(o) {
            this._x = o[0];
            this._y = o[1];
            this._speed = o[2];
            this._angle = o[3];
            this._opacity = o[4];
            this._grow =
                o[5];
            this._size = o[6];
            this._gs = o[7];
            this._age = o[8];
            this._userDataUid = o[9];
            this._halfSize = this._size / 2;
            this._UpdateBoundingBox()
        }
        Tick(dt) {
            const engine = this._engine;
            const dist = this._speed * dt;
            const a = this._angle;
            const dx = Math.cos(a) * dist;
            const dy = Math.sin(a) * dist + this._gs * dt;
            this._x += dx;
            this._y += dy;
            const dSize = this._grow * dt;
            this._size += dSize;
            this._halfSize = this._size / 2;
            this._speed += engine.GetAcceleration() * dt;
            this._gs += engine.GetGravity() * dt;
            this._age += dt;
            this._UpdateBoundingBox();
            const lifeAngleRandom =
                engine.GetLifeAngleRandom();
            const lifeSpeedRandom = engine.GetLifeSpeedRandom();
            const lifeOpacityRandom = engine.GetLifeOpacityRandom();
            let dAngle = 0;
            if (lifeAngleRandom !== 0) {
                dAngle = randomOffset(lifeAngleRandom * dt);
                this._angle += dAngle
            }
            if (lifeSpeedRandom !== 0) this._speed += randomOffset(lifeSpeedRandom * dt);
            if (lifeOpacityRandom !== 0) this._opacity = C3.clamp(this._opacity + randomOffset(lifeOpacityRandom * dt), 0, 1);
            const isActive = this._size >= 1 && (engine.GetDestroyModeIndex() === 2 ? this._speed > 0 : this._age < engine.GetTimeout());
            const particleUpdateCallback = this._updateCallback;
            if (particleUpdateCallback && isActive) {
                let curOpacity = engine.GetMasterOpacity() * this._opacity;
                if (engine.GetDestroyModeIndex() === 0) curOpacity *= 1 - this._age / engine.GetTimeout();
                const dOpacity = curOpacity - this._lastOpacity;
                this._lastOpacity = curOpacity;
                particleUpdateCallback(this._userData, dx, dy, dSize, dAngle, dOpacity)
            }
            this._isActive = isActive
        }
        IsActive() {
            return this._isActive
        }
        GetBoundingBox() {
            return this._bbox
        }
        _UpdateBoundingBox() {
            const x = this._x;
            const y = this._y;
            const halfSize = this._halfSize;
            this._bbox.set(x - halfSize, y - halfSize, x + halfSize, y + halfSize)
        }
        Draw(renderer, texQuad, forceQuads) {
            if (this._userData) return;
            const engine = this._engine;
            let opacity = engine.GetMasterOpacity() * this._opacity;
            if (engine.GetDestroyModeIndex() === 0) opacity *= 1 - this._age / engine.GetTimeout();
            if (opacity <= 0) return;
            const size = this._size;
            const scaledSize = size * engine.GetParticleScale() * DPR;
            if (scaledSize < 1) return;
            let x = this._x;
            let y = this._y;
            if (engine.IsPixelRounding()) {
                x = x + .5 | 0;
                y = y + .5 | 0
            }
            if (renderer.IsWebGPU()) renderer.Point(x,
                y, size, opacity);
            else if (forceQuads || scaledSize > renderer.GetMaxPointSize() || scaledSize < renderer.GetMinPointSize()) {
                tmpColor.copy(engine.GetColor());
                tmpColor.multiplyAlpha(opacity);
                renderer.SetColor(tmpColor);
                didChangeColor = true;
                tmpQuad.setFromRect(this._bbox);
                renderer.Quad4(tmpQuad, texQuad)
            } else {
                if (didChangeColor) {
                    renderer.SetColor(engine.GetColor());
                    didChangeColor = false
                }
                renderer.Point(x, y, scaledSize, opacity)
            }
        }
        GetUserData() {
            return this._userData
        }
        GetUserDataUID() {
            return this._userDataUid
        }
        GetX() {
            return this._x
        }
        GetY() {
            return this._y
        }
        GetSize() {
            return this._size
        }
        GetAngle() {
            return this._angle
        }
        GetOpacity() {
            return this._opacity
        }
    };

}

{
    "use strict"; {
        C3.Plugins.Eponesh_YandexSDK = class YandexSDKPlugin extends C3.SDKDOMPluginBase {
            constructor(opts) {
                super(opts, 'Eponesh_YandexSDK');

                this.addHandler('YSDK_ADS_REWARDED_OPEN', (inst, e) => inst.onRewardedOpen(e));
                this.addHandler('YSDK_ADS_REWARDED_REWARD', (inst, e) => inst.onRewardedReward(e));
                this.addHandler('YSDK_ADS_REWARDED_CLOSE', (inst, e) => inst.onRewardedClose(e));
                this.addHandler('YSDK_ADS_REWARDED_ERROR', (inst, e) => inst.onRewardedError(e));

                this.addHandler('SDK_ADS_CLOSED', (inst, e) => inst.onAdvClosed(e));
                this.addHandler('SDK_RTB_RENDER', (inst, e) => inst.onRTBRender(e));
            }

            addHandler(handler, cb) {
                this.AddElementMessageHandler(handler, (_, e) => cb(this.GetSingleGlobalInstance().GetSdkInstance(), e));
            }

            Release() {
                super.Release();
            }
        };
    }

}

{
    "use strict"; {
        C3.Plugins.Eponesh_YandexSDK.Type = class YandexSDKType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass);
            }

            Release() {
                super.Release();
            }

            OnCreate() {}
        };
    }

}

{
    "use strict"; {
        var SDKDOMInstanceBase = globalThis.C3 ? globalThis.C3.SDKDOMInstanceBase : class {}
        var Instance = class YandexSDKInstance extends SDKDOMInstanceBase {
            constructor(inst, properties = []) {
                super(inst, 'Eponesh_YandexSDK');
                if (!globalThis.C3) {
                    return;
                }
                this.conditions = C3.Plugins.Eponesh_YandexSDK.Cnds;
                this.init(properties);
            }

            async init(properties) {
                this.enableFullscreenOnStart = properties[0];
                this.setOrientation(properties[1]);
                this.isOrientationLocked = properties[2];

                this.metricaId = properties[3];
                this.enableRTB = properties[4];

                this.banners = {};
                this.isRewardedVideoPlaying = false;

                this.purchases = [];
                this.products = [];

                this.playerData = {};
                this.playerStats = {};

                this.currentProductID = '';
                this.currentProductTitle = '';
                this.currentProductImage = '';
                this.currentProductDescription = '';
                this.currentProductPrice = 0;

                this.currentPurchaseID = '';
                this.currentPurchaseToken = '';
                this.currentPurchaseSign = '';

                this.lastPurchaseID = '';
                this.lastPurchaseToken = '';

                this.lastStateKey = '';
                this.lastDataKey = '';

                this.player = {
                    name: '',
                    id: '',
                    photoSmall: '',
                    photoMedium: '',
                    photoLarge: ''
                };

                if (this.metricaId) {
                    this.metricaReady = this.PostToDOMElementAsync('INIT_METRICA', {
                        metricaId: this.metricaId
                    });
                }

                if (this.enableRTB) {
                    this.rtbReady = this.PostToDOMElementAsync('INIT_RTB');
                }

                const screen = {
                    fullscreen: this.enableFullscreenOnStart
                };
                if (this.fullscreenOrientation !== null) {
                    screen.orientation = {
                        value: this.fullscreenOrientation,
                        lock: this.isOrientationLocked
                    };
                }

                this.ready = this.PostToDOMElementAsync('INIT_SDK', {
                    screen
                });
                await this.ready;
                this.paymentsReady = this._getPayments({
                    signed: true
                });
            }

            Release() {
                super.Release();
            }

            SaveToJson() {
                return {
                    // data to be saved for savegames
                };
            }

            LoadFromJson(o) {
                // load state for savegames
            }

            GetDebuggerProperties() {
                return [{
                    title: "YandexSDK",
                    properties: []
                }];
            }

            setOrientation(orientation) {
                switch (orientation) {
                    case 1:
                        {
                            this.fullscreenOrientation = 'portrait';
                            break;
                        }
                    case 2:
                        {
                            this.fullscreenOrientation = 'landscape';
                            break;
                        }
                    default:
                        {
                            this.fullscreenOrientation = null;
                        }
                }
            }

            onAdvClosed({
                wasShown
            }) {
                console.log('Adv was closed, shown:', wasShown);
                this.Trigger(this.conditions.OnAdvClosed);

                if (this.isFirstAdvClosed) {
                    return;
                }

                this.isFirstAdvClosed = true;
                this.Trigger(this.conditions.OnFirstAdvClosed);
            }

            async getPlayer() {
                try {
                    const player = await this._getPlayer();
                    this.setPlayer(player);
                } catch (err) {
                    try {
                        await this._openAuthDialog();
                        const player = await this._getPlayer();
                        this.setPlayer(player);
                    } catch (err) {
                        this.Trigger(this.conditions.OnSignInFailed);
                    }
                }
            }

            async setPlayer(player) {
                this.player = player;
                this.playerStats = {};
                this.playerData = {};
                this.Trigger(this.conditions.OnSignInSuccess);
            }

            getPurchase(id) {
                return this.purchases.find(p => p.productID === id) || {};
            }

            getProduct(id) {
                return this.products.find(p => p.productID === id) || {};
            }

            onRewardedOpen() {
                this.isRewardedVideoPlaying = true;
                this.Trigger(this.conditions.OnRewardedVideoOpen);
            }

            onRewardedReward() {
                this.Trigger(this.conditions.OnRewardedVideoReward);
            }

            onRewardedClose() {
                this.isRewardedVideoPlaying = false;
                this.Trigger(this.conditions.OnRewardedVideoClose);
            }

            onRewardedError() {
                this.Trigger(this.conditions.OnRewardedVideoError);
            }

            onRTBRender({
                id
            }) {
                this.banners[id].displayed = true;
                this.lastBannerID = id;
                this.Trigger(this.conditions.OnBannerDisplayed);
            }

            _getPayments(options) {
                return this.PostToDOMElementAsync('YSDK_PAYMENTS_GET', options);
            }

            _getPurchases() {
                return this.PostToDOMElementAsync('YSDK_PAYMENTS_GET_PURCHASES');
            }

            _getCatalog() {
                return this.PostToDOMElementAsync('YSDK_PAYMENTS_GET_CATALOG');
            }

            _purchase(options) {
                return this.PostToDOMElementAsync('YSDK_PAYMENTS_PURCHASE', options);
            }

            _consumePurchase(options) {
                return this.PostToDOMElementAsync('YSDK_PAYMENTS_CONSUME_PURCHASE', options);
            }

            _openAuthDialog() {
                return this.PostToDOMElementAsync('YSDK_AUTH_OPEN');
            }

            _getPlayer() {
                return this.PostToDOMElementAsync('YSDK_PLAYER_GET');
            }

            _showFullscreenAdv() {
                return this.PostToDOMElementAsync('YSDK_ADS_SHOW_FULLSCREEN');
            }

            _showRewardedVideo() {
                return this.PostToDOMElementAsync('YSDK_ADS_SHOW_REWARDED');
            }

            _getPlayerFullStats() {
                return this.PostToDOMElementAsync('YSDK_PLAYER_GET_FULL_STATS');
            }

            _getPlayerStats(payload) {
                return this.PostToDOMElementAsync('YSDK_PLAYER_GET_STATS', payload);
            }

            _setPlayerStats(payload) {
                return this.PostToDOMElementAsync('YSDK_PLAYER_SET_STATS', payload);
            }

            _incrementPlayerStats(payload) {
                return this.PostToDOMElementAsync('YSDK_PLAYER_INCREMENT_STATS', payload);
            }

            _getPlayerFullData() {
                return this.PostToDOMElementAsync('YSDK_PLAYER_GET_FULL_DATA');
            }

            _getPlayerData(payload) {
                return this.PostToDOMElementAsync('YSDK_PLAYER_GET_DATA', payload);
            }

            _setPlayerData(payload) {
                return this.PostToDOMElementAsync('YSDK_PLAYER_SET_DATA', payload);
            }

            _reachGoal(payload) {
                return this.PostToDOMElement('YSDK_METRICA_REACH_GOAL', payload);
            }

            _rtbCreateBanner(payload) {
                return this.PostToDOMElement('YSDK_RTB_CREATE_BANNER', payload);
            }

            _rtbCreateStickyBanner(payload) {
                return this.PostToDOMElement('YSDK_RTB_CREATE_STICKY_BANNER', payload);
            }

            _rtbDestroyBanner(payload) {
                return this.PostToDOMElement('YSDK_RTB_DESTROY_BANNER', payload);
            }

            _rtbRefreshBanner(payload) {
                return this.PostToDOMElement('YSDK_RTB_REFRESH_BANNER', payload);
            }

            /**
             * @override
             * Plugin must be registered as world instance
             * and required to be rendered on layout, but :) just ignore it
             */
            Tick() {
                return false;
            }
        };

        if (globalThis.C3) {
            C3.Plugins.Eponesh_YandexSDK.Instance = Instance;
        }

        Instance;
    }

}

{
    "use strict"; {
        function each(runtime, array, cb) {
            const eventSheetManager = runtime.GetEventSheetManager();
            const currentEvent = runtime.GetCurrentEvent();
            const solModifiers = currentEvent.GetSolModifiers();
            const eventStack = runtime.GetEventStack();
            // Get current stack frame and push new one
            const oldFrame = eventStack.GetCurrentStackFrame();
            const newFrame = eventStack.Push(currentEvent);

            array.forEach((item) => {
                cb(item);

                // Push a copy of the current SOL
                eventSheetManager.PushCopySol(solModifiers);
                // Retrigger the current event, running a single loop iteration
                currentEvent.Retrigger(oldFrame, newFrame);
                // Pop the current SOL
                eventSheetManager.PopSol(solModifiers);
            });

            // Pop the event stack frame
            eventStack.Pop();
        }

        var Cnds = {
            OnAdvClosed() {
                return true;
            },

            OnFirstAdvClosed() {
                return true;
            },

            OnSignInFailed() {
                return true;
            },

            OnSignInSuccess() {
                return true;
            },

            IsSignedIn() {
                return !!this.player;
            },

            IsPurchasesAvailable() {
                return !!this.payments;
            },

            HasAnyPurchase() {
                return this.purchases.length > 0;
            },

            OnBuySuccess(purchaseId) {
                return purchaseId === this.lastPurchaseID;
            },

            OnBuyFailed(purchaseId) {
                return purchaseId === this.lastPurchaseID;
            },

            OnAnyBuySuccess() {
                return true;
            },

            OnAnyBuyFailed() {
                return true;
            },

            OnPurchasesLoadSuccess() {
                return true;
            },

            OnPurchasesLoadFailed() {
                return true;
            },

            OnCatalogLoadSuccess() {
                return true;
            },

            OnCatalogLoadFailed() {
                return true;
            },

            HasPurchase(productId) {
                return this.purchases.some(p => p.productID === productId);
            },

            EachProduct() {
                each(this._runtime, this.products, (product) => {
                    this.currentProductID = product.productID;
                    this.currentProductTitle = product.title;
                    this.currentProductDescription = product.description;
                    this.currentProductImage = product.imageURI;
                    this.currentProductPrice = product.price;
                });

                return false;
            },

            EachPurchase() {
                each(this._runtime, this.purchases, (purchase) => {
                    this.currentPurchaseID = purchase.productID;
                    this.currentPurchaseToken = purchase.purchaseToken;
                    this.currentPurchaseSign = purchase.signature;
                });

                return false;
            },

            OnRewardedVideoOpen() {
                return true;
            },

            OnRewardedVideoClose() {
                return true;
            },

            OnRewardedVideoError() {
                return true;
            },

            OnRewardedVideoReward() {
                return true;
            },

            IsRewardedVideoPlaying() {
                return this.isRewardedVideoPlaying;
            },

            OnIncrementPlayerStateFailed(key) {
                return key === this.lastStateKey;
            },

            OnSetPlayerStateFailed(key) {
                return key === this.lastStateKey;
            },

            OnSetPlayerDataFailed(key) {
                return key === this.lastDataKey;
            },

            OnLoadPlayerStatsSuccess() {
                return true;
            },

            OnLoadPlayerStatsFailed() {
                return true;
            },

            OnLoadPlayerDataSuccess() {
                return true;
            },

            OnLoadPlayerDataFailed() {
                return true;
            },

            OnConsumeSuccess(purchaseId) {
                return purchaseId === this.lastPurchaseID;
            },

            OnConsumeFailed(purchaseId) {
                return purchaseId === this.lastPurchaseID;
            },

            OnAnyConsumeSuccess() {
                return true;
            },

            OnAnyConsumeFailed() {
                return true;
            },

            OnBannerDisplayed(bannerID) {
                return bannerID === this.lastBannerID;
            },

            OnBannerDestroyed(bannerID) {
                return bannerID === this.lastBannerID;
            },

            IsBannerDisplaying(bannerID) {
                const banner = this.banners[bannerID];
                return !!(banner && banner.displayed);
            },
        };

        if (globalThis.C3) {
            C3.Plugins.Eponesh_YandexSDK.Cnds = Cnds;
        }

        Cnds;
    }

}

{
    "use strict"; {
        var Acts = {
            async ShowFullscreen() {
                await this.ready;
                this._showFullscreenAdv();
            },

            async CreateBanner(id, x = 0, y = 0, width = 0, height = 0, styles) {
                if (!this.banners[id]) {
                    this.banners[id] = {
                        displayed: false
                    };
                    await this.rtbReady;
                    this._rtbCreateBanner({
                        id,
                        x,
                        y,
                        width,
                        height,
                        styles
                    });
                }
            },

            async CreateStickyBanner(id, position = 0, width = 0, height = 0, styles) {
                if (!this.banners[id]) {
                    this.banners[id] = {
                        displayed: false
                    };
                    await this.rtbReady;
                    this._rtbCreateStickyBanner({
                        id,
                        position,
                        width,
                        height,
                        styles
                    });
                }
            },

            async DisplayBanner(id) {
                if (this.banners[id]) {
                    await this.rtbReady;
                    this._rtbDisplayBanner({
                        id
                    });
                }
            },

            async RefreshBanner(id) {
                if (this.banners[id]) {
                    await this.rtbReady;
                    this.banners[id].displayed = false;
                    this._rtbRefreshBanner({
                        id
                    });
                }
            },

            async DestroyBanner(id) {
                if (this.banners[id]) {
                    await this.rtbReady;
                    this.banners[id].displayed = false;
                    this.lastBannerID = id;
                    this._rtbDestroyBanner({
                        id
                    });
                    this.Trigger(this.conditions.OnBannerDestroyed);
                }
            },

            async ReachGoal(target) {
                await this.metricaReady;
                console.log('Reach Goal: ', target);
                this._reachGoal({
                    target
                });
            },

            async SignIn() {
                await this.getPlayer();
            },

            async LoadCatalog() {
                try {
                    await this.paymentsReady;
                    this.products = await this._getCatalog();
                    this.Trigger(this.conditions.OnCatalogLoadSuccess);
                } catch (err) {
                    this.Trigger(this.conditions.OnCatalogLoadFailed);
                }
            },

            async LoadPurchases(isAutoSignIn) {
                if (isAutoSignIn) {
                    try {
                        await this.getPlayer();
                    } catch (err) {
                        this.Trigger(this.conditions.OnPurchasesLoadFailed);
                    }
                }

                try {
                    await this.paymentsReady;
                    this.purchases = await this._getPurchases();
                    this.Trigger(this.conditions.OnPurchasesLoadSuccess);
                } catch (err) {
                    this.Trigger(this.conditions.OnPurchasesLoadFailed);
                }
            },

            async Buy(purchaseId) {
                try {
                    await this.paymentsReady;
                    const purchase = await this._purchase({
                        purchaseId
                    });
                    this.purchases.push(purchase);
                    this.lastPurchaseID = purchaseId;
                    this.lastPurchaseToken = purchase.purchaseToken;
                    this.Trigger(this.conditions.OnAnyBuySuccess);
                    this.Trigger(this.conditions.OnBuySuccess);
                } catch (err) {
                    this.lastPurchaseID = purchaseId;
                    this.Trigger(this.conditions.OnAnyBuyFailed);
                    this.Trigger(this.conditions.OnBuyFailed);
                }
            },

            async ShowRewardedVideo() {
                await this.ready;
                try {
                    await this._showRewardedVideo();
                } catch (error) {
                    this.Trigger(this.conditions.OnRewardedVideoError);
                }
            },

            async ConsumePurchase(id) {
                const purchase = this.purchases.find(p => p.productID === id);
                try {
                    await this.paymentsReady;
                    await this._consumePurchase({
                        purchaseToken: purchase.purchaseToken
                    });
                    this.purchases = this.purchases.filter(p => p.productID !== id);
                    this.lastPurchaseID = id;
                    this.lastPurchaseToken = purchase ? purchase.token : '';
                    this.Trigger(this.conditions.OnAnyConsumeSuccess);
                    this.Trigger(this.conditions.OnConsumeSuccess);
                } catch (err) {
                    this.lastPurchaseID = id;
                    this.lastPurchaseToken = purchase ? purchase.token : '';
                    this.Trigger(this.conditions.OnAnyConsumeFailed);
                    this.Trigger(this.conditions.OnConsumeFailed);
                }
            },

            async IncrementState(key, value) {
                if (this.playerStats[key]) {
                    this.playerStats[key] += value;
                } else {
                    this.playerStats[key] = value;
                }

                try {
                    await this._incrementPlayerStats({
                        [key]: value
                    });
                    const stats = await this._getPlayerStats([key]);
                    this.playerStats[key] = stats[key] || 0;
                } catch (error) {
                    this.lastStateKey = key;
                    this.Trigger(this.conditions.OnIncrementPlayerStateFailed);
                }
            },

            async SetState(key, value) {
                this.playerStats[key] = value;
                try {
                    await this._setPlayerStats({
                        [key]: value
                    });
                    const stats = await this._getPlayerStats([key]);
                    this.playerStats[key] = stats[key] || 0;
                } catch (error) {
                    this.lastStateKey = key;
                    this.Trigger(this.conditions.OnSetPlayerStateFailed);
                }
            },

            async SetData(key, value) {
                this.playerData[key] = value;
                try {
                    await this._setPlayerData({
                        [key]: value
                    });
                    const data = await this._getPlayerData([key]);
                    this.playerData[key] = data[key] || '';
                } catch (error) {
                    this.lastDataKey = key;
                    this.Trigger(this.conditions.OnSetPlayerDataFailed);
                }
            },

            async LoadStats() {
                try {
                    this.playerStats = (await this._getPlayerFullStats()) || {};
                    this.Trigger(this.conditions.OnLoadPlayerStatsSuccess);
                } catch (err) {
                    this.Trigger(this.conditions.OnLoadPlayerStatsFailed);
                }
            },

            async LoadData() {
                try {
                    this.playerData = (await this._getPlayerFullData()) || {};
                    this.Trigger(this.conditions.OnLoadPlayerDataSuccess);
                } catch (err) {
                    this.Trigger(this.conditions.OnLoadPlayerDataFailed);
                }
            }
        };

        if (globalThis.C3) {
            C3.Plugins.Eponesh_YandexSDK.Acts = Acts;
        }

        Acts;
    }

}

{
    "use strict"; {
        var Exps = {
            PlayerName() {
                return this.player.name;
            },

            PlayerId() {
                return this.player.id;
            },

            PlayerPhotoSmall() {
                return this.player.photoSmall;
            },

            PlayerPhotoMedium() {
                return this.player.photoMedium;
            },

            PlayerPhotoLarge() {
                return this.player.photoLarge;
            },

            CurrentProductID() {
                return this.currentProductID || '';
            },

            CurrentProductTitle() {
                return this.currentProductTitle || '';
            },

            CurrentProductImage() {
                return this.currentProductImage || '';
            },

            CurrentProductDescription() {
                return this.currentProductDescription || '';
            },

            CurrentProductPrice() {
                return this.currentProductPrice || 0;
            },

            CurrentPurchaseID() {
                return this.currentPurchaseID || '';
            },

            CurrentPurchaseToken() {
                return this.currentPurchaseToken || '';
            },

            CurrentPurchaseSign() {
                return this.currentPurchaseSign || '';
            },

            GetPurchaseToken(productId) {
                return this.getPurchase(productId).purchaseToken || '';
            },

            LastPurchaseId() {
                return this.lastPurchaseID || '';
            },

            LastPurchaseToken() {
                return this.lastPurchaseToken || '';
            },

            GetProductTitle(productId) {
                return this.getProduct(productId).title || '';
            },

            GetProductDescription(productId) {
                return this.getProduct(productId).description || '';
            },

            GetProductImage(productId) {
                return this.getProduct(productId).imageURI || '';
            },

            GetProductPrice(productId) {
                return parseFloat(this.getProduct(productId).price || 0);
            },

            LastPlayerStateKey() {
                return this.lastStateKey || '';
            },

            LastPlayerDataKey() {
                return this.lastDataKey || '';
            },

            GetPlayerState(key) {
                return this.playerStats[key] || 0;
            },

            GetPlayerData(key) {
                return this.playerData[key] || '';
            },

            LastBanner() {
                return this.lastBannerID;
            }
        };

        if (globalThis.C3) {
            C3.Plugins.Eponesh_YandexSDK.Exps = Exps;
        }

        Exps;
    }

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Plugins.DrawingCanvas = class DrawingCanvasPlugin extends C3.SDKPluginBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.DrawingCanvas.Type = class DrawingCanvasType extends C3.SDKTypeBase {
            constructor(objectClass) {
                super(objectClass)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const RESOLUTION_MODE = 0;
        const INITIALLY_VISIBLE = 1;
        const ORIGIN = 2;
        const MULTISAMPLING = 3;
        const tempColor = C3.New(C3.Color);
        const tempColor2 = C3.New(C3.Color);
        const tempRect = C3.New(C3.Rect);
        const tempQuad = C3.New(C3.Quad);

        function ClonePolyArray(arr) {
            return arr.map(p => p.slice(0))
        }

        function SortByInstanceZIndex(a, b) {
            return a.GetWorldInfo().GetZIndex() - b.GetWorldInfo().GetZIndex()
        }
        let drawDepth = 0;
        C3.Plugins.DrawingCanvas.Instance = class DrawingCanvasInstance extends C3.SDKWorldInstanceBase {
            constructor(inst,
                properties) {
                super(inst);
                this._renderTarget = null;
                this._rcTex = C3.New(C3.Rect);
                const wi = this.GetWorldInfo();
                this._isFixedResolution = false;
                this._fixedResolutionWidth = Math.floor(wi.GetWidth());
                this._fixedResolutionHeight = Math.floor(wi.GetHeight());
                this._multisampling = 0;
                this._texRenderTarget = null;
                this._drawCommands = [];
                this._currentPoly = [];
                this._drawBlendMode = 0;
                this._drawScale = 1;
                this._texScale = 1;
                this._lineDashTexture = null;
                this._savedImageUrl = "";
                this._snapshot = null;
                this._tempRect = C3.New(C3.Rect);
                this._deviceQuadUnrotated =
                    C3.New(C3.Quad);
                this._deviceQuadRotated = C3.New(C3.Quad);
                if (properties) {
                    this._isFixedResolution = properties[RESOLUTION_MODE] === 1;
                    wi.SetVisible(!!properties[INITIALLY_VISIBLE]);
                    this._multisampling = [0, 2, 4, 8][properties[MULTISAMPLING]]
                }
                const renderer = this._runtime.GetRenderer();
                this._SetDrawingBlendMode(0);
                if (renderer.IsWebGL() && renderer.GetWebGLVersionNumber() < 2) this._multisampling = 0;
                this._StartTicking2()
            }
            Release() {
                if (this._renderTarget) {
                    this._renderTarget.GetRenderer().DeleteRenderTarget(this._renderTarget);
                    this._renderTarget = null
                }
                if (this._texRenderTarget) {
                    this._texRenderTarget.GetRenderer().DeleteRenderTarget(this._texRenderTarget);
                    this._texRenderTarget = null
                }
                C3.clearArray(this._drawCommands);
                super.Release()
            }
            IsFixedResolutionMode() {
                return this._isFixedResolution
            }
            _GetLineDashTexture() {
                this._MaybeCreateLineDashTexture();
                return this._lineDashTexture
            }
            _MaybeCreateLineDashTexture() {
                if (this._lineDashTexture) return;
                const canvas = C3.CreateCanvas(512, 8);
                const ctx = canvas.getContext("2d");
                ctx.clearRect(0, 0, 512, 8);
                ctx.fillStyle = "white";
                ctx.fillRect(0, 0, 256, 8);
                this._lineDashTexture = this._runtime.GetRenderer().CreateStaticTexture(canvas, {
                    wrapX: "repeat",
                    sampling: this._runtime.GetSampling()
                })
            }
            _SetDrawingBlendMode(bm) {
                this._drawBlendMode = bm
            }
            _ApplyCurrentDrawingBlendMode(renderer) {
                renderer.SetBlendMode(this._drawBlendMode)
            }
            _AddDrawCommand(cmd) {
                this._drawCommands.push(cmd);
                this._runtime.UpdateRender()
            }
            _SetFixedResolutionMode(fixedWidth, fixedHeight) {
                this._isFixedResolution = true;
                this._fixedResolutionWidth = Math.floor(fixedWidth);
                this._fixedResolutionHeight = Math.floor(fixedHeight)
            }
            _SetAutoResolutionMode() {
                this._isFixedResolution = false
            }
            _ClearCanvas(color) {
                C3.clearArray(this._drawCommands);
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.ClearCanvas(color))
            }
            _ClearRect(left, top, right, bottom, color) {
                if (left === right || top === bottom) return;
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.ClearRect(left, top, right, bottom, color))
            }
            _FillRect(left, top, right, bottom, color) {
                if (left === right || top === bottom) return;
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.FillRect(left,
                    top, right, bottom, color))
            }
            _FillLinearGradient(left, top, right, bottom, color1, color2, dir) {
                if (left === right || top === bottom) return;
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.FillLinearGradient(left, top, right, bottom, color1, color2, dir))
            }
            _FillEllipse(x, y, radiusX, radiusY, color, isSmooth) {
                if (radiusX <= 0 || radiusY <= 0) return;
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.FillEllipse(x, y, radiusX, radiusY, color, isSmooth))
            }
            _OutlineEllipse(x, y, radiusX, radiusY, color, thickness, isSmooth) {
                if (radiusX <=
                    0 || radiusY <= 0 || thickness <= 0) return;
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.OutlineEllipse(x, y, radiusX, radiusY, color, thickness, isSmooth))
            }
            _OutlineRect(left, top, right, bottom, color, thickness) {
                if (left === right || top === bottom || thickness <= 0) return;
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.OutlineRect(left, top, right, bottom, color, thickness))
            }
            _Line(x1, y1, x2, y2, color, thickness, capStr) {
                if (x1 === x2 && y1 === y2 || thickness <= 0) return;
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.Line(x1,
                    y1, x2, y2, color, thickness, capStr))
            }
            _LineDashed(x1, y1, x2, y2, color, thickness, dashLength, capStr) {
                if (x1 === x2 && y1 === y2 || thickness <= 0 || dashLength <= 0) return;
                const dashTex = this._GetLineDashTexture();
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.LineDashed(x1, y1, x2, y2, color, thickness, dashLength, dashTex, capStr))
            }
            _LinePoly(polyArr, color, thickness, capStr) {
                if (polyArr.length < 2 || thickness <= 0) return;
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.LinePoly(ClonePolyArray(polyArr), color,
                    thickness, capStr))
            }
            _LineDashedPoly(polyArr, color, thickness, dashLength, capStr) {
                if (polyArr.length < 2 || thickness <= 0 || dashLength <= 0) return;
                const dashTex = this._GetLineDashTexture();
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.LineDashedPoly(ClonePolyArray(polyArr), color, thickness, dashLength, dashTex, capStr))
            }
            _FillPoly(polyArr, color) {
                if (polyArr.length < 3) return;
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.FillPoly(ClonePolyArray(polyArr), color))
            }
            _SetDrawBlend(blendMode) {
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.SetDrawBlend(blendMode))
            }
            _PasteInstances(instanceArr,
                includeFx) {
                const myWi = this.GetWorldInfo();
                const myBbox = myWi.GetBoundingBox();
                const myQuad = myWi.GetBoundingQuad();
                const instances = instanceArr.filter(inst => {
                    const instWi = inst.GetWorldInfo();
                    return instWi && myBbox.intersectsRect(instWi.GetBoundingBox()) && (myWi.GetAngle() === 0 || myQuad.intersectsQuad(instWi.GetBoundingQuad()))
                });
                if (instances.length === 0) return;
                instances.sort(SortByInstanceZIndex);
                let resolve = null;
                const ret = new Promise(r => resolve = r);
                this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.DrawInstances(instances,
                    includeFx, myWi, resolve));
                return ret
            }
            _GetPixelScale() {
                return 1 / (this._drawScale * this._texScale)
            }
            _UpdateRenderTargetSize(renderer, rtWidth, rtHeight) {
                if (this._renderTarget) renderer.DeleteRenderTarget(this._renderTarget);
                this._renderTarget = renderer.CreateRenderTarget({
                    width: rtWidth,
                    height: rtHeight,
                    sampling: this._runtime.GetSampling(),
                    isSampled: this._multisampling === 0,
                    canReadPixels: this._multisampling === 0,
                    canUpdate: this._multisampling === 0,
                    multisampling: this._multisampling
                });
                if (this._multisampling > 0) {
                    if (this._texRenderTarget) renderer.DeleteRenderTarget(this._texRenderTarget);
                    this._texRenderTarget = renderer.CreateRenderTarget({
                        width: rtWidth,
                        height: rtHeight,
                        sampling: this._runtime.GetSampling(),
                        isSampled: true,
                        canReadPixels: true,
                        canUpdate: true
                    })
                }
                renderer.SetTexture(null)
            }
            _GetRenderTarget() {
                return this._renderTarget
            }
            _GetTexRenderTarget() {
                return this._texRenderTarget
            }
            GetMultisampling() {
                return this._multisampling
            }
            _SetRenderTargetDeviceTransform(renderer) {
                this._runtime.GetCanvasManager().SetDeviceTransform(renderer, this._renderTarget.GetWidth(), this._renderTarget.GetHeight(),
                    false)
            }
            HasAnyDrawingCommandInQueue() {
                return this._drawCommands.some(c => !(c instanceof C3.Plugins.DrawingCanvas.DrawCommand.SaveImage))
            }
            _CalculateUnrotatedDeviceCoords(outRect, outQuad) {
                const wi = this.GetWorldInfo();
                const layer = wi.GetLayer();
                const layout = layer.GetLayout();
                const angle = wi.GetAngle();
                const layerAngle = layer.GetOwnAngle();
                const layoutAngle = layout.GetAngle();
                if (angle !== 0 || layerAngle !== 0 || layoutAngle !== 0) {
                    layout.SetAngle(0);
                    layer.SetAngle(0);
                    wi.SetAngle(0);
                    wi.SetBboxChanged()
                }
                const quad = wi.GetBoundingQuad();
                const [dl, dt] = layer.LayerToDrawSurface(quad.getTlx(), quad.getTly());
                const [dr, db] = layer.LayerToDrawSurface(quad.getBrx(), quad.getBry());
                const offX = dl - Math.round(dl);
                const offY = dt - Math.round(dt);
                outRect.set(dl, dt, dr, db);
                outRect.offset(-offX, -offY);
                outRect.normalize();
                outQuad.setFromRect(outRect);
                if (angle !== 0 || layerAngle !== 0 || layoutAngle !== 0) {
                    layout.SetAngle(layoutAngle);
                    layer.SetAngle(layerAngle);
                    wi.SetAngle(angle);
                    wi.SetBboxChanged()
                }
            }
            _CalculateRotatedDeviceCoords(outQuad) {
                const wi = this.GetWorldInfo();
                const layer = wi.GetLayer();
                const layout = layer.GetLayout();
                const layerAngle = layer.GetOwnAngle();
                const layoutAngle = layout.GetAngle();
                if (layerAngle !== 0 || layoutAngle !== 0) {
                    layout.SetAngle(0);
                    layer.SetAngle(0)
                }
                const quad = wi.GetBoundingQuad();
                const [dtlx, dtly] = layer.LayerToDrawSurface(quad.getTlx(), quad.getTly());
                const [dtrx, dtry] = layer.LayerToDrawSurface(quad.getTrx(), quad.getTry());
                const [dbrx, dbry] = layer.LayerToDrawSurface(quad.getBrx(), quad.getBry());
                const [dblx, dbly] = layer.LayerToDrawSurface(quad.getBlx(),
                    quad.getBly());
                const offX = dtlx - Math.round(dtlx);
                const offY = dtly - Math.round(dtly);
                outQuad.set(dtlx, dtly, dtrx, dtry, dbrx, dbry, dblx, dbly);
                outQuad.offset(offX, offY);
                if (layerAngle !== 0 || layoutAngle !== 0) {
                    layout.SetAngle(layoutAngle);
                    layer.SetAngle(layerAngle)
                }
            }
            _CalculateSurfaceDeviceSize() {
                const renderer = this._runtime.GetRenderer();
                const tempRect = this._tempRect;
                this._CalculateUnrotatedDeviceCoords(tempRect, this._deviceQuadUnrotated);
                this._CalculateRotatedDeviceCoords(this._deviceQuadRotated);
                let rtWidth =
                    0;
                let rtHeight = 0;
                if (this._isFixedResolution) {
                    rtWidth = this._fixedResolutionWidth;
                    rtHeight = this._fixedResolutionHeight;
                    if (renderer.IsWebGL()) this._rcTex.set(0, 1, 1, 0);
                    else this._rcTex.set(0, 0, 1, 1)
                } else {
                    const EPSILON = .001;
                    rtWidth = Math.ceil(tempRect.width() + EPSILON);
                    rtHeight = Math.ceil(tempRect.height() + EPSILON);
                    if (renderer.IsWebGL()) this._rcTex.set(0, 1, tempRect.width() / rtWidth, 1 - tempRect.height() / rtHeight);
                    else this._rcTex.set(0, 0, tempRect.width() / rtWidth, tempRect.height() / rtHeight)
                }
                const maxTextureSize =
                    renderer.GetMaxTextureSize();
                const maxRtDim = Math.max(rtWidth, rtHeight);
                if (maxRtDim > maxTextureSize) {
                    this._texScale = maxTextureSize / maxRtDim;
                    rtWidth = Math.round(rtWidth * this._texScale);
                    rtHeight = Math.round(rtHeight * this._texScale)
                } else this._texScale = 1;
                return [rtWidth, rtHeight]
            }
            _OnResolutionChanged() {
                this.DispatchScriptEvent("resolutionchange");
                this.Trigger(C3.Plugins.DrawingCanvas.Cnds.OnResolutionChanged)
            }
            _MaybeCreateRenderTarget() {
                if (this._renderTarget) return;
                const [rtWidth, rtHeight] = this._CalculateSurfaceDeviceSize();
                if (rtWidth <= 0 || rtHeight <= 0) return;
                this._drawScale = tempRect.width() / this.GetWorldInfo().GetWidth();
                this._UpdateRenderTargetSize(this._runtime.GetRenderer(), rtWidth, rtHeight);
                this._OnResolutionChanged()
            }
            Tick2() {
                const renderer = this._runtime.GetRenderer();
                const wi = this.GetWorldInfo();
                const tempRect = this._tempRect;
                ++drawDepth;
                const [rtWidth, rtHeight] = this._CalculateSurfaceDeviceSize();
                if (rtWidth <= 0 || rtHeight <= 0) {
                    --drawDepth;
                    return
                }
                this._drawScale = this._isFixedResolution ? 1 : tempRect.width() / wi.GetWidth();
                const drawScale = this._drawScale * this._texScale;
                const didRenderTargetChange = !this._renderTarget || this._renderTarget.GetWidth() !== rtWidth || this._renderTarget.GetHeight() !== rtHeight;
                if (didRenderTargetChange) this._OnResolutionChanged();
                if (this._drawCommands.length > 0 || !this._renderTarget) {
                    if (!this._renderTarget || didRenderTargetChange && this.HasAnyDrawingCommandInQueue()) this._UpdateRenderTargetSize(renderer, rtWidth, rtHeight);
                    renderer.SetRenderTarget(this._renderTarget);
                    this._SetRenderTargetDeviceTransform(renderer);
                    this._ApplyCurrentDrawingBlendMode(renderer);
                    if (renderer.IsWebGPU() && this._multisampling > 0) renderer.SetRenderingToMultisampleCount(this._multisampling);
                    for (const dc of this._drawCommands) dc.Do(renderer, drawScale, this);
                    C3.clearArray(this._drawCommands);
                    renderer.SetAlphaBlend();
                    if (renderer.IsWebGPU() && this._multisampling > 0) renderer.SetRenderingToMultisampleCount(0);
                    if (this._multisampling > 0) {
                        renderer.SetRenderTarget(this._texRenderTarget);
                        renderer.CopyRenderTarget(this._renderTarget, "crop")
                    }
                }--drawDepth
            }
            Draw(renderer) {
                const wi =
                    this.GetWorldInfo();
                const layer = wi.GetLayer();
                const canvasManager = this._runtime.GetCanvasManager();
                const lastRenderTarget = renderer.GetRenderTarget();
                let quad = this._deviceQuadUnrotated;
                if (!this._renderTarget) return;
                if (renderer.IsWebGPU()) renderer._MaybeDoPendingClearRenderPass(this._renderTarget);
                if (this._multisampling === 0) renderer.SetTexture(this._renderTarget.GetTexture());
                else renderer.SetTexture(this._texRenderTarget.GetTexture());
                let didChangeTransform = false;
                if (drawDepth > 0)
                    if (this._inst._IsDrawingWithEffects()) quad =
                        wi.GetBoundingQuad();
                    else {
                        canvasManager.SetDeviceTransform(renderer, lastRenderTarget.GetWidth(), lastRenderTarget.GetHeight(), false);
                        didChangeTransform = true;
                        quad = this._deviceQuadRotated
                    }
                else if (wi.GetAngle() === 0 && layer.GetAngle() === 0 && !wi.HasMesh() && layer.RendersIn2DMode()) {
                    canvasManager.SetDeviceTransform(renderer);
                    didChangeTransform = true
                } else quad = wi.GetBoundingQuad();
                if (wi.HasMesh()) this._DrawMesh(renderer, wi);
                else renderer.Quad3(quad, this._rcTex);
                if (didChangeTransform) layer._SetTransform(renderer,
                    false);
                renderer.SetTexture(null)
            }
            _DrawMesh(renderer, wi) {
                const transformedMesh = wi.GetTransformedMesh();
                if (wi.IsMeshChanged()) {
                    wi.CalculateBbox(tempRect, tempQuad, false);
                    transformedMesh.CalculateTransformedMesh(wi.GetSourceMesh(), tempQuad, this._rcTex);
                    wi.SetMeshChanged(false)
                }
                transformedMesh.Draw(renderer)
            }
            GetSnapshotPixel(x, y) {
                if (!this._snapshot) return [0, 0, 0, 0];
                const width = this._snapshot.width;
                const height = this._snapshot.height;
                x = Math.floor(x);
                if (this._runtime.GetRenderer().IsWebGL()) y = height - 1 - Math.floor(y);
                else y = Math.floor(y);
                if (x < 0 || y < 0 || x >= width || y >= height) return [0, 0, 0, 0];
                const data = this._snapshot.data;
                const ptr = y * width * 4 + x * 4;
                let r = data[ptr] / 255;
                let g = data[ptr + 1] / 255;
                let b = data[ptr + 2] / 255;
                let a = data[ptr + 3] / 255;
                if (a !== 0) {
                    r /= a;
                    g /= a;
                    b /= a
                }
                return [r * 100, g * 100, b * 100, a * 100]
            }
            SetSnapshotPixel(x, y, rgb) {
                if (!this._snapshot) return [0, 0, 0, 0];
                tempColor.setFromRgbValue(rgb);
                tempColor.premultiply();
                const width = this._snapshot.width;
                const height = this._snapshot.height;
                x = Math.floor(x);
                y = height - 1 - Math.floor(y);
                if (x < 0 ||
                    y < 0 || x >= width || y >= height) return;
                const data = this._snapshot.data;
                const ptr = y * width * 4 + x * 4;
                data[ptr] = Math.floor(tempColor.getR() * 255);
                data[ptr + 1] = Math.floor(tempColor.getG() * 255);
                data[ptr + 2] = Math.floor(tempColor.getB() * 255);
                data[ptr + 3] = Math.floor(tempColor.getA() * 255)
            }
            GetImagePixelData() {
                return new Promise(resolve => {
                    this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.SaveImage(async imageData => {
                        const imgDataBuffer = imageData.data.buffer;
                        const width = imageData.width;
                        const height = imageData.height;
                        const processedBuffer = await this._runtime.AddJob("ProcessImageData", {
                            "buffer": imgDataBuffer,
                            "width": width,
                            "height": height,
                            "unpremultiply": true,
                            "flipY": true
                        }, [imgDataBuffer]);
                        resolve(new ImageData(new Uint8ClampedArray(processedBuffer), width, height))
                    }))
                })
            }
            LoadImagePixelData(imageData, premultiplyAlpha, flipY) {
                this._MaybeCreateRenderTarget();
                if (!this._renderTarget) throw new Error("invalid canvas size");
                if (imageData.width !== this._renderTarget.GetWidth() || imageData.height !== this._renderTarget.GetHeight()) throw new Error(`wrong size ImageData: expected ${this._renderTarget.GetWidth()} x ${this._renderTarget.GetHeight()}, got ${imageData.width} x ${imageData.height}`);
                C3.clearArray(this._drawCommands);
                const renderer = this._runtime.GetRenderer();
                if (this._texRenderTarget) {
                    const lastRenderTarget = renderer.GetRenderTarget();
                    const texture = this._texRenderTarget.GetTexture();
                    renderer.UpdateTexture(imageData, texture, {
                        premultiplyAlpha: !!premultiplyAlpha,
                        flipY: !!flipY
                    });
                    renderer.SetRenderTarget(this._renderTarget);
                    renderer.CopyRenderTarget(this._texRenderTarget, "crop");
                    renderer.SetRenderTarget(lastRenderTarget)
                } else {
                    const texture = this._renderTarget.GetTexture();
                    renderer.UpdateTexture(imageData,
                        texture, {
                            premultiplyAlpha: !!premultiplyAlpha,
                            flipY: !!flipY
                        })
                }
                this._runtime.UpdateRender()
            }
            GetScriptInterfaceClass() {
                return self.IDrawingCanvasInstance
            }
        };
        const map = new WeakMap;

        function arrToColor(arr) {
            tempColor.setFromJSON(arr);
            return tempColor
        }

        function arrToColor2(arr) {
            tempColor2.setFromJSON(arr);
            return tempColor2
        }
        const VALID_GRADIENT_DIRECTIONS = ["horizontal", "vertical"];
        const VALID_LINE_CAPS = new Set(["butt", "square"]);

        function ValidateLineCap(capStr) {
            if (!VALID_LINE_CAPS.has(capStr)) throw new Error("invalid line cap");
        }

        function ValidatePoly(polyArr) {
            C3X.RequireArray(polyArr);
            for (const p of polyArr) {
                C3X.RequireArray(p);
                C3X.RequireFiniteNumber(p[0]);
                C3X.RequireFiniteNumber(p[1])
            }
        }
        const BLEND_MODE_TO_INDEX = new Map([
            ["normal", 0],
            ["additive", 1],
            ["copy", 3],
            ["destination-over", 4],
            ["source-in", 5],
            ["destination-in", 6],
            ["source-out", 7],
            ["destination-out", 8],
            ["source-atop", 9],
            ["destination-atop", 10]
        ]);
        self.IDrawingCanvasInstance = class IDrawingCanvasInstance extends self.IWorldInstance {
            constructor() {
                super();
                map.set(this, self.IInstance._GetInitInst().GetSdkInstance())
            }
            setFixedResolutionMode(fixedWidth,
                fixedHeight) {
                C3X.RequireFiniteNumber(fixedWidth);
                C3X.RequireFiniteNumber(fixedHeight);
                map.get(this)._SetFixedResolutionMode(fixedWidth, fixedHeight)
            }
            setAutoResolutionMode() {
                map.get(this)._SetAutoResolutionMode()
            }
            clearCanvas(rgbArr) {
                C3X.RequireArray(rgbArr);
                map.get(this)._ClearCanvas(arrToColor(rgbArr))
            }
            clearRect(left, top, right, bottom, rgbArr) {
                C3X.RequireFiniteNumber(left);
                C3X.RequireFiniteNumber(top);
                C3X.RequireFiniteNumber(right);
                C3X.RequireFiniteNumber(bottom);
                C3X.RequireArray(rgbArr);
                map.get(this)._ClearRect(left,
                    top, right, bottom, arrToColor(rgbArr))
            }
            fillRect(left, top, right, bottom, rgbArr) {
                C3X.RequireFiniteNumber(left);
                C3X.RequireFiniteNumber(top);
                C3X.RequireFiniteNumber(right);
                C3X.RequireFiniteNumber(bottom);
                C3X.RequireArray(rgbArr);
                map.get(this)._FillRect(left, top, right, bottom, arrToColor(rgbArr))
            }
            fillLinearGradient(left, top, right, bottom, rgbArr1, rgbArr2, dirStr = "horizontal") {
                C3X.RequireFiniteNumber(left);
                C3X.RequireFiniteNumber(top);
                C3X.RequireFiniteNumber(right);
                C3X.RequireFiniteNumber(bottom);
                C3X.RequireArray(rgbArr1);
                C3X.RequireArray(rgbArr2);
                const dir = VALID_GRADIENT_DIRECTIONS.indexOf(dirStr);
                if (dir < 0) throw new Error("invalid gradient direction");
                map.get(this)._FillLinearGradient(left, top, right, bottom, arrToColor(rgbArr1), arrToColor2(rgbArr2), dir)
            }
            fillEllipse(x, y, radiusX, radiusY, rgbArr, isSmooth = true) {
                C3X.RequireFiniteNumber(x);
                C3X.RequireFiniteNumber(y);
                C3X.RequireFiniteNumber(radiusX);
                C3X.RequireFiniteNumber(radiusY);
                C3X.RequireArray(rgbArr);
                map.get(this)._FillEllipse(x, y, radiusX, radiusY, arrToColor(rgbArr), !!isSmooth)
            }
            outlineEllipse(x,
                y, radiusX, radiusY, rgbArr, thickness, isSmooth = true) {
                C3X.RequireFiniteNumber(x);
                C3X.RequireFiniteNumber(y);
                C3X.RequireFiniteNumber(radiusX);
                C3X.RequireFiniteNumber(radiusY);
                C3X.RequireArray(rgbArr);
                C3X.RequireFiniteNumber(thickness);
                map.get(this)._OutlineEllipse(x, y, radiusX, radiusY, arrToColor(rgbArr), thickness, !!isSmooth)
            }
            outlineRect(left, top, right, bottom, rgbArr, thickness) {
                C3X.RequireFiniteNumber(left);
                C3X.RequireFiniteNumber(top);
                C3X.RequireFiniteNumber(right);
                C3X.RequireFiniteNumber(bottom);
                C3X.RequireArray(rgbArr);
                C3X.RequireFiniteNumber(thickness);
                map.get(this)._OutlineRect(left, top, right, bottom, arrToColor(rgbArr), thickness)
            }
            line(x1, y1, x2, y2, rgbArr, thickness, capStr = "butt") {
                C3X.RequireFiniteNumber(x1);
                C3X.RequireFiniteNumber(y1);
                C3X.RequireFiniteNumber(x2);
                C3X.RequireFiniteNumber(y2);
                C3X.RequireArray(rgbArr);
                C3X.RequireFiniteNumber(thickness);
                ValidateLineCap(capStr);
                map.get(this)._Line(x1, y1, x2, y2, arrToColor(rgbArr), thickness, capStr)
            }
            lineDashed(x1, y1, x2, y2, rgbArr, thickness, dashLength, capStr = "butt") {
                C3X.RequireFiniteNumber(x1);
                C3X.RequireFiniteNumber(y1);
                C3X.RequireFiniteNumber(x2);
                C3X.RequireFiniteNumber(y2);
                C3X.RequireArray(rgbArr);
                C3X.RequireFiniteNumber(thickness);
                C3X.RequireFiniteNumber(dashLength);
                ValidateLineCap(capStr);
                map.get(this)._LineDashed(x1, y1, x2, y2, arrToColor(rgbArr), thickness, dashLength, capStr)
            }
            linePoly(polyArr, rgbArr, thickness, capStr = "butt") {
                ValidatePoly(polyArr);
                C3X.RequireArray(rgbArr);
                C3X.RequireFiniteNumber(thickness);
                ValidateLineCap(capStr);
                map.get(this)._LinePoly(polyArr, arrToColor(rgbArr), thickness,
                    capStr)
            }
            lineDashedPoly(polyArr, rgbArr, thickness, dashLength, capStr = "butt") {
                ValidatePoly(polyArr);
                C3X.RequireArray(rgbArr);
                C3X.RequireFiniteNumber(thickness);
                C3X.RequireFiniteNumber(dashLength);
                ValidateLineCap(capStr);
                map.get(this)._LineDashedPoly(polyArr, arrToColor(rgbArr), thickness, dashLength, capStr)
            }
            fillPoly(polyArr, rgbArr) {
                ValidatePoly(polyArr);
                C3X.RequireArray(rgbArr);
                map.get(this)._FillPoly(polyArr, arrToColor(rgbArr))
            }
            setDrawBlend(blendMode) {
                const bmIndex = BLEND_MODE_TO_INDEX.get(blendMode);
                if (typeof bmIndex !==
                    "number") throw new Error("invalid blend mode");
                map.get(this)._SetDrawBlend(bmIndex)
            }
            pasteInstances(instanceArr, includeFx = true) {
                C3X.RequireArray(instanceArr);
                const inst = map.get(this);
                const runtime = inst.GetRuntime();
                return inst._PasteInstances(instanceArr.map(i => runtime._UnwrapIWorldInstance(i)), !!includeFx)
            }
            getImagePixelData() {
                return map.get(this).GetImagePixelData()
            }
            loadImagePixelData(imageData, premultiplyAlpha = false) {
                C3X.RequireInstanceOf(imageData, ImageData);
                map.get(this).LoadImagePixelData(imageData,
                    premultiplyAlpha, true)
            }
            get surfaceDeviceWidth() {
                const inst = map.get(this);
                inst._MaybeCreateRenderTarget();
                const rt = inst._GetRenderTarget();
                if (!rt) throw new Error("invalid canvas size");
                return rt.GetWidth()
            }
            get surfaceDeviceHeight() {
                const inst = map.get(this);
                inst._MaybeCreateRenderTarget();
                const rt = inst._GetRenderTarget();
                if (!rt) throw new Error("invalid canvas size");
                return rt.GetHeight()
            }
            getSurfaceDeviceSize() {
                const inst = map.get(this);
                inst._MaybeCreateRenderTarget();
                const rt = inst._GetRenderTarget();
                if (!rt) throw new Error("invalid canvas size");
                return [rt.GetWidth(), rt.GetHeight()]
            }
            get pixelScale() {
                return map.get(this)._GetPixelScale()
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.DrawingCanvas.Cnds = {
            OnSavedImage() {
                return true
            },
            OnSnapshot() {
                return true
            },
            OnResolutionChanged() {
                return true
            }
        }
    } {
        const C3 = self.C3;
        const tempColor1 = C3.New(C3.Color);
        const tempColor2 = C3.New(C3.Color);

        function RgbToColor(rgb) {
            tempColor1.setFromRgbValue(rgb);
            return tempColor1
        }

        function RgbToColor2(rgb) {
            tempColor2.setFromRgbValue(rgb);
            return tempColor2
        }
        C3.Plugins.DrawingCanvas.Acts = {
            SetEffect(effect) {
                this.GetWorldInfo().SetBlendMode(effect);
                this._runtime.UpdateRender()
            },
            SetResolutionMode(mode, fixedWidth, fixedHeight) {
                if (mode === 1) this._SetFixedResolutionMode(fixedWidth, fixedHeight);
                else this._SetAutoResolutionMode()
            },
            ClearCanvas(rgb) {
                this._ClearCanvas(RgbToColor(rgb))
            },
            ClearRect(left, top, right, bottom, rgb) {
                this._ClearRect(left, top, right, bottom, RgbToColor(rgb))
            },
            FillRect(left, top, right, bottom, rgb) {
                this._FillRect(left, top, right, bottom, RgbToColor(rgb))
            },
            FillLinearGradient(left, top, right, bottom, rgb1, rgb2, dir) {
                this._FillLinearGradient(left, top, right, bottom, RgbToColor(rgb1), RgbToColor2(rgb2), dir)
            },
            FillEllipse(x, y, radiusX, radiusY, rgb, edge) {
                this._FillEllipse(x, y, radiusX, radiusY, RgbToColor(rgb), edge !== 0)
            },
            OutlineEllipse(x,
                y, radiusX, radiusY, rgb, thickness, edge) {
                this._OutlineEllipse(x, y, radiusX, radiusY, RgbToColor(rgb), thickness, edge !== 0)
            },
            OutlineRect(left, top, right, bottom, rgb, thickness) {
                this._OutlineRect(left, top, right, bottom, RgbToColor(rgb), thickness)
            },
            Line(x1, y1, x2, y2, rgb, thickness, cap) {
                const capStr = cap === 0 ? "butt" : "square";
                this._Line(x1, y1, x2, y2, RgbToColor(rgb), thickness, capStr)
            },
            LineDashed(x1, y1, x2, y2, rgb, thickness, dashLength, cap) {
                const capStr = cap === 0 ? "butt" : "square";
                this._LineDashed(x1, y1, x2, y2, RgbToColor(rgb), thickness,
                    dashLength, capStr)
            },
            AddPolyPoint(x, y) {
                this._currentPoly.push([x, y])
            },
            ResetPoly() {
                C3.clearArray(this._currentPoly)
            },
            LinePoly(rgb, thickness, cap) {
                const capStr = cap === 0 ? "butt" : "square";
                this._LinePoly(this._currentPoly, RgbToColor(rgb), thickness, capStr)
            },
            LineDashedPoly(rgb, thickness, dashLength, cap) {
                const capStr = cap === 0 ? "butt" : "square";
                this._LineDashedPoly(this._currentPoly, RgbToColor(rgb), thickness, dashLength, capStr)
            },
            FillPoly(rgb) {
                this._FillPoly(this._currentPoly, RgbToColor(rgb))
            },
            SetDrawBlend(blendMode) {
                if (blendMode >=
                    2) blendMode++;
                this._SetDrawBlend(blendMode)
            },
            PasteObject(objectClass, includeFx) {
                if (!objectClass) return;
                return this._PasteInstances(objectClass.GetCurrentSol().GetInstances(), includeFx !== 0)
            },
            SaveImage(format, quality, x, y, width, height) {
                const formatStr = format === 0 ? "image/png" : "image/jpeg";
                quality /= 100;
                const areaRect = C3.New(C3.Rect);
                areaRect.setWH(x, y, width, height);
                return new Promise(resolve => {
                    this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.SaveImage(async imageData => {
                        const imgDataBuffer =
                            imageData.data.buffer;
                        const width = imageData.width;
                        const height = imageData.height;
                        const needFlipY = this._runtime.GetRenderer().IsWebGL();
                        const processedBuffer = await this._runtime.AddJob("ProcessImageData", {
                            "buffer": imgDataBuffer,
                            "width": width,
                            "height": height,
                            "unpremultiply": true,
                            "flipY": needFlipY && !C3.Supports.ImageBitmapOptions
                        }, [imgDataBuffer]);
                        imageData = new ImageData(new Uint8ClampedArray(processedBuffer), width, height);
                        let blob;
                        if (C3.Supports.ImageBitmapOptions) {
                            const imageBitmap = await createImageBitmap(imageData, {
                                "premultiplyAlpha": "none",
                                "imageOrientation": needFlipY ? "flipY" : "none"
                            });
                            blob = await C3.DrawableToBlob(imageBitmap, formatStr, quality)
                        } else blob = await C3.ImageDataToBlob(imageData, formatStr, quality);
                        if (this._savedImageUrl) URL.revokeObjectURL(this._savedImageUrl);
                        this._savedImageUrl = URL.createObjectURL(blob);
                        this.Trigger(C3.Plugins.DrawingCanvas.Cnds.OnSavedImage);
                        resolve()
                    }, areaRect))
                })
            },
            SaveSnapshot() {
                return new Promise(resolve => {
                    this._AddDrawCommand(new C3.Plugins.DrawingCanvas.DrawCommand.SaveImage(imageData => {
                        this._snapshot = imageData;
                        this.Trigger(C3.Plugins.DrawingCanvas.Cnds.OnSnapshot);
                        resolve()
                    }))
                })
            },
            ClearSnapshot() {
                this._snapshot = null
            },
            SnapshotSetPixel(x, y, rgb) {
                this.SetSnapshotPixel(x, y, rgb)
            },
            LoadSnapshot() {
                if (!this._snapshot || !this._renderTarget) return;
                if (this._snapshot.width !== this._renderTarget.GetWidth() || this._snapshot.height !== this._renderTarget.GetHeight()) return;
                this.LoadImagePixelData(this._snapshot, false)
            }
        }
    } {
        const C3 = self.C3;
        C3.Plugins.DrawingCanvas.Exps = {
            SavedImageURL() {
                return this._savedImageUrl
            },
            SnapshotRedAt(x, y) {
                return this.GetSnapshotPixel(x, y)[0]
            },
            SnapshotGreenAt(x, y) {
                return this.GetSnapshotPixel(x, y)[1]
            },
            SnapshotBlueAt(x, y) {
                return this.GetSnapshotPixel(x, y)[2]
            },
            SnapshotAlphaAt(x, y) {
                return this.GetSnapshotPixel(x, y)[3]
            },
            SnapshotWidth() {
                return this._snapshot ? this._snapshot.width : 0
            },
            SnapshotHeight() {
                return this._snapshot ? this._snapshot.height : 0
            },
            PixelScale() {
                return this._GetPixelScale()
            },
            SurfaceDeviceWidth() {
                const rt =
                    this._GetRenderTarget();
                return rt ? rt.GetWidth() : 0
            },
            SurfaceDeviceHeight() {
                const rt = this._GetRenderTarget();
                return rt ? rt.GetHeight() : 0
            }
        }
    };

}

{
    'use strict';
    const C3 = self.C3;
    const tempQuad = C3.New(C3.Quad);
    const tempUvQuad = C3.New(C3.Quad);
    const tempVector2 = C3.New(C3.Vector2);
    C3.Plugins.DrawingCanvas.DrawCommand = class DrawCommand {
        constructor() {}
        Do(renderer) {
            throw new Error("required override");
        }
    };
    const DrawCommand = C3.Plugins.DrawingCanvas.DrawCommand;
    DrawCommand.SaveImage = class SaveImageCommand extends DrawCommand {
        constructor(callback, areaRect) {
            super();
            this._callback = callback;
            this._areaRect = areaRect
        }
        Do(renderer, scale, canvasInst) {
            let readRenderTarget = renderer.GetRenderTarget();
            if (readRenderTarget.GetMultisampling() >= 2) {
                const texRenderTarget = canvasInst._GetTexRenderTarget();
                renderer.SetRenderTarget(texRenderTarget);
                renderer.CopyRenderTarget(readRenderTarget, "crop");
                renderer.SetRenderTarget(readRenderTarget);
                readRenderTarget = texRenderTarget
            }
            renderer.ReadBackRenderTargetToImageData(readRenderTarget,
                false, this._areaRect).then(this._callback)
        }
    };
    DrawCommand.ClearCanvas = class ClearCanvasCommand extends DrawCommand {
        constructor(color) {
            super();
            this._color = C3.New(C3.Color, color);
            this._color.premultiply()
        }
        Do(renderer) {
            renderer.Clear(this._color)
        }
    };
    DrawCommand.ClearRect = class ClearRectCommand extends DrawCommand {
        constructor(left, top, right, bottom, color) {
            super();
            this._rect = C3.New(C3.Rect);
            this._rect.set(left, top, right, bottom);
            this._color = C3.New(C3.Color, color);
            this._color.premultiply()
        }
        Do(renderer, scale, canvasInst) {
            this._rect.multiply(scale, scale);
            renderer.SetColorFillMode();
            renderer.SetColor(this._color);
            renderer.SetBlendMode(3);
            renderer.Rect(this._rect);
            canvasInst._ApplyCurrentDrawingBlendMode(renderer)
        }
    };
    DrawCommand.FillRect = class FillRectCommand extends DrawCommand {
        constructor(left, top, right, bottom, color) {
            super();
            this._rect = C3.New(C3.Rect);
            this._rect.set(left, top, right, bottom);
            this._color = C3.New(C3.Color, color);
            this._color.premultiply()
        }
        Do(renderer, scale) {
            renderer.SetColorFillMode();
            renderer.SetColor(this._color);
            this._rect.multiply(scale, scale);
            renderer.Rect(this._rect)
        }
    };
    DrawCommand.FillLinearGradient = class FillLinearGradientCommand extends DrawCommand {
        constructor(left, top, right, bottom, color1, color2, dir) {
            super();
            this._rect = C3.New(C3.Rect);
            this._rect.set(left, top, right, bottom);
            this._color1 = C3.New(C3.Color, color1);
            this._color2 = C3.New(C3.Color, color2);
            this._dir = dir
        }
        Do(renderer, scale) {
            renderer.SetLinearGradientFillMode();
            renderer.SetColor(this._color1);
            renderer.SetGradientColor(this._color2);
            this._rect.multiply(scale, scale);
            tempQuad.setFromRect(this._rect);
            if (this._dir ===
                0) tempUvQuad.set(0, 0, 1, 0, 1, 1, 0, 1);
            else tempUvQuad.set(0, 1, 0, 0, 1, 0, 1, 1);
            renderer.Quad4(tempQuad, tempUvQuad)
        }
    };
    DrawCommand.FillEllipse = class FillEllipseCommand extends DrawCommand {
        constructor(x, y, radiusX, radiusY, color, isSmooth) {
            super();
            this._rect = C3.New(C3.Rect);
            this._rect.set(x - radiusX, y - radiusY, x + radiusX, y + radiusY);
            this._color = C3.New(C3.Color, color);
            this._color.premultiply();
            this._isSmooth = isSmooth
        }
        Do(renderer, scale) {
            this._rect.multiply(scale, scale);
            if (this._isSmooth) {
                renderer.SetSmoothEllipseFillMode();
                renderer.SetColor(this._color);
                this._rect.inflate(.5, .5);
                renderer.SetEllipseParams(1 / this._rect.width(),
                    1 / this._rect.height());
                renderer.Rect(this._rect)
            } else {
                renderer.SetHardEllipseFillMode();
                renderer.SetColor(this._color);
                renderer.Rect(this._rect)
            }
        }
    };
    DrawCommand.OutlineEllipse = class OutlinellipseCommand extends DrawCommand {
        constructor(x, y, radiusX, radiusY, color, thickness, isSmooth) {
            super();
            this._rect = C3.New(C3.Rect);
            this._rect.set(x - radiusX, y - radiusY, x + radiusX, y + radiusY);
            this._color = C3.New(C3.Color, color);
            this._color.premultiply();
            this._thickness = thickness;
            this._isSmooth = isSmooth
        }
        Do(renderer, scale) {
            this._rect.multiply(scale, scale);
            if (this._isSmooth) {
                renderer.SetSmoothEllipseOutlineMode();
                renderer.SetColor(this._color);
                this._rect.inflate(.5, .5);
                renderer.SetEllipseParams(1 / this._rect.width(), 1 / this._rect.height(), this._thickness * scale);
                renderer.Rect(this._rect)
            } else {
                renderer.SetHardEllipseOutlineMode();
                renderer.SetEllipseParams(1 / this._rect.width(), 1 / this._rect.height(), this._thickness * scale);
                renderer.SetColor(this._color);
                renderer.Rect(this._rect)
            }
        }
    };
    DrawCommand.OutlineRect = class OutlineRectCommand extends DrawCommand {
        constructor(left, top, right, bottom, color, thickness) {
            super();
            this._rect = C3.New(C3.Rect);
            this._rect.set(left, top, right, bottom);
            this._color = C3.New(C3.Color, color);
            this._color.premultiply();
            this._thickness = thickness
        }
        Do(renderer, scale) {
            renderer.SetColorFillMode();
            renderer.SetColor(this._color);
            renderer.PushLineCapZag();
            renderer.PushLineWidth(this._thickness * scale);
            this._rect.multiply(scale, scale);
            renderer.LineRect2(this._rect);
            renderer.PopLineCap();
            renderer.PopLineWidth()
        }
    };
    DrawCommand.Line = class LineCommand extends DrawCommand {
        constructor(x1, y1, x2, y2, color, thickness, cap) {
            super();
            this._rect = C3.New(C3.Rect);
            this._rect.set(x1, y1, x2, y2);
            this._color = C3.New(C3.Color, color);
            this._color.premultiply();
            this._thickness = thickness;
            this._cap = cap
        }
        Do(renderer, scale) {
            renderer.SetColorFillMode();
            renderer.SetColor(this._color);
            renderer.PushLineCap(this._cap);
            renderer.PushLineWidth(this._thickness * scale);
            const rc = this._rect;
            rc.multiply(scale, scale);
            renderer.Line(rc.getLeft(), rc.getTop(),
                rc.getRight(), rc.getBottom());
            renderer.PopLineCap();
            renderer.PopLineWidth()
        }
    };
    DrawCommand.LinePoly = class LinePolyCommand extends DrawCommand {
        constructor(poly, color, thickness, cap) {
            super();
            this._poly = poly;
            this._color = C3.New(C3.Color, color);
            this._color.premultiply();
            this._thickness = thickness;
            this._cap = cap
        }
        Do(renderer, scale) {
            renderer.SetColorFillMode();
            renderer.SetColor(this._color);
            renderer.PushLineCap(this._cap);
            renderer.PushLineWidth(this._thickness * scale);
            const poly = this._poly;
            for (let i = 0, len = poly.length; i < len; ++i) {
                const j = (i + 1) % len;
                const x1 = poly[i][0] * scale;
                const y1 = poly[i][1] *
                    scale;
                const x2 = poly[j][0] * scale;
                const y2 = poly[j][1] * scale;
                renderer.Line(x1, y1, x2, y2)
            }
            renderer.PopLineCap();
            renderer.PopLineWidth()
        }
    };
    DrawCommand.LineDashed = class LineDashedCommand extends DrawCommand {
        constructor(x1, y1, x2, y2, color, thickness, dashLength, dashTex, cap) {
            super();
            this._rect = C3.New(C3.Rect);
            this._rect.set(x1, y1, x2, y2);
            this._color = C3.New(C3.Color, color);
            this._color.premultiply();
            this._thickness = thickness;
            this._dashLength = dashLength;
            this._dashTex = dashTex;
            this._cap = cap
        }
        Do(renderer, scale) {
            renderer.SetTextureFillMode();
            renderer.SetTexture(this._dashTex);
            renderer.SetColor(this._color);
            renderer.PushLineCap(this._cap);
            renderer.PushLineWidth(this._thickness *
                scale);
            const rc = this._rect;
            const numDashes = C3.distanceTo(rc.getLeft(), rc.getTop(), rc.getRight(), rc.getBottom()) / (this._dashLength * 2);
            rc.multiply(scale, scale);
            renderer.TexturedLine(rc.getLeft(), rc.getTop(), rc.getRight(), rc.getBottom(), 0, numDashes);
            renderer.PopLineCap();
            renderer.PopLineWidth()
        }
    };
    DrawCommand.LineDashedPoly = class LineDashedPolyCommand extends DrawCommand {
        constructor(poly, color, thickness, dashLength, dashTex, cap) {
            super();
            this._poly = poly;
            this._color = C3.New(C3.Color, color);
            this._color.premultiply();
            this._thickness = thickness;
            this._dashLength = dashLength;
            this._dashTex = dashTex;
            this._cap = cap
        }
        Do(renderer, scale) {
            renderer.SetTextureFillMode();
            renderer.SetTexture(this._dashTex);
            renderer.SetColor(this._color);
            renderer.PushLineCap(this._cap);
            renderer.PushLineWidth(this._thickness * scale);
            let u =
                0;
            const poly = this._poly;
            for (let i = 0, len = poly.length; i < len; ++i) {
                const j = (i + 1) % len;
                const x1 = poly[i][0];
                const y1 = poly[i][1];
                const x2 = poly[j][0];
                const y2 = poly[j][1];
                const v = u + C3.distanceTo(x1, y1, x2, y2) / (this._dashLength * 2);
                renderer.TexturedLine(x1 * scale, y1 * scale, x2 * scale, y2 * scale, u, v);
                u = v - Math.floor(v)
            }
            renderer.PopLineCap();
            renderer.PopLineWidth()
        }
    };
    DrawCommand.FillPoly = class FillPolyCommand extends DrawCommand {
        constructor(poly, color) {
            super();
            this._poly = poly;
            this._color = C3.New(C3.Color, color);
            this._color.premultiply()
        }
        Do(renderer, scale) {
            renderer.SetColorFillMode();
            renderer.SetColor(this._color);
            const poly = this._poly;
            for (let i = 0, len = poly.length; i < len; ++i) {
                const p = poly[i];
                p[0] *= scale;
                p[1] *= scale
            }
            const polyDecomp = self.polyDecomp;
            if (!polyDecomp.isSimple(poly)) return;
            polyDecomp.makeCCW(poly);
            polyDecomp.removeCollinearPoints(poly, C3.toRadians(.1));
            const convexPolygons = polyDecomp.quickDecomp(poly);
            for (const convexPoly of convexPolygons) renderer.ConvexPoly(convexPoly.flat())
        }
    };
    DrawCommand.SetDrawBlend = class SetDrawBlend extends DrawCommand {
        constructor(bm) {
            super();
            this._blendIndex = bm
        }
        Do(renderer, scale, canvasInst) {
            canvasInst._SetDrawingBlendMode(this._blendIndex);
            canvasInst._ApplyCurrentDrawingBlendMode(renderer)
        }
    };
    DrawCommand.DrawInstances = class DrawInstancesCommand extends DrawCommand {
        constructor(instances, includeFx, canvasWi, resolve) {
            super();
            const ownLayer = canvasWi.GetLayer();
            this._includeFx = includeFx;
            this._resolve = resolve;
            this._layoutTransform = ownLayer.GetLayout().SaveTransform();
            this._layerTransforms = new Map;
            this._layerTransforms.set(ownLayer, ownLayer.SaveTransform());
            this._instances = instances.map(inst => this._SaveInstanceState(inst, canvasWi))
        }
        _SaveInstanceState(inst, canvasWi) {
            const canvasAngle = canvasWi.GetAngle();
            const canvasLayer = canvasWi.GetLayer();
            const instWi = inst.GetWorldInfo();
            const instLayer = instWi.GetLayer();
            const oldX = instWi.GetX();
            const oldY = instWi.GetY();
            const oldWidth = instWi.GetWidth();
            const oldHeight = instWi.GetHeight();
            const oldAngle = instWi.GetAngle();
            if (!this._layerTransforms.has(instLayer)) this._layerTransforms.set(instLayer, instLayer.SaveTransform());
            const areLayerTransformsCompatible = canvasLayer.IsTransformCompatibleWith(instLayer);
            if (!areLayerTransformsCompatible) {
                const [dsx, dsy] = instLayer.LayerToDrawSurface(oldX,
                    oldY);
                const [tx, ty] = canvasLayer.DrawSurfaceToLayer(dsx, dsy);
                instWi.SetXY(tx, ty);
                const scaleFactor = instLayer.GetNormalScale() / canvasLayer.GetNormalScale();
                instWi.SetSize(oldWidth * scaleFactor, oldHeight * scaleFactor);
                const angleOffset = canvasLayer.GetOwnAngle() - instLayer.GetOwnAngle();
                instWi.OffsetAngle(angleOffset)
            }
            if (canvasAngle !== 0) {
                const canvasQuad = canvasWi.GetBoundingQuad();
                const canvasMidX = canvasQuad.midX();
                const canvasMidY = canvasQuad.midY();
                const sinA = -canvasWi.GetSinAngle();
                const cosA = canvasWi.GetCosAngle();
                tempVector2.set(oldX, oldY);
                tempVector2.offset(-canvasMidX, -canvasMidY);
                tempVector2.rotatePrecalc(sinA, cosA);
                tempVector2.offset(canvasMidX, canvasMidY);
                instWi.SetXY(tempVector2.getX(), tempVector2.getY());
                instWi.OffsetAngle(-canvasAngle)
            }
            if (canvasAngle !== 0 || !areLayerTransformsCompatible) instWi.SetBboxChanged();
            const ret = [inst, inst.SaveToJson("visual-state")];
            if (canvasAngle !== 0 || !areLayerTransformsCompatible) {
                instWi.SetXY(oldX, oldY);
                instWi.SetSize(oldWidth, oldHeight);
                instWi.SetAngle(oldAngle);
                instWi.SetBboxChanged()
            }
            return ret
        }
        Do(renderer,
            scale, canvasInst) {
            const canvasManager = canvasInst.GetRuntime().GetCanvasManager();
            const layer = canvasInst.GetWorldInfo().GetLayer();
            const layout = layer.GetLayout();
            const viewport = layer.GetViewport();
            const canvasBbox = canvasInst.GetWorldInfo().GetBoundingBox();
            const renderTarget = canvasInst._GetRenderTarget();
            const isMultisamplng = canvasInst.GetMultisampling() >= 2;
            const includeFx = this._includeFx;
            const restoreLayoutTransform = layout.SaveTransform();
            layout.RestoreTransform(this._layoutTransform);
            const restoreLayerTransforms =
                new Map;
            for (const [layer, transform] of this._layerTransforms) {
                restoreLayerTransforms.set(layer, layer.SaveTransform());
                layer.RestoreTransform(transform)
            }
            canvasManager.SetIsPastingToDrawingCanvas(true);
            const viewOffX = (viewport.width() - canvasBbox.width()) / -2;
            const viewOffY = (viewport.height() - canvasBbox.height()) / -2;
            const [canvasDeviceLeft, canvasDeviceTop] = layer.LayerToDrawSurface(canvasBbox.getLeft(), canvasBbox.getTop());
            canvasManager.SetDeviceTransformOffset(canvasDeviceLeft, canvasDeviceTop);
            const canvasOffX =
                canvasBbox.getLeft() - viewport.getLeft();
            const canvasOffY = canvasBbox.getTop() - viewport.getTop();
            const offX = viewOffX + canvasOffX;
            const offY = viewOffY + canvasOffY;
            const viewH = renderTarget.GetHeight();
            let effectiveScale = 1;
            if (canvasInst.IsFixedResolutionMode()) effectiveScale = renderTarget.GetWidth() / Math.floor(canvasBbox.width()) / layer.GetNormalScale();
            else effectiveScale = canvasManager.GetRenderScale() * self.devicePixelRatio;
            const effectiveViewH = viewH / effectiveScale;
            const pxOff = .5 / effectiveScale;
            renderer.SetProjectionMatrix(renderTarget.GetProjectionMatrix());
            layer._SetTransform(renderer, false, offX + pxOff, offY + pxOff, effectiveViewH);
            for (let i = 0, len = this._instances.length; i < len; ++i) {
                const info = this._instances[i];
                const inst = info[0];
                const instState = info[1];
                if (inst.IsDestroyed()) continue;
                const wi = inst.GetWorldInfo();
                const oldState = inst.SaveToJson("visual-state");
                inst.LoadFromJson(instState, "visual-state");
                wi.GetBoundingBox();
                if (includeFx && wi.HasAnyActiveEffect() && (!isMultisamplng || !wi.GetInstanceEffectList().HasAnyActiveBackgroundBlendingEffect())) {
                    const opts = {
                        drawContentHook: (effectChain, renderer, drawContent) => {
                            layer._SetTransform(renderer);
                            drawContent();
                            effectChain._SetDeviceTransform(renderer)
                        },
                        compositOffX: canvasDeviceLeft,
                        compositOffY: canvasDeviceTop,
                        updateOwnProjection: true
                    };
                    inst._SetIsDrawingWithEffects(true);
                    if (layer._DrawInstanceWithEffects(inst, wi, renderer, renderTarget, opts)) layer._SetTransform(renderer, false, offX + pxOff, offY + pxOff, effectiveViewH);
                    inst._SetIsDrawingWithEffects(false)
                } else layer._DrawInstance(inst, wi, renderer);
                inst.LoadFromJson(oldState,
                    "visual-state")
            }
            canvasManager.SetDeviceTransformOffset(0, 0);
            canvasManager.SetIsPastingToDrawingCanvas(false);
            canvasInst._SetRenderTargetDeviceTransform(renderer);
            canvasInst._ApplyCurrentDrawingBlendMode(renderer);
            layout.RestoreTransform(restoreLayoutTransform);
            for (const [layer, transform] of restoreLayerTransforms) layer.RestoreTransform(transform);
            this._resolve()
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Behaviors.Anchor = class AnchorBehavior extends C3.SDKBehaviorBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Anchor.Type = class AnchorType extends C3.SDKBehaviorTypeBase {
            constructor(behaviorType) {
                super(behaviorType)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const IBehaviorInstance = self.IBehaviorInstance;
        const ANCHOR_LEFT = 0;
        const ANCHOR_TOP = 1;
        const ANCHOR_RIGHT = 2;
        const ANCHOR_BOTTOM = 3;
        const ENABLE = 4;
        C3.Behaviors.Anchor.Instance = class AnchorInstance extends C3.SDKBehaviorInstanceBase {
            constructor(behInst, properties) {
                super(behInst);
                this._anchorLeft = 2;
                this._anchorTop = 2;
                this._anchorRight = 0;
                this._anchorBottom = 0;
                this._isEnabled = true;
                const bbox = this._inst.GetWorldInfo().GetBoundingBox();
                this._xLeft = bbox.getLeft();
                this._yTop =
                    bbox.getTop();
                this._xRight = this._runtime.GetOriginalViewportWidth() - bbox.getLeft();
                this._yBottom = this._runtime.GetOriginalViewportHeight() - bbox.getTop();
                this._rDiff = this._runtime.GetOriginalViewportWidth() - bbox.getRight();
                this._bDiff = this._runtime.GetOriginalViewportHeight() - bbox.getBottom();
                if (properties) {
                    this._anchorLeft = properties[ANCHOR_LEFT];
                    this._anchorTop = properties[ANCHOR_TOP];
                    this._anchorRight = properties[ANCHOR_RIGHT];
                    this._anchorBottom = properties[ANCHOR_BOTTOM];
                    this._isEnabled = !!properties[ENABLE]
                }
                const rt =
                    this._runtime.Dispatcher();
                this._disposables = new C3.CompositeDisposable(C3.Disposable.From(rt, "layoutchange", () => this._OnLayoutChange()));
                if (this._isEnabled) this._StartTicking()
            }
            Release() {
                super.Release()
            }
            SaveToJson() {
                return {
                    "xl": this._xLeft,
                    "yt": this._yTop,
                    "xr": this._xRight,
                    "yb": this._yBottom,
                    "rd": this._rDiff,
                    "bd": this._bDiff,
                    "al": this._anchorLeft,
                    "at": this._anchorTop,
                    "ar": this._anchorRight,
                    "ab": this._anchorBottom,
                    "e": this._isEnabled
                }
            }
            LoadFromJson(o) {
                this._xLeft = o["xl"];
                this._yTop = o["yt"];
                this._xRight =
                    o["xr"];
                this._yBottom = o["yb"];
                this._rDiff = o["rd"];
                this._bDiff = o["bd"];
                this._anchorLeft = o["al"];
                this._anchorTop = o["at"];
                this._anchorRight = o["ar"];
                this._anchorBottom = o["ab"];
                this._isEnabled = o["e"];
                if (this._isEnabled) this._StartTicking();
                else this._StopTicking()
            }
            _SetEnabled(e) {
                if (this._isEnabled && !e) {
                    this._isEnabled = false;
                    this._StopTicking()
                } else if (!this._isEnabled && e) {
                    const bbox = this._inst.GetWorldInfo().GetBoundingBox();
                    this._xLeft = bbox.getLeft();
                    this._yTop = bbox.getTop();
                    this._xRight = this._runtime.GetOriginalViewportWidth() -
                        bbox.getLeft();
                    this._yBottom = this._runtime.GetOriginalViewportHeight() - bbox.getTop();
                    this._rDiff = this._runtime.GetOriginalViewportWidth() - bbox.getRight();
                    this._bDiff = this._runtime.GetOriginalViewportHeight() - bbox.getBottom();
                    this._isEnabled = true;
                    this._StartTicking()
                }
            }
            _IsEnabled() {
                return this._isEnabled
            }
            _UpdatePosition() {
                if (!this._isEnabled) return;
                const wi = this._inst.GetWorldInfo();
                const viewport = wi.GetLayer().GetViewport();
                if (this._anchorLeft === 0) {
                    const n = viewport.getLeft() + this._xLeft - wi.GetBoundingBox().getLeft();
                    if (n !== 0) {
                        wi.OffsetX(n);
                        wi.SetBboxChanged()
                    }
                } else if (this._anchorLeft === 1) {
                    const n = viewport.getRight() - this._xRight - wi.GetBoundingBox().getLeft();
                    if (n !== 0) {
                        wi.OffsetX(n);
                        wi.SetBboxChanged()
                    }
                }
                if (this._anchorTop === 0) {
                    const n = viewport.getTop() + this._yTop - wi.GetBoundingBox().getTop();
                    if (n !== 0) {
                        wi.OffsetY(n);
                        wi.SetBboxChanged()
                    }
                } else if (this._anchorTop === 1) {
                    const n = viewport.getBottom() - this._yBottom - wi.GetBoundingBox().getTop();
                    if (n !== 0) {
                        wi.OffsetY(n);
                        wi.SetBboxChanged()
                    }
                }
                if (this._anchorRight === 1) {
                    const n =
                        viewport.getRight() - this._rDiff - wi.GetBoundingBox().getRight();
                    if (n !== 0) {
                        wi.OffsetX(wi.GetOriginX() * n);
                        wi.SetWidth(Math.max(wi.GetWidth() + n), 0);
                        wi.SetBboxChanged();
                        this._rDiff = viewport.getRight() - wi.GetBoundingBox().getRight()
                    }
                }
                if (this._anchorBottom === 1) {
                    const n = viewport.getBottom() - this._bDiff - wi.GetBoundingBox().getBottom();
                    if (n !== 0) {
                        wi.OffsetY(wi.GetOriginY() * n);
                        wi.SetHeight(Math.max(wi.GetHeight() + n, 0));
                        wi.SetBboxChanged();
                        this._bDiff = viewport.getBottom() - wi.GetBoundingBox().getBottom()
                    }
                }
            }
            Tick() {
                this._UpdatePosition()
            }
            _OnLayoutChange() {
                this._UpdatePosition()
            }
            GetPropertyValueByIndex(index) {
                switch (index) {
                    case ANCHOR_LEFT:
                        return this._anchorLeft;
                    case ANCHOR_TOP:
                        return this._anchorTop;
                    case ANCHOR_RIGHT:
                        return this._anchorRight;
                    case ANCHOR_BOTTOM:
                        return this._anchorBottom;
                    case ENABLE:
                        return this._isEnabled
                }
            }
            SetPropertyValueByIndex(index, value) {
                switch (index) {
                    case ANCHOR_LEFT:
                        this._anchorLeft = value;
                        break;
                    case ANCHOR_TOP:
                        this._anchorTop = value;
                        break;
                    case ANCHOR_RIGHT:
                        this._anchorRight = value;
                        break;
                    case ANCHOR_BOTTOM:
                        this._anchorBottom = value;
                        break;
                    case ENABLE:
                        this._isEnabled = !!value;
                        if (this._isEnabled) this._StartTicking();
                        else this._StopTicking();
                        break
                }
            }
            GetDebuggerProperties() {
                const prefix = "behaviors.anchor";
                return [{
                    title: "$" + this.GetBehaviorType().GetName(),
                    properties: [{
                        name: prefix + ".properties.enabled.name",
                        value: this._IsEnabled(),
                        onedit: v => this._SetEnabled(v)
                    }]
                }]
            }
            GetScriptInterfaceClass() {
                return self.IAnchorBehaviorInstance
            }
        };
        const map = new WeakMap;
        self.IAnchorBehaviorInstance = class IAnchorBehaviorInstance extends IBehaviorInstance {
            constructor() {
                super();
                map.set(this, IBehaviorInstance._GetInitInst().GetSdkInstance())
            }
            get isEnabled() {
                return map.get(this)._IsEnabled()
            }
            set isEnabled(e) {
                map.get(this)._SetEnabled(e)
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Anchor.Cnds = {
            IsEnabled() {
                return this._IsEnabled()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Anchor.Acts = {
            SetEnabled(e) {
                this._SetEnabled(e !== 0)
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Anchor.Exps = {}
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        const C3X = self.C3X;
        let tempVec2a = null;
        let tempVec2b = null;
        let vec2RecycleCache = [];
        let Box2D = null;
        let physicsBehavior = null;
        const PHYSICS_COLLISIONS_KEY = "Physics_DisabledCollisions";

        function SetObjectTypeCollisionsEnabled(typeA, typeB, state) {
            const savedA = typeA.GetSavedDataMap();
            const savedB = typeB.GetSavedDataMap();
            if (state) {
                const setA = savedA.get(PHYSICS_COLLISIONS_KEY);
                if (setA) setA.delete(typeB.GetSID());
                const setB = savedB.get(PHYSICS_COLLISIONS_KEY);
                if (setB) setB.delete(typeA.GetSID())
            } else {
                let setA =
                    savedA.get(PHYSICS_COLLISIONS_KEY);
                if (!setA) {
                    setA = new Set;
                    savedA.set(PHYSICS_COLLISIONS_KEY, setA)
                }
                let setB = savedB.get(PHYSICS_COLLISIONS_KEY);
                if (!setB) {
                    setB = new Set;
                    savedB.set(PHYSICS_COLLISIONS_KEY, setB)
                }
                setA.add(typeB.GetSID());
                setB.add(typeA.GetSID())
            }
        }
        C3.Behaviors.Physics = class PhysicsBehavior extends C3.SDKBehaviorBase {
            constructor(opts) {
                opts.scriptInterfaceClass = self.IPhysicsBehavior;
                super(opts);
                this._world = null;
                this._worldG = 10;
                this._worldScale = .02;
                this._worldManifold = null;
                this._lastUpdateTick = -1;
                this._steppingMode = 1;
                this._velocityIterations = 8;
                this._positionIterations = 3;
                this._allCollisionsEnabled = true;
                this._runtime.AddLoadPromise(this._LoadBox2DWasm())
            }
            async _LoadBox2DWasm() {
                const box2dWasmUrl = await this._runtime.GetAssetManager().GetProjectFileUrl("box2d.wasm");
                await new Promise(resolve => {
                    self["Box2DWasmModule"]({
                        "wasmBinaryFile": box2dWasmUrl
                    }).then(box2d => {
                        Box2D = box2d;
                        this._InitBox2DWorld();
                        resolve()
                    })
                })
            }
            _InitBox2DWorld() {
                const collisionEngine = this._runtime.GetCollisionEngine();
                tempVec2a =
                    C3.Behaviors.Physics.GetVec2(0, 0);
                tempVec2b = C3.Behaviors.Physics.GetVec2(0, 0);
                this._world = new Box2D["b2World"](C3.Behaviors.Physics.GetTempVec2A(0, this._worldG), true);
                const listener = new Box2D["JSContactListener"];
                listener["BeginContact"] = contactPtr => {
                    const contact = Box2D["wrapPointer"](contactPtr, Box2D["b2Contact"]);
                    const behA = C3.Behaviors.Physics.Instance.LookupBehInstFromBody(contact["GetFixtureA"]()["GetBody"]());
                    const behB = C3.Behaviors.Physics.Instance.LookupBehInstFromBody(contact["GetFixtureB"]()["GetBody"]());
                    collisionEngine.RegisterCollision(behA.GetObjectInstance(), behB.GetObjectInstance())
                };
                listener["EndContact"] = () => {};
                listener["PreSolve"] = () => {};
                listener["PostSolve"] = () => {};
                this._world["SetContactListener"](listener);
                const filter = new Box2D["JSContactFilter"];
                filter["ShouldCollide"] = (fixAPtr, fixBPtr) => {
                    if (this._allCollisionsEnabled) return true;
                    const fixtureA = Box2D["wrapPointer"](fixAPtr, Box2D["b2Fixture"]);
                    const fixtureB = Box2D["wrapPointer"](fixBPtr, Box2D["b2Fixture"]);
                    const behA = C3.Behaviors.Physics.Instance.LookupBehInstFromBody(fixtureA["GetBody"]());
                    const behB = C3.Behaviors.Physics.Instance.LookupBehInstFromBody(fixtureB["GetBody"]());
                    const typeA = behA.GetObjectInstance().GetObjectClass();
                    const typeB = behB.GetObjectInstance().GetObjectClass();
                    const sidA = typeA.GetSID();
                    const sidB = typeB.GetSID();
                    const setA = typeA.GetSavedDataMap().get(PHYSICS_COLLISIONS_KEY);
                    if (setA && setA.has(sidB)) return false;
                    const setB = typeB.GetSavedDataMap().get(PHYSICS_COLLISIONS_KEY);
                    if (setB && setB.has(sidA)) return false;
                    return true
                };
                this._world["SetContactFilter"](filter);
                this._worldManifold =
                    new Box2D["b2WorldManifold"]
            }
            Release() {
                super.Release()
            }
            GetBox2D() {
                return Box2D
            }
            GetWorld() {
                return this._world
            }
            GetWorldScale() {
                return this._worldScale
            }
            GetSteppingMode() {
                return this._steppingMode
            }
            SetSteppingMode(m) {
                this._steppingMode = m
            }
            SetLastUpdateTick(t) {
                this._lastUpdateTick = t
            }
            GetLastUpdateTick() {
                return this._lastUpdateTick
            }
            SetVelocityIterations(v) {
                this._velocityIterations = Math.max(v, 1)
            }
            GetVelocityIterations() {
                return this._velocityIterations
            }
            SetPositionIterations(p) {
                this._positionIterations = Math.max(p,
                    1)
            }
            GetPositionIterations() {
                return this._positionIterations
            }
            SetIterations(v, p) {
                this.SetVelocityIterations(v);
                this.SetPositionIterations(p)
            }
            GetGravity() {
                return this._worldG
            }
            SetGravity(g) {
                if (g === this._worldG) return;
                this._world["SetGravity"](C3.Behaviors.Physics.GetTempVec2A(0, g));
                this._worldG = g;
                this._WakeUpAllPhysicsBodies()
            }
            _WakeUpAllPhysicsBodies() {
                for (const inst of this.GetInstances()) {
                    const behInst = C3.Behaviors.Physics.Instance.LookupBehInstFromInst(inst);
                    if (!behInst) continue;
                    const body = behInst.GetBody();
                    if (!body) continue;
                    body["SetAwake"](true)
                }
            }
            DisableShouldCollideFastPath() {
                this._allCollisionsEnabled = false
            }
            SetCollisionsEnabled(typeA, typeB, state) {
                state = !!state;
                if (!typeA || !typeB) return;
                if (typeB.IsFamily())
                    for (const member of typeB.GetFamilyMembers()) SetObjectTypeCollisionsEnabled(typeA, member, state);
                else SetObjectTypeCollisionsEnabled(typeA, typeB, state);
                this.DisableShouldCollideFastPath()
            }
            GetWorldManifold() {
                return this._worldManifold
            }
            static GetPhysicsCollisionKey() {
                return PHYSICS_COLLISIONS_KEY
            }
            static GetVec2(x,
                y) {
                if (vec2RecycleCache.length) {
                    const ret = vec2RecycleCache.pop();
                    ret["set_x"](x);
                    ret["set_y"](y);
                    return ret
                } else {
                    const b2Vec2 = Box2D["b2Vec2"];
                    return new b2Vec2(x, y)
                }
            }
            static FreeVec2(v) {
                vec2RecycleCache.push(v)
            }
            static GetTempVec2A(x, y) {
                tempVec2a["set_x"](x);
                tempVec2a["set_y"](y);
                return tempVec2a
            }
            static GetTempVec2B(x, y) {
                tempVec2b["set_x"](x);
                tempVec2b["set_y"](y);
                return tempVec2b
            }
            static CreatePolygonShape(vertices) {
                const b2PolygonShape = Box2D["b2PolygonShape"];
                const shape = new b2PolygonShape;
                const buffer =
                    Box2D["_malloc"](vertices.length * 8);
                let offset = 0;
                for (let i = 0; i < vertices.length; ++i) {
                    Box2D["HEAPF32"][buffer + offset >> 2] = vertices[i]["get_x"]();
                    Box2D["HEAPF32"][buffer + (offset + 4) >> 2] = vertices[i]["get_y"]();
                    offset += 8
                }
                const ptr_wrapped = Box2D["wrapPointer"](buffer, Box2D["b2Vec2"]);
                shape["Set"](ptr_wrapped, vertices.length);
                Box2D["_free"](buffer);
                return shape
            }
        };
        const STEPPING_MODES = ["fixed", "variable"];
        self.IPhysicsBehavior = class IPhysicsBehavior extends self.IBehavior {
            constructor(behavior) {
                super(behavior);
                physicsBehavior = behavior
            }
            set worldGravity(g) {
                C3X.RequireFiniteNumber(g);
                physicsBehavior.SetGravity(g)
            }
            get worldGravity() {
                return physicsBehavior.GetGravity()
            }
            set steppingMode(s) {
                const i = STEPPING_MODES.indexOf(s);
                if (i < 0) throw new Error("invalid stepping mode");
                physicsBehavior.SetSteppingMode(STEPPING_MODES[i])
            }
            get steppingMode() {
                return STEPPING_MODES[physicsBehavior.GetSteppingMode()]
            }
            set velocityIterations(v) {
                C3X.RequireFiniteNumber(v);
                physicsBehavior.SetVelocityIterations(v)
            }
            get velocityIterations() {
                return physicsBehavior.GetVelocityIterations()
            }
            set positionIterations(p) {
                C3X.RequireFiniteNumber(p);
                physicsBehavior.SetPositionIterations(p)
            }
            get positionIterations() {
                return physicsBehavior.GetPositionIterations()
            }
            setCollisionsEnabled(iObjectClassA, iObjectClassB, state) {
                const runtime = physicsBehavior.GetRuntime();
                const objectClassA = runtime._UnwrapIObjectClass(iObjectClassA);
                const objectClassB = runtime._UnwrapIObjectClass(iObjectClassB);
                state = !!state;
                physicsBehavior.SetCollisionsEnabled(objectClassA, objectClassB, state)
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Physics.Type = class PhysicsType extends C3.SDKBehaviorTypeBase {
            constructor(behaviorType) {
                super(behaviorType)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const IBehaviorInstance = self.IBehaviorInstance;
        const assert = self.assert;
        const IMMOVABLE = 0;
        const COLLISION_MASK = 1;
        const PREVENT_ROTATION = 2;
        const DENSITY = 3;
        const FRICTION = 4;
        const ELASTICITY = 5;
        const LINEAR_DAMPING = 6;
        const ANGULAR_DAMPING = 7;
        const BULLET = 8;
        const ENABLE = 9;
        const body2beh = new WeakMap;
        const inst2beh = new WeakMap;
        const tileConvexPolyCache = new WeakMap;
        const TILE_FLIPPED_HORIZONTAL = -2147483648;
        const TILE_FLIPPED_VERTICAL = 1073741824;
        const TILE_FLIPPED_DIAGONAL =
            536870912;
        const TILE_FLAGS_MASK = 3758096384;
        const TILE_ID_MASK = 536870911;
        const GetTempVec2A = C3.Behaviors.Physics.GetTempVec2A;
        const GetTempVec2B = C3.Behaviors.Physics.GetTempVec2B;
        const tempRect = C3.New(C3.Rect);
        const tempQuad = C3.New(C3.Quad);
        C3.Behaviors.Physics.Instance = class PhysicsInstance extends C3.SDKBehaviorInstanceBase {
            constructor(behInst, properties) {
                super(behInst);
                const behavior = this.GetBehavior();
                const wi = this.GetWorldInfo();
                this._box2d = behavior.GetBox2D();
                this._world = behavior.GetWorld();
                this._worldScale = behavior.GetWorldScale();
                this._isImmovable = false;
                this._collisionMask = 0;
                this._actualCollisionMask = 0;
                this._preventRotation = false;
                this._density = 1;
                this._friction = .5;
                this._restitution = .2;
                this._linearDamping = 0;
                this._angularDamping = .01;
                this._isBullet = false;
                this._isEnabled = true;
                this._body = null;
                this._fixtures = [];
                this._myJoints = [];
                this._myCreatedJoints = [];
                this._joiningMe = new Set;
                this._lastKnownX = wi.GetX();
                this._lastKnownY = wi.GetY();
                this._lastKnownAngle = wi.GetAngle();
                this._lastWidth = 0;
                this._lastHeight =
                    0;
                this._lastTickOverride = false;
                if (properties) {
                    this._isImmovable = !!properties[IMMOVABLE];
                    this._collisionMask = properties[COLLISION_MASK];
                    this._preventRotation = !!properties[PREVENT_ROTATION];
                    this._density = properties[DENSITY];
                    this._friction = properties[FRICTION];
                    this._restitution = properties[ELASTICITY];
                    this._linearDamping = properties[LINEAR_DAMPING];
                    this._angularDamping = properties[ANGULAR_DAMPING];
                    this._isBullet = !!properties[BULLET];
                    this._isEnabled = !!properties[ENABLE]
                }
                const rt = this._runtime.Dispatcher();
                this._disposables = new C3.CompositeDisposable(C3.Disposable.From(rt, "instancedestroy", e => this._OnInstanceDestroyed(e.instance)), C3.Disposable.From(rt, "beforeload", () => this._OnBeforeLoad()), C3.Disposable.From(rt, "afterload", () => this._OnAfterLoad()));
                inst2beh.set(this._inst, this);
                if (this._isEnabled) this._StartTicking()
            }
            PostCreate() {
                this._CreateBody()
            }
            Release() {
                this._DestroyMyJoints();
                C3.clearArray(this._myCreatedJoints);
                this._joiningMe.clear();
                if (this._body) {
                    this._DestroyFixtures();
                    this._world["DestroyBody"](this._body);
                    this._body = null
                }
                super.Release()
            }
            _CreateFixture(fixDef) {
                if (!this._body) return;
                const fixture = this._body["CreateFixture"](fixDef);
                this._fixtures.push(fixture);
                return fixture
            }
            _DestroyFixtures() {
                if (!this._body) return;
                for (const fixture of this._fixtures) this._body["DestroyFixture"](fixture);
                C3.clearArray(this._fixtures)
            }
            _GetBoundingQuadExcludingMesh() {
                const wi = this.GetWorldInfo();
                if (wi.HasMesh()) {
                    wi.CalculateBbox(tempRect, tempQuad, false);
                    return tempQuad
                } else return wi.GetBoundingQuad()
            }
            _Destroy(o) {
                this._box2d["destroy"](o)
            }
            _CreateBody() {
                if (!this._isEnabled) return;
                const b2FixtureDef = this._box2d["b2FixtureDef"];
                const b2BodyDef = this._box2d["b2BodyDef"];
                const wi = this.GetWorldInfo();
                const hasPoly = wi.HasOwnCollisionPoly();
                this._actualCollisionMask = this._collisionMask;
                if (!hasPoly && !this._inst.HasTilemap() && this._actualCollisionMask === 0) this._actualCollisionMask = 1;
                if (!this._body) {
                    const bodyDef = new b2BodyDef;
                    bodyDef["set_type"](this._isImmovable ? 0 : 2);
                    let bodyX = wi.GetX() * this._worldScale;
                    let bodyY = wi.GetY() * this._worldScale;
                    if (this._actualCollisionMask === 2) {
                        const bquad =
                            this._GetBoundingQuadExcludingMesh();
                        bodyX = bquad.midX() * this._worldScale;
                        bodyY = bquad.midY() * this._worldScale
                    }
                    bodyDef["set_position"](GetTempVec2B(bodyX, bodyY));
                    bodyDef["set_angle"](wi.GetAngle());
                    bodyDef["set_fixedRotation"](this._preventRotation);
                    bodyDef["set_linearDamping"](this._linearDamping);
                    bodyDef["set_angularDamping"](this._angularDamping);
                    bodyDef["set_bullet"](this._isBullet);
                    this._body = this._world["CreateBody"](bodyDef);
                    this._Destroy(bodyDef);
                    body2beh.set(this._body, this)
                }
                this._DestroyFixtures();
                const fixDef = new b2FixtureDef;
                fixDef["set_density"](this._density);
                fixDef["set_friction"](this._friction);
                fixDef["set_restitution"](this._restitution);
                const instW = Math.max(Math.abs(wi.GetWidth()), 1);
                const instH = Math.max(Math.abs(wi.GetHeight()), 1);
                if (this._actualCollisionMask === 0)
                    if (this._inst.HasTilemap()) this._CreateTilemapFixtures(fixDef);
                    else this._CreatePolygonFixture(fixDef, instW, instH);
                else if (this._actualCollisionMask === 1) this._CreateBoundingBoxFixture(fixDef, wi, instW, instH);
                else this._CreateCircleFixture(fixDef,
                    instW, instH);
                this._lastWidth = wi.GetWidth();
                this._lastHeight = wi.GetHeight();
                wi.SetPhysicsBodyChanged(false);
                this._Destroy(fixDef)
            }
            _CreateBoundingBoxFixture(fixDef, wi, instW, instH) {
                const b2PolygonShape = this._box2d["b2PolygonShape"];
                const shape = new b2PolygonShape;
                const fixWidth = instW * this._worldScale;
                const fixHeight = instH * this._worldScale;
                let originX = wi.GetOriginX();
                let originY = wi.GetOriginY();
                if (wi.GetWidth() < 0) originX = 1 - originX;
                if (wi.GetHeight() < 0) originY = 1 - originY;
                const fixOriginX = (.5 - originX) * fixWidth;
                const fixOriginY = (.5 - originY) * fixHeight;
                const originVec = C3.Behaviors.Physics.GetVec2(fixOriginX, fixOriginY);
                shape["SetAsBox"](fixWidth / 2, fixHeight / 2, originVec, 0);
                fixDef["set_shape"](shape);
                this._CreateFixture(fixDef);
                this._Destroy(shape);
                C3.Behaviors.Physics.FreeVec2(originVec)
            }
            _CreateCircleFixture(fixDef, instW, instH) {
                const b2CircleShape = this._box2d["b2CircleShape"];
                const shape = new b2CircleShape;
                shape["set_m_radius"](Math.min(instW, instH) * this._worldScale * .5);
                fixDef["set_shape"](shape);
                this._CreateFixture(fixDef);
                this._Destroy(shape)
            }
            _CreatePolygonFixture(fixDef, instW, instH) {
                const wi = this.GetWorldInfo();
                const isMirrored = wi.GetWidth() < 0;
                const isFlipped = wi.GetHeight() < 0;
                const worldScale = this._worldScale;
                const transformedPoly = wi.GetCustomTransformedCollisionPoly(isMirrored ? -instW : instW, isFlipped ? -instH : instH, 0);
                const ptsArr = transformedPoly.pointsArr();
                const ptsCount = ptsArr.length / 2;
                const arr = [];
                for (let i = 0; i < ptsCount; ++i) arr.push(C3.Behaviors.Physics.GetVec2(ptsArr[i * 2], ptsArr[i * 2 + 1]));
                if (isMirrored !== isFlipped) arr.reverse();
                const convexPolys = C3.Behaviors.Physics.Separator.Separate(arr, instW * instH);
                for (const v of arr) C3.Behaviors.Physics.FreeVec2(v);
                if (convexPolys.length)
                    for (const arr2 of convexPolys) {
                        for (const vec of arr2) {
                            vec["set_x"](vec["get_x"]() * worldScale);
                            vec["set_y"](vec["get_y"]() * worldScale)
                        }
                        const shape = C3.Behaviors.Physics.CreatePolygonShape(arr2);
                        fixDef["set_shape"](shape);
                        this._CreateFixture(fixDef);
                        this._Destroy(shape);
                        for (const v of arr2) C3.Behaviors.Physics.FreeVec2(v)
                    } else this._CreateBoundingBoxFixture(fixDef,
                        wi, instW, instH)
            }
            _CreateTilemapFixtures(fixDef) {
                const worldScale = this._worldScale;
                const GetVec2 = C3.Behaviors.Physics.GetVec2;
                const FreeVec2 = C3.Behaviors.Physics.FreeVec2;
                const collRects = [];
                this._inst.GetSdkInstance().GetAllCollisionRects(collRects);
                const arr = [];
                for (let i = 0, len = collRects.length; i < len; ++i) {
                    const c = collRects[i];
                    const rc = c.GetRect();
                    const poly = c.GetPoly();
                    if (poly) {
                        let convexPolys = tileConvexPolyCache.get(poly);
                        if (!convexPolys) {
                            const ptsArr = poly.pointsArr();
                            const ptsCount = poly.pointCount();
                            for (let j = 0; j < ptsCount; ++j) arr.push(GetVec2(ptsArr[j * 2], ptsArr[j * 2 + 1]));
                            const flags = c.GetTileId() & TILE_FLAGS_MASK;
                            if (flags === TILE_FLIPPED_HORIZONTAL || flags === TILE_FLIPPED_VERTICAL || flags === TILE_FLIPPED_DIAGONAL || flags & TILE_FLIPPED_HORIZONTAL && flags & TILE_FLIPPED_VERTICAL && flags & TILE_FLIPPED_DIAGONAL) arr.reverse();
                            convexPolys = C3.Behaviors.Physics.Separator.Separate(arr, rc.width() * rc.height());
                            tileConvexPolyCache.set(poly, convexPolys);
                            for (const v of arr) FreeVec2(v);
                            C3.clearArray(arr)
                        }
                        for (let j = 0, lenj =
                                convexPolys.length; j < lenj; ++j) {
                            const cp = convexPolys[j];
                            for (let k = 0, lenk = cp.length; k < lenk; ++k) arr.push(GetVec2((rc.getLeft() + cp[k]["get_x"]()) * worldScale, (rc.getTop() + cp[k]["get_y"]()) * worldScale));
                            const shape = C3.Behaviors.Physics.CreatePolygonShape(arr);
                            fixDef["set_shape"](shape);
                            this._CreateFixture(fixDef);
                            this._Destroy(shape);
                            for (const v of arr) FreeVec2(v);
                            C3.clearArray(arr)
                        }
                    } else {
                        arr.push(GetVec2(rc.getLeft() * worldScale, rc.getTop() * worldScale));
                        arr.push(GetVec2(rc.getRight() * worldScale, rc.getTop() *
                            worldScale));
                        arr.push(GetVec2(rc.getRight() * worldScale, rc.getBottom() * worldScale));
                        arr.push(GetVec2(rc.getLeft() * worldScale, rc.getBottom() * worldScale));
                        const shape = C3.Behaviors.Physics.CreatePolygonShape(arr);
                        fixDef["set_shape"](shape);
                        this._CreateFixture(fixDef);
                        this._Destroy(shape)
                    }
                    for (const v of arr) FreeVec2(v);
                    C3.clearArray(arr)
                }
            }
            _DestroyBody() {
                if (!this._body) return;
                this._DestroyMyJoints();
                body2beh.delete(this._body);
                this._DestroyFixtures();
                this._world["DestroyBody"](this._body);
                this._body = null
            }
            _DestroyMyJoints() {
                for (const joint of this._myJoints) this._world["DestroyJoint"](joint);
                C3.clearArray(this._myJoints)
            }
            _RecreateMyJoints() {
                for (const j of this._myCreatedJoints) switch (j.type) {
                    case 0:
                        this._DoCreateDistanceJoint(...j.params);
                        break;
                    case 1:
                        this._DoCreateRevoluteJoint(...j.params);
                        break;
                    case 2:
                        this._DoCreateLimitedRevoluteJoint(...j.params);
                        break;
                    case 3:
                        this._DoCreatePrismaticJoint(...j.params);
                        break;
                    default:
                }
            }
            _GetInstImagePoint(imgPt) {
                const wi = this.GetWorldInfo();
                if (imgPt === -1) return [wi.GetX(), wi.GetY()];
                if (imgPt === 0 && this._body) {
                    const pos = this._body["GetPosition"]();
                    const lc =
                        this._body["GetLocalCenter"]();
                    return [(pos["get_x"]() + lc["get_x"]()) / this._worldScale, (pos["get_y"]() + lc["get_y"]()) / this._worldScale]
                }
                return this._inst.GetImagePoint(imgPt)
            }
            _CreateDistanceJoint(imgPt, otherInst, otherImgPt, damping, freq) {
                if (!this._isEnabled || !otherInst || otherInst === this._inst) return;
                const otherBehInst = C3.Behaviors.Physics.Instance.LookupBehInstFromInst(otherInst);
                if (!otherBehInst || !otherBehInst._IsEnabled()) return;
                this._myCreatedJoints.push({
                    type: 0,
                    params: [imgPt, otherInst.GetUID(),
                        otherImgPt, damping, freq
                    ]
                });
                this._DoCreateDistanceJoint(imgPt, otherInst.GetUID(), otherImgPt, damping, freq)
            }
            _DoCreateDistanceJoint(imgPt, otherInstUid, otherImgPt, damping, freq) {
                if (!this._isEnabled) return;
                const otherInst = this._runtime.GetInstanceByUID(otherInstUid);
                if (!otherInst || otherInst === this._inst) return;
                const otherBehInst = C3.Behaviors.Physics.Instance.LookupBehInstFromInst(otherInst);
                if (!otherBehInst || !otherBehInst._IsEnabled()) return;
                otherBehInst._joiningMe.add(this._inst);
                this._UpdateBodyToMatchInstance(false);
                otherBehInst._UpdateBodyToMatchInstance(false);
                const [myX, myY] = this._GetInstImagePoint(imgPt);
                const [theirX, theirY] = otherInst.GetImagePoint(otherImgPt);
                const dx = myX - theirX;
                const dy = myY - theirY;
                const b2DistanceJointDef = this._box2d["b2DistanceJointDef"];
                const worldScale = this._worldScale;
                const jointDef = new b2DistanceJointDef;
                jointDef["Initialize"](this._body, otherBehInst.GetBody(), GetTempVec2A(myX * worldScale, myY * worldScale), GetTempVec2B(theirX * worldScale, theirY * worldScale));
                jointDef["set_length"](Math.hypot(dx,
                    dy) * worldScale);
                jointDef["set_dampingRatio"](damping);
                jointDef["set_frequencyHz"](freq);
                this._myJoints.push(this._world["CreateJoint"](jointDef));
                this._Destroy(jointDef)
            }
            _CreateRevoluteJoint(imgPt, otherInst) {
                if (!this._isEnabled || !otherInst || otherInst === this._inst) return;
                const otherBehInst = C3.Behaviors.Physics.Instance.LookupBehInstFromInst(otherInst);
                if (!otherBehInst || !otherBehInst._IsEnabled()) return;
                this._myCreatedJoints.push({
                    type: 1,
                    params: [imgPt, otherInst.GetUID()]
                });
                this._DoCreateRevoluteJoint(imgPt,
                    otherInst.GetUID())
            }
            _DoCreateRevoluteJoint(imgPt, otherInstUid) {
                if (!this._isEnabled) return;
                const otherInst = this._runtime.GetInstanceByUID(otherInstUid);
                if (!otherInst || otherInst === this._inst) return;
                const otherBehInst = C3.Behaviors.Physics.Instance.LookupBehInstFromInst(otherInst);
                if (!otherBehInst || !otherBehInst._IsEnabled()) return;
                otherBehInst._joiningMe.add(this._inst);
                this._UpdateBodyToMatchInstance(false);
                otherBehInst._UpdateBodyToMatchInstance(false);
                const [myX, myY] = this._GetInstImagePoint(imgPt);
                const b2RevoluteJointDef = this._box2d["b2RevoluteJointDef"];
                const worldScale = this._worldScale;
                const jointDef = new b2RevoluteJointDef;
                jointDef["Initialize"](this._body, otherBehInst.GetBody(), GetTempVec2A(myX * worldScale, myY * worldScale));
                this._myJoints.push(this._world["CreateJoint"](jointDef));
                this._Destroy(jointDef)
            }
            _CreateLimitedRevoluteJoint(imgPt, otherInst, lower, upper) {
                if (!this._isEnabled || !otherInst || otherInst === this._inst) return;
                const otherBehInst = C3.Behaviors.Physics.Instance.LookupBehInstFromInst(otherInst);
                if (!otherBehInst || !otherBehInst._IsEnabled()) return;
                lower = C3.toDegrees(lower);
                upper = C3.toDegrees(upper);
                this._myCreatedJoints.push({
                    type: 2,
                    params: [imgPt, otherInst.GetUID(), lower, upper]
                });
                this._DoCreateLimitedRevoluteJoint(imgPt, otherInst.GetUID(), lower, upper)
            }
            _DoCreateLimitedRevoluteJoint(imgPt, otherInstUid, lower, upper) {
                if (!this._isEnabled) return;
                const otherInst = this._runtime.GetInstanceByUID(otherInstUid);
                if (!otherInst || otherInst === this._inst) return;
                const otherBehInst = C3.Behaviors.Physics.Instance.LookupBehInstFromInst(otherInst);
                if (!otherBehInst || !otherBehInst._IsEnabled()) return;
                otherBehInst._joiningMe.add(this._inst);
                this._UpdateBodyToMatchInstance(false);
                otherBehInst._UpdateBodyToMatchInstance(false);
                const [myX, myY] = this._GetInstImagePoint(imgPt);
                const b2RevoluteJointDef = this._box2d["b2RevoluteJointDef"];
                const worldScale = this._worldScale;
                const jointDef = new b2RevoluteJointDef;
                jointDef["Initialize"](this._body, otherBehInst.GetBody(), GetTempVec2A(myX * worldScale, myY * worldScale));
                jointDef["set_enableLimit"](true);
                jointDef["set_lowerAngle"](C3.toRadians(lower));
                jointDef["set_upperAngle"](C3.toRadians(upper));
                this._myJoints.push(this._world["CreateJoint"](jointDef));
                this._Destroy(jointDef)
            }
            _CreatePrismaticJoint(imgPt, otherInst, axisAngle, enableLimit, lowerTranslation, upperTranslation, enableMotor, motorSpeed, maxMotorForce) {
                if (!this._isEnabled || !otherInst || otherInst === this._inst) return;
                const otherBehInst = C3.Behaviors.Physics.Instance.LookupBehInstFromInst(otherInst);
                if (!otherBehInst || !otherBehInst._IsEnabled()) return;
                axisAngle = C3.toDegrees(axisAngle);
                motorSpeed =
                    C3.toDegrees(motorSpeed);
                this._myCreatedJoints.push({
                    type: 3,
                    params: [imgPt, otherInst.GetUID(), axisAngle, enableLimit, lowerTranslation, upperTranslation, enableMotor, motorSpeed, maxMotorForce]
                });
                this._DoCreatePrismaticJoint(imgPt, otherInst.GetUID(), axisAngle, enableLimit, lowerTranslation, upperTranslation, enableMotor, motorSpeed, maxMotorForce)
            }
            _DoCreatePrismaticJoint(imgPt, otherInstUid, axisAngle, enableLimit, lowerTranslation, upperTranslation, enableMotor, motorSpeed, maxMotorForce) {
                if (!this._isEnabled) return;
                const otherInst = this._runtime.GetInstanceByUID(otherInstUid);
                if (!otherInst || otherInst === this._inst) return;
                const otherBehInst = C3.Behaviors.Physics.Instance.LookupBehInstFromInst(otherInst);
                if (!otherBehInst || !otherBehInst._IsEnabled()) return;
                otherBehInst._joiningMe.add(this._inst);
                this._UpdateBodyToMatchInstance(false);
                otherBehInst._UpdateBodyToMatchInstance(false);
                const [myX, myY] = this._GetInstImagePoint(imgPt);
                axisAngle = C3.toRadians(axisAngle);
                const axisX = Math.cos(axisAngle);
                const axisY = Math.sin(axisAngle);
                const b2PrismaticJointDef = this._box2d["b2PrismaticJointDef"];
                const worldScale = this._worldScale;
                const jointDef = new b2PrismaticJointDef;
                jointDef["Initialize"](this._body, otherBehInst.GetBody(), GetTempVec2A(myX * worldScale, myY * worldScale), GetTempVec2B(axisX, axisY));
                jointDef["set_enableLimit"](!!enableLimit);
                jointDef["set_lowerTranslation"](lowerTranslation * worldScale);
                jointDef["set_upperTranslation"](upperTranslation * worldScale);
                jointDef["set_enableMotor"](!!enableMotor);
                jointDef["set_motorSpeed"](C3.toRadians(motorSpeed));
                jointDef["set_maxMotorForce"](maxMotorForce);
                this._myJoints.push(this._world["CreateJoint"](jointDef));
                this._Destroy(jointDef)
            }
            _RemoveJoints() {
                if (!this._isEnabled) return;
                this._DestroyMyJoints();
                C3.clearArray(this._myCreatedJoints);
                this._joiningMe.clear()
            }
            _RemoveOtherInstanceJointsToMe() {
                for (const otherInst of this._joiningMe) {
                    const otherBehInst = C3.Behaviors.Physics.Instance.LookupBehInstFromInst(otherInst);
                    if (!otherBehInst || !otherBehInst._IsEnabled()) return;
                    otherBehInst._DestroyJointsForInstance(this._inst)
                }
                this._joiningMe.clear()
            }
            _OnInstanceDestroyed(inst) {
                this._DestroyJointsForInstance(inst)
            }
            _DestroyJointsForInstance(inst) {
                const instUid =
                    inst.GetUID();
                let j = 0;
                for (let i = 0, len = this._myCreatedJoints.length; i < len; ++i) {
                    this._myCreatedJoints[j] = this._myCreatedJoints[i];
                    if (j < this._myJoints.length) this._myJoints[j] = this._myJoints[i];
                    if (this._myCreatedJoints[i].params[1] === instUid) {
                        if (i < this._myJoints.length) this._world["DestroyJoint"](this._myJoints[i])
                    } else ++j
                }
                C3.truncateArray(this._myCreatedJoints, j);
                if (j < this._myJoints.length) C3.truncateArray(this._myJoints, j);
                this._joiningMe.delete(inst)
            }
            GetBody() {
                return this._body
            }
            static LookupBehInstFromBody(body) {
                return body2beh.get(body) ||
                    null
            }
            static LookupBehInstFromInst(inst) {
                return inst2beh.get(inst) || null
            }
            SaveToJson() {
                const ret = {
                    "e": this._isEnabled,
                    "im": this._isImmovable,
                    "pr": this._preventRotation,
                    "d": this._density,
                    "fr": this._friction,
                    "re": this._restitution,
                    "ld": this._linearDamping,
                    "ad": this._angularDamping,
                    "b": this._isBullet,
                    "mcj": this._myCreatedJoints
                };
                if (this._isEnabled) {
                    const v = this._body["GetLinearVelocity"]();
                    ret["vx"] = v["get_x"]();
                    ret["vy"] = v["get_y"]();
                    ret["om"] = this._body["GetAngularVelocity"]()
                }
                return ret
            }
            _OnBeforeLoad() {
                this._DestroyMyJoints();
                C3.clearArray(this._myCreatedJoints);
                this._joiningMe.clear()
            }
            LoadFromJson(o) {
                this._DestroyBody();
                this._isEnabled = o["e"];
                if (o.hasOwnProperty("im")) this._isImmovable = !!o["im"];
                this._preventRotation = o["pr"];
                this._density = o["d"];
                this._friction = o["fr"];
                this._restitution = o["re"];
                this._linearDamping = o["ld"];
                this._angularDamping = o["ad"];
                this._isBullet = o["b"];
                this._myCreatedJoints = o["mcj"];
                const wi = this.GetWorldInfo();
                this._lastKnownX = wi.GetX();
                this._lastKnownY = wi.GetY();
                this._lastKnownAngle = wi.GetAngle();
                this._lastWidth = wi.GetWidth();
                this._lastHeight = wi.GetHeight();
                if (this._isEnabled) {
                    this._CreateBody();
                    this._body["SetLinearVelocity"](GetTempVec2A(o["vx"], o["vy"]));
                    this._body["SetAngularVelocity"](o["om"]);
                    if (o["vx"] !== 0 || o["vy"] !== 0 || o["om"] !== 0) this._body["SetAwake"](true);
                    this._myCreatedJoints = o["mcj"]
                }
                if (this._isEnabled) this._StartTicking();
                else this._StopTicking()
            }
            _OnAfterLoad() {
                if (this._isEnabled) this._RecreateMyJoints()
            }
            Tick() {
                if (!this._isEnabled) return;
                const runtime = this._runtime;
                const behavior =
                    this.GetBehavior();
                let dt = 0;
                if (behavior.GetSteppingMode() === 0) dt = runtime.GetTimeScale() / 60;
                else {
                    dt = runtime.GetDt(this._inst);
                    if (dt > 1 / 30) dt = 1 / 30
                }
                const tickCount = runtime.GetTickCountNoSave();
                if (tickCount > behavior.GetLastUpdateTick() && runtime.GetTimeScale() > 0) {
                    const isDebug = this._runtime.IsDebug();
                    let startTime = 0;
                    if (isDebug) startTime = performance.now();
                    if (dt !== 0) this._world["Step"](dt, behavior.GetVelocityIterations(), behavior.GetPositionIterations());
                    this._world["ClearForces"]();
                    if (isDebug) self.C3Debugger.AddPhysicsTime(performance.now() -
                        startTime);
                    behavior.SetLastUpdateTick(tickCount)
                }
                this._UpdateBodyToMatchInstance(true)
            }
            _UpdateBodyToMatchInstance(isTickUpdate) {
                const inst = this._inst;
                const wi = inst.GetWorldInfo();
                const worldScale = this._worldScale;
                if (wi.GetWidth() !== this._lastWidth || wi.GetHeight() !== this._lastHeight || wi.IsPhysicsBodyChanged()) this._CreateBody();
                const body = this._body;
                const curX = wi.GetX();
                const curY = wi.GetY();
                const diffX = curX - this._lastKnownX;
                const diffY = curY - this._lastKnownY;
                const POS_EPSILON = .001;
                const posChanged =
                    Math.abs(diffX) > POS_EPSILON || Math.abs(diffY) > POS_EPSILON;
                const angleChanged = wi.GetAngle() !== this._lastKnownAngle;
                let newBodyX = curX;
                let newBodyY = curY;
                if (this._actualCollisionMask === 2) {
                    const bquad = this._GetBoundingQuadExcludingMesh();
                    newBodyX = bquad.midX();
                    newBodyY = bquad.midY()
                }
                if (posChanged) {
                    if (angleChanged) body["SetTransform"](GetTempVec2A(newBodyX * worldScale, newBodyY * worldScale), wi.GetAngle());
                    else body["SetTransform"](GetTempVec2A(newBodyX * worldScale, newBodyY * worldScale), body["GetAngle"]());
                    if (isTickUpdate) {
                        body["SetLinearVelocity"](GetTempVec2A(diffX,
                            diffY));
                        this._lastTickOverride = true
                    }
                    body["SetAwake"](true)
                } else if (isTickUpdate && this._lastTickOverride) {
                    this._lastTickOverride = false;
                    body["SetLinearVelocity"](GetTempVec2A(0, 0));
                    body["SetTransform"](GetTempVec2A(newBodyX * worldScale, newBodyY * worldScale), body["GetAngle"]())
                }
                if (!posChanged && angleChanged) {
                    body["SetTransform"](body["GetPosition"](), wi.GetAngle());
                    body["SetAwake"](true)
                }
                const pos = body["GetPosition"]();
                const newX = pos["get_x"]() / worldScale;
                const newY = pos["get_y"]() / worldScale;
                const newAngle =
                    body["GetAngle"]();
                if (newX !== wi.GetX() || newY !== wi.GetY() || newAngle !== wi.GetAngle()) {
                    wi.SetXY(newX, newY);
                    wi.SetAngle(newAngle);
                    wi.SetBboxChanged();
                    if (this._actualCollisionMask === 2) {
                        const bquad = this._GetBoundingQuadExcludingMesh();
                        const dx = bquad.midX() - wi.GetX();
                        const dy = bquad.midY() - wi.GetY();
                        if (dx !== 0 || dy !== 0) {
                            wi.OffsetXY(-dx, -dy);
                            wi.SetBboxChanged()
                        }
                    }
                }
                this._lastKnownX = wi.GetX();
                this._lastKnownY = wi.GetY();
                this._lastKnownAngle = wi.GetAngle()
            }
            GetPropertyValueByIndex(index) {
                switch (index) {
                    case PREVENT_ROTATION:
                        return this._IsPreventRotate();
                    case DENSITY:
                        return this._GetDensity();
                    case FRICTION:
                        return this._GetFriction();
                    case ELASTICITY:
                        return this._GetElasticity();
                    case LINEAR_DAMPING:
                        return this._GetLinearDamping();
                    case ANGULAR_DAMPING:
                        return this._GetAngularDamping();
                    case BULLET:
                        return this._IsBullet();
                    case ENABLE:
                        return this._IsEnabled()
                }
            }
            SetPropertyValueByIndex(index, value) {
                switch (index) {
                    case PREVENT_ROTATION:
                        this._SetPreventRotate(value);
                        break;
                    case DENSITY:
                        this._SetDensity(value);
                        break;
                    case FRICTION:
                        this._SetFriction(value);
                        break;
                    case ELASTICITY:
                        this._SetElasticity(value);
                        break;
                    case LINEAR_DAMPING:
                        this._SetLinearDamping(value);
                        break;
                    case ANGULAR_DAMPING:
                        this._SetAngularDamping(value);
                        break;
                    case BULLET:
                        this._SetBullet(value);
                        break;
                    case ENABLE:
                        this._SetEnabled(value);
                        break
                }
            }
            _SetEnabled(e) {
                e = !!e;
                if (this._isEnabled && !e) {
                    this._RemoveOtherInstanceJointsToMe();
                    this._DestroyBody();
                    this._isEnabled = false;
                    this._StopTicking()
                } else if (!this._isEnabled && e) {
                    this._isEnabled = true;
                    this._CreateBody();
                    this._StartTicking()
                }
            }
            _IsEnabled() {
                return this._isEnabled
            }
            GetDebuggerProperties() {
                const prefix =
                    "behaviors.physics";
                const props = [{
                    name: prefix + ".properties.enabled.name",
                    value: this._IsEnabled(),
                    onedit: v => this._SetEnabled(v)
                }, {
                    name: prefix + ".properties.immovable.name",
                    value: this._IsImmovable(),
                    onedit: v => this._SetImmovable(v)
                }, {
                    name: prefix + ".properties.density.name",
                    value: this._GetDensity(),
                    onedit: v => this._SetDensity(v)
                }, {
                    name: prefix + ".properties.friction.name",
                    value: this._GetFriction(),
                    onedit: v => this._SetFriction(v)
                }, {
                    name: prefix + ".properties.elasticity.name",
                    value: this._GetElasticity(),
                    onedit: v =>
                        this._SetElasticity(v)
                }, {
                    name: prefix + ".properties.linear-damping.name",
                    value: this._GetLinearDamping(),
                    onedit: v => this._SetLinearDamping(v)
                }, {
                    name: prefix + ".properties.angular-damping.name",
                    value: this._GetAngularDamping(),
                    onedit: v => this._SetAngularDamping(v)
                }];
                if (this._isEnabled) {
                    props.push({
                        name: prefix + ".debugger.is-sleeping",
                        value: this._IsSleeping()
                    });
                    props.push({
                        name: prefix + ".debugger.velocity-x",
                        value: this._GetVelocityX(),
                        onedit: v => this._SetVelocity(v, this._GetVelocityY())
                    });
                    props.push({
                        name: prefix +
                            ".debugger.velocity-y",
                        value: this._GetVelocityY(),
                        onedit: v => this._SetVelocity(this._GetVelocityX(), v)
                    });
                    props.push({
                        name: prefix + ".debugger.angular-velocity",
                        value: C3.toDegrees(this._GetAngularVelocity()),
                        onedit: v => this._SetAngularVelocity(C3.toRadians(v))
                    });
                    props.push({
                        name: prefix + ".debugger.mass",
                        value: this._GetMass()
                    })
                }
                return [{
                    title: "$" + this.GetBehaviorType().GetName(),
                    properties: props
                }]
            }
            _ApplyForce(fx, fy, imgPt) {
                const [x, y] = this._GetInstImagePoint(imgPt);
                this._DoApplyForce(fx, fy, x, y)
            }
            _ApplyForceToward(f,
                px, py, imgPt) {
                const [x, y] = this._GetInstImagePoint(imgPt);
                const a = C3.angleTo(x, y, px, py);
                this._DoApplyForce(Math.cos(a) * f, Math.sin(a) * f, x, y)
            }
            _ApplyForceAtAngle(f, a, imgPt) {
                const [x, y] = this._GetInstImagePoint(imgPt);
                this._DoApplyForce(Math.cos(a) * f, Math.sin(a) * f, x, y)
            }
            _DoApplyForce(fx, fy, ox, oy) {
                if (!this._isEnabled) return;
                const worldScale = this._worldScale;
                this._body["ApplyForce"](GetTempVec2A(fx, fy), GetTempVec2B(ox * worldScale, oy * worldScale), true)
            }
            _ApplyImpulse(fx, fy, imgPt) {
                const [x, y] = this._GetInstImagePoint(imgPt);
                this._DoApplyImpulse(fx, fy, x, y)
            }
            _ApplyImpulseToward(f, px, py, imgPt) {
                const [x, y] = this._GetInstImagePoint(imgPt);
                const a = C3.angleTo(x, y, px, py);
                this._DoApplyImpulse(Math.cos(a) * f, Math.sin(a) * f, x, y)
            }
            _ApplyImpulseAtAngle(f, a, imgPt) {
                const [x, y] = this._GetInstImagePoint(imgPt);
                this._DoApplyImpulse(Math.cos(a) * f, Math.sin(a) * f, x, y)
            }
            _DoApplyImpulse(fx, fy, ox, oy) {
                if (!this._isEnabled) return;
                const worldScale = this._worldScale;
                this._body["ApplyLinearImpulse"](GetTempVec2A(fx, fy), GetTempVec2B(ox * worldScale, oy * worldScale),
                    true);
                const wi = this.GetWorldInfo();
                this._lastKnownX = wi.GetX();
                this._lastKnownY = wi.GetY();
                this._lastTickOverride = false
            }
            _ApplyTorque(m) {
                if (!this._isEnabled) return;
                this._body["ApplyTorque"](m, true)
            }
            _ApplyTorqueToAngle(m, a) {
                const f = C3.angleClockwise(this.GetWorldInfo().GetAngle(), a) ? -1 : 1;
                this._ApplyTorque(m * f)
            }
            _ApplyTorqueToPosition(m, x, y) {
                const wi = this.GetWorldInfo();
                const a = C3.angleTo(wi.GetX(), wi.GetY(), x, y);
                const f = C3.angleClockwise(wi.GetAngle(), a) ? -1 : 1;
                this._ApplyTorque(m * f)
            }
            _SetAngularVelocity(v) {
                if (!this._isEnabled) return;
                this._body["SetAngularVelocity"](v);
                this._body["SetAwake"](true)
            }
            _GetAngularVelocity() {
                return this._isEnabled ? this._body["GetAngularVelocity"]() : 0
            }
            _SetVelocity(vx, vy) {
                if (!this._isEnabled) return;
                const worldScale = this._worldScale;
                this._body["SetLinearVelocity"](GetTempVec2A(vx * worldScale, vy * worldScale));
                this._body["SetAwake"](true);
                const wi = this.GetWorldInfo();
                this._lastKnownX = wi.GetX();
                this._lastKnownY = wi.GetY();
                this._lastTickOverride = false
            }
            _GetVelocity() {
                if (!this._isEnabled) return [0, 0];
                const worldScale =
                    this._worldScale;
                const vec = this._body["GetLinearVelocity"]();
                return [vec["get_x"]() / worldScale, vec["get_y"]() / worldScale]
            }
            _GetVelocityX() {
                return this._isEnabled ? this._body["GetLinearVelocity"]()["get_x"]() / this._worldScale : 0
            }
            _GetVelocityY() {
                return this._isEnabled ? this._body["GetLinearVelocity"]()["get_y"]() / this._worldScale : 0
            }
            _SetDensity(d) {
                if (!this._isEnabled) return;
                if (this._density === d) return;
                this._density = d;
                for (const fixture of this._fixtures) fixture["SetDensity"](d);
                this._body["ResetMassData"]()
            }
            _GetDensity() {
                return this._isEnabled ?
                    this._density : 0
            }
            _SetFriction(f) {
                if (!this._isEnabled) return;
                if (this._friction === f) return;
                this._friction = f;
                for (const fixture of this._fixtures) fixture["SetFriction"](f);
                for (let contactEdge = this._body["GetContactList"](); this._box2d["getPointer"](contactEdge); contactEdge = contactEdge["get_next"]()) {
                    const contact = contactEdge["get_contact"]();
                    if (contact) contact["ResetFriction"]()
                }
            }
            _GetFriction() {
                return this._isEnabled ? this._friction : 0
            }
            _SetElasticity(e) {
                if (!this._isEnabled) return;
                if (this._restitution ===
                    e) return;
                this._restitution = e;
                for (const fixture of this._fixtures) fixture["SetRestitution"](e)
            }
            _GetElasticity() {
                return this._isEnabled ? this._restitution : 0
            }
            _SetLinearDamping(ld) {
                if (!this._isEnabled) return;
                if (this._linearDamping === ld) return;
                this._linearDamping = ld;
                this._body["SetLinearDamping"](ld)
            }
            _GetLinearDamping() {
                return this._isEnabled ? this._linearDamping : 0
            }
            _SetAngularDamping(ad) {
                if (!this._isEnabled) return;
                if (this._angularDamping === ad) return;
                this._angularDamping = ad;
                this._body["SetAngularDamping"](ad)
            }
            _GetAngularDamping() {
                return this._isEnabled ?
                    this._angularDamping : 0
            }
            _SetImmovable(i) {
                if (!this._isEnabled) return;
                i = !!i;
                if (this._isImmovable === i) return;
                this._isImmovable = i;
                this._body["SetType"](this._isImmovable ? 0 : 2);
                this._body["SetAwake"](true)
            }
            _IsImmovable() {
                return this._isImmovable
            }
            _SetPreventRotate(i) {
                if (!this._isEnabled) return;
                i = !!i;
                if (this._preventRotation === i) return;
                this._preventRotation = i;
                this._body["SetFixedRotation"](this._preventRotation);
                this._body["SetAngularVelocity"](0);
                this._body["SetAwake"](true)
            }
            _IsPreventRotate() {
                return this._preventRotation
            }
            _SetBullet(i) {
                if (!this._isEnabled) return;
                i = !!i;
                if (this._isBullet === i) return;
                this._isBullet = i;
                this._body["SetBullet"](this._isBullet);
                this._body["SetAwake"](true)
            }
            _IsBullet() {
                return this._isBullet
            }
            _GetMass() {
                return this._isEnabled ? this._body["GetMass"]() / this._worldScale : 0
            }
            _GetCenterOfMassX() {
                return this._isEnabled ? (this._body["GetPosition"]()["get_x"]() + this._body["GetLocalCenter"]()["get_x"]()) / this._worldScale : 0
            }
            _GetCenterOfMassY() {
                return this._isEnabled ? (this._body["GetPosition"]()["get_y"]() + this._body["GetLocalCenter"]()["get_y"]()) /
                    this._worldScale : 0
            }
            _GetCenterOfMass() {
                if (!this._isEnabled) return [0, 0];
                const posVec = this._body["GetPosition"]();
                const centerVec = this._body["GetLocalCenter"]();
                const worldScale = this._worldScale;
                return [(posVec["get_x"]() + centerVec["get_x"]()) / worldScale, (posVec["get_y"]() + centerVec["get_y"]()) / worldScale]
            }
            _IsSleeping() {
                return this._isEnabled ? !this._body["IsAwake"]() : false
            }
            _GetContactCount() {
                if (!this._isEnabled) return 0;
                let count = 0;
                for (let contactEdge = this._body["GetContactList"](); this._box2d["getPointer"](contactEdge); contactEdge =
                    contactEdge["get_next"]()) {
                    const contact = contactEdge["get_contact"]();
                    if (!contact) continue;
                    const manifold = contact["GetManifold"]();
                    const pointCount = manifold["get_pointCount"]();
                    count += pointCount
                }
                return count
            }
            _GetContactPositionAt(index) {
                index = Math.floor(index);
                if (!this._isEnabled) return [0, 0];
                let count = 0;
                for (let contactEdge = this._body["GetContactList"](); this._box2d["getPointer"](contactEdge); contactEdge = contactEdge["get_next"]()) {
                    const contact = contactEdge["get_contact"]();
                    if (!contact) continue;
                    const manifold =
                        contact["GetManifold"]();
                    const pointCount = manifold["get_pointCount"]();
                    if (index >= count && index < count + pointCount) {
                        const i = index - count;
                        const worldManifold = this.GetBehavior().GetWorldManifold();
                        contact["GetWorldManifold"](worldManifold);
                        const vec = worldManifold["get_points"](i);
                        return [vec["get_x"]() / this._worldScale, vec["get_y"]() / this._worldScale]
                    } else count += pointCount
                }
                return [0, 0]
            }
            GetScriptInterfaceClass() {
                return self.IPhysicsBehaviorInstance
            }
        };
        const map = new WeakMap;

        function UnwrapIWorldInstance(this_,
            iinst) {
            const runtime = map.get(this_).GetRuntime();
            return runtime._UnwrapIWorldInstance(iinst)
        }
        self.IPhysicsBehaviorInstance = class IPhysicsBehaviorInstance extends IBehaviorInstance {
            constructor() {
                super();
                map.set(this, IBehaviorInstance._GetInitInst().GetSdkInstance())
            }
            get isEnabled() {
                return map.get(this)._IsEnabled()
            }
            set isEnabled(e) {
                map.get(this)._SetEnabled(e)
            }
            applyForce(fx, fy, imgPt = 0) {
                C3X.RequireFiniteNumber(fx);
                C3X.RequireFiniteNumber(fy);
                map.get(this)._ApplyForce(fx, fy, imgPt)
            }
            applyForceTowardPosition(f,
                px, py, imgPt = 0) {
                C3X.RequireFiniteNumber(f);
                C3X.RequireFiniteNumber(px);
                C3X.RequireFiniteNumber(py);
                map.get(this)._ApplyForceToward(f, px, py, imgPt)
            }
            applyForceAtAngle(f, a, imgPt = 0) {
                C3X.RequireFiniteNumber(f);
                C3X.RequireFiniteNumber(a);
                map.get(this)._ApplyForceAtAngle(f, a, imgPt)
            }
            applyImpulse(ix, iy, imgPt = 0) {
                C3X.RequireFiniteNumber(ix);
                C3X.RequireFiniteNumber(iy);
                map.get(this)._ApplyImpulse(ix, iy, imgPt)
            }
            applyImpulseTowardPosition(i, px, py, imgPt = 0) {
                C3X.RequireFiniteNumber(i);
                C3X.RequireFiniteNumber(px);
                C3X.RequireFiniteNumber(py);
                map.get(this)._ApplyImpulseToward(i, px, py, imgPt)
            }
            applyImpulseAtAngle(i, a, imgPt = 0) {
                C3X.RequireFiniteNumber(i);
                C3X.RequireFiniteNumber(a);
                map.get(this)._ApplyImpulseAtAngle(i, a, imgPt)
            }
            applyTorque(m) {
                C3X.RequireFiniteNumber(m);
                map.get(this)._ApplyTorque(m)
            }
            applyTorqueToAngle(m, a) {
                C3X.RequireFiniteNumber(m);
                C3X.RequireFiniteNumber(a);
                map.get(this)._ApplyTorqueToAngle(m, a)
            }
            applyTorqueToPosition(m, px, py) {
                C3X.RequireFiniteNumber(m);
                C3X.RequireFiniteNumber(px);
                C3X.RequireFiniteNumber(py);
                map.get(this)._ApplyTorqueToPosition(m,
                    px, py)
            }
            set angularVelocity(v) {
                C3X.RequireFiniteNumber(v);
                map.get(this)._SetAngularVelocity(v)
            }
            get angularVelocity() {
                return map.get(this)._GetAngularVelocity()
            }
            setVelocity(vx, vy) {
                C3X.RequireFiniteNumber(vx);
                C3X.RequireFiniteNumber(vy);
                map.get(this)._SetVelocity(vx, vy)
            }
            getVelocityX() {
                return map.get(this)._GetVelocityX()
            }
            getVelocityY() {
                return map.get(this)._GetVelocityY()
            }
            getVelocity() {
                return map.get(this)._GetVelocity()
            }
            set density(d) {
                C3X.RequireFiniteNumber(d);
                map.get(this)._SetDensity(d)
            }
            get density() {
                return map.get(this)._GetDensity()
            }
            set friction(f) {
                C3X.RequireFiniteNumber(f);
                map.get(this)._SetFriction(f)
            }
            get friction() {
                return map.get(this)._GetFriction()
            }
            set elasticity(e) {
                C3X.RequireFiniteNumber(e);
                map.get(this)._SetElasticity(e)
            }
            get elasticity() {
                return map.get(this)._GetElasticity()
            }
            set linearDamping(ld) {
                C3X.RequireFiniteNumber(ld);
                map.get(this)._SetLinearDamping(ld)
            }
            get linearDamping() {
                return map.get(this)._GetLinearDamping()
            }
            set angularDamping(ad) {
                C3X.RequireFiniteNumber(ad);
                map.get(this)._SetAngularDamping(ad)
            }
            get angularDamping() {
                return map.get(this)._GetAngularDamping()
            }
            set isImmovable(i) {
                map.get(this)._SetImmovable(i)
            }
            get isImmovable() {
                return map.get(this)._IsImmovable()
            }
            set isPreventRotation(p) {
                map.get(this)._SetPreventRotate(p)
            }
            get isPreventRotation() {
                return map.get(this)._IsPreventRotate()
            }
            set isBullet(b) {
                map.get(this)._SetBullet(b)
            }
            get isBullet() {
                return map.get(this)._IsBullet()
            }
            get mass() {
                return map.get(this)._GetMass()
            }
            getCenterOfMassX() {
                return map.get(this)._GetCenterOfMassX()
            }
            getCenterOfMassY() {
                return map.get(this)._GetCenterOfMassY()
            }
            getCenterOfMass() {
                return map.get(this)._GetCenterOfMass()
            }
            getContactCount() {
                return map.get(this)._GetContactCount()
            }
            getContactX(index) {
                C3X.RequireFiniteNumber(index);
                return map.get(this)._GetContactPositionAt(index)[0]
            }
            getContactY(index) {
                C3X.RequireFiniteNumber(index);
                return map.get(this)._GetContactPositionAt(index)[1]
            }
            getContact(index) {
                C3X.RequireFiniteNumber(index);
                return map.get(this)._GetContactPositionAt(index)
            }
            get isSleeping() {
                return map.get(this)._IsSleeping()
            }
            createDistanceJoint(imgPt, iOtherInst, otherImgPt, damping, freq) {
                C3X.RequireFiniteNumber(damping);
                C3X.RequireFiniteNumber(freq);
                const otherInst = UnwrapIWorldInstance(this, iOtherInst);
                map.get(this)._CreateDistanceJoint(imgPt,
                    otherInst, otherImgPt, damping, freq)
            }
            createRevoluteJoint(imgPt, iOtherInst) {
                const otherInst = UnwrapIWorldInstance(this, iOtherInst);
                map.get(this)._CreateRevoluteJoint(imgPt, otherInst)
            }
            createLimitedRevoluteJoint(imgPt, iOtherInst, lower, upper) {
                C3X.RequireFiniteNumber(lower);
                C3X.RequireFiniteNumber(upper);
                const otherInst = UnwrapIWorldInstance(this, iOtherInst);
                map.get(this)._CreateLimitedRevoluteJoint(imgPt, otherInst, lower, upper)
            }
            createPrismaticJoint(imgPt, iOtherInst, axisAngle, enableLimit, lowerTranslation, upperTranslation,
                enableMotor, motorSpeed, maxMotorForce) {
                const otherInst = UnwrapIWorldInstance(this, iOtherInst);
                map.get(this)._CreatePrismaticJoint(imgPt, otherInst, axisAngle, enableLimit, lowerTranslation, upperTranslation, enableMotor, motorSpeed, maxMotorForce)
            }
            removeAllJoints() {
                map.get(this)._RemoveJoints()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Physics.Cnds = {
            IsSleeping() {
                return this._IsSleeping()
            },
            CompareVelocity(which, cmp, x) {
                if (!this._isEnabled) return false;
                let value = 0;
                if (which === 0) value = this._GetVelocityX();
                else if (which === 1) value = this._GetVelocityY();
                else {
                    const [vx, vy] = this._GetVelocity();
                    value = Math.hypot(vx, vy)
                }
                return C3.compare(value, cmp, x)
            },
            CompareAngularVelocity(cmp, x) {
                if (!this._isEnabled) return false;
                const av = C3.toDegrees(this._GetAngularVelocity());
                return C3.compare(av, cmp, x)
            },
            CompareMass(cmp, x) {
                if (!this._isEnabled) return false;
                const mass = this._GetMass();
                return C3.compare(mass, cmp, x)
            },
            IsEnabled() {
                return this._IsEnabled()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Physics.Acts = {
            ApplyForce(fx, fy, imgPt) {
                this._ApplyForce(fx, fy, imgPt)
            },
            ApplyForceToward(f, px, py, imgPt) {
                this._ApplyForceToward(f, px, py, imgPt)
            },
            ApplyForceAtAngle(f, a, imgPt) {
                this._ApplyForceAtAngle(f, C3.toRadians(a), imgPt)
            },
            ApplyImpulse(fx, fy, imgPt) {
                this._ApplyImpulse(fx, fy, imgPt)
            },
            ApplyImpulseToward(f, px, py, imgPt) {
                this._ApplyImpulseToward(f, px, py, imgPt)
            },
            ApplyImpulseAtAngle(f, a, imgPt) {
                this._ApplyImpulseAtAngle(f, C3.toRadians(a), imgPt)
            },
            ApplyTorque(m) {
                this._ApplyTorque(C3.toRadians(m))
            },
            ApplyTorqueToAngle(m, a) {
                this._ApplyTorqueToAngle(C3.toRadians(m), C3.toRadians(a))
            },
            ApplyTorqueToPosition(m, x, y) {
                this._ApplyTorqueToPosition(C3.toRadians(m), x, y)
            },
            SetAngularVelocity(v) {
                this._SetAngularVelocity(C3.toRadians(v))
            },
            CreateDistanceJoint(imgPt, objectClass, otherImgPt, damping, freq) {
                if (!objectClass) return;
                const otherInst = objectClass.GetFirstPicked(this._inst);
                this._CreateDistanceJoint(imgPt, otherInst, otherImgPt, damping, freq)
            },
            CreateRevoluteJoint(imgPt, objectClass) {
                if (!objectClass) return;
                const otherInst =
                    objectClass.GetFirstPicked(this._inst);
                this._CreateRevoluteJoint(imgPt, otherInst)
            },
            CreateLimitedRevoluteJoint(imgPt, objectClass, lower, upper) {
                if (!objectClass) return;
                const otherInst = objectClass.GetFirstPicked(this._inst);
                this._CreateLimitedRevoluteJoint(imgPt, otherInst, C3.toRadians(lower), C3.toRadians(upper))
            },
            CreatePrismaticJoint(imgPt, objectClass, axisAngle, enableLimit, lowerTranslation, upperTranslation, enableMotor, motorSpeed, maxMotorForce) {
                if (!objectClass) return;
                const otherInst = objectClass.GetFirstPicked(this._inst);
                this._CreatePrismaticJoint(imgPt, otherInst, C3.toRadians(axisAngle), enableLimit, lowerTranslation, upperTranslation, enableMotor, C3.toRadians(motorSpeed), maxMotorForce)
            },
            RemoveJoints() {
                this._RemoveJoints()
            },
            SetWorldGravity(g) {
                this.GetBehavior().SetGravity(g)
            },
            SetSteppingMode(m) {
                this.GetBehavior().SetSteppingMode(m)
            },
            SetIterations(vel, pos) {
                this.GetBehavior().SetIterations(vel, pos)
            },
            SetVelocity(vx, vy) {
                this._SetVelocity(vx, vy)
            },
            SetDensity(d) {
                this._SetDensity(d)
            },
            SetFriction(f) {
                this._SetFriction(f)
            },
            SetElasticity(e) {
                this._SetElasticity(e)
            },
            SetLinearDamping(ld) {
                this._SetLinearDamping(ld)
            },
            SetAngularDamping(ad) {
                this._SetAngularDamping(ad)
            },
            SetImmovable(i) {
                this._SetImmovable(i)
            },
            EnableCollisions(objectClass, state) {
                this.GetBehavior().SetCollisionsEnabled(this.GetObjectClass(), objectClass, state !== 0)
            },
            SetPreventRotate(i) {
                this._SetPreventRotate(i !== 0)
            },
            SetBullet(i) {
                this._SetBullet(i !== 0)
            },
            SetEnabled(e) {
                this._SetEnabled(e !== 0)
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Physics.Exps = {
            VelocityX() {
                return this._GetVelocityX()
            },
            VelocityY() {
                return this._GetVelocityY()
            },
            AngularVelocity() {
                return C3.toDegrees(this._GetAngularVelocity())
            },
            Mass() {
                return this._GetMass()
            },
            CenterOfMassX() {
                return this._GetCenterOfMassX()
            },
            CenterOfMassY() {
                return this._GetCenterOfMassY()
            },
            Density() {
                return this._GetDensity()
            },
            Friction() {
                return this._GetFriction()
            },
            Elasticity() {
                return this._GetElasticity()
            },
            LinearDamping() {
                return this._GetLinearDamping()
            },
            AngularDamping() {
                return this._GetAngularDamping()
            },
            ContactCount() {
                return this._GetContactCount()
            },
            ContactXAt(i) {
                return this._GetContactPositionAt(i)[0]
            },
            ContactYAt(i) {
                return this._GetContactPositionAt(i)[1]
            }
        }
    };

}

{
    'use strict';
    const C3 = self.C3;
    const b2Separator = {};
    C3.Behaviors.Physics.Separator = b2Separator;
    const GetVec2 = C3.Behaviors.Physics.GetVec2;
    const FreeVec2 = C3.Behaviors.Physics.FreeVec2;

    function CloneVec2(v) {
        return GetVec2(v["get_x"](), v["get_y"]())
    }
    b2Separator.det = function(x1, y1, x2, y2, x3, y3) {
        return x1 * y2 + x2 * y3 + x3 * y1 - y1 * x2 - y2 * x3 - y3 * x1
    };
    b2Separator.hitRay = function(x1, y1, x2, y2, x3, y3, x4, y4) {
        const t1 = x3 - x1,
            t2 = y3 - y1,
            t3 = x2 - x1,
            t4 = y2 - y1,
            t5 = x4 - x3,
            t6 = y4 - y3,
            t7 = t4 * t5 - t3 * t6;
        const a = (t5 * t2 - t6 * t1) / t7;
        const px = x1 + a * t3,
            py = y1 + a * t4;
        const b1 = b2Separator.isOnSegment(x2, y2, x1, y1, px, py);
        const b2 = b2Separator.isOnSegment(px, py, x3, y3, x4, y4);
        if (b1 && b2) return GetVec2(px, py);
        else return null
    };
    b2Separator.isOnSegment = function(px, py, x1, y1, x2, y2) {
        const b1 = x1 + .1 >= px && px >= x2 - .1 || x1 - .1 <= px && px <= x2 + .1;
        const b2 = y1 + .1 >= py && py >= y2 - .1 || y1 - .1 <= py && py <= y2 + .1;
        return b1 && b2 && b2Separator.isOnLine(px, py, x1, y1, x2, y2)
    };
    b2Separator.isOnLine = function(px, py, x1, y1, x2, y2) {
        if (Math.abs(x2 - x1) > .1) {
            const a = (y2 - y1) / (x2 - x1);
            const possibleY = a * (px - x1) + y1;
            const diff = Math.abs(possibleY - py);
            return diff < .1
        }
        return Math.abs(px - x1) < .1
    };
    b2Separator.pointsMatch = function(x1, y1, x2, y2) {
        return Math.abs(x2 - x1) < .1 && Math.abs(y2 - y1) < .1
    };
    b2Separator.Separate = function(verticesVec, objarea) {
        const calced = b2Separator.calcShapes(verticesVec);
        let ret = [];
        for (let i = 0, len = calced.length; i < len; ++i) {
            const a = calced[i];
            const poly = [];
            let areasum = 0;
            for (let j = 0, lenj = a.length; j < lenj; ++j) {
                const b = a[j];
                const c = a[(j + 1) % lenj];
                areasum += b["get_x"]() * c["get_y"]() - b["get_y"]() * c["get_x"]();
                poly.push(GetVec2(b["get_x"](), b["get_y"]()))
            }
            areasum = Math.abs(areasum / 2);
            if (areasum >= objarea * .001) ret.push(poly);
            else
                for (let j = 0, lenj = poly.length; j < lenj; j++) FreeVec2(poly[j])
        }
        ret =
            SplitConvexPolysOver8Points(ret);
        return ret
    };
    b2Separator.calcShapes = function(verticesVec) {
        let vec = [];
        let i = 0,
            n = 0,
            j = 0;
        let d = 0,
            t = 0,
            dx = 0,
            dy = 0,
            minLen = 0;
        let i1 = 0,
            i2 = 0,
            i3 = 0;
        let p1, p2, p3, v1, v2, v, hitV;
        let j1 = 0,
            j2 = 0,
            k = 0,
            h = 0;
        let vec1 = [],
            vec2 = [];
        let isConvex = false;
        let figsVec = [],
            queue = [];
        let pushed = false;
        queue.push(verticesVec);
        while (queue.length) {
            vec = queue[0];
            n = vec.length;
            isConvex = true;
            for (i = 0; i < n; i++) {
                i1 = i;
                i2 = i < n - 1 ? i + 1 : i + 1 - n;
                i3 = i < n - 2 ? i + 2 : i + 2 - n;
                p1 = vec[i1];
                p2 = vec[i2];
                p3 = vec[i3];
                d = b2Separator.det(p1["get_x"](), p1["get_y"](), p2["get_x"](), p2["get_y"](),
                    p3["get_x"](), p3["get_y"]());
                if (d < 0) {
                    isConvex = false;
                    minLen = 1E9;
                    for (j = 0; j < n; j++)
                        if (j !== i1 && j !== i2) {
                            j1 = j;
                            j2 = j < n - 1 ? j + 1 : 0;
                            v1 = vec[j1];
                            v2 = vec[j2];
                            v = b2Separator.hitRay(p1["get_x"](), p1["get_y"](), p2["get_x"](), p2["get_y"](), v1["get_x"](), v1["get_y"](), v2["get_x"](), v2["get_y"]());
                            if (v) {
                                dx = p2["get_x"]() - v["get_x"]();
                                dy = p2["get_y"]() - v["get_y"]();
                                t = dx * dx + dy * dy;
                                if (t < minLen) {
                                    h = j1;
                                    k = j2;
                                    hitV = v;
                                    minLen = t
                                } else FreeVec2(v)
                            }
                        }
                    if (minLen === 1E9) return [];
                    vec1 = [];
                    vec2 = [];
                    j1 = h;
                    j2 = k;
                    v1 = vec[j1];
                    v2 = vec[j2];
                    pushed = false;
                    if (!b2Separator.pointsMatch(hitV["get_x"](),
                            hitV["get_y"](), v2["get_x"](), v2["get_y"]())) {
                        vec1.push(hitV);
                        pushed = true
                    }
                    if (!b2Separator.pointsMatch(hitV["get_x"](), hitV["get_y"](), v1["get_x"](), v1["get_y"]())) {
                        vec2.push(hitV);
                        pushed = true
                    }
                    if (!pushed) FreeVec2(hitV);
                    h = -1;
                    k = i1;
                    while (true) {
                        if (k !== j2) vec1.push(vec[k]);
                        else {
                            if (h < 0 || h >= n) return [];
                            if (!b2Separator.isOnSegment(v2["get_x"](), v2["get_y"](), vec[h]["get_x"](), vec[h]["get_y"](), p1["get_x"](), p1["get_y"]())) vec1.push(vec[k]);
                            break
                        }
                        h = k;
                        if (k - 1 < 0) k = n - 1;
                        else k--
                    }
                    vec1.reverse();
                    h = -1;
                    k = i2;
                    while (true) {
                        if (k !==
                            j1) vec2.push(vec[k]);
                        else {
                            if (h < 0 || h >= n) return [];
                            if (k === j1 && !b2Separator.isOnSegment(v1["get_x"](), v1["get_y"](), vec[h]["get_x"](), vec[h]["get_y"](), p2["get_x"](), p2["get_y"]())) vec2.push(vec[k]);
                            break
                        }
                        h = k;
                        if (k + 1 > n - 1) k = 0;
                        else k++
                    }
                    queue.push(vec1, vec2);
                    queue.shift();
                    break
                }
            }
            if (isConvex) figsVec.push(queue.shift())
        }
        return figsVec
    };

    function SplitConvexPolysOver8Points(convexPolys) {
        const ret = [];
        for (const arr of convexPolys)
            if (arr.length <= 8) ret.push(arr);
            else ret.push.apply(ret, SplitConvexPoly(arr));
        return ret
    }

    function SplitConvexPoly(arr) {
        const ret = [];
        ret.push(arr.splice(0, 8));
        const first = ret[0][0];
        let last = ret[0][7];
        while (arr.length) {
            const poly = arr.splice(0, Math.min(arr.length, 6));
            let nextLast = poly.at(-1);
            poly.push(CloneVec2(first));
            poly.push(CloneVec2(last));
            ret.push(poly);
            last = nextLast
        }
        return ret
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Behaviors.scrollto = class ScrollToBehavior extends C3.SDKBehaviorBase {
            constructor(opts) {
                super(opts);
                this._shakeMag = 0;
                this._shakeStart = 0;
                this._shakeEnd = 0;
                this._shakeMode = 0
            }
            Release() {
                super.Release()
            }
            SetShakeMagnitude(m) {
                this._shakeMag = m
            }
            GetShakeMagnitude() {
                return this._shakeMag
            }
            SetShakeStart(s) {
                this._shakeStart = s
            }
            GetShakeStart() {
                return this._shakeStart
            }
            SetShakeEnd(s) {
                this._shakeEnd = s
            }
            GetShakeEnd() {
                return this._shakeEnd
            }
            SetShakeMode(m) {
                this._shakeMode = m
            }
            GetShakeMode() {
                return this._shakeMode
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.scrollto.Type = class ScrollToType extends C3.SDKBehaviorTypeBase {
            constructor(objectClass) {
                super(objectClass)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const ENABLE = 0;
        C3.Behaviors.scrollto.Instance = class ScrollToInstance extends C3.SDKBehaviorInstanceBase {
            constructor(inst, properties) {
                super(inst);
                this._isEnabled = true;
                if (properties) this._isEnabled = properties[ENABLE];
                if (this._isEnabled) this._StartTicking2()
            }
            Release() {
                super.Release()
            }
            SaveToJson() {
                const behavior = this.GetBehavior();
                return {
                    "e": this._isEnabled,
                    "smg": behavior.GetShakeMagnitude(),
                    "ss": behavior.GetShakeStart(),
                    "se": behavior.GetShakeEnd(),
                    "smd": behavior.GetShakeMode()
                }
            }
            LoadFromJson(o) {
                const behavior =
                    this.GetBehavior();
                behavior.SetShakeMagnitude(o["smg"]);
                behavior.SetShakeStart(o["ss"]);
                behavior.SetShakeEnd(o["se"]);
                behavior.SetShakeMode(o["smd"]);
                this._isEnabled = o["e"];
                if (this._isEnabled) this._StartTicking2();
                else this._StopTicking2()
            }
            _SetEnabled(e) {
                this._isEnabled = !!e;
                if (this._isEnabled) this._StartTicking2();
                else this._StopTicking2()
            }
            IsEnabled() {
                return this._isEnabled
            }
            Tick2() {
                if (!this.IsEnabled()) return;
                const dt = this._runtime.GetDt(this._inst);
                const behavior = this.GetBehavior();
                const allInstances =
                    behavior.GetInstances();
                let sumX = 0;
                let sumY = 0;
                let count = 0;
                for (const inst of allInstances) {
                    const behInst = inst.GetBehaviorInstanceFromCtor(C3.Behaviors.scrollto);
                    if (!behInst || !behInst.GetSdkInstance().IsEnabled()) continue;
                    const wi = inst.GetWorldInfo();
                    sumX += wi.GetX();
                    sumY += wi.GetY();
                    ++count
                }
                const layout = this._inst.GetWorldInfo().GetLayout();
                const now = this._runtime.GetGameTime();
                let offX = 0;
                let offY = 0;
                if (now >= behavior.GetShakeStart() && now < behavior.GetShakeEnd()) {
                    let mag = behavior.GetShakeMagnitude() * Math.min(this._runtime.GetTimeScale(),
                        1);
                    if (behavior.GetShakeMode() === 0) mag *= 1 - (now - behavior.GetShakeStart()) / (behavior.GetShakeEnd() - behavior.GetShakeStart());
                    const a = this._runtime.Random() * Math.PI * 2;
                    const d = this._runtime.Random() * mag;
                    offX = Math.cos(a) * d;
                    offY = Math.sin(a) * d
                }
                layout.SetScrollX(sumX / count + offX);
                layout.SetScrollY(sumY / count + offY)
            }
            GetPropertyValueByIndex(index) {
                switch (index) {
                    case ENABLE:
                        return this._isEnabled
                }
            }
            SetPropertyValueByIndex(index, value) {
                switch (index) {
                    case ENABLE:
                        this._isEnabled = !!value;
                        this._isEnabled ? this._StartTicking2() :
                            this._StopTicking2();
                        break
                }
            }
            GetDebuggerProperties() {
                const prefix = "behaviors.scrollto";
                return [{
                    title: "$" + this.GetBehaviorType().GetName(),
                    properties: [{
                        name: prefix + ".properties.enabled.name",
                        value: this.IsEnabled(),
                        onedit: v => this._SetEnabled(v)
                    }]
                }]
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.scrollto.Cnds = {
            IsEnabled() {
                return this.IsEnabled()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.scrollto.Acts = {
            Shake(mag, dur, mode) {
                const behavior = this.GetBehavior();
                behavior.SetShakeMagnitude(mag);
                behavior.SetShakeStart(this._runtime.GetGameTime());
                behavior.SetShakeEnd(this._runtime.GetGameTime() + dur);
                behavior.SetShakeMode(mode)
            },
            SetEnabled(e) {
                this._SetEnabled(e !== 0)
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.scrollto.Exps = {}
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Behaviors.Timer = class TimerBehavior extends C3.SDKBehaviorBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Timer.Type = class TimerType extends C3.SDKBehaviorTypeBase {
            constructor(behaviorType) {
                super(behaviorType)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const IBehaviorInstance = self.IBehaviorInstance;
        C3.Behaviors.Timer.SingleTimer = class SingleTimer {
            constructor(current, total, duration, isRegular) {
                this._current = C3.New(C3.KahanSum);
                this._current.Set(current || 0);
                this._total = C3.New(C3.KahanSum);
                this._total.Set(total || 0);
                this._duration = duration || 0;
                this._isRegular = !!isRegular;
                this._isPaused = false
            }
            GetCurrentTime() {
                return this._current.Get()
            }
            GetTotalTime() {
                return this._total.Get()
            }
            GetDuration() {
                return this._duration
            }
            SetPaused(p) {
                this._isPaused = !!p
            }
            IsPaused() {
                return this._isPaused
            }
            Add(t) {
                this._current.Add(t);
                this._total.Add(t)
            }
            HasFinished() {
                return this._current.Get() >= this._duration
            }
            Update() {
                if (this.HasFinished())
                    if (this._isRegular) this._current.Subtract(this._duration);
                    else return true;
                return false
            }
            SaveToJson() {
                return {
                    "c": this._current.Get(),
                    "t": this._total.Get(),
                    "d": this._duration,
                    "r": this._isRegular,
                    "p": this._isPaused
                }
            }
            LoadFromJson(o) {
                this._current.Set(o["c"]);
                this._total.Set(o["t"]);
                this._duration = o["d"];
                this._isRegular = !!o["r"];
                this._isPaused = !!o["p"]
            }
        };
        C3.Behaviors.Timer.Instance = class TimerInstance extends C3.SDKBehaviorInstanceBase {
            constructor(behInst, properties) {
                super(behInst);
                this._timers = new Map
            }
            Release() {
                this._timers.clear();
                super.Release()
            }
            _StartTimer(duration, name, isRegular) {
                const timer = new C3.Behaviors.Timer.SingleTimer(0, 0, duration, isRegular);
                this._timers.set(name.toLowerCase(), timer);
                this._UpdateTickState()
            }
            _StopTimer(name) {
                this._timers.delete(name.toLowerCase());
                this._UpdateTickState()
            }
            _StopAllTimers() {
                this._timers.clear();
                this._UpdateTickState()
            }
            _IsTimerRunning(name) {
                return this._timers.has(name.toLowerCase())
            }
            _GetTimerCurrentTime(name) {
                const timer = this._timers.get(name.toLowerCase());
                return timer ? timer.GetCurrentTime() : 0
            }
            _GetTimerTotalTime(name) {
                const timer = this._timers.get(name.toLowerCase());
                return timer ? timer.GetTotalTime() : 0
            }
            _GetTimerDuration(name) {
                const timer = this._timers.get(name.toLowerCase());
                return timer ? timer.GetDuration() : 0
            }
            _HasTimerFinished(name) {
                const timer = this._timers.get(name.toLowerCase());
                return timer ?
                    timer.HasFinished() : false
            }
            _SetTimerPaused(name, isPaused) {
                const timer = this._timers.get(name.toLowerCase());
                if (timer) timer.SetPaused(isPaused)
            }
            _IsTimerPaused(name) {
                const timer = this._timers.get(name.toLowerCase());
                return timer ? timer.IsPaused() : false
            }
            _UpdateTickState() {
                if (this._timers.size > 0) {
                    this._StartTicking();
                    this._StartTicking2()
                } else {
                    this._StopTicking();
                    this._StopTicking2()
                }
            }
            SaveToJson() {
                const ret = {};
                for (const [name, timer] of this._timers.entries()) ret[name] = timer.SaveToJson();
                return ret
            }
            LoadFromJson(o) {
                this._timers.clear();
                for (const [name, data] of Object.entries(o)) {
                    const timer = new C3.Behaviors.Timer.SingleTimer;
                    timer.LoadFromJson(data);
                    this._timers.set(name, timer)
                }
                this._UpdateTickState()
            }
            Tick() {
                const dt = this._runtime.GetDt(this._inst);
                for (const [name, timer] of this._timers)
                    if (!timer.IsPaused()) {
                        timer.Add(dt);
                        if (timer.HasFinished()) this.DispatchScriptEvent("timer", false, {
                            tag: name
                        })
                    }
            }
            Tick2() {
                for (const [name, timer] of this._timers.entries()) {
                    const shouldDelete = timer.Update();
                    if (shouldDelete) this._timers.delete(name)
                }
            }
            GetDebuggerProperties() {
                return [{
                    title: "behaviors.timer.debugger.timers",
                    properties: [...this._timers.entries()].map(entry => ({
                        name: "$" + entry[0],
                        value: `${Math.round(entry[1].GetCurrentTime()*10)/10} / ${Math.round(entry[1].GetDuration()*10)/10}`
                    }))
                }]
            }
            GetScriptInterfaceClass() {
                return self.ITimerBehaviorInstance
            }
        };
        const map = new WeakMap;
        const VALID_TIMER_TYPES = ["once", "regular"];
        self.ITimerBehaviorInstance = class ITimerBehaviorInstance extends IBehaviorInstance {
            constructor() {
                super();
                map.set(this, IBehaviorInstance._GetInitInst().GetSdkInstance())
            }
            startTimer(duration, name, type =
                "once") {
                C3X.RequireFiniteNumber(duration);
                C3X.RequireString(name);
                const i = VALID_TIMER_TYPES.indexOf(type);
                if (i === -1) throw new Error("invalid type");
                map.get(this)._StartTimer(duration, name, i === 1)
            }
            setTimerPaused(name, isPaused) {
                C3X.RequireString(name);
                map.get(this)._SetTimerPaused(name, !!isPaused)
            }
            stopTimer(name) {
                C3X.RequireString(name);
                map.get(this)._StopTimer(name)
            }
            stopAllTimers() {
                map.get(this)._StopAllTimers()
            }
            isTimerRunning(name) {
                C3X.RequireString(name);
                return map.get(this)._IsTimerRunning(name)
            }
            isTimerPaused(name) {
                C3X.RequireString(name);
                return map.get(this)._IsTimerPaused(name)
            }
            getCurrentTime(name) {
                C3X.RequireString(name);
                return map.get(this)._GetTimerCurrentTime(name)
            }
            getTotalTime(name) {
                C3X.RequireString(name);
                return map.get(this)._GetTimerTotalTime(name)
            }
            getDuration(name) {
                C3X.RequireString(name);
                return map.get(this)._GetTimerDuration(name)
            }
            hasFinished(name) {
                C3X.RequireString(name);
                return map.get(this)._HasTimerFinished(name)
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Timer.Cnds = {
            OnTimer(name) {
                return this._HasTimerFinished(name)
            },
            IsTimerRunning(name) {
                return this._IsTimerRunning(name)
            },
            IsTimerPaused(name) {
                return this._IsTimerPaused(name)
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Timer.Acts = {
            StartTimer(duration, type, name) {
                this._StartTimer(duration, name, type === 1)
            },
            StopTimer(name) {
                this._StopTimer(name)
            },
            StopAllTimers() {
                this._StopAllTimers()
            },
            PauseResumeTimer(name, state) {
                this._SetTimerPaused(name, state === 0)
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Timer.Exps = {
            CurrentTime(name) {
                return this._GetTimerCurrentTime(name)
            },
            TotalTime(name) {
                return this._GetTimerTotalTime(name)
            },
            Duration(name) {
                return this._GetTimerDuration(name)
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Behaviors.Bullet = class BulletBehavior extends C3.SDKBehaviorBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Bullet.Type = class BulletType extends C3.SDKBehaviorTypeBase {
            constructor(behaviorType) {
                super(behaviorType)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const IBehaviorInstance = self.IBehaviorInstance;
        const SPEED = 0;
        const ACCELERATION = 1;
        const GRAVITY = 2;
        const BOUNCE_OFF_SOLIDS = 3;
        const SET_ANGLE = 4;
        const STEPPING = 5;
        const ENABLE = 6;
        C3.Behaviors.Bullet.Instance = class BulletInstance extends C3.SDKBehaviorInstanceBase {
            constructor(behInst, properties) {
                super(behInst);
                const wi = this.GetWorldInfo();
                this._speed = 0;
                this._acc = 0;
                this._g = 0;
                this._bounceOffSolid = false;
                this._setAngle = false;
                this._isStepping = false;
                this._isEnabled = true;
                this._dx =
                    0;
                this._dy = 0;
                this._lastX = wi.GetX();
                this._lastY = wi.GetY();
                this._lastKnownAngle = wi.GetAngle();
                this._travelled = 0;
                this._stepSize = Math.min(Math.abs(wi.GetWidth()), Math.abs(wi.GetHeight()) / 2);
                this._stopStepping = false;
                if (properties) {
                    this._speed = properties[SPEED];
                    this._acc = properties[ACCELERATION];
                    this._g = properties[GRAVITY];
                    this._bounceOffSolid = !!properties[BOUNCE_OFF_SOLIDS];
                    this._setAngle = !!properties[SET_ANGLE];
                    this._isStepping = !!properties[STEPPING];
                    this._isEnabled = !!properties[ENABLE]
                }
                const a = wi.GetAngle();
                this._dx = Math.cos(a) * this._speed;
                this._dy = Math.sin(a) * this._speed;
                if (this._isEnabled) {
                    this._StartTicking();
                    if (this._bounceOffSolid) this._StartPostTicking()
                }
            }
            Release() {
                super.Release()
            }
            SaveToJson() {
                const o = {
                    "dx": this._dx,
                    "dy": this._dy,
                    "lx": this._lastX,
                    "ly": this._lastY,
                    "lka": this._lastKnownAngle,
                    "t": this._travelled
                };
                if (this._acc !== 0) o["acc"] = this._acc;
                if (this._g !== 0) o["g"] = this._g;
                if (this._isStepping) o["st"] = this._isStepping;
                if (!this._isEnabled) o["e"] = this._isEnabled;
                if (this._bounceOffSolid) o["bos"] =
                    this._bounceOffSolid;
                if (this._setAngle) o["sa"] = this._setAngle;
                return o
            }
            LoadFromJson(o) {
                this._dx = o["dx"];
                this._dy = o["dy"];
                this._lastX = o["lx"];
                this._lastY = o["ly"];
                this._lastKnownAngle = o["lka"];
                this._travelled = o["t"];
                this._acc = o.hasOwnProperty("acc") ? o["acc"] : 0;
                this._g = o.hasOwnProperty("g") ? o["g"] : 0;
                this._isStepping = o.hasOwnProperty("st") ? o["st"] : false;
                this._bounceOffSolid = o.hasOwnProperty("bos") ? o["bos"] : false;
                this._setAngle = o.hasOwnProperty("sa") ? o["sa"] : false;
                this._SetEnabled(o.hasOwnProperty("e") ?
                    o["e"] : true)
            }
            Tick() {
                if (!this._isEnabled) return;
                const dt = this._runtime.GetDt(this._inst);
                const wi = this._inst.GetWorldInfo();
                if (wi.GetAngle() !== this._lastKnownAngle) {
                    const angle = wi.GetAngle();
                    if (this._setAngle) {
                        const s = C3.distanceTo(0, 0, this._dx, this._dy);
                        this._dx = Math.cos(angle) * s;
                        this._dy = Math.sin(angle) * s
                    }
                    this._lastKnownAngle = angle
                }
                let xacc = 0;
                let yacc = 0;
                if (this._acc !== 0) {
                    let s = C3.distanceTo(0, 0, this._dx, this._dy);
                    let a = 0;
                    if (this._dx === 0 && this._dy === 0) a = wi.GetAngle();
                    else a = C3.angleTo(0, 0, this._dx,
                        this._dy);
                    s += this._acc * dt;
                    xacc = Math.cos(a) * this._acc;
                    yacc = Math.sin(a) * this._acc;
                    if (s < 0) {
                        s = 0;
                        xacc = 0;
                        yacc = 0
                    }
                    this._dx = Math.cos(a) * s;
                    this._dy = Math.sin(a) * s
                }
                if (this._g !== 0) {
                    this._dy += this._g * dt;
                    yacc += this._g
                }
                this._lastX = wi.GetX();
                this._lastY = wi.GetY();
                if (this._dx !== 0 || this._dy !== 0) {
                    const mx = this._dx * dt + .5 * xacc * dt * dt;
                    const my = this._dy * dt + .5 * yacc * dt * dt;
                    const stepDist = C3.distanceTo(0, 0, mx, my);
                    this._MoveBy(mx, my, stepDist);
                    this._travelled += stepDist;
                    if (this._setAngle && (mx !== 0 || my !== 0)) {
                        const a = C3.angleTo(0,
                            0, mx, my);
                        wi.SetAngle(a);
                        this._lastKnownAngle = wi.GetAngle()
                    }
                    wi.SetBboxChanged()
                }
            }
            _MoveBy(mx, my, stepDist) {
                const wi = this.GetWorldInfo();
                if (!this._isStepping || stepDist <= this._stepSize) {
                    wi.OffsetXY(mx, my);
                    wi.SetBboxChanged();
                    if (this._isStepping) this.Trigger(C3.Behaviors.Bullet.Cnds.OnStep);
                    return
                }
                this._stopStepping = false;
                const startX = wi.GetX();
                const startY = wi.GetY();
                const endX = startX + mx;
                const endY = startY + my;
                const a = C3.angleTo(0, 0, mx, my);
                const stepX = Math.cos(a) * this._stepSize;
                const stepY = Math.sin(a) * this._stepSize;
                const stepCount = Math.floor(stepDist / this._stepSize);
                for (let i = 1; i <= stepCount; ++i) {
                    wi.SetXY(startX + stepX * i, startY + stepY * i);
                    wi.SetBboxChanged();
                    this.Trigger(C3.Behaviors.Bullet.Cnds.OnStep);
                    if (this._inst.IsDestroyed() || this._stopStepping) return
                }
                wi.SetXY(endX, endY);
                wi.SetBboxChanged();
                this.Trigger(C3.Behaviors.Bullet.Cnds.OnStep)
            }
            PostTick() {
                if (!this._isEnabled || !this._bounceOffSolid || this._dx === 0 && this._dy === 0) return;
                const dt = this._runtime.GetDt(this._inst);
                const wi = this._inst.GetWorldInfo();
                const collisionEngine =
                    this._runtime.GetCollisionEngine();
                const bounceSolid = collisionEngine.TestOverlapSolid(this._inst);
                if (bounceSolid) {
                    collisionEngine.RegisterCollision(this._inst, bounceSolid);
                    const s = C3.distanceTo(0, 0, this._dx, this._dy);
                    const bounceAngle = collisionEngine.CalculateBounceAngle(this._inst, this._lastX, this._lastY);
                    this._dx = Math.cos(bounceAngle) * s;
                    this._dy = Math.sin(bounceAngle) * s;
                    wi.OffsetXY(this._dx * dt, this._dy * dt);
                    wi.SetBboxChanged();
                    if (this._setAngle) {
                        wi.SetAngle(bounceAngle);
                        this._lastKnownAngle = wi.GetAngle();
                        wi.SetBboxChanged()
                    }
                    if (!collisionEngine.PushOutSolid(this._inst, this._dx / s, this._dy / s, Math.max(s * 2.5 * dt, 30))) collisionEngine.PushOutSolidNearest(this._inst, 100)
                }
            }
            GetPropertyValueByIndex(index) {
                switch (index) {
                    case SPEED:
                        return this._GetSpeed();
                    case ACCELERATION:
                        return this._GetAcceleration();
                    case GRAVITY:
                        return this._GetGravity();
                    case SET_ANGLE:
                        return this._setAngle;
                    case STEPPING:
                        return this._isStepping;
                    case ENABLE:
                        return this._IsEnabled()
                }
            }
            SetPropertyValueByIndex(index, value) {
                switch (index) {
                    case SPEED:
                        this._SetSpeed(value);
                        break;
                    case ACCELERATION:
                        this._acc = value;
                        break;
                    case GRAVITY:
                        this._g = value;
                        break;
                    case SET_ANGLE:
                        this._setAngle = !!value;
                        break;
                    case STEPPING:
                        this._isStepping = !!value;
                        break;
                    case ENABLE:
                        this._SetEnabled(!!value);
                        break
                }
            }
            _SetSpeed(s) {
                const a = C3.angleTo(0, 0, this._dx, this._dy);
                this._dx = Math.cos(a) * s;
                this._dy = Math.sin(a) * s
            }
            _GetSpeed() {
                return C3.roundToDp(C3.distanceTo(0, 0, this._dx, this._dy), 6)
            }
            _SetAcceleration(a) {
                this._acc = a
            }
            _GetAcceleration() {
                return this._acc
            }
            _SetGravity(g) {
                this._g = g
            }
            _GetGravity() {
                return this._g
            }
            _SetAngleOfMotion(a) {
                const s =
                    C3.distanceTo(0, 0, this._dx, this._dy);
                this._dx = Math.cos(a) * s;
                this._dy = Math.sin(a) * s
            }
            _GetAngleOfMotion() {
                return C3.angleTo(0, 0, this._dx, this._dy)
            }
            _SetBounceOffSolids(b) {
                b = !!b;
                if (this._bounceOffSolid === b) return;
                this._bounceOffSolid = b;
                if (this._isEnabled)
                    if (this._bounceOffSolid) this._StartPostTicking();
                    else this._StopPostTicking()
            }
            _IsBounceOffSolids() {
                return this._bounceOffSolid
            }
            _SetDistanceTravelled(d) {
                this._travelled = d
            }
            _GetDistanceTravelled() {
                return this._travelled
            }
            _SetEnabled(e) {
                this._isEnabled = !!e;
                if (this._isEnabled) {
                    this._StartTicking();
                    if (this._bounceOffSolid) this._StartPostTicking()
                } else {
                    this._StopTicking();
                    this._StopPostTicking()
                }
            }
            _IsEnabled() {
                return this._isEnabled
            }
            GetDebuggerProperties() {
                const prefix = "behaviors.bullet";
                return [{
                    title: "$" + this.GetBehaviorType().GetName(),
                    properties: [{
                        name: prefix + ".debugger.vector-x",
                        value: this._dx,
                        onedit: v => this._dx = v
                    }, {
                        name: prefix + ".debugger.vector-y",
                        value: this._dy,
                        onedit: v => this._dy = v
                    }, {
                        name: prefix + ".properties.speed.name",
                        value: this._GetSpeed(),
                        onedit: v =>
                            this._SetSpeed(v)
                    }, {
                        name: prefix + ".debugger.angle-of-motion",
                        value: C3.toDegrees(this._GetAngleOfMotion())
                    }, {
                        name: prefix + ".properties.gravity.name",
                        value: this._GetGravity(),
                        onedit: v => this._SetGravity(v)
                    }, {
                        name: prefix + ".properties.acceleration.name",
                        value: this._GetAcceleration(),
                        onedit: v => this._SetAcceleration(v)
                    }, {
                        name: prefix + ".debugger.distance-travelled",
                        value: this._GetDistanceTravelled()
                    }, {
                        name: prefix + ".properties.enabled.name",
                        value: this._IsEnabled(),
                        onedit: v => this._SetEnabled(v)
                    }]
                }]
            }
            GetScriptInterfaceClass() {
                return self.IBulletBehaviorInstance
            }
        };
        const map = new WeakMap;
        self.IBulletBehaviorInstance = class IBulletBehaviorInstance extends IBehaviorInstance {
            constructor() {
                super();
                map.set(this, IBehaviorInstance._GetInitInst().GetSdkInstance())
            }
            get speed() {
                return map.get(this)._GetSpeed()
            }
            set speed(s) {
                C3X.RequireFiniteNumber(s);
                map.get(this)._SetSpeed(s)
            }
            get acceleration() {
                return map.get(this)._GetAcceleration()
            }
            set acceleration(a) {
                C3X.RequireFiniteNumber(a);
                map.get(this)._SetAcceleration(a)
            }
            get gravity() {
                return map.get(this)._GetGravity()
            }
            set gravity(g) {
                C3X.RequireFiniteNumber(g);
                map.get(this)._SetGravity(g)
            }
            get angleOfMotion() {
                return map.get(this)._GetAngleOfMotion()
            }
            set angleOfMotion(a) {
                C3X.RequireFiniteNumber(a);
                map.get(this)._SetAngleOfMotion(a)
            }
            get bounceOffSolids() {
                return map.get(this)._IsBounceOffSolids()
            }
            set bounceOffSolids(b) {
                map.get(this)._SetBounceOffSolids(!!b)
            }
            get distanceTravelled() {
                return map.get(this)._GetDistanceTravelled()
            }
            set distanceTravelled(d) {
                C3X.RequireFiniteNumber(d);
                map.get(this)._SetDistanceTravelled(d)
            }
            get isEnabled() {
                return map.get(this)._IsEnabled()
            }
            set isEnabled(e) {
                map.get(this)._SetEnabled(e)
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Bullet.Cnds = {
            CompareSpeed(cmp, s) {
                const speed = Math.hypot(this._dx, this._dy);
                return C3.compare(speed, cmp, s)
            },
            CompareTravelled(cmp, d) {
                return C3.compare(this._GetDistanceTravelled(), cmp, d)
            },
            OnStep() {
                return true
            },
            IsEnabled() {
                return this._IsEnabled()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Bullet.Acts = {
            SetSpeed(s) {
                this._SetSpeed(s)
            },
            SetAcceleration(a) {
                this._SetAcceleration(a)
            },
            SetGravity(g) {
                this._SetGravity(g)
            },
            SetAngleOfMotion(a) {
                this._SetAngleOfMotion(C3.toRadians(a))
            },
            Bounce(objectClass) {
                if (!objectClass) return;
                const otherInst = objectClass.GetFirstPicked(this._inst);
                if (!otherInst) return;
                const wi = this._inst.GetWorldInfo();
                const collisionEngine = this._runtime.GetCollisionEngine();
                const dt = this._runtime.GetDt(this._inst);
                const s = C3.distanceTo(0, 0, this._dx,
                    this._dy);
                const bounceAngle = collisionEngine.CalculateBounceAngle(this._inst, this._lastX, this._lastY, otherInst);
                this._dx = Math.cos(bounceAngle) * s;
                this._dy = Math.sin(bounceAngle) * s;
                wi.OffsetXY(this._dx * dt, this._dy * dt);
                wi.SetBboxChanged();
                if (this._setAngle) {
                    wi.SetAngle(bounceAngle);
                    this._lastKnownAngle = wi.GetAngle();
                    wi.SetBboxChanged()
                }
                if (s !== 0)
                    if (this._bounceOffSolid) {
                        if (!collisionEngine.PushOutSolid(this._inst, this._dx / s, this._dy / s, Math.max(s * 2.5 * dt, 30))) collisionEngine.PushOutSolidNearest(this._inst,
                            100)
                    } else collisionEngine.PushOut(this._inst, this._dx / s, this._dy / s, Math.max(s * 2.5 * dt, 30), otherInst)
            },
            SetBounceOffSolids(b) {
                this._SetBounceOffSolids(b)
            },
            SetDistanceTravelled(d) {
                this._SetDistanceTravelled(d)
            },
            SetEnabled(e) {
                this._SetEnabled(e)
            },
            StopStepping() {
                this._stopStepping = true
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Bullet.Exps = {
            Speed() {
                return this._GetSpeed()
            },
            Acceleration() {
                return this._GetAcceleration()
            },
            AngleOfMotion() {
                return C3.toDegrees(this._GetAngleOfMotion())
            },
            DistanceTravelled() {
                return this._GetDistanceTravelled()
            },
            Gravity() {
                return this._GetGravity()
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Behaviors.Sin = class SinBehavior extends C3.SDKBehaviorBase {
            constructor(opts) {
                super(opts)
            }
            Release() {
                super.Release()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Sin.Type = class SinType extends C3.SDKBehaviorTypeBase {
            constructor(behaviorType) {
                super(behaviorType)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const IBehaviorInstance = self.IBehaviorInstance;
        const MOVEMENT = 0;
        const WAVE = 1;
        const PERIOD = 2;
        const PERIOD_RANDOM = 3;
        const PERIOD_OFFSET = 4;
        const PERIOD_OFFSET_RANDOM = 5;
        const MAGNITUDE = 6;
        const MAGNITUDE_RANDOM = 7;
        const ENABLE = 8;
        const HORIZONTAL = 0;
        const VERTICAL = 1;
        const SIZE = 2;
        const WIDTH = 3;
        const HEIGHT = 4;
        const ANGLE = 5;
        const OPACITY = 6;
        const VALUE = 7;
        const FORWARDS_BACKWARDS = 8;
        const ZELEVATION = 9;
        const SINE = 0;
        const TRIANGLE = 1;
        const SAWTOOTH = 2;
        const REVERSE_SAWTOOTH = 3;
        const SQUARE =
            4;
        const _2pi = 2 * Math.PI;
        const _pi_2 = Math.PI / 2;
        const _3pi_2 = 3 * Math.PI / 2;
        const MOVEMENT_LOOKUP = [0, 1, 8, 3, 4, 2, 5, 6, 9, 7];
        C3.Behaviors.Sin.Instance = class SinInstance extends C3.SDKBehaviorInstanceBase {
            constructor(behInst, properties) {
                super(behInst);
                this._i = 0;
                this._movement = 0;
                this._wave = 0;
                this._period = 0;
                this._mag = 0;
                this._isEnabled = true;
                this._basePeriod = 0;
                this._basePeriodOffset = 0;
                this._baseMag = 0;
                this._periodRandom = 0;
                this._periodOffsetRandom = 0;
                this._magnitudeRandom = 0;
                this._initialValue = 0;
                this._initialValue2 =
                    0;
                this._lastKnownValue = 0;
                this._lastKnownValue2 = 0;
                this._ratio = 0;
                if (properties) {
                    this._movement = MOVEMENT_LOOKUP[properties[MOVEMENT]];
                    this._wave = properties[WAVE];
                    this._periodRandom = this._runtime.Random() * properties[PERIOD_RANDOM];
                    this._basePeriod = properties[PERIOD];
                    this._period = properties[PERIOD];
                    this._period += this._periodRandom;
                    this._basePeriodOffset = properties[PERIOD_OFFSET];
                    if (this._period !== 0) {
                        this._periodOffsetRandom = this._runtime.Random() * properties[PERIOD_OFFSET_RANDOM];
                        this._i = properties[PERIOD_OFFSET] /
                            this._period * _2pi;
                        this._i += this._periodOffsetRandom / this._period * _2pi
                    }
                    this._magnitudeRandom = this._runtime.Random() * properties[MAGNITUDE_RANDOM];
                    this._baseMag = properties[MAGNITUDE];
                    this._mag = properties[MAGNITUDE];
                    this._mag += this._magnitudeRandom;
                    this._isEnabled = !!properties[ENABLE]
                }
                if (this._movement === ANGLE) this._mag = C3.toRadians(this._mag);
                this.Init();
                if (this._isEnabled) this._StartTicking()
            }
            Release() {
                super.Release()
            }
            SaveToJson() {
                return {
                    "i": this._i,
                    "e": this._isEnabled,
                    "mv": this._movement,
                    "w": this._wave,
                    "p": this._period,
                    "mag": this._mag,
                    "iv": this._initialValue,
                    "iv2": this._initialValue2,
                    "r": this._ratio,
                    "lkv": this._lastKnownValue,
                    "lkv2": this._lastKnownValue2
                }
            }
            LoadFromJson(o) {
                this._i = o["i"];
                this._SetEnabled(o["e"]);
                this._movement = o["mv"];
                this._wave = o["w"];
                this._period = o["p"];
                this._mag = o["mag"];
                this._initialValue = o["iv"];
                this._initialValue2 = o["iv2"];
                this._ratio = o["r"];
                this._lastKnownValue = o["lkv"];
                this._lastKnownValue2 = o["lkv2"]
            }
            Init() {
                const wi = this._inst.GetWorldInfo();
                switch (this._movement) {
                    case HORIZONTAL:
                        this._initialValue =
                            wi.GetX();
                        break;
                    case VERTICAL:
                        this._initialValue = wi.GetY();
                        break;
                    case SIZE:
                        this._initialValue = wi.GetWidth();
                        this._ratio = wi.GetHeight() / wi.GetWidth();
                        break;
                    case WIDTH:
                        this._initialValue = wi.GetWidth();
                        break;
                    case HEIGHT:
                        this._initialValue = wi.GetHeight();
                        break;
                    case ANGLE:
                        this._initialValue = wi.GetAngle();
                        break;
                    case OPACITY:
                        this._initialValue = wi.GetOpacity();
                        break;
                    case VALUE:
                        this._initialValue = 0;
                        break;
                    case FORWARDS_BACKWARDS:
                        this._initialValue = wi.GetX();
                        this._initialValue2 = wi.GetY();
                        break;
                    case ZELEVATION:
                        this._initialValue =
                            wi.GetZElevation();
                        break;
                    default:
                }
                this._lastKnownValue = this._initialValue;
                this._lastKnownValue2 = this._initialValue2
            }
            WaveFunc(x) {
                x = x % _2pi;
                switch (this._wave) {
                    case SINE:
                        return Math.sin(x);
                    case TRIANGLE:
                        if (x <= _pi_2) return x / _pi_2;
                        else if (x <= _3pi_2) return 1 - 2 * (x - _pi_2) / Math.PI;
                        else return (x - _3pi_2) / _pi_2 - 1;
                    case SAWTOOTH:
                        return 2 * x / _2pi - 1;
                    case REVERSE_SAWTOOTH:
                        return -2 * x / _2pi + 1;
                    case SQUARE:
                        return x < Math.PI ? -1 : 1
                }
                return 0
            }
            Tick() {
                const dt = this._runtime.GetDt(this._inst);
                if (!this._isEnabled || dt === 0) return;
                if (this._period === 0) this._i = 0;
                else this._i = (this._i + dt / this._period * _2pi) % _2pi;
                this._UpdateFromPhase()
            }
            _UpdateFromPhase() {
                const wi = this._inst.GetWorldInfo();
                switch (this._movement) {
                    case HORIZONTAL:
                        if (wi.GetX() !== this._lastKnownValue) this._initialValue += wi.GetX() - this._lastKnownValue;
                        wi.SetX(this._initialValue + this.WaveFunc(this._i) * this._mag);
                        this._lastKnownValue = wi.GetX();
                        break;
                    case VERTICAL:
                        if (wi.GetY() !== this._lastKnownValue) this._initialValue += wi.GetY() - this._lastKnownValue;
                        wi.SetY(this._initialValue +
                            this.WaveFunc(this._i) * this._mag);
                        this._lastKnownValue = wi.GetY();
                        break;
                    case SIZE:
                        wi.SetWidth(this._initialValue + this.WaveFunc(this._i) * this._mag);
                        wi.SetHeight(wi.GetWidth() * this._ratio);
                        break;
                    case WIDTH:
                        wi.SetWidth(this._initialValue + this.WaveFunc(this._i) * this._mag);
                        break;
                    case HEIGHT:
                        wi.SetHeight(this._initialValue + this.WaveFunc(this._i) * this._mag);
                        break;
                    case ANGLE:
                        if (wi.GetAngle() !== this._lastKnownValue) this._initialValue = C3.clampAngle(this._initialValue + (wi.GetAngle() - this._lastKnownValue));
                        wi.SetAngle(this._initialValue +
                            this.WaveFunc(this._i) * this._mag);
                        this._lastKnownValue = wi.GetAngle();
                        break;
                    case OPACITY:
                        wi.SetOpacity(this._initialValue + this.WaveFunc(this._i) * this._mag / 100);
                        break;
                    case FORWARDS_BACKWARDS:
                        if (wi.GetX() !== this._lastKnownValue) this._initialValue += wi.GetX() - this._lastKnownValue;
                        if (wi.GetY() !== this._lastKnownValue2) this._initialValue2 += wi.GetY() - this._lastKnownValue2;
                        wi.SetX(this._initialValue + Math.cos(wi.GetAngle()) * this.WaveFunc(this._i) * this._mag);
                        wi.SetY(this._initialValue2 + Math.sin(wi.GetAngle()) *
                            this.WaveFunc(this._i) * this._mag);
                        this._lastKnownValue = wi.GetX();
                        this._lastKnownValue2 = wi.GetY();
                        break;
                    case ZELEVATION:
                        wi.SetZElevation(this._initialValue + this.WaveFunc(this._i) * this._mag);
                        break
                }
                wi.SetBboxChanged()
            }
            _OnSpriteFrameChanged(prevFrame, nextFrame) {}
            _SetPeriod(x) {
                this._period = x
            }
            _GetPeriod() {
                return this._period
            }
            _SetMagnitude(x) {
                this._mag = x
            }
            _SetMagnitude_ConvertAngle(x) {
                if (this._movement === 5) x = C3.toRadians(x);
                this._SetMagnitude(x)
            }
            _GetMagnitude() {
                return this._mag
            }
            _GetMagnitude_ConvertAngle() {
                let m =
                    this._GetMagnitude();
                if (this._movement === 5) m = C3.toDegrees(m);
                return m
            }
            _SetMovement(m) {
                if (this._movement === 5 && m !== 5) this._mag = C3.toDegrees(this._mag);
                this._movement = m;
                this.Init()
            }
            _GetMovement() {
                return this._movement
            }
            _SetWave(w) {
                this._wave = w
            }
            _GetWave() {
                return this._wave
            }
            _SetPhase(x) {
                this._i = C3.clamp(x, 0, Math.PI * 2);
                this._UpdateFromPhase()
            }
            _GetPhase() {
                return this._i
            }
            _SetEnabled(e) {
                this._isEnabled = !!e;
                if (this._isEnabled) this._StartTicking();
                else this._StopTicking()
            }
            _IsEnabled() {
                return this._isEnabled
            }
            GetPropertyValueByIndex(index) {
                switch (index) {
                    case MOVEMENT:
                        return this._movement;
                    case WAVE:
                        return this._wave;
                    case PERIOD:
                        return this._basePeriod;
                    case MAGNITUDE:
                        return this._baseMag;
                    case ENABLE:
                        return this._isEnabled
                }
            }
            SetPropertyValueByIndex(index, value) {
                switch (index) {
                    case MOVEMENT:
                        this._movement = MOVEMENT_LOOKUP[value];
                        this.Init();
                        break;
                    case WAVE:
                        this._wave = value;
                        break;
                    case PERIOD:
                        this._basePeriod = value;
                        this._period = this._basePeriod + this._periodRandom;
                        if (!this._isEnabled)
                            if (this._period !== 0) {
                                this._i = this._basePeriodOffset / this._period * _2pi;
                                this._i += this._periodOffsetRandom / this._period *
                                    _2pi
                            } else this._i = 0;
                        break;
                    case MAGNITUDE:
                        this._baseMag = value;
                        this._mag = this._baseMag + this._magnitudeRandom;
                        if (this._movement === ANGLE) this._mag = C3.toRadians(this._mag);
                        break;
                    case ENABLE:
                        this._isEnabled = !!value;
                        break
                }
            }
            GetDebuggerProperties() {
                const prefix = "behaviors.sin";
                return [{
                    title: "$" + this.GetBehaviorType().GetName(),
                    properties: [{
                            name: prefix + ".properties.enabled.name",
                            value: this._IsEnabled(),
                            onedit: v => this._SetEnabled(v)
                        }, {
                            name: prefix + ".properties.period.name",
                            value: this._GetPeriod(),
                            onedit: v => this._SetPeriod(v)
                        },
                        {
                            name: prefix + ".properties.magnitude.name",
                            value: this._GetMagnitude_ConvertAngle(),
                            onedit: v => this._SetMagnitude_ConvertAngle(v)
                        }, {
                            name: prefix + ".debugger.value",
                            value: this.WaveFunc(this._GetPhase()) * this._GetMagnitude_ConvertAngle()
                        }
                    ]
                }]
            }
            GetScriptInterfaceClass() {
                return self.ISineBehaviorInstance
            }
        };
        const map = new WeakMap;
        const VALID_MOVEMENTS = ["horizontal", "vertical", "size", "width", "height", "angle", "opacity", "value-only", "forwards-backwards", "z-elevation"];
        const VALID_WAVES = ["sine", "triangle", "sawtooth",
            "reverse-sawtooth", "square"
        ];
        self.ISineBehaviorInstance = class ISineBehaviorInstance extends IBehaviorInstance {
            constructor() {
                super();
                map.set(this, IBehaviorInstance._GetInitInst().GetSdkInstance())
            }
            set period(x) {
                C3X.RequireFiniteNumber(x);
                map.get(this)._SetPeriod(x)
            }
            get period() {
                return map.get(this)._GetPeriod()
            }
            set magnitude(m) {
                C3X.RequireFiniteNumber(m);
                map.get(this)._SetMagnitude(m)
            }
            get magnitude() {
                return map.get(this)._GetMagnitude()
            }
            set phase(p) {
                map.get(this)._SetPhase(p)
            }
            get phase() {
                return map.get(this)._GetPhase()
            }
            set movement(m) {
                C3X.RequireString(m);
                const i = VALID_MOVEMENTS.indexOf(m);
                if (i === -1) throw new Error("invalid movement");
                map.get(this)._SetMovement(i)
            }
            get movement() {
                return VALID_MOVEMENTS[map.get(this)._GetMovement()]
            }
            set wave(w) {
                C3X.RequireString(w);
                const i = VALID_WAVES.indexOf(w);
                if (i === -1) throw new Error("invalid wave");
                map.get(this)._SetWave(i)
            }
            get wave() {
                return VALID_WAVES[map.get(this)._GetWave()]
            }
            get value() {
                const inst = map.get(this);
                return inst.WaveFunc(inst._GetPhase()) * inst._GetMagnitude()
            }
            updateInitialState() {
                map.get(this).Init()
            }
            set isEnabled(e) {
                map.get(this)._SetEnabled(!!e)
            }
            get isEnabled() {
                return map.get(this)._IsEnabled()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Sin.Cnds = {
            IsEnabled() {
                return this._IsEnabled()
            },
            CompareMovement(m) {
                return this._GetMovement() === m
            },
            ComparePeriod(cmp, v) {
                return C3.compare(this._GetPeriod(), cmp, v)
            },
            CompareMagnitude(cmp, v) {
                return C3.compare(this._GetMagnitude_ConvertAngle(), cmp, v)
            },
            CompareWave(w) {
                return this._GetWave() === w
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Sin.Acts = {
            SetEnabled(e) {
                this._SetEnabled(e !== 0)
            },
            SetPeriod(x) {
                this._SetPeriod(x)
            },
            SetMagnitude(x) {
                this._SetMagnitude_ConvertAngle(x)
            },
            SetMovement(m) {
                this._SetMovement(m)
            },
            SetWave(w) {
                this._wave = w
            },
            SetPhase(x) {
                const _2pi = Math.PI * 2;
                this._SetPhase(x * _2pi % _2pi)
            },
            UpdateInitialState() {
                this.Init()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.Sin.Exps = {
            CyclePosition() {
                return this._GetPhase() / (2 * Math.PI)
            },
            Period() {
                return this._GetPeriod()
            },
            Magnitude() {
                return this._GetMagnitude_ConvertAngle()
            },
            Value() {
                return this.WaveFunc(this._GetPhase()) * this._GetMagnitude_ConvertAngle()
            }
        }
    };

}

{
    'use strict'; {
        const C3 = self.C3;
        C3.Behaviors.DragnDrop = class DragnDropBehavior extends C3.SDKBehaviorBase {
            constructor(opts) {
                super(opts);
                const rt = this._runtime.Dispatcher();
                this._disposables = new C3.CompositeDisposable(C3.Disposable.From(rt, "pointerdown", e => this._OnPointerDown(e.data)), C3.Disposable.From(rt, "pointermove", e => this._OnPointerMove(e.data)), C3.Disposable.From(rt, "pointerup", e => this._OnPointerUp(e.data, false)), C3.Disposable.From(rt, "pointercancel", e => this._OnPointerUp(e.data, true)))
            }
            Release() {
                this._disposables.Release();
                this._disposables = null;
                super.Release()
            }
            _OnPointerDown(e) {
                if (e["pointerType"] === "mouse" && e["button"] !== 0) return;
                this._OnInputDown(e["pointerId"].toString(), e["pageX"] - this._runtime.GetCanvasClientX(), e["pageY"] - this._runtime.GetCanvasClientY())
            }
            _OnPointerMove(e) {
                if ((e["lastButtons"] & 1) !== 0 && (e["buttons"] & 1) === 0) this._OnInputUp(e["pointerId"].toString());
                else this._OnInputMove(e["pointerId"].toString(), e["pageX"] - this._runtime.GetCanvasClientX(), e["pageY"] - this._runtime.GetCanvasClientY())
            }
            _OnPointerUp(e,
                isCancel) {
                if (e["pointerType"] === "mouse" && e["button"] !== 0) return;
                this._OnInputUp(e["pointerId"].toString())
            }
            async _OnInputDown(src, clientX, clientY) {
                const myInstances = this.GetInstances();
                let topMost = null;
                let topBehInst = null;
                let topX = 0;
                let topY = 0;
                for (const inst of myInstances) {
                    const behInst = inst.GetBehaviorSdkInstanceFromCtor(C3.Behaviors.DragnDrop);
                    if (!behInst.IsEnabled() || behInst.IsDragging() || inst.IsDestroyed()) continue;
                    const wi = inst.GetWorldInfo();
                    const layer = wi.GetLayer();
                    const [lx, ly] = layer.CanvasCssToLayer(clientX,
                        clientY, wi.GetTotalZElevation());
                    if (!layer.IsSelfAndParentsInteractive() || !wi.ContainsPoint(lx, ly)) continue;
                    if (!topMost) {
                        topMost = inst;
                        topBehInst = behInst;
                        topX = lx;
                        topY = ly;
                        continue
                    }
                    const topWi = topMost.GetWorldInfo();
                    if (layer.GetIndex() > topWi.GetLayer().GetIndex() || layer.GetIndex() === topWi.GetLayer().GetIndex() && wi.GetZIndex() > topWi.GetZIndex()) {
                        topMost = inst;
                        topBehInst = behInst;
                        topX = lx;
                        topY = ly
                    }
                }
                if (topMost) await topBehInst._OnDown(src, topX, topY)
            }
            _OnInputMove(src, clientX, clientY) {
                const myInstances = this.GetInstances();
                for (const inst of myInstances) {
                    const behInst = inst.GetBehaviorSdkInstanceFromCtor(C3.Behaviors.DragnDrop);
                    if (!behInst.IsEnabled() || !behInst.IsDragging() || behInst.IsDragging() && behInst.GetDragSource() !== src) continue;
                    const wi = inst.GetWorldInfo();
                    const layer = wi.GetLayer();
                    const [lx, ly] = layer.CanvasCssToLayer(clientX, clientY, wi.GetTotalZElevation());
                    behInst._OnMove(lx, ly)
                }
            }
            async _OnInputUp(src) {
                const myInstances = this.GetInstances();
                for (const inst of myInstances) {
                    const behInst = inst.GetBehaviorSdkInstanceFromCtor(C3.Behaviors.DragnDrop);
                    if (behInst.IsDragging() && behInst.GetDragSource() === src) await behInst._OnUp()
                }
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.DragnDrop.Type = class DragnDropType extends C3.SDKBehaviorTypeBase {
            constructor(behaviorType) {
                super(behaviorType)
            }
            Release() {
                super.Release()
            }
            OnCreate() {}
        }
    } {
        const C3 = self.C3;
        const C3X = self.C3X;
        const IBehaviorInstance = self.IBehaviorInstance;
        const AXES = 0;
        const ENABLE = 1;
        C3.Behaviors.DragnDrop.Instance = class DragnDropInstance extends C3.SDKBehaviorInstanceBase {
            constructor(behInst, properties) {
                super(behInst);
                this._isDragging = false;
                this._dx = 0;
                this._dy = 0;
                this._dragSource = "<none>";
                this._axes = 0;
                this._isEnabled = true;
                if (properties) {
                    this._axes = properties[AXES];
                    this._isEnabled = properties[ENABLE]
                }
            }
            Release() {
                super.Release()
            }
            SaveToJson() {
                return {
                    "a": this._axes,
                    "e": this._isEnabled
                }
            }
            LoadFromJson(o) {
                this._axes =
                    o["a"];
                this._isEnabled = o["e"];
                this._isDragging = false
            }
            _SetEnabled(e) {
                this._isEnabled = !!e;
                if (!this._isEnabled) this._isDragging = false
            }
            IsEnabled() {
                return this._isEnabled
            }
            _SetAxes(a) {
                this._axes = a
            }
            _GetAxes() {
                return this._axes
            }
            _Drop() {
                if (this._isDragging) this._OnUp()
            }
            IsDragging() {
                return this._isDragging
            }
            GetDragSource() {
                return this._dragSource
            }
            async _OnDown(src, x, y) {
                const wi = this.GetWorldInfo();
                this._dx = x - wi.GetX();
                this._dy = y - wi.GetY();
                this._isDragging = true;
                this._dragSource = src;
                this.DispatchScriptEvent("dragstart");
                await this.TriggerAsync(C3.Behaviors.DragnDrop.Cnds.OnDragStart)
            }
            _OnMove(x, y) {
                const wi = this.GetWorldInfo();
                const newX = x - this._dx;
                const newY = y - this._dy;
                if (this._axes === 0) {
                    if (wi.GetX() !== newX || wi.GetY() !== newY) {
                        wi.SetXY(newX, newY);
                        wi.SetBboxChanged()
                    }
                } else if (this._axes === 1) {
                    if (wi.GetX() !== newX) {
                        wi.SetX(newX);
                        wi.SetBboxChanged()
                    }
                } else if (this._axes === 2)
                    if (wi.GetY() !== newY) {
                        wi.SetY(newY);
                        wi.SetBboxChanged()
                    }
            }
            async _OnUp() {
                this._isDragging = false;
                this.DispatchScriptEvent("drop");
                await this.TriggerAsync(C3.Behaviors.DragnDrop.Cnds.OnDrop)
            }
            GetPropertyValueByIndex(index) {
                switch (index) {
                    case AXES:
                        return this._GetAxes();
                    case ENABLE:
                        return this.IsEnabled()
                }
            }
            SetPropertyValueByIndex(index, value) {
                switch (index) {
                    case AXES:
                        this._SetAxes(value);
                        break;
                    case ENABLE:
                        this._SetEnabled(!!value);
                        break
                }
            }
            GetDebuggerProperties() {
                const prefix = "behaviors.dragndrop";
                const axesPrefix = prefix + ".properties.axes";
                let axesName = "";
                if (this._axes === 0) axesName = axesPrefix + ".items.both";
                else if (this._axes === 1) axesName = axesPrefix + ".items.horizontal-only";
                else if (this._axes === 2) axesName = axesPrefix + ".items.vertical-only";
                return [{
                    title: "$" + this.GetBehaviorType().GetName(),
                    properties: [{
                        name: prefix + ".debugger.is-dragging",
                        value: this.IsDragging()
                    }, {
                        name: axesPrefix + ".name",
                        value: [axesName]
                    }, {
                        name: prefix + ".properties.enabled.name",
                        value: this.IsEnabled(),
                        onedit: v => this._SetEnabled(v)
                    }]
                }]
            }
            GetScriptInterfaceClass() {
                return self.IDragDropBehaviorInstance
            }
        };
        const map = new WeakMap;
        const VALID_AXES = ["both", "horizontal", "vertical"];
        self.IDragDropBehaviorInstance = class IDragDropBehaviorInstance extends IBehaviorInstance {
            constructor() {
                super();
                map.set(this, IBehaviorInstance._GetInitInst().GetSdkInstance())
            }
            set axes(str) {
                const a =
                    VALID_AXES.indexOf(str);
                if (a === -1) throw new Error("invalid axes");
                map.get(this)._SetAxes(a)
            }
            get axes() {
                return VALID_AXES[map.get(this)._GetAxes()]
            }
            drop() {
                map.get(this)._Drop()
            }
            get isDragging() {
                return map.get(this).IsDragging()
            }
            get isEnabled() {
                return map.get(this).IsEnabled()
            }
            set isEnabled(e) {
                map.get(this)._SetEnabled(e)
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.DragnDrop.Cnds = {
            IsDragging() {
                return this.IsDragging()
            },
            OnDragStart() {
                return true
            },
            OnDrop() {
                return true
            },
            IsEnabled() {
                return this.IsEnabled()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.DragnDrop.Acts = {
            SetEnabled(e) {
                this._SetEnabled(!!e)
            },
            SetAxes(a) {
                this._SetAxes(a)
            },
            Drop() {
                this._Drop()
            }
        }
    } {
        const C3 = self.C3;
        C3.Behaviors.DragnDrop.Exps = {}
    };

}

{
    const C3 = self.C3;
    self.C3_GetObjectRefTable = function() {
        return [
            C3.Plugins.Arr,
            C3.Plugins.Audio,
            C3.Plugins.Browser,
            C3.Plugins.Eponesh_GameScore,
            C3.Plugins.Keyboard,
            C3.Plugins.PlatformInfo,
            C3.Plugins.Spritefont2,
            C3.Behaviors.Anchor,
            C3.Plugins.Touch,
            C3.Plugins.TiledBg,
            C3.Plugins.Sprite,
            C3.Behaviors.Physics,
            C3.Behaviors.scrollto,
            C3.Behaviors.Timer,
            C3.Behaviors.Bullet,
            C3.Behaviors.Sin,
            C3.Plugins.Particles,
            C3.Behaviors.DragnDrop,
            C3.Plugins.Eponesh_YandexSDK,
            C3.Plugins.DrawingCanvas,
            C3.Plugins.System.Cnds.IsGroupActive,
            C3.Plugins.System.Cnds.TriggerOnce,
            C3.Plugins.System.Acts.SetLayerOpacity,
            C3.Plugins.Sprite.Acts.SetEffectEnabled,
            C3.Plugins.Sprite.Acts.Destroy,
            C3.Plugins.Sprite.Acts.MoveToTop,
            C3.Plugins.Particles.Acts.SetSpraying,
            C3.Plugins.Particles.Acts.SetX,
            C3.Plugins.System.Exps.viewportright,
            C3.Plugins.System.Exps.viewportleft,
            C3.Plugins.Particles.Acts.SetXRandomiser,
            C3.Plugins.Particles.Cnds.CompareInstanceVar,
            C3.Plugins.System.Cnds.CompareVar,
            C3.Plugins.Sprite.Cnds.PickByUID,
            C3.Plugins.Sprite.Acts.SetVisible,
            C3.Plugins.Sprite.Acts.SetAnimFrame,
            C3.Plugins.Sprite.Acts.SetHeight,
            C3.Plugins.Spritefont2.Cnds.PickByUID,
            C3.Plugins.Spritefont2.Acts.SetPos,
            C3.Plugins.Spritefont2.Exps.Y,
            C3.Plugins.System.Cnds.OnLayoutStart,
            C3.Plugins.Sprite.Cnds.OnCreated,
            C3.Plugins.System.Acts.CreateObject,
            C3.Plugins.Sprite.Exps.X,
            C3.Plugins.Sprite.Exps.Y,
            C3.Plugins.System.Acts.WaitForPreviousActions,
            C3.Plugins.DrawingCanvas.Acts.PasteObject,
            C3.Plugins.DrawingCanvas.Acts.MoveToLayer,
            C3.Plugins.DrawingCanvas.Acts.SetInstanceVar,
            C3.Plugins.Sprite.Cnds.CompareInstanceVar,
            C3.Plugins.DrawingCanvas.Acts.SetPos,
            C3.Plugins.Sprite.Acts.AddChild,
            C3.Plugins.DrawingCanvas.Acts.Destroy,
            C3.Plugins.System.Cnds.ForEach,
            C3.Plugins.DrawingCanvas.Cnds.OnCreated,
            C3.Plugins.TiledBg.Cnds.CompareInstanceVar,
            C3.Plugins.TiledBg.Acts.SetY,
            C3.Plugins.System.Exps.viewporttop,
            C3.Plugins.System.Cnds.Every,
            C3.Plugins.System.Acts.SetVar,
            C3.Plugins.System.Exps.choose,
            C3.Plugins.System.Cnds.Compare,
            C3.Plugins.Sprite.Cnds.CompareY,
            C3.Plugins.TiledBg.Exps.Y,
            C3.Behaviors.Physics.Acts.ApplyImpulseAtAngle,
            C3.Plugins.Sprite.Exps.Angle,
            C3.Plugins.Audio.Acts.Play,
            C3.Behaviors.Physics.Cnds.IsEnabled,
            C3.Behaviors.Physics.Acts.ApplyForce,
            C3.Plugins.Sprite.Cnds.IsBetweenAngles,
            C3.Behaviors.Physics.Acts.ApplyForceAtAngle,
            C3.Plugins.Keyboard.Cnds.OnKey,
            C3.Plugins.System.Acts.Wait,
            C3.Plugins.System.Acts.RestartLayout,
            C3.Plugins.Touch.Cnds.OnTouchObject,
            C3.Plugins.Sprite.Cnds.AngleWithin,
            C3.Behaviors.Physics.Acts.CreateLimitedRevoluteJoint,
            C3.Behaviors.Physics.Acts.SetWorldGravity,
            C3.Plugins.Sprite.Cnds.CompareX,
            C3.Plugins.Sprite.Acts.SetX,
            C3.Plugins.Touch.Cnds.OnTouchStart,
            C3.Plugins.Touch.Cnds.IsTouchingObject,
            C3.Plugins.Sprite.Cnds.CompareFrame,
            C3.Plugins.Touch.Cnds.OnTouchEnd,
            C3.Plugins.Eponesh_GameScore.Acts.AdsShowFullscreen,
            C3.Plugins.System.Acts.GoToLayout,
            C3.Plugins.Audio.Acts.Stop,
            C3.Plugins.System.Exps.random,
            C3.Plugins.Sprite.Acts.Spawn,
            C3.Plugins.Sprite.Acts.ZMoveToObject,
            C3.Behaviors.Physics.Acts.SetDensity,
            C3.Behaviors.Physics.Acts.SetElasticity,
            C3.Plugins.TiledBg.Acts.SetVisible,
            C3.Behaviors.Physics.Acts.SetFriction,
            C3.Plugins.Sprite.Acts.SetAnim,
            C3.Behaviors.Bullet.Acts.SetSpeed,
            C3.Plugins.Particles.Acts.SetInstanceVar,
            C3.Plugins.Particles.Acts.SetInitSpeed,
            C3.Plugins.Sprite.Acts.SetInstanceVar,
            C3.Plugins.Spritefont2.Acts.SetText,
            C3.Behaviors.Timer.Cnds.OnTimer,
            C3.Plugins.Sprite.Cnds.OnCollision,
            C3.Behaviors.Timer.Acts.StopTimer,
            C3.Behaviors.Timer.Acts.StartTimer,
            C3.Plugins.System.Acts.ScrollToObject,
            C3.Plugins.Sprite.Acts.SetCollisions,
            C3.Plugins.System.Acts.SetTimescale,
            C3.Plugins.System.Acts.SetObjectTimescale,
            C3.Plugins.System.Acts.AddVar,
            C3.Plugins.System.Acts.SetLayoutScale,
            C3.Plugins.System.Cnds.EveryTick,
            C3.Plugins.Sprite.Acts.SetPos,
            C3.Plugins.System.Exps.layoutscale,
            C3.Plugins.Sprite.Cnds.IsOnScreen,
            C3.Behaviors.Physics.Cnds.CompareVelocity,
            C3.Plugins.System.Cnds.LayerVisible,
            C3.Plugins.Eponesh_GameScore.Acts.PlayerSetScore,
            C3.Plugins.Eponesh_GameScore.Acts.PlayerSync,
            C3.Plugins.Audio.Acts.StopAll,
            C3.Plugins.System.Exps.left,
            C3.Plugins.Browser.Exps.Language,
            C3.Plugins.PlatformInfo.Cnds.IsOnMobile,
            C3.Plugins.Eponesh_GameScore.Exps.VariablesGet,
            C3.Plugins.Eponesh_GameScore.Exps.PlayerScore,
            C3.Plugins.Audio.Acts.SetSilent,
            C3.Plugins.Eponesh_GameScore.Acts.LeaderboardOpen,
            C3.Plugins.Spritefont2.Cnds.OnCreated,
            C3.Plugins.Arr.Acts.JSONLoad,
            C3.Plugins.Spritefont2.Acts.SetCharacterWidth,
            C3.Plugins.System.Cnds.For,
            C3.Plugins.Arr.Exps.Height,
            C3.Plugins.Arr.Exps.At,
            C3.Plugins.System.Exps.loopindex,
            C3.Plugins.Eponesh_GameScore.Cnds.OnPause,
            C3.Plugins.Eponesh_GameScore.Cnds.OnResume,
            C3.Plugins.Browser.Cnds.OnResize,
            C3.Plugins.Browser.Cnds.IsFullscreen,
            C3.Plugins.Browser.Acts.CancelFullScreen,
            C3.Plugins.Browser.Acts.RequestFullScreen
        ];
    };
    self.C3_JsPropNameTable = [{
            Array: 0
        },
        {
            Audio: 0
        },
        {
            Browser: 0
        },
        {
            GamePush: 0
        },
        {
            Keyboard: 0
        },
        {
            PlatformInfo: 0
        },
        {
            Anchor: 0
        },
        {
            SpriteFont: 0
        },
        {
            Touch: 0
        },
        {
            backgroung: 0
        },
        {
            backgroung2: 0
        },
        {
            backgroung3: 0
        },
        {
            backgroung4: 0
        },
        {
            Physics: 0
        },
        {
            ball: 0
        },
        {
            body: 0
        },
        {
            buttons: 0
        },
        {
            ScrollTo: 0
        },
        {
            Timer: 0
        },
        {
            cam: 0
        },
        {
            angleofmotion: 0
        },
        {
            Bullet: 0
        },
        {
            cloud: 0
        },
        {
            gall: 0
        },
        {
            glass: 0
        },
        {
            glass2: 0
        },
        {
            glass3: 0
        },
        {
            glass4: 0
        },
        {
            player: 0
        },
        {
            head: 0
        },
        {
            Sine: 0
        },
        {
            Sine2: 0
        },
        {
            mainname: 0
        },
        {
            menuback: 0
        },
        {
            menubutton: 0
        },
        {
            menuglass: 0
        },
        {
            Particles: 0
        },
        {
            side: 0
        },
        {
            wind: 0
        },
        {
            strength: 0
        },
        {
            Particles2: 0
        },
        {
            planet: 0
        },
        {
            shadow: 0
        },
        {
            spawner: 0
        },
        {
            Sprite: 0
        },
        {
            Sprite10: 0
        },
        {
            Sprite3: 0
        },
        {
            Sprite4: 0
        },
        {
            Sprite5: 0
        },
        {
            Sprite6: 0
        },
        {
            DragDrop: 0
        },
        {
            Sprite9: 0
        },
        {
            YandexSDK: 0
        },
        {
            Sprite2: 0
        },
        {
            Sprite7: 0
        },
        {
            top: 0
        },
        {
            tag: 0
        },
        {
            glass5: 0
        },
        {
            DrawingCanvas: 0
        },
        {
            isplaying: 0
        },
        {
            worldgravity: 0
        },
        {
            hit: 0
        },
        {
            hit2: 0
        },
        {
            game: 0
        },
        {
            mainmenu: 0
        },
        {
            scoreblue: 0
        },
        {
            scorered: 0
        },
        {
            randomball: 0
        },
        {
            randomcetca: 0
        },
        {
            randomnpc: 0
        },
        {
            randombackground: 0
        },
        {
            scroll: 0
        },
        {
            start1: 0
        },
        {
            win: 0
        },
        {
            gal: 0
        },
        {
            randomballvis: 0
        },
        {
            settouch: 0
        },
        {
            withpc: 0
        },
        {
            behavior: 0
        },
        {
            behavior2: 0
        },
        {
            soundmain: 0
        },
        {
            randomhead: 0
        },
        {
            randomwind: 0
        },
        {
            firsttime: 0
        },
        {
            language2: 0
        },
        {
            ADS: 0
        },
        {
            mobile: 0
        },
        {
            score: 0
        },
        {
            load: 0
        },
        {
            start: 0
        }
    ];
}

{

    const C3 = self.C3;

    function unaryminus(n) {
        return (typeof n === "number" ? -n : n);
    }

    function bothNumbers(a, b) {
        return typeof a === "number" && typeof b === "number";
    }

    function add(l, r) {
        if (bothNumbers(l, r))
            return l + r;
        else
            return l;
    }

    function subtract(l, r) {
        if (bothNumbers(l, r))
            return l - r;
        else
            return l;
    }

    function multiply(l, r) {
        if (bothNumbers(l, r))
            return l * r;
        else
            return l;
    }

    function divide(l, r) {
        if (bothNumbers(l, r))
            return l / r;
        else
            return l;
    }

    function mod(l, r) {
        if (bothNumbers(l, r))
            return l % r;
        else
            return l;
    }

    function pow(l, r) {
        if (bothNumbers(l, r))
            return Math.pow(l, r);
        else
            return l;
    }

    function and(l, r) {
        if (typeof l === "string" || typeof r === "string") {
            // & with either side string does string concatenation
            let lstr, rstr;

            if (typeof l === "number")
                lstr = (Math.round(l * 1e10) / 1e10).toString();
            else
                lstr = l;

            if (typeof r === "number")
                rstr = (Math.round(r * 1e10) / 1e10).toString();
            else
                rstr = r;

            return lstr + rstr;
        } else {
            // & with neither side a string does logical AND
            return (l && r ? 1 : 0);
        }
    }

    function or(l, r) {
        if (bothNumbers(l, r))
            return (l || r ? 1 : 0);
        else
            return l;
    }

    self.C3_ExpressionFuncs = [
        () => "createscene",
        () => "win",
        () => 0,
        () => "HardLight",
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            const f1 = p._GetNode(1).GetBoundMethod();
            return () => ((f0("GUI") + f1("GUI")) / 2);
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => f0("GUI");
        },
        () => 1,
        () => 24,
        () => 33,
        () => 4,
        () => 13,
        () => 3,
        () => 300,
        () => 2,
        () => 350,
        () => 5,
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            const f1 = p._GetNode(1).GetBoundMethod();
            return () => (((f0("game") + f1("game")) / 2) - 60);
        },
        p => {
            const n0 = p._GetNode(0);
            return () => n0.ExpObject();
        },
        () => 38,
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            const f1 = p._GetNode(1).GetBoundMethod();
            return () => ((f0("game") + f1("game")) / 2);
        },
        () => 37,
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            const f1 = p._GetNode(1).GetBoundMethod();
            return () => (((f0("game") + f1("game")) / 2) + 35);
        },
        () => "game",
        p => {
            const n0 = p._GetNode(0);
            return () => (n0.ExpObject() - 30);
        },
        () => "",
        () => "GUI",
        p => {
            const n0 = p._GetNode(0);
            return () => and("Player", n0.ExpInstVar());
        },
        p => {
            const n0 = p._GetNode(0);
            return () => n0.ExpInstVar();
        },
        p => {
            const n0 = p._GetNode(0);
            return () => (n0.ExpObject() - 5);
        },
        p => {
            const n0 = p._GetNode(0);
            return () => (n0.ExpObject() - 20);
        },
        () => "UP",
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => f0("game");
        },
        () => "withpc behavior",
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => f0(1, 2, 3);
        },
        () => 6,
        p => {
            const n0 = p._GetNode(0);
            const n1 = p._GetNode(1);
            const n2 = p._GetNode(2);
            const n3 = p._GetNode(3);
            return () => C3.distanceTo(n0.ExpObject(), n1.ExpObject(), n2.ExpObject(), n3.ExpObject());
        },
        () => 100,
        () => 0.5,
        p => {
            const n0 = p._GetNode(0);
            return () => (n0.ExpObject() - 90);
        },
        () => 10,
        p => {
            const n0 = p._GetNode(0);
            return () => (n0.ExpObject() + 180);
        },
        () => 30,
        () => 28,
        p => {
            const v0 = p._GetNode(0).GetVar();
            return () => v0.GetValue();
        },
        () => "physic",
        () => 400,
        () => 230,
        p => {
            const n0 = p._GetNode(0);
            return () => ((360 - n0.ExpObject()) + 20);
        },
        p => {
            const n0 = p._GetNode(0);
            return () => (((360 - n0.ExpObject()) * 2) + 10);
        },
        () => 130,
        p => {
            const n0 = p._GetNode(0);
            return () => (n0.ExpObject() + 10);
        },
        () => 70,
        p => {
            const n0 = p._GetNode(0);
            return () => ((n0.ExpObject() * 2) + 20);
        },
        () => 35,
        () => 25,
        () => 23,
        () => 0.1,
        () => 34,
        () => 19,
        () => 17,
        () => 7,
        () => 20,
        () => 15,
        () => 22,
        () => 32,
        () => 26,
        () => -4,
        () => -90,
        () => 27,
        () => -10,
        () => 16,
        () => -5,
        () => 8,
        () => 9,
        () => -1,
        () => 90,
        () => 29,
        () => 18,
        () => 31,
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => (f0("GUI") + 400);
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => (f0("GUI") - 400);
        },
        () => -180,
        () => 50,
        () => 180,
        () => 51,
        () => "gamemusic",
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => Math.floor(f0(4));
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => Math.floor(f0(3));
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => Math.floor(f0(5));
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => Math.floor(f0(2));
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => Math.floor(f0(6));
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => Math.floor(f0(7));
        },
        () => 41,
        () => 0.2,
        () => 0.3,
        () => 0.4,
        () => 0.8,
        () => 0.6,
        () => 0.7,
        () => 42,
        () => "Animation 1",
        () => "Animation 2",
        () => 0.01,
        () => 500,
        () => -50,
        () => -100,
        () => 14,
        () => 21,
        () => 11,
        () => 12,
        () => "ADS",
        p => {
            const n0 = p._GetNode(0);
            const n1 = p._GetNode(1);
            return () => C3.lerp(n0.ExpObject(), n1.ExpObject(), 0.03);
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => C3.lerp(f0(), 1.5, 0.03);
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => (f0("game") + 50);
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            const f1 = p._GetNode(1).GetBoundMethod();
            const f2 = p._GetNode(2).GetBoundMethod();
            const f3 = p._GetNode(3).GetBoundMethod();
            const f4 = p._GetNode(4).GetBoundMethod();
            const f5 = p._GetNode(5).GetBoundMethod();
            const f6 = p._GetNode(6).GetBoundMethod();
            const f7 = p._GetNode(7).GetBoundMethod();
            return () => ((or(or(or(((f0(f1(), 2)) === ("ru") ? 1 : 0), ((f2(f3(), 2)) === ("ua") ? 1 : 0)), ((f4(f5(), 2)) === ("by") ? 1 : 0)), ((f6(f7(), 2)) === ("kz") ? 1 : 0))) ? (1) : (0));
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            const f1 = p._GetNode(1).GetBoundMethod();
            const f2 = p._GetNode(2).GetBoundMethod();
            const f3 = p._GetNode(3).GetBoundMethod();
            const f4 = p._GetNode(4).GetBoundMethod();
            const f5 = p._GetNode(5).GetBoundMethod();
            const f6 = p._GetNode(6).GetBoundMethod();
            const f7 = p._GetNode(7).GetBoundMethod();
            return () => ((or(or(or(((f0(f1(), 2)) === ("en") ? 1 : 0), ((f2(f3(), 2)) === ("de") ? 1 : 0)), ((f4(f5(), 2)) === ("es") ? 1 : 0)), ((f6(f7(), 2)) === ("fr") ? 1 : 0))) ? (1) : (0));
        },
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => f0("adv");
        },
        () => -2,
        () => "mainmusic",
        p => {
            const f0 = p._GetNode(0).GetBoundMethod();
            return () => f0();
        },
        () => 58,
        () => 59,
        () => "score",
        () => 84,
        () => "{\"c2array\":true,\"size\":[2,29,1],\"data\":[[[3],[9],[11],[12],[13],[14],[16],[17],[19],[20],[21],[22],[23],[25],[26],[27],[28],[29],[30],[31],[32],[33],[36],[37],[39],[40],[42],[45],[46]],[[\"|\"],[\"'\"],[\"Ii.:°\"],[\",`\"],[\";!()\"],[\"-\"],[\"1<>\"],[\"\\\"£ё\"],[\"]\"],[\"[\"],[\"Ll?*\"],[\"JjГг\"],[\"EFef+=ЕЁе\"],[\"Cc7ПСЭпсэ\"],[\"Pp_БРЬбрь\"],[\"DHNVdhnv5ЗНЧзнч\"],[\"BKRSTbkrst34\\\\$ВИКЛТЯвиклтя\"],[\"OUYouy69ЙОУйоу\"],[\"AZaz2€Аа\"],[\"Xx~ХЪхъ\"],[\"GQgq8&\"],[\"0ДЦдц\"],[\"#\"],[\"/ШЫшы\"],[\"MWmwМм\"],[\"Юю\"],[\"ФЩфщ\"],[\"@\"],[\"Жж\"]]]}",
        () => " ",
        p => {
            const n0 = p._GetNode(0);
            const f1 = p._GetNode(1).GetBoundMethod();
            return () => n0.ExpObject(1, f1());
        },
        p => {
            const n0 = p._GetNode(0);
            const f1 = p._GetNode(1).GetBoundMethod();
            return () => n0.ExpObject(0, f1());
        }
    ];


}